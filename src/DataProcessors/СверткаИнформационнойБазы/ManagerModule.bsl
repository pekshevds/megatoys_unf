#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция ПрепятствияДляФормированияОстатков(ДатаСвертки, Организации) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ОтчетыКомитенту", Ложь);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыИАгентскиеУслугиПринятыеОстатки.Организация КАК Организация,
	|	ЗапасыИАгентскиеУслугиПринятыеОстатки.Организация.Представление КАК ОрганизацияПредставление
	|ИЗ
	|	РегистрНакопления.ЗапасыИАгентскиеУслугиПринятые.Остатки(&ДатаСвертки, Организация В (&Организации)
	|	И ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтчетКомитенту)) КАК
	|		ЗапасыИАгентскиеУслугиПринятыеОстатки";
	Запрос.УстановитьПараметр("ДатаСвертки", ДатаСвертки);
	Запрос.УстановитьПараметр("Организации", Организации);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Результат.ОтчетыКомитенту = Истина;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ДокументыОстатковНаДатуСвертки(ДатаСвертки, Автоформирование, Организации) Экспорт

	Результат = Новый Соответствие;
	
	ОписаниеСворачиваемыхРегистров = НовоеОписаниеСворачиваемыхРегистров();

	КоличествоРегистров = ОписаниеСворачиваемыхРегистров.Количество();
	Индекс = 0;
	Для Каждого ТекущееОписаниеСворачиваемыхРегистров Из ОписаниеСворачиваемыхРегистров Цикл
		Индекс = Индекс + 1;
		Процент = Окр(Индекс / КоличествоРегистров * 100);
		ДлительныеОперации.СообщитьПрогресс(Процент, СтрШаблон(НСтр("ru = 'Формируются остатки для регистра ""%1""'"),
			ТекущееОписаниеСворачиваемыхРегистров.Ключ.Синоним));
		Если ЕстьИзмерениеОрганизация(ТекущееОписаниеСворачиваемыхРегистров.Ключ) Тогда
			Для Каждого ТекущаяОрганизация Из Организации Цикл
				//@skip-check query-in-loop
				СформироватьОстаткиПоОписанию(ТекущееОписаниеСворачиваемыхРегистров, ДатаСвертки, Автоформирование,
					ТекущаяОрганизация, Результат);
			КонецЦикла;
			Иначе
			//@skip-check query-in-loop
			СформироватьОстаткиПоОписанию(ТекущееОписаниеСворачиваемыхРегистров, ДатаСвертки, Автоформирование,
				Справочники.Организации.ПустаяСсылка(), Результат);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекущаяОрганизация Из Организации Цикл
		//@skip-check query-in-loop
		СформироватьПрочиеРазделы(ДатаСвертки, ТекущаяОрганизация, Результат);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ПометитьНаУдалениеОбъектыИУдалитьЗаписиРегистровДоДатыСвертки(ДатаСвертки, Организации) Экспорт

	Результат = Новый Массив;

	Для Каждого ТекущаяОрганизация Из Организации Цикл
		ПометитьНаУдалениеОбъектыИУдалитьЗаписиРегистровОрганизации(ДатаСвертки, ТекущаяОрганизация, Результат);
	КонецЦикла;
	ПометитьНаУдалениеЭлементыСправочников(ДатаСвертки, Результат);
	РегистрыСведений.ОстаткиТоваров.ВыполнитьЗаданиеПоЗаписиОстатковВТехническийРегистр();

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовоеОписаниеСворачиваемыхРегистров()
	
	Результат = Новый Соответствие;
	
	Для Каждого ДвижениеВводНачальныхОстатков Из Метаданные.Документы.ВводНачальныхОстатков.Движения Цикл
		Результат[ДвижениеВводНачальныхОстатков] = Метаданные.Документы.ВводНачальныхОстатков;
	КонецЦикла;
	
	Для Каждого ДвижениеКорректировкаРегистров Из Метаданные.Документы.КорректировкаРегистров.Движения Цикл
		Если Результат[ДвижениеКорректировкаРегистров] = Неопределено Тогда
			Результат[ДвижениеКорректировкаРегистров] = Метаданные.Документы.КорректировкаРегистров;
		КонецЕсли;
	КонецЦикла;
	
	// Для ввода остатков нет возможности разделить на принятые и переданные товары
	Результат[Метаданные.РегистрыНакопления.ПрослеживаемыеТовары] = Метаданные.Документы.КорректировкаРегистров;
	
	// Для ввода остатков нет возможности разносить оплату по операциям  
	Результат[Метаданные.РегистрыНакопления.РасчетыПоЭквайрингу] = Метаданные.Документы.КорректировкаРегистров;
	
	Возврат Результат;
	
КонецФункции

Процедура ПометитьНаУдалениеОбъектыИУдалитьЗаписиРегистровОрганизации(ДатаСвертки, Организация, Результат)
	ПометитьНаУдалениеДокументы(ДатаСвертки, Организация, Результат);
	УдалитьЗаписиРегистраБухгалтерии(ДатаСвертки, Организация);
	УдалитьЗаписиРегистровНакопления(ДатаСвертки, Организация);
	УдалитьЗаписиРегистровСведений(ДатаСвертки, Организация);
КонецПроцедуры

Процедура ПометитьНаУдалениеДокументы(ДатаСвертки, Организация, Результат)

	ИсключаемыеДокументы = ИсключаемыеДокументы();
	
	КоличествоДокументов = Метаданные.Документы.Количество();
	Индекс = 0;
	Для Каждого ТекущийДокумент Из Метаданные.Документы Цикл
		Индекс = Индекс + 1;
		Процент = Окр(Индекс / КоличествоДокументов * 100);
		ДлительныеОперации.СообщитьПрогресс(Процент, СтрШаблон(НСтр(
		"ru = 'Помечаются на удаление документы вида ""%1""'"), ТекущийДокумент.Синоним));

		Если ИсключаемыеДокументы[ТекущийДокумент] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			//@skip-check query-in-loop
			ПометитьНаУдалениеДокументыВида(ТекущийДокумент, ДатаСвертки, Организация, Результат);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ШаблонОшибки = НСтр("ru = 'При пометке на удаление документов вида ""%1""'");
			ТекстИсключения = ТекстИсключения(ИнформацияОбОшибке, ТекущийДокумент, ШаблонОшибки);
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура ПометитьНаУдалениеЭлементыСправочников(ДатаСвертки, Результат)

	ОбрабатываемыеСправочники = Новый Массив;
	ОбрабатываемыеСправочники.Добавить(Метаданные.Справочники.ЗаписиКалендаряСотрудника);

	Для Каждого ТипПрисоединенногоФайла Из Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.Типы() Цикл
		ОбрабатываемыйСправочник = Метаданные.НайтиПоТипу(ТипПрисоединенногоФайла);
		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("ВладелецФайла", ОбрабатываемыйСправочник) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ТипВладельца Из ОбрабатываемыйСправочник.Реквизиты.ВладелецФайла.Тип.Типы() Цикл
			ВладелецФайла = Метаданные.НайтиПоТипу(ТипВладельца);
			Если ОбщегоНазначения.ЭтоДокумент(ВладелецФайла) Тогда
				ОбрабатываемыеСправочники.Добавить(ОбрабатываемыйСправочник);
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Индекс = 0;
	Для Каждого ТекущийСправочник Из ОбрабатываемыеСправочники Цикл
		Индекс = Индекс + 1;
		Процент = Окр(Индекс / ОбрабатываемыеСправочники.Количество() * 100);
		ДлительныеОперации.СообщитьПрогресс(Процент, СтрШаблон(НСтр(
		"ru = 'Помечаются на удаление элементы справочника ""%1""'"), ТекущийСправочник.Синоним));

		Попытка
			//@skip-check query-in-loop
			ПометитьНаУдалениеЭлементыСправочникаВида(ТекущийСправочник, ДатаСвертки, Результат);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ШаблонОшибки = НСтр("ru = 'При пометке на удаление элементов справочника ""%1""'");
			ТекстИсключения = ТекстИсключения(ИнформацияОбОшибке, ТекущийСправочник, ШаблонОшибки);
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьЗаписиРегистраБухгалтерии(ДатаСвертки, Организация)

	Для Каждого ТекущийРегистр Из Метаданные.РегистрыБухгалтерии Цикл
		
		ДлительныеОперации.СообщитьПрогресс(0, СтрШаблон(НСтр("ru = 'Очищаются записи регистра бухгалтерии ""%1""'"),
			ТекущийРегистр.Синоним));
			
		Попытка
			//@skip-check query-in-loop
			УдалитьДвиженияПоПодчиненномуРегистру(ТекущийРегистр, ДатаСвертки, Организация);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ШаблонОшибки = НСтр("ru = 'При удалении записей регистра бухгалтерии ""%1""'");
			ТекстИсключения = ТекстИсключения(ИнформацияОбОшибке, ТекущийРегистр, ШаблонОшибки);
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
		
		ПересчитатьИтогиРегистра(ТекущийРегистр);
		
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьЗаписиРегистровНакопления(ДатаСвертки, Организация)

	КоличествоРегистровНакопления = Метаданные.РегистрыНакопления.Количество();
	Индекс = 0;
	Для Каждого ТекущийРегистр Из Метаданные.РегистрыНакопления Цикл
		
		Индекс = Индекс + 1;
		Процент = Окр(Индекс / КоличествоРегистровНакопления * 100);
		ДлительныеОперации.СообщитьПрогресс(Процент, СтрШаблон(НСтр(
			"ru = 'Очищаются записи регистра накопления ""%1""'"), ТекущийРегистр.Синоним));
		
		Попытка
			//@skip-check query-in-loop
			УдалитьДвиженияПоПодчиненномуРегистру(ТекущийРегистр, ДатаСвертки, Организация);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ШаблонОшибки = НСтр("ru = 'При удалении записей регистра накопления ""%1""'");
			ТекстИсключения = ТекстИсключения(ИнформацияОбОшибке, ТекущийРегистр, ШаблонОшибки);
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
		
		ПересчитатьИтогиРегистра(ТекущийРегистр);
		
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьЗаписиРегистровСведений(ДатаСвертки, Организация)

	ИсключаемыеРегистры = ИсключаемыеРегистры();
	ИсключаемыеДокументы = ИсключаемыеТипыДокументов();
	
	КоличествоРегистровСведений = Метаданные.РегистрыСведений.Количество();
	Индекс = 0;
	Для Каждого ТекущийРегистр Из Метаданные.РегистрыСведений Цикл
		
		Индекс = Индекс + 1;
		Процент = Окр(Индекс / КоличествоРегистровСведений * 100);
		ДлительныеОперации.СообщитьПрогресс(Процент, СтрШаблон(НСтр("ru = 'Очищаются записи регистра сведений ""%1""'"),
			ТекущийРегистр.Синоним));
			
		Попытка
			Если ТекущийРегистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
				Если ТекущийРегистр.ПериодичностьРегистраСведений
					<> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
					//@skip-check query-in-loop
					УдалитьДвиженияПоПодчиненномуРегистру(ТекущийРегистр, ДатаСвертки, Организация, ИсключаемыеДокументы);
				Иначе
					//@skip-check query-in-loop
					УдалитьДвиженияПоПодчиненномуРегистру(ТекущийРегистр, '00010101', Организация, ИсключаемыеДокументы);
				КонецЕсли;
			ИначеЕсли ТекущийРегистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый
				И ТекущийРегистр.ПериодичностьРегистраСведений
				<> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				//@skip-check query-in-loop
				УдалитьДвиженияПоРегиструСведенийПериодическомуБезРегистратора(ТекущийРегистр, ДатаСвертки,
					ИсключаемыеРегистры, Организация);
			КонецЕсли;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ШаблонОшибки = НСтр("ru = 'При удалении записей регистра сведений ""%1""'");
			ТекстИсключения = ТекстИсключения(ИнформацияОбОшибке, ТекущийРегистр, ШаблонОшибки);
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
		
		ПересчитатьИтогиРегистра(ТекущийРегистр);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПересчитатьИтогиРегистра(ТекущийРегистр)

	Если Не ПравоДоступа("УправлениеИтогами", ТекущийРегистр) Тогда
		Возврат;
	КонецЕсли;

	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТекущийРегистр.ПолноеИмя());

	Попытка
		МенеджерОбъекта.ПересчитатьИтоги();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ШаблонОшибки = НСтр("ru = 'При пересчете итогов регистра ""%1""'");
		ТекстИсключения = ТекстИсключения(ИнформацияОбОшибке, ТекущийРегистр, ШаблонОшибки);
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;

КонецПроцедуры

Функция ТекстИсключения(ИнформацияОбОшибке, ТекущийОбъект, ШаблонОшибки)
	ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ЗаголовокИсключения = СтрШаблон(ШаблонОшибки, ТекущийОбъект.Синоним);
	ТекстИсключения = СтрШаблон("%1:
								|%2", ЗаголовокИсключения, ПодробноеПредставлениеОшибки);
	Возврат ТекстИсключения;
КонецФункции

Процедура СформироватьОстаткиПоОписанию(ОписаниеСворачиваемыхРегистров, ДатаСвертки, Автоформирование, Организация,
	Результат)
	
	Если ОписаниеСворачиваемыхРегистров.Значение = Метаданные.Документы.ВводНачальныхОстатков Тогда
		СформироватьВводНачальныхОстатков(ОписаниеСворачиваемыхРегистров.Ключ, ДатаСвертки, Автоформирование,
			Организация, Результат);
	ИначеЕсли ОписаниеСворачиваемыхРегистров.Значение = Метаданные.Документы.КорректировкаРегистров Тогда
		СформироватьОстаткиКорректировкойРегистров(ОписаниеСворачиваемыхРегистров.Ключ, ДатаСвертки, Организация, Результат);
	КонецЕсли;
	
	ДобавитьКорректировкуЗапасовБезКоличества(ОписаниеСворачиваемыхРегистров.Ключ, ДатаСвертки, Организация, Результат);
	ДобавитьНезакрытыеРасчетыСКонтрагентами(ОписаниеСворачиваемыхРегистров.Ключ, ДатаСвертки, Организация, Результат);
	
КонецПроцедуры

Процедура ДобавитьКорректировкуЗапасовБезКоличества(ТекущийРегистр, ДатаСвертки, Организация, СформированныеДокументы)
	
	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.Запасы Тогда
		Возврат;
	КонецЕсли;

	СхемаЗапроса = НоваяСхемаЗапросаОстатков(ТекущийРегистр, Организация);
	СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("КоличествоОстаток <= 0");

	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	МоментВремени = Новый Граница(КонецДня(ДатаСвертки), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("ПериодЗаписи", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ТаблицаДвижений = РезультатЗапроса.Выгрузить();

	ДокументДвижения = НоваяКорректировкаРегистров(ТекущийРегистр, ДатаСвертки);
	ШаблонКомментария = НСтр("ru = 'Свертка регистра ""%1"" без количества'", ОбщегоНазначения.КодОсновногоЯзыка());
	ДокументДвижения.Комментарий = СтрШаблон(ШаблонКомментария, ТекущийРегистр.Синоним);
	ЗаписатьДанные(ДокументДвижения);

	НаборЗаписей = РегистрыНакопления[ТекущийРегистр.Имя].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижения.Ссылка);
	НаборЗаписей.Загрузить(ТаблицаДвижений);
	ЗаписатьДанные(НаборЗаписей);

	СформированныеДокументы[ДокументДвижения.Ссылка] = НовоеОписаниеДокумента("");

КонецПроцедуры

Процедура ДобавитьНезакрытыеРасчетыСКонтрагентами(ТекущийРегистр, ДатаСвертки, Организация, СформированныеДокументы)

	Если Не ЭтоРасчетыСКонтрагентами(ТекущийРегистр) Тогда
		Возврат;
	КонецЕсли;

	СхемаЗапроса = НоваяСхемаЗапросаОстатков(ТекущийРегистр, Организация);
	СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("СуммаВалОстаток <= 0");

	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	МоментВремени = Новый Граница(КонецДня(ДатаСвертки), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("ПериодЗаписи", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ТаблицаДвижений = РезультатЗапроса.Выгрузить();

	ДокументДвижения = НоваяКорректировкаРегистров(ТекущийРегистр, ДатаСвертки);
	ШаблонКомментария = НСтр("ru = 'Свертка регистра ""%1"" незакрытые'", ОбщегоНазначения.КодОсновногоЯзыка());
	ДокументДвижения.Комментарий = СтрШаблон(ШаблонКомментария, ТекущийРегистр.Синоним);
	ЗаписатьДанные(ДокументДвижения);

	НаборЗаписей = РегистрыНакопления[ТекущийРегистр.Имя].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижения.Ссылка);
	НаборЗаписей.Загрузить(ТаблицаДвижений);
	ЗаписатьДанные(НаборЗаписей);

	СформированныеДокументы[ДокументДвижения.Ссылка] = НовоеОписаниеДокумента("");

КонецПроцедуры

Процедура СформироватьВводНачальныхОстатков(ТекущийРегистр, ДатаСвертки, Автоформирование, Организация,
	СформированныеДокументы)

	Если Не ОбщегоНазначения.ЭтоРегистрНакопления(ТекущийРегистр) Тогда
		Возврат;
	КонецЕсли;

	Если ТекущийРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
		Возврат;
	КонецЕсли;
	
	Если ОстаткиОтсутствуют(ТекущийРегистр, ДатаСвертки, Организация) Тогда
		Возврат;
	КонецЕсли;

	ДокументДвижения = ВводНачальныхОстатковОбъект(ТекущийРегистр, ДатаСвертки, Автоформирование, Организация);
	ЗаполнитьВводНачальныхОстатков(ДокументДвижения, ТекущийРегистр, ДатаСвертки, Организация);
	ЗаполнитьКомментарийСверткаРегистра(ДокументДвижения, ТекущийРегистр);
	ДокументДвижения.Записать(РежимЗаписиДокумента.Запись);
	ОшибкаПриПроведении = "";
	Попытка
		ДокументДвижения.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ШаблонОшибки = НСтр("ru = 'При записи ""%1""'");
		ОшибкаПриПроведении = ТекстИсключения(ИнформацияОбОшибке, ТекущийРегистр, ШаблонОшибки);
	КонецПопытки;

	СформированныеДокументы[ДокументДвижения.Ссылка] = НовоеОписаниеДокумента(ОшибкаПриПроведении);

КонецПроцедуры

Процедура СформироватьПрочиеРазделы(ДатаСвертки, Организация, СформированныеДокументы)
	
	Если ПрочиеРазделыОтсутствуют(ДатаСвертки, Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийРегистр = Метаданные.РегистрыБухгалтерии.Управленческий;
	
	ДокументДвижения = ВводНачальныхОстатковОбъект(ТекущийРегистр, ДатаСвертки, Ложь, Организация);
	ЗаполнитьВводНачальныхОстатковПрочиеРазделы(ДокументДвижения, ДатаСвертки, Организация);
	ЗаполнитьКомментарийСверткаРегистра(ДокументДвижения, ТекущийРегистр);
	ДокументДвижения.Записать(РежимЗаписиДокумента.Запись);
	ОшибкаПриПроведении = "";
	Попытка
		ДокументДвижения.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ШаблонОшибки = НСтр("ru = 'При записи ""%1""'");
		ОшибкаПриПроведении = ТекстИсключения(ИнформацияОбОшибке, ТекущийРегистр, ШаблонОшибки);
	КонецПопытки;
	
	СформированныеДокументы[ДокументДвижения.Ссылка] = НовоеОписаниеДокумента(ОшибкаПриПроведении);
	
КонецПроцедуры

Функция ПрочиеРазделыОтсутствуют(ДатаСвертки, Организация)
	
	ТекстЗапросаПрочиеРазделы = ТекстЗапросаПрочиеРазделы();
	Запрос = Новый Запрос(ТекстЗапросаПрочиеРазделы);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаСвертки - 1);
	Запрос.УстановитьПараметр("КонецПериода", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ЗаполнитьВводНачальныхОстатковПрочиеРазделы(ВводНачальныхОстатковОбъект, ДатаСвертки, Организация)

	ТекстЗапросаПрочиеРазделы = ТекстЗапросаПрочиеРазделы();
	Запрос = Новый Запрос(ТекстЗапросаПрочиеРазделы);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаСвертки - 1);
	Запрос.УстановитьПараметр("КонецПериода", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ВыборкаПрочиеРазделы = РезультатЗапроса.Выбрать();
	Пока ВыборкаПрочиеРазделы.Следующий() Цикл
		ЗначенияПолейПрочиеРазделы = ЗначенияПолейПрочиеРазделы(ВыборкаПрочиеРазделы);
		Если Не ЗначениеЗаполнено(ЗначенияПолейПрочиеРазделы.ВидДвижения) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрокаПрочиеРазделы = ВводНачальныхОстатковОбъект.ПрочиеРазделы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПрочиеРазделы, ЗначенияПолейПрочиеРазделы);
	КонецЦикла;
КонецПроцедуры

Функция ЗначенияПолейПрочиеРазделы(ВыборкаПрочиеРазделы)
	Результат = Новый Структура;
	Результат.Вставить("ВидДвижения", Перечисления.ДебетКредит.ПустаяСсылка());
	Результат.Вставить("Счет", ВыборкаПрочиеРазделы.Счет);
	Результат.Вставить("Валюта", ВыборкаПрочиеРазделы.Валюта);
	Результат.Вставить("Сумма", 0);
	Результат.Вставить("СуммаВал", 0);
	Если ЗначениеЗаполнено(ВыборкаПрочиеРазделы.СуммаНачальныйОстатокДт)
		И ВыборкаПрочиеРазделы.СуммаНачальныйОстатокДт > ВыборкаПрочиеРазделы.СуммаОборотДт Тогда
		Результат.ВидДвижения = Перечисления.ДебетКредит.Дебет;
		Результат.Сумма = ВыборкаПрочиеРазделы.СуммаНачальныйОстатокДт - ВыборкаПрочиеРазделы.СуммаОборотДт;
		Результат.СуммаВал = ВыборкаПрочиеРазделы.СуммаВалНачальныйОстатокДт - ВыборкаПрочиеРазделы.СуммаВалОборотДт;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаПрочиеРазделы.СуммаНачальныйОстатокКт)
		И ВыборкаПрочиеРазделы.СуммаНачальныйОстатокКт > ВыборкаПрочиеРазделы.СуммаОборотКт Тогда
		Результат.ВидДвижения = Перечисления.ДебетКредит.Кредит;
		Результат.Сумма = ВыборкаПрочиеРазделы.СуммаНачальныйОстатокКт - ВыборкаПрочиеРазделы.СуммаОборотКт;
		Результат.СуммаВал = ВыборкаПрочиеРазделы.СуммаВалНачальныйОстатокКт - ВыборкаПрочиеРазделы.СуммаВалОборотКт;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ТекстЗапросаПрочиеРазделы()
	Результат =
	"ВЫБРАТЬ
	|	УправленческийОстаткиИОбороты.Счет КАК Счет,
	|	УправленческийОстаткиИОбороты.Валюта КАК Валюта,
	|	УправленческийОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СуммаНачальныйОстатокДт,
	|	УправленческийОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт КАК СуммаНачальныйОстатокКт,
	|	УправленческийОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	УправленческийОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт,
	|	УправленческийОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СуммаКонечныйОстатокДт,
	|	УправленческийОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК СуммаКонечныйОстатокКт,
	|	УправленческийОстаткиИОбороты.СуммаВалНачальныйРазвернутыйОстатокДт КАК СуммаВалНачальныйОстатокДт,
	|	УправленческийОстаткиИОбороты.СуммаВалНачальныйРазвернутыйОстатокКт КАК СуммаВалНачальныйОстатокКт,
	|	УправленческийОстаткиИОбороты.СуммаВалОборотДт КАК СуммаВалОборотДт,
	|	УправленческийОстаткиИОбороты.СуммаВалОборотКт КАК СуммаВалОборотКт,
	|	УправленческийОстаткиИОбороты.СуммаВалКонечныйРазвернутыйОстатокДт КАК СуммаВалКонечныйОстатокДт,
	|	УправленческийОстаткиИОбороты.СуммаВалКонечныйРазвернутыйОстатокКт КАК СуммаВалКонечныйОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Управленческий.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,,
	|		Счет <> ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный), Организация = &Организация
	|	И СценарийПланирования = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический)) КАК УправленческийОстаткиИОбороты";
	Возврат Результат;
КонецФункции

Функция ВводНачальныхОстатковОбъект(ТекущийРегистр, ДатаСвертки, Автоформирование, Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатков.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	|ГДЕ
	|	ВводНачальныхОстатков.ПометкаУдаления = ЛОЖЬ
	|	И ВводНачальныхОстатков.РазделУчета = &РазделУчета
	|	И ВводНачальныхОстатков.Дата = &ДатаСвертки
	|	И ВводНачальныхОстатков.Организация = &Организация";
	РазделУчета = РазделУчета(ТекущийРегистр);
	Запрос.УстановитьПараметр("РазделУчета", РазделУчета);
	Запрос.УстановитьПараметр("ДатаСвертки", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Результат = НовыйВводНачальныхОстатков(ТекущийРегистр, ДатаСвертки, Автоформирование, Организация);
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Результат = Выборка.Ссылка.ПолучитьОбъект();
	Возврат Результат;
	
КонецФункции

Функция НовыйВводНачальныхОстатков(ТекущийРегистр, ДатаСвертки, Автоформирование, Организация)

	НовыйВводНачальныхОстатков = Документы.ВводНачальныхОстатков.СоздатьДокумент();
	НовыйВводНачальныхОстатков.Заполнить(Неопределено);
	НовыйВводНачальныхОстатков.Автор = Пользователи.ТекущийПользователь();
	НовыйВводНачальныхОстатков.Организация = Организация;
	НовыйВводНачальныхОстатков.РазделУчета = РазделУчета(ТекущийРегистр);
	НовыйВводНачальныхОстатков.Дата = ДатаСвертки;
	Если ЭтоРасчетыСКонтрагентами(ТекущийРегистр) Тогда
		НовыйВводНачальныхОстатков.Автоформирование = Автоформирование;
	КонецЕсли;
	НовыйВводНачальныхОстатков.УстановитьНовыйНомер();

	Возврат НовыйВводНачальныхОстатков;

КонецФункции

Функция ЭтоРасчетыСКонтрагентами(ТекущийРегистр)
	
	Если ТекущийРегистр = Метаданные.РегистрыНакопления.РасчетыСПокупателями Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТекущийРегистр = Метаданные.РегистрыНакопления.РасчетыСПоставщиками Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьВводНачальныхОстатков(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация)
	ЗаполнитьВводНачальныхОстатковВнеоборотныеАктивы(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация);
	ЗаполнитьВводНачальныхОстатковРасчетыСПокупателями(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация);
	ЗаполнитьВводНачальныхОстатковРасчетыСПоставщиками(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация);
	ЗаполнитьВводНачальныхОстатковРасчетыПоКредитамИЗаймам(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация);
	ЗаполнитьВводНачальныхОстатковРасчетыПоНалогам(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация);
	ЗаполнитьВводНачальныхОстатковЗапасы(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация);
	ЗаполнитьВводНачальныхОстатковПрямыеЗатраты(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация);
	ЗаполнитьВводНачальныхОстатковЗапасыПереданные(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация);
	ЗаполнитьВводНачальныхОстатковЗапасыПринятые(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация);
	ЗаполнитьВводНачальныхОстатковЗапасыВРазрезеГТД(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация);
	ЗаполнитьВводНачальныхОстатковЗапасыПереданныеВРазрезеГТД(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация);
	ЗаполнитьВводНачальныхОстатковЗапасыПринятыеВРазрезеГТД(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация);
	ЗаполнитьВводНачальныхОстатковДенежныеСредства(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация);
	ЗаполнитьВводНачальныхОстатковРасчетыСПодотчетниками(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация);
	ЗаполнитьВводНачальныхОстатковРасчетыСПрочимиКонтрагентами(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация);
	ЗаполнитьВводНачальныхОстатковРасчетыСПерсоналом(ДокументОбъект, ТекущийРегистр, ДатаСвертки, Организация);
КонецПроцедуры

Процедура ЗаполнитьВводНачальныхОстатковВнеоборотныеАктивы(ВводНачальныхОстатковОбъект, ТекущийРегистр, ДатаСвертки,
	Организация)

	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.ВнеоборотныеАктивы Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаВнеоборотныеАктивы = ТекстЗапросаВнеоборотныеАктивы();
	Запрос = Новый Запрос(ТекстЗапросаВнеоборотныеАктивы);
	МоментВремени = Новый Граница(КонецДня(ДатаСвертки), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("ПериодЗаписи", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаВА = РезультатЗапроса.Выбрать();
	Пока ВыборкаВА.Следующий() Цикл
		НоваяСтрокаВА = ВводНачальныхОстатковОбъект.ВнеоборотныеАктивы.Добавить();
		НоваяСтрокаВА.ВнеоборотныйАктив = ВыборкаВА.ВнеоборотныйАктив;
		НоваяСтрокаВА.ОбъемПродукцииРаботДляВычисленияАмортизации = ВыборкаВА.ОбъемПродукцииРаботДляВычисленияАмортизации;
		НоваяСтрокаВА.НачислятьАмортизацию = ВыборкаВА.НачислятьАмортизацию;
		НоваяСтрокаВА.СрокИспользованияДляВычисленияАмортизации = ВыборкаВА.СрокИспользованияДляВычисленияАмортизации;
		НоваяСтрокаВА.ТекущаяВыработкаКоличество = ВыборкаВА.ТекущаяВыработкаКоличество;
		НоваяСтрокаВА.ТекущаяНачисленнаяАмортизация = ВыборкаВА.ТекущаяНачисленнаяАмортизация;
		НоваяСтрокаВА.ТекущееСостояниеВнеоборотногоАктива = ВыборкаВА.ТекущееСостояниеВнеоборотногоАктива;
		НоваяСтрокаВА.СтруктурнаяЕдиница = ВыборкаВА.СтруктурнаяЕдиница;
		НоваяСтрокаВА.СчетЗатрат = ВыборкаВА.СчетЗатрат;
		НоваяСтрокаВА.НаправлениеДеятельности = ВыборкаВА.НаправлениеДеятельности;
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаВнеоборотныеАктивы()
	Результат = 
	"ВЫБРАТЬ
	|	ВнеоборотныеАктивыОстатки.Организация КАК Организация,
	|	ВнеоборотныеАктивыОстатки.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|	ПараметрыВнеоборотныхАктивовСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации КАК
	|		ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	СостоянияВнеоборотныхАктивовСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	ПараметрыВнеоборотныхАктивовСрезПоследних.СрокИспользованияДляВычисленияАмортизации КАК
	|		СрокИспользованияДляВычисленияАмортизации,
	|	ВыработкаВнеоборотныхАктивовОбороты.КоличествоОборот КАК ТекущаяВыработкаКоличество,
	|	ВнеоборотныеАктивыОстатки.АмортизацияОстаток КАК ТекущаяНачисленнаяАмортизация,
	|	СостоянияВнеоборотныхАктивовСрезПоследних.Состояние КАК ТекущееСостояниеВнеоборотногоАктива,
	|	ПараметрыВнеоборотныхАктивовСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПараметрыВнеоборотныхАктивовСрезПоследних.СчетЗатрат КАК СчетЗатрат,
	|	ПараметрыВнеоборотныхАктивовСрезПоследних.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	РегистрНакопления.ВнеоборотныеАктивы.Остатки(&МоментВремени, Организация = &Организация) КАК ВнеоборотныеАктивыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаВнеоборотныхАктивов.Обороты(, &МоментВремени,,
	|			Организация = &Организация) КАК ВыработкаВнеоборотныхАктивовОбороты
	|		ПО ВнеоборотныеАктивыОстатки.ВнеоборотныйАктив = ВыработкаВнеоборотныхАктивовОбороты.ВнеоборотныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыВнеоборотныхАктивов.СрезПоследних(&МоментВремени,
	|			Организация = &Организация) КАК ПараметрыВнеоборотныхАктивовСрезПоследних
	|		ПО ВнеоборотныеАктивыОстатки.ВнеоборотныйАктив = ПараметрыВнеоборотныхАктивовСрезПоследних.ВнеоборотныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВнеоборотныхАктивов.СрезПоследних(&МоментВремени,
	|			Организация = &Организация) КАК СостоянияВнеоборотныхАктивовСрезПоследних
	|		ПО ВнеоборотныеАктивыОстатки.ВнеоборотныйАктив = СостоянияВнеоборотныхАктивовСрезПоследних.ВнеоборотныйАктив";
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьВводНачальныхОстатковРасчетыСПокупателями(ВводНачальныхОстатковОбъект, ТекущийРегистр, ДатаСвертки,
	Организация)

	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.РасчетыСПокупателями Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаРасчетыСПокупателями = ТекстЗапросаРасчетыСПокупателями();
	Запрос = Новый Запрос(ТекстЗапросаРасчетыСПокупателями);
	МоментВремени = Новый Граница(КонецДня(ДатаСвертки), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("ПериодЗаписи", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаРасчетыСПокупателями = РезультатЗапроса.Выбрать();
	Пока ВыборкаРасчетыСПокупателями.Следующий() Цикл
		НоваяСтрокаРасчетыСПокупателями = ВводНачальныхОстатковОбъект.РасчетыСПокупателями.Добавить();
		НоваяСтрокаРасчетыСПокупателями.Контрагент = ВыборкаРасчетыСПокупателями.Контрагент;
		НоваяСтрокаРасчетыСПокупателями.Договор = ВыборкаРасчетыСПокупателями.Договор;
		Если ВыборкаРасчетыСПокупателями.ТипРасчетов = Перечисления.ТипыРасчетов.Аванс Тогда
			НоваяСтрокаРасчетыСПокупателями.ПризнакАванса = Истина;
		КонецЕсли;
		НоваяСтрокаРасчетыСПокупателями.ЗаказПокупателя = ВыборкаРасчетыСПокупателями.Заказ;
		Если Не ВводНачальныхОстатковОбъект.Автоформирование Тогда
			НоваяСтрокаРасчетыСПокупателями.Документ = ВыборкаРасчетыСПокупателями.Документ;
		КонецЕсли;
		НоваяСтрокаРасчетыСПокупателями.Сумма = ВыборкаРасчетыСПокупателями.СуммаОстаток;
		НоваяСтрокаРасчетыСПокупателями.СуммаИнт = ВыборкаРасчетыСПокупателями.СуммаИнтОстаток;
		НоваяСтрокаРасчетыСПокупателями.СуммаВал = ВыборкаРасчетыСПокупателями.СуммаВалОстаток;
		НоваяСтрокаРасчетыСПокупателями.СуммаВалИнт = ВыборкаРасчетыСПокупателями.СуммаВалИнтОстаток;
		НоваяСтрокаРасчетыСПокупателями.СуммаРег = ВыборкаРасчетыСПокупателями.СуммаРегОстаток;
		НоваяСтрокаРасчетыСПокупателями.СуммаРегИнт = ВыборкаРасчетыСПокупателями.СуммаРегИнтОстаток;
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаРасчетыСПокупателями()
	Результат =
	"ВЫБРАТЬ
	|	РасчетыСПокупателямиОстатки.Организация КАК Организация,
	|	РасчетыСПокупателямиОстатки.ТипРасчетов КАК ТипРасчетов,
	|	РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.СуммаОстаток КАК СуммаОстаток,
	|	РасчетыСПокупателямиОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
	|	РасчетыСПокупателямиОстатки.СуммаРегОстаток КАК СуммаРегОстаток,
	|	РасчетыСПокупателямиОстатки.СуммаИнтОстаток КАК СуммаИнтОстаток,
	|	РасчетыСПокупателямиОстатки.СуммаВалИнтОстаток КАК СуммаВалИнтОстаток,
	|	РасчетыСПокупателямиОстатки.СуммаРегИнтОстаток КАК СуммаРегИнтОстаток
	|ПОМЕСТИТЬ ВТРасчетыСПокупателямиОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(&МоментВремени, Организация = &Организация) КАК
	|		РасчетыСПокупателямиОстатки
	|ГДЕ
	|	РасчетыСПокупателямиОстатки.СуммаВалОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Контрагент КАК Контрагент,
	|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату КАК СчетНаОплату
	|ПОМЕСТИТЬ ВТОплатаСчетовИЗаказовОбороты
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(, &МоментВремени,, Организация = &Организация) КАК
	|		ОплатаСчетовИЗаказовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасчетыСПокупателямиОстатки.Организация КАК Организация,
	|	ВТРасчетыСПокупателямиОстатки.ТипРасчетов КАК ТипРасчетов,
	|	ВТРасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
	|	ВТРасчетыСПокупателямиОстатки.Договор КАК Договор,
	|	ВТРасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	ВТРасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	ВТРасчетыСПокупателямиОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ВТРасчетыСПокупателямиОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
	|	ВТРасчетыСПокупателямиОстатки.СуммаРегОстаток КАК СуммаРегОстаток,
	|	ВТРасчетыСПокупателямиОстатки.СуммаИнтОстаток КАК СуммаИнтОстаток,
	|	ВТРасчетыСПокупателямиОстатки.СуммаВалИнтОстаток КАК СуммаВалИнтОстаток,
	|	ВТРасчетыСПокупателямиОстатки.СуммаРегИнтОстаток КАК СуммаРегИнтОстаток
	|ИЗ
	|	ВТРасчетыСПокупателямиОстатки КАК ВТРасчетыСПокупателямиОстатки";
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьВводНачальныхОстатковРасчетыСПоставщиками(ВводНачальныхОстатковОбъект, ТекущийРегистр, ДатаСвертки,
	Организация)

	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.РасчетыСПоставщиками Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаРасчетыСПоставщиками = ТекстЗапросаРасчетыСПоставщиками();
	Запрос = Новый Запрос(ТекстЗапросаРасчетыСПоставщиками);
	МоментВремени = Новый Граница(КонецДня(ДатаСвертки), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("ПериодЗаписи", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаРасчетыСПоставщиками = РезультатЗапроса.Выбрать();
	Пока ВыборкаРасчетыСПоставщиками.Следующий() Цикл
		НоваяСтрокаРасчетыСПоставщиками = ВводНачальныхОстатковОбъект.РасчетыСПоставщиками.Добавить();
		НоваяСтрокаРасчетыСПоставщиками.Контрагент = ВыборкаРасчетыСПоставщиками.Контрагент;
		НоваяСтрокаРасчетыСПоставщиками.Договор = ВыборкаРасчетыСПоставщиками.Договор;
		Если ВыборкаРасчетыСПоставщиками.ТипРасчетов = Перечисления.ТипыРасчетов.Аванс Тогда
			НоваяСтрокаРасчетыСПоставщиками.ПризнакАванса = Истина;
		КонецЕсли;
		НоваяСтрокаРасчетыСПоставщиками.ЗаказПоставщику = ВыборкаРасчетыСПоставщиками.Заказ;
		Если Не ВводНачальныхОстатковОбъект.Автоформирование Тогда
			НоваяСтрокаРасчетыСПоставщиками.Документ = ВыборкаРасчетыСПоставщиками.Документ;
		КонецЕсли;
		НоваяСтрокаРасчетыСПоставщиками.Сумма = ВыборкаРасчетыСПоставщиками.СуммаОстаток;
		НоваяСтрокаРасчетыСПоставщиками.СуммаИнт = ВыборкаРасчетыСПоставщиками.СуммаИнтОстаток;
		НоваяСтрокаРасчетыСПоставщиками.СуммаВал = ВыборкаРасчетыСПоставщиками.СуммаВалОстаток;
		НоваяСтрокаРасчетыСПоставщиками.СуммаВалИнт = ВыборкаРасчетыСПоставщиками.СуммаВалИнтОстаток;
		НоваяСтрокаРасчетыСПоставщиками.СуммаРег = ВыборкаРасчетыСПоставщиками.СуммаРегОстаток;
		НоваяСтрокаРасчетыСПоставщиками.СуммаРегИнт = ВыборкаРасчетыСПоставщиками.СуммаРегИнтОстаток;
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаРасчетыСПоставщиками()
	Результат =
	"ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстатки.Организация КАК Организация,
	|	РасчетыСПоставщикамиОстатки.ТипРасчетов КАК ТипРасчетов,
	|	РасчетыСПоставщикамиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток,
	|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
	|	РасчетыСПоставщикамиОстатки.СуммаРегОстаток КАК СуммаРегОстаток,
	|	РасчетыСПоставщикамиОстатки.СуммаИнтОстаток КАК СуммаИнтОстаток,
	|	РасчетыСПоставщикамиОстатки.СуммаВалИнтОстаток КАК СуммаВалИнтОстаток,
	|	РасчетыСПоставщикамиОстатки.СуммаРегИнтОстаток КАК СуммаРегИнтОстаток
	|ПОМЕСТИТЬ ВТРасчетыСПоставщикамиОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&МоментВремени, Организация = &Организация) КАК
	|		РасчетыСПоставщикамиОстатки
	|ГДЕ
	|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Контрагент КАК Контрагент,
	|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату КАК СчетНаОплату
	|ПОМЕСТИТЬ ВТОплатаСчетовИЗаказовОбороты
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(, &МоментВремени,, Организация = &Организация) КАК
	|		ОплатаСчетовИЗаказовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасчетыСПоставщикамиОстатки.Организация КАК Организация,
	|	ВТРасчетыСПоставщикамиОстатки.ТипРасчетов КАК ТипРасчетов,
	|	ВТРасчетыСПоставщикамиОстатки.Контрагент КАК Контрагент,
	|	ВТРасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|	ВТРасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	ВТРасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	ВТРасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ВТРасчетыСПоставщикамиОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
	|	ВТРасчетыСПоставщикамиОстатки.СуммаРегОстаток КАК СуммаРегОстаток,
	|	ВТРасчетыСПоставщикамиОстатки.СуммаИнтОстаток КАК СуммаИнтОстаток,
	|	ВТРасчетыСПоставщикамиОстатки.СуммаВалИнтОстаток КАК СуммаВалИнтОстаток,
	|	ВТРасчетыСПоставщикамиОстатки.СуммаРегИнтОстаток КАК СуммаРегИнтОстаток
	|ИЗ
	|	ВТРасчетыСПоставщикамиОстатки КАК ВТРасчетыСПоставщикамиОстатки";
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьВводНачальныхОстатковРасчетыПоНалогам(ВводНачальныхОстатковОбъект, ТекущийРегистр, ДатаСвертки,
	Организация)

	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.РасчетыПоНалогам Тогда
		Возврат;
	КонецЕсли;

	Запрос = НовыйЗапросОстатков(ТекущийРегистр, ДатаСвертки, Организация);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ВводНачальныхОстатковОбъект.РасчетыПоНалогам.Добавить();
		НоваяСтрока.ВидНалога = Выборка.ВидНалога;
		НоваяСтрока.Сумма = Выборка.Сумма;
		НоваяСтрока.СрокУплаты = Выборка.СрокУплаты;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьВводНачальныхОстатковРасчетыПоКредитамИЗаймам(ВводНачальныхОстатковОбъект, ТекущийРегистр, ДатаСвертки,
	Организация)

	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.РасчетыПоКредитамИЗаймам Тогда
		Возврат;
	КонецЕсли;

	Запрос = НовыйЗапросОстатков(ТекущийРегистр, ДатаСвертки, Организация);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ВводНачальныхОстатковОбъект.РасчетыПоКредитамИЗаймам.Добавить();
		НоваяСтрока.ДоговорКредитаЗайма = Выборка.ДоговорКредитаЗайма;
		НоваяСтрока.Курс = 1;
		НоваяСтрока.Кратность = 1;
		НоваяСтрока.ОсновнойДолг = Выборка.ОсновнойДолг;
		НоваяСтрока.ОсновнойДолгВал = Выборка.ОсновнойДолгВал;
		НоваяСтрока.Проценты = Выборка.Проценты;
		НоваяСтрока.ПроцентыВал = Выборка.ПроцентыВал;
		НоваяСтрока.Комиссия = Выборка.Комиссия;
		НоваяСтрока.КомиссияВал = Выборка.КомиссияВал;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьВводНачальныхОстатковЗапасы(ВводНачальныхОстатковОбъект, ТекущийРегистр, ДатаСвертки, Организация)

	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.Запасы Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаВТСтавкиНДС = Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС(ДатаСвертки);
	ТекстЗапросаЗапасы = ТекстЗапросаЗапасы();
	Запрос = Новый Запрос(ТекстЗапросаВТСтавкиНДС + ТекстЗапросаЗапасы);
	МоментВремени = Новый Граница(КонецДня(ДатаСвертки), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("ПериодЗаписи", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ИндексПоследнегоЗапроса = РезультатыЗапроса.ВГраница();
	Если РезультатыЗапроса[ИндексПоследнегоЗапроса].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЗапасы = РезультатыЗапроса[ИндексПоследнегоЗапроса].Выбрать();
	Пока ВыборкаЗапасы.Следующий() Цикл
		НоваяСтрокаЗапасы = ВводНачальныхОстатковОбъект.Запасы.Добавить();
		НоваяСтрокаЗапасы.СтруктурнаяЕдиница = ВыборкаЗапасы.СтруктурнаяЕдиница;
		НоваяСтрокаЗапасы.Ячейка = ВыборкаЗапасы.Ячейка;
		НоваяСтрокаЗапасы.Номенклатура = ВыборкаЗапасы.Номенклатура;
		НоваяСтрокаЗапасы.ЕдиницаИзмерения = ВыборкаЗапасы.ЕдиницаИзмерения;
		НоваяСтрокаЗапасы.Характеристика = ВыборкаЗапасы.Характеристика;
		НоваяСтрокаЗапасы.Партия = ВыборкаЗапасы.Партия;
		НоваяСтрокаЗапасы.ЗаказПокупателя = ВыборкаЗапасы.ЗаказПокупателя;
		НоваяСтрокаЗапасы.Количество = ВыборкаЗапасы.КоличествоОстаток;
		НоваяСтрокаЗапасы.КоличествоИнт = ВыборкаЗапасы.КоличествоИнтОстаток;
		НоваяСтрокаЗапасы.Сумма = ВыборкаЗапасы.СуммаОстаток;
		НоваяСтрокаЗапасы.СуммаИнт = ВыборкаЗапасы.СуммаИнтОстаток;
		НоваяСтрокаЗапасы.СуммаБезНДС = ВыборкаЗапасы.СуммаБезНДСОстаток;
		НоваяСтрокаЗапасы.СуммаБезНДСИнт = ВыборкаЗапасы.СуммаБезНДСИнтОстаток;
		НоваяСтрокаЗапасы.СуммаНДС = ВыборкаЗапасы.СуммаОстаток - ВыборкаЗапасы.СуммаБезНДСОстаток;
		НоваяСтрокаЗапасы.СтавкаНДС = ВыборкаЗапасы.СтавкаНДС;
		НоваяСтрокаЗапасы.КлючСвязи = НоваяСтрокаЗапасы.НомерСтроки;
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("СтруктурнаяЕдиница");
	ПараметрыОтбора.Вставить("Номенклатура");
	ПараметрыОтбора.Вставить("Характеристика");
	ПараметрыОтбора.Вставить("Партия");
	ПараметрыОтбора.Вставить("Ячейка");
	ВыборкаСерииНоменклатуры = РезультатыЗапроса[ИндексПоследнегоЗапроса - 1].Выбрать();
	СерииПоКлючуСвязи = Новый Соответствие;
	Пока ВыборкаСерииНоменклатуры.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ВыборкаСерииНоменклатуры);
		СтрокиПоИзмерениям = ВводНачальныхОстатковОбъект.Запасы.НайтиСтроки(ПараметрыОтбора);
		Если Не ЗначениеЗаполнено(СтрокиПоИзмерениям) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрокаСерииНоменклатуры = ВводНачальныхОстатковОбъект.СерииНоменклатуры.Добавить();
		НоваяСтрокаСерииНоменклатуры.КлючСвязи = СтрокиПоИзмерениям[0].КлючСвязи;
		НоваяСтрокаСерииНоменклатуры.Количество = ВыборкаСерииНоменклатуры.КоличествоОстаток;
		НоваяСтрокаСерииНоменклатуры.Серия = ВыборкаСерииНоменклатуры.Серия;
		Если СерииПоКлючуСвязи[СтрокиПоИзмерениям[0].КлючСвязи] = Неопределено Тогда
			СерииПоКлючуСвязи[СтрокиПоИзмерениям[0].КлючСвязи] = Новый Массив;
		КонецЕсли;
		СерииПоКлючуСвязи[СтрокиПоИзмерениям[0].КлючСвязи].Добавить(ВыборкаСерииНоменклатуры.Серия);
	КонецЦикла;
	
	Для Каждого ТекущаяСерия Из СерииПоКлючуСвязи Цикл
		ОтборПоКлючуСвязи = Новый Структура("КлючСвязи", ТекущаяСерия.Ключ);
		СтрокиПоКлючуСвязи = ВводНачальныхОстатковОбъект.Запасы.НайтиСтроки(ОтборПоКлючуСвязи);
		Если Не ЗначениеЗаполнено(СтрокиПоКлючуСвязи) Тогда
			Возврат;
		КонецЕсли;
		СтрокиПоКлючуСвязи[0].СерииНоменклатуры = СтрСоединить(ТекущаяСерия.Значение, "; ");
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаЗапасы()
	Результат =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ЗапасыОстатки.КоличествоИнтОстаток КАК КоличествоИнтОстаток,
	|	ЗапасыОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ЗапасыОстатки.СуммаИнтОстаток КАК СуммаИнтОстаток,
	|	ЗапасыОстатки.СуммаБезНДСОстаток КАК СуммаБезНДСОстаток,
	|	ЗапасыОстатки.СуммаБезНДСИнтОстаток КАК СуммаБезНДСИнтОстаток
	|ПОМЕСТИТЬ ВТЗапасыОстатки
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(&МоментВремени, Организация = &Организация
	|	И СтруктурнаяЕдиница ССЫЛКА Справочник.СтруктурныеЕдиницы
	|	И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И (Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	ИЛИ Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.СобственныеЗапасы))) КАК ЗапасыОстатки
	|ГДЕ
	|	ЗапасыОстатки.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыНаСкладахОстатки.Организация,
	|	ЗапасыНаСкладахОстатки.Номенклатура,
	|	ЗапасыНаСкладахОстатки.Характеристика,
	|	ЗапасыНаСкладахОстатки.Партия,
	|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница,
	|	ЗапасыНаСкладахОстатки.Ячейка,
	|	ЗапасыНаСкладахОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ ВТЗапасыНаСкладахОстатки
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах.Остатки(&МоментВремени, Организация = &Организация
	|	И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И (Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	ИЛИ Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.СобственныеЗапасы))) КАК ЗапасыНаСкладахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатурыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СерииНоменклатурыОстатки.Номенклатура КАК Номенклатура,
	|	СерииНоменклатурыОстатки.Характеристика КАК Характеристика,
	|	СерииНоменклатурыОстатки.Партия КАК Партия,
	|	СерииНоменклатурыОстатки.Серия КАК Серия,
	|	СерииНоменклатурыОстатки.Ячейка КАК Ячейка,
	|	СерииНоменклатурыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.СерииНоменклатуры.Остатки(&МоментВремени, Организация = &Организация
	|	И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И (Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	ИЛИ Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.СобственныеЗапасы))) КАК СерииНоменклатурыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗапасыОстатки.Организация КАК Организация,
	|	ВТЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ВТЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТЗапасыОстатки.Характеристика КАК Характеристика,
	|	ВТЗапасыОстатки.Партия КАК Партия,
	|	ВТЗапасыНаСкладахОстатки.Ячейка КАК Ячейка,
	|	ВТЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТЗапасыОстатки.КоличествоИнтОстаток КАК КоличествоИнтОстаток,
	|	ВТЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВТЗапасыОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ВТЗапасыОстатки.СуммаИнтОстаток КАК СуммаИнтОстаток,
	|	ВТЗапасыОстатки.СуммаБезНДСОстаток КАК СуммаБезНДСОстаток,
	|	ВТЗапасыОстатки.СуммаБезНДСИнтОстаток КАК СуммаБезНДСИнтОстаток,
	|	ВЫБОР
	|		КОГДА ВТСтавкиНоменклатура.СтавкаНДС ЕСТЬ NULL
	|			ТОГДА ВТСтавкиОрганизация.СтавкаНДС
	|		ИНАЧЕ ВТСтавкиНоменклатура.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС
	|ИЗ
	|	ВТЗапасыОстатки КАК ВТЗапасыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗапасыНаСкладахОстатки КАК ВТЗапасыНаСкладахОстатки
	|		ПО ВТЗапасыОстатки.Организация = ВТЗапасыНаСкладахОстатки.Организация
	|		И ВТЗапасыОстатки.СтруктурнаяЕдиница = ВТЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
	|		И ВТЗапасыОстатки.Номенклатура = ВТЗапасыНаСкладахОстатки.Номенклатура
	|		И ВТЗапасыОстатки.Характеристика = ВТЗапасыНаСкладахОстатки.Характеристика
	|		И ВТЗапасыОстатки.Партия = ВТЗапасыНаСкладахОстатки.Партия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНоменклатура
	|		ПО ВТЗапасыОстатки.Номенклатура.ВидСтавкиНДС = ВТСтавкиНоменклатура.ВидСтавкиНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиОрганизация
	|		ПО ВТЗапасыОстатки.Организация.ВидСтавкиНДСПоУмолчанию = ВТСтавкиОрганизация.ВидСтавкиНДС";
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьВводНачальныхОстатковПрямыеЗатраты(ВводНачальныхОстатковОбъект, ТекущийРегистр, ДатаСвертки,
	Организация)

	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.Запасы Тогда
		Возврат;
	КонецЕсли;

	СхемаЗапроса = НоваяСхемаЗапросаОстатков(ТекущийРегистр, Организация);
	СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
		"Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)");

	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	МоментВремени = Новый Граница(КонецДня(ДатаСвертки), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("ПериодЗаписи", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ВводНачальныхОстатковОбъект.ПрямыеЗатраты.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.ЗаказПокупателя = Выборка.ЗаказПокупателя;
		НоваяСтрока.СчетЗатрат = Выборка.СчетУчета;
		НоваяСтрока.Сумма = Выборка.Сумма;
		НоваяСтрока.СуммаБезНДС = Выборка.СуммаБезНДС;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьВводНачальныхОстатковЗапасыПереданные(ВводНачальныхОстатковОбъект, ТекущийРегистр, ДатаСвертки,
	Организация)
	
	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.ЗапасыПереданные Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗапасыПереданные();
	МоментВремени = Новый Граница(КонецДня(ДатаСвертки), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("ПериодЗаписи", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ВидыОперацийРасходнаяНакладная = Перечисления.ВидыОперацийРасходнаяНакладная.ПоТипуПриемаПередачиТоваров();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ВводНачальныхОстатковОбъект.ЗапасыПереданные.Добавить();
		НоваяСтрока.ВидОперации = ВидыОперацийРасходнаяНакладная[Выборка.ТипПриемаПередачи];
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Характеристика = Выборка.Характеристика;
		НоваяСтрока.Партия = Выборка.Партия;
		НоваяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Контрагент = Выборка.Контрагент;
		НоваяСтрока.Договор = Выборка.Договор;
		НоваяСтрока.Заказ = Выборка.Заказ;
		НоваяСтрока.Количество = Выборка.КоличествоОстаток;
		НоваяСтрока.СуммаРасчетов = Выборка.СуммаРасчетовОстаток;
		НоваяСтрока.Себестоимость = Выборка.СуммаОстаток;
		НоваяСтрока.СебестоимостьБезНДС = Выборка.СуммаБезНДСОстаток;
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаЗапасыПереданные()
	Результат = 
	"ВЫБРАТЬ
	|	ЗапасыПереданныеОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыПереданныеОстатки.Характеристика КАК Характеристика,
	|	ЗапасыПереданныеОстатки.Партия КАК Партия,
	|	ЗапасыПереданныеОстатки.Контрагент КАК Контрагент,
	|	ЗапасыПереданныеОстатки.Договор КАК Договор,
	|	ЗапасыПереданныеОстатки.Заказ КАК Заказ,
	|	ЗапасыПереданныеОстатки.ТипПриемаПередачи КАК ТипПриемаПередачи,
	|	ЗапасыПереданныеОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ЗапасыПереданныеОстатки.СуммаРасчетовОстаток КАК СуммаРасчетовОстаток
	|ПОМЕСТИТЬ ВТЗапасыПереданныеОстатки
	|ИЗ
	|	РегистрНакопления.ЗапасыПереданные.Остатки(&МоментВремени, Организация = &Организация) КАК ЗапасыПереданныеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ЗапасыОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ЗапасыОстатки.СуммаБезНДСОстаток КАК СуммаБезНДСОстаток
	|ПОМЕСТИТЬ ВТЗапасыОстатки
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(&МоментВремени, Организация = &Организация
	|	И СтруктурнаяЕдиница ССЫЛКА Справочник.Контрагенты) КАК ЗапасыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗапасыПереданныеОстатки.Номенклатура КАК Номенклатура,
	|	ВТЗапасыПереданныеОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТЗапасыПереданныеОстатки.Характеристика КАК Характеристика,
	|	ВТЗапасыПереданныеОстатки.Партия КАК Партия,
	|	ВТЗапасыПереданныеОстатки.Контрагент КАК Контрагент,
	|	ВТЗапасыПереданныеОстатки.Договор КАК Договор,
	|	ВТЗапасыПереданныеОстатки.Заказ КАК Заказ,
	|	ВТЗапасыПереданныеОстатки.ТипПриемаПередачи КАК ТипПриемаПередачи,
	|	ВТЗапасыПереданныеОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТЗапасыПереданныеОстатки.СуммаРасчетовОстаток КАК СуммаРасчетовОстаток,
	|	ВТЗапасыОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ВТЗапасыОстатки.СуммаБезНДСОстаток КАК СуммаБезНДСОстаток
	|ИЗ
	|	ВТЗапасыПереданныеОстатки КАК ВТЗапасыПереданныеОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗапасыОстатки КАК ВТЗапасыОстатки
	|		ПО ВТЗапасыПереданныеОстатки.Контрагент = ВТЗапасыОстатки.СтруктурнаяЕдиница
	|		И ВТЗапасыПереданныеОстатки.Номенклатура = ВТЗапасыОстатки.Номенклатура
	|		И ВТЗапасыПереданныеОстатки.Характеристика = ВТЗапасыОстатки.Характеристика
	|		И ВТЗапасыПереданныеОстатки.Партия = ВТЗапасыОстатки.Партия
	|		И ВТЗапасыПереданныеОстатки.Заказ = ВТЗапасыОстатки.ЗаказПокупателя";
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьВводНачальныхОстатковЗапасыПринятые(ВводНачальныхОстатковОбъект, ТекущийРегистр, ДатаСвертки,
	Организация)
	
	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.ЗапасыИАгентскиеУслугиПринятые Тогда
		Возврат;
	КонецЕсли;
	
	ВидыОперацийПриходнаяНакладная = Перечисления.ВидыОперацийПриходнаяНакладная.ПоТипуПриемаПередачиТоваров();
	ТипыПриемаПередачи = Новый Массив;
	Для Каждого Элемент Из ВидыОперацийПриходнаяНакладная Цикл
		ТипыПриемаПередачи.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗапасыПринятые();
	МоментВремени = Новый Граница(КонецДня(ДатаСвертки), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("ПериодЗаписи", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТипыПриемаПередачи", ТипыПриемаПередачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ВводНачальныхОстатковОбъект.ЗапасыПринятые.Добавить();
		НоваяСтрока.ВидОперации = ВидыОперацийПриходнаяНакладная[Выборка.ТипПриемаПередачи];
		НоваяСтрока.Контрагент = Выборка.Контрагент;
		НоваяСтрока.Договор = Выборка.Договор;
		НоваяСтрока.Заказ = Выборка.Заказ;
		НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.Ячейка = Выборка.Ячейка;
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Характеристика = Выборка.Характеристика;
		НоваяСтрока.Партия = Выборка.Партия;
		НоваяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Количество = Выборка.Количество;
		НоваяСтрока.СуммаРасчетов = Выборка.СуммаРасчетов;
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаЗапасыПринятые()
	Результат =
	"ВЫБРАТЬ
	|	ЗапасыИАгентскиеУслугиПринятыеОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыИАгентскиеУслугиПринятыеОстатки.Характеристика КАК Характеристика,
	|	ЗапасыИАгентскиеУслугиПринятыеОстатки.Партия КАК Партия,
	|	ЗапасыИАгентскиеУслугиПринятыеОстатки.Контрагент КАК Контрагент,
	|	ЗапасыИАгентскиеУслугиПринятыеОстатки.Договор КАК Договор,
	|	ЗапасыИАгентскиеУслугиПринятыеОстатки.Заказ КАК Заказ,
	|	ЗапасыИАгентскиеУслугиПринятыеОстатки.ТипПриемаПередачи КАК ТипПриемаПередачи,
	|	ЗапасыИАгентскиеУслугиПринятыеОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ЗапасыИАгентскиеУслугиПринятыеОстатки.СуммаРасчетовОстаток КАК СуммаРасчетовОстаток
	|ПОМЕСТИТЬ ВТЗапасыИАгентскиеУслугиПринятыеОстатки
	|ИЗ
	|	РегистрНакопления.ЗапасыИАгентскиеУслугиПринятые.Остатки(&МоментВремени, Организация = &Организация
	|	И ТипПриемаПередачи В (&ТипыПриемаПередачи)) КАК ЗапасыИАгентскиеУслугиПринятыеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыНаСкладахОстатки.Номенклатура,
	|	ЗапасыНаСкладахОстатки.Характеристика,
	|	ЗапасыНаСкладахОстатки.Партия,
	|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница,
	|	ЗапасыНаСкладахОстатки.Ячейка,
	|	ЗапасыНаСкладахОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ ВТЗапасыНаСкладахОстатки
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах.Остатки(&МоментВремени, Организация = &Организация) КАК ЗапасыНаСкладахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗапасыИАгентскиеУслугиПринятыеОстатки.ТипПриемаПередачи КАК ТипПриемаПередачи,
	|	ВТЗапасыИАгентскиеУслугиПринятыеОстатки.Контрагент КАК Контрагент,
	|	ВТЗапасыИАгентскиеУслугиПринятыеОстатки.Договор КАК Договор,
	|	ВТЗапасыИАгентскиеУслугиПринятыеОстатки.Заказ КАК Заказ,
	|	ВТЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТЗапасыОстатки.Ячейка КАК Ячейка,
	|	ВТЗапасыИАгентскиеУслугиПринятыеОстатки.Номенклатура КАК Номенклатура,
	|	ВТЗапасыИАгентскиеУслугиПринятыеОстатки.Характеристика КАК Характеристика,
	|	ВТЗапасыИАгентскиеУслугиПринятыеОстатки.Партия КАК Партия,
	|	ВТЗапасыИАгентскиеУслугиПринятыеОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТЗапасыОстатки.КоличествоОстаток КАК Количество,
	|	ВТЗапасыИАгентскиеУслугиПринятыеОстатки.СуммаРасчетовОстаток КАК СуммаРасчетов
	|ИЗ
	|	ВТЗапасыИАгентскиеУслугиПринятыеОстатки КАК ВТЗапасыИАгентскиеУслугиПринятыеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗапасыНаСкладахОстатки КАК ВТЗапасыОстатки
	|		ПО ВТЗапасыИАгентскиеУслугиПринятыеОстатки.Номенклатура = ВТЗапасыОстатки.Номенклатура
	|		И ВТЗапасыИАгентскиеУслугиПринятыеОстатки.Характеристика = ВТЗапасыОстатки.Характеристика
	|		И ВТЗапасыОстатки.Партия = ВТЗапасыИАгентскиеУслугиПринятыеОстатки.Партия";
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьВводНачальныхОстатковЗапасыВРазрезеГТД(ВводНачальныхОстатковОбъект, ТекущийРегистр, ДатаСвертки,
	Организация)

	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.ЗапасыВРазрезеГТД Тогда
		Возврат;
	КонецЕсли;

	СхемаЗапроса = НоваяСхемаЗапросаОстатков(ТекущийРегистр, Организация);
	ВыражениеЕдиницаИзмерения = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить(
		"ТаблицаРегистра.Номенклатура.ЕдиницаИзмерения");
	КолонкаЕдиницаИзмерения = СхемаЗапроса.ПакетЗапросов[0].Колонки.Найти(ВыражениеЕдиницаИзмерения);
	КолонкаЕдиницаИзмерения.Псевдоним = "ЕдиницаИзмерения";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	МоментВремени = Новый Граница(КонецДня(ДатаСвертки), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("ПериодЗаписи", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ВводНачальныхОстатковОбъект.ЗапасыВРазрезеГТД.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Характеристика = Выборка.Характеристика;
		НоваяСтрока.Партия = Выборка.Партия;
		НоваяСтрока.Количество = Выборка.Количество;
		НоваяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.СтранаПроисхождения = Выборка.СтранаПроисхождения;
		НоваяСтрока.НомерГТД = Выборка.НомерГТД;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьВводНачальныхОстатковЗапасыПереданныеВРазрезеГТД(ВводНачальныхОстатковОбъект, ТекущийРегистр,
	ДатаСвертки, Организация)

	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.ЗапасыПереданныеВРазрезеГТД Тогда
		Возврат;
	КонецЕсли;

	СхемаЗапроса = НоваяСхемаЗапросаОстатков(ТекущийРегистр, Организация);
	ВыражениеЕдиницаИзмерения = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить(
		"ТаблицаРегистра.Номенклатура.ЕдиницаИзмерения");
	КолонкаЕдиницаИзмерения = СхемаЗапроса.ПакетЗапросов[0].Колонки.Найти(ВыражениеЕдиницаИзмерения);
	КолонкаЕдиницаИзмерения.Псевдоним = "ЕдиницаИзмерения";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	МоментВремени = Новый Граница(КонецДня(ДатаСвертки), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("ПериодЗаписи", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ВводНачальныхОстатковОбъект.ЗапасыПереданныеВРазрезеГТД.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Характеристика = Выборка.Характеристика;
		НоваяСтрока.Партия = Выборка.Партия;
		НоваяСтрока.Количество = Выборка.Количество;
		НоваяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.СтранаПроисхождения = Выборка.СтранаПроисхождения;
		НоваяСтрока.НомерГТД = Выборка.НомерГТД;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьВводНачальныхОстатковЗапасыПринятыеВРазрезеГТД(ВводНачальныхОстатковОбъект, ТекущийРегистр,
	ДатаСвертки, Организация)

	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.ЗапасыПринятыеВРазрезеГТД Тогда
		Возврат;
	КонецЕсли;

	СхемаЗапроса = НоваяСхемаЗапросаОстатков(ТекущийРегистр, Организация);
	ВыражениеЕдиницаИзмерения = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить(
		"ТаблицаРегистра.Номенклатура.ЕдиницаИзмерения");
	КолонкаЕдиницаИзмерения = СхемаЗапроса.ПакетЗапросов[0].Колонки.Найти(ВыражениеЕдиницаИзмерения);
	КолонкаЕдиницаИзмерения.Псевдоним = "ЕдиницаИзмерения";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	МоментВремени = Новый Граница(КонецДня(ДатаСвертки), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("ПериодЗаписи", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ВводНачальныхОстатковОбъект.ЗапасыПринятыеВРазрезеГТД.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Характеристика = Выборка.Характеристика;
		НоваяСтрока.Партия = Выборка.Партия;
		НоваяСтрока.Количество = Выборка.Количество;
		НоваяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.СтранаПроисхождения = Выборка.СтранаПроисхождения;
		НоваяСтрока.НомерГТД = Выборка.НомерГТД;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьВводНачальныхОстатковДенежныеСредства(ВводНачальныхОстатковОбъект, ТекущийРегистр, ДатаСвертки,
	Организация)

	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.ДенежныеСредства Тогда
		Возврат;
	КонецЕсли;

	Запрос = НовыйЗапросОстатков(ТекущийРегистр, ДатаСвертки, Организация);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ВводНачальныхОстатковОбъект.ДенежныеСредства.Добавить();
		НоваяСтрока.БанковскийСчетКасса = Выборка.БанковскийСчетКасса;
		НоваяСтрока.ВалютаДенежныхСредств = Выборка.Валюта;
		НоваяСтрока.Сумма = Выборка.Сумма;
		НоваяСтрока.СуммаВал = Выборка.СуммаВал;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьВводНачальныхОстатковРасчетыСПодотчетниками(ВводНачальныхОстатковОбъект, ТекущийРегистр,
	ДатаСвертки, Организация)

	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.РасчетыСПодотчетниками Тогда
		Возврат;
	КонецЕсли;

	Запрос = НовыйЗапросОстатков(ТекущийРегистр, ДатаСвертки, Организация);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ВводНачальныхОстатковОбъект.РасчетыСПодотчетниками.Добавить();
		НоваяСтрока.Сотрудник = Выборка.Сотрудник;
		НоваяСтрока.Валюта = Выборка.Валюта;
		НоваяСтрока.Документ = Выборка.Документ;
		НоваяСтрока.Сумма = Выборка.Сумма;
		НоваяСтрока.СуммаВал = Выборка.СуммаВал;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьВводНачальныхОстатковРасчетыСПрочимиКонтрагентами(ВводНачальныхОстатковОбъект, ТекущийРегистр,
	ДатаСвертки, Организация)

	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.РасчетыСПрочимиКонтрагентами Тогда
		Возврат;
	КонецЕсли;

	Запрос = НовыйЗапросОстатков(ТекущийРегистр, ДатаСвертки, Организация);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ВводНачальныхОстатковОбъект.РасчетыСПрочимиКонтрагентами.Добавить();
		НоваяСтрока.СчетУчета = Выборка.СчетУчета;
		НоваяСтрока.Контрагент = Выборка.Контрагент;
		НоваяСтрока.Договор = Выборка.Договор;
		НоваяСтрока.Сумма = Выборка.Сумма;
		НоваяСтрока.СуммаВал = Выборка.СуммаВал;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьВводНачальныхОстатковРасчетыСПерсоналом(ВводНачальныхОстатковОбъект, ТекущийРегистр, ДатаСвертки,
	Организация)

	Если ТекущийРегистр <> Метаданные.РегистрыНакопления.РасчетыСПерсоналом Тогда
		Возврат;
	КонецЕсли;

	Запрос = НовыйЗапросОстатков(ТекущийРегистр, ДатаСвертки, Организация);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ВводНачальныхОстатковОбъект.РасчетыСПерсоналом.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.Сотрудник = Выборка.Сотрудник;
		НоваяСтрока.Валюта = Выборка.Валюта;
		НоваяСтрока.Сумма = Выборка.Сумма;
		НоваяСтрока.СуммаВал = Выборка.СуммаВал;
		НоваяСтрока.ПериодРегистрации = Выборка.ПериодРегистрации;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьКомментарийСверткаРегистра(ВводНачальныхОстатковОбъект, ТекущийРегистр)
	КомментарийСверткаРегистра = НСтр("ru = 'Свертка регистра'", ОбщегоНазначения.КодОсновногоЯзыка());
	Если ЗначениеЗаполнено(ВводНачальныхОстатковОбъект.Комментарий) Тогда
		КомментарийСверткаРегистров = НСтр("ru = 'Свертка регистров'", ОбщегоНазначения.КодОсновногоЯзыка());
		НовыйКомментарий = СтрЗаменить(ВводНачальныхОстатковОбъект.Комментарий, КомментарийСверткаРегистра,
			КомментарийСверткаРегистров);
		ШаблонДополненногоКомментария = НСтр("ru = '%1, ""%2""'", ОбщегоНазначения.КодОсновногоЯзыка());
		ВводНачальныхОстатковОбъект.Комментарий = СтрШаблон(ШаблонДополненногоКомментария, НовыйКомментарий,
			ТекущийРегистр.Синоним);
	Иначе
		ВводНачальныхОстатковОбъект.Комментарий = СтрШаблон(НСтр("ru = '%1 ""%2""'"), КомментарийСверткаРегистра,
			ТекущийРегистр.Синоним);
	КонецЕсли;
КонецПроцедуры

Функция РазделУчета(ТекущийРегистр)
	
	Если ТекущийРегистр = Метаданные.РегистрыБухгалтерии.Управленческий Тогда
		Возврат Перечисления.РазделыУчета.ПрочиеРазделы;
	КонецЕсли;
	
	ВсеРазделыУчета = Перечисления.РазделыУчета.ПринадлежностьРегистровНакопления();
	
	Результат = ВсеРазделыУчета[ТекущийРегистр];
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось определить раздел для регистра ""%1""'"), ТекущийРегистр.Имя);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьОстаткиКорректировкойРегистров(ТекущийРегистр, ДатаСвертки, Организация, СформированныеДокументы)

	Если Не ОбщегоНазначения.ЭтоРегистрНакопления(ТекущийРегистр) Тогда
		Возврат;
	КонецЕсли;

	Если ТекущийРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
		Возврат;
	КонецЕсли;

	Запрос = НовыйЗапросОстатков(ТекущийРегистр, ДатаСвертки, Организация);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ТаблицаДвижений = РезультатЗапроса.Выгрузить();

	ДокументДвижения = НоваяКорректировкаРегистров(ТекущийРегистр, ДатаСвертки);
	ЗаписатьДанные(ДокументДвижения);

	НаборЗаписей = РегистрыНакопления[ТекущийРегистр.Имя].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижения.Ссылка);
	НаборЗаписей.Загрузить(ТаблицаДвижений);
	ЗаписатьДанные(НаборЗаписей);

	СформированныеДокументы[ДокументДвижения.Ссылка] = НовоеОписаниеДокумента("");

КонецПроцедуры

Функция НовоеОписаниеДокумента(ОшибкаПриПроведении)
	Результат = Новый Структура;
	Результат.Вставить("ОшибкаПриПроведении", ОшибкаПриПроведении);
	Возврат Результат;
КонецФункции

Функция НовыйЗапросОстатков(ТекущийРегистр, ДатаСвертки, Организация)
	
	СхемаЗапроса = НоваяСхемаЗапросаОстатков(ТекущийРегистр, Организация);

	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	МоментВремени = Новый Граница(КонецДня(ДатаСвертки), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("ПериодЗаписи", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос;
	
КонецФункции

Функция ОстаткиОтсутствуют(ТекущийРегистр, ДатаСвертки, Организация)

	СхемаЗапроса = НоваяСхемаЗапросаОстатков(ТекущийРегистр, Организация);
	СхемаЗапроса.ПакетЗапросов[0].Операторы[0].КоличествоПолучаемыхЗаписей = 1;

	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	МоментВремени = Новый Граница(КонецДня(ДатаСвертки), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("ПериодЗаписи", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);

	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Пустой();

КонецФункции

Функция НоваяСхемаЗапросаОстатков(ТекущийРегистр, Организация)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ПериодЗаписи КАК Период
	|ИЗ
	|	&ТаблицаРегистра КАК ТаблицаРегистра";
	ОтборОрганизация = ?(ЕстьИзмерениеОрганизация(ТекущийРегистр), ", Организация = &Организация", "");
	ТаблицаОстатков = СтрШаблон("%1.Остатки(&МоментВремени%2)", ТекущийРегистр.ПолноеИмя(), ОтборОрганизация);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаРегистра", ТаблицаОстатков);

	Результат = Новый СхемаЗапроса;
	Результат.УстановитьТекстЗапроса(ТекстЗапроса);

	Для Каждого Измерение Из ТекущийРегистр.Измерения Цикл
		ИмяИзмерения = СтрШаблон("ТаблицаРегистра.%1", Измерение.Имя);
		Результат.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить(ИмяИзмерения);
	КонецЦикла;

	Для Каждого Ресурс Из ТекущийРегистр.Ресурсы Цикл
		ПсевдонимПоля = СтрШаблон("%1Остаток", Ресурс.Имя);
		ИмяРесурса = СтрШаблон("ТаблицаРегистра.%1", ПсевдонимПоля);
		Результат.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить(ИмяРесурса);
		НайденнаяКолонка = Результат.ПакетЗапросов[0].Колонки.Найти(ПсевдонимПоля);
		НайденнаяКолонка.Псевдоним = Ресурс.Имя;
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция НоваяКорректировкаРегистров(ТекущийРегистр, ДатаСвертки)

	НоваяКорректировкаРегистров = Документы.КорректировкаРегистров.СоздатьДокумент();
	НоваяКорректировкаРегистров.Автор = Пользователи.ТекущийПользователь();
	НоваяКорректировкаРегистров.Дата = ДатаСвертки;
	НоваяКорректировкаРегистров.УстановитьНовыйНомер();
	НоваяКорректировкаРегистров.Комментарий = СтрШаблон(НСтр("ru = 'Свертка регистра ""%1""'"), ТекущийРегистр.Синоним);
	НоваяСтрокаТаблицыРегистров = НоваяКорректировкаРегистров.ТаблицаРегистров.Добавить();
	НоваяСтрокаТаблицыРегистров.Имя = ТекущийРегистр.Имя;

	Возврат НоваяКорректировкаРегистров;

КонецФункции

Процедура ПометитьНаУдалениеДокументыВида(ТекущийДокумент, ДатаСвертки, Организация, ПомеченныеНаУдаление)

	Если Не ПравоДоступа("Изменение", ТекущийДокумент) Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ТаблицаДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Дата < &ДатаСвертки
	|	И ТаблицаДокумента.Организация = &Организация
	|	И НЕ ТаблицаДокумента.ПометкаУдаления";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДокумента", ТекущийДокумент.ПолноеИмя());
	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", ТекущийДокумент) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДокумента.Организация = &Организация", "ИСТИНА");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаСвертки) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДокумента.Дата < &ДатаСвертки", "ИСТИНА");
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаСвертки", ДатаСвертки);
	Запрос.УстановитьПараметр("Организация", Организация);

	Пока Истина Цикл
		// BSLLS:CreateQueryInCycle-off
		// Пометка на удаление порциями
		РезультатЗапроса = Запрос.Выполнить();
		// BSLLS:CreateQueryInCycle-on
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;

		ВыборкаДокументыДляУдаления = РезультатЗапроса.Выбрать();
		ЗаполняемыеПоля = Новый Структура;
		ЗаполняемыеПоля.Вставить("ПометкаУдаления", Истина);
		ЗаполняемыеПоля.Вставить("Проведен", Ложь);
		Пока ВыборкаДокументыДляУдаления.Следующий() Цикл
			ДокументДляУдаления = ВыборкаДокументыДляУдаления.Ссылка.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ДокументДляУдаления, ЗаполняемыеПоля);
			ЗаписатьДанные(ДокументДляУдаления);
			ПомеченныеНаУдаление.Добавить(ДокументДляУдаления.Ссылка);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ПометитьНаУдалениеЭлементыСправочникаВида(ТекущийСправочник, ДатаСвертки, ПомеченныеНаУдаление)

	Если Не ПравоДоступа("Изменение", ТекущийСправочник) Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ТаблицаСправочника.Ссылка КАК Ссылка
	|ИЗ
	|	&ТаблицаСправочника КАК ТаблицаСправочника
	|ГДЕ
	|	НЕ ТаблицаСправочника.ПометкаУдаления";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаСправочника", ТекущийСправочник.ПолноеИмя());
	Если ЗначениеЗаполнено(ДатаСвертки) И ОбщегоНазначения.ЕстьРеквизитОбъекта("Окончание", ТекущийСправочник) Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "И ТаблицаСправочника.Окончание < &ДатаСвертки";
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаСвертки", ДатаСвертки);

	Пока Истина Цикл
		// BSLLS:CreateQueryInCycle-off
		// Пометка на удаление порциями
		РезультатЗапроса = Запрос.Выполнить();
		// BSLLS:CreateQueryInCycle-on
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;

		ВыборкаЭлементыДляУдаления = РезультатЗапроса.Выбрать();
		ЗаполняемыеПоля = Новый Структура;
		ЗаполняемыеПоля.Вставить("ПометкаУдаления", Истина);
		Пока ВыборкаЭлементыДляУдаления.Следующий() Цикл
			ЭлементДляУдаления = ВыборкаЭлементыДляУдаления.Ссылка.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ЭлементДляУдаления, ЗаполняемыеПоля);
			ЗаписатьДанные(ЭлементДляУдаления);
			ПомеченныеНаУдаление.Добавить(ЭлементДляУдаления.Ссылка);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьДвиженияПоПодчиненномуРегистру(ТекущийРегистр, ДатаСвертки, Организация, ИсключаемыеРегистраторы = Неопределено)

	Если Не ПравоДоступа("Изменение", ТекущийРегистр) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	|	ТаблицаРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	&ТаблицаРегистра КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Период < &ДатаСвертки
	|	И ТаблицаРегистра.Организация = &Организация
	|	И &УсловиеТипРегистратора";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаРегистра", ТекущийРегистр.ПолноеИмя());
	Если ЗначениеЗаполнено(ДатаСвертки) Тогда
		Запрос.УстановитьПараметр("ДатаСвертки", ДатаСвертки);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаРегистра.Период < &ДатаСвертки", "ИСТИНА");
	КонецЕсли;
	Если Не ЕстьИзмерениеОрганизация(ТекущийРегистр) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаРегистра.Организация = &Организация", "ИСТИНА");
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Если ИсключаемыеРегистраторы = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипРегистратора", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипРегистратора", "НЕ ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (&ИсключенныеТипыРегистраторов)");
		Запрос.УстановитьПараметр("ИсключенныеТипыРегистраторов", ИсключаемыеРегистраторы);
	КонецЕсли;

	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТекущийРегистр.ПолноеИмя());
	МенеджерОбъекта.УстановитьИспользованиеИтогов(Ложь);

	Попытка
		Пока Истина Цикл
			// BSLLS:CreateQueryInCycle-off
			// Пометка на удаление порциями
			РезультатЗапроса = Запрос.Выполнить();
			// BSLLS:CreateQueryInCycle-on
			Если РезультатЗапроса.Пустой() Тогда
				Прервать;
			КонецЕсли;

			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
				//@skip-check unknown-method-property
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				ЗаписатьДанные(НаборЗаписей);
			КонецЦикла;
		КонецЦикла;
	Исключение
		МенеджерОбъекта.УстановитьИспользованиеИтогов(Истина);
		ВызватьИсключение;
	КонецПопытки;

	МенеджерОбъекта.УстановитьИспользованиеИтогов(Истина);

КонецПроцедуры

Функция ЕстьИзмерениеОрганизация(ТекущийРегистр)
	Возврат ТекущийРегистр.Измерения.Найти("Организация") <> Неопределено;
КонецФункции

Процедура УдалитьДвиженияПоРегиструСведенийПериодическомуБезРегистратора(ТекущийРегистр, ДатаСвертки,
	ИсключаемыеРегистры, Организация)

	Если НеСворачиватьРегистр(ТекущийРегистр, ИсключаемыеРегистры) Тогда
		Возврат;
	КонецЕсли;

	Если Не ПравоДоступа("Изменение", ТекущийРегистр) Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДатаСвертки) Тогда
		УдалитьДвиженияПоРегиструСведенийБезРегистратора(ТекущийРегистр, ИсключаемыеРегистры);
		Возврат;
	КонецЕсли;

	Если ТекущийРегистр.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Год Тогда
		ПериодЗаписи = НачалоГода(ДатаСвертки - 1);
	ИначеЕсли ТекущийРегистр.ПериодичностьРегистраСведений
		= Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Квартал Тогда
		ПериодЗаписи = НачалоКвартала(ДатаСвертки - 1);
	ИначеЕсли ТекущийРегистр.ПериодичностьРегистраСведений
		= Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Месяц Тогда
		ПериодЗаписи = НачалоМесяца(ДатаСвертки - 1);
	ИначеЕсли ТекущийРегистр.ПериодичностьРегистраСведений
		= Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.День Тогда
		ПериодЗаписи = НачалоДня(ДатаСвертки - 1);
	Иначе
		ПериодЗаписи = ДатаСвертки - 1;
	КонецЕсли;

	ТаблицаЗаписейДляПереноса = ТаблицаЗаписейДляПереноса(ТекущийРегистр, ДатаСвертки, Организация, ПериодЗаписи);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТекущийРегистр.ПолноеИмя());
	МенеджерОбъекта.УстановитьИспользованиеИтогов(Ложь);
	
	НачатьТранзакцию();
	Попытка
		
		ЕстьИзмерениеОрганизация = ЕстьИзмерениеОрганизация(ТекущийРегистр);
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ПространствоБлокировки = ТекущийРегистр.ПолноеИмя();
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(ПространствоБлокировки);
		Если ЕстьИзмерениеОрганизация Тогда
			ЭлементБлокировкиДанных.УстановитьЗначение("Организация", Организация);
		КонецЕсли;
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписейДляУдаления = МенеджерОбъекта.СоздатьНаборЗаписей();
		Если ЕстьИзмерениеОрганизация Тогда
			НаборЗаписейДляУдаления.Отбор["Организация"].Установить(Организация);
		КонецЕсли;
		НаборЗаписейДляУдаления.Прочитать();
		НомерТекущейЗаписи = 0;
		
		Пока НомерТекущейЗаписи < НаборЗаписейДляУдаления.Количество() Цикл
			Если (НаборЗаписейДляУдаления[НомерТекущейЗаписи].Период <= ДатаСвертки - 1) Тогда
				НаборЗаписейДляУдаления.Удалить(НомерТекущейЗаписи);
			Иначе
				НомерТекущейЗаписи = НомерТекущейЗаписи + 1;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписатьДанные(НаборЗаписейДляУдаления);
		
		НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
		Если ТекущийРегистр <> Метаданные.РегистрыСведений.ГрафикПлатежей
			Или ТекущийРегистр = Метаданные.РегистрыСведений.ГрафикОплатыЗаказов Тогда
			//@skip-check unknown-method-property
			НаборЗаписей.Отбор.Период.Установить(ПериодЗаписи);
		КонецЕсли;
		НаборЗаписей.Загрузить(ТаблицаЗаписейДляПереноса);
		ЗаписатьДанные(НаборЗаписей);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		МенеджерОбъекта.УстановитьИспользованиеИтогов(Истина);
		ВызватьИсключение;
	КонецПопытки;

	МенеджерОбъекта.УстановитьИспользованиеИтогов(Истина);

КонецПроцедуры

Функция ТаблицаЗаписейДляПереноса(ТекущийРегистр, ДатаСвертки, Организация, ПериодЗаписи)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	*,
	|	ИСТИНА КАК Активность,
	|	&ПериодЗаписи КАК Период
	|ИЗ
	|	&ТаблицаРегистра КАК ТаблицаРегистра";
	
	Отборы = Новый Массив;
	
	Если ТекущийРегистр = Метаданные.РегистрыСведений.ГрафикПлатежей
		Или ТекущийРегистр = Метаданные.РегистрыСведений.ГрафикОплатыЗаказов Тогда
		Отборы.Добавить("НЕ СчетНаОплату.ПометкаУдаления");
	КонецЕсли;
	
	Если ЕстьИзмерениеОрганизация(ТекущийРегистр) Тогда
		Отборы.Добавить("Организация = &Организация"); 
	КонецЕсли;
	
	УсловиеОтбора = СтрСоединить(Отборы, " И ");
	
	ТаблицаРегистра = СтрШаблон("%1.СрезПоследних(&МоментВремени,%2)", ТекущийРегистр.ПолноеИмя(), УсловиеОтбора);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаРегистра", ТаблицаРегистра);
	
	Если ТекущийРегистр = Метаданные.РегистрыСведений.ЦеныНоменклатурыКонтрагентов Тогда
		ДобавитьОчисткуПомеченныхДокументовРегистратор(ТекстЗапроса);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	МоментВремени = Новый Граница(КонецДня(ДатаСвертки - 1), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодЗаписи", ПериодЗаписи);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьОчисткуПомеченныхДокументовРегистратор(ТекстЗапроса)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ВыбираемыеПоля = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля;
	ВыражениеСхемыЗапроса = ВыбираемыеПоля.Найти("ДокументРегистратор");
	ИндексПоля = ВыбираемыеПоля.Индекс(ВыражениеСхемыЗапроса);
	ВыражениеОчиститьРеквизит =
	"ВЫБОР
	|	КОГДА ТаблицаРегистра.ДокументРегистратор.ПометкаУдаления
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ ТаблицаРегистра.ДокументРегистратор
	|КОНЕЦ";
	ВыбираемыеПоля[ИндексПоля] = Новый ВыражениеСхемыЗапроса(ВыражениеОчиститьРеквизит);
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Процедура УдалитьДвиженияПоРегиструСведенийБезРегистратора(ТекущийРегистр, ИсключаемыеРегистры)

	Если НеСворачиватьРегистр(ТекущийРегистр, ИсключаемыеРегистры) Тогда
		Возврат;
	КонецЕсли;

	Если Не ПравоДоступа("Изменение", ТекущийРегистр) Тогда
		Возврат;
	КонецЕсли;

	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТекущийРегистр.ПолноеИмя());
	МенеджерОбъекта.УстановитьИспользованиеИтогов(Ложь);

	Попытка
		НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
		ЗаписатьДанные(НаборЗаписей);
	Исключение
		МенеджерОбъекта.УстановитьИспользованиеИтогов(Истина);
		ВызватьИсключение;
	КонецПопытки;

	МенеджерОбъекта.УстановитьИспользованиеИтогов(Истина);

КонецПроцедуры

Функция НеСворачиватьРегистр(ТекущийРегистр, ИсключаемыеРегистры)

	Возврат ИсключаемыеРегистры[ТекущийРегистр.ПолноеИмя()] = Истина;

КонецФункции

Функция ИсключаемыеРегистры()

	Результат = Новый Соответствие;
	Для Каждого ЭлементСоставаОбщегоРеквизита Из Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.Состав Цикл
		
		Если ЭлементСоставаОбщегоРеквизита.Использование
			<> Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЭтоРегистрСведений(ЭлементСоставаОбщегоРеквизита.Метаданные) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат[ЭлементСоставаОбщегоРеквизита.Метаданные.ПолноеИмя()] = Истина;
		
	КонецЦикла;

	Результат[Метаданные.РегистрыСведений.ГрафикВыполненияЗаказов.ПолноеИмя()] = Истина;
	Результат[Метаданные.РегистрыСведений.ДокументыФизическихЛиц.ПолноеИмя()] = Истина;
	Результат[Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя()] = Истина;
	Результат[Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносовУНФ.ПолноеИмя()] = Истина;
	Результат[Метаданные.РегистрыСведений.СвязиКонтрагентКонтакт.ПолноеИмя()] = Истина;
	Результат[Метаданные.РегистрыСведений.СчетчикиВыгрузок.ПолноеИмя()] = Истина;

	Возврат Результат;

КонецФункции

Функция ИсключаемыеТипыДокументов()
	
	Результат = Новый Массив;
	
	Результат.Добавить(Тип("ДокументСсылка.ПриемНаРаботу"));
	Результат.Добавить(Тип("ДокументСсылка.КадровыйПеревод"));
	Результат.Добавить(Тип("ДокументСсылка.Увольнение"));
	Результат.Добавить(Тип("ДокументСсылка.ПриемНаРаботуУНФ"));
	Результат.Добавить(Тип("ДокументСсылка.КадровоеПеремещениеУНФ"));
	Результат.Добавить(Тип("ДокументСсылка.УвольнениеУНФ"));
	
	Возврат Результат;
	
КонецФункции

Функция ИсключаемыеДокументы()
	
	Результат = Новый Соответствие;
	
	ТипыДокументов = ИсключаемыеТипыДокументов();
	Для Каждого Тип Из ТипыДокументов Цикл
		Результат[Метаданные.НайтиПоТипу(Тип)] = Истина;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьДанные(Данные)

	Данные.ОбменДанными.Загрузка = Истина;
	Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	Данные.Записать();

КонецПроцедуры

#КонецОбласти

#КонецЕсли