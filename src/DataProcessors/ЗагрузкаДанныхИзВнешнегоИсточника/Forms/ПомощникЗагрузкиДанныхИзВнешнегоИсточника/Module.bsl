#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрытьФормуБезусловно;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ОбновитьОбразцыЗагрузкиДанных();

	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();

	ОбновлятьСуществующие 					= Ложь;
	СоздаватьЕслиНеСопоставлено 			= Истина;
	КудаЗагружаемКартинки			 		= ?(ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики"), 2, 1);
	КудаЗагружаемХарактеристики		 		= 2;
	КудаЗагружаемДопРеквизиты				= 1;
	Если Параметры.Свойство("НастройкиЗагрузкиДанных") И Параметры.НастройкиЗагрузкиДанных.Свойство("ВидЦен") Тогда
		ВидЦен = Параметры.НастройкиЗагрузкиДанных.ВидЦен;
	Иначе
		ВидЦен = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	КонецЕсли;
	СкладОстатков = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;

	ДатаОбработки = ТекущаяДатаСеанса();
	
	УстановитьВидимостьДоступностьПриСоздании(Параметры);

	Параметры.НастройкиЗагрузкиДанных.Вставить("ОбновлятьСуществующие", ОбновлятьСуществующие);
	Параметры.НастройкиЗагрузкиДанных.Вставить("СоздаватьЕслиНеСопоставлено", СоздаватьЕслиНеСопоставлено);
	Параметры.НастройкиЗагрузкиДанных.Вставить("ВидЦен", ВидЦен);
	Параметры.НастройкиЗагрузкиДанных.Вставить("СкладОстатков", СкладОстатков);
	Параметры.НастройкиЗагрузкиДанных.Вставить("СамостоятельноеЗаполнение", Ложь);
	Параметры.НастройкиЗагрузкиДанных.Вставить("ЦеныЗаполнены", Ложь);
	Параметры.НастройкиЗагрузкиДанных.Вставить("КоличествоЗаполнено", Ложь);
	Параметры.НастройкиЗагрузкиДанных.Вставить("МаксимумПолезныхКолонокТД",
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумПолезныхКолонокТабличногоДокумента());
	Параметры.НастройкиЗагрузкиДанных.Вставить("ИспользоватьХарактеристики", ПолучитьФункциональнуюОпцию(
		"ИспользоватьХарактеристики"));
	Параметры.НастройкиЗагрузкиДанных.Вставить("КудаЗагружаемКартинки", КудаЗагружаемКартинки);
	Параметры.НастройкиЗагрузкиДанных.Вставить("КудаЗагружаемХарактеристики", КудаЗагружаемХарактеристики);
	Параметры.НастройкиЗагрузкиДанных.Вставить("КудаЗагружаемДопРеквизиты", КудаЗагружаемДопРеквизиты);
	Параметры.НастройкиЗагрузкиДанных.Вставить("ИдентификаторПоставляемойНастройки", Неопределено);
	Параметры.НастройкиЗагрузкиДанных.Вставить("ПараметрыШапки", Новый Структура);

	Если Не Параметры.НастройкиЗагрузкиДанных.Свойство("НастройкиПоиска") Тогда
		НастройкиПоиска = ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьНастройкиПоискаПоУмолчанию();
		Параметры.НастройкиЗагрузкиДанных.Вставить("НастройкиПоиска", НастройкиПоиска);
	КонецЕсли;

	ЗагрузитьНастройкиФормы();

	СоздатьДеревоПолейЗагрузкиДоступныхПользователю();

	СобратьЗаголовокСтраницыРезультатПроверкиДанных();

	Описание = Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМакет("БыстрыйСтарт").ПолучитьТекст();
	
	ЭтоОтчетКомиссионера = СтрНайти(Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, 
		"Документ.ОтчетКомиссионера.ТабличнаяЧасть.") <> 0;
	
	Если НЕ ЭтоОтчетКомиссионера Тогда

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
			"ГруппаПримерыПодсказка", "Видимость", Ложь);
	
	КонецЕсли;
	
	КонстантаДопРеквизитНоменклатура = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура");
	
	КонстантаДопРеквизитХарактеристики = УправлениеСвойствами.НаборСвойствПоИмени(
		"Справочник_ХарактеристикиНоменклатуры");
	

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьОбщееЗначениеИзНастроек();

	Параметры.НастройкиЗагрузкиДанных.Вставить("КудаЗагружаемКартинки", КудаЗагружаемКартинки);
	Параметры.НастройкиЗагрузкиДанных.Вставить("КудаЗагружаемХарактеристики", КудаЗагружаемХарактеристики);
	Параметры.НастройкиЗагрузкиДанных.Вставить("КудаЗагружаемДопРеквизиты", КудаЗагружаемДопРеквизиты);
	Параметры.НастройкиЗагрузкиДанных.Вставить("СоздаватьЕслиНеСопоставлено", СоздаватьЕслиНеСопоставлено);
	ЗаполнитьСписокВыбораФильтраТаблицыСопоставления(Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти);

	УстановитьТекстЗаголовкаДекорацииНесопоставленныеСтроки();
	УстановитьТекстЗаголовкаДекорацииСопоставленныхОбъектов();	
		
	// Устанавливаем текущую таблицу переходов
	ТаблицаПереходовПоСценарию();
	
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, РезультатЗагрузки, Источник)

	Если ИмяСобытия = "ОбработатьПодготовленныеДанные" И ТипЗнч(РезультатЗагрузки) = Тип("Структура")
		И РезультатЗагрузки.НастройкиЗагрузкиДанных.Свойство("ЧерезФормуКомпанияЗагрузкаИзExcel") Тогда

		ДлительнаяОперация = ОбработатьПодготовленныеДанные(РезультатЗагрузки);
		ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация,
			РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаОбработкиПриИзменении(Элемент)
	
	Параметры.НастройкиЗагрузкиДанных.Вставить("ДатаОбработки", ДатаОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткудаБратьДанныеПриИзменении(Элемент)

	ОткудаБратьДанные1 = ?(ОткудаБратьДанные = 0, 0, 1);

КонецПроцедуры

&НаКлиенте
Процедура ОткудаБратьДанные1ПриИзменении(Элемент)

	ОткудаБратьДанные = ?(ОткудаБратьДанные1 = 1, 1, 0);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияВыборФайлаНажатие(Элемент)

	Если Параметры.НастройкиЗагрузкиДанных.ФиксированныйШаблон Тогда
		ЗаполнитьТабличныйДокументИзФайлаШаблона();
	Иначе
		ЗаполнитьТабличныйДокументИзФайла();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КудаЗагружаемПриИзменении(Элемент)

	ФиксированныйШаблон = (КудаЗагружаем = 1);
	Параметры.НастройкиЗагрузкиДанных.ФиксированныйШаблон = ФиксированныйШаблон;

	Элементы.ГруппаШаблон.Видимость = ФиксированныйШаблон;
	Элементы.ГруппаПримеры.Видимость = Не ФиксированныйШаблон;
	Элементы.ГруппаЗаполнение.Видимость = ДоступноРучноеЗаполнение И Не ФиксированныйШаблон;
	Элементы.НастройкиПоиска.Видимость = (КудаЗагружаем <> 2);
	Элементы.ГруппаНастройкаЗагрузкиХарактеристик.Видимость = ((КудаЗагружаем < 2)
		И Параметры.НастройкиЗагрузкиДанных.ИспользоватьХарактеристики);

	ОбновитьНастройкиВариантаЗагрузки();
	ТаблицаПереходовПоСценарию();
	УстановитьОбщееЗначениеИзНастроек();

КонецПроцедуры

&НаКлиенте
Процедура ФильтрТаблицаСопоставленияПриИзменении(Элемент)

	УстановитьОтборСтрокПоЗначениюФильтра();
	УстановитьТекстДекорацииКоличестваСтрок();

	ТекущийЭлемент = Элементы.ТаблицаСопоставленияДанных;

КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЕслиНеСопоставленоПриИзменении(Элемент)

	Параметры.НастройкиЗагрузкиДанных.Вставить("СоздаватьЕслиНеСопоставлено", СоздаватьЕслиНеСопоставлено);

	УстановитьТекстЗаголовкаДекорацииНесопоставленныеСтроки();

	ИзменитьТекстУсловногоОформления();

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

#Если МобильныйКлиент Тогда
		
		// Выполняется при активации области
	Возврат;

#КонецЕсли

	Если Элементы.ТабличныйДокумент.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки
		Или Элементы.ТабличныйДокумент.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда

		Если ТипЗнч(Расшифровка) = Тип("СписокЗначений") Тогда

			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиЗаголовкаКолонки", ЭтотОбъект);

			ОбластьЗаголовка = ПолучитьОбластьЗаголовка();

			ПараметрыЗагрузки = Новый Структура;
			ПараметрыЗагрузки.Вставить("НастройкиЗагрузкиДанных", Параметры.НастройкиЗагрузкиДанных);
			ПараметрыЗагрузки.Вставить("ПредставлениеПоля", ОбластьЗаголовка.Текст);
			ПараметрыЗагрузки.Вставить("ИмяПоля", ОбластьЗаголовка.ПараметрРасшифровки);
			ПараметрыЗагрузки.Вставить("ПолеИзФайла", ОбластьЗаголовка.Примечание.Текст);
			ПараметрыЗагрузки.Вставить("НомерКолонки", ОбластьЗаголовка.Право);

			ОткрытьФорму("Обработка.ЗагрузкаДанныхИзВнешнегоИсточника.Форма.ВыборПоля", ПараметрыЗагрузки, ЭтотОбъект,
				, , , ОписаниеОповещения);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)

#Если МобильныйКлиент Тогда

	Если Элементы.ПанельОсновная.ТекущаяСтраница <> Элементы.СтраницыПолученныеДанные Тогда

		Возврат;

	КонецЕсли;
		
		// 1.6.16 отказ от метода ТабличныйДокументОбработкаРасшифровки() в виду его отсутствия в мобильном клиенте
	ОбработкаРасшифровкиОбластиТабличногоДокумента();

#Иначе
		
		// не имеет смысла в мобильном клиенте
		Элемент.Защита = ?(Элемент.ТекущаяОбласть.Верх > 1, Ложь, Истина);

#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаСамостоятельноеЗаполнениеНажатие(Элемент)

	ЗаполнитьТабличныйСамостоятельно();

КонецПроцедуры

&НаКлиенте
Процедура ОбщееЗначениеСправочникНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиентПереопределяемый.ПриУстановкеОбщегоЗначения(ЭтотОбъект,
		Параметры.НастройкиЗагрузкиДанных, ТаблицаСопоставленияДанных);

КонецПроцедуры

&НаКлиенте
Процедура ОбщееЗначениеСправочникНоменклатураОчистка(Элемент, СтандартнаяОбработка)

	ЗагрузкаДанныхИзВнешнегоИсточникаКлиентПереопределяемый.ПриОчисткеОбщегоЗначения(ЭтотОбъект,
		Параметры.НастройкиЗагрузкиДанных, ТаблицаСопоставленияДанных);

КонецПроцедуры

&НаКлиенте
Процедура ОбщееЗначениеСправочникНоменклатураПриИзменении(Элемент)

	Если ЗначениеЗаполнено(ОбщееЗначениеСправочникНоменклатура) Тогда

		ДополнительныеНастройки = Новый Структура("Форма, НастройкиЗагрузкиДанных, ТаблицаСопоставленияДанных",
			ЭтотОбъект, Параметры.НастройкиЗагрузкиДанных, ТаблицаСопоставленияДанных);
		ЗагрузкаДанныхИзВнешнегоИсточникаКлиентПереопределяемый.ПриОбработкеРезультатаВыбораОбщегоЗначения(
			ОбщееЗначениеСправочникНоменклатура, ДополнительныеНастройки);

	Иначе

		ЗагрузкаДанныхИзВнешнегоИсточникаКлиентПереопределяемый.ПриОчисткеОбщегоЗначения(ЭтотОбъект,
			Параметры.НастройкиЗагрузкиДанных, ТаблицаСопоставленияДанных);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьСуществующиеПриИзменении(Элемент)

	Параметры.НастройкиЗагрузкиДанных.Вставить("ОбновлятьСуществующие", ОбновлятьСуществующие);

	УстановитьТекстЗаголовкаДекорацииСопоставленныхОбъектов();

КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)

	Если ВидЦен.Пустая() Тогда
		УстановитьОсновнойВидЦенПродажи();
	КонецЕсли;

	Параметры.НастройкиЗагрузкиДанных.Вставить("ВидЦен", ВидЦен);
	ДополнительныеНастройки = Новый Структура;
	ДополнительныеНастройки.Вставить("Форма", ЭтотОбъект);
	ДополнительныеНастройки.Вставить("НастройкиЗагрузкиДанных", Параметры.НастройкиЗагрузкиДанных);
	ДополнительныеНастройки.Вставить("ТаблицаСопоставленияДанных", ТаблицаСопоставленияДанных);
	ДополнительныеНастройки.Вставить("ЭтоЗаполнениеВидаЦен", Истина);

	ЗагрузкаДанныхИзВнешнегоИсточникаКлиентПереопределяемый.ПриОбработкеРезультатаВыбораОбщегоЗначения(ВидЦен,
		ДополнительныеНастройки);

КонецПроцедуры

&НаКлиенте
Процедура ВидЦенШаблонОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	УстановитьОсновнойВидЦенПродажи();

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Параметры.НастройкиЗагрузкиДанных.Вставить("СкладОстатков", СкладОстатков);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Параметры.НастройкиЗагрузкиДанных.Вставить("КонтрагентПоставщик", КонтрагентПоставщик);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаСоответствияПолейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	НачатьНастройкуСоответствияПолей();

КонецПроцедуры

&НаКлиенте
Процедура НастройкаСоответствияПолейОчистка(Элемент, СтандартнаяОбработка)

	НастройкаСоответствияПолей = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура КудаЗагружаемХарактеристикиПриИзменении(Элемент)

	Параметры.НастройкиЗагрузкиДанных.Вставить("КудаЗагружаемХарактеристики", КудаЗагружаемХарактеристики);

КонецПроцедуры

&НаКлиенте
Процедура КудаЗагружаемДопРеквизитыПриИзменении(Элемент)

	Параметры.НастройкиЗагрузкиДанных.Вставить("КудаЗагружаемДопРеквизиты", КудаЗагружаемДопРеквизиты);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСопоставленияДанных

&НаКлиенте
Процедура ТаблицаСопоставленияДанныхПриИзменении(Элемент)

	Если Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИдентификаторСтрокиФормы = Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.ПолучитьИдентификатор();
	ПроверитьКорректностьДанныхВСтрокеТаблицы(ИдентификаторСтрокиФормы);
	УстановитьТекстДекорацииКоличестваСтрок();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСопоставленияДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ИдентификаторДополнительногоРеквизита = Поле.Имя;
	Если СтрНайти(ИдентификаторДополнительногоРеквизита, "ДополнительныйРеквизит") > 0 Тогда

		ДополнительныйРеквизит = Неопределено;
		Для Каждого СтрокаСоответствия Из Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты Цикл

			Если СтрокаСоответствия.Значение = ИдентификаторДополнительногоРеквизита Тогда

				ДополнительныйРеквизит = СтрокаСоответствия.Ключ;
				Прервать;

			КонецЕсли;

		КонецЦикла;

		Если ДополнительныйРеквизит <> Неопределено Тогда

			СтрокаТаблицыСопоставления = ТаблицаСопоставленияДанных.НайтиПоИдентификатору(ВыбраннаяСтрока);
			Если ТипЗнч(СтрокаТаблицыСопоставления[ИдентификаторДополнительногоРеквизита]) = Тип(
				"СправочникСсылка.ЗначенияСвойствОбъектов") Или ТипЗнч(
				СтрокаТаблицыСопоставления[ИдентификаторДополнительногоРеквизита]) = Тип(
				"СправочникСсылка.ЗначенияСвойствОбъектовИерархия") Тогда

				ПараметрВыбораЗначенийДополнительногоРеквизита = Новый ПараметрВыбора("Отбор.Владелец",
					ДополнительныйРеквизит);

				МассивПараметровВыбора = Новый Массив;
				МассивПараметровВыбора.Добавить(ПараметрВыбораЗначенийДополнительногоРеквизита);

				Поле.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьСопоставлениеПоШаблону(Команда)

	НачатьНастройкуСоответствияПолей();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеДругимСпособомНажатие(Элемент)

	РезультатЗакрытия = Новый Структура;
	РезультатЗакрытия.Вставить("ОписаниеДействия", "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника");

	Закрыть(РезультатЗакрытия);

КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)

	Если Не ПроверитьОбязательныеПоля() Тогда
		Возврат;
	КонецЕсли;

	Если ПорядковыйНомерПерехода = 1 Тогда
		Если ОткудаБратьДанные = 1 Тогда
			ЗаполнитьТабличныйСамостоятельно();
		ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ФиксированныйШаблон Тогда
			ЗаполнитьТабличныйДокументИзФайлаШаблона();
		Иначе
			ЗаполнитьТабличныйДокументИзФайла();
		КонецЕсли;
	Иначе
		ИзменитьПорядковыйНомерПерехода(+1);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)

	Шаг = -1;
	Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПредварительноТЧ
		Или Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПредварительноСправочник
		Или Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПредварительноРегистрСведений Тогда

		Шаг = -2;

	КонецЕсли;

	ИзменитьПорядковыйНомерПерехода(Шаг);

КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)

	СформироватьСоответствиеДанныхКартинокИЗавершитьРаботуФормы();

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)

	Закрыть();

КонецПроцедуры


&НаКлиенте
Процедура КомандаОстановкаФоновогоЗадания(Команда)
	
	ОтменитьФоновоеЗаданиеНаСервере(ФоновоеЗаданиеИдентификатор);
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
	Шаг = -1;
	ИзменитьПорядковыйНомерПерехода(Шаг);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьФоновоеЗаданиеНаСервере(ФоновоеЗаданиеИдентификатор)

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВнешнийФайл(Команда)

	ЗаполнитьТабличныйДокументИзФайла();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВнешнийШаблон(Команда)

	ЗаполнитьТабличныйДокументИзФайлаШаблона();

КонецПроцедуры

&НаКлиенте
Процедура ОбразецФормата_csv(Команда)

	ОткрытьОбразец("csv", "ОбразецЗагрузкиДанных_csv");

КонецПроцедуры

&НаКлиенте
Процедура ОбразецФормата_mxl(Команда)

	ОткрытьОбразец("mxl", "ОбразецЗагрузкиДанных_mxl");

КонецПроцедуры

&НаКлиенте
Процедура ОбразецФормата_xlsx(Команда)

	ОткрытьОбразец("xlsx", "ОбразецЗагрузкиДанных_xlsx");

КонецПроцедуры

&НаКлиенте
Процедура ШаблонФормата_xlsx(Команда)

	ОткрытьОбразец("xlsx", "ШаблонЗагрузкиДанных_xlsx");

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_БезОтбора(Команда)

	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("БезОтбора");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;

	ИзменитьПорядковыйНомерПерехода(-1);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_БудутСозданы(Команда)

	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("БудутСозданы");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;

	ИзменитьПорядковыйНомерПерехода(-1);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_НесогласованныеДанные(Команда)

	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("Несогласованные");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;

	ИзменитьПорядковыйНомерПерехода(-1);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_ОтборОшибокНет(Команда)

	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("ОтборОшибокНет");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;

	ИзменитьПорядковыйНомерПерехода(-1);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_ОтборОшибки(Команда)

	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("ОтборОшибки");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;

	ИзменитьПорядковыйНомерПерехода(-1);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_Сопоставлено(Команда)

	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("Сопоставленные");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;

	ИзменитьПорядковыйНомерПерехода(-1);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаСоответствияПолей(Команда)

	НачатьНастройкуСоответствияПолей();

КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеСопоставлениеКолонок(Команда)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОбъектЗагрузки", Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения);

	ОткрытьФорму("РегистрСведений.СоответствиеНаименованияКолонокПолямЗагрузки.ФормаСписка", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоиска(Команда)

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыборНастроекЗавершение", ЭтотОбъект);
	Если Параметры.НастройкиЗагрузкиДанных.Свойство("НастройкиПоиска") Тогда
		ПараметрыНастройки = Параметры.НастройкиЗагрузкиДанных.НастройкиПоиска;
	Иначе
		ПараметрыНастройки = Новый Структура;
	КонецЕсли;
	НаборСвойствДляДополнительногоРеквизита = НаборСвойствДляДополнительногоРеквизита(
			Элементы.НастройкиПоиска.Видимость);
	ПараметрыНастройки.Вставить("НаборСвойствДляДополнительногоРеквизита", НаборСвойствДляДополнительногоРеквизита);
	ПараметрыНастройки.Вставить("КудаЗагружаемДопРеквизиты", КудаЗагружаемДопРеквизиты);

	ОткрытьФорму("Обработка.ЗагрузкаДанныхИзВнешнегоИсточника.Форма.НастройкиПоиска", ПараметрыНастройки, ЭтотОбъект, ,
		, , ОповещениеОЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)

	Кодировка = "UTF-8";
	ПутьФайлаНастроек = НСтр("ru='Настройки сопоставления колонок.txt'");
	АдресВХранилище = "";

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресВХранилище", АдресВХранилище);
	ДополнительныеПараметры.Вставить("ПутьФайлаНастроек", ПутьФайлаНастроек);
	ДополнительныеПараметры.Вставить("ИмяФайлаНастроек", ПутьФайлаНастроек);
	ДополнительныеПараметры.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("Кодировка", Кодировка);

	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьРасширениеРаботыСФайламиЗавершение", ЭтотОбъект,
		ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайл(Команда)

	АдресТекстаНаСервере = "";
	ПотокВыгрузки = ВыгрузитьНастройкиВФайл(АдресТекстаНаСервере);
	СохранитьФайлНастроек(ПотокВыгрузки);

КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОЗагрузкеДанных(Команда)

	ОткрытьФорму("Обработка.ЗагрузкаДанныхИзВнешнегоИсточника.Форма.КраткоеОписание");

КонецПроцедуры

&НаКлиенте
Процедура Видеоурок(Команда)

	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://www.youtube.com/watch?v=PwcoBPi9Slc&feature=youtu.be");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыборНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда

		Параметры.НастройкиЗагрузкиДанных.Вставить("НастройкиПоиска", Результат);
		КудаЗагружаемДопРеквизиты = Результат.КудаЗагружаемДопРеквизиты;
		Параметры.НастройкиЗагрузкиДанных.КудаЗагружаемДопРеквизиты = КудаЗагружаемДопРеквизиты;
		ОбновитьДеревоПолейЗагрузкиДоступныхПользователю(Результат.ДополнительныйРеквизитПоиска);
		СформироватьЗаголовокКомандыНастройкиПоиска(Элементы.НастройкиПоиска.Заголовок,
			Параметры.НастройкиЗагрузкиДанных.НастройкиПоиска);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораШаблонаСоответствияПолей(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) <> Тип("СправочникСсылка.СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника") Тогда

		Возврат;

	КонецЕсли;

	НастройкаСоответствияПолей = Результат;
	
	// Ветвление, как обход.
	Если Параметры.НастройкиЗагрузкиДанных.Свойство("ВыбранныеДополнительныеРеквизиты") Тогда

		СоответствиеПолейПоШаблону(Результат, Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);

	Иначе

		СоответствиеПолейПоШаблону(Результат, Новый Соответствие);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОсновнойВидЦенПродажи()

	ВидЦен = ОсновнойВидЦенПродажи();
	Параметры.НастройкиЗагрузкиДанных.Вставить("ВидЦен", ВидЦен);
	ПоказатьОповещениеПользователя(НСтр("ru='Вид цен должен быть заполнен.'"), , НСтр(
		"ru='Вид цен должен быть заполнен. Если загружаются цены, то значение этой настройки не повлияет на загрузку.'"));

КонецПроцедуры

&НаСервере
Процедура ОбновитьОбразцыЗагрузкиДанных()

	Перем Менеджер;

	ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМенеджерПоИмениОбъектаЗаполнения(
		Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, Менеджер);
	Менеджер.ПриОпределенииОбразцовЗагрузкиДанных(Параметры.НастройкиЗагрузкиДанных, УникальныйИдентификатор);
	ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПереопределитьОбразцыЗагрузкиДанных(
		Параметры.НастройкиЗагрузкиДанных, УникальныйИдентификатор);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОсновнойВидЦенПродажи()

	Возврат Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();

КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеФайлаОбразцаЗагрузки(ДанныеФайла, Расширение)

	Если ЗначениеЗаполнено(ДанныеФайла.ИмяШаблона) Тогда

		Адрес = Параметры.НастройкиЗагрузкиДанных[ДанныеФайла.ИмяШаблона];

	ИначеЕсли Расширение = "xlsx" Тогда

		Адрес = Параметры.НастройкиЗагрузкиДанных.ОбразецЗагрузкиДанных_xlsx;

	ИначеЕсли Расширение = "csv" Тогда

		Адрес = Параметры.НастройкиЗагрузкиДанных.ОбразецЗагрузкиДанных_csv;

	КонецЕсли;

	НаименованиеФайлаБезРасширения = НСтр("ru = 'ОбразецЗагрузкиДанных'");

	ДанныеФайла.Вставить("ДатаМодификацииУниверсальная", ТекущаяДата());
	ДанныеФайла.Вставить("Зашифрован", Ложь);
	ДанныеФайла.Вставить("ИмяФайла", НаименованиеФайлаБезРасширения + "." + Расширение);
	ДанныеФайла.Вставить("Наименование", НаименованиеФайлаБезРасширения);
	ДанныеФайла.Вставить("ОтносительныйПуть", "LD\"); //LoadData
	ДанныеФайла.Вставить("ПодписанЭП", Ложь);
	ДанныеФайла.Вставить("Размер", Неопределено);
	ДанныеФайла.Вставить("Расширение", Расширение);
	ДанныеФайла.Вставить("Редактирует", Неопределено);
	ДанныеФайла.Вставить("СсылкаНаДвоичныеДанныеФайла", Адрес);
	ДанныеФайла.Вставить("ФайлРедактируетТекущийПользователь", Ложь);
	ДанныеФайла.Вставить("ФайлРедактируется", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбразец(Расширение, ИмяШаблона = "")

	Если Расширение = "mxl" Тогда

		ТабличныйДокумент = Неопределено;
		ПолучитьОбразецТабличногоДокумента(ТабличныйДокумент);
		Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда

			ОбластиОбъектов = Новый СписокЗначений;
			ИдентификаторПечатнойФормы = Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;

			КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
			ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм,
				ИдентификаторПечатнойФормы);
			ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Образец подготовленных данных в формате mxl'");
			ПечатнаяФорма.ТабличныйДокумент = ТабличныйДокумент;
			ПечатнаяФорма.ИмяФайлаПечатнойФормы = НСтр("ru = 'Образец подготовленных данных в формате mxl'");

			УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);

		КонецЕсли;

	Иначе

		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("ИмяШаблона", ИмяШаблона);
		ЗаполнитьДанныеФайлаОбразцаЗагрузки(ДанныеФайла, Расширение);

		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьОбластьЗаголовка()

	ОбластьЗаголовка = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если ОбластьЗаголовка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда // промазали, выделили колонку

		ОбластьЗаголовка = ТабличныйДокумент.Область("R1" + ОбластьЗаголовка.Имя);

	КонецЕсли;

	Возврат ОбластьЗаголовка;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораФильтраТаблицыСопоставления(ЭтоЗагрузкаТабличнойЧасти)

	Элементы.ФильтрТаблицаСопоставления.СписокВыбора.Вставить(1, НСтр("ru ='Сопоставленные'"), НСтр(
		"ru ='Сопоставлены, можно загрузить (обновить)'"));
	Элементы.ФильтрТаблицаСопоставления.СписокВыбора.Вставить(1, НСтр("ru ='БудутСозданы'"), НСтр(
		"ru ='Не сопоставлены, будут созданы'"));
	Элементы.ФильтрТаблицаСопоставления.СписокВыбора.Вставить(1, ЗаполненыНеПолностью(), НСтр(
		"ru ='Не сопоставлены, нужно дозаполнить'"));
	Элементы.ФильтрТаблицаСопоставления.СписокВыбора.Вставить(1, НСтр("ru ='Несогласованные'"), НСтр(
		"ru ='Ошибка: не заполнены в Excel'"));

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнение()

	РезультатПроверки = ПроверитьВыполнениеНаСервере(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);
	Если РезультатПроверки.ЗаданиеВыполнено Тогда

		СтруктураОповещения = Неопределено;
		РезультатПроверки.ДополнительныеПараметры.Свойство("ПоказатьОповещение", СтруктураОповещения);
		Если СтруктураОповещения <> Неопределено Тогда
			ПоказатьОповещениеПользователя(СтруктураОповещения.ЗаголовокОповещения, ,
				СтруктураОповещения.ТекстОповещения, , , );
		КонецЕсли;

		ИзменитьПорядковыйНомерПерехода(+1);

	Иначе

		Если ФоновоеЗаданиеИнтервалПроверки < 15 Тогда

			ФоновоеЗаданиеИнтервалПроверки = ФоновоеЗаданиеИнтервалПроверки + 0.7;

		КонецЕсли;

		ПодключитьОбработчикОжидания("ПроверитьВыполнение", ФоновоеЗаданиеИнтервалПроверки, Истина);

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьОшибкуЖурналаРегистрации(ПодробноеОписаниеОшибки)

	ИмяСобытия = НСтр("ru = 'Загрузка данных из внешнего источника'");
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеОписаниеОшибки);

КонецПроцедуры

&НаСервере
Процедура НазначитьНомерКолонкиВДеревеПолей(ДеревоПолей, НовоеИмяПоля, НовыйНомерКолонки)

	МассивВыбранныхПолей = ДеревоПолей.Строки.НайтиСтроки(Новый Структура("ИмяПоля", НовоеИмяПоля), Истина);
	Если МассивВыбранныхПолей.Количество() > 0 Тогда

		Для Каждого СтрокаДереваПолей Из МассивВыбранныхПолей Цикл

			Если СтрокаДереваПолей.НомерКолонки <> 0 И СтрокаДереваПолей.НомерКолонки <> НовыйНомерКолонки Тогда

				ОбластьЗаголовкаОтмены 						= ТабличныйДокумент.Область("R1C"
					+ СтрокаДереваПолей.НомерКолонки);
				ОбластьЗаголовкаОтмены.Текст 				= "Не загружать";
				ОбластьЗаголовкаОтмены.ПараметрРасшифровки	= "";

			КонецЕсли;

			СтрокаДереваПолей.НомерКолонки = НовыйНомерКолонки;
			СтрокаДереваПолей.НомерЦвета = 3;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтразитьВыбранныеДополнительныеРеквизитыВДеревеПолей(ДеревоПолей, НомерКолонки, ИмяПоля, ПредставлениеПоля)

	ОтборСтрок = Новый Структура("ИмяПоля",
		ЗагрузкаДанныхИзВнешнегоИсточника.ИмяПоляДобавленияДополнительныхРеквизитов());

	СтрокаРодительДополнительныхРеквизитов = ДеревоПолей.Строки.НайтиСтроки(ОтборСтрок, Ложь);
	Если СтрокаРодительДополнительныхРеквизитов.Количество() > 0 Тогда

		ОтборСтрок.ИмяПоля = ИмяПоля;

		СтрокаДополнительногоРеквизита = СтрокаРодительДополнительныхРеквизитов[0].Строки.НайтиСтроки(ОтборСтрок, Ложь);
		Если СтрокаДополнительногоРеквизита.Количество() > 0 Тогда

			СтрокаДополнительногоРеквизита[0].НомерКолонки		= НомерКолонки;
			СтрокаДополнительногоРеквизита[0].НомерЦвета		= 3;
			СтрокаДополнительногоРеквизита[0].НомерЦветаОригинал= 4;

		Иначе

			ПолеДополнительногоРеквизита = СтрокаРодительДополнительныхРеквизитов[0].Строки.Добавить();
			ПолеДополнительногоРеквизита.ИмяГруппыПолей			= "";
			ПолеДополнительногоРеквизита.ИмяПоля				= ИмяПоля;
			ПолеДополнительногоРеквизита.ТипПолучаемогоЗначения = Неопределено;
			ПолеДополнительногоРеквизита.ПредставлениеПоля		= ПредставлениеПоля;
			ПолеДополнительногоРеквизита.НомерКолонки			= НомерКолонки;
			ПолеДополнительногоРеквизита.НомерЦвета				= 3;
			ПолеДополнительногоРеквизита.НомерЦветаОригинал		= 4;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоответствиеПолейПоШаблону(Шаблон, ВыбранныеДополнительныеРеквизиты)

	ДеревоПолей = ПолучитьИзВременногоХранилища(Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);
	Если ТипЗнч(ДеревоПолей) <> Тип("ДеревоЗначений") Тогда

		Возврат;

	КонецЕсли;

	Для Каждого СтрокаСоответствияПолей Из Шаблон.СоответствияПолей Цикл

		Если Не ЗначениеЗаполнено(СтрокаСоответствияПолей.НомерКолонки) Тогда

			Продолжить;

		КонецЕсли;

		ОбластьЗаголовка = ТабличныйДокумент.Область(СтрШаблон("R1C%1", СтрокаСоответствияПолей.НомерКолонки));
		ПередОбработкойПоляСоответствияПолей(ОбластьЗаголовка.ПараметрРасшифровки, ДеревоПолей,
			ВыбранныеДополнительныеРеквизиты);

		Если ЗначениеЗаполнено(СтрокаСоответствияПолей.ДополнительныйРеквизит) Тогда

			ИмяПоля = Параметры.НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов.Получить(
				СтрокаСоответствияПолей.ДополнительныйРеквизит);

			Если ВыбранныеДополнительныеРеквизиты.Получить(СтрокаСоответствияПолей.ДополнительныйРеквизит)
				= Неопределено Тогда

				ВыбранныеДополнительныеРеквизиты.Вставить(СтрокаСоответствияПолей.ДополнительныйРеквизит, ИмяПоля);

			КонецЕсли;

			ОтразитьВыбранныеДополнительныеРеквизитыВДеревеПолей(ДеревоПолей, СтрокаСоответствияПолей.НомерКолонки,
				ИмяПоля, СтрокаСоответствияПолей.ПредставлениеПоля);

		Иначе

			ИмяПоля = СтрокаСоответствияПолей.ИмяПоля;

		КонецЕсли;

		НазначитьНомерКолонкиВДеревеПолей(ДеревоПолей, ИмяПоля, СтрокаСоответствияПолей.НомерКолонки);

		ОбластьЗаголовка.Текст					= СтрокаСоответствияПолей.ПредставлениеПоля;
		ОбластьЗаголовка.ПараметрРасшифровки	= ИмяПоля;

	КонецЦикла;

	ПоместитьВоВременноеХранилище(ДеревоПолей, Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);

КонецПроцедуры

&НаСервере
Процедура ПередОбработкойПоляСоответствияПолей(ТекущийПараметрРасшифровки, ДеревоПолей, ВыбранныеДополнительныеРеквизиты)

	Если ПустаяСтрока(ТекущийПараметрРасшифровки) Тогда

		Возврат;

	КонецЕсли;

	ИмяПоляГруппыДополнительныхРеквизитов = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяПоляДобавленияДополнительныхРеквизитов();

	ОтборПоляРодитель = Новый Структура("ИмяПоля", ИмяПоляГруппыДополнительныхРеквизитов);
	МассивСтрокСПолемРодителемДополнительныхРеквизитов = ДеревоПолей.Строки.НайтиСтроки(ОтборПоляРодитель, Истина);
	Если МассивСтрокСПолемРодителемДополнительныхРеквизитов.Количество() = 1 Тогда

		ОтборПолей = Новый Структура("ИмяПоля", ТекущийПараметрРасшифровки);
		МассивСтрокДерева = МассивСтрокСПолемРодителемДополнительныхРеквизитов[0].Строки.НайтиСтроки(ОтборПолей);
		Если МассивСтрокДерева.Количество() = 0 Тогда

			Возврат;

		КонецЕсли;

		Для Каждого СтрокаОписания Из МассивСтрокДерева Цикл

			Для Каждого ЭлементСоответствия Из ВыбранныеДополнительныеРеквизиты Цикл

				Если Не ТекущийПараметрРасшифровки = ЭлементСоответствия.Значение Тогда

					Продолжить;

				КонецЕсли;

				ВыбранныеДополнительныеРеквизиты.Удалить(ЭлементСоответствия.Ключ);

			КонецЦикла;

			СтрокаОписания.НомерКолонки = 0;
			СтрокаОписания.НомерЦвета = СтрокаОписания.НомерЦветаОригинал;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьВыполнениеНаСервере(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища)

	РезультатПроверки = Новый Структура("ЗаданиеВыполнено, Значение, ДополнительныеПараметры", Ложь, Неопределено,
		Новый Структура);
	Если ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) 
		И ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда

		РезультатПроверки.Вставить("ЗаданиеВыполнено", Истина);
		РезультатЗадания = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		ТабличныйДокумент = РезультатЗадания.ТабличныйДокумент;
		Параметры.НастройкиЗагрузкиДанных.ИдентификаторПоставляемойНастройки 
			= РезультатЗадания.ДополнительныеПараметры.ИдентификаторПоставляемойНастройки;		
			
		ИдентификаторПоставляемойНастройки = Параметры.НастройкиЗагрузкиДанных.ИдентификаторПоставляемойНастройки;

		Параметры.НастройкиЗагрузкиДанных.ПараметрыШапки = РезультатЗадания.ДополнительныеПараметры.ПараметрыШапки;

		СоответствиеПолей = Справочники.СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника
			.НайтиПоИдентификаторуПоставляемойНастройки(ИдентификаторПоставляемойНастройки, Истина);
			
		Если СоответствиеПолей.Недействителен Тогда
			СоответствиеПолей = Справочники.СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника.ПустаяСсылка();
		КонецЕсли;

		Если ИдентификаторПоставляемойНастройки <> Неопределено И Не СоответствиеПолей.Пустая() Тогда

			СоответствиеПолейПоШаблону(СоответствиеПолей, Новый Соответствие);

			СтруктураОповещения = Новый Структура;
			ЗаголовокОповещения = НСтр("ru='Шаблон соответствия полей'");
			ТекстОповещения = НСтр("ru='Поля выбраны автоматически по шаблону соответствия'");
			СтруктураОповещения.Вставить("ЗаголовокОповещения", ЗаголовокОповещения);
			СтруктураОповещения.Вставить("ТекстОповещения", ТекстОповещения);
			РезультатПроверки.ДополнительныеПараметры.Вставить("ПоказатьОповещение", СтруктураОповещения);

		Иначе
			Результат = АктуализироватьВыбранныеКолонки();
			Если Результат <> Неопределено Тогда
				ПоместитьВоВременноеХранилище(Результат.ДеревоПолей,
					Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);
				Параметры.НастройкиЗагрузкиДанных.Вставить("ВыбранныеДополнительныеРеквизиты",
					Результат.ВыбранныеДополнительныеРеквизиты);
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Возврат РезультатПроверки;

КонецФункции

&НаСервере
Функция ПослеПроверкиДанныхТабличногоДокументаВДлительнойОперации(ФоновоеЗаданиеРезультатФормирования)

	РезультатВыполнения = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеРезультатФормирования.АдресРезультата);
	
	Шаг = +1;
	
	Если РезультатВыполнения <> Неопределено Тогда
		
		ТабличныйДокументСообщения = РезультатВыполнения.ТабличныйДокументСообщения;
		ТаблицаСопоставленияДанных.Загрузить(РезультатВыполнения.ТаблицаСопоставленияДанных);
		Параметры.НастройкиЗагрузкиДанных.Вставить("НастройкиОбновленияСвойств",
			РезультатВыполнения.НастройкиЗагрузкиДанных.НастройкиОбновленияСвойств);

		УстановитьНастройкиГруппРодителей(РезультатВыполнения.ДеревоПолей);
		УстановитьНастройкиВидаЦены(РезультатВыполнения.ДеревоПолей);

		
		Если РезультатВыполнения.Ошибки = Неопределено Или (ТипЗнч(РезультатВыполнения.Ошибки) = Тип("ТаблицаЗначений")
			И РезультатВыполнения.Ошибки.Количество() = 0) Тогда

			Шаг = +2;

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Шаг;

КонецФункции

&НаСервере
Процедура УстановитьНастройкиГруппРодителей(ДеревоПолей)

	НастройкиРодитель = ДеревоПолей.Строки.Найти("Родитель");
	Если НастройкиРодитель <> Неопределено И НастройкиРодитель.Строки.Количество() > 0 Тогда
		// Если выбрана колонка Родитель, берем данные из нее, и скрываем общую группу для всех элементов
		ВидимостьГруппыРодителя = Истина;
		Для Каждого строкаРодитель Из НастройкиРодитель.Строки Цикл
			Если строкаРодитель.НомерКолонки <> 0 Тогда
				ВидимостьГруппыРодителя = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Элементы.ГруппаОбщееЗначениеСправочник.Видимость = ВидимостьГруппыРодителя;
		Элементы.ГруппаОбщееЗначениеСправочникТЧ.Видимость = ВидимостьГруппыРодителя;

	КонецЕсли;

	Если Элементы.Найти("Родитель") <> Неопределено Тогда
		Элементы.Родитель.УстановитьДействие("НачалоВыбора", "Подключаемый_РодительНачалоВыбора");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиВидаЦены(ДеревоПолей)

	НастройкиВидЦен = ДеревоПолей.Строки.Найти("ВидЦен");
	ВидимостьГруппыВидЦен = Истина;
	Если НастройкиВидЦен <> Неопределено И НастройкиВидЦен.НомерКолонки <> 0 Тогда
		// Если выбрана колонка ВидЦен, берем данные из нее, и скрываем общую группу для всех элементов
		ВидимостьГруппыВидЦен = Ложь;
	КонецЕсли;

	Элементы.ВидЦенШаблон.Видимость = ВидимостьГруппыВидЦен;
	Элементы.ВидЦенШаблон1.Видимость = ВидимостьГруппыВидЦен;
	Элементы.ДатаОбработки.Видимость = ВидимостьГруппыВидЦен;
	Элементы.ДатаОбработки1.Видимость = ВидимостьГруппыВидЦен;

КонецПроцедуры

&НаКлиенте
Процедура РодительВыборГруппы(Результат, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Результат) Тогда

		Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.Родитель = Результат;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьДеревоПолейЗагрузкиДоступныхПользователю()
	Перем ДеревоПолей;

	Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.СоздатьДеревоПолейЗагрузкиДоступныхПользователю(ДеревоПолей,
		Параметры.НастройкиЗагрузкиДанных);
	АдресХраненияДереваПолей = ПоместитьВоВременноеХранилище(ДеревоПолей, УникальныйИдентификатор);

	Параметры.НастройкиЗагрузкиДанных.Вставить("АдресХраненияДереваПолей", АдресХраненияДереваПолей);

КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоПолейЗагрузкиДоступныхПользователю(ДополнительныйРеквизит)

	ДеревоОбновлено = Ложь;
	
	ТекущееДеревоПолей = ПолучитьИзВременногоХранилища(Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);
	СтрокиНоменклатуры = ТекущееДеревоПолей.Строки.НайтиСтроки(Новый Структура("ИмяГруппыПолей", "Номенклатура"));
	Если СтрокиНоменклатуры.Количество() > 0 Тогда
		СписокПолейНоменклатуры = СтрокиНоменклатуры[0].Строки;
		Если ЗначениеЗаполнено(ДополнительныйРеквизит) Тогда
			НайденыПоля = СписокПолейНоменклатуры.НайтиСтроки(Новый Структура("ИмяПоля", ДополнительныйРеквизит.Наименование));
			Если НайденыПоля.Количество() = 0 Тогда
				
				НовоеПоле = СписокПолейНоменклатуры.Добавить();
				НовоеПоле.ИмяПоля = ДополнительныйРеквизит.Наименование;
				НовоеПоле.НомерЦвета = 2;
				НовоеПоле.НомерЦветаОригинал = 2;
				НовоеПоле.ПредставлениеПоля = ДополнительныйРеквизит.Наименование;
				ДеревоОбновлено = Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НовоеДеревоПолей = Неопределено;
	Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.СоздатьДеревоПолейЗагрузкиДоступныхПользователю(НовоеДеревоПолей,
		Параметры.НастройкиЗагрузкиДанных);
	
	НовыеПоляДополнительныхРеквизитов 
		= НовоеДеревоПолей.Строки.НайтиСтроки(Новый Структура("ИмяПоля", "_ДополнительныеРеквизитыИСведения"));
	ТекущиеПоляДополнительныхРеквизитов
		= ТекущееДеревоПолей.Строки.НайтиСтроки(Новый Структура("ИмяПоля", "_ДополнительныеРеквизитыИСведения"));
	Если ТекущиеПоляДополнительныхРеквизитов.Количество() > 0 
		И НовыеПоляДополнительныхРеквизитов.Количество() > 0 Тогда
		
		РодительНовыхРеквизитов = НовыеПоляДополнительныхРеквизитов[0];
		РодительТекущихРеквизитов = ТекущиеПоляДополнительныхРеквизитов[0];
		Если РодительНовыхРеквизитов.ПредставлениеПоля <> РодительТекущихРеквизитов.ПредставлениеПоля Тогда
			ТекущееДеревоПолей.Строки.Удалить(РодительТекущихРеквизитов);
			ЗаполнитьЗначенияСвойств(ТекущееДеревоПолей.Строки.Добавить(), РодительНовыхРеквизитов);
			ДеревоОбновлено = Истина;
		КонецЕсли;
		
	КонецЕсли;

	Если ДеревоОбновлено Тогда
		АдресХраненияДереваПолей = ПоместитьВоВременноеХранилище(ТекущееДеревоПолей, ЭтаФорма.УникальныйИдентификатор);
		Параметры.НастройкиЗагрузкиДанных.Вставить("АдресХраненияДереваПолей", АдресХраненияДереваПолей);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДополнительныхРеквизитов(ДопРеквизит, ДопРеквизитВладелец)

	Если ДопРеквизит <> Неопределено Тогда

		Если Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Получить(ДопРеквизит) = Неопределено Тогда
			
			ОписаниеДополнительныхРеквизитов = "ОписаниеДополнительныхРеквизитов";
			Если ДопРеквизитВладелец = КонстантаДопРеквизитНоменклатура Тогда
				ОписаниеДополнительныхРеквизитов = "ОписаниеДополнительныхРеквизитовНоменклатура";
			ИначеЕсли ДопРеквизитВладелец = КонстантаДопРеквизитХарактеристики Тогда
				Если Параметры.НастройкиЗагрузкиДанных.Свойство("ОписаниеДополнительныхРеквизитовХарактеристики") Тогда
					ОписаниеДополнительныхРеквизитов = "ОписаниеДополнительныхРеквизитовХарактеристики";  
				КонецЕсли;
			КонецЕсли;

			Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Вставить(ДопРеквизит,
				Параметры.НастройкиЗагрузкиДанных[ОписаниеДополнительныхРеквизитов].Получить(ДопРеквизит));

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьОбразецТабличногоДокумента(ТабличныйДокумент)
	Перем Менеджер;

	ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМенеджерПоИмениОбъектаЗаполнения(
		Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, Менеджер);
	ТабличныйДокумент = Менеджер.ПолучитьМакет(Параметры.НастройкиЗагрузкиДанных.ОбразецЗагрузкиДанных_mxl);

КонецПроцедуры

&НаКлиенте
Процедура КомандаГотовоЗавершение()

	СохраняемыеНастройки = Новый Структура;
	СохраняемыеНастройки.Вставить("КудаЗагружаемХарактеристики", КудаЗагружаемХарактеристики);
	СохраняемыеНастройки.Вставить("КудаЗагружаемКартинки", КудаЗагружаемКартинки);
	СохраняемыеНастройки.Вставить("КудаЗагружаемДопРеквизиты", КудаЗагружаемДопРеквизиты);
	СохраняемыеНастройки.Вставить("ОбновлятьСуществующие", ОбновлятьСуществующие);
	СохраняемыеНастройки.Вставить("СоздаватьЕслиНеСопоставлено", СоздаватьЕслиНеСопоставлено);
	СохраняемыеНастройки.Вставить("СоздаватьЕслиНеСопоставлено", СоздаватьЕслиНеСопоставлено);
	СохраняемыеНастройки.Вставить("НастройкиПоиска", Параметры.НастройкиЗагрузкиДанных.НастройкиПоиска);

	Параметры.НастройкиЗагрузкиДанных.Свойство("ОбщееЗначениеСправочник", ОбщееЗначениеСправочникНоменклатура);
	СохраняемыеНастройки.Вставить("ОбщееЗначениеСправочник", ОбщееЗначениеСправочникНоменклатура);
	КлючНастроек = ?(Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаРегистраСведений, "ЭтоЗагрузкаРегистраСведений",
		"ЭтоЗагрузкаСправочника");
	СохранитьНастройкиФормы(СохраняемыеНастройки, КлючНастроек);

	ЗакрытьФормуБезусловно = Истина;

	РезультатЗакрытия = Новый Структура;
	РезультатЗакрытия.Вставить("ОписаниеДействия", "ОбработатьПодготовленныеДанные");
	РезультатЗакрытия.Вставить("ТаблицаСопоставленияДанных", ТаблицаСопоставленияДанных);
	РезультатЗакрытия.Вставить("НастройкиЗагрузкиДанных", Параметры.НастройкиЗагрузкиДанных);
	РезультатЗакрытия.Вставить("ДеревоИерархии", ДеревоИерархии);

	ОповеститьОВыборе(РезультатЗакрытия);
	Оповестить("ОбработатьПодготовленныеДанные", РезультатЗакрытия);

КонецПроцедуры

&НаСервереБезКонтекста
Функция НаборСвойствДляДополнительногоРеквизита(ВидимостьНастройкиПоиска)

	Если ВидимостьНастройкиПоиска Тогда
		Возврат УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_Общие");
	Иначе
		Возврат Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка();
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)

	ОчиститьСообщения();

	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)

	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);

	ПорядковыйНомерПерехода = Значение;

	Если ПорядковыйНомерПерехода < 0 Тогда

		ПорядковыйНомерПерехода = 0;

	КонецЕсли;

	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);

КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода",
		ПорядковыйНомерПерехода));

	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;

	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];

	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");

	Если КнопкаДалее <> Неопределено Тогда

		КнопкаДалее.КнопкаПоУмолчанию = Истина;

		УстановитьВидимостьКнопокДалееИНазад();

	Иначе

		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");

		Если КнопкаГотово <> Неопределено Тогда

			КнопкаГотово.КнопкаПоУмолчанию = Истина;

		КонецЕсли;

	КонецЕсли;

	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда

		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	Перем РезультатПроцедуры;
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда

		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода",
			ПорядковыйНомерПерехода - 1));

		Если СтрокиПерехода.Количество() > 0 Тогда

			СтрокаПерехода = СтрокиПерехода[0];
			
			// обработчик ПриПереходеДалее
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) И Не СтрокаПерехода.ДлительнаяОперация Тогда

				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]",
					СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);

				Отказ = Ложь;

				РезультатПроцедуры = Вычислить(ИмяПроцедуры);

				Если Отказ Тогда

					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);

					Возврат;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	Иначе

		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода",
			ПорядковыйНомерПерехода + 1));

		Если СтрокиПерехода.Количество() > 0 Тогда

			СтрокаПерехода = СтрокиПерехода[0];
			
			// обработчик ПриПереходеНазад
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) И Не СтрокаПерехода.ДлительнаяОперация Тогда

				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]",
					СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);

				Отказ = Ложь;

				РезультатПроцедуры = Вычислить(ИмяПроцедуры);

				Если Отказ Тогда

					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);

					Возврат;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода",
		ПорядковыйНомерПерехода));

	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;

	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];

	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда

		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда

		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);

		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;

		РезультатПроцедуры = Вычислить(ИмяПроцедуры);

		Если Отказ Тогда

			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);

			Возврат;

		ИначеЕсли ПропуститьСтраницу Тогда

			Если ЭтоПереходДалее Тогда

				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);

				Возврат;

			Иначе

				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);

				Возврат;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	Перем РезультатПроцедуры;

	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода",
		ПорядковыйНомерПерехода));

	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;

	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда

		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]",
			СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);

		Отказ = Ложь;
		ПерейтиДалее = Истина;

		РезультатПроцедуры = Вычислить(ИмяПроцедуры);

		Если Отказ Тогда

			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);

			Возврат;

		ИначеЕсли ПерейтиДалее Тогда

			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);

			Возврат;

		КонецЕсли;

	Иначе

		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);

		Возврат;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода, ИмяОсновнойСтраницы, ИмяСтраницыНавигации,
	ИмяСтраницыДекорации = "", ИмяОбработчикаПриОткрытии = "", ИмяОбработчикаПриПереходеДалее = "",
	ИмяОбработчикаПриПереходеНазад = "", ДлительнаяОперация = Ложь, ИмяОбработчикаДлительнойОперации = "")
	НоваяСтрока = ТаблицаПереходов.Добавить();

	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;

	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;

	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)

	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл

		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда

			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);

			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда

				Возврат ЭлементФормыПоИмениКоманды;

			КонецЕсли;

		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы") И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда

			Возврат Элемент;

		Иначе

			Продолжить;

		КонецЕсли;

	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьКнопокДалееИНазад()

	ЭтоСтраницаРезультатСопоставления = (ПорядковыйНомерПерехода = 7);
	Элементы.КомандаНазад1.Видимость = Не ЭтоСтраницаРезультатСопоставления;
	Элементы.КомандаДалее1.Видимость = Не ЭтоСтраницаРезультатСопоставления;
	Элементы.КомандаНазадКИтогам.Видимость = ЭтоСтраницаРезультатСопоставления;

КонецПроцедуры

&НаКлиенте
Процедура НачатьНастройкуСоответствияПолей()

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОбъектЗагрузки", Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения);
	ПараметрыОткрытия.Вставить("ВыбранныеПоля", Новый Соответствие);

	Для НомерКолонки = 1 По Параметры.НастройкиЗагрузкиДанных.МаксимумПолезныхКолонокТД Цикл

		ПараметрРасшифровки = ТабличныйДокумент.Область(СтрШаблон("R1C%1", НомерКолонки)).ПараметрРасшифровки;
		Если ПустаяСтрока(ПараметрРасшифровки) Тогда

			Продолжить;

		КонецЕсли;

		ПараметрыОткрытия.ВыбранныеПоля.Вставить(ПараметрРасшифровки, НомерКолонки);

	КонецЦикла;

	Если Параметры.НастройкиЗагрузкиДанных.Свойство("ВыбранныеДополнительныеРеквизиты") Тогда

		Для Каждого ЭлементСоответствия Из Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты Цикл

			ПараметрыОткрытия.ВыбранныеПоля.Вставить(ЭлементСоответствия.Ключ,
				ПараметрыОткрытия.ВыбранныеПоля[ЭлементСоответствия.Значение]);
			ПараметрыОткрытия.ВыбранныеПоля.Удалить(ЭлементСоответствия.Значение);

		КонецЦикла;

	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораШаблонаСоответствияПолей", ЭтотОбъект);

	ОткрытьФорму("Справочник.СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника.ФормаВыбора", ПараметрыОткрытия,
		ЭтотОбъект, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Функция ПроверитьОбязательныеПоля()

	Если Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.НоменклатураПоставщиков"
		И Не ЗначениеЗаполнено(КонтрагентПоставщик) Тогда

		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите поставщика, товары которого загружаете.'"),
			КонтрагентПоставщик, "Контрагент");
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаКлиенте
Функция КоличествоЗаполнено()

	Если ТаблицаСопоставленияДанных.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл

		Если Не СтрокаТаблицы.Свойство("Количество_ВходящиеДанные") Тогда
			Возврат Ложь;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(СтрокаТаблицы.Количество_ВходящиеДанные) Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЦикла;
	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ПодключитьРасширениеРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт

	Если Подключено Тогда
#Если Не ВебКлиент Тогда
		ВыбратьФайлНастроекДиалог(ДополнительныеПараметры);
#КонецЕсли
	Иначе

		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьНастройкиИзФайлаЗавершение", ЭтотОбъект,
			ДополнительныеПараметры);

		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Заголовок = НСтр("ru='Выберите файл с настройками сопоставления колонок...'");
		Диалог.Фильтр = НСтр("ru='Файлы настроек сопоставления колонок (*.txt)|*.txt|Все файлы (*.*)|*.*'");
		Диалог.ПолноеИмяФайла = ДополнительныеПараметры.ИмяФайлаНастроек;

		ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
		ФайловаяСистемаКлиент.ЗагрузитьФайл(ОписаниеОповещения, ПараметрыЗагрузки,
			ДополнительныеПараметры.ИдентификаторФормы);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПереходовПоСценарию()

	ТаблицаПереходов.Очистить();

	ТаблицаПереходовНоваяСтрока(1, "СтраницаВыборФайла", "СтраницаНавигацииНачало", , "СтраницаВыборФайла_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(2, "СтраницаЗагрузкаДанных", "СтраницаНавигацииОжидание", , , , , Истина,
		"СтраницаЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(3, "СтраницыПолученныеДанные", "СтраницаНавигацииПродолжение", ,
		"СтраницаЗагрузкиДанных_ПриОткрытии", );
	ТаблицаПереходовНоваяСтрока(4, "СтраницыПроверкаДанных", "СтраницаНавигацииОжидание", , , , , Истина,
		"СтраницыПроверкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(5, "СтраницыРезультатПроверкиДанных", "СтраницаНавигацииПродолжение", ,
		"СтраницыРезультатПроверкиДанных_ПриОткрытии", , "СтраницыРезультатПроверкиДанных_ПриПереходеНазад");
	ТаблицаПереходовНоваяСтрока(6, "СтраницаСопоставлениеДанных", "СтраницаНавигацииОжидание", , , , , Истина,
		"СтраницаСопоставлениеДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(7, "СтраницаРезультатСопоставления", "СтраницаНавигацииПродолжение", ,
		"СтраницаРезультатСопоставления_ПриОткрытии");

	Если Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти Тогда

		ТаблицаПереходовНоваяСтрока(8, "СтраницаПредварительноТЧ", "СтраницаНавигацииОкончание", ,
			"СтраницаПредварительноТЧ_ПриОткрытии");

	ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника Тогда

		ТаблицаПереходовНоваяСтрока(8, "СтраницаПредварительноСправочник", "СтраницаНавигацииОкончание", ,
			"СтраницаПредварительноСправочник_ПриОткрытии");

	ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаРегистраСведений Тогда

		ТаблицаПереходовНоваяСтрока(8, "СтраницаПредварительноРегистрСведений", "СтраницаНавигацииОкончание", ,
			"СтраницаПредварительноРС_ПриОткрытии");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, ПолноеИмяОбъектаЗаполнения)

	Если ДлительнаяОперация.Статус = "Выполнено" Тогда

		ПослеВыполненияФоновогоЗадания(ДлительнаяОперация, ПолноеИмяОбъектаЗаполнения);

	Иначе

		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗадания", ЭтотОбъект,
			ПолноеИмяОбъектаЗаполнения);

		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;

		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания(Прогресс, ПолноеИмяОбъектаЗаполнения) Экспорт

	Если ЗначениеЗаполнено(ПолноеИмяОбъектаЗаполнения) Тогда
		ОткрытьФорму(ПолноеИмяОбъектаЗаполнения + ".ФормаСписка");
	КонецЕсли;
	ПоказатьПредупреждение( , НСтр("ru ='Загрузка данных завершена.'"));

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРасшифровкиОбластиТабличногоДокумента()
	Перем Расшифровка;

	Если Элементы.ТабличныйДокумент.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда

		КоординатыПервойЯчейки = "R1" + Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
		Расшифровка = ТабличныйДокумент.Область(КоординатыПервойЯчейки).Расшифровка;

	КонецЕсли;

	Если Элементы.ТабличныйДокумент.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда

		Расшифровка = Элементы.ТабличныйДокумент.ТекущаяОбласть.Расшифровка;

	КонецЕсли;

	Если ТипЗнч(Расшифровка) = Тип("СписокЗначений") Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиЗаголовкаКолонки", ЭтотОбъект);

		ОбластьЗаголовка = ПолучитьОбластьЗаголовка();

		ПараметрыЗагрузки = Новый Структура;
		ПараметрыЗагрузки.Вставить("НастройкиЗагрузкиДанных", Параметры.НастройкиЗагрузкиДанных);
		ПараметрыЗагрузки.Вставить("ПредставлениеПоля", ОбластьЗаголовка.Текст);
		ПараметрыЗагрузки.Вставить("ИмяПоля", ОбластьЗаголовка.ПараметрРасшифровки);
		ПараметрыЗагрузки.Вставить("ЗаголовокКолонки", ОбластьЗаголовка.Примечание.Текст);
		ПараметрыЗагрузки.Вставить("НомерКолонки", ОбластьЗаголовка.Право);

		ОткрытьФорму("Обработка.ЗагрузкаДанныхИзВнешнегоИсточника.Форма.ВыборПоля", ПараметрыЗагрузки, ЭтотОбъект, , ,
			, ОписаниеОповещения);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанные(РезультатЗагрузки)

	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(
		РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));

	Если Параметры.НастройкиЗагрузкиДанных.Свойство("СоответствиеКартинок")
		И Параметры.НастройкиЗагрузкиДанных.СоответствиеКартинок.Количество() > 0 Тогда

		СоответствиеКартинок = Новый Соответствие;
		Для Каждого ЭлементСоответствия Из Параметры.НастройкиЗагрузкиДанных.СоответствиеКартинок Цикл

			СоответствиеКартинок.Вставить(ЭлементСоответствия.Ключ, ПолучитьИзВременногоХранилища(
				ЭлементСоответствия.Значение));

		КонецЦикла;

		ПараметрыВызоваСервера.Вставить("СоответствиеКартинок", СоответствиеКартинок);

	КонецЕсли;

	Если РезультатЗагрузки.Свойство("ДеревоИерархии") Тогда

		ПараметрыВызоваСервера.Вставить("ДеревоИерархии", ДанныеФормыВЗначение(РезультатЗагрузки.ДеревоИерархии, Тип(
			"ДеревоЗначений")));

	КонецЕсли;

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр(
		"ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;

	Если РезультатЗагрузки.НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника Тогда

		ИмяМетода = СтрЗаменить(РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, "Справочник.",
			"Справочники.") + ".ОбработатьПодготовленныеДанные";

	ИначеЕсли РезультатЗагрузки.НастройкиЗагрузкиДанных.ЭтоЗагрузкаРегистраСведений Тогда

		ИмяМетода = СтрЗаменить(РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения,
			"РегистрСведений.", "РегистрыСведений.") + ".ОбработатьПодготовленныеДанные";

	КонецЕсли;

	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);

КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступностьПриСоздании(Параметры)

	ДоступноРучноеЗаполнение = Не (ОбщегоНазначения.ЭтоВебКлиент() Или ОбщегоНазначения.ЭтоМобильныйКлиент());
	Элементы.ГруппаЗаполнение.Видимость = ДоступноРучноеЗаполнение И Не Параметры.НастройкиЗагрузкиДанных.Свойство(
		"ЗагрузкаБыстрыйСтарт");

	ФиксированныйШаблон = Ложь;
	ЗагрузкаНоменклатуры = Ложь;
	Если Параметры.НастройкиЗагрузкиДанных.Свойство("ЗагрузкаБыстрыйСтарт") Тогда

		КудаЗагружаем = 1;
		ФиксированныйШаблон = Истина;
		Параметры.НастройкиЗагрузкиДанных.Вставить("ФиксированныйШаблон", ФиксированныйШаблон);

		Элементы.НастройкиПоиска.Видимость = Истина;
		Элементы.ГруппаКудаЗагружаем.Видимость = Истина;

	ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Контрагенты"
		Или Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Лиды"
		Или Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.КонтактныеЛица"
		Или Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.НоменклатураПоставщиков" Тогда

		КудаЗагружаем = 2;
		ФиксированныйШаблон = Ложь;
		Параметры.НастройкиЗагрузкиДанных.Вставить("ФиксированныйШаблон", ФиксированныйШаблон);

		Элементы.НастройкиПоиска.Видимость = Ложь;
		Элементы.ГруппаКудаЗагружаем.Видимость = Ложь;

	ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "РегистрСведений.ЦеныНоменклатуры"
		Или Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения
		= "РегистрСведений.ЦеныНоменклатурыКонтрагентов" Тогда

		КудаЗагружаем = 3;
		ФиксированныйШаблон = Ложь;
		Параметры.НастройкиЗагрузкиДанных.Вставить("ФиксированныйШаблон", ФиксированныйШаблон);

		Элементы.НастройкиПоиска.Видимость = Истина;
		Элементы.ГруппаКудаЗагружаем.Видимость = Ложь;

	ИначеЕсли СтрНайти(Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, ".ТабличнаяЧасть.") > 0
		Или Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.ХарактеристикиНоменклатуры" Тогда

		КудаЗагружаем = 1;
		ФиксированныйШаблон = Ложь;
		Параметры.НастройкиЗагрузкиДанных.Вставить("ФиксированныйШаблон", ФиксированныйШаблон);

		Элементы.НастройкиПоиска.Видимость = Истина;
		Элементы.ГруппаКудаЗагружаем.Видимость = Ложь;
		
		Если Параметры.НастройкиЗагрузкиДанных.Свойство("ЗагрузкаШапкиДокумента") 
			И Параметры.НастройкиЗагрузкиДанных.ЗагрузкаШапкиДокумента Тогда
			
			Элементы.ГруппаОткудаБратьДанные.Видимость = Ложь;
			Элементы.ГруппаПодсказкаДляЗаполнения1.Видимость = Ложь;
			Элементы.ГруппаПодсказкаДляЗаполненияВесьДокумент.Видимость = Истина;

		КонецЕсли;

	ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Номенклатура" Тогда

		КудаЗагружаем = 0;
		ФиксированныйШаблон = Ложь;
		ЗагрузкаНоменклатуры = Истина;
		Параметры.НастройкиЗагрузкиДанных.Вставить("ФиксированныйШаблон", ФиксированныйШаблон);

		Элементы.НастройкиПоиска.Видимость = Истина;
		Элементы.ГруппаКудаЗагружаем.Видимость = Истина;
		Элементы.КудаЗагружаем.СписокВыбора.Удалить(Элементы.КудаЗагружаем.СписокВыбора.НайтиПоЗначению(2));
		Элементы.КудаЗагружаем.СписокВыбора.Удалить(Элементы.КудаЗагружаем.СписокВыбора.НайтиПоЗначению(3));

	КонецЕсли;

	Элементы.КонтрагентПоставщик.Видимость = (Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения
		= "Справочник.НоменклатураПоставщиков");

	Элементы.ГруппаШаблон.Видимость = ФиксированныйШаблон;
	Элементы.ВидЦенШаблон.Видимость = ФиксированныйШаблон Или ЗагрузкаНоменклатуры;
	Элементы.СкладОстатков.Видимость = ФиксированныйШаблон;
	Элементы.ГруппаПримеры.Видимость = Не ФиксированныйШаблон;

	Элементы.ГруппаНастройкаЗагрузкиХарактеристик.Видимость = ((КудаЗагружаем < 2) И ПолучитьФункциональнуюОпцию(
		"ИспользоватьХарактеристики") И Не (Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения
		= "Справочник.ХарактеристикиНоменклатуры"));
	Элементы.ГруппаНастройкаЗагрузкиХарактеристикТЧ.Видимость = ((КудаЗагружаем < 2) И ПолучитьФункциональнуюОпцию(
		"ИспользоватьХарактеристики") И Не (Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения
		= "Справочник.ХарактеристикиНоменклатуры"));

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗагрузитьДанныеДругимСпособом",
		"Видимость", Параметры.НастройкиЗагрузкиДанных.ИспользоватьСовместно);

	Если Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаРегистраСведений И Не Параметры.НастройкиЗагрузкиДанных.Свойство(
		"ОбщееЗначение") Тогда

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияКлючевоеЗначениеРСЗаголовок",
			"Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбщееЗначениеРС", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОчиститьОбщееЗначениеРС", "Видимость",
			Ложь);

	КонецЕсли;

	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаГотово", "Заголовок", НСтр(
			"ru ='Загрузить'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Справка1", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Справка2", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Справка3", "Видимость", Ложь);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаДляЗаполнения1",
			"Картинка", БиблиотекаКартинок.Информация);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаДляЗаполнения",
			"Картинка", БиблиотекаКартинок.Информация);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаПроверкиДанных",
			"Картинка", БиблиотекаКартинок.Информация);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КартинкаЗаголовокСтраницыСопоставленияДанных", "Картинка", БиблиотекаКартинок.Информация);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КартинкаЗаголовокСтраницыНастройкаЗагрузки", "Картинка", БиблиотекаКартинок.Информация);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КартинкаЗаголовокСтраницыНастройкаЗагрузки1", "Картинка", БиблиотекаКартинок.Информация);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КартинкаЗаголовокСтраницыНастройкаЗагрузки2", "Картинка", БиблиотекаКартинок.Информация);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаДляЗаполнения1",
			"Ширина", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаДляЗаполнения",
			"Ширина", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаПроверкиДанных",
			"Ширина", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КартинкаЗаголовокСтраницыСопоставленияДанных", "Ширина", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КартинкаЗаголовокСтраницыНастройкаЗагрузки", "Ширина", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КартинкаЗаголовокСтраницыНастройкаЗагрузки1", "Ширина", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КартинкаЗаголовокСтраницыНастройкаЗагрузки2", "Ширина", 0);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаДляЗаполнения1",
			"Высота", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаДляЗаполнения",
			"Высота", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаПроверкиДанных",
			"Высота", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КартинкаЗаголовокСтраницыСопоставленияДанных", "Высота", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КартинкаЗаголовокСтраницыНастройкаЗагрузки", "Высота", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КартинкаЗаголовокСтраницыНастройкаЗагрузки1", "Высота", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КартинкаЗаголовокСтраницыНастройкаЗагрузки2", "Высота", 0);

	КонецЕсли;
	
КонецПроцедуры

#Область НастройкиВФайле
&НаКлиенте
Процедура ВыбратьВнешнийФайлОбработкаЗавершение(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт

	Если Результат = Истина Тогда

		АдресВременногоХранилища= Адрес;
		ИмяВыбранногоФайла 		= ИмяФайла;
		Расширение 				= ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(
			ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяВыбранногоФайла));

		Если Расширение = "xlsx" Или Расширение = "mxl" Или Расширение = "csv" Тогда

			ИзменитьПорядковыйНомерПерехода(+1);

		Иначе

			ТекстПредупреждения = НСтр("ru ='Импорт данных из файлов данного типа не поддерживается.'");
			ПоказатьПредупреждение( , ТекстПредупреждения);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРасшифровкиЗаголовкаКолонки(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда

		ОбработатьВыборДополнительныхРеквизитов(Результат.ДопРеквизит, Результат.ДопРеквизитВладелец);

		ОбластьЗаголовка = ПолучитьОбластьЗаголовка();
#Если МобильныйКлиент Тогда

		Элементы.ТабличныйДокумент.ТекущаяОбласть =  ТабличныйДокумент.Область("R2C" + ОбластьЗаголовка.Право);

#КонецЕсли

		ОбластьЗаголовка.Текст 					= Результат.Представление;
		ОбластьЗаголовка.ПараметрРасшифровки	= Результат.Значение;

		Если Результат.Свойство("ОтменитьВыборВКолонке") Тогда

			ОбластьЗаголовка 						= ТабличныйДокумент.Область("R1C"
				+ Результат.ОтменитьВыборВКолонке);
			ОбластьЗаголовка.Текст 					= НСтр("ru='Не загружать'");
			ОбластьЗаголовка.ПараметрРасшифровки	= "";

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыгрузитьНастройкиВФайл(АдресТекстаНаСервере = "")

	ПотокВыгрузки = Новый ТекстовыйДокумент;
	ПотокВыгрузки.УстановитьТипФайла("UTF-8");

	МассивСтрок = ПолучитьМассивСтрокСНастройками();
	Для Каждого ЭлементМассива Из МассивСтрок Цикл
		ПотокВыгрузки.ДобавитьСтроку(ЭлементМассива);
	КонецЦикла;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ПотокВыгрузки.Записать(ИмяВременногоФайла, "UTF-8");

	АдресТекстаНаСервере = ПоместитьВоВременноеХранилище(ПотокВыгрузки.ПолучитьТекст(), УникальныйИдентификатор);

	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), УникальныйИдентификатор);
	УдалитьФайлы(ИмяВременногоФайла);

	Возврат Адрес;

КонецФункции

&НаКлиенте
Процедура СохранитьФайлНастроек(АдресФайлаВоВременномХранилище)

	ЭтоВебКлиент = Ложь;
#Если ВебКлиент Тогда
	ЭтоВебКлиент = Истина;
#КонецЕсли
	
	// МобильныйКлиент
#Если МобильныйКлиент Тогда

	РасширениеРаботыСФайламиПодключено = Ложь;

#КонецЕсли
	// Конец МобильныйКлиент

	Попытка

		ВыгружатьИнтерактивно = Истина;

		Если ЭтоВебКлиент И РасширениеРаботыСФайламиПодключено Тогда

			КаталогФайлаВыгрузки = ФайлВыгрузки;
			ИмяФайлаВыгрузки = ФайлВыгрузки;
			НомерСимволаСлеш = СтрНайти(ИмяФайлаВыгрузки, "\", НаправлениеПоиска.СКонца);
			Если НомерСимволаСлеш > 0 Тогда
				ИмяФайлаВыгрузки = Сред(ИмяФайлаВыгрузки, НомерСимволаСлеш + 1);
				КаталогФайлаВыгрузки = Лев(КаталогФайлаВыгрузки, НомерСимволаСлеш - 1);
			КонецЕсли;

			ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ИмяФайлаВыгрузки, АдресФайлаВоВременномХранилище);
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);

			ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			ДиалогВыбораФайла.Каталог = КаталогФайлаВыгрузки;
			ДиалогВыбораФайла.Заголовок = НСтр("ru='Сохранение файла'");
			ДиалогВыбораФайла.Расширение = "txt";
			Фильтр = НСтр("ru = 'Текстовый файл'") + "(*.txt)|*.txt";
			ДиалогВыбораФайла.Фильтр = Фильтр;

			ПараметрыЗавершения = Новый Структура("ВыгружатьИнтерактивно, АдресФайлаВоВременномХранилище", Истина,
				АдресФайлаВоВременномХранилище);

			ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьФайлыВыгрузкиЗавершение", ЭтотОбъект,
				ПараметрыЗавершения);
			
			ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
			ПараметрыСохранения.Диалог = ДиалогВыбораФайла;
			ПараметрыСохранения.Интерактивно = ВыгружатьИнтерактивно;	
			ФайловаяСистемаКлиент.СохранитьФайлы(ОписаниеОповещения, ПолучаемыеФайлы, ПараметрыСохранения);

		Иначе

			ТекущийФайлВыгрузки = НСтр("ru='Шаблон сопоставления.txt'");
			ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьФайлыВыгрузкиЗавершение", ЭтотОбъект,
				ПараметрыЗавершения);
			ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
			ПараметрыСохранения.Интерактивно = ВыгружатьИнтерактивно;
				
			ФайловаяСистемаКлиент.СохранитьФайл(ОписаниеОповещения, АдресФайлаВоВременномХранилище,
				ТекущийФайлВыгрузки, ПараметрыСохранения);
				
		КонецЕсли;

	Исключение

		ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлыВыгрузкиЗавершение(Результат, ПараметрыЗавершения) Экспорт
	
	Если Результат <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Настройки успешно выгружены в файл.'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Операция отменена'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСтрокСНастройками()

	НастройкиЗагрузкиДанных = Параметры.НастройкиЗагрузкиДанных;
	ДеревоПолей = ПолучитьИзВременногоХранилища(НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);
	
	// Строки должны иметь следующую структуру:
	// [Имя группы полей];[Имя поля];[Представление поля];[Номер колонки]
	МассивСтрок = Новый Массив;

	Для Каждого ПолеИлиГруппаПолей Из ДеревоПолей.Строки Цикл

		Если ПустаяСтрока(ПолеИлиГруппаПолей.ИмяГруппыПолей) И Не ПолеИлиГруппаПолей.ИмяПоля
			= "_ДополнительныеРеквизитыИСведения" Тогда

			Если ПолеИлиГруппаПолей.НомерКолонки = 0 Тогда
				Продолжить;
			КонецЕсли;

			СтрокаДляМассива = ";" + ПолеИлиГруппаПолей.ИмяПоля + ";" + ПолеИлиГруппаПолей.ПредставлениеПоля + ";"
				+ ПолеИлиГруппаПолей.НомерКолонки + ";" + "";
			МассивСтрок.Добавить(СтрокаДляМассива);

		Иначе

			ИмяГруппыПолей = ПолеИлиГруппаПолей.ИмяГруппыПолей;

			Для Каждого ПолеИзГруппыПолей Из ПолеИлиГруппаПолей.Строки Цикл

				Если ПолеИзГруппыПолей.НомерКолонки = 0 Тогда
					Продолжить;
				КонецЕсли;

				ИдентификаторДопРеквизита = "";
				Если ПолеИлиГруппаПолей.ИмяПоля = "_ДополнительныеРеквизитыИСведения" Тогда
					ДопРеквизит = ДопРеквизитПоИмениПоля(ПолеИзГруппыПолей.ИмяПоля);
					Если ДопРеквизит <> Неопределено Тогда
						ИдентификаторДопРеквизита = ДопРеквизит.Имя;
					КонецЕсли;
				КонецЕсли;
				СтрокаДляМассива = ИмяГруппыПолей + ";" + ПолеИзГруппыПолей.ИмяПоля + ";" + ПолеИзГруппыПолей.ПредставлениеПоля
					+ ";" + ПолеИзГруппыПолей.НомерКолонки + ";" + ИдентификаторДопРеквизита;
				МассивСтрок.Добавить(СтрокаДляМассива);

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Возврат МассивСтрок;

КонецФункции

&НаСервере
Функция ДопРеквизитПоИмениПоля(пИмяПоля)
	
	Если Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.ХарактеристикиНоменклатуры" Тогда
		ОписаниеДополнительныхРеквизитов = Параметры.НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов; 	
	ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Номенклатура" Тогда 
		ОписаниеДополнительныхРеквизитов = Параметры.НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитовНоменклатура;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ОписаниеДополнительныхРеквизитов Цикл
		Если КлючИЗначение.Значение = пИмяПоля Тогда
			Возврат КлючИЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаСервере
Процедура ОбновитьНастройкиВариантаЗагрузки()

	Если КудаЗагружаем = 0 Или КудаЗагружаем = 1 Тогда
		МетаданныеЗаполнения = Метаданные.Справочники.Номенклатура;
	ИначеЕсли КудаЗагружаем = 2 Тогда
		МетаданныеЗаполнения = Метаданные.Справочники.Контрагенты;
	ИначеЕсли КудаЗагружаем = 3 Тогда
		МетаданныеЗаполнения = Метаданные.РегистрыСведений.ЦеныНоменклатуры;
	ИначеЕсли КудаЗагружаем = 4 Тогда
		МетаданныеЗаполнения = Метаданные.Справочники.НоменклатураПоставщиков;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	НовыеНастройкиЗагрузкиДанных = Новый Структура;
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(МетаданныеЗаполнения, НовыеНастройкиЗагрузкиДанных,
		ЭтотОбъект, Ложь);
	ЗаполнитьЗначенияСвойств(Параметры.НастройкиЗагрузкиДанных, НовыеНастройкиЗагрузкиДанных); 
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

	ОбновитьОбразцыЗагрузкиДанных();
	СоздатьДеревоПолейЗагрузкиДоступныхПользователю();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайлаЗавершение(Успешно, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если Успешно Тогда
		ДополнительныеПараметры._ИмяФайла = ВыбранноеИмяФайла;
		ДополнительныеПараметры.ПутьФайлаНастроек = ВыбранноеИмяФайла;
		ДополнительныеПараметры.АдресВХранилище = Адрес;

		ПрочитатьТекстовыйФайлСНастройкамиСопоставленияПродолжение(ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДиалогОткрытияФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы = Неопределено Или ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры.ИмяФайлаНастроек = ВыбранныеФайлы[0];
	ДополнительныеПараметры.ПутьФайлаНастроек = ВыбранныеФайлы[0];

	ПрочитатьТекстовыйФайлСНастройкамиСопоставления(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьТекстовыйФайлСНастройкамиСопоставления(ДополнительныеПараметры, ИмяФайлаИзНастройки = Ложь)

	ПрочитатьТекстФайлаНастроекСопоставления(ДополнительныеПараметры, ИмяФайлаИзНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьТекстовыйФайлСНастройкамиСопоставленияПродолжение(ДополнительныеПараметры)

	ЗагрузитьНастройкиСопоставленияИзФайла(ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("ВыбранныеДополнительныеРеквизиты") Тогда
		Параметры.НастройкиЗагрузкиДанных.Вставить("ВыбранныеДополнительныеРеквизиты",
			ДополнительныеПараметры.ВыбранныеДополнительныеРеквизиты);
	КонецЕсли;
	ПоказатьОповещениеПользователя(НСтр("ru = 'Настройки загружены'"), , , БиблиотекаКартинок.ОткрытьФайл);

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьТекстФайлаНастроекСопоставления(ДополнительныеПараметры, ИмяФайлаИзНастройки,
	ОдиночныйРазделительСтрок = Ложь)

	ПутьФайлаНастроек = ДополнительныеПараметры.ПутьФайлаНастроек;
	ТипФайла = ДополнительныеПараметры.Кодировка;
	ДвухсимвольныйРазделительСтрок = Символы.ВК + Символы.ПС;
	Если ОдиночныйРазделительСтрок Тогда
		РазделительСтрок               = Символы.ПС;
	Иначе
		РазделительСтрок               = ДвухсимвольныйРазделительСтрок;
	КонецЕсли;

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ДополнительныеПараметры.Вставить("ТекстовыйДокумент", ТекстовыйДокумент);
	ДополнительныеПараметры.Вставить("РазделительСтрок", РазделительСтрок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЧтенияФайлаНастроек", ЭтотОбъект, ДополнительныеПараметры);
	ТекстовыйДокумент.НачатьЧтение(ОписаниеОповещения, ПутьФайлаНастроек, ТипФайла, РазделительСтрок);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияФайлаНастроек(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда
	
		ТекстовыйДокумент = ДополнительныеПараметры.ТекстовыйДокумент;
		РазделительСтрок = ДополнительныеПараметры.РазделительСтрок;

		ВремТекстовыйДокумент = Новый ТекстовыйДокумент;
		ВремТекстовыйДокумент.РазделительСтрок = РазделительСтрок;

		Для ИндексСтроки = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл

			ТекстСтрокиФайла = ТекстовыйДокумент.ПолучитьСтроку(ИндексСтроки);

			Если ТекстСтрокиФайла = Неопределено Тогда
				Прервать;
			КонецЕсли;

			ВремТекстовыйДокумент.ДобавитьСтроку(ТекстСтрокиФайла);

		КонецЦикла;
		
		ТекстФайла = ВремТекстовыйДокумент.ПолучитьТекст();

		Если СтрДлина(ТекстФайла) = 0 Тогда
			Возврат;
		КонецЕсли;

		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекстФайла, ДополнительныеПараметры.ИдентификаторФормы);

		ДополнительныеПараметры.АдресВХранилище = АдресВХранилище;

		ПрочитатьТекстовыйФайлСНастройкамиСопоставленияПродолжение(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиСопоставленияИзФайла(ДополнительныеПараметры)

	ТекстЗагрузки = "";

	Если ДополнительныеПараметры.Свойство("АдресВХранилище") Тогда
		ТекстЗагрузки = ПолучитьИзВременногоХранилища(ДополнительныеПараметры.АдресВХранилище);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не удалось прочитать данные из файла.'"));
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Информация для технической поддержки: не обнаружено свойство ""АдресВХранилище""'"));
		Возврат;
	КонецЕсли;

	ОбработатьФайлСНастройками(ТекстЗагрузки);

	Если Параметры.НастройкиЗагрузкиДанных.Свойство("ВыбранныеДополнительныеРеквизиты") Тогда
		ДополнительныеПараметры.Вставить("ВыбранныеДополнительныеРеквизиты",
			Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьФайлСНастройками(ФайлЗагрузки)

	Разделитель = ";";

	ИмпортКоличествоСтрок = СтрЧислоСтрок(ФайлЗагрузки);
	ИмпортТекущаяСтрока = 1;

	ДеревоПолей = ПолучитьИзВременногоХранилища(Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);

	ОчиститьНастройкиЗагрузкиДанных(ДеревоПолей);

	Пока ИмпортТекущаяСтрока <= ИмпортКоличествоСтрок Цикл
		Стр = ПолучитьСтрокуИмпорта(ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ФайлЗагрузки);
		СтруктураНастроек = РазобратьСтроку(Стр, Разделитель);
		УстановитьНастройку(СтруктураНастроек, ДеревоПолей);
	КонецЦикла;

	ОбновитьИнформациюВТабличномДокументе(ДеревоПолей);

	ПоместитьВоВременноеХранилище(ДеревоПолей, Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);

КонецПроцедуры

&НаСервере
Процедура ОчиститьНастройкиЗагрузкиДанных(ДеревоПолей)

	Для Каждого ПолеИлиГруппаПолей Из ДеревоПолей.Строки Цикл

		Если ПустаяСтрока(ПолеИлиГруппаПолей.ИмяГруппыПолей) Тогда

			Если ПолеИлиГруппаПолей.НомерКолонки <> 0 Тогда
				ПолеИлиГруппаПолей.НомерКолонки = 0;
			КонецЕсли;

		Иначе

			Для Каждого ПолеИзГруппыПолей Из ПолеИлиГруппаПолей.Строки Цикл

				Если ПолеИзГруппыПолей.НомерКолонки <> 0 Тогда
					ПолеИзГруппыПолей.НомерКолонки = 0;
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуИмпорта(ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора)

	Буфер = "";
	Пока ПустаяСтрока(Буфер) Или Лев(Буфер, 2) = "//" Цикл
		Если ИмпортТекущаяСтрока > ИмпортКоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
		Буфер = СокрЛП(СтрПолучитьСтроку(ИмпортТекстДляРазбора, ИмпортТекущаяСтрока));
		ИмпортТекущаяСтрока = ИмпортТекущаяСтрока + 1;
	КонецЦикла;

	Возврат Буфер;

КонецФункции

&НаСервере
Функция РазобратьСтроку(СтрокаРазбора, Разделитель)

	ЛокальнаяСтрокаРазбора = СтрокаРазбора;
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ИмяГруппыПолей", "");
	СтруктураРезультата.Вставить("ИмяПоля", "");
	СтруктураРезультата.Вставить("ПредставлениеПоля", "");
	СтруктураРезультата.Вставить("НомерКолонки", 0);
	СтруктураРезультата.Вставить("ДопРеквизит", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка());
	
	// ИмяГруппыПолей
	ПозицияПрисваивания = СтрНайти(СтрокаРазбора, Разделитель);
	Если ПозицияПрисваивания = 0 Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	СтруктураРезультата.ИмяГруппыПолей = СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1));
	
	// ИмяПоля
	ЛокальнаяСтрокаРазбора = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	ПозицияПрисваивания = СтрНайти(ЛокальнаяСтрокаРазбора, Разделитель);
	Если ПозицияПрисваивания = 0 Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	СтруктураРезультата.ИмяПоля = СокрЛП(Лев(ЛокальнаяСтрокаРазбора, ПозицияПрисваивания - 1));
	
	// ПредставлениеПоля
	ЛокальнаяСтрокаРазбора = СокрЛП(Сред(ЛокальнаяСтрокаРазбора, ПозицияПрисваивания + 1));
	ПозицияПрисваивания = СтрНайти(ЛокальнаяСтрокаРазбора, Разделитель);
	Если ПозицияПрисваивания = 0 Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	СтруктураРезультата.ПредставлениеПоля = СокрЛП(Лев(ЛокальнаяСтрокаРазбора, ПозицияПрисваивания - 1));
	
	// НомерКолонки
	ЛокальнаяСтрокаРазбора = СокрЛП(Сред(ЛокальнаяСтрокаРазбора, ПозицияПрисваивания + 1));
	ПозицияПрисваивания = СтрНайти(ЛокальнаяСтрокаРазбора, Разделитель);
	Если ПозицияПрисваивания = 0 Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	Попытка
		СтруктураРезультата.НомерКолонки = Число(СокрЛП(Лев(ЛокальнаяСтрокаРазбора, ПозицияПрисваивания - 1)));
	Исключение
		СтруктураРезультата.НомерКолонки = 0;
	КонецПопытки;
	
	// ДопРеквизит
	ИмяДопРеквизита = СокрЛП(Сред(ЛокальнаяСтрокаРазбора, ПозицияПрисваивания + 1));
	Если ЗначениеЗаполнено(ИмяДопРеквизита) Тогда
		СтруктураРезультата.ДопРеквизит = ДополнительныйРеквизитПоИмени(ИмяДопРеквизита);
		Если Параметры.НастройкиЗагрузкиДанных.Свойство("ОписаниеДополнительныхРеквизитов") Тогда
			СтруктураРезультата.ИмяПоля = Параметры.НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов.Получить(
				СтруктураРезультата.ДопРеквизит);
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции

&НаСервере
Процедура УстановитьНастройку(СтруктураНастроек, ДеревоПолей)

	Если ЗначениеЗаполнено(СтруктураНастроек.ДопРеквизит) И Параметры.НастройкиЗагрузкиДанных.Свойство(
		"ОписаниеДополнительныхРеквизитов") Тогда
		ОбработатьВыборДополнительногоРеквизита(ДеревоПолей.Строки, СтруктураНастроек);
		ОбработатьВыборДополнительныхРеквизитовНаСервере(СтруктураНастроек.ДопРеквизит);
	Иначе
		Для Каждого ПолеИлиГруппаПолей Из ДеревоПолей.Строки Цикл

			Если ПустаяСтрока(ПолеИлиГруппаПолей.ИмяГруппыПолей) И Не (ПолеИлиГруппаПолей.ИмяПоля
				= "_ДополнительныеРеквизитыИСведения") Тогда

				Если ПолеИлиГруппаПолей.ИмяПоля <> СтруктураНастроек.ИмяПоля Тогда
					Продолжить;
				КонецЕсли;

				ПолеИлиГруппаПолей.НомерКолонки = СтруктураНастроек.НомерКолонки;
				ПолеИлиГруппаПолей.НомерЦвета = 3;
				Прервать;

			ИначеЕсли ПолеИлиГруппаПолей.ИмяГруппыПолей = СтруктураНастроек.ИмяГруппыПолей Тогда

				Для Каждого ПолеИзГруппыПолей Из ПолеИлиГруппаПолей.Строки Цикл

					Если ПолеИзГруппыПолей.ИмяПоля <> СтруктураНастроек.ИмяПоля Тогда
						Продолжить;
					КонецЕсли;

					ПолеИзГруппыПолей.НомерКолонки = СтруктураНастроек.НомерКолонки;
					ПолеИзГруппыПолей.НомерЦвета = 3;
					Прервать;

				КонецЦикла;

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюВТабличномДокументе(ДеревоПолей)
	
	Результат = Новый Структура;
	Результат.Вставить("ДопРеквизит", Неопределено);
	Результат.Вставить("Представление", "");
	Результат.Вставить("Значение", "");
	Результат.Вставить("ОтменитьВыборВКолонке", Неопределено);
	Результат.Вставить("НомерКолонки", 0);

	Для Каждого ПолеИлиГруппаПолей Из ДеревоПолей.Строки Цикл

		Если ПустаяСтрока(ПолеИлиГруппаПолей.ИмяГруппыПолей) И Не (ПолеИлиГруппаПолей.ИмяПоля
			= "_ДополнительныеРеквизитыИСведения") Тогда

			Если ПолеИлиГруппаПолей.НомерКолонки <> 0 Тогда
				Результат.Удалить("ОтменитьВыборВКолонке");
				Результат.Представление = ПолеИлиГруппаПолей.ПредставлениеПоля;
				Результат.Значение = ПолеИлиГруппаПолей.ИмяПоля;
				Результат.НомерКолонки = ПолеИлиГруппаПолей.НомерКолонки;

				ОбработкаРасшифровкиЗаголовкаКолонкиНаСервере(Результат, Неопределено);
			КонецЕсли;

		Иначе

			Для Каждого ПолеИзГруппыПолей Из ПолеИлиГруппаПолей.Строки Цикл

				Если ПолеИзГруппыПолей.НомерКолонки <> 0 Тогда
					Результат.Удалить("ОтменитьВыборВКолонке");
					Результат.Представление = ПолеИзГруппыПолей.ПредставлениеПоля;
					Результат.Значение = ПолеИзГруппыПолей.ИмяПоля;
					Результат.НомерКолонки = ПолеИзГруппыПолей.НомерКолонки;

					Результат.Удалить("ОтменитьВыборВКолонке");
					ОбработкаРасшифровкиЗаголовкаКолонкиНаСервере(Результат, Неопределено);
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ДополнительныйРеквизитПоИмени(ИмяРеквизита)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Свойства.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|ГДЕ
	|	Свойства.Имя = &Имя";
	Запрос.УстановитьПараметр("Имя", ИмяРеквизита);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ОбработатьВыборДополнительногоРеквизита(ЭлементыПервогоУровня, СтруктураНастроек)

	ГруппаДопРеквизитов = Неопределено;
	
	Для Каждого СтрокаДерева Из ЭлементыПервогоУровня Цикл

		Если СтрокаДерева.ИмяПоля = "_ДополнительныеРеквизитыИСведения" Тогда

			ГруппаДопРеквизитов = СтрокаДерева;
			Прервать;

		КонецЕсли;

	КонецЦикла;

	КоллекцияЭлементовДополнительныхРеквизитов = ГруппаДопРеквизитов.Строки;
	Если Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Получить(СтруктураНастроек.ДопРеквизит)
		= Неопределено Тогда

		ДобавитьПолеДополнительногоРеквизитаВДеревоПолей(КоллекцияЭлементовДополнительныхРеквизитов, СтруктураНастроек);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборДополнительныхРеквизитовНаСервере(ДопРеквизит)

	Если ДопРеквизит <> Неопределено Тогда

		Если Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Получить(ДопРеквизит) = Неопределено Тогда

			Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Вставить(ДопРеквизит,
				Параметры.НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов.Получить(ДопРеквизит));

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаРасшифровкиЗаголовкаКолонкиНаСервере(Результат, ДополнительныеПараметры)

	Если ТипЗнч(Результат) = Тип("Структура") Тогда

		Если Не ЗначениеЗаполнено(Результат.НомерКолонки) Тогда
			Возврат;
		КонецЕсли;
		
		ОбластьЗаголовка = ПолучитьОбластьЗаголовкаНаСервере(Результат.НомерКолонки);
		ОбластьЗаголовка.Текст 					= Результат.Представление;
		ОбластьЗаголовка.ПараметрРасшифровки	= Результат.Значение;

		Если Результат.Свойство("ОтменитьВыборВКолонке") Тогда

			ОбластьЗаголовка 						= ТабличныйДокумент.Область("R1C"
				+ Результат.ОтменитьВыборВКолонке);
			ОбластьЗаголовка.Текст 					= НСтр("ru='Не загружать'");
			ОбластьЗаголовка.ПараметрРасшифровки	= "";

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДобавитьПолеДополнительногоРеквизитаВДеревоПолей(КоллекцияЭлементовДополнительныхРеквизитов, СтруктураНастроек)

	ПолеДополнительногоРеквизита = КоллекцияЭлементовДополнительныхРеквизитов.Добавить();

	ПолеДополнительногоРеквизита.ИмяГруппыПолей = "";
	ПолеДополнительногоРеквизита.ИмяПоля = Параметры.НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов.Получить(
		СтруктураНастроек.ДопРеквизит);
	ПолеДополнительногоРеквизита.ТипПолучаемогоЗначения = Неопределено;
	ПолеДополнительногоРеквизита.ПредставлениеПоля = СтруктураНастроек.ДопРеквизит.Заголовок;
	ПолеДополнительногоРеквизита.НомерЦвета = 3;
	ПолеДополнительногоРеквизита.НомерЦветаОригинал = 4;
	ПолеДополнительногоРеквизита.НомерКолонки = СтруктураНастроек.НомерКолонки;

	Возврат ПолеДополнительногоРеквизита;

КонецФункции

&НаСервере
Функция ПолучитьОбластьЗаголовкаНаСервере(НомерКолонки)

	ОбластьЗаголовка = ТабличныйДокумент.Область("R1C" + НомерКолонки);
	Возврат ОбластьЗаголовка;

КонецФункции

&НаКлиенте
Процедура ВыбратьФайлНастроекДиалог(ДополнительныеПараметры)

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = НСтр("ru='Выберите файл с настройками сопоставления колонок...'");
	Диалог.Фильтр = НСтр("ru='Файлы настроек сопоставления колонок (*.txt)|*.txt|Все файлы (*.*)|*.*'");
	Диалог.ПолноеИмяФайла = ДополнительныеПараметры.ИмяФайлаНастроек;
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Оповещение, Диалог);

КонецПроцедуры

#КонецОбласти

#Область ОформлениеФормы

&НаСервереБезКонтекста
Процедура СформироватьСокращенныйЗаголовокКомандыНастройки(ЗаголовокКоманды, Знач Префикс,
	Знач МаксимальнаяДлинаЗаголовка, Знач МассивПолей)

	Перем ДополнениеЗаголовка, Поле, ТекущийИндекс, УдаленоПолей, СтрокаЗаголовка;

	УдаленоПолей = 0;
	ТекущийИндекс = МассивПолей.Количество() - 1;
	Пока ТекущийИндекс >= 0 Цикл

		МассивПолей.Удалить(ТекущийИндекс);
		УдаленоПолей = УдаленоПолей + 1;
		СтрокаЗаголовка = СтрСоединить(МассивПолей, ", ");

		Если СтрДлина(СтрокаЗаголовка) <= МаксимальнаяДлинаЗаголовка Тогда

			Прервать;

		КонецЕсли;

		ТекущийИндекс = ТекущийИндекс - 1;

	КонецЦикла;

	Поле = ПолучитьСклоненияСтрокиПоЧислу("поле", УдаленоПолей, "", , "ПД=Дательный")[0];

	ДополнениеЗаголовка = СтрШаблон(НСтр("ru = '%1и еще %2'"), " ", Поле);
	СписокПолей = СтрСоединить(МассивПолей, ", ") + ДополнениеЗаголовка;

	ЗаголовокКоманды = СтрШаблон("%1 %2", Префикс, СписокПолей);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьСоответствиеНастроекПоискаДляСтрокиПоиска()

	Перем СоответствиеНастроекПоиска;

	СоответствиеНастроекПоиска = Новый Соответствие;
	СоответствиеНастроекПоиска.Вставить("ИскатьПоАртикулу", НСтр("ru = 'артикулу'"));
	СоответствиеНастроекПоиска.Вставить("ИскатьПоКоду", НСтр("ru = 'коду'"));
	СоответствиеНастроекПоиска.Вставить("ИскатьПоШтрихкоду", НСтр("ru = 'штрихкоду'"));
	СоответствиеНастроекПоиска.Вставить("ИскатьПоДополнительномуРеквизиту", НСтр("ru = 'ДополнительныйРеквизитПоиска'"));
	СоответствиеНастроекПоиска.Вставить("ИскатьПоНаименованию", НСтр("ru = 'наименованию'"));
	СоответствиеНастроекПоиска.Вставить("ИскатьПоНаименованиюЛевойЧасти", НСтр("ru = 'по левой части наименования'"));
	СоответствиеНастроекПоиска.Вставить("ИскатьПоНаименованиюПолному", НСтр("ru = 'полному наименованию'"));
	СоответствиеНастроекПоиска.Вставить("ИскатьПоНаименованиюПолномуЛевойЧасти", НСтр(
		"ru = 'по левой части полного наименования'"));

	Возврат СоответствиеНастроекПоиска;

КонецФункции

&НаСервереБезКонтекста
Процедура СформироватьЗаголовокКомандыНастройкиПоиска(ЭлементНастройкиПоискаЗаголовок, НастройкиПоиска)

	МаксимальнаяДлинаЗаголовка = 100;

	СоответствиеНастроекПоиска = ЗаполнитьСоответствиеНастроекПоискаДляСтрокиПоиска();

	КлючевоеСлово = НСтр("ru = 'Искать'");
	ВариантПоиска = ?(НастройкиПоиска.ВариантПоиска = 0, НСтр("ru = 'до первого совпадения'"), НСтр(
		"ru = 'до совпадения всех полей'"));
	Префикс = СтрШаблон(НСтр("ru = '%1 %2 • по%3'"), КлючевоеСлово, ВариантПоиска, " ");

	МассивПолей = Новый Массив;
	ВыбраныВсеПоля = Истина;
	Для Каждого ПолеПоиска Из СоответствиеНастроекПоиска Цикл

		Если НастройкиПоиска[ПолеПоиска.Ключ] Тогда

			Значение = ПолеПоиска.Значение;
			Если ПолеПоиска.Ключ = "ИскатьПоДополнительномуРеквизиту" Тогда

				Значение = НастройкиПоиска[ПолеПоиска.Значение];

			КонецЕсли;

			МассивПолей.Добавить(Значение);

		Иначе

			ВыбраныВсеПоля = Ложь;

		КонецЕсли;

	КонецЦикла;

	СписокПолей = СтрСоединить(МассивПолей, ", ");
	МассивЧастейСтрок = Новый Массив;
	МассивЧастейСтрок.Добавить(Префикс);
	МассивЧастейСтрок.Добавить(СписокПолей);

	ЗаголовокКоманды = СтрСоединить(МассивЧастейСтрок, "");

	Если ВыбраныВсеПоля Тогда

		ЗаголовокКоманды = СтрШаблон("%1 %2", Префикс, НСтр("ru = 'всем полям'"));

	ИначеЕсли СтрДлина(ЗаголовокКоманды) > МаксимальнаяДлинаЗаголовка Тогда

		СформироватьСокращенныйЗаголовокКомандыНастройки(ЗаголовокКоманды, Префикс, МаксимальнаяДлинаЗаголовка,
			МассивПолей);

	КонецЕсли;

	ЭлементНастройкиПоискаЗаголовок = ЗаголовокКоманды;

КонецПроцедуры

&НаСервере
Процедура СобратьЗаголовокСтраницыРезультатПроверкиДанных()

	ТекстОбычный = НСтр("ru ='Если найдено %1 пустых строк, обработка следующих строк не выполняется.
						|При проверке заполнения табличного документа%2'");
	ТекстОбычный = СтрШаблон(ТекстОбычный, ЗагрузкаДанныхИзВнешнегоИсточника.МаксимальноеКоличествоПустыхСтрок(), " ");

	ТекстЖирный = НСтр("ru ='обнаружены следующие ошибки:'");

	Шрифт8Н = Новый Шрифт(Элементы.КартинкаПодсказкаПроверкиДанныхРасширеннаяПодсказка.Шрифт, , 10, Ложь);
	Шрифт8Ж = Новый Шрифт(Элементы.КартинкаПодсказкаПроверкиДанныхРасширеннаяПодсказка.Шрифт, , 10, Истина);

	МассивФорматированныхСтрок = Новый Массив;
	МассивФорматированныхСтрок.Добавить();
	МассивФорматированныхСтрок.Добавить();

	Элементы.КартинкаПодсказкаПроверкиДанныхРасширеннаяПодсказка.Заголовок 
		= СтроковыеФункции.ФорматированнаяСтрока("%1%2", 
			Новый ФорматированнаяСтрока(ТекстОбычный, Шрифт8Н), 
			Новый ФорматированнаяСтрока(ТекстЖирный, Шрифт8Ж)); 

КонецПроцедуры

&НаСервере
Процедура ИзменитьТекстУсловногоОформления()

	ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ИзменитьТекстУсловногоОформления(УсловноеОформление,
		Параметры.НастройкиЗагрузкиДанных);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстЗаголовковДекораций()

	УстановитьТекстЗаголовкаДекорацииПолученныхДанных();
	УстановитьТекстЗаголовкаДекорацииСопоставленныхОбъектов();
	УстановитьТекстЗаголовкаДекорацииНесопоставленныеСтроки();
	УстановитьТекстЗаголовкаДекорацииНекорректныеСтроки();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстЗаголовкаДекорацииПолученныхДанных()

	Если ТаблицаСопоставленияДанных.Количество() > 0 Тогда

		ПолученоДанных 		= ТаблицаСопоставленияДанных.Количество();
		КоличествоСтрок		= ПолученоДанных;

	Иначе

		КоличествоСтрок = 0;

	КонецЕсли;

	КодОсновногоЯзыка = ОбщегоНазначенияКлиент.КодОсновногоЯзыка();

	ТекстЗаголовка = ЗагрузкаДанныхИзВнешнегоИсточника.ЧислоИПредметИсчисления(КоличествоСтрок, НСтр(
		"ru ='строка получена'", КодОсновногоЯзыка), НСтр("ru ='строки получено'", КодОсновногоЯзыка), НСтр(
		"ru ='строк получено'", КодОсновногоЯзыка), "ж");

	Элементы.ДекорацияПолученоДанныхЗаголовок.Заголовок		= ТекстЗаголовка;
	Элементы.ДекорацияПолученоДанныхЗаголовокТЧ.Заголовок 	= ТекстЗаголовка;
	Элементы.ДекорацияПолученоДанныхЗаголовокРС.Заголовок 	= ТекстЗаголовка;

	Элементы.ДекорацияПолученоДанныхКоличество.Заголовок		= КоличествоСтрок;
	Элементы.ДекорацияПолученоДанныхКоличествоТЧ.Заголовок	= КоличествоСтрок;
	Элементы.ДекорацияПолученоДанныхКоличествоРС.Заголовок			= КоличествоСтрок;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстЗаголовкаДекорацииСопоставленныхОбъектов()

	Если ТаблицаСопоставленияДанных.Количество() > 0 Тогда

		СопоставленоДанных		= ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_СтрокаСопоставлена",
			Истина)).Количество();
		КоличествоСтрок = СопоставленоДанных;

	Иначе

		КоличествоСтрок = 0;

	КонецЕсли;

	КодОсновногоЯзыка = ОбщегоНазначенияКлиент.КодОсновногоЯзыка();

	Если ОбновлятьСуществующие Тогда

		ТекстЗаголовка = ЗагрузкаДанныхИзВнешнегоИсточника.ЧислоИПредметИсчисления(КоличествоСтрок, НСтр(
			"ru ='из них сопоставлена и будет обновлена'", КодОсновногоЯзыка), НСтр(
			"ru ='из них сопоставлены и будут обновлены'", КодОсновногоЯзыка), НСтр(
			"ru ='из них сопоставлено и будут обновлены'", КодОсновногоЯзыка), "ж");

	Иначе

		ТекстЗаголовка = ЗагрузкаДанныхИзВнешнегоИсточника.ЧислоИПредметИсчисления(КоличествоСтрок, НСтр(
			"ru ='из них сопоставлена'", КодОсновногоЯзыка), НСтр("ru ='из них сопоставлены'", КодОсновногоЯзыка), НСтр(
			"ru ='из них сопоставлено'", КодОсновногоЯзыка), "ж");

	КонецЕсли;

	Элементы.ДекорацияСопоставленоЗаголовокОбъект.Заголовок = ТекстЗаголовка;
	Элементы.ДекорацияСопоставленоЗаголовокОбъектТЧ.Заголовок = ТекстЗаголовка;
	Элементы.ДекорацияСопоставленоЗаголовокРС.Заголовок = ТекстЗаголовка;

	Элементы.ДекорацияСопоставленоКоличествоОбъект.Заголовок		= КоличествоСтрок;
	Элементы.ДекорацияСопоставленоКоличествоОбъектТЧ.Заголовок	= КоличествоСтрок;
	Элементы.ДекорацияСопоставленоКоличествоРС.Заголовок			= КоличествоСтрок;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстЗаголовкаДекорацииНесопоставленныеСтроки()

	Если ТаблицаСопоставленияДанных.Количество() > 0 Тогда

		СогласованныеДанные		= ТаблицаСопоставленияДанных.НайтиСтроки(
			Новый Структура("_ЗагрузкаВПриложениеВозможна", Истина)).Количество();
		СопоставленоДанных		= ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_СтрокаСопоставлена",
			Истина)).Количество();
		НесопоставленныеДанные  = СогласованныеДанные - СопоставленоДанных;
		КоличествоСтрок = ?(НесопоставленныеДанные < 0, 0, НесопоставленныеДанные);

	Иначе

		КоличествоСтрок = 0;

	КонецЕсли;

	КодОсновногоЯзыка = ОбщегоНазначенияКлиент.КодОсновногоЯзыка();

	Если СоздаватьЕслиНеСопоставлено Тогда

		ТекстЗаголовка = ЗагрузкаДанныхИзВнешнегоИсточника.ЧислоИПредметИсчисления(КоличествоСтрок, НСтр(
			"ru ='строка будет создана'", КодОсновногоЯзыка), НСтр("ru ='строки будет создано'", КодОсновногоЯзыка),
			НСтр("ru ='строк будет создано'", КодОсновногоЯзыка), "ж");

	Иначе

		ТекстЗаголовка = ЗагрузкаДанныхИзВнешнегоИсточника.ЧислоИПредметИсчисления(КоличествоСтрок, НСтр(
			"ru ='строка будет пропущена'", КодОсновногоЯзыка), НСтр("ru ='строки будет пропущено'", КодОсновногоЯзыка),
			НСтр("ru ='строк будет пропущено'", КодОсновногоЯзыка), "ж");

	КонецЕсли;

	Элементы.ДекорацияНесопоставленныеСтрокиЗаголовокОбъект.Заголовок = ТекстЗаголовка;
	Элементы.ДекорацияНесопоставленныеСтрокиЗаголовокОбъектТЧ.Заголовок = ТекстЗаголовка;
	Элементы.ДекорацияНесопоставленныеСтрокиЗаголовокРС.Заголовок = ТекстЗаголовка;

	Элементы.ДекорацияНесопоставленныеСтрокиКоличествоОбъект.Заголовок		= КоличествоСтрок;
	Элементы.ДекорацияНесопоставленныеСтрокиКоличествоОбъектТЧ.Заголовок		= КоличествоСтрок;
	Элементы.ДекорацияНесопоставленныеСтрокиКоличествоРС.Заголовок			= КоличествоСтрок;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстЗаголовкаДекорацииНекорректныеСтроки()

	Если ТаблицаСопоставленияДанных.Количество() > 0 Тогда

		ПолученоДанных 			= ТаблицаСопоставленияДанных.Количество();
		СогласованныеДанные		= ТаблицаСопоставленияДанных.НайтиСтроки(
			Новый Структура("_ЗагрузкаВПриложениеВозможна", Истина)).Количество();
		КоличествоСтрок 		= ПолученоДанных - СогласованныеДанные;

	Иначе

		КоличествоСтрок = 0;

	КонецЕсли;

	КодОсновногоЯзыка = ОбщегоНазначенияКлиент.КодОсновногоЯзыка();

	ТекстЗаголовка = ЗагрузкаДанныхИзВнешнегоИсточника.ЧислоИПредметИсчисления(КоличествоСтрок, НСтр(
		"ru ='строка; которую невозможно загрузить'", КодОсновногоЯзыка), НСтр(
		"ru ='строки; которые невозможно загрузить'", КодОсновногоЯзыка), НСтр(
		"ru ='строк; которые невозможно загрузить'", КодОсновногоЯзыка), "ж");

	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, ";", ",");
	Элементы.ДекорацияНекорректныеСтрокиЗаголовокОбъекты.Заголовок 		= ТекстЗаголовка;
	Элементы.ДекорацияНекорректныеСтрокиЗаголовокОбъектыТЧ.Заголовок 	= ТекстЗаголовка;
	Элементы.ДекорацияНекорректныеСтрокиЗаголовокРС.Заголовок 			= ТекстЗаголовка;

	Элементы.ДекорацияНекорректныеСтрокиКоличествоОбъекты.Заголовок		= КоличествоСтрок;
	Элементы.ДекорацияНекорректныеСтрокиКоличествоОбъектыТЧ.Заголовок	= КоличествоСтрок;
	Элементы.ДекорацияНекорректныеСтрокиКоличествоРС.Заголовок			= КоличествоСтрок;

КонецПроцедуры
#КонецОбласти

#Область РаботаСКартинками

&НаКлиенте
Процедура ЗавершениеПомещенияКартинок(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт

	ФормаДлительнойОперации = ДополнительныеПараметры.ФормаДлительнойОперации;
	Если ФормаДлительнойОперации.Открыта() Тогда
		ФормаДлительнойОперации.Закрыть();
	КонецЕсли;

	Соответствие = Новый Соответствие;

	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл

		Соответствие.Вставить(ПомещенныйФайл.СсылкаНаФайл.Файл.ПолноеИмя, ПомещенныйФайл.Адрес);

	КонецЦикла;

	Если Параметры.НастройкиЗагрузкиДанных.Свойство("СоответствиеКартинок") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Параметры.НастройкиЗагрузкиДанных.СоответствиеКартинок,
			Соответствие, Истина);
	Иначе
		Параметры.НастройкиЗагрузкиДанных.Вставить("СоответствиеКартинок", Соответствие);
	КонецЕсли;

	Если ДополнительныеПараметры.ПоследнийФайл Тогда
		КомандаГотовоЗавершение();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрогрессПомещенияКартинок(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ПомещеноВсего,
	ОтказОтПомещенияВсехФайлов, ДополнительныеПараметры) Экспорт

	ТекстСообщения = НСтр("ru = 'Пожалуйста, подождите...'");
	ТекстОбработки = НСтр("ru='Выполняется подготовка картинок...'");
	ТекстПрогресса = "";
#Если Не ВебКлиент Тогда
	ТекстПрогресса = СтрШаблон(НСтр("ru='Всего подготовлено - %1%%'"), Окр(ПомещеноВсего));
#КонецЕсли
	ТекстСообщения = ТекстОбработки + Символы.ПС + ТекстПрогресса + Символы.ПС + ТекстСообщения;
	ФормаДлительнойОперации = ДополнительныеПараметры.ФормаДлительнойОперации;
	ФормаДлительнойОперации.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = ТекстСообщения;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьСоответствиеДанныхКартинокИЗавершитьРаботуФормы()

	Если КартинкиЕстьВТаблице() Тогда

		ОписаниеОповещенияПодключенияРасширения 
			= Новый ОписаниеОповещения("ПроверитьФайлыПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);
		ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещенияПодключенияРасширения, , Ложь);

	Иначе

		КомандаГотовоЗавершение();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФайлыПослеПодключенияРасширенияРаботыСФайлами(Результат, ДополнительныеПараметры) Экспорт

	ОписанияПередаваемыхФайлов = Новый Массив;

	ПараметрыФормыДлительнойОперации = Новый Структура;
	ПараметрыФормыДлительнойОперации.Вставить("ТекстСообщения", НСтр(
		"ru='Выполняется проверка файлов картинок на диске...'"));
	ПараметрыФормыДлительнойОперации.Вставить("ВыводитьПрогрессВыполнения", Ложь);
	ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", ПараметрыФормыДлительнойОперации,
		ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Для Каждого СтрокаСопоставленияДанных Из ТаблицаСопоставленияДанных Цикл
		
		// картинка
		ПоследнийФайл = (ТаблицаСопоставленияДанных.Индекс(СтрокаСопоставленияДанных)
			= ТаблицаСопоставленияДанных.Количество() - 1);
		ФайлНаДиске = Новый Файл(СтрокаСопоставленияДанных.Картинка_ВходящиеДанные);
		ОписаниеПередаваемогоФайла = Новый ОписаниеПередаваемогоФайла(СтрокаСопоставленияДанных.Картинка_ВходящиеДанные);

		ОповещениеОбОкончанииПроверкиФайлов = Новый ОписаниеОповещения("ОкончаниеПроверкиФайлов", ЭтотОбъект,
			Новый Структура("ПоследнийФайл", Ложь));

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписанияПередаваемыхФайлов", ОписанияПередаваемыхФайлов);
		ДополнительныеПараметры.Вставить("ОписаниеПередаваемогоФайла", ОписаниеПередаваемогоФайла);
		ДополнительныеПараметры.Вставить("ПоследнийФайл", ПоследнийФайл);
		ДополнительныеПараметры.Вставить("ОповещениеОбОкончанииПроверкиФайлов", ОповещениеОбОкончанииПроверкиФайлов);
		ДополнительныеПараметры.Вставить("ФормаДлительнойОперации", ФормаДлительнойОперации);
		ОписаниеПроверкиСуществованияФайла = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаНаДиске", ЭтотОбъект,
			ДополнительныеПараметры);
		ФайлНаДиске.НачатьПроверкуСуществования(ОписаниеПроверкиСуществованияФайла);
		
		// основная картинка
		ФайлНаДиске = Новый Файл(СтрокаСопоставленияДанных.КартинкаПоУмолчанию_ВходящиеДанные);
		ОписаниеПередаваемогоФайла = Новый ОписаниеПередаваемогоФайла(СтрокаСопоставленияДанных.КартинкаПоУмолчанию_ВходящиеДанные);

		ОповещениеОбОкончанииПроверкиФайлов = Новый ОписаниеОповещения("ОкончаниеПроверкиФайлов", ЭтотОбъект,
			Новый Структура("ПоследнийФайл", Ложь));

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписанияПередаваемыхФайлов", ОписанияПередаваемыхФайлов);
		ДополнительныеПараметры.Вставить("ОписаниеПередаваемогоФайла", ОписаниеПередаваемогоФайла);
		ДополнительныеПараметры.Вставить("ПоследнийФайл", ПоследнийФайл);
		ДополнительныеПараметры.Вставить("ОповещениеОбОкончанииПроверкиФайлов", ОповещениеОбОкончанииПроверкиФайлов);
		ДополнительныеПараметры.Вставить("ФормаДлительнойОперации", ФормаДлительнойОперации);
		ОписаниеПроверкиСуществованияФайла = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаНаДиске", ЭтотОбъект,
			ДополнительныеПараметры);
		ФайлНаДиске.НачатьПроверкуСуществования(ОписаниеПроверкиСуществованияФайла);
		
		// картинка характеристики
		ФайлНаДиске = Новый Файл(СтрокаСопоставленияДанных.КартинкаХарактеристики_ВходящиеДанные);
		ОписаниеПередаваемогоФайла = Новый ОписаниеПередаваемогоФайла(СтрокаСопоставленияДанных.КартинкаХарактеристики_ВходящиеДанные);

		ОповещениеОбОкончанииПроверкиФайлов = Новый ОписаниеОповещения("ОкончаниеПроверкиФайлов", ЭтотОбъект,
			Новый Структура("ПоследнийФайл", ПоследнийФайл));

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписанияПередаваемыхФайлов", ОписанияПередаваемыхФайлов);
		ДополнительныеПараметры.Вставить("ОписаниеПередаваемогоФайла", ОписаниеПередаваемогоФайла);
		ДополнительныеПараметры.Вставить("ПоследнийФайл", ПоследнийФайл);
		ДополнительныеПараметры.Вставить("ОповещениеОбОкончанииПроверкиФайлов", ОповещениеОбОкончанииПроверкиФайлов);
		ДополнительныеПараметры.Вставить("ФормаДлительнойОперации", ФормаДлительнойОперации);
		ОписаниеПроверкиСуществованияФайла = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаНаДиске", ЭтотОбъект,
			ДополнительныеПараметры);
		ФайлНаДиске.НачатьПроверкуСуществования(ОписаниеПроверкиСуществованияФайла);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайлаНаДиске(ФайлСуществует, ДополнительныеПараметры) Экспорт

	Если Не ДополнительныеПараметры.Свойство("ОписанияПередаваемыхФайлов") Тогда
		Возврат;
	КонецЕсли;

	Если ФайлСуществует Тогда
		ДополнительныеПараметры.ОписанияПередаваемыхФайлов.Добавить(ДополнительныеПараметры.ОписаниеПередаваемогоФайла);
	КонецЕсли;

	Если ДополнительныеПараметры.ПоследнийФайл Тогда
		Если ДополнительныеПараметры.ФормаДлительнойОперации.Открыта() Тогда
			ДополнительныеПараметры.ФормаДлительнойОперации.Закрыть();
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОбОкончанииПроверкиФайлов,
			ДополнительныеПараметры.ОписанияПередаваемыхФайлов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПроверкиФайлов(ОписанияПередаваемыхФайлов, ДополнительныеПараметры) Экспорт

	ПараметрыФормыДлительнойОперации = Новый Структура;
	ПараметрыФормыДлительнойОперации.Вставить("ТекстСообщения", НСтр("ru='Выполняется подготовка картинок...'"));
#Если ВебКлиент Тогда
	ПараметрыФормыДлительнойОперации.Вставить("ВыводитьПрогрессВыполнения", Ложь);
#КонецЕсли
	ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", ПараметрыФормыДлительнойОперации, ЭтотОбъект,
		, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ДополнительныеПараметры = Новый Структура("ФормаДлительнойОперации, ПоследнийФайл", ФормаДлительнойОперации,
		ДополнительныеПараметры.ПоследнийФайл);
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ЗавершениеПомещенияКартинок", ЭтотОбъект,
		ДополнительныеПараметры);
	ОписаниеОповещенияОПрогрессеЗагрузки = Новый ОписаниеОповещения("ПрогрессПомещенияКартинок", ЭтотОбъект,
		ДополнительныеПараметры);
	НачатьПомещениеФайловНаСервер(ОписаниеОповещенияОЗавершении, ОписаниеОповещенияОПрогрессеЗагрузки, ,
		ОписанияПередаваемыхФайлов, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Функция КартинкиЕстьВТаблице()

	ТаблицаСопоставления = ДанныеФормыВЗначение(ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений"));
	Если ТаблицаСопоставления.Колонки.Найти("Картинка_ВходящиеДанные") = Неопределено
		И ТаблицаСопоставления.Колонки.Найти("КартинкаПоУмолчанию_ВходящиеДанные") = Неопределено 
		И ТаблицаСопоставления.Колонки.Найти("КартинкаХарактеристики_ВходящиеДанные") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	МассивКартинок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаСопоставления.ВыгрузитьКолонку(
		"Картинка_ВходящиеДанные"));

	Если ТаблицаСопоставления.Колонки.Найти("КартинкаПоУмолчанию_ВходящиеДанные") <> Неопределено Тогда

		МассивКартинокПоУмолчанию = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаСопоставления.ВыгрузитьКолонку(
			"КартинкаПоУмолчанию_ВходящиеДанные"));

		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивКартинок, МассивКартинокПоУмолчанию);

	КонецЕсли;
	
	Если ТаблицаСопоставления.Колонки.Найти("КартинкаХарактеристики_ВходящиеДанные") <> Неопределено Тогда

		МассивКартинокХарактеристики = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаСопоставления.ВыгрузитьКолонку(
			"КартинкаХарактеристики_ВходящиеДанные"));

		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивКартинок, МассивКартинокХарактеристики);

	КонецЕсли;

	Для Каждого ЭлементМассива Из МассивКартинок Цикл

		Если ЭлементМассива <> "" Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область СтраницыПомощника

// :::СтраницаВыборФайла

&НаСервере
Процедура ОбнулитьНомераКолонокВДеревеПолей()

	ДеревоПолей = ПолучитьИзВременногоХранилища(Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);

	Для Каждого СтрокаПервогоУровня Из ДеревоПолей.Строки Цикл

		СтрокаПервогоУровня.НомерКолонки = 0;
		СтрокаПервогоУровня.НомерЦвета = СтрокаПервогоУровня.НомерЦветаОригинал;

		Для Каждого СтрокаВторогоУровня Из СтрокаПервогоУровня.Строки Цикл

			СтрокаВторогоУровня.НомерКолонки = 0;
			СтрокаВторогоУровня.НомерЦвета = СтрокаВторогоУровня.НомерЦветаОригинал;

		КонецЦикла;

	КонецЦикла;

	ПоместитьВоВременноеХранилище(ДеревоПолей, Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);

КонецПроцедуры

&НаСервере
Процедура ОчиститьСуществующиеУстановки()

	ТабличныйДокумент.Очистить();
	ТабличныйДокументСообщения.Очистить();

	ОбнулитьНомераКолонокВДеревеПолей();

КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьЭлементовСтраницы()
	Перем ЭлементВидим;

	ПоказатьЗаголовокОбразцов = Ложь;
	Параметры.НастройкиЗагрузкиДанных.Свойство("ОбразецЗагрузкиДанных_csv", ЭлементВидим);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбразецФормата_csv", "Видимость",
		Не ПустаяСтрока(ЭлементВидим));
	ПоказатьЗаголовокОбразцов = Не ПустаяСтрока(ЭлементВидим);

	Параметры.НастройкиЗагрузкиДанных.Свойство("ОбразецЗагрузкиДанных_mxl", ЭлементВидим);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбразецФормата_mxl", "Видимость",
		Не ПустаяСтрока(ЭлементВидим));
	ПоказатьЗаголовокОбразцов = ПоказатьЗаголовокОбразцов Или Не ПустаяСтрока(ЭлементВидим);

	Параметры.НастройкиЗагрузкиДанных.Свойство("ОбразецЗагрузкиДанных_xlsx", ЭлементВидим);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбразецФормата_xlsx", "Видимость",
		Не ПустаяСтрока(ЭлементВидим));
	ПоказатьЗаголовокОбразцов = ПоказатьЗаголовокОбразцов Или Не ПустаяСтрока(ЭлементВидим);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаголовокПримеры", "Видимость",
		ПоказатьЗаголовокОбразцов);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныйДокументИзФайла()

	Параметры.НастройкиЗагрузкиДанных.СамостоятельноеЗаполнение = Ложь;
	Параметры.НастройкиЗагрузкиДанных.ФиксированныйШаблон = Ложь;

#Если МобильныйКлиент Тогда
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Если Диалог.Выбрать() Тогда
		ДанныеФайла = Новый ДвоичныеДанные(Диалог.ПолноеИмяФайла);
		АдресФайла  = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
		ВыбратьВнешнийФайлОбработкаЗавершение(Истина, АдресФайла, Диалог.ПолноеИмяФайла, Новый Структура);
	КонецЕсли;
#Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьВнешнийФайлОбработкаЗавершение", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения);
		
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныйДокументИзФайлаШаблона()

	Параметры.НастройкиЗагрузкиДанных.СамостоятельноеЗаполнение = Ложь;
	Параметры.НастройкиЗагрузкиДанных.ФиксированныйШаблон = Истина;

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьВнешнийФайлОбработкаЗавершение", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныйСамостоятельно()

	Параметры.НастройкиЗагрузкиДанных.СамостоятельноеЗаполнение = Истина;

	ИзменитьПорядковыйНомерПерехода(+1);

КонецПроцедуры

// :::СтраницаЗагрузкаДанных

&НаСервере
Процедура ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(ПерейтиДалее)

	Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(
		ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяВыбранногоФайла));

	ИмяВременногоФайла	= ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Если ДвоичныеДанные = Неопределено Тогда

		Возврат;

	Иначе

		ДвоичныеДанные.Записать(ИмяВременногоФайла);

	КонецЕсли;

	ТабличныйДокумент.Очистить();
	ТаблицаСопоставленияДанных.Очистить();

	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
	ПараметрыВызоваСервера.Вставить("Расширение", Расширение);
	ПараметрыВызоваСервера.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", Параметры.НастройкиЗагрузкиДанных);

	НаименованиеЗадания = НСтр(
		"ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузка данных из файла'");
	ИмяПроцедуры = "ЗагрузкаДанныхИзВнешнегоИсточника.ЗагрузитьДанные";

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыВызоваСервера,
		ПараметрыВыполнения);

	Если ДлительныеОперации.ЗаданиеВыполнено(РезультатФоновогоЗадания.ИдентификаторЗадания) Тогда

		ФоновоеЗаданиеАдресРезультата = РезультатФоновогоЗадания.АдресРезультата;
		РезультатЗадания = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресРезультата);
		ТабличныйДокумент = РезультатЗадания.ТабличныйДокумент;
		Параметры.НастройкиЗагрузкиДанных.ИдентификаторПоставляемойНастройки 
			= РезультатЗадания.ДополнительныеПараметры.ИдентификаторПоставляемойНастройки;

		Результат = АктуализироватьВыбранныеКолонки();
		Если Результат <> Неопределено Тогда
			ПоместитьВоВременноеХранилище(Результат.ДеревоПолей,
				Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);
			Параметры.НастройкиЗагрузкиДанных.Вставить("ВыбранныеДополнительныеРеквизиты",
				Результат.ВыбранныеДополнительныеРеквизиты);
		КонецЕсли;
		
		УдалитьФайлы(ИмяВременногоФайла);

	Иначе

		ПерейтиДалее = Ложь;
		ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
		ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресРезультата;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуДанныхНаСервере(ПерейтиДалее)

	Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьКолонкиТаблицыСопоставлений(ЭтотОбъект,
		ТаблицаСопоставленияДанных, Параметры.НастройкиЗагрузкиДанных);
	Если Параметры.НастройкиЗагрузкиДанных.СамостоятельноеЗаполнение = Истина Тогда

		ЗагрузкаДанныхИзВнешнегоИсточника.ЗаполнитьРасшифровкиВТабличномДокументе(ТабличныйДокумент,
			Параметры.НастройкиЗагрузкиДанных.МаксимумПолезныхКолонокТД, Параметры.НастройкиЗагрузкиДанных);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабличныйДокумент", "Редактирование",
			Истина);

	Иначе

		ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(ПерейтиДалее);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция АктуализироватьВыбранныеКолонки()
	
	// При получении данных из файла программа могла предзаполнить заголовки полей (автоматически выбрать колонки).
	// Если заголовки выбрали, необходимо поставить соответствующие отметки в дерево полей.

	ДеревоПолей = ПолучитьИзВременногоХранилища(Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);

	ПараметрыОтбора = Новый Структура("ИмяПоля", "");
	Для Итератор = 1 По ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумПолезныхКолонокТабличногоДокумента() Цикл

		ОбластьЗаголовка = ТабличныйДокумент.Область(СтрШаблон("R1C%1", Итератор));
		Если ПустаяСтрока(ОбластьЗаголовка.ПараметрРасшифровки) Тогда

			Продолжить;

		КонецЕсли;
		
		// ::: Если автоматически сопоставлен дополнительный реквизит
		НайденДополнительныйРеквизит = Ложь;
		Если Параметры.НастройкиЗагрузкиДанных.Свойство("ОписаниеДополнительныхРеквизитов") Тогда

			Для Каждого ОписаниеРеквизита Из Параметры.НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов Цикл

				Если ОписаниеРеквизита.Значение = ОбластьЗаголовка.ПараметрРасшифровки Тогда

					Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Вставить(ОписаниеРеквизита.Ключ,
						ОписаниеРеквизита.Значение);

					ПараметрыОтбора.ИмяПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяПоляДобавленияДополнительныхРеквизитов();
					ГруппаДопРеквизитов = ДеревоПолей.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
					Если ГруппаДопРеквизитов.Количество() > 0 Тогда

						ПараметрыОтбора.ИмяПоля = ОписаниеРеквизита.Значение;
						НайденныеДополнительныеРеквизиты = ГруппаДопРеквизитов[0].Строки.НайтиСтроки(ПараметрыОтбора,
							Истина);

						Если НайденныеДополнительныеРеквизиты.Количество() = 0 Тогда

							ПолеДополнительногоРеквизита = ГруппаДопРеквизитов[0].Строки.Добавить();
							ПолеДополнительногоРеквизита.ИмяГруппыПолей = "";
							ПолеДополнительногоРеквизита.ИмяПоля = ОписаниеРеквизита.Значение;
							ПолеДополнительногоРеквизита.ТипПолучаемогоЗначения = Неопределено;
							ПолеДополнительногоРеквизита.ПредставлениеПоля = ОписаниеРеквизита.Ключ.Наименование;

						Иначе

							ПолеДополнительногоРеквизита = НайденныеДополнительныеРеквизиты[0];

						КонецЕсли;

						ПолеДополнительногоРеквизита.НомерКолонки = Итератор;
						ПолеДополнительногоРеквизита.НомерЦвета = 3;
						ПолеДополнительногоРеквизита.НомерЦветаОригинал = 4;

					КонецЕсли;

					НайденДополнительныйРеквизит = Истина;
					Прервать;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;
		
		// ::: Если автоматически сопоставлен стандартный реквизит
		Если Не НайденДополнительныйРеквизит Тогда

			ПараметрыОтбора.ИмяПоля = ОбластьЗаголовка.ПараметрРасшифровки;
			ОписаниеПолей = ДеревоПолей.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			Если ОписаниеПолей.Количество() = 1 Тогда

				ОписаниеПолей[0].НомерКолонки = Итератор;
				ОписаниеПолей[0].НомерЦвета = 3;

			Иначе

				ОбластьЗаголовка.Текст = НСтр("ru ='Не загружать'");
				ОбластьЗаголовка.ПараметрРасшифровки = "";

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	ВыбранныеДополнительныеРеквизиты = ?(
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры.НастройкиЗагрузкиДанных,
		"ВыбранныеДополнительныеРеквизиты"), Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты,
		Новый Соответствие);
	Возврат Новый Структура("ДеревоПолей, ВыбранныеДополнительныеРеквизиты", ДеревоПолей,
		ВыбранныеДополнительныеРеквизиты);

КонецФункции

// :::СтраницыПроверкаДанных

&НаКлиенте
Процедура ОбработатьРезультатПроверкиДанныхТабличногоДокумента(РезультатФормирования, ДополнительныеПараметры) Экспорт

	Если РезультатФормирования = Неопределено Тогда

		Возврат;

	КонецЕсли;

	ПрогрессВыполнения = 0;
	ФоновоеЗаданиеРезультатФормирования = РезультатФормирования;

	Если ФоновоеЗаданиеРезультатФормирования.Статус = "Ошибка" Тогда

		ИзменитьПорядковыйНомерПерехода(-1);

		ДобавитьОшибкуЖурналаРегистрации(ФоновоеЗаданиеРезультатФормирования.ПодробноеПредставлениеОшибки);
		ВызватьИсключение ФоновоеЗаданиеРезультатФормирования.КраткоеПредставлениеОшибки;

	КонецЕсли;

	ФоновоеЗаданиеИдентификатор = Неопределено;
	ФоновоеЗаданиеАдресХранилища = Неопределено;

	ШагнутьВперед = ПослеПроверкиДанныхТабличногоДокументаВДлительнойОперации(ФоновоеЗаданиеРезультатФормирования);
	ИзменитьПорядковыйНомерПерехода(ШагнутьВперед);

КонецПроцедуры

&НаКлиенте
Процедура ПослеНачалаПроверкиДанных()

	Если ФоновоеЗаданиеРезультатФормирования = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Если ФоновоеЗаданиеРезультатФормирования.Статус <> "Выполняется" Тогда

		ОбработатьРезультатПроверкиДанныхТабличногоДокумента(ФоновоеЗаданиеРезультатФормирования, Неопределено);
		Возврат;

	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиДанныхТабличногоДокумента", ЭтотОбъект,
		Неопределено);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания	= Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессПроверкиДанныхТабличногоДокумента",
		ЭтотОбъект);

	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗаданиеРезультатФормирования, Обработчик, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ПрогрессПроверкиДанныхТабличногоДокумента(Прогресс, ДополнительныеПараметры) Экспорт

	Если Прогресс = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Если Прогресс.Статус <> "Выполняется" Тогда

		Возврат;

	КонецЕсли;

	Если Прогресс.Прогресс <> Неопределено Тогда

		ПрогрессВыполнения = Прогресс.Прогресс.Процент;

		Элементы.ПрогрессВыполненияПроверкаДанных.Подсказка = Прогресс.Прогресс.Текст;
		Элементы.ПрогрессВыполненияПроверкаДанных.Заголовок = Прогресс.Прогресс.Текст;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаДанныхТабличногоДокументаНаСервере()

	Если Параметры.НастройкиЗагрузкиДанных.Свойство("ВыбранныеДополнительныеРеквизиты")
		И Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Количество() > 0 Тогда

		Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьДополнительныеРеквизиты(ЭтотОбъект,
			Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);

	КонецЕсли;

	Если Параметры.НастройкиЗагрузкиДанных.НастройкиПоиска.ИскатьПоДополнительномуРеквизиту Тогда

		Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьДополнительныйРеквизитПоиска(ЭтотОбъект,
			Параметры.НастройкиЗагрузкиДанных.НастройкиПоиска.ДополнительныйРеквизитПоиска);

	КонецЕсли;

	Если ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) Тогда

		ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;

	КонецЕсли;

	ПрогрессВыполнения = 0;

	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	ПараметрыПроцедуры.Вставить("ТабличныйДокументСообщения", ТабличныйДокументСообщения);
	ПараметрыПроцедуры.Вставить("ДеревоПолей", ПолучитьИзВременногоХранилища(
		Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей));
	ПараметрыПроцедуры.Вставить("НастройкиЗагрузкиДанных", Параметры.НастройкиЗагрузкиДанных);
	ПараметрыПроцедуры.Вставить("ПропуститьСтраницу", Истина);
	ПараметрыПроцедуры.Вставить("ЗапретитьПереходДалее", Ложь);
	ПараметрыПроцедуры.Вставить("ТаблицаСопоставленияДанных", ТаблицаСопоставленияДанных.Выгрузить());
	ПараметрыПроцедуры.Вставить("Ошибки", Неопределено);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка данных в колонках табличного документа'");
	ПараметрыВыполнения.ЗапуститьВФоне				= Истина;

	ИмяМетода = "Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ПредварительнаяОбработкаДанных";
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыПроцедуры, ПараметрыВыполнения);

	ФоновоеЗаданиеРезультатФормирования = РезультатФоновогоЗадания;
	ФоновоеЗаданиеИдентификатор = РезультатФоновогоЗадания.ИдентификаторЗадания;

КонецПроцедуры

// :::СтраницаСопоставлениеДанных

&НаКлиенте
Процедура ОбработатьРезультатСопоставленияДанныхТабличногоДокумента(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда

		ДобавитьОшибкуЖурналаРегистрации(Результат.ПодробноеПредставлениеОшибки);
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;

	КонецЕсли;

	ФоновоеЗаданиеИдентификатор = Неопределено;
	ФоновоеЗаданиеАдресХранилища = Неопределено;

	ПослеСопоставленияЗагружаемыхДанныхВДлительнойОперации(Результат);
	ИзменитьПорядковыйНомерПерехода(+1);

КонецПроцедуры

&НаКлиенте
Процедура ПослеНачалаСопоставленияДанных()

	Если ФоновоеЗаданиеРезультатФормирования = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Если ФоновоеЗаданиеРезультатФормирования.Статус <> "Выполняется" Тогда

		ОбработатьРезультатСопоставленияДанныхТабличногоДокумента(ФоновоеЗаданиеРезультатФормирования, Неопределено);
		Возврат;

	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатСопоставленияДанныхТабличногоДокумента", ЭтотОбъект,
		Неопределено);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессОбновленияПараметровРаботыПрограммы",
		ЭтотОбъект);

	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗаданиеРезультатФормирования, Обработчик, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ПрогрессОбновленияПараметровРаботыПрограммы(Прогресс, ДополнительныеПараметры) Экспорт

	Если Прогресс = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Если Прогресс.Статус <> "Выполняется" Тогда

		Возврат;

	КонецЕсли;

	Если Прогресс.Прогресс <> Неопределено Тогда

		ПрогрессВыполнения = Прогресс.Прогресс.Процент;

		Элементы.ПрогрессВыполненияСопоставленияДанных.Подсказка = Прогресс.Прогресс.Текст;
		Элементы.ПрогрессВыполненияСопоставленияДанных.Заголовок = Прогресс.Прогресс.Текст;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СопоставлениеДанныхТабличногоДокументаНаСервере()

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр(
		"ru = 'Сопоставление внешних данных и данных нашей программы'");
	Если Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника
		И Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Номенклатура" Тогда
		ПараметрыВыполнения.Вставить("ДополнительныйРезультат", Истина);
	КонецЕсли;
	
	Параметры.НастройкиЗагрузкиДанных.Вставить("ДатаОбработки", ДатаОбработки);

	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ТаблицаСопоставленияДанных", ТаблицаСопоставленияДанных.Выгрузить());
	ПараметрыПроцедуры.Вставить("НастройкиЗагрузкиДанных", Параметры.НастройкиЗагрузкиДанных);

	ОбъектЗагрузки = ЗагрузкаДанныхИзВнешнегоИсточника.ОбъектЗагрузкиПоПолномуИмени(
		Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения);
	ИмяМетодаДлительнойОперации = СтрШаблон("%1.%2.СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника", СокрЛП(
		ОбъектЗагрузки.ОбъектЗагрузки.Родитель.Имя), СокрЛП(ОбъектЗагрузки.ОбъектЗагрузки.Имя));
	ФоновоеЗаданиеРезультатФормирования = ДлительныеОперации.ВыполнитьВФоне(ИмяМетодаДлительнойОперации,
		ПараметрыПроцедуры, ПараметрыВыполнения);

	ФоновоеЗаданиеИдентификатор = ФоновоеЗаданиеРезультатФормирования.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = ФоновоеЗаданиеРезультатФормирования.АдресРезультата;
	ФоновоеЗаданиеАдресДополнительногоХранилища = ФоновоеЗаданиеРезультатФормирования.АдресДополнительногоРезультата;

КонецПроцедуры

// :::СтраницаРезультатСопоставления

&НаСервере
Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(ИдентификаторСтрокиФормы)
	Перем Менеджер;

	СтрокаТаблицыФормы = ТаблицаСопоставленияДанных.НайтиПоИдентификатору(ИдентификаторСтрокиФормы);

	ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМенеджерПоИмениОбъектаЗаполнения(
		Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, Менеджер);
	Менеджер.ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы,
		Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстДекорацииКоличестваСтрок()

	КоличествоСтрокТаблицы		= ТаблицаСопоставленияДанных.Количество();
	КоличествоСтрокБезОшибок	= ТаблицаСопоставленияДанных.НайтиСтроки(
		Новый Структура("_ЗагрузкаВПриложениеВозможна", Истина)).Количество();

	НеСопоставленоДанных = ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_СтрокаСопоставлена",
		Ложь)).Количество();
	НесогласованныеДанные = ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_ЗагрузкаВПриложениеВозможна",
		Ложь)).Количество();
	ЗаполненыНеПолностью = ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура(ЗаполненыНеПолностью(),
		Истина)).Количество();

	НовыйЗаголовок 				= "";

	Если ФильтрТаблицаСопоставления = "БезОтбора" Тогда

		НовыйЗаголовок = НСтр("ru ='Всего строк в таблице .......... %1'");
		ЗначениеПараметра = КоличествоСтрокТаблицы;

	ИначеЕсли ФильтрТаблицаСопоставления = "ОтборОшибокНет" Тогда

		НовыйЗаголовок = НСтр("ru ='Строк с данными, которые возможно загрузить в приложение .......... %1'");
		ЗначениеПараметра = КоличествоСтрокБезОшибок;

	ИначеЕсли ФильтрТаблицаСопоставления = "ОтборОшибки" Тогда

		НовыйЗаголовок = НСтр("ru ='Строки, содержащие ошибки и препятствующие загрузке данных .......... %1'");
		ЗначениеПараметра = КоличествоСтрокТаблицы - КоличествоСтрокБезОшибок;

	ИначеЕсли ФильтрТаблицаСопоставления = "Сопоставленные" Тогда

		Если ОбновлятьСуществующие Тогда

			НовыйЗаголовок = НСтр(
				"ru ='Данные, которые соответствуют элементам программы и будут обновлены .......... %1'");

		Иначе

			НовыйЗаголовок = НСтр("ru ='Данные, которые соответствуют элементам программы .......... %1'");

		КонецЕсли;

		ЗначениеПараметра = КоличествоСтрокТаблицы - НеСопоставленоДанных;

	ИначеЕсли ФильтрТаблицаСопоставления = "БудутСозданы" Тогда

		НовыйЗаголовок = НСтр("ru ='Данные, которые не удалось сопоставить .......... %1'");
		ЗначениеПараметра = НеСопоставленоДанных;

	ИначеЕсли ФильтрТаблицаСопоставления = "Несогласованные" Тогда

		НовыйЗаголовок = НСтр("ru ='Строки, которые содержат ошибку либо заполнены не полностью .......... %1'");
		ЗначениеПараметра = НесогласованныеДанные;

	ИначеЕсли ФильтрТаблицаСопоставления = ЗаполненыНеПолностью() Тогда

		НовыйЗаголовок = НСтр("ru ='Строки, которые заполнены не полностью .......... %1'");
		ЗначениеПараметра = ЗаполненыНеПолностью;

	КонецЕсли;

	НовыйЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НовыйЗаголовок, ЗначениеПараметра);
	Элементы.ДекорацияКоличествоСтрок.Заголовок = НовыйЗаголовок;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокПоЗначениюФильтра()

	Если ФильтрТаблицаСопоставления = "БезОтбора" Тогда

		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Неопределено;

	ИначеЕсли ФильтрТаблицаСопоставления = "ОтборОшибокНет" Тогда

		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура(ИмяСлужебногоПоля, Истина);

	ИначеЕсли ФильтрТаблицаСопоставления = "ОтборОшибки" Тогда

		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура(ИмяСлужебногоПоля, Ложь);

	ИначеЕсли ФильтрТаблицаСопоставления = "Сопоставленные" Тогда

		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("_СтрокаСопоставлена", Истина);

	ИначеЕсли ФильтрТаблицаСопоставления = "БудутСозданы" Тогда

		Если Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника
			Или Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти Тогда

			ФиксированнаяСтруктураОтбораСтрок = Новый ФиксированнаяСтруктура("_ЗагрузкаВПриложениеВозможна, _СтрокаСопоставлена",
				Истина, Ложь);
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = ФиксированнаяСтруктураОтбораСтрок;

		ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаРегистраСведений Тогда

			ФиксированнаяСтруктураОтбораСтрок = Новый ФиксированнаяСтруктура("_ЗагрузкаВПриложениеВозможна, _СтрокаСопоставлена",
				Истина, Ложь);
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = ФиксированнаяСтруктураОтбораСтрок;

		КонецЕсли;

	ИначеЕсли ФильтрТаблицаСопоставления = "Несогласованные" Тогда

		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("_ЗагрузкаВПриложениеВозможна"
			+ ", " + ЗаполненыНеПолностью(), Ложь, Ложь);

	ИначеЕсли ФильтрТаблицаСопоставления = ЗаполненыНеПолностью() Тогда

		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура(ЗаполненыНеПолностью(), Истина);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЗаполненыНеПолностью()

	Возврат ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗаполненыНеПолностью();

КонецФункции

&НаСервере
Процедура ПослеСопоставленияЗагружаемыхДанныхВДлительнойОперации(Результат)

	Если Результат = Неопределено Тогда

		Возврат;

	КонецЕсли;

	РезультатВыполненияКакТаблицаЗначений = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ТаблицаСопоставленияДанных.Загрузить(РезультатВыполненияКакТаблицаЗначений);
	Если ЗначениеЗаполнено(ФоновоеЗаданиеАдресДополнительногоХранилища) И Не ПолучитьИзВременногоХранилища(
		ФоновоеЗаданиеАдресДополнительногоХранилища) = Неопределено Тогда
		ЗначениеВДанныеФормы(ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресДополнительногоХранилища), ДеревоИерархии);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеОбработчикиСобытийПереходов

// :::СтраницаВыборФайла

&НаКлиенте
Функция Подключаемый_СтраницаВыборФайла_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее) Экспорт
	
	СтруктураПроверки = Новый Структура;

	Если ЭтоПереходДалее = Ложь Тогда

		ОчиститьСуществующиеУстановки();

	Иначе

		ОпределитьВидимостьЭлементовСтраницы();

	КонецЕсли;
	Возврат СтруктураПроверки;

КонецФункции

// :::СтраницаЗагрузкаДанных

&НаКлиенте
Функция Подключаемый_СтраницаЗагрузкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)

	ПерейтиДалее = Истина;
	ВыполнитьЗагрузкуДанныхНаСервере(ПерейтиДалее);

	Если ЗначениеЗаполнено(НастройкаСоответствияПолей) Тогда
		ПослеВыбораШаблонаСоответствияПолей(НастройкаСоответствияПолей, Неопределено);
	КонецЕсли;

	Если Не ПерейтиДалее Тогда

		ПодключитьОбработчикОжидания("ПроверитьВыполнение", 0.1, Истина);

	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// :::СтраницыПроверкаДанных

&НаКлиенте
Функция Подключаемый_СтраницаЗагрузкиДанных_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.СохранитьНастройкиВФайл.Видимость = Истина;
	
	СформироватьЗаголовокКомандыНастройкиПоиска(Элементы.НастройкиПоиска.Заголовок,
		Параметры.НастройкиЗагрузкиДанных.НастройкиПоиска);

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницыПроверкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)

	ПерейтиДалее = Ложь;

	ПроверкаДанныхТабличногоДокументаНаСервере();
	ПослеНачалаПроверкиДанных();

	Возврат Неопределено;

КонецФункции

// :::СтраницыРезультатПроверкиДанных

&НаКлиенте
Функция Подключаемый_СтраницыРезультатПроверкиДанных_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.СохранитьНастройкиВФайл.Видимость = Истина;
	
	Если Не ЭтоПереходДалее Тогда

		ПропуститьСтраницу = Истина;
		Возврат Неопределено;

	КонецЕсли;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницыРезультатПроверкиДанных_ПриПереходеНазад(Отказ)

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаДалее1", "Доступность", Истина);

	Возврат Неопределено;

КонецФункции

// :::СтраницаСопоставлениеДанных

&НаКлиенте
Функция Подключаемый_СтраницаСопоставлениеДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)

	ПерейтиДалее = Ложь;

	СопоставлениеДанныхТабличногоДокументаНаСервере();
	ПослеНачалаСопоставленияДанных();

	Параметры.НастройкиЗагрузкиДанных.КоличествоЗаполнено = КоличествоЗаполнено();
	Элементы.СкладОстатков.Видимость = Параметры.НастройкиЗагрузкиДанных.КоличествоЗаполнено;
	Возврат Неопределено;

КонецФункции

// :::СтраницаРезультатСопоставления

&НаКлиенте
Функция Подключаемый_СтраницаРезультатСопоставления_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.СохранитьНастройкиВФайл.Видимость = Ложь;
	
	Если ЭтоПереходДалее = Истина Тогда

		ПропуститьСтраницу = Истина;

	Иначе

		УстановитьОтборСтрокПоЗначениюФильтра();
		УстановитьТекстДекорацииКоличестваСтрок();

		ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаСопоставленияДанных;

	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// :::СтраницаНастройкаЗагрузки

&НаКлиенте
Функция Подключаемый_СтраницаПредварительноТЧ_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее) Экспорт

	УстановитьТекстЗаголовковДекораций();
	Если Элементы.ГруппаОбщееЗначениеСправочникТЧ.Видимость Тогда
		УстановитьОбщееЗначениеИзНастроек();
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПредварительноСправочник_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее) Экспорт

	УстановитьТекстЗаголовковДекораций();
	Если Элементы.ГруппаОбщееЗначениеСправочник.Видимость Тогда
		УстановитьОбщееЗначениеИзНастроек();
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПредварительноРС_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее) Экспорт

	УстановитьТекстЗаголовковДекораций();
	УстановитьОбщееЗначениеИзНастроек();

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Функция Подключаемый_РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОбработчикЗакрытия = Новый ОписаниеОповещения("РодительВыборГруппы", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.Родитель);

	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораГруппы", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОбработчикЗакрытия);

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область НастройкиФормы

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(СохраняемыеНастройки, КлючНастроек)

	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		"Обработка.ЗагрузкаДанныхИзВнешнегоИсточника.Форма.ПомощникЗагрузкиДанныхИзВнешнегоИсточника", КлючНастроек,
		СохраняемыеНастройки);

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиФормы()

	ЗагружаемыеНастройкиПоУмолчанию = ПолучитьНастройкиФормыПоУмолчанию();
	КлючНастроек = ?(Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаРегистраСведений, "ЭтоЗагрузкаРегистраСведений",
		"ЭтоЗагрузкаСправочника");
	ЗагружаемыеНастройки 			= ПолучитьНастройкиФормы(ЗагружаемыеНастройкиПоУмолчанию, КлючНастроек);
	Параметры.НастройкиЗагрузкиДанных.Вставить("ОбщееЗначениеСправочник");

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемыеНастройки, "НастройкиПоиска") Тогда

		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ЗагружаемыеНастройки.НастройкиПоиска,
			ЗагружаемыеНастройкиПоУмолчанию.НастройкиПоиска, Ложь);

	Иначе

		ЗагружаемыеНастройки.Вставить("НастройкиПоиска", ЗагружаемыеНастройкиПоУмолчанию.НастройкиПоиска);

	КонецЕсли;
	
	Если НЕ Параметры.НастройкиЗагрузкиДанных.Свойство("НастройкиПоиска") Тогда
		ЗагружаемыеНастройки.Вставить("НастройкиПоиска", Параметры.НастройкиЗагрузкиДанных.НастройкиПоиска); 
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Параметры.НастройкиЗагрузкиДанных, ЗагружаемыеНастройки);

	КудаЗагружаемХарактеристики 	= ЗагружаемыеНастройки.КудаЗагружаемХарактеристики;
	КудаЗагружаемКартинки 			= ЗагружаемыеНастройки.КудаЗагружаемКартинки;
	КудаЗагружаемДопРеквизиты 		= ЗагружаемыеНастройки.КудаЗагружаемДопРеквизиты;
	ОбновлятьСуществующие 			= ЗагружаемыеНастройки.ОбновлятьСуществующие;
	СоздаватьЕслиНеСопоставлено 	= ЗагружаемыеНастройки.СоздаватьЕслиНеСопоставлено;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбщееЗначениеИзНастроек()

	Если Параметры.НастройкиЗагрузкиДанных.Свойство("ОбщееЗначениеСправочник")
		И Не Параметры.НастройкиЗагрузкиДанных.ОбщееЗначениеСправочник = Неопределено Тогда
		ОбщееЗначениеСправочник = Параметры.НастройкиЗагрузкиДанных.ОбщееЗначениеСправочник;
	КонецЕсли;
	ДополнительныеНастройки = Новый Структура("Форма, НастройкиЗагрузкиДанных, ТаблицаСопоставленияДанных", ЭтотОбъект,
		Параметры.НастройкиЗагрузкиДанных, ТаблицаСопоставленияДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиентПереопределяемый.ПриОбработкеРезультатаВыбораОбщегоЗначения(
		ОбщееЗначениеСправочник, ДополнительныеНастройки);

КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиФормыПоУмолчанию()

	ЗагружаемыеНастройкиПоУмолчанию = ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьНастройкиФормыПомощникаЗагрузкиПоУмолчанию();

	Если Параметры.НастройкиЗагрузкиДанных.Свойство("ОбщееЗначениеСправочник")
		И Не Параметры.НастройкиЗагрузкиДанных.ОбщееЗначениеСправочник = Неопределено Тогда
		ОбщееЗначениеСправочник = Параметры.НастройкиЗагрузкиДанных.ОбщееЗначениеСправочник;
	КонецЕсли;
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ОбщееЗначениеСправочник", ОбщееЗначениеСправочник);

	Возврат ЗагружаемыеНастройкиПоУмолчанию;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройкиФормы(ЗагружаемыеНастройки, КлючНастроек)

	Возврат ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		"Обработка.ЗагрузкаДанныхИзВнешнегоИсточника.Форма.ПомощникЗагрузкиДанныхИзВнешнегоИсточника", КлючНастроек,
		ЗагружаемыеНастройки);

КонецФункции

#КонецОбласти

#КонецОбласти