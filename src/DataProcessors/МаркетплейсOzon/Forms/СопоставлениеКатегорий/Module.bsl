
#Область ОписаниеПеременных

&НаКлиенте
Перем ЭтоЗакрытиеФормы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	НастроитьФорму(Параметры, Отказ);
	НастройкаФормыВыполненаПриСозданииНаСервере = Истина;

КонецПроцедуры
 
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	ЭтоЗакрытиеФормы = Истина;

	Если Не ЗавершениеРаботы Тогда
		СохраняемыеНастройки = Новый Структура;
		СохраняемыеНастройки.Вставить("НеПоказыватьПодсказку", НеПоказыватьПодсказку);

		ПараметрыЗакрытия = Новый Структура;
		ПараметрыЗакрытия.Вставить("СохраняемыеНастройки", СохраняемыеНастройки);
		ПараметрыЗакрытия.Вставить("ДеревоАтрибутов", ДеревоАтрибутов);

		ДействияПриЗакрытии(ПараметрыЗакрытия);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ЗакрытиеСопоставленияЗначений" И Источник = УникальныйИдентификатор Тогда
		ТекущиеДанные = Элементы.ДеревоАтрибутов.ТекущиеДанные;
		ТекущиеДанные.АдресХранилищаДоступныхЗначений = Параметр;
	ИначеЕсли ИмяСобытия = "ОткрытиеФормыСопоставленияКатегорий" Тогда
		ТекущаяКатегория1СИзПараметров = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "ТекущаяКатегория1С", Неопределено);

		Если Не НастройкаФормыВыполненаПриСозданииНаСервере
			Или ТекущаяКатегория1С <> ТекущаяКатегория1СИзПараметров Тогда
			НастроитьФорму(Параметр, Ложь);
			ДеревоКатегорийПриАктивизацииСтроки(Элементы.ДеревоКатегорий);
		КонецЕсли;

		НастройкаФормыВыполненаПриСозданииНаСервере = Ложь;
	ИначеЕсли ИмяСобытия = "ИсточникКатегорииИзменен" Тогда
		УчетнаяЗаписьИзменения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "УчетнаяЗапись", Неопределено);
		ИсточникКатегорииИзменения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "ИсточникКатегории", Неопределено);
		ТекущаяКатегория1СИзПараметров = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "ТекущаяКатегория1С", Неопределено);

		Если УчетнаяЗапись = УчетнаяЗаписьИзменения И ИсточникКатегорий <> ИсточникКатегорииИзменения
			Или ТекущаяКатегория1С <> ТекущаяКатегория1СИзПараметров Тогда
			НастроитьФорму(Параметр, Ложь);
			ДеревоКатегорийПриАктивизацииСтроки(Элементы.ДеревоКатегорий);
		КонецЕсли;

		НастройкаФормыВыполненаПриСозданииНаСервере = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказыватьТоварыПриИзменении(Элемент)

	ИзменитьТекстЗапросаДинамическогоСписка(, Истина);
	Элементы.ДеревоКатегорий.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ОбъединятьТоварыВОднуКарточкуПриИзменении(Элемент)

	Если Не ОбъединятьТоварыВОднуКарточку И ЗначениеЗаполнено(ОбъединятьТоварыВОднуКарточкуСвойства) Тогда
		ДанныеЗаписи = Новый Структура;
		ДанныеЗаписи.Вставить("ИдентификаторКатегорииМаркетплейса", ДанныеТекущейСтрокиДереваКатегорий.ИдентификаторКатегорииМаркетплейса);
		ДанныеЗаписи.Вставить("ИдентификаторАтрибутаМаркетплейса", ОбъединятьТоварыВОднуКарточкуСвойства.ИдентификаторАтрибута);
		ДанныеЗаписи.Вставить("ЗначениеПоУмолчаниюИдентификатор", "");

		ЗаписьВРегистрСоответствияАтрибутов(ДанныеЗаписи, Истина);

		ОбъединятьТоварыВОднуКарточкуПредставлениеРеквизита1С = "";
		ОбъединятьТоварыВОднуКарточкуСвойства.Реквизит1С = "";
		ОбъединятьТоварыВОднуКарточкуСвойства.ПредставлениеРеквизита1С = "";
	КонецЕсли;

	ИзменитьДоступКАтрибутуОбъединенияКарточек();

КонецПроцедуры

&НаКлиенте
Процедура ОбъединятьТоварыВОднуКарточкуПредставлениеРеквизита1СПриИзменении(Элемент)

	ДанныеЗаписи = Новый Структура;
	ДанныеЗаписи.Вставить("ИдентификаторКатегорииМаркетплейса", ДанныеТекущейСтрокиДереваКатегорий.ИдентификаторКатегорииМаркетплейса);
	ДанныеЗаписи.Вставить("ИдентификаторАтрибутаМаркетплейса", ОбъединятьТоварыВОднуКарточкуСвойства.ИдентификаторАтрибута);
	ДанныеЗаписи.Вставить("ЗначениеПоУмолчаниюИдентификатор", "");

	УдалитьЗаписьИзРегистра = Элементы.ОбъединятьТоварыВОднуКарточку.ТолькоПросмотр
			И Не ЗначениеЗаполнено(ОбъединятьТоварыВОднуКарточкуПредставлениеРеквизита1С);

	ЗаписьВРегистрСоответствияАтрибутов(ДанныеЗаписи, УдалитьЗаписьИзРегистра);

КонецПроцедуры

&НаКлиенте
Процедура ОбъединятьТоварыВОднуКарточкуПредставлениеРеквизита1СНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОткрытьФормуВыбораРеквизита1С(Неопределено);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоКатегорий

&НаКлиенте
Процедура ДеревоКатегорийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элемент.ТекущиеДанные;

	ИмяПоля = СтрЗаменить(Поле.Имя, Элемент.Имя, "");
	Если ИмяПоля = "Категория1С" Тогда
		Если ИсточникКатегорий = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
			ИмяФормыИсточникаКатегории = "КатегорииНоменклатуры";
		Иначе
			ИмяФормыИсточникаКатегории = "Номенклатура";
		КонецЕсли;

		Если ТекущиеДанные.ЭтоГруппа Тогда 
			ИмяФормыИсточникаКатегории = ИмяФормыИсточникаКатегории + ".ФормаГруппы";
		Иначе
			ИмяФормыИсточникаКатегории = ИмяФормыИсточникаКатегории + ".ФормаОбъекта";
		КонецЕсли;

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Категория1С);
		ПараметрыФормы.Вставить("ЭтоГруппа", ТекущиеДанные.ЭтоГруппа);
		ОткрытьФорму("Справочник." + ИмяФормыИсточникаКатегории, ПараметрыФормы);
	ИначеЕсли ИмяПоля = "ПредставлениеКатегорииМаркетплейса" И Не ЗначениеЗаполнено(ТекущаяКатегория1С) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);
		ПараметрыФормы.Вставить("ИдентификаторКатегорииМаркетплейса", ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
		ПараметрыФормы.Вставить("Категория1С", ТекущиеДанные.Категория1С); 

		ОбработчикВыбораКатегории = Новый ОписаниеОповещения("ВыборКатегорииЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.МаркетплейсOzon.Форма.ВыборКатегорииМаркетплейса", ПараметрыФормы,,,,, ОбработчикВыбораКатегории);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.ДеревоКатегорий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьАтрибуты = Истина;

	Если ДанныеТекущейСтрокиДереваКатегорий <> Неопределено
		И (ДанныеТекущейСтрокиДереваКатегорий.ИдентификаторКатегорииМаркетплейса = ТекущиеДанные.ИдентификаторКатегорииМаркетплейса
		И ДанныеТекущейСтрокиДереваКатегорий.ВладелецКатегорииМаркетплейса = ТекущиеДанные.ВладелецКатегорииМаркетплейса) Тогда

		ЗаполнитьАтрибуты = Ложь;
	КонецЕсли;

	Если НЕ Элементы.СтраницыЭлементовАтрибутовКатегории.ТекущаяСтраница = Элементы.СтраницаАтрибутов
		И ЗаполнитьАтрибуты Тогда
		Элементы.СтраницыЭлементовАтрибутовКатегории.ТекущаяСтраница = Элементы.СтраницаАтрибутов;
	КонецЕсли;

	ДанныеТекущейСтрокиДереваКатегорий =
			Новый Структура("Категория1С, ИдентификаторКатегорииМаркетплейса, НаименованиеКатегорииМаркетплейса, ВладелецКатегорииМаркетплейса");
	ЗаполнитьЗначенияСвойств(ДанныеТекущейСтрокиДереваКатегорий, ТекущиеДанные);

	Если ЗаполнитьАтрибуты Тогда
		Если ЗначениеЗаполнено(ДанныеТекущейСтрокиДереваКатегорий.ИдентификаторКатегорииМаркетплейса) Тогда
			Элементы.СтраницыЭлементовАтрибутовКатегории.ТекущаяСтраница = Элементы.СтраницаДлительногоОжидания;
			ПодключитьОбработчикОжидания("ЗаполнитьДеревоАтрибутовКатегории", 0.1, Истина);
		Иначе
			ОчиститьДеревоАтрибутов();
		КонецЕсли;
	КонецЕсли;

	УправлениеПодчиненнымиЭлементамиДляТекущейСтрокиДереваКатегорий();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДеревоКатегорийПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	ДанныеТекущейКатегории = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Настройки.ДополнительныеСвойства,
			"ДанныеТекущейКатегории",
			Неопределено);

	Если ДанныеТекущейКатегории = Неопределено Тогда
		ИсточникКатегории = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				Настройки.ДополнительныеСвойства,
				"ИсточникКатегории",
				ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры"));

		УчетнаяЗапись = Настройки.ПараметрыДанных.Элементы.Найти("УчетнаяЗапись").Значение;

		ВыборкаДанных = ИнтеграцияСМаркетплейсомOzonСервер.ВыборкаИсточникаКатегорииМаркетплейса(Строки.ПолучитьКлючи(),
				ИсточникКатегории, УчетнаяЗапись);

		Пока ВыборкаДанных.Следующий() Цикл 
			СтрокаСписка = Строки[ВыборкаДанных.Категория1С];
			СтрокаСписка.Данные["ВладелецКатегорииМаркетплейса"] = ВыборкаДанных.РодительКатегории1С;
			СтрокаСписка.Данные["ИдентификаторКатегорииМаркетплейса"] = ВыборкаДанных.ИдентификаторОбъектаМаркетплейса;
			СтрокаСписка.Данные["НаименованиеКатегорииМаркетплейса"] = ВыборкаДанных.НаименованиеОбъектаМаркетплейса;
			СтрокаСписка.Данные["ПредставлениеКатегорииМаркетплейса"] = "<" + ВыборкаДанных.НаименованиеОбъектаМаркетплейса + ">";
		КонецЦикла;
	ИначеЕсли Строки.Количество() > 0 Тогда
		Для Каждого СтрокаСписка Из Строки Цикл
			СтрокаСписка.Значение.Данные["ИдентификаторКатегорииМаркетплейса"] = ДанныеТекущейКатегории.ИдентификаторКатегорииМаркетплейса;
			СтрокаСписка.Значение.Данные["НаименованиеКатегорииМаркетплейса"] = ДанныеТекущейКатегории.НаименованиеКатегорииМаркетплейса;
			СтрокаСписка.Значение.Данные["ПредставлениеКатегорииМаркетплейса"] = ДанныеТекущейКатегории.НаименованиеКатегорииМаркетплейса;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоАтрибутов

&НаКлиенте
Процедура ДеревоАтрибутовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ОчиститьСообщения();

	Если Поле.Имя = "ДеревоАтрибутовПредставлениеРеквизита1С" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВыбораРеквизита1С(ВыбраннаяСтрока);
	ИначеЕсли Поле.Имя = "ДеревоАтрибутовИнформацияОСопоставленииЗначений" Тогда
		ОткрытьФормуСопоставленияЗначенийАтрибута(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Поле.Имя = "ДеревоАтрибутовЗначениеПоУмолчаниюИдентификатор" Тогда
		ОткрытьФормуВыбораЗначенияАтрибута(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

	Если Поле.Имя = "ДеревоАтрибутовЗначениеПоУмолчанию"
		Или Поле.Имя = "ДеревоАтрибутовЗначениеПоУмолчаниюИдентификатор" Тогда 

		ТекущиеДанные = Элемент.ТекущиеДанные;
		Поле.ОграничениеТипа = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОписаниеТипа(ТекущиеДанные.ТипЗначенияАтрибута1С,
				ТекущиеДанные.ТипЗначенияАтрибута);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоАтрибутовПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.ДеревоАтрибутов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущееОписаниеНазначенияАтрибута = НСтр("ru = 'Назначение атрибута не задано.'");
	Иначе
		ДанныеТекущейСтрокиДереваКатегорий.Вставить("ИдентификаторАтрибутаМаркетплейса", ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);
		ДанныеТекущейСтрокиДереваКатегорий.Вставить("НаименованиеАтрибутаМаркетплейса", ТекущиеДанные.НаименованиеАтрибутаМаркетплейса);

		Если ЗначениеЗаполнено(ТекущиеДанные.ОписаниеНазначенияАтрибута) Тогда
			ШаблонОписания = НСтр("ru = 'Назначение атрибута: %1'");

			ТекущееОписаниеНазначенияАтрибута = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОписания, 
					ТекущиеДанные.ОписаниеНазначенияАтрибута);
		Иначе
			ТекущееОписаниеНазначенияАтрибута = НСтр("ru = 'Назначение атрибута не задано.'");
		КонецЕсли;
	КонецЕсли;

	ТекущееОписаниеНазначенияАтрибута = "<html><body><span style='color:grey'>" + ТекущееОписаниеНазначенияАтрибута + "</span></body></html>";

КонецПроцедуры

&НаКлиенте
Процедура ДеревоАтрибутовЗначениеПоУмолчаниюПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДеревоАтрибутов.ТекущиеДанные;
	Если ТекущиеДанные.ТипЗначенияАтрибута1С = "Строка" И Не ТекущиеДанные.ТипЗначенияАтрибута = "multiline" Тогда
		ТекущиеДанные.ЗначениеПоУмолчанию = СтрЗаменить(ТекущиеДанные.ЗначениеПоУмолчанию, Символы.ПС, " ");
	КонецЕсли;

	ЗаписьВРегистрСоответствияАтрибутов(ТекущиеДанные.ПолучитьИдентификатор());

КонецПроцедуры

&НаКлиенте
Процедура ДеревоАтрибутовЗначениеПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.ДеревоАтрибутов.ТекущиеДанные;
	Если ТекущиеДанные.ТипЗначенияАтрибута1С = "Строка" Тогда
		Многострочность = (ТекущиеДанные.ТипЗначенияАтрибута = "multiline");
		Подсказка = ТекущиеДанные.НаименованиеАтрибутаМаркетплейса;
		Оповещение = Новый ОписаниеОповещения("ЗначениеПоУмолчаниюНачалоВыбораЗавершение", ЭтотОбъект);
		ПоказатьВводСтроки(Оповещение, ТекущиеДанные.ЗначениеПоУмолчанию, Подсказка,, Многострочность);

		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоАтрибутовЗначениеПоУмолчаниюИдентификаторПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДеревоАтрибутов.ТекущиеДанные;
	ЗаписьВРегистрСоответствияАтрибутов(ТекущиеДанные.ПолучитьИдентификатор());

КонецПроцедуры

&НаКлиенте
Процедура ДеревоАтрибутовЗначениеПоУмолчаниюИдентификаторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.ДеревоАтрибутов.ТекущиеДанные;

	ЗначениеСпискаВыбора = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЗначениеСпискаВыбора = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ЗначениеПоУмолчаниюИдентификатор) Тогда
			ТекущиеДанные.ЗначениеПоУмолчанию = Неопределено;
		КонецЕсли;
	Иначе
		ТекущиеДанные.ЗначениеПоУмолчанию = ЗначениеСпискаВыбора.Представление;
		ТекущиеДанные.ЗначениеПоУмолчаниюИдентификатор = ЗначениеСпискаВыбора.Значение;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы 

&НаКлиенте
Процедура ПоказатьПодсказкуСопоставленияКатегорий(Команда)

	НеПоказыватьПодсказку = Ложь;
	УстановитьВидимостьПодсказки();

КонецПроцедуры

&НаКлиенте
Процедура СкрытьПодсказкуСопоставленияКатегорий(Команда)

	НеПоказыватьПодсказку = Истина;
	УстановитьВидимостьПодсказки();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеАтрибуты(Команда)

	ВариантОтображенияАтрибутов = "Все";
	ИзменитьВариантОтображенияАтрибутов();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОсновныеАтрибуты(Команда)

	ВариантОтображенияАтрибутов = "Основные";
	ИзменитьВариантОтображенияАтрибутов();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДополнительныеАтрибуты(Команда)

	ВариантОтображенияАтрибутов = "Дополнительные";
	ИзменитьВариантОтображенияАтрибутов();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗначение(Команда)

	ОчиститьСообщения();

	ИдентификаторСтроки = Элементы.ДеревоАтрибутов.ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущееПоле = Элементы.ДеревоАтрибутов.ТекущийЭлемент;
	Если ТекущееПоле.Имя = "ДеревоАтрибутовПредставлениеРеквизита1С" Тогда
		ОткрытьФормуВыбораРеквизита1С(ИдентификаторСтроки);
	ИначеЕсли ТекущееПоле.Имя = "ДеревоАтрибутовИнформацияОСопоставленииЗначений" Тогда
		ОткрытьФормуСопоставленияЗначенийАтрибута(ИдентификаторСтроки);
	ИначеЕсли ТекущееПоле.Имя = "ДеревоАтрибутовЗначениеПоУмолчаниюИдентификатор" Тогда
		ОткрытьФормуВыбораЗначенияАтрибута(ИдентификаторСтроки);
	ИначеЕсли ТекущееПоле.Имя = "ДеревоАтрибутовЗначениеПоУмолчанию" Тогда
		ТекущиеДанные = Элементы.ДеревоАтрибутов.ТекущиеДанные;
		ТекущееПоле.ОграничениеТипа = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОписаниеТипа(ТекущиеДанные.ТипЗначенияАтрибута1С,
				ТекущиеДанные.ТипЗначенияАтрибута);

		Элементы.ДеревоАтрибутов.ИзменитьСтроку();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗначение(Команда)

	ОчиститьСообщения();

	ТекущиеДанные = Элементы.ДеревоАтрибутов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущееПоле = Элементы.ДеревоАтрибутов.ТекущийЭлемент.Имя;
	Если ТекущееПоле = "ДеревоАтрибутовПредставлениеРеквизита1С" Тогда
		ТекущиеДанные.Реквизит1С = "";
		ТекущиеДанные.ПредставлениеРеквизита1С = "";
		ТекущиеДанные.ТипЗначенияРеквизита1С = Неопределено;
		ТекущиеДанные.ИдентификаторОбъектаМетаданных1С = Неопределено;
		ТекущиеДанные.ИнформацияОСопоставленииЗначений = "";
		ТекущиеДанные.ЗначениеПоУмолчанию = Неопределено;
		ТекущиеДанные.ЗначениеПоУмолчаниюИдентификатор = "";
		ЗаписьВРегистрСоответствияАтрибутов(ТекущиеДанные.ПолучитьИдентификатор(), Не ТекущиеДанные.ОбязательныйАтрибут);
	ИначеЕсли ТекущееПоле = "ДеревоАтрибутовЗначениеПоУмолчанию"
		Или ТекущееПоле = "ДеревоАтрибутовЗначениеПоУмолчаниюИдентификатор" Тогда

		Если Не ЗначениеЗаполнено(ТекущиеДанные.ЗначениеПоУмолчанию)
			И Не ЗначениеЗаполнено(ТекущиеДанные.ЗначениеПоУмолчаниюИдентификатор) Тогда
			Возврат;
		КонецЕсли;

		ТекущиеДанные.ЗначениеПоУмолчанию = "";
		ТекущиеДанные.ЗначениеПоУмолчаниюИдентификатор = "";
		ЗаписьВРегистрСоответствияАтрибутов(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьФорму(ПараметрыФормы, Отказ)

	ПараметрыФормы.Свойство("УчетнаяЗапись", УчетнаяЗапись);
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Шаблон = НСтр("ru = 'Не определена учетная запись. Открытие формы ""%1"" невозможно.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Заголовок);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ЭтаФорма.ТекущаяКатегория1С = Неопределено;
	ПараметрыФормы.Свойство("ТекущаяКатегория1С", ЭтаФорма.ТекущаяКатегория1С);
	Если ЗначениеЗаполнено(ЭтаФорма.ТекущаяКатегория1С) Тогда
		Если ТипЗнч(ЭтаФорма.ТекущаяКатегория1С) = Тип("СправочникСсылка.Номенклатура") Тогда
			ИсточникКатегорий = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры");
		ИначеЕсли ТипЗнч(ЭтаФорма.ТекущаяКатегория1С) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
			ИсточникКатегорий = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИсточникКатегорий) Тогда
		ИсточникКатегорий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ИсточникКатегории");
	КонецЕсли;

	Если ИсточникКатегорий = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СоответствияОбъектовМаркетплейсов.Объект1С КАК Объект1С
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|		ПО СоответствияОбъектовМаркетплейсов.Объект1С = Номенклатура.Ссылка
			|ГДЕ
			|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
			|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров)
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса = """"
			|	И НЕ Номенклатура.ЭтоГруппа";
		Результат = Запрос.Выполнить();

		ПоказыватьТовары = Не Результат.Пустой();
	КонецЕсли;

	ИзменитьТекстЗапросаДинамическогоСписка(Истина);
	ДеревоКатегорий.Параметры.УстановитьЗначениеПараметра("УчетнаяЗапись", УчетнаяЗапись);
	ДеревоКатегорий.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИсточникКатегорий", ИсточникКатегорий);

	Элементы.ДеревоКатегорий.Отображение = ?(ЗначениеЗаполнено(ЭтаФорма.ТекущаяКатегория1С), ОтображениеТаблицы.Список, ОтображениеТаблицы.Дерево);
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(ДеревоКатегорий, "Категория1С");

	Если ЗначениеЗаполнено(ЭтаФорма.ТекущаяКатегория1С) Тогда
		Элементы.ДеревоКатегорий.ТекущаяСтрока = ЭтаФорма.ТекущаяКатегория1С;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДеревоКатегорий, "Категория1С",
				ЭтаФорма.ТекущаяКатегория1С, ВидСравненияКомпоновкиДанных.Равно);
	Иначе
		Элементы.ДеревоКатегорий.ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
	ДанныеТекущейКатегории = Неопределено;
	ДанныеТекущейКатегории =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФормы, "ДанныеТекущейКатегорииМаркетплейса", ДанныеТекущейКатегории);
	ДеревоКатегорий.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ДанныеТекущейКатегории", ДанныеТекущейКатегории);

	ВариантОтображенияАтрибутов = "Все";

	ЗаголовокДереваКатегорий = НСтр("ru = 'Категории товаров:'");

	Элементы.ПодсказкаСопоставленияКатегорий.Заголовок = НСтр("ru = 'Для сопоставления категорий выполните следующие шаги:
			|Шаг 1. Для категорий 1С выполните сопоставление категориям маркетплейса. Если категория маркетплейса указана для группы категорий 1С, то данное соответствие действует и для категорий, входящих в состав этой группы, при условии, что для них не выполнено индивидуальное сопоставление.
			|Шаг 2. Для каждого соответствия категорий выполните сопоставление атрибутов маркетплейса и 1С - укажите реквизит 1С, значениями которого будет заполняться настраиваемый атрибут.
			|Шаг 3. Для атрибутов, содержащих список значений маркетплейса, заполните соответствие этих значений доступным значениям 1С.
			|Шаг 4. При необходимости для атрибута маркетплейса укажите значение по умолчанию для случая, когда у товара значение 1С для атрибута не заполнено.'");

	ПодготовитьСхемуДляПолученияАтрибутов();

	УстановитьУсловноеОформление();

	Настройки = Новый Структура;
	Настройки.Вставить("НеПоказыватьПодсказку", Ложь);

	ВосстановитьНастройки(Настройки);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);

	УстановитьВидимостьПодсказки();

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКатегорийПредставлениеКатегорииМаркетплейса.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоКатегорий.НаименованиеКатегорииМаркетплейса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Выбрать категорию>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);


	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКатегорийПредставлениеКатегорииМаркетплейса.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоКатегорий.ВладелецКатегорииМаркетплейса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоКатегорий.Категория1С");

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);


	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАтрибутовНаименованиеАтрибутаМаркетплейса.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ОбязательныйАтрибут");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);


	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАтрибутовПредставлениеРеквизита1С.Имя);

	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0; // Группа.

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ПредставлениеРеквизита1С");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Выбрать реквизит 1С>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);


	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАтрибутовИнформацияОСопоставленииЗначений.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ПредставлениеРеквизита1С");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",
			Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ПредставлениеТипаСоответствияЗначений"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);


	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАтрибутовИнформацияОСопоставленииЗначений.Имя);

	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.НомерКартинкиКоллекцииТипов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 9; // Доступен выбор значения из списка.

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ПредставлениеРеквизита1С");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Автоматически'"));


	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАтрибутовИнформацияОСопоставленииЗначений.Имя);

	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.НомерКартинкиКоллекцииТипов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 9; // Доступен выбор значения из списка.

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ПредставлениеРеквизита1С");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",
			Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ИнформацияОСопоставленииЗначений"));

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАтрибутовЗначениеПоУмолчанию.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАтрибутовЗначениеПоУмолчаниюИдентификатор.Имя);

	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ПредставлениеРеквизита1С");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ЗначениеПоУмолчанию");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",
			Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ПредставлениеТипаЗначенияПоУмолчанию"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);


	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАтрибутовЗначениеПоУмолчанию.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ДоступенВыборЗначенияИзСписка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАтрибутовЗначениеПоУмолчаниюИдентификатор.Имя);

	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ТипЗначенияАтрибута1С");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Булево";

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ДоступенВыборЗначенияИзСписка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАтрибутовЗначениеПоУмолчанию.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАтрибутовЗначениеПоУмолчаниюИдентификатор.Имя);

	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ПредставлениеРеквизита1С");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ТипЗначенияАтрибута1С");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Булево";

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАтрибутовЗначениеПоУмолчаниюИдентификатор.Имя);

	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ПредставлениеРеквизита1С");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ЗначениеПоУмолчаниюИдентификатор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",
			Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ЗначениеПоУмолчанию"));


	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъединятьТоварыВОднуКарточкуПредставлениеРеквизита1С.Имя);

	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъединятьТоварыВОднуКарточку");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъединятьТоварыВОднуКарточкуПредставлениеРеквизита1С");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);


	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъединятьТоварыВОднуКарточкуПредставлениеРеквизита1С.Имя);

	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъединятьТоварыВОднуКарточку");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъединятьТоварыВОднуКарточкуПредставлениеРеквизита1С");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки(Настройки)

	Для Каждого Настройка Из Настройки Цикл
		ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить("ИнтеграцияСOzon_СопоставлениеКатегорий_" + Настройка.Ключ);
		Если ЗначениеНастройки <> Неопределено Тогда
			Настройки[Настройка.Ключ] = ЗначениеНастройки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДействияПриЗакрытии(Параметры)

	Для Каждого Настройка Из Параметры.СохраняемыеНастройки Цикл
		ХранилищеОбщихНастроек.Сохранить("ИнтеграцияСOzon_СопоставлениеКатегорий_" + Настройка.Ключ,, Настройка.Значение);
	КонецЦикла;

	УдалитьХранилищаЗначенийАтрибутов(Параметры.ДеревоАтрибутов);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьХранилищаЗначенийАтрибутов(СтрокиАтрибутов)

	Для Каждого СтрокаАтрибута Из СтрокиАтрибутов.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(СтрокаАтрибута.АдресХранилищаДоступныхЗначений) Тогда
			Попытка
				УдалитьИзВременногоХранилища(СтрокаАтрибута.АдресХранилищаДоступныхЗначений);
			Исключение
				ОбработкаИсключенияНеТребуется = Истина;
			КонецПопытки;
		КонецЕсли;

		УдалитьХранилищаЗначенийАтрибутов(СтрокаАтрибута);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПодсказки()

	Элементы.ПодсказкаСопоставленияКатегорий.Видимость = Не НеПоказыватьПодсказку;
	Элементы.ПоказатьПодсказкуСопоставленияКатегорий.Видимость = НеПоказыватьПодсказку;
	Элементы.СкрытьПодсказкуСопоставленияКатегорий.Видимость = Не НеПоказыватьПодсказку;

КонецПроцедуры

&НаСервере
Процедура ИзменитьТекстЗапросаДинамическогоСписка(ЗаменитьИсточникКатегории = Ложь, ЗаменитьУсловие = Ложь)

	ТекстЗапроса = ДеревоКатегорий.ТекстЗапроса;

	ТекстУсловияВидыНоменклатуры = "
		|ГДЕ
		|	ДанныеИсточникаКатегорийПереопределяемый.ЭтоГруппа = Ложь
		|";

	ТекстСоединенияИерархияНоменклатуры = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииНоменклатуры КАК ВидыНоменклатуры
		|	ПО ДанныеИсточникаКатегорийПереопределяемый.КатегорияНоменклатуры = ВидыНоменклатуры.Ссылка
		|		И (ДанныеИсточникаКатегорийПереопределяемый.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас))";

	ТекстУсловияИерархияНоменклатуры1 = "
		|ГДЕ
		|	ДанныеИсточникаКатегорийПереопределяемый.ЭтоГруппа";

	ТекстУсловияИерархияНоменклатуры2 = "
		|ГДЕ
		|	ДанныеИсточникаКатегорийПереопределяемый.ЭтоГруппа 
		|	ИЛИ ВидыНоменклатуры.ТипНоменклатурыПоУмолчанию ЕСТЬ НЕ NULL";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстУсловияВидыНоменклатуры, "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстСоединенияИерархияНоменклатуры, "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстУсловияИерархияНоменклатуры2, "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстУсловияИерархияНоменклатуры1, "");

	Если ЗаменитьИсточникКатегории Тогда 
		ТекущееИмяИсточникаКатегории = ДеревоКатегорий.ОсновнаяТаблица;

		Если ИсточникКатегорий = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
			ИмяИсточникаКатегории = "Справочник.КатегорииНоменклатуры";
			ТекстЗапроса = ТекстЗапроса + ТекстУсловияВидыНоменклатуры;
			Элементы.ПоказыватьТовары.Видимость = Ложь;
		Иначе
			ИмяИсточникаКатегории = "Справочник.Номенклатура";
			ЗаменитьУсловие = Истина;
			Элементы.ПоказыватьТовары.Видимость = Истина;
		КонецЕсли;

		Если ЗаменитьИсточникКатегории Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекущееИмяИсточникаКатегории, ИмяИсточникаКатегории);
			ДеревоКатегорий.ОсновнаяТаблица = ИмяИсточникаКатегории;
		КонецЕсли;
	КонецЕсли;

	Если ЗаменитьУсловие Тогда
		Если Не ПоказыватьТовары Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстСоединенияИерархияНоменклатуры, "");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстУсловияИерархияНоменклатуры2, "");
			ТекстЗапроса = ТекстЗапроса + ТекстУсловияИерархияНоменклатуры1; 
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ", ТекстСоединенияИерархияНоменклатуры + "
					|	ЛЕВОЕ СОЕДИНЕНИЕ");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстУсловияИерархияНоменклатуры1, "");
			ТекстЗапроса = ТекстЗапроса + ТекстУсловияИерархияНоменклатуры2; 
		КонецЕсли;
	КонецЕсли;

	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ДеревоКатегорий, СвойстваСписка);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступКАтрибутуОбъединенияКарточек()

	Элементы.ОбъединятьТоварыВОднуКарточкуПредставлениеРеквизита1С.ТолькоПросмотр = Не ОбъединятьТоварыВОднуКарточку;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюПоПризнакуОбъединенияТоваровВОднуКарточку()

	Элементы.СтраницыПризнакаОбъединенияТоваровВОднуКарточку.ТекущаяСтраница = Элементы.СтраницаИнформацииОбОбъединенииТоваровВОднуКарточку;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьСхемуДляПолученияАтрибутов()

	Поля = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов();
	Результат = ИнтеграцияСМаркетплейсомOzonСервер.СоздатьСхемуКомпоновкиДанныхДляВыбораРеквизита(Поля, УникальныйИдентификатор);

	АдресСхемыАтрибутов = Результат.АдресСхемы;
	СоответствиеПсевдонимовМетаданных = Результат.СоответствиеПсевдонимовМетаданных;

	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыАтрибутов));

КонецПроцедуры

#Область ДеревоКатегорий

&НаКлиенте
Процедура УправлениеПодчиненнымиЭлементамиДляТекущейСтрокиДереваКатегорий()
	
	Если ЗначениеЗаполнено(ДанныеТекущейСтрокиДереваКатегорий.ИдентификаторКатегорииМаркетплейса) Тогда
		Категория = ДанныеТекущейСтрокиДереваКатегорий.НаименованиеКатегорииМаркетплейса;
	Иначе
		Категория = ДанныеТекущейСтрокиДереваКатегорий.Категория1С;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеТекущейСтрокиДереваКатегорий.ВладелецКатегорииМаркетплейса) Тогда
		ШаблонЗаголовка = НСтр("ru = 'Атрибуты категории маркетплейса ""%1"", указанной для группы категорий ""%2"":'");
		ЗаголовокДереваАтрибутов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка,
				Категория,
				ДанныеТекущейСтрокиДереваКатегорий.ВладелецКатегорииМаркетплейса);
	Иначе
		ШаблонЗаголовка = НСтр("ru = 'Атрибуты категории маркетплейса ""%1"":'");
		ЗаголовокДереваАтрибутов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка,
				Категория);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеТекущейСтрокиДереваКатегорий.ВладелецКатегорииМаркетплейса) Тогда
		ШаблонОписания = НСтр("ru = 'Для категории ""%1"" используется категория маркетплейса ""%2 (%3)"", установленная для группы категорий ""%4"".
				|Доступен выбор индивидуальной категории маркетплейса.'");
		ТекущееОписаниеКатегории = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОписания,
				ДанныеТекущейСтрокиДереваКатегорий.Категория1С,
				ДанныеТекущейСтрокиДереваКатегорий.НаименованиеКатегорииМаркетплейса,
				ДанныеТекущейСтрокиДереваКатегорий.ИдентификаторКатегорииМаркетплейса,
				ДанныеТекущейСтрокиДереваКатегорий.ВладелецКатегорииМаркетплейса);
	ИначеЕсли ЗначениеЗаполнено(ДанныеТекущейСтрокиДереваКатегорий.НаименованиеКатегорииМаркетплейса) Тогда
		ШаблонОписания = НСтр("ru = 'Для категории ""%1"" выбрана категория маркетплейса ""%2 (%3)"".'");
		ТекущееОписаниеКатегории = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОписания,
				ДанныеТекущейСтрокиДереваКатегорий.Категория1С,
				ДанныеТекущейСтрокиДереваКатегорий.НаименованиеКатегорииМаркетплейса,
				ДанныеТекущейСтрокиДереваКатегорий.ИдентификаторКатегорииМаркетплейса);
	Иначе
		ШаблонОписания = НСтр("ru = 'Для категории ""%1"" необходимо выбрать категорию маркетплейса.'");
		ТекущееОписаниеКатегории = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОписания,
				ДанныеТекущейСтрокиДереваКатегорий.Категория1С);
	КонецЕсли;

	ТекущееОписаниеКатегории = "<html><body><span style='color:grey'>" + ТекущееОписаниеКатегории + "</span></body></html>";

	ПоказатьИнформациюПоПризнакуОбъединенияТоваровВОднуКарточку();

КонецПроцедуры

&НаКлиенте
Процедура ВыборКатегорииЗавершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт

	Если ЗначениеВыбора <> Неопределено Тогда
		ТекущиеДанные = Элементы.ДеревоКатегорий.ТекущиеДанные;

		Если ТекущиеДанные.ИдентификаторКатегорииМаркетплейса <> ЗначениеВыбора.ИдентификаторКатегорииМаркетплейса Тогда
			ВариантОтображенияАтрибутов = "Все";
			ИзменитьВариантОтображенияАтрибутов();
		КонецЕсли;

		ТекущиеДанные.ИдентификаторКатегорииМаркетплейса = ЗначениеВыбора.ИдентификаторКатегорииМаркетплейса;
		ТекущиеДанные.НаименованиеКатегорииМаркетплейса = ЗначениеВыбора.НаименованиеКатегорииМаркетплейса;
		ТекущиеДанные.ВладелецКатегорииМаркетплейса = ТекущиеДанные.Категория1С;
		ТекущиеДанные.ПредставлениеКатегорииМаркетплейса = ТекущиеДанные.НаименованиеКатегорииМаркетплейса;

		ЗаполнитьЗначенияСвойств(ДанныеТекущейСтрокиДереваКатегорий, ТекущиеДанные);

		ДанныеЗаписи = Новый Структура;
		ДанныеЗаписи.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
		ДанныеЗаписи.Вставить("ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров"));
		ДанныеЗаписи.Вставить("ИдентификаторОбъектаМаркетплейса", ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
		ДанныеЗаписи.Вставить("НаименованиеОбъектаМаркетплейса", ТекущиеДанные.НаименованиеКатегорииМаркетплейса);
		ДанныеЗаписи.Вставить("Объект1С", ТекущиеДанные.Категория1С);

		ДобавитьЗаписьВРегистрСоответствияОбъектов(ДанныеЗаписи);
		
	    Оповестить("КатегорииПослеЗаписиСоответствия");

		ДанныеТекущейСтрокиДереваКатегорий = Неопределено;
		ДеревоКатегорийПриАктивизацииСтроки(Элементы.ДеревоКатегорий);

		Если ТекущиеДанные.ЭтоГруппа Тогда
			Элементы.ДеревоКатегорий.Обновить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьЗаписьВРегистрСоответствияОбъектов(ДанныеЗаписи)

	НаборЗаписей = РегистрыСведений.СоответствияОбъектовМаркетплейсов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(ДанныеЗаписи.УчетнаяЗаписьМаркетплейса);
	НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ДанныеЗаписи.ВидОбъектаМаркетплейса);
	НаборЗаписей.Отбор.Объект1С.Установить(ДанныеЗаписи.Объект1С);

	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, ДанныеЗаписи);
	Запись.ДатаАктуальности = ТекущаяДатаСеанса();

	НаборЗаписей.Записать();

КонецПроцедуры

#КонецОбласти

#Область ДеревоАтрибутовКатегории

&НаКлиенте
Процедура ЗаполнитьДеревоАтрибутовКатегории()

	ОчиститьСообщения();

	Если Не ЗначениеЗаполнено(ДанныеТекущейСтрокиДереваКатегорий.ИдентификаторКатегорииМаркетплейса) Тогда
		Возврат;
	КонецЕсли;

	ИдентификаторКэшаКатегории = "Категория_" + ДанныеТекущейСтрокиДереваКатегорий.ИдентификаторКатегорииМаркетплейса;
	
	ДанныеКэша = ИнтеграцияСМаркетплейсомOzonКлиент.ПолучитьДанныеИзКэшаКатегорий(ИдентификаторКэшаКатегории);

	ДлительнаяОперация = ЗаполнитьДеревоАтрибутовКатегорииНаСервере(ДанныеКэша);

	ДополнительныеПараметры = Новый Структура("ИдентификаторЗадания", ИдентификаторКэшаКатегории);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьДеревоАтрибутовКатегорииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервере
Функция ЗаполнитьДеревоАтрибутовКатегорииНаСервере(ДанныеКэша = Неопределено)

	ОчиститьДеревоАтрибутов();

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ЗаполнитьДанныеАтрибутовКатегории";
	НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Вычисление атрибутов категории ""%1""'");

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НаименованиеФоновогоЗадания,  
			ДанныеТекущейСтрокиДереваКатегорий.НаименованиеКатегорииМаркетплейса);

	ДеревоАтрибутовФормы = РеквизитФормыВЗначение("ДеревоАтрибутов");

	ПараметрыЗаполнения = ИнтеграцияСМаркетплейсомOzonСервер.ПараметрыДляЗаполненияАтрибутовКатегории();
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ЭтотОбъект);
	ПараметрыЗаполнения.ПоляСхемыКомпоновкиДанных = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов();
	ПараметрыЗаполнения.ИсточникКатегорииМаркетплейса = ДанныеТекущейСтрокиДереваКатегорий.ВладелецКатегорииМаркетплейса;
	ПараметрыЗаполнения.ИдентификаторИсточникаКатегорииМаркетплейса =
			СтрЗаменить(ДанныеТекущейСтрокиДереваКатегорий.ВладелецКатегорииМаркетплейса.УникальныйИдентификатор(), "-", "_");

	ПараметрыЗаполнения.ИдентификаторКатегорииМаркетплейса = ДанныеТекущейСтрокиДереваКатегорий.ИдентификаторКатегорииМаркетплейса;

	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода,
			ПараметрыЗаполнения, УчетнаяЗапись, ДеревоАтрибутовФормы, ДанныеКэша);

КонецФункции

&НаСервере
Процедура ОчиститьДеревоАтрибутов()

	УдалитьХранилищаЗначенийАтрибутов(ДеревоАтрибутов);

	СтрокиАтрибутов = ДеревоАтрибутов.ПолучитьЭлементы();
	СтрокиАтрибутов.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоАтрибутовКатегорииЗавершение(Результат, Параметры) Экспорт

	ОчиститьСообщения();

	Если Результат <> Неопределено И Результат.Статус = "Выполнено" Тогда
		ДанныеКэша = Неопределено;
		ЗаполнитьДеревоАтрибутовКатегорииЗавершениеНаСервере(Результат.АдресРезультата, Параметры.ИдентификаторЗадания, ДанныеКэша);

		Если ЗначениеЗаполнено(ДанныеКэша) Тогда
			ИнтеграцияСМаркетплейсомOzonКлиент.СохранитьДанныеВКэшКатегорий(ДанныеКэша, Параметры.ИдентификаторЗадания);
			ДанныеКэша = Неопределено;
		КонецЕсли;
	ИначеЕсли ЭтоЗакрытиеФормы <> Истина Тогда
		ШаблонОшибки = НСтр("ru = 'Не удалось получить атрибуты категории ""%1"" по причине: %2. Подробнее см. журнал регистрации.'");
		ПредставлениеНеизвестнойОшибки = НСтр("ru = 'Неизвестная ошибка выполнения операции'");
		ПодробноеПредставлениеОшибки = ?(Результат = Неопределено, ПредставлениеНеизвестнойОшибки, Результат.ПодробноеПредставлениеОшибки);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				ДанныеТекущейСтрокиДереваКатегорий.НаименованиеКатегорииМаркетплейса,
				ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;

	Если Параметры.ИдентификаторЗадания = ИдентификаторКэшаКатегории Тогда
		ПоказатьИнформациюПоПризнакуОбъединенияТоваровВОднуКарточку();

		Элементы.СтраницыЭлементовАтрибутовКатегории.ТекущаяСтраница = Элементы.СтраницаАтрибутов;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоАтрибутовКатегорииЗавершениеНаСервере(АдресХранилища, ИдентификаторЗадания, ДанныеКэша)

	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	УдалитьИзВременногоХранилища(АдресХранилища);

	ДанныеКэша = Результат.ДанныеКэша;

	Если ИдентификаторЗадания = ИдентификаторКэшаКатегории Тогда
		СвойстваОбъединенияТоваровВОднуКарточку = Результат.СвойстваОбъединенияТоваровВОднуКарточку;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваОбъединенияТоваровВОднуКарточку);

		ДоступноОбъединениеТоваровВОднуКарточку = СвойстваОбъединенияТоваровВОднуКарточку.ДоступноОбъединениеТоваровВОднуКарточку;
		ОбъединятьТоварыВОднуКарточкуПредставлениеРеквизита1С = СвойстваОбъединенияТоваровВОднуКарточку.ПредставлениеРеквизита1С;
		ОбъединятьТоварыВОднуКарточкуСвойства = СвойстваОбъединенияТоваровВОднуКарточку;
		ОбъединятьТоварыВОднуКарточкуПодсказка = "<html><body><span style='color:grey'>"
			+ СвойстваОбъединенияТоваровВОднуКарточку.ОписаниеНазначенияАтрибута
			+ "</span></body></html>";
		Элементы.ОбъединятьТоварыВОднуКарточку.ТолькоПросмотр = СвойстваОбъединенияТоваровВОднуКарточку.ОбязательныйАтрибут;

		Если ДоступноОбъединениеТоваровВОднуКарточку И ЗначениеЗаполнено(ОбъединятьТоварыВОднуКарточкуПредставлениеРеквизита1С)
			Или ОбъединятьТоварыВОднуКарточкуСвойства.ОбязательныйАтрибут Тогда
			ОбъединятьТоварыВОднуКарточку = Истина;
		КонецЕсли;

		ДеревоАтрибутовФормы = Результат.ДеревоАтрибутов;
		ЗначениеВРеквизитФормы(ДеревоАтрибутовФормы, "ДеревоАтрибутов");
	КонецЕсли;

	ТекстОшибки = Результат.ТекстОшибки;
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантОтображенияАтрибутов()

	Элементы.ПоказатьВсеАтрибуты.Пометка = (ВариантОтображенияАтрибутов = "Все");
	Элементы.ПоказатьОсновныеАтрибуты.Пометка = (ВариантОтображенияАтрибутов = "Основные");
	Элементы.ПоказатьДополнительныеАтрибуты.Пометка = (ВариантОтображенияАтрибутов = "Дополнительные");

	СтрокиАтрибутов = ДеревоАтрибутов.ПолучитьЭлементы();
	СтрокиАтрибутов.Очистить();

	ЗаполнитьДеревоАтрибутовКатегории();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораРеквизита1С(ИдентификаторСтроки)

	ЭтоРеквизитОбъединенияКарточек = (ИдентификаторСтроки = Неопределено);

	Если ИдентификаторСтроки <> Неопределено Тогда
		ТекущиеДанные = ДеревоАтрибутов.НайтиПоИдентификатору(ИдентификаторСтроки);

		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПолеКД = Неопределено;

	Если ЭтоРеквизитОбъединенияКарточек Тогда
		Если ЗначениеЗаполнено(ОбъединятьТоварыВОднуКарточкуСвойства.Реквизит1С) Тогда
			ПолеКД = Новый ПолеКомпоновкиДанных(ОбъединятьТоварыВОднуКарточкуСвойства.Реквизит1С);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ТекущиеДанные.Реквизит1С) И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторОбъектаМетаданных1С) Тогда
			ПолеКД = Новый ПолеКомпоновкиДанных(ТекущиеДанные.Реквизит1С); 
		КонецЕсли;
	КонецЕсли;

	ИдентификаторЭлементаСтруктурыНастроек = Неопределено;
	НастройкиФормыДляВыбораАтрибутов = Новый Структура("АдресСхемы", АдресСхемыАтрибутов);

	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("НастройкиОтчета", НастройкиФормыДляВыбораАтрибутов);
	ПараметрыВыбора.Вставить("КомпоновщикНастроек", КомпоновщикНастроек);
	ПараметрыВыбора.Вставить("Режим", "ВыбранныеПоля");
	ПараметрыВыбора.Вставить("ПолеКД", ПолеКД);
	ПараметрыВыбора.Вставить("ИдентификаторЭлементаСтруктурыНастроек", ИдентификаторЭлементаСтруктурыНастроек);
	ПараметрыВыбора.Вставить("ИсточникКатегорий", ИсточникКатегорий);
	ПараметрыВыбора.Вставить("Категория1С", ДанныеТекущейСтрокиДереваКатегорий.Категория1С);

	Если ЭтоРеквизитОбъединенияКарточек Тогда
		ПараметрыВыбора.Вставить("Атрибут", ОбъединятьТоварыВОднуКарточкуСвойства.НаименованиеАтрибута);
		ПараметрыВыбора.Вставить("ПутьКПолюКД", ОбъединятьТоварыВОднуКарточкуСвойства.Реквизит1С);
	Иначе
		ПараметрыВыбора.Вставить("Атрибут", ТекущиеДанные.НаименованиеАтрибутаМаркетплейса);
		ПараметрыВыбора.Вставить("ПутьКПолюКД", ТекущиеДанные.Реквизит1С);
	КонецЕсли;

	ПараметрыОбработчика = Новый Структура("ЭтоРеквизитОбъединенияКарточек", ЭтоРеквизитОбъединенияКарточек);
	ОбработчикВыбораАтрибута = Новый ОписаниеОповещения("ВыборРеквизитаЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	ОткрытьФорму("Обработка.МаркетплейсOzon.Форма.ВыборРеквизита1С",
			ПараметрыВыбора, ЭтотОбъект,,,, ОбработчикВыбораАтрибута);

КонецПроцедуры

&НаКлиенте
Процедура ВыборРеквизитаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДополнительныеПараметры.ЭтоРеквизитОбъединенияКарточек Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			Настройки = КомпоновщикНастроек.Настройки;
			ВариантыОтчетовСлужебныйКлиент.ДобавитьФормулу(Настройки, Настройки.ДоступныеПоляВыбора, ВыбранноеЗначение);

			ОбъединятьТоварыВОднуКарточкуПредставлениеРеквизита1С = ВыбранноеЗначение.Заголовок;
			ОбъединятьТоварыВОднуКарточкуСвойства.ПредставлениеРеквизита1С = ВыбранноеЗначение.Поле;
			ОбъединятьТоварыВОднуКарточкуСвойства.Реквизит1С = ВыбранноеЗначение.Поле;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
			ОбъединятьТоварыВОднуКарточкуПредставлениеРеквизита1С = ВыбранноеЗначение.Заголовок;
			ОбъединятьТоварыВОднуКарточкуСвойства.ПредставлениеРеквизита1С = ВыбранноеЗначение.Поле;
			ОбъединятьТоварыВОднуКарточкуСвойства.Реквизит1С = ВыбранноеЗначение.Поле;
		КонецЕсли;

		ЗаполнитьСлужебныеДанныеИЗаписатьСоответствие();
	Иначе
		ТекущиеДанные = Элементы.ДеревоАтрибутов.ТекущиеДанные;
		ПредыдущийТипЗначения = ТекущиеДанные.ТипЗначенияРеквизита1С;

		Если ТипЗнч(ВыбранноеЗначение) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			Настройки = КомпоновщикНастроек.Настройки;
			ВариантыОтчетовСлужебныйКлиент.ДобавитьФормулу(Настройки, Настройки.ДоступныеПоляВыбора, ВыбранноеЗначение);

			ТекущиеДанные.ПредставлениеРеквизита1С = ВыбранноеЗначение.Заголовок;
			ТекущиеДанные.Реквизит1С = ВыбранноеЗначение.ПолучитьВыражениеДетальныхЗаписей();
			ТекущиеДанные.ТипЗначенияРеквизита1С = Неопределено;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
			ТекущиеДанные.ПредставлениеРеквизита1С = ВыбранноеЗначение.Заголовок;
			ТекущиеДанные.Реквизит1С = ВыбранноеЗначение.Поле;
			ТекущиеДанные.ТипЗначенияРеквизита1С = ВыбранноеЗначение.ТипЗначения;
		КонецЕсли;

		Если ПредыдущийТипЗначения <> ТекущиеДанные.ТипЗначенияРеквизита1С Тогда
			ТекущиеДанные.ЗначениеПоУмолчаниюИдентификатор = "";
			ТекущиеДанные.ЗначениеПоУмолчанию = Неопределено;
		КонецЕсли;

		ЗаполнитьСлужебныеДанныеИЗаписатьСоответствие(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСопоставленияЗначенийАтрибута(ИдентификаторСтроки)

	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	Иначе
		ТекущиеДанные = ДеревоАтрибутов.НайтиПоИдентификатору(ИдентификаторСтроки);

		Если ТекущиеДанные = Неопределено
			Или Не ЗначениеЗаполнено(ТекущиеДанные.Реквизит1С)
			Или Не ТекущиеДанные.ДоступенВыборЗначенияИзСписка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыВыбора.Вставить("СоответствиеПсевдонимовМетаданных", СоответствиеПсевдонимовМетаданных);
	ПараметрыВыбора.Вставить("Реквизит1С", ТекущиеДанные.Реквизит1С);
	ПараметрыВыбора.Вставить("ТипЗначенияРеквизита1С", ТекущиеДанные.ТипЗначенияРеквизита1С);
	ПараметрыВыбора.Вставить("МножественныйВыбор", ТекущиеДанные.ЯвляетсяКоллекциейЗначений);
	ПараметрыВыбора.Вставить("НаименованиеАтрибутаМаркетплейса", ТекущиеДанные.НаименованиеАтрибутаМаркетплейса);
	ПараметрыВыбора.Вставить("АдресХранилищаДоступныхЗначений", ТекущиеДанные.АдресХранилищаДоступныхЗначений);

	ПараметрыАтрибута = ПараметрыЗапросаЗначенийАтрибутов(ИдентификаторСтроки);
	ПараметрыВыбора.Вставить("ПараметрыАтрибута", ПараметрыАтрибута);

	ОбработчикСопоставленияЗначений = Новый ОписаниеОповещения("СопоставлениеЗначенийЗавершение", ЭтотОбъект, ИдентификаторСтроки);
	ОткрытьФорму("Обработка.МаркетплейсOzon.Форма.СопоставлениеЗначений",
			ПараметрыВыбора, ЭтотОбъект,,,, ОбработчикСопоставленияЗначений);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияАтрибута(ИдентификаторСтроки);

	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	Иначе
		ТекущиеДанные = ДеревоАтрибутов.НайтиПоИдентификатору(ИдентификаторСтроки);

		Если ТекущиеДанные = Неопределено
			Или Не ЗначениеЗаполнено(ТекущиеДанные.Реквизит1С)
			Или Не ТекущиеДанные.ДоступенВыборЗначенияИзСписка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыВыбора.Вставить("ИдентификаторКатегорииМаркетплейса", ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
	ПараметрыВыбора.Вставить("ИдентификаторАтрибутаМаркетплейса", ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);
	ПараметрыВыбора.Вставить("НаименованиеАтрибутаМаркетплейса", ТекущиеДанные.НаименованиеАтрибутаМаркетплейса);
	ШаблонОписания = НСтр("ru = 'Выбор значения маркетплейса по умолчанию для атрибута <%1>'");
	ПараметрыВыбора.Вставить("Описание",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписания, ТекущиеДанные.НаименованиеАтрибутаМаркетплейса));
	ПараметрыВыбора.Вставить("ТекущееЗначениеАтрибута", ТекущиеДанные.ЗначениеПоУмолчанию); 
	ПараметрыВыбора.Вставить("ИдентификаторТекущегоЗначенияАтрибута", ТекущиеДанные.ЗначениеПоУмолчаниюИдентификатор);
	ПараметрыВыбора.Вставить("АдресХранилищаДоступныхЗначений", ТекущиеДанные.АдресХранилищаДоступныхЗначений);

	ОбработчикВыбораЗначения = Новый ОписаниеОповещения("ВыборЗначенияЗавершение", ЭтотОбъект, ИдентификаторСтроки);
	ОткрытьФорму("Обработка.МаркетплейсOzon.Форма.ВыборЗначенияМаркетплейса",
			ПараметрыВыбора, ЭтотОбъект,,,, ОбработчикВыбораЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.ДеревоАтрибутов.ТекущиеДанные;
	ТекущиеДанные.ЗначениеПоУмолчаниюИдентификатор = ВыбранноеЗначение.ИдентификаторЗначенияАтрибута;
	ТекущиеДанные.ЗначениеПоУмолчанию = ВыбранноеЗначение.ЗначениеАтрибута;
	ТекущиеДанные.АдресХранилищаДоступныхЗначений = ВыбранноеЗначение.АдресХранилищаДоступныхЗначений;

	ЗаписьВРегистрСоответствияАтрибутов(ТекущиеДанные.ПолучитьИдентификатор());

КонецПроцедуры

&НаСервере
Функция ПараметрыЗапросаЗначенийАтрибутов(ИдентификаторСтроки)

	ПараметрыАтрибута = ИнтеграцияСМаркетплейсомOzonСервер.ПараметрыЗапросаЗначенийАтрибутов();
	ПараметрыАтрибута.ИдентификаторКатегории1С = СтрЗаменить(ДанныеТекущейСтрокиДереваКатегорий.Категория1С.УникальныйИдентификатор(), "-", "_");

	Если ИдентификаторСтроки <> Неопределено Тогда
		ТекущиеДанные = ДеревоАтрибутов.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(ПараметрыАтрибута, ТекущиеДанные);  
	КонецЕсли;

	Возврат ПараметрыАтрибута;

КонецФункции

&НаСервере
Процедура ЗаписьВРегистрСоответствияАтрибутов(ДанныеСтроки, ЭтоУдалениеЗаписи = Ложь)

	Если ТипЗнч(ДанныеСтроки) = Тип("Число") Тогда
		ТекущиеДанные = ДеревоАтрибутов.НайтиПоИдентификатору(ДанныеСтроки);
	Иначе
		ТекущиеДанные = ДанныеСтроки;
	КонецЕсли;

	МенеджерЗаписи = РегистрыСведений.СоответствияАтрибутовМаркетплейсов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекущиеДанные);
	МенеджерЗаписи.Категория1С = ДанныеТекущейСтрокиДереваКатегорий.ВладелецКатегорииМаркетплейса;
	МенеджерЗаписи.ИдентификаторКатегории1С =
			СтрЗаменить(ДанныеТекущейСтрокиДереваКатегорий.ВладелецКатегорииМаркетплейса.УникальныйИдентификатор(), "-", "_");
	МенеджерЗаписи.ИдентификаторЗначенияПоУмолчанию = ТекущиеДанные.ЗначениеПоУмолчаниюИдентификатор;
	МенеджерЗаписи.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;

	Если ЭтоУдалениеЗаписи Тогда
		МенеджерЗаписи.Удалить();
	Иначе
		МенеджерЗаписи.ПолныйПутьКРеквизиту1С =  ТекущиеДанные.Реквизит1С;
		МенеджерЗаписи.ДатаАктуальности = ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеЗначенийЗавершение(Результат, ИдентификаторСтроки) Экспорт

	ЗаполнитьИнформациюОСопоставленииЗначенийАтрибута(ИдентификаторСтроки);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОСопоставленииЗначенийАтрибута(ИдентификаторСтроки)

	ТекущиеДанные = ДеревоАтрибутов.НайтиПоИдентификатору(ИдентификаторСтроки); 

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИнтеграцияСМаркетплейсомOzonСервер.ЗаполнитьИнформациюОСопоставленииЗначенийАтрибута(ТекущиеДанные,
			УчетнаяЗапись, СоответствиеПсевдонимовМетаданных);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеДанныеИЗаписатьСоответствие(ИдентификаторСтроки = Неопределено)

	Если ИдентификаторСтроки = Неопределено Тогда 
		ТекущиеДанные = ПолучитьСлужебныеДанныеРеквизита(ОбъединятьТоварыВОднуКарточкуСвойства.Реквизит1С);
		ТекущиеДанные.Вставить("Реквизит1С", ОбъединятьТоварыВОднуКарточкуСвойства.Реквизит1С);
		ТекущиеДанные.Вставить("ПредставлениеРеквизита1С", ОбъединятьТоварыВОднуКарточкуСвойства.ПредставлениеРеквизита1С);
		ТекущиеДанные.Вставить("ОбязательныйАтрибут", ОбъединятьТоварыВОднуКарточкуСвойства.ОбязательныйАтрибут);
		ТекущиеДанные.Вставить("ИдентификаторКатегорииМаркетплейса", ДанныеТекущейСтрокиДереваКатегорий.ИдентификаторКатегорииМаркетплейса);
		ТекущиеДанные.Вставить("ИдентификаторАтрибутаМаркетплейса", ОбъединятьТоварыВОднуКарточкуСвойства.ИдентификаторАтрибута);
		ТекущиеДанные.Вставить("Категория1С", ДанныеТекущейСтрокиДереваКатегорий.ВладелецКатегорииМаркетплейса);
		ТекущиеДанные.Вставить("НаименованиеАтрибутаМаркетплейса", ОбъединятьТоварыВОднуКарточкуСвойства.НаименованиеАтрибута);
		ТекущиеДанные.Вставить("ТипЗначенияАтрибута", ОбъединятьТоварыВОднуКарточкуСвойства.ТипЗначенияАтрибута);
		ТекущиеДанные.Вставить("ОписаниеНазначенияАтрибута", ОбъединятьТоварыВОднуКарточкуСвойства.ОписаниеНазначенияАтрибута);
		ТекущиеДанные.Вставить("ЗначениеПоУмолчаниюИдентификатор", "");

		ЗаписьВРегистрСоответствияАтрибутов(ТекущиеДанные);
	Иначе
		ТекущиеДанные = ДеревоАтрибутов.НайтиПоИдентификатору(ИдентификаторСтроки);

		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;

		СлужебныеДанные = ПолучитьСлужебныеДанныеРеквизита(ТекущиеДанные.Реквизит1С);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СлужебныеДанные);

		ЗаписьВРегистрСоответствияАтрибутов(ТекущиеДанные);

		ИнтеграцияСМаркетплейсомOzonСервер.ЗаполнитьИнформациюОСопоставленииЗначенийАтрибута(ТекущиеДанные,
				УчетнаяЗапись, СоответствиеПсевдонимовМетаданных);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСлужебныеДанныеРеквизита(Реквизит1С)

	СлужебныеДанные = Новый Структура("ИдентификаторОбъектаМетаданных1С, ДополнительноеСвойство");
	СлужебныеДанные.Вставить("ЭтоДополнительноеСведение", Ложь);

	Если ЗначениеЗаполнено(Реквизит1С) Тогда
		МассивСтрок = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ЧастиПутиКПолю(Реквизит1С);
		ДанныеПоля = ИнтеграцияСМаркетплейсомOzonСервер.ДанныеПоляСхемыДляПолученияРеквизитовАтрибутов(МассивСтрок[0]);
		ИмяМетаданных = ДанныеПоля.ИмяМетаданных;
		ТипМетаданных = Неопределено;

		ОписаниеТиповМетаданных = ДанныеПоля.ТипЗначенияПоля;
		ТипыМетаданных = ОписаниеТиповМетаданных.Типы();
		Если ТипыМетаданных.Количество() > 0 Тогда
			ТипМетаданных = ТипыМетаданных[0];
		КонецЕсли;

		Если МассивСтрок.Количество() > 1 Тогда
			ЗаполнитьДополнительноеСвойство(СлужебныеДанные, МассивСтрок[1], ИмяМетаданных);

			Если ЗначениеЗаполнено(СлужебныеДанные.ДополнительноеСвойство) И СлужебныеДанные.ЭтоДополнительноеСведение Тогда
				ТипМетаданных = Тип("РегистрСведенийНаборЗаписей.ДополнительныеСведения");
			КонецЕсли;
		КонецЕсли;

		СлужебныеДанные.ИдентификаторОбъектаМетаданных1С =
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипМетаданных, Ложь);
	КонецЕсли;

	Возврат СлужебныеДанные;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДополнительноеСвойство(Данные, ПредставлениеДополнительногоСвойства, ИмяМетаданных)

	Данные.ДополнительноеСвойство = Неопределено;

	Если СтрНайти(ПредставлениеДополнительногоСвойства, "[") = 0 Тогда
		Возврат;
	КонецЕсли;

	ИмяПредопределенногоНабора = "Справочник_" + ИмяМетаданных;

	ПозицияПоиска = 1;
	Пока Истина Цикл
		РезультатПоиска = СтрНайти(ПредставлениеДополнительногоСвойства, "(", , ПозицияПоиска);

		Если РезультатПоиска = 0 Тогда
			Прервать;
		КонецЕсли;

		ПозицияПоиска = РезультатПоиска + 1;
	КонецЦикла;

	ЗаголовокСвойства = СтрЗаменить(СокрЛП(Лев(ПредставлениеДополнительногоСвойства, ПозицияПоиска - 2)), "[", "");

	ПредставлениеСвойства = СтрЗаменить(ПредставлениеДополнительногоСвойства, "[","");
	ПредставлениеСвойства = СтрЗаменить(ПредставлениеСвойства, "]","");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяПредопределенногоНабора", ИмяПредопределенногоНабора);
	Запрос.УстановитьПараметр("ЗаголовокСвойства", ЗаголовокСвойства);
	Запрос.УстановитьПараметр("ПредставлениеСвойства", ПредставлениеСвойства);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК НаборСвойств
		|ПОМЕСТИТЬ НаборыСвойств
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенногоНабора = &ИмяПредопределенногоНабора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Данные.Ссылка КАК ДополнительноеСвойство,
		|	Данные.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение,
		|	ПРЕДСТАВЛЕНИЕ(Данные.Ссылка) КАК ПредставлениеСвойства
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Данные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборыСвойств КАК НаборыСвойств
		|		ПО Данные.НаборСвойств.Родитель = НаборыСвойств.НаборСвойств
		|ГДЕ
		|	Данные.Заголовок = &ЗаголовокСвойства
		|	И Данные.НаборСвойств <> ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Данные.Ссылка,
		|	Данные.Ссылка.ЭтоДополнительноеСведение,
		|	ПРЕДСТАВЛЕНИЕ(Данные.Ссылка)
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК Данные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборыСвойств КАК НаборыСвойств
		|		ПО Данные.НаборСвойств.Родитель = НаборыСвойств.НаборСвойств
		|ГДЕ
		|	Данные.Ссылка.Заголовок = &ПредставлениеСвойства
		|	И Данные.Ссылка.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НаборыСвойств";

	ВыборкаСвойств = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСвойств.Следующий() Цикл
		Если "[" + ВыборкаСвойств.ПредставлениеСвойства + "]" = ПредставлениеДополнительногоСвойства Тогда
			Данные.ДополнительноеСвойство = ВыборкаСвойств.ДополнительноеСвойство;
			Данные.ЭтоДополнительноеСведение = ВыборкаСвойств.ЭтоДополнительноеСведение;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоУмолчаниюНачалоВыбораЗавершение(Значение, ДополнительныеПараметры = Неопределено) Экспорт

	ТекущиеДанные = Элементы.ДеревоАтрибутов.ТекущиеДанные;
	ТекущиеДанные.ЗначениеПоУмолчанию = Значение;
	ДеревоАтрибутовЗначениеПоУмолчаниюПриИзменении(Элементы.ДеревоАтрибутовЗначениеПоУмолчанию);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
