#Область ОписаниеПеременных

&НаКлиенте
Перем ЗапущеноЗаданиеОбновленияСкладов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("УчетнаяЗапись") И ЗначениеЗаполнено( Параметры.УчетнаяЗапись ) Тогда
		ЗначениеВРеквизитФормы( Параметры.УчетнаяЗапись.ПолучитьОбъект(), "Объект" );
	КонецЕсли;

	РазделениеВключено = РаботаВМоделиСервиса.РазделениеВключено();
	НастроитьРасписаниеРегламентногоЗадания = НСтр("ru = 'Настроить расписание регламентного задания'");
	УчетнаяЗапись = Объект.Ссылка;

	ФормаЭлементыОтборыУстановить(УчетнаяЗапись);
	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗапись);
	НастройкиУчетнойЗаписи.ВидыЦен.Свойство("ВидЦеныДоСкидок", ВидЦеныДоСкидок);
	НастройкиУчетнойЗаписи.ВидыЦен.Свойство("ВидЦеныСУчетомСкидок", ВидЦеныСУчетомСкидок);
	НастройкиУчетнойЗаписи.ВидыЦен.Свойство("ВидЦеныМинимальныхЦен", ВидЦеныМинимальныхЦен);

	Если СостояниеНастроек.Количество() = 0 Тогда
		ДобавитьНастройкиСоздания();
	КонецЕсли;
    
    Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
    	ТекПользователь = Пользователи.ТекущийПользователь();
		ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнаяОрганизация");
		Если НЕ ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
			ОсновнаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
		Объект.Организация = ОсновнаяОрганизация;
	КонецЕсли;

	ЭтаФорма.ШрифтыИзЭлементовСтиля = ШрифтыЭлементовСтиляПолучить();

	ЭтаФорма.ЯндексДанныеПриложенияВХранилище = ИнтеграцияСМаркетплейсомOzonСервер.ЯндексПроверитьДанныеАвторизацииПомещеныВХранилище(УчетнаяЗапись);
	ЭтаФорма.OzonДанныеАвторизацииЗаписаны = ИнтеграцияСМаркетплейсомOzonСервер.OzonПроверитьДанныеАвторизацииПомещеныВХранилище(УчетнаяЗапись);
	
	ОбновитьОтображениеНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ФормаЭлементыОтборыУстановить(УчетнаяЗапись)

	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("ОписаниеНоменклатура", НСтр("ru = 'Номенклатура'"));
	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("ОписаниеГруппаНоменклатуры", НСтр("ru = 'Группа номенклатуры'"));
	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("ОписаниеВидНоменклатуры", НСтр("ru = 'Вид номенклатуры'"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РегистрОграничениеОстатка, "УчетнаяЗаписьМаркетплейса",
				УчетнаяЗапись, ВидСравненияКомпоновкиДанных.Равно);
	
	
	Товары.Параметры.УстановитьЗначениеПараметра("УчетнаяЗапись", УчетнаяЗапись);
	ПостфиксУстаревшейКатегории = ИнтеграцияСМаркетплейсомOzonСервер.ПостфиксНеиспользуемойКатегории();
	Товары.Параметры.УстановитьЗначениеПараметра("ПризнакУстаревшейКатегории", ПостфиксУстаревшейКатегории);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОтображениеНаКлиенте();
	
	Если Объект.НастройкаЗавершена Тогда
		ПоказатьСтраницуТовары();
	КонецЕсли;
	
	ЗапущеноЗаданиеОбновленияСкладов = Ложь;
	
	ПоказатьВсе(Элементы.ПоказатьВсе);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЯндексПроверитьДанныеАвторизацииПомещеныВХранилище( УчетнаяЗапись )
	Возврат ИнтеграцияСМаркетплейсомOzonСервер.ЯндексПроверитьДанныеАвторизацииПомещеныВХранилище(УчетнаяЗапись);
КонецФункции

&НаСервереБезКонтекста
Функция OzonПроверитьДанныеАвторизацииПомещеныВХранилище( УчетнаяЗапись )
	Возврат ИнтеграцияСМаркетплейсомOzonСервер.OzonПроверитьДанныеАвторизацииПомещеныВХранилище(УчетнаяЗапись);
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ЗаполнитьТоварыИзХранилища(Параметр);
		Элементы.Товары.Обновить();
	ИначеЕсли ИмяСобытия = "ЯндексАвторизация" Тогда
		УчетнаяЗапись = Объект.Ссылка;
		ЭтаФорма.ЯндексДанныеПриложенияВХранилище = ЯндексПроверитьДанныеАвторизацииПомещеныВХранилище( УчетнаяЗапись );
	ИначеЕсли ИмяСобытия = "ОбновитьСписокПодключений" Тогда
		УчетнаяЗапись = Объект.Ссылка;
		ЭтаФорма.OzonДанныеАвторизацииЗаписаны = OzonПроверитьДанныеАвторизацииПомещеныВХранилище( УчетнаяЗапись );
	ИначеЕсли ИмяСобытия = "КатегорииПослеЗаписиСоответствия" Тогда
		ОбновитьОтображениеНаСервереКатегорииДополнение();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ДобавитьНастройкиСоздания()
	
	СостояниеНастроек.Очистить();
	
	Если Объект.Ссылка.Пустая() Тогда
		Статус = 0;
	Иначе
		Статус = 2;
	КонецЕсли;
	ДобавитьНастройку("Приветствие", 2);
	ДобавитьНастройку("Дополнительно", 2);
	ДобавитьНастройку("Склады", Статус);
	ДобавитьНастройку("Цены", Статус);
	ДобавитьНастройку("Товары", Статус);
	ДобавитьНастройку("Расписания", Статус);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	ИмяТабличнойЧасти = "Товары";
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить( "КнопкаПеренестиВДокументЗаголовок", НСтр( "ru = 'Добавить в настройку Ozon'" ) );
	
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьНастройку(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",1);
	Элементы.КнопкаНачатьНастройку.КнопкаПоУмолчанию = Ложь;
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзменения(Команда)
	ЗаписатьИзмененияНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПриветствиеКартинкаНажатие(Элемент)
	ПоказатьСтраницуПриветствие();
КонецПроцедуры

&НаКлиенте
Процедура ПриветствиеНадписьНажатие(Элемент)
	ПоказатьСтраницуПриветствие();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительноНадписьНажатие(Элемент)
	ПоказатьСтраницуДополнительно();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительноКартинкаНажатие(Элемент)
	ПоказатьСтраницуДополнительно();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКартинкаНажатие(Элемент)
	ПоказатьСтраницуТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНадписьНажатие(Элемент)
	ПоказатьСтраницуТовары();
КонецПроцедуры

&НаКлиенте
Процедура ЦеныКартинкаНажатие(Элемент)
	ПоказатьСтраницуЦены();
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНадписьНажатие(Элемент)
	ПоказатьСтраницуЦены();
КонецПроцедуры

&НаКлиенте
Процедура СкладыНадписьНажатие(Элемент)
	ПоказатьСтраницуСклады();
КонецПроцедуры

&НаКлиенте
Процедура СкладыКартинкаНажатие(Элемент)
	ПоказатьСтраницуСклады();
КонецПроцедуры

&НаКлиенте
Процедура ПомощьКартинкаНажатие(Элемент)
	
	ОткрытьИнструкцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощьНадписьНажатие(Элемент)
	
	ОткрытьИнструкцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьВозможностьНажатие(Элемент)
	
	ТекстДляПисьма = НСтр("ru = 'Опишите, каких возможностей не хватает для приложения ""Ozon"":'");
	Тег = НСтр("ru = 'Ozon'");
	
	УправлениеНебольшойФирмойКлиент.ПредложитьВозможностьНажатие(Тег, ТекстДляПисьма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзмененияИЗакрыть(Команда)
	ЗаписатьИзмененияНаКлиенте();
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


&НаСервере
Процедура ДобавитьНастройку(ИмяСтраницы, Статус)
	
	МассивСтрок = СостояниеНастроек.НайтиСтроки(Новый Структура("ИмяСтраницы", ИмяСтраницы));
	
	Если МассивСтрок.Количество() Тогда
		ТекНастройка = МассивСтрок[0];
	Иначе
		ТекНастройка = СостояниеНастроек.Добавить();
	КонецЕсли;
	
	ТекНастройка.ИмяСтраницы = ИмяСтраницы;
	ТекНастройка.Статус = Статус;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеНаСервереКатегорииДополнение()

	СопоставлениеКатегорийТоваровКоличество = ИнтеграцияСМаркетплейсомOzonСервер.СопоставлениеКатегорийТоваровКоличество( Объект.Ссылка );

	Если СопоставлениеКатегорийТоваровКоличество = 0 Тогда
		Элементы.КатегорииДополнение.Заголовок = НСтр("ru = 'Категории не настроены.'" );
		Элементы.КатегорииДополнение.ЦветФона = ЦветаСтиля.РозоваяПодсветкаВажныхСтрок;
	Иначе
		Элементы.КатегорииДополнение.Заголовок = НСтр( "ru = 'Сопоставлено:'" ) + " " + СопоставлениеКатегорийТоваровКоличество;
		Элементы.КатегорииДополнение.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеНаСервере()
	
	Элементы.ГруппаКоманднаяПанель.Видимость = Объект.НастройкаЗавершена;
	
	ОбновитьОтображениеНаСервереКатегорииДополнение();
	
	Если Объект.НастройкаЗавершена Тогда
		Для Каждого Стр Из Объект.СостояниеНастроек Цикл
			Попытка
				ЭлементСтраницы = Элементы["СтраницыЭтапыНастройки" + Стр.ИмяСтраницы];
			Исключение
				Продолжить;
			КонецПопытки;
			ЭлементСтраницы.ТекущаяСтраница = Элементы["Страница" + Стр.ИмяСтраницы + "2"];
			Элементы["ГруппаНижнееМеню" + Стр.ИмяСтраницы].Видимость = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ДобавитьНастройкуНаНаСервере("Приветствие",1);
		ДобавитьНастройкуНаНаСервере("Дополнительно");
		ДобавитьНастройкуНаНаСервере("Склады");
		ДобавитьНастройкуНаНаСервере("Цены");
		ДобавитьНастройкуНаНаСервере("Товары");
		ДобавитьНастройкуНаНаСервере("Расписания");
	Иначе
		НастроитьРасписаниеРегламентногоЗадания = ПолучитьРасписаниеРегламентногоЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНастройкуНаНаСервере(ИмяСтраницы, Статус = 0)
	
	МассивСтрок = Объект.СостояниеНастроек.НайтиСтроки(Новый Структура("ИмяСтраницы", ИмяСтраницы));
	
	Если МассивСтрок.количество() Тогда
		ТекНастройка = МассивСтрок[0];
	Иначе
		ТекНастройка = Объект.СостояниеНастроек.Добавить();
	КонецЕсли;
	
	ТекНастройка.ИмяСтраницы = ИмяСтраницы;
	ТекНастройка.Статус = Статус;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ШрифтыЭлементовСтиляПолучить()
	Шрифты = Новый Структура;
	Шрифты.Вставить( "Обычный", ШрифтыСтиля.ОбычныйШрифтТекста );
	Шрифты.Вставить( "Полужирный", ШрифтыСтиля.НадписьШрифтПолужирный8 );
	Возврат Шрифты; 
КонецФункции

&НаКлиенте
Процедура ОбновитьОтображениеНаКлиенте()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		
		ЕстьПереходПоСтранице = Ложь;
		Для Каждого Стр Из Объект.СостояниеНастроек Цикл
			
			Элементы["СтраницыЭтапыНастройки" + Стр.ИмяСтраницы].ТекущаяСтраница = Элементы["Страница" + Стр.ИмяСтраницы + Стр.Статус];
			
			Если Стр.Статус = 1 Тогда
				ЕстьПереходПоСтранице = Истина;
				Элементы.СтраницыПунктыМеню.ТекущаяСтраница = Элементы["Страница" + Стр.ИмяСтраницы];
				Элементы["" + Стр.ИмяСтраницы + "Надпись"].Шрифт = ЭтаФорма.ШрифтыИзЭлементовСтиля.Полужирный;
			Иначе
				Элементы["" + Стр.ИмяСтраницы + "Надпись"].Шрифт = ЭтаФорма.ШрифтыИзЭлементовСтиля.Обычный;
			КонецЕсли;
			
			Элементы["" + Стр.ИмяСтраницы + "Пункт"].Доступность = (Стр.Статус <> 0);
			
		КонецЦикла;
		
		Если Не ЕстьПереходПоСтранице Тогда
			Объект.НастройкаЗавершена = Истина;
			Записать();
			ОбновитьОтображениеНаСервере();
		КонецЕсли;
	КонецЕсли;

	Если Объект.НастройкаЗавершена Тогда
		Элементы.ФормаЗаписатьИзмененияИЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНастройкуНаКлиенте(ИмяСтраницы, Статус = 0)
	
	МассивСтрок = Объект.СостояниеНастроек.НайтиСтроки(Новый Структура("ИмяСтраницы", ИмяСтраницы));
	
	Если МассивСтрок.количество() Тогда
		ТекНастройка = МассивСтрок[0];
	Иначе
		ТекНастройка = Объект.СостояниеНастроек.Добавить();
	КонецЕсли;
	
	ТекНастройка.ИмяСтраницы = ИмяСтраницы;
	ТекНастройка.Статус = Статус;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборТоваровПоМаркеру(Поле, Значение, ИмяКоманды)

	ИдентификаторОтбора = "ОтборПоМаркеру";

	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Товары,, ИдентификаторОтбора);
	
	Если ЗначениеЗаполнено( Поле ) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Товары,
			Поле,
			Значение,
			ВидСравненияКомпоновкиДанных.Равно,
			ИдентификаторОтбора,,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;

	ОбновитьКнопкуОтбораПоСтатусу(ИмяКоманды);

КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкуОтбораПоСтатусу(ИмяКоманды)

	Команда = Команды.Найти(ИмяКоманды);
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.ОтборПоМаркерам.Заголовок = Команда.Заголовок;
	Элементы.ОтборПоМаркерам.Картинка = Команда.Картинка;

КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоМаркеруВПроцессе(Команда)
	УстановитьОтборТоваровПоМаркеру("МаркерСтатуса", 1, Команда.Имя);	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоМаркеруОшибка(Команда)
	УстановитьОтборТоваровПоМаркеру("МаркерСтатуса", 0, Команда.Имя);	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоМаркеруГотовы(Команда)
	УстановитьОтборТоваровПоМаркеру("МаркерСтатуса", 3, Команда.Имя);	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоМаркеруВАрхиве(Команда)
	УстановитьОтборТоваровПоМаркеру("МаркерСтатуса", 2, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоМаркеруИзмененыРеквизиты(Команда)
	УстановитьОтборТоваровПоМаркеру("ИзмененыРеквизиты", Истина, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсе(Команда)
	УстановитьОтборТоваровПоМаркеру("", "", Команда.Имя);	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыИзХранилища(АдресЗапасовВХранилище)
	
	УчетнаяЗапись = Объект.Ссылка;
	
	ПодобранныеТовары = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Если НЕ (ТипЗнч(ПодобранныеТовары) = Тип("ТаблицаЗначений")
		ИЛИ ТипЗнч(ПодобранныеТовары) = Тип("Массив")) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодобранныеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;


	ТаблицаТоваров = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаПубликацииТоваров();

	Для Каждого СтрокаТовара Из ПодобранныеТовары Цикл
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
	КонецЦикла;


	ИнтеграцияСМаркетплейсомOzonСервер.ОбработкаВыбораПодбор(ТаблицаТоваров, УчетнаяЗапись);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияНаСервере()
	ЭтаФорма.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзмененияНаКлиенте()
	ЗаписатьИзмененияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуСРезультатамиАвторизации(АвторизацияУспешна)
	
	Если АвторизацияУспешна Тогда
		СообщениеТекст = НСтр("ru = 'Авторизация пройдена успешно.'");
	Иначе
		СообщениеТекст = НСтр("ru = 'Ошибка авторизации. Подробности см. в журнале регистрации или лог.'");
	КонецЕсли;
	ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуДополнительно() 
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Дополнительно");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуПриветствие()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Приветствие");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПризнакПоПунктуНаКлиенте(ИмяПункта)
	
	Для Каждого Стр Из СостояниеНастроек Цикл
		
		Если Стр.Статус = 2 Тогда
			СтатусДляОтображения = "0";
		Иначе
			СтатусДляОтображения = Стр.Статус;
		КонецЕсли;	
	
		Элементы["СтраницыЭтапыНастройки" + Стр.ИмяСтраницы].ТекущаяСтраница = Элементы["Страница" + Стр.ИмяСтраницы + СтатусДляОтображения];
		Элементы["" + Стр.ИмяСтраницы + "Надпись"].Шрифт = ЭтаФорма.ШрифтыИзЭлементовСтиля.Обычный;
	КонецЦикла;
	
	Элементы["СтраницыЭтапыНастройки" + ИмяПункта].ТекущаяСтраница = Элементы["Страница" + ИмяПункта + "1"];
	
	Элементы["" + ИмяПункта + "Надпись"].Шрифт = ЭтаФорма.ШрифтыИзЭлементовСтиля.Полужирный;
	
	Элементы.СтраницыПунктыМеню.ТекущаяСтраница = Элементы["Страница" + ИмяПункта];
	
	Если ИмяПункта = "Товары" Тогда
		Элементы.Товары.Обновить();
	ИначеЕсли ИмяПункта = "Склады" Тогда
		Если ЭтаФорма.ТаблицаСкладов.Количество() = 0 Тогда
			ОбновитьСписокСкладов();
		КонецЕсли;
	ИначеЕсли ИмяПункта = "СтатусыТовара" Тогда
		Элементы.УтверждениеАссортимента.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуТовары()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуЦены()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Цены");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуСклады()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Склады");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуРасписания()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Расписания");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструкцию()

	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://its.1c.ru/db/metod81#content:8050:hdoc");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСопоставлениеКатегорий(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗапись", Объект.Ссылка);
	ОткрытьФорму("Обработка.МаркетплейсOzon.Форма.СопоставлениеКатегорий", ПараметрыФормы, ЭтотОбъект.УникальныйИдентификатор );

КонецПроцедуры

&НаКлиенте
Процедура КнопкаЛогОткрыть(Команда)
  	ПараметрыФормы = Новый Структура( "УчетнаяЗапись", Объект.Ссылка );
	ОткрытьФорму( "РегистрСведений.ОбменСВнешнимиСистемамиЛогирование.ФормаСписка", ПараметрыФормы );
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОстаткиТоваровМаркетплейсовОткрыть(Команда)
	ОткрытьФорму( "РегистрСведений.ОстаткиТоваровМаркетплейсов.ФормаСписка" );
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСоответствияАтрибутовМаркетплейсовФормаСписка(Команда)
	ОткрытьФорму( "РегистрСведений.СоответствияАтрибутовМаркетплейсов.ФормаСписка" );
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСортировкаФайловДляСайтаФормаСписка(Команда)
	ОткрытьФорму( "РегистрСведений.СортировкаФайловДляСайта.ФормаСписка" );
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьТоварныйКаталогРегламентнымЗаданиемНаСервере( УчетнаяЗапись, УникальныйИдентификатор )

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Выполнить обновление товарного каталога.'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ОбновитьТоварныйКаталогРегламентнымЗаданием";
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, УчетнаяЗапись);
	
КонецФункции

&НаКлиенте
Процедура КнопкаОбновитьТоварныйКаталогРегламентнымЗаданием(Команда)
	
	Отказ = Истина;
	УчетнаяЗапись = Объект.Ссылка;

	Если УчетнаяЗапись.Пустая() Тогда
		Возврат;
	КонецЕсли;

	ПоказатьОповещениеПользователя(
	НСтр("ru = 'Начало обновления товарного каталога'"),,
	НСтр("ru = 'Запущено фоновое обновление товарного каталога.'"),
	БиблиотекаКартинок.ЛоготипOzon1);

	ОчиститьСообщения();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Окончание обновления товарного каталога'");
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Завершено фоновое обновление товарного каталога.'");
	ПараметрыОжидания.ОповещениеПользователя.Картинка = БиблиотекаКартинок.ЛоготипOzon1;

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьДанныеФормыПослеВыполненияФоновогоЗадания", ЭтаФорма);
	ДлительнаяОперация = ОбновитьТоварныйКаталогРегламентнымЗаданиемНаСервере(УчетнаяЗапись, УникальныйИдентификатор);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСкладов()

	ОчиститьСообщения();

	ТаблицаСкладов.Очистить();

	УчетнаяЗапись = Объект.Ссылка;
	
	Если УчетнаяЗапись.Пустая() Тогда
		ЗапущеноЗаданиеОбновленияСкладов = Ложь;
		Элементы.ДекорацияДлительноеОжидание.Видимость = Ложь;

		ЕстьВиртуальныеСклады = Ложь;
		Возврат;
	КонецЕсли;

	Если Не ЗапущеноЗаданиеОбновленияСкладов Тогда
		Элементы.ДекорацияДлительноеОжидание.Видимость = Истина;

		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучениеСпискаСкладовЗавершение", ЭтотОбъект);
		ДлительнаяОперация = ЗапуститьПолучениеСпискаСкладов(УчетнаяЗапись, УникальныйИдентификатор);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьПолучениеСпискаСкладов(УчетнаяЗапись, УникальныйИдентификатор)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Получение списка складов.'");

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьСкладыСервиса";
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, УчетнаяЗапись);

КонецФункции

&НаКлиенте
Процедура ПолучениеСпискаСкладовЗавершение(РезультатЗадания, ДополнительныеПараметры) Экспорт

	ОчиститьСообщения();

	УчетнаяЗапись = Объект.Ссылка;
	
	Если РезультатЗадания <> Неопределено И РезультатЗадания.Статус = "Выполнено" Тогда
		ПолучениеСпискаСкладовЗавершениеНаСервере(РезультатЗадания.АдресРезультата);
	ИначеЕсли Не ЭтоЗакрытиеФормы Тогда  
		ШаблонОшибки = НСтр("ru = 'Не удалось получить склады учетной записи ""%1"" по причине: %2'");
		ПредставлениеНеизвестнойОшибки = НСтр("ru = 'Неизвестная ошибка выполнения операции'");
		ПодробноеПредставлениеОшибки = ?(РезультатЗадания = Неопределено, ПредставлениеНеизвестнойОшибки, РезультатЗадания.ПодробноеПредставлениеОшибки);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				УчетнаяЗапись,
				ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);

	КонецЕсли;

	ЗапущеноЗаданиеОбновленияСкладов = Ложь;
	Элементы.ДекорацияДлительноеОжидание.Видимость = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПолучениеСпискаСкладовЗавершениеНаСервере(АдресРезультата)

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);

	ОшибкаПолученияСкладовИзСервиса = Результат.ОшибкаПолученияСкладовИзСервиса;
	Если ОшибкаПолученияСкладовИзСервиса Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось получить список складов маркетплейса. Подробнее см. журнал регистрации.
				|Заполнение списка складов выполнено из сохраненных настроек.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	ТаблицаСкладовПолученная = Результат.ТаблицаСкладов;
	ЗначениеВРеквизитФормы(ТаблицаСкладовПолученная, "ТаблицаСкладов");

	ЕстьВиртуальныеСклады = (ТаблицаСкладовПолученная.Количество() > 0);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСведенияОСкладах(Команда)

	ОбновитьСписокСкладов();

КонецПроцедуры

&НаСервереБезКонтекста
Функция СкладыПроверитьИЗаписатьСоответствие(ДанныеЗаписи)
	Возврат ИнтеграцияСМаркетплейсомOzonСервер.СкладыПроверитьИЗаписатьСоответствие(ДанныеЗаписи);
КонецФункции

&НаКлиенте
Процедура ТаблицаСкладовСкладПриИзменении(Элемент)

	ОчиститьСообщения();

	ТекущиеДанные = Элементы.ТаблицаСкладов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УчетнаяЗапись = Объект.Ссылка;
	
	ДанныеЗаписи = Новый Структура; 
	ДанныеЗаписи.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
	ДанныеЗаписи.Вставить("ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Склад"));
	ДанныеЗаписи.Вставить("ИдентификаторОбъектаМаркетплейса", ТекущиеДанные.ИдентификаторСкладаМаркетплейса);
	ДанныеЗаписи.Вставить("НаименованиеОбъектаМаркетплейса", ТекущиеДанные.НаименованиеСкладаМаркетплейса);
	ДанныеЗаписи.Вставить("Объект1С", ТекущиеДанные.Склад1С);

	ПроверкаПройдена = СкладыПроверитьИЗаписатьСоответствие(ДанныеЗаписи);

	Если Не ПроверкаПройдена Тогда 
		ТекущиеДанные.Склад1С = Неопределено;
	Иначе
		Состояние( НСтр("ru = 'Соответствие складов записано.'"), , , БиблиотекаКартинок.ЛоготипOzon1 );
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьВидыЦенВОбъектУчетнаяЗапись()

	УчетнаяЗаписьОбъект = Объект;
	
	УчетнаяЗаписьОбъект.ВидыЦен.Очистить();
	
	НоваяСтрока = УчетнаяЗаписьОбъект.ВидыЦен.Добавить();
	НоваяСтрока.ИмяНастройки = "ВидЦеныДоСкидок";
	НоваяСтрока.ВидЦены = ВидЦеныДоСкидок;
	
	НоваяСтрока = УчетнаяЗаписьОбъект.ВидыЦен.Добавить();
	НоваяСтрока.ИмяНастройки = "ВидЦеныСУчетомСкидок";
	НоваяСтрока.ВидЦены = ВидЦеныСУчетомСкидок;
	
	НоваяСтрока = УчетнаяЗаписьОбъект.ВидыЦен.Добавить();
	НоваяСтрока.ИмяНастройки = "ВидЦеныМинимальныхЦен";
	НоваяСтрока.ВидЦены = ВидЦеныМинимальныхЦен;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ВидЦеныДоСкидокПриИзменении(Элемент)
	ЗаполнитьВидыЦенВОбъектУчетнаяЗапись();
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныСУчетомСкидокПриИзменении(Элемент)
	ЗаполнитьВидыЦенВОбъектУчетнаяЗапись();
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныМинимальныхЦенПриИзменении(Элемент)
	ЗаполнитьВидыЦенВОбъектУчетнаяЗапись();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОстатки(Команда)

	УчетнаяЗапись = Объект.Ссылка;
	
	Если УчетнаяЗапись.Пустая() Тогда
		Возврат;                         	
	КонецЕсли;

	ОчиститьСообщения();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

	ДлительнаяОперация = ВыгрузитьОстаткиНаСервере(УчетнаяЗапись);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Неопределено, ПараметрыОжидания);

	Состояние(НСтр("ru = 'Выгрузка остатков'"),, НСтр("ru = 'Запущена фоновая выгрузка остатков товаров на маркетплейс.'"));

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьОстаткиНаСервере(УчетнаяЗапись)

	ТаблицаТоваров = ИнтеграцияСМаркетплейсомOzonСервер.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Выгрузить остатки товаров.'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ВыгрузитьОстаткиТоваров";
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяМетода, УчетнаяЗапись, ТаблицаТоваров, Ложь, Ложь);

КонецФункции

&НаКлиенте
Процедура ВыгрузитьЦены(Команда)
    УчетнаяЗапись = Объект.Ссылка;
    
	Если УчетнаяЗапись.Пустая() Тогда
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

	ДлительнаяОперация = ВыгрузитьЦеныНаСервере(УчетнаяЗапись);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Неопределено, ПараметрыОжидания);

	Состояние(НСтр("ru = 'Выгрузка цен'"),, НСтр("ru = 'Запущена фоновая выгрузка цен товаров на маркетплейс.'"));

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьЦеныНаСервере(УчетнаяЗапись)

	ТаблицаТоваров = ИнтеграцияСМаркетплейсомOzonСервер.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Выгрузить цены товаров.'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ВыгрузитьЦеныТоваров";
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяМетода, УчетнаяЗапись, ТаблицаТоваров, Ложь);

КонецФункции

&НаКлиенте
Процедура ОтправитьНаМодерацию(Команда)

	УчетнаяЗапись = Объект.Ссылка;
	
	Если УчетнаяЗапись.Пустая() Тогда
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();
	ОтправитьНаМодерациюНаСервере(УчетнаяЗапись, Элементы.Товары.ВыделенныеСтроки);
    
    Элементы.Товары.Обновить();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтправитьНаМодерациюНаСервере(УчетнаяЗапись, ЗНАЧ ВыделенныеСтроки)

	ТаблицаТоваров = ТаблицаТоваровИзВыделенныхСтрок(ВыделенныеСтроки, УчетнаяЗапись);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса ЕСТЬ NULL КАК ЭтоНоваяЗапись,
	|	&УчетнаяЗапись КАК УчетнаяЗаписьМаркетплейса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар) КАК ВидОбъектаМаркетплейса,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации) КАК Статус
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
	|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
	|			И (СтатусыПубликации.Номенклатура = ТаблицаТоваров.Номенклатура)
	|			И (СтатусыПубликации.Характеристика = ТаблицаТоваров.Характеристика)
	|			И (СтатусыПубликации.Упаковка = ТаблицаТоваров.Упаковка)
	|			И (СтатусыПубликации.ОбъектПубликации = НЕОПРЕДЕЛЕНО)
	|ГДЕ
	|	НЕ ЕСТЬNULL(СтатусыПубликации.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ПустаяСсылка))
	|		В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве), ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации))";
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		Если Не Выборка.ЭтоНоваяЗапись Тогда
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации");
			КонецЕсли;
		КонецЕсли;
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТаблицаТоваровИзВыделенныхСтрок(ЗНАЧ ВыделенныеСтроки, УчетнаяЗапись = Неопределено, ВидОбъектаМаркетплейса = Неопределено)

	ТаблицаТоваров = ИнтеграцияСМаркетплейсомOzonСервер.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	Для Каждого КлючЗаписи Из ВыделенныеСтроки Цикл
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗаписи, "Номенклатура, Характеристика, Упаковка");
	КонецЦикла;
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ТаблицаТоваров.ЗаполнитьЗначения(УчетнаяЗапись, "УчетнаяЗаписьМаркетплейса");
	КонецЕсли;
	Если ЗначениеЗаполнено(ВидОбъектаМаркетплейса) Тогда
		ТаблицаТоваров.ЗаполнитьЗначения(ВидОбъектаМаркетплейса, "ВидОбъектаМаркетплейса");
	Иначе
		ТаблицаТоваров.ЗаполнитьЗначения(ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар"), "ВидОбъектаМаркетплейса");
	КонецЕсли;

	Возврат ТаблицаТоваров;

КонецФункции


&НаКлиенте
Процедура ЗагрузитьОстатки(Команда)
	
	УчетнаяЗапись = Объект.Ссылка;
	
	Если УчетнаяЗапись.Пустая() Тогда
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

	ДлительнаяОперация = ЗагрузитьОстаткиНаСервере(УчетнаяЗапись, Элементы.Товары.ВыделенныеСтроки);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Неопределено, ПараметрыОжидания);

	Состояние(НСтр("ru = 'Загрузка остатков'"),, НСтр("ru = 'Запущена фоновая загрузка остатков товаров с маркетплейса.'"));

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьОстаткиНаСервере(УчетнаяЗапись, ЗНАЧ ВыделенныеСтроки)

	ТаблицаТоваров = ТаблицаТоваровИзВыделенныхСтрок(ВыделенныеСтроки);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Загрузить остатки товаров.'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ЗагрузитьОстаткиТоваров";
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяМетода, УчетнаяЗапись, ТаблицаТоваров);

КонецФункции

&НаКлиенте
Процедура КнопкаСтатусыПубликацииОбъектовМаркетплейсаOzonСписокОткрыть(Команда)
	ОткрытьФорму( "РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ФормаСписка" );
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровПоОтбору.Форма.Форма" Тогда
		ОбработкаЗаполненияПоОтборуДлительнаяОперация(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаполненияПоОтборуДлительнаяОперация(ВыбранноеЗначение)

	ДлительнаяОперация = ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработкаЗаполненияПоОтборуДлительнаяОперацияЗавершение", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервере
Функция ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	УчетнаяЗапись = Объект.Ссылка;
	
	ТаблицаТоваров = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаПубликацииТоваров();

	ПодобранныеТовары = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	Для Каждого СтрокаТовара Из ПодобранныеТовары Цикл
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
	КонецЦикла;

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ОбработкаВыбораПодбор";
	НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Обработка подбора товаров'");

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне();
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;

	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяМетода,
			ТаблицаТоваров, УчетнаяЗапись);

КонецФункции

&НаКлиенте
Процедура ОбработкаЗаполненияПоОтборуДлительнаяОперацияЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Элементы.Товары.Обновить();

КонецПроцедуры

&НаКлиенте
Функция ПодключитьOzon()

	УчетнаяЗапись = Объект;
	
	ОчиститьСообщения();

	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись.Организация)
		Или НЕ ЗначениеЗаполнено(УчетнаяЗапись.ИдентификаторКлиента)
		Или НЕ ЗначениеЗаполнено(КлючAPI) Тогда  

		ТекстСообщения = НСтр("ru = 'Заполните все поля для подключения к маркетплейсу Ozon'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

		Возврат Ложь;
	КонецЕсли;

	ДанныеУчетнойЗаписи = Новый Структура("Организация, ИдентификаторКлиента, КлючAPI, УникальныйИдентификатор");
	ДанныеУчетнойЗаписи.Организация = УчетнаяЗапись.Организация;
	ДанныеУчетнойЗаписи.ИдентификаторКлиента = УчетнаяЗапись.ИдентификаторКлиента;
	ДанныеУчетнойЗаписи.КлючAPI = КлючAPI;
	ПроверкаПройдена = ПроверитьПодключениеКСерверу(ДанныеУчетнойЗаписи);

	ПоказыватьСтраницуРезультатамиАвторизации = Истина;

	Если ПроверкаПройдена Тогда
		
		ЗаписьУспешна = ЗаписатьДанныеВХранилище();

		Если ЗаписьУспешна Тогда
			Оповестить("ОбновитьСписокПодключений");
		Иначе
			ПоказыватьСтраницуРезультатамиАвторизации = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ПоказыватьСтраницуРезультатамиАвторизации Тогда
		ПоказатьСтраницуСРезультатамиАвторизации(ПроверкаПройдена);
	КонецЕсли;
	
    Возврат ПроверкаПройдена;
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьПодключениеКСерверу(ДанныеУчетнойЗаписи)

	Результат = ИнтеграцияСМаркетплейсомOzonСервер.ПроверитьСвязьСМаркетплейсом(ДанныеУчетнойЗаписи);

	Если Результат.КодСостояния = 200 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Подключение выполнено успешно.'"));
		Возврат Истина;
	Иначе
		ШаблонОшибки = НСтр("ru = 'Во время проверки подключения к HTTP-серверу произошла ошибка: %1 (%2)'");
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Результат.КодСостояния, Результат.ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(Комментарий);
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ЗаписатьДанныеВХранилище()
	
	ЗаписьУспешна = Ложь;

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

	Попытка

		УчетнаяЗаписьОбъект = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.УчетныеЗаписиМаркетплейсов"));
		УчетнаяЗаписьОбъект.ВалютаУчета = ИнтеграцияСМаркетплейсомOzonСервер.ВалютаРегламентированногоУчетаОрганизации(УчетнаяЗаписьОбъект.Организация);
		УчетнаяЗаписьОбъект.ИсточникКатегории = Перечисления.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры;
		
		Если Не ЗначениеЗаполнено( УчетнаяЗаписьОбъект.Наименование ) Тогда
			УчетнаяЗаписьОбъект.Наименование = Строка(УчетнаяЗаписьОбъект.Организация) + " (" + Строка(УчетнаяЗаписьОбъект.ИдентификаторКлиента) + ")";
		КонецЕсли;
		
		УчетнаяЗаписьОбъект.ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon;
		УчетнаяЗаписьОбъект.Записать();
		
		УчетнаяЗапись = УчетнаяЗаписьОбъект.Ссылка;

		БлокировкаДанных = Новый БлокировкаДанных;
		ЗаблокироватьДанныеДляРедактирования(УчетнаяЗапись);
		ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.УчетныеЗаписиМаркетплейсов");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", УчетнаяЗапись);
		БлокировкаДанных.Заблокировать();
		
		ИдентификаторУчетнойЗаписи = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса().НастройкиСервиса + УчетнаяЗапись.УникальныйИдентификатор();
		
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИдентификаторУчетнойЗаписи, КлючAPI, "KeyAPI");
		
		ЗаписьУспешна = Истина;

		ЗафиксироватьТранзакцию();
		
	Исключение

		ОтменитьТранзакцию();

		ЗаписьУспешна = Ложь;

		ШаблонСообщения = НСтр("ru = 'Не удалось выполнить подключение по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;

	ЗначениеВРеквизитФормы( УчетнаяЗаписьОбъект, "Объект" );

	Возврат ЗаписьУспешна;

КонецФункции

&НаКлиенте
Процедура РасписанияКартинкаНажатие(Элемент)
	ПоказатьСтраницуРасписания();
КонецПроцедуры

&НаКлиенте
Процедура РасписанияНадписьНажатие(Элемент)
	ПоказатьСтраницуРасписания();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;
	УчетнаяЗапись = Объект.Ссылка;

	Если УчетнаяЗапись.Пустая() Тогда
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);

	ОткрытьФорму("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.Форма.ФормаЗаписи", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалениемПослеОтветаНаВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;

	УчетнаяЗапись = Объект.Ссылка;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьДанныеФормыПослеВыполненияФоновогоЗадания", ЭтаФорма);
	ДлительнаяОперация = УдалитьТоварыНаСервере(УчетнаяЗапись, Элементы.Товары.ВыделенныеСтроки, УникальныйИдентификатор);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	УчетнаяЗапись = Объект.Ссылка;

	Если УчетнаяЗапись.Пустая() Тогда
		Возврат;
	КонецЕсли;
    
    ОповещениеПослеОтветаНаВопрос = Новый ОписаниеОповещения("ТоварыПередУдалениемПослеОтветаНаВопрос", ЭтаФорма);
    ПоказатьВопрос(ОповещениеПослеОтветаНаВопрос, НСтр("ru = 'Удалить товары из настройки интеграции с Ozon ?'"),
    РежимДиалогаВопрос.ДаНетОтмена );

КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьТоварыНаСервере(УчетнаяЗапись, ЗНАЧ ВыделенныеСтроки, УникальныйИдентификатор)

	ТаблицаТоваров = ТаблицаТоваровИзВыделенныхСтрок(ВыделенныеСтроки);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Удалить товары.'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.УдалитьТовары";
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, УчетнаяЗапись, ТаблицаТоваров);

КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеФормыПослеВыполненияФоновогоЗадания( Результат, ДополнительныеПараметры ) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда

		Если Результат.Свойство("АдресРезультата") Тогда
			
			РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			Если ТипЗнч( РезультатВыполнения ) = Тип( "Структура" ) Тогда
				
				Если РезультатВыполнения.Свойство( "Код" ) И ЗначениеЗаполнено( РезультатВыполнения.Код ) Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения.Описание);
				КонецЕсли;
				
				Если РезультатВыполнения.Свойство( "КодОшибки" ) И ЗначениеЗаполнено( РезультатВыполнения.КодОшибки ) Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если Результат.Свойство( "Сообщения" ) Тогда
			Для Каждого СообщениеЭлемент Из Результат.Сообщения Цикл
				ОбщегоНазначенияКлиент.СообщитьПользователю( СообщениеЭлемент.Текст );
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

	Элементы.Товары.Обновить();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьПубликациюИзображенийТоваров(УчетнаяЗапись, УникальныйИдентификатор)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Выполнить публикацию изображений товаров.'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ВыполнитьПубликациюИзображенийТоваров";
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, УчетнаяЗапись);

КонецФункции

&НаКлиенте
Процедура КнопкаВыполнитьПубликациюИзображенийТоваров(Команда)
	
	УчетнаяЗапись = Объект.Ссылка;

	Если УчетнаяЗапись.Пустая() Тогда
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьДанныеФормыПослеВыполненияФоновогоЗадания", ЭтаФорма);
	ДлительнаяОперация = ВыполнитьПубликациюИзображенийТоваров(УчетнаяЗапись, УникальныйИдентификатор);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеУчетнойЗаписи()

	ЭтоДубль = Ложь;

	УчетнаяЗаписьСсылка = Справочники.УчетныеЗаписиМаркетплейсов;
	
	УчетнаяЗапись = Объект;
	
	Если ЗначениеЗаполнено(УчетнаяЗапись.ИдентификаторКлиента) Тогда
		Запрос = Новый Запрос; 
		Запрос.УстановитьПараметр("ИдентификаторКлиента", УчетнаяЗапись.ИдентификаторКлиента);
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	УчетныеЗаписиМаркетплейсов.Ссылка КАК УчетнаяЗапись,
			|	УчетныеЗаписиМаркетплейсов.Организация КАК Организация,
			|	УчетныеЗаписиМаркетплейсов.ПометкаУдаления КАК ПометкаУдаления
			|ИЗ
			|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
			|ГДЕ
			|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = Значение(Перечисление.ВидыМаркетплейсов.МаркетплейсOzon)
			|	И УчетныеЗаписиМаркетплейсов.ИдентификаторКлиента = &ИдентификаторКлиента
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПометкаУдаления";

		ВыборкаДанныхПроверки = Запрос.Выполнить().Выбрать();
		Если ВыборкаДанныхПроверки.Следующий() Тогда
			Если ВыборкаДанныхПроверки.ПометкаУдаления Тогда
				УчетнаяЗаписьСсылка = ВыборкаДанныхПроверки.УчетнаяЗапись;
			Иначе
				ЭтоДубль = Истина;

				ИнформацияОДубле = НСтр("ru = 'Для указанного клиентского идентификатора уже существует активная учетная запись для организации <%1>. Создание новой учетной записи невозможно.'");
				Элементы.ДекорацияИнформацияОДубле.Заголовок = 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИнформацияОДубле, ВыборкаДанныхПроверки.Организация);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Элементы.ГруппаДанныеКлючаAPI.Видимость = НЕ ЭтоДубль;
	Элементы.ГруппаИнформацияОДубле.Видимость = ЭтоДубль;
	Элементы.КнопкаПодключитьOzon.Доступность = НЕ ЭтоДубль;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ПроверитьНаличиеУчетнойЗаписи();

КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторКлиентаПриИзменении(Элемент)

	ПроверитьНаличиеУчетнойЗаписи(); 

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУстановитьПараметрыПодключенияКСервисуНажатие(Элемент)
    Если ЭтаФорма.OzonДанныеАвторизацииЗаписаны = Ложь Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю( НСтр( "ru = 'Данные авторизации Ozon не записаны. Нажмите ""Подключить Ozon"".'" ) );
    	Возврат;
    КонецЕсли;
    УчетнаяЗапись = Объект.Ссылка;
	ПараметрыФормы = Новый Структура("ПараметрыПриложенияЯндекс, УчетнаяЗаписьМаркетплейса",
		ПараметрыПриложенияЯндексДиск(), УчетнаяЗапись);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.АвторизацияПриложенияЯндекс", ПараметрыФормы, ЭтаФорма );

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыПриложенияЯндексДиск()

	Возврат ИнтеграцияСМаркетплейсамиСервер.ПараметрыПриложенияЯндексДиск();

КонецФункции

&НаКлиенте
Процедура ИсточникКатегорииПриИзменении(Элемент)
	ЭтаФорма.Записать();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСоответствияОбъектовМаркетплейсовФормаСписка(Команда)
	ОткрытьФорму( "РегистрСведений.СоответствияОбъектовМаркетплейсов.ФормаСписка" );
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее2(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю( НСтр("ru = 'Заполните поле ""Организация""'"),, "Организация", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИдентификаторКлиента) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю( НСтр("ru = 'Заполните поле ""Идентификатор клиента""'"),, "ИдентификаторКлиента", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.КлючAPI) И ЭтаФорма.OzonДанныеАвторизацииЗаписаны <> Истина Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю( НСтр( "ru = 'Заполните поле ""Ключ API""'" ),, "КлючAPI", , Отказ);
	КонецЕсли;
	
	Если ЭтаФорма.OzonДанныеАвторизацииЗаписаны <> Истина Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю( НСтр( "ru = 'Данные авторизации Ozon не записаны. Нажмите ""Подключить Ozon"".'"), , , , Отказ);
	КонецЕсли;
	
	Если ЭтаФорма.ЯндексДанныеПриложенияВХранилище <> Истина Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю( НСтр( "ru = 'Данные авторизации Яндекс не записаны. Нажмите ""Авторизовать приложение Яндекс"".'"), , , , Отказ);
	КонецЕсли;
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Записать();
	
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Склады", 1);
	
	ОбновитьСписокСкладов();

	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад2(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",1);
	ДобавитьНастройкуНаКлиенте("Дополнительно",0);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее3(Команда)
	
	Отказ = Ложь;
	
	
	СообщениеТекстОшибка = НСтр( "ru = 'Заполните таблицу ""Соответствия складов""'" );
	
	Для Каждого ТаблицаСкладовСтрока Из ТаблицаСкладов Цикл
		Если Не ЗначениеЗаполнено( ТаблицаСкладовСтрока.Склад1С ) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю( СообщениеТекстОшибка,,,, Отказ);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Склады",2);
	ДобавитьНастройкуНаКлиенте("Цены",1);
	
	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад3(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",1);
	ДобавитьНастройкуНаКлиенте("Склады",0);
	
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее4(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ВидЦеныДоСкидок) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю( НСтр( "ru = 'Заполните поле ""Цена до скидок""'"),, "ВидЦеныДоСкидок", , Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ВидЦеныСУчетомСкидок) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю( НСтр( "ru = 'Заполните поле ""Цена с учетом скидок""'"),, "ВидЦеныСУчетомСкидок", , Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ВидЦеныМинимальныхЦен) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю( НСтр( "ru = 'Заполните поле ""Минимальная цена""'" ),, "ВидЦеныМинимальныхЦен", , Отказ);
	КонецЕсли;
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Склады",2);
	ДобавитьНастройкуНаКлиенте("Цены",2);
	ДобавитьНастройкуНаКлиенте("Товары",1);
	
	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад4(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Склады",1);
	ДобавитьНастройкуНаКлиенте("Цены",0);
	
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее5(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ИсточникКатегории) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю( НСтр("ru = 'Заполните поле ""Источник категории 1С""'"),, "ИсточникКатегории", "Объект", Отказ);		
	КонецЕсли;
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;

	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Склады",2);
	ДобавитьНастройкуНаКлиенте("Цены",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Расписания",2);
	
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад5(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Склады",2);
	ДобавитьНастройкуНаКлиенте("Цены",1);
	ДобавитьНастройкуНаКлиенте("Товары",0);

	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ФормаЭлементыОтборыУстановить(ТекущийОбъект.Ссылка);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗаданияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ВыполнитьНастройкуРасписания(ПолучитьРасписаниеРегламентногоЗадания());
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписания(РасписаниеЗадания)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеЗадания);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Расписание", РасписаниеЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьНастройкуРасписанияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписанияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		ВыполнитьНастройкуРасписанияЗавершениеНаСервере(ДополнительныеПараметры.Расписание);
		
		НастроитьРасписаниеРегламентногоЗадания = ДополнительныеПараметры.Расписание;
		
	Иначе
		ВыполнитьНастройкуРасписанияЗавершениеНаСервере(Расписание);
		
		НастроитьРасписаниеРегламентногоЗадания = Расписание;
		
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРасписаниеРегламентногоЗадания()
	
	РасписаниеРегламентногоЗадания = Неопределено;
	
	Если Объект.РасписаниеРегламентногоЗадания <> "" Тогда
		Попытка
			РасписаниеРегламентногоЗадания = ЗначениеИзСтрокиВнутр(Объект.РасписаниеРегламентногоЗадания);
		Исключение
			РасписаниеРегламентногоЗадания = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(РасписаниеРегламентногоЗадания) <> Тип("РасписаниеРегламентногоЗадания") Тогда
		РасписаниеРегламентногоЗадания =
		ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьРасписаниеРегламентногоЗаданияПоУмолчанию();
	КонецЕсли;
	
	Возврат РасписаниеРегламентногоЗадания;

КонецФункции

&НаСервере
Процедура ВыполнитьНастройкуРасписанияЗавершениеНаСервере(Расписание)
	                                         	
		Если РазделениеВключено И Расписание.ПериодПовтораВТечениеДня < 300 Тогда
			Расписание.ПериодПовтораВТечениеДня = 300;
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Минимальное время запуска фонового задания 5 минут.'"));
		КонецЕсли;
		
		Объект.РасписаниеРегламентногоЗадания = ЗначениеВСтрокуВнутр(Расписание);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаТоваров = ИнтеграцияСМаркетплейсомOzonСервер.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();

	Для Каждого КлючЗаписи Из Строки.ПолучитьКлючи() Цикл
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗаписи);
	КонецЦикла;
    
    УчетнаяЗапись = ТаблицаТоваров[0].УчетнаяЗаписьМаркетплейса;
    
    СопоставленныеСклады = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьСопоставленныеСклады(УчетнаяЗапись);
    
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваров.Характеристика КАК Характеристика,
	|	ВТТовары.Упаковка КАК Упаковка,
	|	СУММА(ОстаткиТоваров.Количество) КАК Остаток,
	|	СУММА(ОстаткиТоваров.Резерв) КАК Резерв
	|ИЗ
	|	РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТовары КАК ВТТовары
	|		ПО (ВТТовары.Номенклатура = ОстаткиТоваров.Номенклатура)
	|			И (ВТТовары.Характеристика = ОстаткиТоваров.Характеристика)
	|ГДЕ
	|	ОстаткиТоваров.СтруктурнаяЕдиница В(&Склады)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.Номенклатура,
	|	ОстаткиТоваров.Характеристика,
	|	ВТТовары.Упаковка";

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Склады", СопоставленныеСклады);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
	СтруктураОтбора.Вставить("ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар"));
	СтруктураОтбора.Вставить("Номенклатура");
	СтруктураОтбора.Вставить("Характеристика");
	СтруктураОтбора.Вставить("Упаковка");
	СтруктураОтбора.Вставить("ОбъектПубликации", Неопределено);

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураОтбора.Номенклатура = Выборка.Номенклатура;
		СтруктураОтбора.Характеристика = Выборка.Характеристика;
		СтруктураОтбора.Упаковка = Выборка.Упаковка;
		КлючЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьКлючЗаписи(СтруктураОтбора);
		ДанныеСтрокиСписка = Строки[КлючЗаписи].Данные;

		ДанныеСтрокиСписка.ОстатокПоУчету = Выборка.Остаток;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти




