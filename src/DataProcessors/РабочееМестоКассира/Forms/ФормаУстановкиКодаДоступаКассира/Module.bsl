
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Кассир") Тогда
		Кассир = Параметры.Кассир;
	КонецЕсли;
	ПодготовитьЭлементыОтправкиКодаДоступаНаEmail();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(КодКассира) Тогда

		Если ОписаниеОповещенияОЗакрытии <> Неопределено
			И ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Свойство("КодДоступа") Тогда
				ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.КодДоступа = КодКассира;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтправлятьКодПоEmailПриИзменении(Элемент)
	Элементы.ОтправкаEmail.Видимость = ОтправлятьКодПоEmail;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПриступитьКРаботе(Команда)
	ПередатьДанныеОНовомКодеДоступаВФормуРМК();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьEmail(Команда)
	ОтправитьEmailСНовымКодомДоступа();
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьКодДоступа(Команда)
	СформироватьНовыйКодДоступаСотрудника();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКодДоступаСотрудника(Команда)
	ВывестиКодДоступаСотрудникаВТабличныйДокумент();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_ОтправкаEmail

&НаКлиенте
Процедура ОтправитьEmailСНовымКодомДоступа()
	
	Если ЗначениеЗаполнено(КодКассира) Тогда
		
		АдресЭлектроннойПочтыВалиден =
			ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Email);
			
		Если АдресЭлектроннойПочтыВалиден Тогда
			
			ОтправкаУспешна = ОтправитьEmailСНовымКодомДоступаНаСервере();
			ТекстОповещения = ?(ОтправкаУспешна,
				НСтр("ru = 'Письмо было успешно отправлено на указанный адрес.'"),
				НСтр("ru = 'Не удалось сформировать email для отправки нового кода доступа.
					|Пожалуйста, обратитесь к администратору.'"));
			
		Иначе
			ТекстОповещения = НСтр("ru = 'Пожалуйста, проверьте корректность адреса получателя кода доступа.'");
		КонецЕсли;
		
		ПоказатьПредупреждение(,ТекстОповещения);
		
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Отсутствует значение кода кассира.
			|Пожалуйста, создайте новое значение и повторите попытку.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьEmailСНовымКодомДоступаНаСервере()

	ОтправкаУспешна = Ложь;
	
	ТемаПисьма = НСтр("ru = 'Персональный код доступа в интерфейс кассира'");
	ТелоПисьма = СтрШаблон(НСтр("ru = 'Создан персональный код доступа в интерфейс рабочего места кассира.
		|Значение кода: %1'"), КодКассира);
	АдресПолучателя = Email;
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияРМКПереопределяемый.ОтправитьEmail(ОтправкаУспешна, ТемаПисьма, ТелоПисьма, АдресПолучателя);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОтправкаУспешна;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПодготовкаКодаДоступа

&НаКлиенте
Процедура ВывестиКодДоступаСотрудникаВТабличныйДокумент()

	Если ЗначениеЗаполнено(КодКассира) Тогда
		
		Результат = КодДоступаКассираДляСохранения();
		Результат.Показать();
		
	Иначе
		
		ПоказатьПредупреждение(,
		НСтр("ru = 'Невозможно сохранить несозданный код.
			|Пожалуйста, сформируйте новый код и попробуйте снова.'"));
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПодготовкаДанныхФормы

&НаКлиенте
Процедура ПередатьДанныеОНовомКодеДоступаВФормуРМК()
	Закрыть(КодКассира);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНовыйКодДоступаСотрудника()
	
	НазначитьНовыйКодДоступаКассира();
	
	КодДоступаСформирован = НЕ ПустаяСтрока(КодКассира);
	
	Если НЕ КодДоступаСформирован Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Не удалось сформировать новый код доступа для кассира.
			| Пожалуйста, обратитесь за помощью к администратору.'"));
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.СохранитьКодДоступа, КодДоступаСформирован);

	ДоступностьОтправкиКодаПоEmail = Элементы.ОтправлятьКодПоEmail.Доступность И КодДоступаСформирован;
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправлятьКодПоEmail, ДоступностьОтправкиКодаПоEmail);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ПриступитьКРаботе, КодДоступаСформирован);
	УстановитьДоступностьЭлементаФормы(Элементы.СгенерироватьКодДоступа, НЕ КодДоступаСформирован);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьЭлементыОтправкиКодаДоступаНаEmail()
	
	ФункциональностьДоступна = ДоступнаОтправкаЭлектроннойПочты();
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправкаEmail, ФункциональностьДоступна);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправлятьКодПоEmail, ФункциональностьДоступна);
	Email = ОбщегоНазначенияРМК.АдресЭлектроннойПочтыКассира(Кассир); // АПК:1353 - общепринятый термин
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ВспомогательныеМетоды

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементаФормы(Элемент, Доступность)
	Элемент.Доступность = Доступность;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Переопределение

&НаСервере
Функция ДоступнаОтправкаЭлектроннойПочты()

	ИмяПодсистемыДляРаботыСЭлектроннойПочтой = "СтандартныеПодсистемы.РаботаСПочтовымиСообщениями";
	ДоступнаОтправкаЭлектроннойПочтыНаОсновеБСП = ОбщегоНазначения.ПодсистемаСуществует(ИмяПодсистемыДляРаботыСЭлектроннойПочтой);
	ДоступнаОтправкаЭлектроннойПочтыБезБиблиотечнойФункциональности =
		ДоступнаОтправкаЭлектроннойПочтыБезБиблиотечнойФункциональности();
	Возврат ДоступнаОтправкаЭлектроннойПочтыНаОсновеБСП
		ИЛИ ДоступнаОтправкаЭлектроннойПочтыБезБиблиотечнойФункциональности;

КонецФункции

&НаСервереБезКонтекста
Функция ДоступнаОтправкаЭлектроннойПочтыБезБиблиотечнойФункциональности()
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакДоступнаОтправкаПочтыБезБСП(Результат);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КодДоступаКассираДляСохранения()
	
	Результат = Новый ТабличныйДокумент;
	Результат.Очистить();
	ОбщегоНазначенияРМКПереопределяемый.ПодготовитьКодДоступаПользователяДляСохранения(КодКассира,
		Строка(Кассир),
		Результат);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НазначитьНовыйКодДоступаКассира()

	УстановитьПривилегированныйРежим(Истина);
	
	НовыйКодСотрудника = НовыйКодДоступаКассираПоУмолчанию();
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьНовыйКодДоступаКассира(НовыйКодСотрудника);
	КодКассира = НовыйКодСотрудника;
	
	ВладелецКодаДоступа = Кассир;
	ОбщегоНазначенияРМКПереопределяемый.ПереопределитьВладельцаКодаДоступа(ВладелецКодаДоступа);
	
	УстановитьКодДоступаКассиру(ВладелецКодаДоступа, НовыйКодСотрудника);
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьКодДоступаКассиру(ВладелецКодаДоступа, КодДоступа)
	
	ОбщегоНазначенияРМКПереопределяемый.УстановитьКодДоступаКассиру(ВладелецКодаДоступа, КодДоступа);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйКодДоступаКассираПоУмолчанию()
	
	СлучайноеЧислоСтрокой = "";
	Генератор = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	СлучайноеЧисло = Генератор.СлучайноеЧисло(0, 99999);
	
	Если СлучайноеЧисло < 10000 Тогда
		СлучайноеЧислоСтрокой = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(СлучайноеЧисло), 5, "0");
	Иначе
		СлучайноеЧислоСтрокой = Формат(СлучайноеЧисло, "ЧГ=0");
	КонецЕсли;
	
	Возврат СлучайноеЧислоСтрокой;

КонецФункции

#КонецОбласти

#КонецОбласти
