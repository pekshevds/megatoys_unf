
#Область ОписаниеПеременных

&НаКлиенте
Перем ИдентификаторЗамераПробитияЧека, ИдентификаторЗамераВремениПоиска;

&НаКлиенте
Перем ЭлектронныеВесыЗаняты;

&НаКлиенте
Перем ДанныеКПередачеВДисплейПокупателя;

&НаКлиенте
Перем ВременныйКонтекстПроверкиМарки;

&НаКлиенте
Перем ПараметрыПодключенияКСерверуЛояльности;

&НаКлиенте
Перем ДанныеДляОтчетаЗаСмену;

&НаКлиенте
Перем ПоискТоваровОткрытИзСтрокиВвода;

&НаКлиенте
Перем СчетчикНажатийНаКупюры;

&НаКлиенте
Перем ПредыдущийСлойДоДанныхПокупателя;

&НаКлиенте
Перем ЭлементВводаСуммы;

&НаКлиенте
Перем ЭлементВводаДанныхПокупателя;

&НаКлиенте
Перем ОбновлятьСуммуАванса;

&НаКлиенте
Перем ПереключениеЦифровойПанели;

&НаКлиенте
Перем ТекстДатыРожденияСозданиеКарты;

// Признак, указывающий, что в данный момент изменение значения в выбранном поле происходит в результате
// ввода с цифровой клавиатуры формы РМК.
&НаКлиенте
Перем ВводСЦифровойКлавиатуры;

// В переменной хранится строка таблицы товаров, в которой надо изменить количество после подтверждения
// кода сотрудником.
&НаКлиенте
Перем ТекущаяСтрокаРедактированияКоличества;

// Переменная указывает, что процесс обновления количества не завершен.
&НаКлиенте
Перем ОбновлениеКоличестваЗапущено;

// Признак того, что пробитие чека запущено со страницы "Отправка чека" данных покупателя.
&НаКлиенте
Перем ПробитиеСоСтраницыОтправкиЧека;

// Структура с данными об оплате платежной системой при отправке чека со страницы "Отправка чека".
&НаКлиенте
Перем ПараметрыОплатыПлатежнойСистемой;

// Структура с дополнительными параметрами для вывода на экран перед показом стартовой страницы.
&НаКлиенте
Перем ПараметрыПустойСтраницы;

// Структура с возможными вариантами типов построения плитки: 0 - по палитре, 1 - весовой товар,
// 3 - распознанный весовой товар.
&НаКлиенте
Перем ТипыПостроенияПлитки Экспорт;

// Текущий тип построения плитки.
&НаКлиенте
Перем ТипПостроенияПлитки Экспорт;

// Таблица клиентская (массив структур) с иерархией построения плитки для текущего типа построения.
&НаКлиенте
Перем ДанныеДляПлитки Экспорт;

// Признак того, что в палитре РМК есть хоть один весовой товар - не модификатор.
&НаКлиенте
Перем ЕстьВесовойТоварВПалитре Экспорт;

// Признак того, что при получении веса надо выводить сообщение о не заполненном весе,
// если полученный вес нулевой
&НаКлиенте
Перем ОжиданиеКонтроляВеса;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	Если ЭтоМобильныйКлиент Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Мобильный клиент не поддерживается.'"));
		Возврат;
	КонецЕсли;
	
	МожноОткрыватьРМК = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьВозможностьЗапускаРМК(МожноОткрыватьРМК);
	Если Не МожноОткрыватьРМК Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПредыдущийСлойДоДанныхПокупателя = Неопределено;
	УстановитьПризнакиПоУмолчаниюПриСоздании();
	ИнициализироватьПеречисленияФормы();
	ЦветаФормы = ОбщегоНазначенияРМК.ЦветаФормыРМК();
	ОбщегоНазначенияРМК.ЛокализоватьКартинки(ЭтотОбъект);
	ПредставлениеВалюты = ОбщегоНазначенияРМК.ПредставлениеВалюты();
	
	РабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	ПоддерживаемыеТипыПО = "СканерШтрихкода, ДисплейПокупателя, ФискальныйРегистратор,
							|ПринтерЧеков, ЭлектронныеВесы, СчитывательМагнитныхКарт";
	
	ПоддерживаемыеТипыПодключаемогоОборудования = ПоддерживаемыеТипыПО;
	ОбщегоНазначенияРМК.НастроитьПодключаемоеОборудование(ЭтотОбъект, "");
	ПродажиРМК.ЗаполнитьТаблицуОборудование(ЭтотОбъект, ПоддерживаемыеТипыПО);
	РазрешенаАвтоматическаяФискализация = МенеджерОборудованияВызовСервера.ДоступноРаспределеннаяФискализация()
		И СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	
	ЗаполнитьФормуПриСозданииНаСервере();
	
	ПодготовитьПлиточныйИнтерфейсПодбора();
	ИнтерфейсРМКСлужебный.НастроитьЭлементыФормыПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ (Объект.Товары.Количество() = 0 Или ФормаЗамороженаПослеПробитияЧека()) Тогда
		
		Отказ = Истина;
		ТекстПредупреждения =
			НСтр("ru = 'Перед закрытием программы необходимо пробить, отложить или удалить текущий чек.'");
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЕстьВесовойТоварВПалитре = Ложь;
	ОжиданиеКонтроляВеса = Истина;
	ИнициализироватьКлиентскиеПеречисленияФормы();
	// устанавливает признак режима работы РМК
	ОбщегоНазначенияРМККлиент.УстановитьРежимРМК();
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.Страницы.ТекущаяСтраница);
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьРабочееМесто(ЭтотОбъект);
	КонецЕсли;
	
	ОтложеннаяПроверкаКассовойСмены = Ложь;
	Если НЕ ПараметрыОткрытияФормы = Неопределено Тогда
		ПроверитьФормуПриОткрытии(Отказ, ОтложеннаяПроверкаКассовойСмены);
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Кассир) Тогда
		НастроитьВспомогательноеПодключаемоеОборудование();
	КонецЕсли;
	
	Если РежимКассыСамообслуживания Тогда
		ОформитьРежимНовогоЧека("Продажа");
	КонецЕсли;
	ИзменитьКартинкуВводПокупателя();
	ПоискТоваровОткрытИзСтрокиВвода = Ложь;

	ДанныеДляПлитки = Новый Массив;
	ТипПостроенияПлитки = ТипыПостроенияПлитки.ПоПалитре;
	ИнтерфейсРМКСлужебныйКлиент.ПодготовитьДанныеДляПлитки(ЭтотОбъект);
	ЗаполнитьКнопкиИзбранныхПозиций();
	ЗаполнитьКнопкиПлиток();
	
	ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
	ПереключитьВРежимПлитки();
	ОбновлятьСуммуАванса = Ложь;
	ПереключениеЦифровойПанели = Ложь;
	ВводСЦифровойКлавиатуры = Ложь;
	ТекущаяСтрокаРедактированияКоличества = Неопределено;
	ОбновлениеКоличестваЗапущено = Ложь;
	УстановитьПризнакХочуБумажныйЧек(ПечататьБумажныйЧек);
	ПробитиеСоСтраницыОтправкиЧека = Ложь;
	Если ОтложеннаяПроверкаКассовойСмены Тогда
		ПодключитьОбработчикОжидания("ПроверитьКассовуюСменуИНайтиКассираВФоне", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСостоянияКассовойСмены" Тогда
		ИзменитьСостояниеКассовойСмены();
	КонецЕсли;
	
	Если ПрерватьОбработкуОповещения() Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник = "ПодключаемоеОборудование" И ЭтоПолучениеСтабильногоВеса(ИмяСобытия, Параметр) Тогда
		
		ОбработатьПолучениеВесаОтЭлектронныхВесов(Параметр.Вес);
	
	ИначеЕсли Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		
		Если НЕ РежимПоказаСкидок Тогда
			ПереключитьРежимПоказаОстатков(Ложь);
		ИначеЕсли РежимРасчетаСкидокСтрока ИЛИ РежимПоказаСкидок 
			И НЕ ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека) = Элементы.ГруппаНайтиВЧеке
			И НЕ Элементы.ГруппаВводПромокода.Видимость Тогда
			ПереключитьРежимНаПоказСкидок(Ложь);
		КонецЕсли;
		
		ТипОборудованияСчитывательМагнитныхКарт = ОбщегоНазначенияКлиент.
			ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт");
		
		Если ИмяСобытия = "ScanData" Тогда
			
			Штрихкод = ?(Параметр[1] = Неопределено, Параметр[0], Параметр[1][1]);
			ВыполнитьПоискШтрихкода(Штрихкод);
			
		ИначеЕсли ИмяСобытия = "ScanDataBase64" Тогда
			
			Штрихкод = ?(Параметр[1] = Неопределено, Параметр[0], Параметр[1][1]);
			Штрихкод = МенеджерОборудованияКлиентСервер.Base64ВШтрихкод(Штрихкод);
			ВыполнитьПоискШтрихкода(Штрихкод);
			
		ИначеЕсли ИмяСобытия = "TracksData" И ПодключеноОборудование(ТипОборудованияСчитывательМагнитныхКарт) Тогда
			ВыполнитьПоискМагнитнойКарты(Параметр[0]);
		Иначе
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Источник = "ФормаТарированияВесов" И ИмяСобытия = "ТарированиеВесов" Тогда
		
		Если ЕстьСвойство(Параметр, "ВесТары") Тогда
			ВесТары = Параметр.ВесТары;
		КонецЕсли;
		
		Если ЕстьСвойство(Параметр, "ЭлектронныеВесыЗаняты") Тогда
			ЭлектронныеВесыЗаняты = Параметр.ЭлектронныеВесыЗаняты;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СохранениеНастроекРМК" Тогда
		
		Если ЕстьСвойство(Параметр, "НастройкаЗаписана") И Параметр.НастройкаЗаписана Тогда
			СозданиеНастройкиРМКЗавершение(Истина, Неопределено);
		Иначе
			ЗакрытьПриложениеПриОшибке(Истина);
		КонецЕсли;
		
	Иначе
		
		ОбработатьОповещениеНаСервере = Ложь;
		ОбщегоНазначенияРМККлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник,
			ОбработатьОповещениеНаСервере);
		
		Если ОбработатьОповещениеНаСервере Тогда
			ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Для Каждого Строка Из ТаблицаКассККМОрганизаций Цикл
		
		ПодключаемоеОборудование = Строка.ИдентификаторУстройства;
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоИдентификатору(Неопределено,
			УникальныйИдентификатор, ПодключаемоеОборудование);
	
	КонецЦикла;

	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);

	ВывестиИнформациюНаДисплейПокупателя("Сервис");
	
	ОбщегоНазначенияРМККлиент.СброситьРежимРМК();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.ФормаПодборТовара"
		Или ИсточникВыбора.ИмяФормы = "Справочник.ПалитраТоваровРМК.Форма.ПлиточныйИнтерфейсВыбораТоваров"
		Или ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборСертификатовЭСНСПК" Тогда
		МассивДанных = Новый Массив;
		ОбщегоНазначенияРМККлиентПереопределяемый.ДозаполнитьДанныеРучногоВыбора(ВыбранноеЗначение,
			МассивДанных, ЭтотОбъект);
		
		Для Каждого СтрокаМассива Из МассивДанных Цикл
			СписокТоваровВыборКлиент(СтрокаМассива);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ОбщегоНазначенияРМККлиент.ИспользоватьВнешнееСобытие() И ВводДоступен() Тогда
		
		Если ПрерватьОбработкуОповещения() Тогда
			Возврат;
		КонецЕсли;
		
		Если Событие = "Штрихкод" Или Событие = "ПолученШтрихкод" Или Событие = "ScanData" Тогда
			ВыполнитьПоискШтрихкода(Данные);
		ИначеЕсли Событие = "TracksData" Или Событие = "ДанныеКарты" Тогда
			ВыполнитьПоискМагнитнойКарты(Данные);
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИдентификаторОплатыПриИзменении(Элемент)
	
	ПриИзмененииИдентификатораОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура КодДляПодтвержденияОплатыПриИзменении(Элемент)
	
	ЗавершитьОплатуПринудительно();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБНПриИзменении(Элемент)
	ЗачестьОплатуКартой();
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоНалПриИзменении(Элемент)
	СуммаОплаченоНалПриИзмененииНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоВРассрочкуПриИзменении(Элемент)
	ЗачестьОплатуВРассрочку();
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоЗачетАвансаПриИзменении(Элемент)
	
	ПроверитьПревышениеСуммыЗачетаАванса();
	ЗачестьОплатуЗачетАванса();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварЦенаИзКарточкиПриИзменении(Элемент)
	
	Если ПримененыСкидки() Тогда
		ЗадатьВопросПоРасчетуСкидок("ЦенаИзКарточкиПриИзмененииЗавершение");
	Иначе
		ЦенаИзКарточкиПриИзмененииЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьСертификатНажатие(Элемент)
	ОтменитьОплатуСертификатами(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьУправляемуюСкидкуНажатие(Элемент)
	ОтменитьУправляемуюСкидку(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаЧекаПочтаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(ОтправкаЧекаТелефон) Тогда
		ОтправкаЧекаТелефон = НСтр("ru = ''");
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправкаЧекаТелефон, НЕ ЗначениеЗаполнено(Текст));
	ИнтерфейсРМКСлужебныйКлиент.НастроитьСвойстваКнопкиПробитьИОтправить(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаЧекаТелефонИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	КодСтраны = ИнтерфейсРМКСлужебныйКлиентСервер.ТелефонныйКодСтраны();
	ТекстТелефонаЗаполнен = (ЗначениеЗаполнено(Текст) И Не СокрЛП(Текст) = КодСтраны);
	Если ТекстТелефонаЗаполнен И ЗначениеЗаполнено(ОтправкаЧекаПочта) Тогда
		ОтправкаЧекаПочта = НСтр("ru = ''");
	ИначеЕсли Не ТекстТелефонаЗаполнен И Не ТекущийЭлемент = Элемент Тогда
		ТекущийЭлемент = Элемент;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправкаЧекаПочта, НЕ ТекстТелефонаЗаполнен);
	ИнтерфейсРМКСлужебныйКлиент.НастроитьСвойстваКнопкиПробитьИОтправить(ЭтотОбъект, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрокаРедактированияКоличества = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Если Не ВводСЦифровойКлавиатуры Тогда
		ПроверитьОбработатьИзменениеКоличестваТовара();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБонусамиПриИзменении(Элемент)
	
	Если СуммаОплаченоБонусами > Элементы.СуммаОплаченоБонусами.МаксимальноеЗначение Тогда
		СуммаОплаченоБонусами = 0;
	КонецЕсли;
	
	Если Объект.Товары.Итог("СуммаСкидкиОплатыБонусом") > 0 Тогда
		
		НоваяСуммаОплатыБонусами		= СуммаОплаченоБонусами;
		ОчиститьДанныеКартыПокупателя	= Ложь;
		ОтменитьПримененныеБонусы(ОчиститьДанныеКартыПокупателя);
		СуммаОплаченоБонусами = НоваяСуммаОплатыБонусами;
		
	КонецЕсли;
	
	ОбнулятьСуммыОплат = Ложь;
	
	СуммаБонусов = СуммаОплаченоБонусами;
	РаспределитьБонусыПоТоварам();
	ПересчитатьИтогиТабличнойЧастиТовары(ОбнулятьСуммыОплат);
	
	Если СуммаОплаченоБН > 0 ИЛИ СуммаОплаченоНал > 0
		ИЛИ СуммаОплаченоВРассрочку > 0 ИЛИ СуммаОплаченоЗачетАванса > 0 Тогда
		
			ЭтоОперацияВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
			
			ПараметрыПересчета							= СтруктураПараметровПересчетаСуммОплаты();
			ПараметрыПересчета.ПриИзмененииБНОплаты		= СуммаОплаченоБН > 0;
			ПараметрыПересчета.ПересчитыватьОкругление	= НЕ ЭтоОперацияВозврат;
			ПараметрыПересчета.ПоКомандеОплатитьВсюСуммуБонусами = СуммаОплаченоБонусами > 0
				И (СуммаБонусов = СуммаОплаченоБонусами) И СуммаКОплате = 0;
			
			РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПереключательПриИзменении(Элемент)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	
	ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, ТекущаяСтрока);
	ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура СистемаНалогообложенияЧекаКоррекцииПриИзменении(Элемент)
	
	ЭтоОбщаяСНО = СистемаНалогообложенияЧекаКоррекции =
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыСистемНалогообложенияККТ.ОСН");
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДС, ЭтоОбщаяСНО);
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДСПереключатель, ЭтоОбщаяСНО);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплатаСертификатамиПриИзменении(Элемент)
	
	ИдентификаторСертификата = СтрЗаменить(Элемент.Имя, "СуммаСертификата_", "");
	
	Если ЗначениеЗаполнено(ИдентификаторСертификата) Тогда
		
		ИзменитьСуммуПодарочногоСертификата(ИдентификаторСертификата, Элемент.Имя);
		ПересчитатьСуммыОплатыПриРедактированииСертификатов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМДляОперацииПриИзменении(Элемент)
	ПриПереключенииКассыККМ();
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварКоличествоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЭтоВводСуммы = ЭтоПолеВводаДробнойСуммы(Элемент.ТекстРедактирования);
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент, Не ЭтоВводСуммы);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварКоличествоАвтоПодбор(Элемент, Текст, ДанныеВыбора,
		ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	ЭтоВводСуммы = ЭтоПолеВводаДробнойСуммы(Элемент.ТекстРедактирования);
	СменитьПереключитьЦифровуюПанель(Элемент, Не ЭтоВводСуммы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварСкидкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварЦенаИзКарточкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварЦенаИзКарточкиАвтоПодбор(Элемент, Текст, ДанныеВыбора,
		ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	СменитьЭлементВводаСуммы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеСкидкиНаЧекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБонусамиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоНалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоВРассрочкуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоЗачетАвансаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплатаСертификатамиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаВыемкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаВнесениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБонусамиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоНалОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБНОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоВРассрочкуОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоЗачетАвансаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБезналПриИзменении(Элемент)
	
	ЗачестьОплатуБезналом();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНаличныхКВыдачеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаНаличныхКВыдачеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)

	СуммаЧислом = Число(Текст);
	ДопустимаяКратность = 100;
	ТекстПредупреждения = НСтр("ru = ''");
	ЗначениеПоУмолчанию = 5000;
	
	Если СуммаЧислом % ДопустимаяКратность <> 0 Тогда

		УведомлениеОНарушенииКратности = НСтр("ru = 'Сумма выдачи наличных должна быть кратной %1 %2'");
		НарушениеКратности = СтрШаблон(УведомлениеОНарушенииКратности, ДопустимаяКратность, ПредставлениеВалюты);
		ТекстПредупреждения = СтрШаблон("%1%2", НарушениеКратности, Символы.ПС);
		
	КонецЕсли;
		
	Если СуммаЧислом > ЗначениеПоУмолчанию Тогда
		
		ТекстШаблон = НСтр("ru = 'Допустимый лимит: 5000 %1 в сутки по всем картам одного банка.'");
		НарушениеЛимита = СтрШаблон(ТекстШаблон, ПредставлениеВалюты);
		ТекстПредупреждения = СтрШаблон("%1%2%3", ТекстПредупреждения, НарушениеЛимита, Символы.ПС);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстПредупреждения) Тогда
	
		ЗаголовокПредупреждения = НСтр("ru = 'Ограничение суммы выдачи наличных'");
		ПоказатьПредупреждение(, ТекстПредупреждения, , ЗаголовокПредупреждения);
		СуммаНаличныхКВыдаче = 0;
	
	КонецЕсли;
	
	УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоКредитомПриИзменении(Элемент)
	
	Если НЕ ПараметрыОплатыКредитом = Неопределено Тогда
		ПараметрыОплатыКредитом.Сумма = СуммаОплаченоКредитом;
	КонецЕсли;
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура КассирДляВходаПриИзменении(Элемент)
	
	КассирПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговыйОбъектДляВходаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТорговыйОбъектДляВхода) Тогда
		ТекущийЭлемент = Элементы.КассирДляВхода;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура КассирДляВходаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытиеПереопределено = Ложь;
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьФормуВыбораКассира(ЭтотОбъект, СобытиеПереопределено);
	Если СобытиеПереопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОбработкаОповещения = Новый ОписаниеОповещения("ВыборКассираЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораПродавца",, ЭтотОбъект,,,,
		ОбработкаОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводТовараПоСтрокеПриИзменении(Элемент)
	ДобавитьТоварПоСтрокеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоQRКодомПриИзменении(Знач СуммаОплаченоQRКодом, ЭлементГруппыОплаты)
	
	ОбновлятьСуммуАванса = Истина;
	ПерерасчитатьСуммыОплаты();
	ОбновлятьСуммуАванса = (РежимЦифровойПанели = РежимыЦифровойПанели.ВводСуммОплаты);

	Если СуммаОплаченоQRКодом > 0 И (Не ПереключениеЦифровойПанели)
		И (Не РежимЦифровойПанели = РежимыЦифровойПанели.ВводСуммОплаты) Тогда
		
		НачатьОплатуЧекаСБП(СуммаОплаченоQRКодом, ЭлементГруппыОплаты);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура НачатьОплатуЧекаСБП(СуммаОплаченоQRКодом, ЭлементГруппыОплаты)
	
	СуммаКОплате		 = СуммаОплаченоQRКодом;
		
	НомерВидаОплаты  	 = Число(Прав(ЭтотОбъект.ПлатежныеСистемы_ВыбраннаяКоманда,1));
	ИдентификаторПС  	 = Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Получить(НомерВидаОплаты-1).Значение;

	КлючПлатежнойСистемы = Новый Структура("ИдентификаторПС", ИдентификаторПС);
		
	ПлатежнаяСистема 	= ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПлатежнойСистемы)[0].ПлатежнаяСистема;
		
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Ложь);
	ОбработатьПробитиеЧекаНаКлиенте(ПлатежнаяСистема);
		
	УстановитьВидимостьЭлементаФормы(ЭлементГруппыОплаты, Ложь);
	ПлатежныеСистемы_ВыбраннаяКоманда = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьСБПНажатие(Элемент)
	
	СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоQRКодомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПанелиДанныеПокупателяПриИзменении(Элемент)
	
	ОбработатьИзменениеРежимаПанелиДанныхПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьПромокодНажатие(Элемент)
	ОтменитьПрименениеПромокода(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаКартыИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если ТребуетсяНастройкаКнопокЦифровойПанели(Текст) Тогда
		СтрокаПоискаКарты = Текст;
		НастроитьКнопкиЦифровойПанели();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПовторныйПоискКартыИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если ТребуетсяНастройкаКнопокЦифровойПанели(Текст) Тогда
		СтрокаПоискаКарты = Текст;
		НастроитьКнопкиЦифровойПанели();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойШтрихкодДляПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент, Истина);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойШтрихкодДляПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьПереключитьЦифровуюПанель(Элемент, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодДляПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент, Истина);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодДляПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НомерСертификатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент, Истина);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НомерСертификатаАвтоПодбор(Элемент, Текст, ДанныеВыбора,
		ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	СменитьЭлементВводаСуммы(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаУправленияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаГорячиеКлавиши Тогда
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара Тогда
			Элементы.ГруппаУправления.ТекущаяСтраница = Элементы.ГруппаСтраницаПоискТоваров;
		ИначеЕсли Элементы.ГруппаОперации.Видимость Тогда
			Элементы.ГруппаУправления.ТекущаяСтраница = Элементы.ГруппаСтраницаОперации;
		Иначе
			Элементы.ГруппаУправления.ТекущаяСтраница = Элементы.ГруппаКомандаДекорация;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеСуммыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеСуммыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьПереключитьЦифровуюПанель(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеСуммыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	Если ЕстьНеЗавершенныеДействияПоТекущейСтроке() Или Не Доступность Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено ИЛИ ФормаЗамороженаПослеПробитияЧека() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ТоварКЗамене ИЛИ ВыбранБанковскийПлатеж
		ИЛИ (ТекущаяСтрока.Подарок И НЕ ТекущаяСтрока.ПроверятьЗаполнениеСерий) Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРедактированияСтрокиКорзины, Ложь);
	Иначе
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРедактированияСтрокиКорзины, Истина);
	КонецЕсли;
	
	НастроитьПредставлениеТовара(ТекущаяСтрока);
	НастроитьТекущуюЦену(ТекущаяСтрока);
	НастроитьТекущееКоличество(ТекущаяСтрока);
	НастроитьПодсказкуДляВыбораСерийИПартий(ТекущаяСтрока);
	НастроитьВидимостьЗапросаБалансаСертификата();
	ТекущийТоварИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	ТекущийТоварИндексСтроки = Объект.Товары.Индекс(ТекущаяСтрока);
	ТекущийТоварСуммаСкидки = ТекущаяСтрока.СуммаСкидкиНаценки;
	Если ОтображатьОстаток Тогда
		ТекущийТоварОстаток = СтрШаблон(НСтр("ru = 'Доступно: %1 %2'"),ТекущаяСтрока.КоличествоОстаток, ТекущаяСтрока.ПредставлениеЕдиницыИзмерения);
	КонецЕсли;
	
	Если ТекущаяСтрока.ОтображаетсяСкидкаСуммой Тогда
		
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветаФормы.АктивнаяКнопка;
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветаФормы.Авто;
		ЗначениеСкидкиНаПозицию = СуммаРучнойСкидкиНаПозицию(ТекущаяСтрока);
		ТекущийТоварСкидка = ЗначениеСкидкиНаПозицию;
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
		
	ИначеЕсли ТекущаяСтрока.ОтображаетсяСкидкаПроцентом Тогда
		
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветаФормы.АктивнаяКнопка;
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветаФормы.Авто;
		ТекущийТоварСкидка = ТекущаяСтрока.ПроцентСкидкиНаценки;
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
		
	Иначе
		
		ТекущийТоварСкидка = 0;
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветаФормы.Авто;
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветаФормы.Авто;
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Истина);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяОперация) И ДанныеДляРучногоСопоставления = Неопределено Тогда
		
		ЭтоМаркируемыйТоварВЧекеКоррекции = ЭтоЧекКоррекции И ТекущаяСтрока.НеобходимостьВводаКодаМаркировки;
		
		ЭтоПроверкаМарки = ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки);
		УстановитьДоступностьЭлементаФормы(Элементы.УдалитьТовар,
			НЕ (ЭтоМаркируемыйТоварВЧекеКоррекции ИЛИ ЭтоПроверкаМарки));
			
		ТекущийСлойСлужебнойИнформацииЧека
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
		
		Если ТекущаяСтрока.НеобходимостьВводаКодаМаркировки
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки)
			И НЕ ЭтоЧекКоррекции Тогда
			
			Если Не ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаНеверноОтсканированныйШтрихкод
				И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаИнфоОшибка
				И Не ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаНайтиПоШтрихкоду Тогда
				
				СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
				ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаОтсканироватьМарку);
				СформироватьТекстВводМарки();
				ОграничитьДоступностьЭлементовПриОжиданииМарки(Истина);
			
			ИначеЕсли ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаИнфоОшибка Тогда
				
				ТекущийЭлемент = Элементы.ЗакрытьСтраницуИнфоОшибка;
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Не ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаИнфоОшибка
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаОтменаОплатыПоКарте
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаСторноЭквайринг
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаСерииИПартии
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаВыборЭквайринговогоТерминала
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаПанельИдентификаторКорзиныНСПК
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаЗаменаПрав
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаВопросАвтономнаяКасса
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаДанныеПокупателя
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаНайтиВЧеке
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаНайтиПоШтрихкоду
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаВвестиКомментарийКЧеку
			И НЕ ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) Тогда
			
			Если Не ТекущийСлойСлужебнойИнформацииЧека = Элементы.ОбластьОперативногоУправленияЧеком Тогда
				СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
				ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект,
					Элементы.ОбластьОперативногоУправленияЧеком);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьДоступностьКомандИзмененияКоличества(ТекущаяСтрока);
	НастроитьКомандуУказатьСерии(ТекущаяСтрока);
	НастроитьГруппуПримененныеУправляемыеСкидки(ТекущаяСтрока);
	НастроитьГруппуДанныеДляТекущейСтроки(ТекущаяСтрока);
	
	ДобавленВесовойНеФасованныйТовар = ТекущаяСтрока.Весовой И НЕ ТекущаяСтрока.Фасованный;
	УстановитьДоступностьЭлементаФормы(Элементы.ПолучитьВес, ДобавленВесовойНеФасованныйТовар);
	ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
	
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления)
		= Элементы.ПанельУправленияЧеком
		Или Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ОбластьОперативногоУправленияЧеком Тогда
		
		ВыйтиИзРежимаПлитки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанныеСпискаТоваров = Элементы.СписокТоваров.ТекущиеДанные;
	
	Если ТекущиеДанныеСпискаТоваров = Неопределено Тогда
		ИзменитьСостояниеЗаголовкаСтраницыПоискаТовара();
		Возврат;
	КонецЕсли;
	
	Если РежимВыбораПодарочногоСертификата Тогда
		
		ОбработатьРежимВыбораПодарочногоСертификатаКлиент(ТекущиеДанныеСпискаТоваров.Номенклатура);
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ВводТовараПоСтроке = "";
	СписокТоваровВыборКлиент(ТекущиеДанныеСпискаТоваров);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйСписокТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыборПодарка = РежимВыбораПодарка;
	ТекущиеДанныеСпискаТоваров = Элементы.ДополнительныйСписокТоваров.ТекущиеДанные;
	
	Если ТекущиеДанныеСпискаТоваров = Неопределено Тогда
		ИзменитьСостояниеЗаголовкаСтраницыПоискаТовара(, Истина);
		Возврат;
	КонецЕсли;
	
	Если РежимВыбораПодарочногоСертификата Тогда
		
		ОбработатьРежимВыбораПодарочногоСертификатаКлиент(ТекущиеДанныеСпискаТоваров.Номенклатура);
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ВводТовараПоСтроке = "";
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаСписокТоваров);
	НастроитьВидимостьЭлементовГруппыПоискаТовара();
	СписокТоваровВыборКлиент(ТекущиеДанныеСпискаТоваров);
	
	Если ВыборПодарка И ТаблицаПодарков.Количество() Тогда
		ПодключитьОбработчикОжидания("ОткрытьФормуВыбораПодарков", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	УдалитьТоварНаКлиенте();
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КомандыОплаты

&НаКлиенте
Процедура ОплатаКартой(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ВыполнитьОплатуКартой(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаНаличными(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция
		Или Элементы.ГруппаОплатаНал.Видимость Тогда
		
		ОплатаНаличнымиЗавершение(КодВозвратаДиалога.Нет);
		
	Иначе
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ОплатаНаличнымиЗавершение", , Истина);
		Иначе
			ОплатаНаличнымиЗавершение(?(НеобходимПересчетАвтоматическихСкидок, КодВозвратаДиалога.Да, КодВозвратаДиалога.Нет));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВРассрочку(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если Элементы.ГруппаОплатаВРассрочку.Видимость Тогда
		Если Не ПоказатьОшибкуУдаленияПредоплатыРассрочки() Тогда
			ОплатаВРассрочкуНаКлиенте();
		КонецЕсли;
	Иначе
		ИнициализироватьВводОплатыВРассрочку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Предоплата(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если Элементы.ГруппаОплатаПредоплата.Видимость Тогда
		Если Не ПоказатьОшибкуУдаленияПредоплатыРассрочки() Тогда
			ПредоплатаНаКлиенте();
		КонецЕсли;
	Иначе
		ИнициализироватьВводПредоплаты();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОплатаСертификатомНСПК(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция Тогда
		ОплатаСертификатомНСПКЗавершение(КодВозвратаДиалога.Нет);
	Иначе
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ОплатаСертификатомНСПКЗавершение", , Истина);
		Иначе
			ОплатаСертификатомНСПКЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетАванса(Команда)

	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция Тогда
		ЗачетАвансаЗавершение(КодВозвратаДиалога.Нет);
	Иначе
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ЗачетАвансаЗавершение", , Истина);
		Иначе
			ЗачетАвансаЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Безнал(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция Тогда
		БезналЗавершение(КодВозвратаДиалога.Нет);
	Иначе
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("БезналЗавершение", , Истина);
		Иначе
			БезналЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаТоваров(Команда)
	
	ЗаменаТоваровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаКредитом(Команда)

	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция
		Или Элементы.ГруппаОплатаКредитом.Видимость Тогда
		
		ОплатаКредитомЗавершение(КодВозвратаДиалога.Нет);
		
	Иначе
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ОплатаКредитомЗавершение", , Истина);
		Иначе
			ОплатаКредитомЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаБонусами(Команда)

	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект) Тогда
		ВвестиДанныеПокупателяКлиент();
	ИначеЕсли Элементы.ГруппаОплатаБонусами.Видимость Тогда
		ОтменитьОплатуБонусами();
	Иначе
		ОплатитьБонусами(Команды.ОплатитьБонусами);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаКартойВТихомРежиме(Команда)
	Если Объект.Товары.Количество() > 0 И Не ФормаЗамороженаПослеПробитияЧека() Тогда 
		ОплатитьКартойВТихомРежиме();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОплатаНаличнымиВТихомРежиме(Команда)
	Если Объект.Товары.Количество() > 0 И Не ФормаЗамороженаПослеПробитияЧека() Тогда
		ОплатитьНаличнымиВТихомРежиме();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомандаОплатаQRКодом(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	СистемыНалогообложенияТоваровВКорзине = РазличныеСНОВСпискеПокупок();
		
	Если Не ЗначениеЗаполнено(ВыбраннаяОрганизация) Тогда

		Если СистемыНалогообложенияТоваровВКорзине.Количество() = 0 Тогда
			ОрганизацияПлатежнойСистемы = ОсновнаяОрганизация;
		Иначе
			
			Для Каждого СтрокаСНО Из СистемыНалогообложенияТоваровВКорзине Цикл
				
				КлючПроверки = Новый Структура("Организация", СтрокаСНО.Организация);
				Если ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПроверки).Количество() Тогда
					ОрганизацияПлатежнойСистемы = СтрокаСНО.Организация;  
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

	Иначе
		ОрганизацияПлатежнойСистемы = ВыбраннаяОрганизация;
	КонецЕсли;
	
	Если Команда.Имя = "КомандаПлатежнаяСистема_ОплатаЮКасса" Тогда
		ПлатежнаяСистемаККТ = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.ЮКасса");
	ИначеЕсли Команда.Имя = "КомандаПлатежнаяСистема_ОплатаСБП" Тогда
		ПлатежнаяСистемаККТ = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей"); 
	КонецЕсли;
	
	СтруктураОрганизацияИСНО = ВыбраннаяОрганизацияИСНО();
	Если ПробитыеЧеки.НайтиСтроки(СтруктураОрганизацияИСНО).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибки оплаты'");
	
	Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Очистить();
	
	ОтборСтрок = Новый Структура("Организация, ПлатежнаяСистема", ОрганизацияПлатежнойСистемы, ПлатежнаяСистемаККТ);
	Для Каждого СтрокаВидОплаты Из ПлатежнаяСистема_ВидыОплат.НайтиСтроки(ОтборСтрок) Цикл
		Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Добавить(СтрокаВидОплаты.ИдентификаторПС,
			СтрокаВидОплаты.Представление);
	КонецЦикла;
	
	ЭтоОперацияПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	Если НЕ ЗначениеЗаполнено(ОрганизацияПлатежнойСистемы) Тогда
		
		ТекстОшибки = НСтр("ru = 'Есть ошибки заполнения табличной части.'");
		
	ИначеЕсли СистемыНалогообложенияТоваровВКорзине.Количество() > 1 И Не ЭтоОперацияПродажа Тогда

		ТекстОшибки = НСтр("ru = 'В корзине покупателя товары по нескольким организациям. Оплата QR-кодом недоступна.'");
		
	ИначеЕсли ПриемАванса
		И СуммаКОплате <> СуммаИтого Тогда 
		
		ТекстОшибки = НСтр("ru = 'Для приема аванса совместное использование с другими видами оплат не поддерживается.'");
		
	ИначеЕсли Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Количество() = 0 Тогда
		
		Если Объект.Товары.Количество() > 0 Тогда

			Если ПлатежнаяСистемаККТ = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.ЮКасса") Тогда
				ТекстОшибки = НСтр("ru = 'В корзине покупателя товары организации, к которой не подключена оплата по ЮКассе.'");
			ИначеЕсли ПлатежнаяСистемаККТ = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей") Тогда
				ТекстОшибки = НСтр("ru = 'В корзине покупателя товары организации, к которой не подключена оплата Сервисом быстрых платежей.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'В корзине покупателя товары организации, к которой не подключена выбранная оплата.'");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ЭтоОперацияПродажа Тогда
			
			Если ЗначениеЗаполнено(ЧекККМПродажа) Тогда
				
				Если ЗначениеЗаполнено(ЧекККМПродажа)
					И НЕ ПлатежнаяСистема_ВозможенВозврат Тогда 
					
					ТекстОшибки = НСтр("ru = 'По выбранному чеку нельзя провести оплату.'");
					
				ИначеЕсли ЭтотОбъект.ПлатежныеСистемы_СуммаКВозврату > 0 
					И СуммаКОплате > ЭтотОбъект.ПлатежныеСистемы_СуммаКВозврату Тогда 
					
					ТекстОшибки = НСтр("ru = 'Превышена допустимая сумма возврата %1 %3.
					|Заполните разницу %2 %3 другими видами оплат и нажмите на оплату СБП еще раз.'");

					ТекстОшибки = СтрШаблон(
						ТекстОшибки, 
						ЭтотОбъект.ПлатежныеСистемы_СуммаКВозврату, 
						СуммаКОплате - ЭтотОбъект.ПлатежныеСистемы_СуммаКВозврату,
						ПредставлениеВалюты);
					
				ИначеЕсли ЗначениеЗаполнено(ПлатежнаяСистема_ИдентификаторПС) Тогда
					
					Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Очистить();
					Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Добавить(ПлатежнаяСистема_ИдентификаторПС);
					
				КонецЕсли;
	
			КонецЕсли;
			
		Иначе
			
			Если Объект.Оплачивается
				И ЗначениеЗаполнено(ПлатежнаяСистема_ИдентификаторПС) Тогда
					
				Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Очистить();
				Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Добавить(ПлатежнаяСистема_ИдентификаторПС);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки);
		
	ИначеЕсли Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Количество() > 0 Тогда

		ПродолжитьВыбор	= Новый ОписаниеОповещения(
			"ПродолжитьВыборПлатежнойСистемы", 
			ЭтотОбъект, 
			Новый Структура("КомандаИмя", Команда.Имя));

		КомандыВыбора 	= Новый СписокЗначений;
		Ном 			= 0;
		
		Для Каждого ЭлементЗначение Из Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора Цикл
			
			Ном = Ном + 1;
			КомандыВыбора.Добавить("КомандаВыборВидаОплаты" + Ном, ЭлементЗначение.Представление);
			
		КонецЦикла;
		
		Если Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Количество() > 1 Тогда
			
			ПоказатьВыборИзМеню(
				ПродолжитьВыбор, 
				КомандыВыбора, 
				Элементы[СтрЗаменить(Команда.Имя, "КомандаПлатежнаяСистема_", "")]);
				
		Иначе
			ВыполнитьОбработкуОповещения(ПродолжитьВыбор, КомандыВыбора[0]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗавершитьОплатуПлатежнойСистемой(Команда)
	
	ЗавершитьЭтапОплатыПлатежнойСистемой();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПлатежнаяСистема_Пречек(Команда)
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПечатьПречека(ЭтотОбъект, Истина, ПлатежнаяСистема_НоваяЗаявка.ПодключаемоеОборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИнструкция(Команда)
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиДействийПлатежнойСистемы)
		= Элементы.ГруппаQRКод Тогда
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаИнструкция);
		Элементы.ФормаОтложить.Видимость    				= Истина;
		Элементы.ФормаОтложить.Заголовок    				= НСтр("ru = 'QR код'");
		
	ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиДействийПлатежнойСистемы)
		= Элементы.ГруппаQRКодПовтор Тогда
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаИнструкцияПовтор);
		Элементы.ФормаОтложить.Видимость    				= Истина;
		Элементы.ФормаОтложить.Заголовок    				= НСтр("ru = 'QR код'");

		Элементы.ФормаЗавершитьПринудительно.Видимость    	= Ложь;
		
	ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиДействийПлатежнойСистемы)
		= Элементы.ГруппаИнструкцияПовтор Тогда
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаQRКодПовтор);
		ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.НастроитьФормуПоИнтеграции(ЭтотОбъект);

	Иначе
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаQRКод);
		ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.НастроитьФормуПоИнтеграции(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменитьОплату(Команда)
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиДействийПлатежнойСистемы)
		= Элементы.ГруппаОшибка Тогда
		
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
		
	Иначе
		
		Отказ = Ложь;
		ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
		
		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОтменитьОперацию(ЭтотОбъект, ОповещениеЗавершитьОплату, Отказ);
		
		Если Не Отказ Тогда
			СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтложить(Команда)
	
	ТекущийСлойГруппы
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиДействийПлатежнойСистемы);
		
	Если ТекущийСлойГруппы = Элементы.ГруппаQRКод
		ИЛИ ТекущийСлойГруппы = Элементы.ГруппаИнструкция 
		ИЛИ ТекущийСлойГруппы = Элементы.ГруппаИнструкцияПовтор Тогда
		
		КомандаИнструкция(Команда);
		
	Иначе
		
		ОповещениеОтложитьЧек = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
		
		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОтложитьЧек(ЭтотОбъект, ОповещениеОтложитьЧек);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗавершитьПринудительно(Команда)
	
	ЗавершитьОплатуПринудительно();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьПринудительно(Команда)

	ОповещениеЗавершитьОтмену = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);

	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПанельДействий);
	
	Если ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПрерватьОперацию(ЭтотОбъект, ОповещениеЗавершитьОтмену) Тогда
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыборВидаОплаты(Команда)
	
	НомерВидаОплаты = Число(Прав(Команда.Имя,1));
	ВариантыВыбора = Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.ВыгрузитьЗначения();
	ПлатежнаяСистема_ИдентификаторПС = ВариантыВыбора[НомерВидаОплаты-1];
	
	ИнициализацияПанелиДействийПлатежнойСистемы(ПлатежнаяСистема_ИдентификаторПС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьНайтиВЧеке(Команда)
	Если РежимПоказаСкидок Тогда
		НайтиТоварРасшифровкеСкидок(ШтрихкодДляПоиска);
	Иначе
		НайтиТоварВЧеке(ШтрихкодДляПоиска);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзбранноеВыбор(Команда, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТребуетсяПовышениеПрав = Ложь;
	ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав);
	Если Не ТребуетсяПовышениеПрав Тогда
		ОбработатьИзбранноеВыбор(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСопутствующиеТоварыПриДобавленииНоменклатуры(СтруктураНоменклатуры)
	
	Если ИзбранныеПозиции.Количество() Тогда
		
		ОтборСопутствующихТоваров = Новый Структура;
		ОтборСопутствующихТоваров.Вставить("Номенклатура");
		ОтборСопутствующихТоваров.Вставить("Характеристика");
		ЗаполнитьЗначенияСвойств(ОтборСопутствующихТоваров, СтруктураНоменклатуры);
		
		СопутствующиеТовары = ИзбранныеПозиции.НайтиСтроки(ОтборСопутствующихТоваров);
		Для Каждого НоменклатураВладелец Из СопутствующиеТовары Цикл
			Если НоменклатураВладелец.ИмеетсяВложенность Тогда
				
				Элементы.ПанельИзбранныхТоваров.Заголовок = НСтр("ru='Сопутствующие товары'");
				
				Если Не ТекущаяСтраницаКнопок = НоменклатураВладелец.НомерКатегории Тогда
					ТекущаяСтраницаКнопок = НоменклатураВладелец.НомерКатегории;
					ЗаполнитьКнопкиИзбранныхПозицийСРазморозкой(Ложь);
				КонецЕсли;
			КонецЕсли;
			
			Элементы.ПанельИзбранныхТоваров.Показать();
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТовар(Команда)
	
	УдалитьТоварНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварУменьшитьКоличество(Команда)
	
	Если ТекущийТоварКоличество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьДанныеПриИзмененииКоличества();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварУвеличитьКоличество(Команда)
	ПересчитатьДанныеПриИзмененииКоличества(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СкидкаТекущийТоварПроцент(Команда)
	
	Если СкидкиРассчитаны И РаботаВРежимеМедленногоСоединения Тогда
		ЗадатьВопросПоРасчетуСкидок("СкидкаТекущийТоварПроцентЗавершение");
	Иначе
		СкидкаТекущийТоварПроцентЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаТекущийТоварУправляемая(Команда)
	
	ДополнительныеПараметры = Новый Структура("ОбластьДействия", "На строку");
	Если СкидкиРассчитаны Тогда
		ЗадатьВопросПоРасчетуСкидок("УправляемыеСкидкиЗавершение", ДополнительныеПараметры);
	Иначе
		УправляемыеСкидкиЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнаяСкидкаПроцентомПоСтроке(СтрокаЧека)

	Если Не СтрокаЧека = Неопределено И Не СтрокаЧека.Подарок Тогда
		
		СкидкиРазрешены = (Не СтрокаЧека.ЗапретОплатыБонусамиСкидками);
		ЦветФонаНеактивнойКнопки = ЦветаФормы.Авто;
		ЦветФонаАктивнойКнопки = ЦветФонаНеактивнойКнопки;
		ПересчитыватьСуммуСтроки = Истина;
		
		Если ДопустимоПрименениеСкидкиПоСтроке(СтрокаЧека, СкидкиРазрешены, ТекущийТоварСкидка) Тогда
			
				ПредупредитьОПревышенииРучнойСкидки = Ложь;
				
				Если ТекущийТоварСкидка > МаксимальныйПроцентРучнойСкидки Тогда
					
					ТекущийТоварСкидка = МаксимальныйПроцентРучнойСкидки;
					ПредупредитьОПревышенииРучнойСкидки = Истина;
					
				КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаЧека.МинимальнаяЦена) И ЗначениеЗаполнено(СтрокаЧека.СуммаБезСкидки) Тогда
				
				Если ЗначениеЗаполнено(ТекущийТоварЦенаИзКарточки) Тогда
					ЦенаДляРасчетаСкидкиПоМРЦ = ТекущийТоварЦенаИзКарточки;
				ИначеЕсли ЗначениеЗаполнено(СтрокаЧека.Цена) Тогда
					ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаЧека.Цена;
				Иначе
					ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаЧека.МинимальнаяЦена;
				КонецЕсли;
				
				ПределСкидкиПоМРЦ = (ЦенаДляРасчетаСкидкиПоМРЦ - СтрокаЧека.МинимальнаяЦена)
					* СтрокаЧека.Количество / СтрокаЧека.СуммаБезСкидки * 100;
				
				Если ТекущийТоварСкидка > ПределСкидкиПоМРЦ Тогда
					
					ТекущийТоварСкидка = ПределСкидкиПоМРЦ;
					ПредупредитьОПревышенииРучнойСкидки = Ложь;
					ПредупредитьОПревышенииМинимальнойЦены(СтрокаЧека.МинимальнаяЦена);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПредупредитьОПревышенииРучнойСкидки Тогда
				
				ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Максимальная величина ручной скидки: %1 %%.'"),
					ТекущийТоварСкидка);
				ПоказатьПредупреждение(, ТекстПредупреждения);
				
			КонецЕсли;
			
			СтрокаЧека.ПроцентСкидкиНаценки = ТекущийТоварСкидка;
			
		ИначеЕсли СкидкиРазрешены И СтрокаЧека.РассчитанаСкидка И СтрокаЧека.ОтображаетсяСкидкаСуммой Тогда
			
			ТекущийТоварСкидка = СтрокаЧека.СуммаСкидкиНаценки / СтрокаЧека.СуммаБезСкидки * 100;
			СтрокаЧека.ПроцентСкидкиНаценки = ТекущийТоварСкидка;
			Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаНеактивнойКнопки;
			ПересчитыватьСуммуСтроки = Ложь;
			СтрокаЧека.ОтображаетсяСкидкаПроцентом = Истина;
			СтрокаЧека.ОтображаетсяСкидкаСуммой = Не СтрокаЧека.ОтображаетсяСкидкаПроцентом;
			
		Иначе
			
			СтрокаЧека.СуммаСкидкиНаценки = 0;
			СтрокаЧека.ПроцентСкидкиНаценки = 0;
			ТекущийТоварСкидка = 0;
			
		КонецЕсли;
		
		СтрокаЧека.РассчитанаСкидка = (ТекущийТоварСкидка > 0);
		
		Если СтрокаЧека.РассчитанаСкидка Тогда
			ЦветФонаАктивнойКнопки = ЦветаФормы.АктивнаяКнопка;
		КонецЕсли;
		
		Если ПересчитыватьСуммуСтроки Тогда
			
			Если Не СкидкиРассчитаны Тогда
				ИдентификаторСтроки = СтрокаЧека.ПолучитьИдентификатор();
				РассчитатьСуммуВСтрокеТабличнойЧасти(ИдентификаторСтроки);
			КонецЕсли;
			ОбновитьИнформациюНаДисплееПокупателя("ИзменениеЦены");
			
		КонецЕсли;
		
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаАктивнойКнопки;
		ДоступностьСкидкиСуммой = Не СтрокаЧека.РассчитанаСкидка;
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьСкидкиСуммой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаТекущийТоварСумма(Команда)
	
	Если СкидкиРассчитаны И РаботаВРежимеМедленногоСоединения Тогда
		ЗадатьВопросПоРасчетуСкидок("СкидкаТекущийТоварСуммаЗавершение");
	Иначе
		СкидкаТекущийТоварСуммаЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнаяСкидкаСуммойПоСтроке(СтрокаЧека)

		Если Не СтрокаЧека = Неопределено Тогда
		
		СкидкиРазрешены = (Не СтрокаЧека.ЗапретОплатыБонусамиСкидками);
		ЦветФонаНеактивнойКнопки = ЦветаФормы.Авто;
		ЦветФонаАктивнойКнопки = ЦветФонаНеактивнойКнопки;
		ПересчитыватьСуммуСтроки = Истина;
		
		Если ДопустимоПрименениеСкидкиПоСтроке(СтрокаЧека, СкидкиРазрешены, ТекущийТоварСкидка) Тогда
			
			ПредупредитьОПревышенииРучнойСкидки = Ложь;
			МаксимальнаяСкидка = СтрокаЧека.СуммаБезСкидки * МаксимальныйПроцентРучнойСкидки / 100;
			
			Если ТекущийТоварСкидка > МаксимальнаяСкидка Тогда
				
				ТекущийТоварСкидка = МаксимальнаяСкидка;
				ПредупредитьОПревышенииРучнойСкидки = Истина;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаЧека.МинимальнаяЦена) Тогда
				
				Если ЗначениеЗаполнено(ТекущийТоварЦенаИзКарточки) Тогда
					ЦенаДляРасчетаСкидкиПоМРЦ = ТекущийТоварЦенаИзКарточки;
				ИначеЕсли ЗначениеЗаполнено(СтрокаЧека.Цена) Тогда
					ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаЧека.Цена;
				Иначе
					ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаЧека.МинимальнаяЦена;
				КонецЕсли;
				
				ПределСкидкиПоМРЦ = (ЦенаДляРасчетаСкидкиПоМРЦ - СтрокаЧека.МинимальнаяЦена)
					* СтрокаЧека.Количество;
				
				Если ТекущийТоварСкидка > ПределСкидкиПоМРЦ Тогда
					
					ТекущийТоварСкидка = ПределСкидкиПоМРЦ;
					ПредупредитьОПревышенииРучнойСкидки = Ложь;
					ПредупредитьОПревышенииМинимальнойЦены(СтрокаЧека.МинимальнаяЦена);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПредупредитьОПревышенииРучнойСкидки Тогда
				
				ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Максимальная величина ручной скидки: %1 %2'"),
					ТекущийТоварСкидка,
					ПредставлениеВалюты);
				ПоказатьПредупреждение(, ТекстПредупреждения);
				
			КонецЕсли;
			
			СтрокаЧека.СуммаСкидкиНаценки = ТекущийТоварСкидка;
			
		ИначеЕсли СкидкиРазрешены И СтрокаЧека.РассчитанаСкидка И СтрокаЧека.ОтображаетсяСкидкаПроцентом Тогда
			
			ТекущийТоварСкидка = СтрокаЧека.СуммаСкидкиНаценки;
			СтрокаЧека.СуммаСкидкиНаценки = ТекущийТоварСкидка;
			СтрокаЧека.ПроцентСкидкиНаценки = 0;
			Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаНеактивнойКнопки;
			ПересчитыватьСуммуСтроки = Ложь;
			СтрокаЧека.ОтображаетсяСкидкаСуммой = Истина;
			СтрокаЧека.ОтображаетсяСкидкаПроцентом = Не СтрокаЧека.ОтображаетсяСкидкаСуммой;
			
		Иначе
			
			СтрокаЧека.СуммаСкидкиНаценки = 0;
			СтрокаЧека.ПроцентСкидкиНаценки = 0;
			ТекущийТоварСкидка = 0;
			
		КонецЕсли;
		
		СтрокаЧека.РассчитанаСкидка = ТекущийТоварСкидка > 0;
		
		Если СтрокаЧека.РассчитанаСкидка Тогда
			ЦветФонаАктивнойКнопки = ЦветаФормы.АктивнаяКнопка;
		КонецЕсли;
		
		Если ПересчитыватьСуммуСтроки Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти();
			ОбновитьИнформациюНаДисплееПокупателя("ИзменениеЦены");
			
		КонецЕсли;
		
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаАктивнойКнопки;
		ДоступностьСкидкиПроцентом = Не СтрокаЧека.РассчитанаСкидка И (ТекущийТоварСкидка = 0);
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьСкидкиПроцентом);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтложитьЧек(Команда)
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	Если Объект.Товары.Количество() > 0 Тогда
		ОтложитьЧекПроверкаПрав();
	Иначе
		ОтложенныеЧекиПроверкаПрав();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЧек(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершение Тогда
		ЗакрытьПриложениеПриОшибке(Истина);
	Иначе
		Если РежимКассыСамообслуживания И Объект.Товары.Количество() = 0 Тогда
			
			НеобходимоеПраво = "ПравоЗавершениеРаботыРМК";
			ТекущаяОперация = "ЗавершениеРаботыРМК";
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
			ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
			
		Иначе
			УдалитьЧекПродолжение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныеЧеки(Команда)
	
	ОтложенныеЧекиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	Если ПриемАванса И СуммаОплаченоСБП = СуммаИтого Тогда
		НачатьОплатуЧекаСБП(СуммаОплаченоСБП, Элементы.ГруппаОплатаСБП);
	ИначеЕсли ПриемАванса И СуммаОплаченоЮКасса = СуммаИтого Тогда
		НачатьОплатуЧекаСБП(СуммаОплаченоЮКасса, Элементы.ГруппаОплатаЮКасса);
	Иначе
		ОбработатьПробитиеЧекаНаКлиенте(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Войти(Команда)
	
	Если Не ЗначениеЗаполнено(ТорговыйОбъектДляВхода) И Элементы.ГруппаВыборМагазинаДляВхода.Видимость
		И Не ЗначениеЗаполнено(ТекущаяОперация) Тогда
		ТекущийЭлемент = Элементы.ТорговыйОбъектДляВхода;
		ВывестиСообщениеОбОшибкеАвторизации("ПустойМагазин");
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(КодКассира) Тогда
		ТекущийЭлемент = Элементы.КодКассира;
		ВывестиСообщениеОбОшибкеАвторизации("ПустойКод");
		Возврат;
	КонецЕсли;
	
	ОбработатьШтрихкодКлиент(КодКассира);
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьКассира(Команда)
	
	СменитьМагазинИлиКассира();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПарольКассира(Команда)
	
	Если НЕ ЗначениеЗаполнено(КодДляЗаменыПрав) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьШтрихкодКлиент(КодДляЗаменыПрав);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПарольКассира(Команда)
	
	ОтменитьПарольКассираКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДанныеПокупателя(Команда)
	ТребуетсяПовышениеПрав = Ложь;
	ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав);
	Если Не ТребуетсяПовышениеПрав Тогда
		ВвестиДанныеПокупателяКлиент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайтиВЧеке(Команда)
	НайтиВЧекеНажатие();
КонецПроцедуры

&НаКлиенте
Процедура ОтменаНайтиВЧеке(Команда)
	НайтиВЧекеНажатие();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСтраницуИнфоОшибка(Команда)
	
	ЗакрытьСтраницуИнфоОшибкаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНет(Команда)
	ПерейтиНаСтраницуОплата();
КонецПроцедуры

&НаКлиенте
Процедура ОтветДа(Команда)
	
	Если ЗначениеЗаполнено(СуммаОплаченоБН) Тогда
		
		Если ВыдаватьНаличныеНаКассе И СуммаНаличныхКВыдаче > 0 Тогда
			СуммаНаличныхКВыдаче = 0;
		КонецЕсли;
		
		ОбщегоНазначенияРМККлиентПереопределяемый.ДозаполнитьДанныеПослеОплатыПоКарте(ЭтотОбъект);
		ТранзакцияПоКартеЗавершена = Истина;
		ТипОплаты = "Карта";
		
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Истина);
		
		НачатьПечатьЧека();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаОплатыОк(Команда)
	
	ТранзакцияПоКартеЗавершена = Ложь;
	ТипОплаты = "";
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Истина);
	ВывестиИнформациюНаДисплейПокупателя("ОтменаОплаты");
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	НастроитьДоступностьПробитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура Каталог(Команда)
	
	Если Не РежимПлитки И Не Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		Если ОжидатьВводМарки
			Или Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления)
			= Элементы.ПанельУправленияЧеком
			Или Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ОбластьОперативногоУправленияЧеком Тогда
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	ТребуетсяПовышениеПрав = Ложь;
	ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав);
	Если Не ТребуетсяПовышениеПрав Тогда
		КаталогПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПоискТоваров(Команда)
	ЗакрытьПоискТоваровКлиент();
	НастроитьДоступностьПробитьЧек();
	Если РежимВыбораПодарка Тогда
		ОчиститьПодаркиПоТекущемуВладельцу(Истина);
		ПодключитьОбработчикОжидания("ОткрытьФормуВыбораПодарков", 0.1, Истина);
	КонецЕсли;
	РежимВыбораПодарочногоСертификата = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧек(Команда)
	
	ОтправитьЧекКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВыемки(Команда)
	
	ВосстановитьЭлементыПослеВнесенияИлиВыемки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюВыемка(Команда)
	
	Если НЕ ЗначениеЗаполнено(СуммаВыемка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ВыполнитьОперациюВыемка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюВнесение(Команда)
	
	Если НЕ ЗначениеЗаполнено(СуммаВнесение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ВыполнитьОперациюВнесение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВнесения(Команда)
	
	ВосстановитьЭлементыПослеВнесенияИлиВыемки();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьТовар(Команда)
	
	Если ОжидатьВводМарки И НЕ ДанныеДляРучногоСопоставления = Неопределено Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			Отказ = Ложь;
			СопоставитьСТекущейСтрокой(Отказ);
			Если Отказ Тогда
				ДанныеДляРучногоСопоставления = Неопределено;
				Возврат;
			КонецЕсли;
			
			КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
			ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, ТекущаяСтрока);
			ЭтоОбработкаСопоставленияТовара = Истина;
			КонтекстПроверкиКонтрольнойМарки.ЭтоОбработкаСопоставленияТовара = ЭтоОбработкаСопоставленияТовара;
			ЗавершитьВводШтрихкодаМаркаВведена(КонтекстПроверкиКонтрольнойМарки);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	РучноеСопоставлениеТовара = Истина;
	ОткрытьКаталогКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаСопоставленияТовара(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ДанныеДляРучногоСопоставления = Неопределено;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
	Если НЕ ОжидатьВводМарки Тогда 
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
	КонецЕсли;
	
	ОсновнаяСтраница = Элементы.СтраницаПустая;
	
	АктивнаяГруппаСлоя = Элементы.ОбластьОперативногоУправленияЧеком;
	
	Если Объект.Товары.Количество() > 0 Тогда
	
		ОсновнаяСтраница = Элементы.СтраницаОбщая;
		Если ОжидатьВводМарки Тогда
			АктивнаяГруппаСлоя = Элементы.ГруппаОтсканироватьМарку;
		КонецЕсли;
		
	ИначеЕсли ОсновнойПодборПлиточный Тогда
		
		ПереключатьсяВРежимПлитки = Истина;
		
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, АктивнаяГруппаСлоя);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ОсновнаяСтраница);
	ПереключитьВРежимПлитки();
	ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСторноПоКарте(Команда)
	
	ДанныеТерминалов = ОбщегоНазначенияРМККлиент.ДанныеТекущихЭквайринговыхТерминалов(ЭтотОбъект);
	
	Если ДанныеТерминалов.Количество() = 0 Тогда
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = 'Не удалось определить эквайринговый терминал.
									|Оплата по карте не была произведена.'");
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВыполнитьСторноОплатыПоКарте(ДанныеТерминалов[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекКоррекции(Команда)
	ПереключитьРежимНаЧекКоррекции();
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПродажи(Команда)
	ПереключитьРежимНаВозврат();
КонецПроцедуры

&НаКлиенте
Процедура Продажа(Команда)
	ПереключитьРежимНаПродажа();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСмену(Команда)
	ЗакрытьСменуКлиент();
КонецПроцедуры

&НаКлиенте
Процедура СверкаИтогов(Команда)
	СверкаИтоговКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПодтверждениеНСПК(Команда)
	
	ОтправитьПодтверждениеНСПККлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПечатьЧека(Команда)
	ПовторнаяПечатьЧекаКлиент();
КонецПроцедуры

&НаКлиенте
Процедура Внесение(Команда)
	ОткрытьСтраницуВнесенияДенежныхСредств();
КонецПроцедуры

&НаКлиенте
Процедура Выемка(Команда)
	ОткрытьСтраницуВыемкиДенежныхСредств();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	ВесТекущегоТовара();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыТарирования(Команда)
	ПерейтиКПараметрамТарирования();
КонецПроцедуры

&НаКлиенте
Процедура СкидкаНаЧек(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		Если СкидкиРассчитаны Тогда
			ЗадатьВопросПоРасчетуСкидок("СкидкаНаЧекЗавершение");
		Иначе
			СкидкаНаЧекЗавершение(КодВозвратаДиалога.Да);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельУстановкиСкидкиНаЧек(Команда)
	
	Активность = Истина;
	НастроитьИнтерфейсПримененияСкидкиНаЧек(Элементы.ГруппаРедактированияСтрокиКорзины, Активность);
	ЗначениеСкидкиНаЧек = 0;
	ЦветКнопкиПоУмолчанию = ЦветаФормы.Авто;
	
	СтрокаСТекущимТоваром = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	ТекущийТоварСкидка = СтрокаСТекущимТоваром.СуммаСкидкиНаценки;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ЗначениеСкидкиНаЧек, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧекСуммой, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧекПроцентом, Истина);
	
	Элементы.СкидкаНаЧекПроцентом.ЦветФона = ЦветКнопкиПоУмолчанию;
	Элементы.СкидкаНаЧекСуммой.ЦветФона = ЦветКнопкиПоУмолчанию;
	
	Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветКнопкиПоУмолчанию;
	Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветКнопкиПоУмолчанию;
	
	Если СтрокаСТекущимТоваром.ОтображаетсяСкидкаСуммой Тогда
		
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветаФормы.АктивнаяКнопка;
		ТекущийТоварСкидка = СуммаРучнойСкидкиНаПозицию(СтрокаСТекущимТоваром);
		
	ИначеЕсли СтрокаСТекущимТоваром.ОтображаетсяСкидкаПроцентом Тогда
		
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветаФормы.АктивнаяКнопка;
		ТекущийТоварСкидка = СтрокаСТекущимТоваром.ПроцентСкидкиНаценки;
		
	Иначе
	КонецЕсли;
	
	ДоступностьПоляСкидкиНаСтроку = 
		Не (СтрокаСТекущимТоваром.ОтображаетсяСкидкаПроцентом Или СтрокаСТекущимТоваром.ОтображаетсяСкидкаСуммой);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьПоляСкидкиНаСтроку);
	ПримененаСкидкаНаЧек = (Объект.Товары.Итог("СуммаСкидкиНаценки") > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаНаЧекПроцентом(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		Если СкидкиРассчитаны И РаботаВРежимеМедленногоСоединения Тогда
			ЗадатьВопросПоРасчетуСкидок("СкидкаНаЧекПроцентомЗавершение");
		Иначе
			СкидкаНаЧекПроцентомЗавершение(КодВозвратаДиалога.Да);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ЗначениеСкидки)
	
	Если Позиции.Количество() > 0 Тогда
		
		ЭтоРасчетСкидкиНаНабор = Истина;
		
		Для Каждого СтрокаКорзины Из Позиции Цикл
			
			Если СтрокаКорзины.НомерНабора = 0 Тогда
				
				ЭтоРасчетСкидкиНаНабор = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЭтоРасчетСкидкиНаЧек = (Позиции.Количество() = Объект.Товары.Количество());
		
		Если ЭтоРасчетСкидкиНаЧек Тогда
			
			ПровестиРасчетСкидок		= Истина;
			ПересчитатьСкидкуПроцентом	= Истина;
			СкидкаПревышена				= Ложь;
			ЦветФонаНеактивнойКнопки	= ЦветаФормы.Авто;
			ЦветФонаАктивнойКнопки		= ЦветФонаНеактивнойКнопки;
			
			Если НЕ (ПримененаСкидкаНаЧек Или СуммаКОплате = 0) Тогда
				
				Если ЗначениеСкидки > МаксимальныйПроцентРучнойСкидки Тогда
					
					ЗначениеСкидки = МаксимальныйПроцентРучнойСкидки;
					СкидкаПревышена = Истина;
					
					Если ЭтоРасчетСкидкиНаНабор Тогда
						ТекущийТоварСкидка = ЗначениеСкидки;
					КонецЕсли;
					
				КонецЕсли;
				
				ОтображаетсяСкидкаПроцентомНаЧек = Истина;
				ОтображаетсяСкидкаСуммойНаЧек = Ложь;
				
			ИначеЕсли ПримененаСкидкаНаЧек И ОтображаетсяСкидкаСуммойНаЧек Тогда
				
				ПровестиРасчетСкидок = Ложь;
				
			Иначе
				
				ЗначениеСкидкиНаЧек = 0;
				ПересчитатьСкидкуПроцентом = Ложь;
				
				Если ЭтоРасчетСкидкиНаНабор Тогда
					ТекущийТоварСкидка = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			ИдентификаторТекущейСтрокиДоРасчетаСкидок = ТекущийТоварИдентификатор;
			
			Если ПровестиРасчетСкидок Тогда
				
				Для Каждого СтрокаКорзины Из Позиции Цикл
					
					Если (Не СтрокаКорзины.ЗапретОплатыБонусамиСкидками) Тогда
						
						ЗначениеСкидкиДляСтроки = ЗначениеСкидки;
						
						Если ЗначениеЗаполнено(СтрокаКорзины.МинимальнаяЦена) И ЗначениеЗаполнено(СтрокаКорзины.СуммаБезСкидки) Тогда
							
							Если ЗначениеЗаполнено(СтрокаКорзины.Цена) Тогда
								ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаКорзины.Цена;
							Иначе
								ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаКорзины.МинимальнаяЦена;
							КонецЕсли;
							
							ЗначениеСкидкиДляСтрокиПоМРЦ = (ЦенаДляРасчетаСкидкиПоМРЦ - СтрокаКорзины.МинимальнаяЦена)
							* СтрокаКорзины.Количество / СтрокаКорзины.СуммаБезСкидки * 100;
							
							Если ЗначениеСкидкиДляСтроки > ЗначениеСкидкиДляСтрокиПоМРЦ Тогда
								ЗначениеСкидкиДляСтроки = ЗначениеСкидкиДляСтрокиПоМРЦ;
							КонецЕсли;
							
						КонецЕсли;
						
						ТекущийТоварИдентификатор = СтрокаКорзины.ПолучитьИдентификатор();
						УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, ЗначениеСкидкиДляСтроки);
						РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
						
						ПримененаСкидкаНаЧек = (ЗначениеСкидкиДляСтроки > 0);
						
						ОбновитьИнформациюНаДисплееПокупателя("ИзменениеЦены");
						
					КонецЕсли;
					
					СтрокаКорзины.ОтображаетсяСкидкаПроцентом = ПримененаСкидкаНаЧек;
					СтрокаКорзины.ОтображаетсяСкидкаСуммой = Ложь;
					
				КонецЦикла;
				
				ПримененаСкидкаНаЧек = (ЗначениеСкидки > 0);
				
			КонецЕсли;
			
			Если ПересчитатьСкидкуПроцентом Тогда
				
				СуммаТоваровПодлежащихДисконтированию = 0;
				
				Для Каждого СтрокаКорзины Из Объект.Товары Цикл
					
					Если (Не СтрокаКорзины.ЗапретОплатыБонусамиСкидками) Тогда
						СуммаТоваровПодлежащихДисконтированию = СуммаТоваровПодлежащихДисконтированию + СтрокаКорзины.СуммаБезСкидки;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СуммаТоваровПодлежащихДисконтированию > 0 Тогда
					
					ОтображаетсяСкидкаПроцентомНаЧек = Истина;
					ОтображаетсяСкидкаСуммойНаЧек = Ложь;
					Элементы.СкидкаНаЧекСуммой.ЦветФона = ЦветФонаНеактивнойКнопки;
					НовоеЗначениеСкидкиНаЧек = Окр(Объект.Товары.Итог("СуммаСкидкиНаценки")
						/ СуммаТоваровПодлежащихДисконтированию * 100, 2);
					
					Если ЗначениеСкидки <> НовоеЗначениеСкидкиНаЧек Тогда
						
						ЗначениеСкидки = НовоеЗначениеСкидкиНаЧек;
						СкидкаПревышена = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПровестиРасчетСкидок И СкидкаПревышена Тогда
				
				ТекстПредупреждения = СтрШаблон(НСтр(
					"ru = 'Максимальная величина ручной скидки: %1 %%.'"), ЗначениеСкидки);
				ПоказатьПредупреждение(, ТекстПредупреждения);
				
			КонецЕсли;
			
			Если ПримененаСкидкаНаЧек Тогда
				ЦветФонаАктивнойКнопки = ЦветаФормы.АктивнаяКнопка;
			КонецЕсли;
			
			Элементы.СкидкаНаЧекПроцентом.ЦветФона = ЦветФонаАктивнойКнопки;
			ДоступностьСкидкиСуммой = НЕ ПримененаСкидкаНаЧек;
			УстановитьДоступностьЭлементаФормы(Элементы.ЗначениеСкидкиНаЧек, ДоступностьСкидкиСуммой);
			ТекущийТоварИдентификатор = ИдентификаторТекущейСтрокиДоРасчетаСкидок;
			
			Если ЭтоРасчетСкидкиНаНабор Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьСкидкиСуммой);
				Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаАктивнойКнопки;
				Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаНеактивнойКнопки;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоРасчетСкидкиНаНабор Тогда
			
			Для Каждого ПозицияНабора Из Позиции Цикл
				РучнаяСкидкаПроцентомПоСтроке(ПозицияНабора);
			КонецЦикла;
			
		Иначе
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаНаЧекСуммой(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		Если СкидкиРассчитаны И РаботаВРежимеМедленногоСоединения Тогда
			ЗадатьВопросПоРасчетуСкидок("СкидкаНаЧекСуммойЗавершение");
		Иначе
			СкидкаНаЧекСуммойЗавершение(КодВозвратаДиалога.Да);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРучнуюСкидкуСуммойНаПозиции(Позиции, ЗначениеСкидки)
	
	Если Позиции.Количество() > 0 Тогда
		
		ЭтоРасчетСкидкиНаНабор = Истина;
		
		Для Каждого СтрокаКорзины Из Позиции Цикл
			
			Если СтрокаКорзины.НомерНабора = 0 Тогда
				
				ЭтоРасчетСкидкиНаНабор = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЭтоРасчетСкидкиНаЧек = (Позиции.Количество() = Объект.Товары.Количество());
		
		Если ЭтоРасчетСкидкиНаЧек Тогда
			
			ПровестиРасчетСкидок		= Истина;
			ПересчитатьСкидкуСуммой		= Истина;
			СкидкаПревышена				= Ложь;
			ЦветФонаНеактивнойКнопки	= ЦветаФормы.Авто;
			ЦветФонаАктивнойКнопки		= ЦветФонаНеактивнойКнопки;
			РаспределенныеСкидки		= Новый Массив;
			ТочностьОкругленияСкидки	= 2;
			МассивКоэффициентов			= Новый Массив;
			
			Если Не (ПримененаСкидкаНаЧек Или СуммаКОплате = 0) Тогда
				
				МаксимальноеЗначениеСкидки = 0;
				
				Для Каждого СтрокаКорзины Из Объект.Товары Цикл 
					
					Если СтрокаКорзины.Подарок Тогда
						МассивКоэффициентов.Добавить(0);
					Иначе
						МассивКоэффициентов.Добавить(СтрокаКорзины.СуммаБезСкидки);
					КонецЕсли;
					
					МаксимальнаяСкидкаПоСтроке = Окр(
						СтрокаКорзины.СуммаБезСкидки * МаксимальныйПроцентРучнойСкидки / 100, ТочностьОкругленияСкидки);
					
					Если ЗначениеЗаполнено(СтрокаКорзины.МинимальнаяЦена) Тогда
						
						МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены = Окр(
							(СтрокаКорзины.Цена - СтрокаКорзины.МинимальнаяЦена) * СтрокаКорзины.Количество, ТочностьОкругленияСкидки);
						
						Если МаксимальнаяСкидкаПоСтроке > МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены Тогда
							МаксимальнаяСкидкаПоСтроке = МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены;
						КонецЕсли;
						
					КонецЕсли;
					
					МаксимальноеЗначениеСкидки = МаксимальноеЗначениеСкидки + МаксимальнаяСкидкаПоСтроке;
					
				КонецЦикла;
				
				Если ЗначениеСкидки > МаксимальноеЗначениеСкидки Тогда
					
					ЗначениеСкидки = МаксимальноеЗначениеСкидки;
					СкидкаПревышена = Истина; 
					
					Если ЭтоРасчетСкидкиНаНабор Тогда
						ТекущийТоварСкидка = ЗначениеСкидки;
					КонецЕсли;
					
				КонецЕсли;
				
				ОтображаетсяСкидкаСуммойНаЧек = Истина;
				ОтображаетсяСкидкаПроцентомНаЧек = Ложь;
				
			ИначеЕсли ПримененаСкидкаНаЧек И ОтображаетсяСкидкаПроцентомНаЧек Тогда
				ПровестиРасчетСкидок = Ложь;
			Иначе
				
				ЗначениеСкидкиНаЧек = 0;
				ПересчитатьСкидкуСуммой = Ложь;
				
				Если ЭтоРасчетСкидкиНаНабор Тогда
					ТекущийТоварСкидка = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			ИдентификаторТекущейСтрокиДоРасчетаСкидок = ТекущийТоварИдентификатор;
			
			Если ПровестиРасчетСкидок Тогда
				
				ЭтоСкидкаПроцентом = Ложь;
				ТребуетсяРаспределение = Истина;
				РаспределяемаяСумма = ЗначениеСкидки;
				РаспределенныеИндексы = Новый Массив;
				
				Пока ТребуетсяРаспределение Цикл
					
					ТребуетсяРаспределение = Ложь;
					
					РаспределенныеСкидки =
						ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма,
							МассивКоэффициентов, ТочностьОкругленияСкидки);
					
					ТекущийИндекс = 0;
					
					Для Каждого СтрокаКорзины Из Объект.Товары Цикл
						
						ТекущийТоварИдентификатор = СтрокаКорзины.ПолучитьИдентификатор();
						
						Если РаспределяемаяСумма > 0 И РаспределенныеСкидки <> Неопределено Тогда
							
							Если РаспределенныеИндексы.Найти(ТекущийИндекс) = Неопределено Тогда
								
								СуммаСкидкиПоСтроке = РаспределенныеСкидки[ТекущийИндекс];
								
								Если ЗначениеЗаполнено(СтрокаКорзины.МинимальнаяЦена) Тогда
									
									МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены =
										Окр((СтрокаКорзины.Цена - СтрокаКорзины.МинимальнаяЦена)
											* СтрокаКорзины.Количество, ТочностьОкругленияСкидки);
									
									Если СуммаСкидкиПоСтроке > МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены Тогда
										
										СуммаСкидкиПоСтроке = МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены;
										
										ТребуетсяРаспределение = Истина;
										РаспределяемаяСумма = РаспределяемаяСумма - СуммаСкидкиПоСтроке;
										РаспределенныеИндексы.Добавить(ТекущийИндекс);
										МассивКоэффициентов[ТекущийИндекс] = 0;
										
									КонецЕсли;
									
								КонецЕсли;
								
								СтрокаКорзины.ОтображаетсяСкидкаСуммой		= СуммаСкидкиПоСтроке > 0;
								СтрокаКорзины.ОтображаетсяСкидкаПроцентом	= Ложь;
								УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, СуммаСкидкиПоСтроке, ЭтоСкидкаПроцентом);
								РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
								ОбновитьИнформациюНаДисплееПокупателя("ИзменениеЦены");
								
							КонецЕсли;
							
						Иначе
							
							СтрокаКорзины.ОтображаетсяСкидкаСуммой		= Ложь;
							СтрокаКорзины.ОтображаетсяСкидкаПроцентом	= Ложь;
							УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, 0, ЭтоСкидкаПроцентом);
							РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
							ОбновитьИнформациюНаДисплееПокупателя("ИзменениеЦены");
							
						КонецЕсли;
						
						ТекущийИндекс = ТекущийИндекс + 1;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ПримененаСкидкаНаЧек = ЗначениеСкидки > 0;
				
			КонецЕсли;
			
			Если ПересчитатьСкидкуСуммой Тогда
				
				СуммаТоваровПодлежащихДисконтированию = 0;
				Для Каждого СтрокаКорзины Из Объект.Товары Цикл
					
					Если (Не СтрокаКорзины.ЗапретОплатыБонусамиСкидками) Тогда
						СуммаТоваровПодлежащихДисконтированию = СуммаТоваровПодлежащихДисконтированию
							+ СтрокаКорзины.СуммаБезСкидки;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СуммаТоваровПодлежащихДисконтированию > 0 Тогда
					
					ОтображаетсяСкидкаСуммойНаЧек			= Истина;
					ОтображаетсяСкидкаПроцентомНаЧек		= Ложь;
					Элементы.СкидкаНаЧекПроцентом.ЦветФона	= ЦветФонаНеактивнойКнопки;
					НовоеЗначениеСкидкиНаЧек = Объект.Товары.Итог("СуммаСкидкиНаценки");
					
					Если ЗначениеСкидки <> НовоеЗначениеСкидкиНаЧек Тогда
						
						ЗначениеСкидки = НовоеЗначениеСкидкиНаЧек;
						СкидкаПревышена = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПровестиРасчетСкидок И СкидкаПревышена Тогда
				
				ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Максимальная величина ручной скидки: %1 %2'"),
					ЗначениеСкидки,
					ПредставлениеВалюты);
				ПоказатьПредупреждение(, ТекстПредупреждения);
				
			КонецЕсли;
			
			Если ПримененаСкидкаНаЧек Тогда
				ЦветФонаАктивнойКнопки = ЦветаФормы.АктивнаяКнопка;
			КонецЕсли;
			
			Элементы.СкидкаНаЧекСуммой.ЦветФона = ЦветФонаАктивнойКнопки;
			ДоступностьСкидкиПроцентом = Не ПримененаСкидкаНаЧек;
			УстановитьДоступностьЭлементаФормы(Элементы.ЗначениеСкидкиНаЧек, ДоступностьСкидкиПроцентом);
			ТекущийТоварИдентификатор = ИдентификаторТекущейСтрокиДоРасчетаСкидок;
			
			Если ЭтоРасчетСкидкиНаНабор Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьСкидкиПроцентом);
				Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаАктивнойКнопки;
				Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаНеактивнойКнопки;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоРасчетСкидкиНаНабор Тогда
			РассчитатьРучнуюСкидкуСуммойНаНабор(Позиции, ЗначениеСкидки);
		Иначе
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРучнуюСкидкуСуммойНаНабор(Набор, ЗначениеСкидки)
	
	Если Набор.Количество() > 0 Тогда
		
		ПримененаСкидкаНаНабор = Истина;
		ДопустимоПрименениеСкидок = Истина;
		ВесьНаборОплаченБонусами = Истина;
		ОтображаетсяСкидкаПроцентомНаНабор = Истина;
		ОтображаетсяСкидкаСуммойНаНабор = Истина;
		
		Для Каждого СтрокаКорзины Из Набор Цикл
			
			ДопустимоПрименениеСкидок = ДопустимоПрименениеСкидок И (Не СтрокаКорзины.ЗапретОплатыБонусамиСкидками);
			ВесьНаборОплаченБонусами = ВесьНаборОплаченБонусами
				И (СтрокаКорзины.Сумма = СтрокаКорзины.СуммаСкидкиОплатыБонусом);
			ОтображаетсяСкидкаПроцентомНаНабор = ОтображаетсяСкидкаПроцентомНаНабор
				И СтрокаКорзины.ОтображаетсяСкидкаПроцентом;
			ОтображаетсяСкидкаСуммойНаНабор = ОтображаетсяСкидкаСуммойНаНабор
				И СтрокаКорзины.ОтображаетсяСкидкаСуммой;
			ПримененаСкидкаНаНабор = ПримененаСкидкаНаНабор И (СтрокаКорзины.СуммаСкидкиНаценки > 0);
			
		КонецЦикла;
		
			ПровестиРасчетСкидок		= Истина;
			ПересчитатьСкидкуСуммой		= Истина;
			СкидкаПревышена				= Ложь;
			ЦветФонаНеактивнойКнопки	= ЦветаФормы.Авто;
			ЦветФонаАктивнойКнопки		= ЦветФонаНеактивнойКнопки;
			РаспределенныеСкидки		= Новый Массив;
			ТочностьОкругленияСкидки			= 2;
			МассивКоэффициентов			= Новый Массив;
			
			ВозможенРасчетСкидкиНаНабор = ДопустимоПрименениеСкидок И Не (ПримененаСкидкаНаНабор Или СуммаКОплате = 0)
				И НЕ (ТекущийТоварСкидка = 0 Или ВесьНаборОплаченБонусами);
				
			Если ВозможенРасчетСкидкиНаНабор Тогда
				
				МаксимальноеЗначениеСкидки = 0;
				
				Для Каждого СтрокаКорзины Из Набор Цикл
					
					МассивКоэффициентов.Добавить(СтрокаКорзины.СуммаБезСкидки);
					
					МаксимальнаяСкидкаПоСтроке = Окр(СтрокаКорзины.СуммаБезСкидки
						* МаксимальныйПроцентРучнойСкидки / 100, ТочностьОкругленияСкидки);
					
					Если ЗначениеЗаполнено(СтрокаКорзины.МинимальнаяЦена) Тогда
						
						МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены =
							Окр((СтрокаКорзины.Цена - СтрокаКорзины.МинимальнаяЦена) * СтрокаКорзины.Количество, ТочностьОкругленияСкидки);
						
						Если МаксимальнаяСкидкаПоСтроке > МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены Тогда
							МаксимальнаяСкидкаПоСтроке = МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены;
						КонецЕсли;
						
					КонецЕсли;
					
					МаксимальноеЗначениеСкидки = МаксимальноеЗначениеСкидки + МаксимальнаяСкидкаПоСтроке;
					
				КонецЦикла;
				
				Если ЗначениеСкидки > МаксимальноеЗначениеСкидки Тогда
					
					ЗначениеСкидки = МаксимальноеЗначениеСкидки;
					СкидкаПревышена = Истина;

				КонецЕсли;
				
			ИначеЕсли ПримененаСкидкаНаНабор И ДопустимоПрименениеСкидок И ОтображаетсяСкидкаПроцентомНаНабор Тогда
				
				ПровестиРасчетСкидок = Ложь;
				СкидкаНаНабор = 0;
				
				Для Каждого СтрокаЧека Из Набор Цикл
					
					СтрокаЧека.ОтображаетсяСкидкаПроцентом = Ложь;
					СкидкаНаНабор = СкидкаНаНабор + СтрокаЧека.СуммаСкидкиНаценки;
					СтрокаЧека.ОтображаетсяСкидкаСуммой = Истина;
					
				КонецЦикла;
				
				ТекущийТоварСкидка = СкидкаНаНабор;
				
			Иначе
				
				ПересчитатьСкидкуСуммой = Ложь;
				ТекущийТоварСкидка = 0;
				
			КонецЕсли;
			
			ИдентификаторТекущейСтрокиДоРасчетаСкидок = ТекущийТоварИдентификатор;
			
			Если ПровестиРасчетСкидок Тогда
				
				ЭтоСкидкаПроцентом = Ложь;
				ТребуетсяРаспределение = Истина;
				РаспределяемаяСумма = ЗначениеСкидки;
				РаспределенныеИндексы = Новый Массив;
				
				Пока ТребуетсяРаспределение Цикл
					
					ТребуетсяРаспределение = Ложь;
					
					РаспределенныеСкидки =
						ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма,
						МассивКоэффициентов, ТочностьОкругленияСкидки);
					
					ТекущийИндекс = 0;
					
					Для Каждого СтрокаКорзины Из Набор Цикл
						
						ТекущийТоварИдентификатор = СтрокаКорзины.ПолучитьИдентификатор();
						
						Если РаспределяемаяСумма > 0 И РаспределенныеСкидки <> Неопределено Тогда
							
							Если РаспределенныеИндексы.Найти(ТекущийИндекс) = Неопределено Тогда
								
								СуммаСкидкиПоСтроке = РаспределенныеСкидки[ТекущийИндекс];
								
								Если ЗначениеЗаполнено(СтрокаКорзины.МинимальнаяЦена) Тогда
									
									МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены =
										Окр((СтрокаКорзины.Цена - СтрокаКорзины.МинимальнаяЦена)
										* СтрокаКорзины.Количество, ТочностьОкругленияСкидки);
									
									Если СуммаСкидкиПоСтроке > МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены Тогда
										
										СуммаСкидкиПоСтроке = МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены;
										
										ТребуетсяРаспределение = Истина;
										РаспределяемаяСумма = РаспределяемаяСумма - СуммаСкидкиПоСтроке;
										РаспределенныеИндексы.Добавить(ТекущийИндекс);
										
										МассивКоэффициентов[ТекущийИндекс] = 0;
										
									КонецЕсли;
									
								КонецЕсли;
								
								СтрокаКорзины.ОтображаетсяСкидкаСуммой		= СуммаСкидкиПоСтроке > 0;
								СтрокаКорзины.ОтображаетсяСкидкаПроцентом	= Ложь;
								
								УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, СуммаСкидкиПоСтроке, ЭтоСкидкаПроцентом);
								РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
								ОбновитьИнформациюНаДисплееПокупателя("ИзменениеЦены");
								
							КонецЕсли;
							
						Иначе
							
							СтрокаКорзины.ОтображаетсяСкидкаСуммой		= Ложь;
							СтрокаКорзины.ОтображаетсяСкидкаПроцентом	= Ложь;
							
							УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, 0, ЭтоСкидкаПроцентом);
							РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
							ОбновитьИнформациюНаДисплееПокупателя("ИзменениеЦены");
							
						КонецЕсли;
						
						ТекущийИндекс = ТекущийИндекс + 1;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ПримененаСкидкаНаНабор = ЗначениеСкидки > 0;
				
			КонецЕсли;
			
			Если ПересчитатьСкидкуСуммой Тогда
				
				СуммаТоваровПодлежащихДисконтированию = 0;
				Для Каждого СтрокаКорзины Из Набор Цикл
					
					Если (Не СтрокаКорзины.ЗапретОплатыБонусамиСкидками) Тогда
						СуммаТоваровПодлежащихДисконтированию = СуммаТоваровПодлежащихДисконтированию
							+ СтрокаКорзины.СуммаБезСкидки;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СуммаТоваровПодлежащихДисконтированию > 0 Тогда
					
					Элементы.СкидкаТекущийТоварПроцент.ЦветФона	= ЦветФонаНеактивнойКнопки;
					НовоеЗначениеСкидкиНаНабор = 0;
					
					Для Каждого СтрокаКорзины Из Набор Цикл
						
						Если СтрокаКорзины.СуммаСкидкиНаценки > 0 Тогда
							НовоеЗначениеСкидкиНаНабор = НовоеЗначениеСкидкиНаНабор + СтрокаКорзины.СуммаСкидкиНаценки;
						КонецЕсли;
						
					КонецЦикла;

					Если ЗначениеСкидки <> НовоеЗначениеСкидкиНаНабор Тогда
						ТекущийТоварСкидка = НовоеЗначениеСкидкиНаНабор;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПровестиРасчетСкидок И СкидкаПревышена Тогда
				
				ПредупреждениеОПревышенииСкидки = НСтр("ru = 'Максимальная величина ручной скидки: %1 %2'");
				ТекстПредупреждения = СтрШаблон(ПредупреждениеОПревышенииСкидки, ЗначениеСкидки, ПредставлениеВалюты);
				ПоказатьПредупреждение(, ТекстПредупреждения);
				
			КонецЕсли;
			
			Если ПримененаСкидкаНаНабор Тогда
				ЦветФонаАктивнойКнопки = ЦветаФормы.АктивнаяКнопка;
			КонецЕсли;
			
			Элементы.СкидкаТекущийТоварСумма.ЦветФона	= ЦветФонаНеактивнойКнопки;
			ДоступностьСкидкиПроцентом = Не ПримененаСкидкаНаНабор;
			ТекущийТоварИдентификатор = ИдентификаторТекущейСтрокиДоРасчетаСкидок;
	
			УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьСкидкиПроцентом);
			Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаАктивнойКнопки;
			Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаНеактивнойКнопки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеКарты(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		
		СохранитьДанныеКартыСервер();
		
		ОтправкаЧекаПочта	= НайденнаяКартаПочта;
		ОтправкаЧекаТелефон	= НайденнаяКартаТелефон;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКарту(Команда)
	
	Если НЕ Элементы.НайденнаяКартаНомер.ТолькоПросмотр Тогда
		
		НомерКартыДоИзменения = НайденнаяКартаНомер;
		ИзменитьДоступностьПолейНайденнойКарты();
		Возврат;
		
	КонецЕсли;
	
	НеобходимоеПраво = "ПравоРедактироватьКартуРМК";
	
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		
		НомерКартыДоИзменения = НайденнаяКартаНомер;
		ИзменитьДоступностьПолейНайденнойКарты();
		
	Иначе
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВводКарты(Команда)
	
	ОтменитьВводКартыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуБонусами()
	
	ОтменитьПримененныеБонусы(Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	ОткрытьСтраницуСерии();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСерию(Команда)
	ВыбратьСериюДляТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВыбораСерии(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПанельИзбранныхТоваров(Команда)
	
	Панель = Элементы.ПанельИзбранныхТоваров;
	ПанельСкрыта = Панель.Скрыта();
	
	ДопустимоСворачиватьПанельИзбранныхТоваров = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая);

	Если ДопустимоСворачиватьПанельИзбранныхТоваров Тогда
		
		Если ПанельСкрыта Тогда
			Панель.Показать();
		Иначе
			Панель.Скрыть();
		КонецЕсли;
		
	Иначе
		Панель.Показать();
	КонецЕсли;
	
	Элементы.ПлиткаПанельИзбранныхТоваров.Видимость = Не Панель.Скрыта();

	Если Панель.Скрыта() Тогда
		ВернутьсяНаСтраницуСтартаПродажПриНеобходимости();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьБонусами(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ПараметрыВводаКодаSMS = Неопределено Тогда
		ОплатитьБонусамиКлиент();
	ИначеЕсли СуммаПодтвержденияСписанияБонусов > 0 Тогда
		РассчитатьСуммуОплатыБонусамиПредварительная();
		Если СуммаБонусовПредварительная > СуммаПодтвержденияСписанияБонусов И СуммаБонусов = 0 Тогда
			ПереключитьНаСтраницуВводаКодаSMS(Истина);
		Иначе
			ОплатитьБонусамиКлиент();
		КонецЕсли;
	Иначе
		ПереключитьНаСтраницуВводаКодаSMS(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКарту(Команда)
	
	ПереключитьНаСтраницуСозданиеКарты();
	
	ЕстьОшибки = Ложь;
	ОбщегоНазначенияРМККлиент.ПроверитьОшибкиЗаполненияКартыЛояльности(ЭтотОбъект, ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтправлятьSMSКодПриЗаведенииКарты Тогда
		ПереключитьНаСтраницуВводаКодаSMS( ,Истина);
	Иначе
		СоздатьКартуКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКарты(Команда)
	ОбработатьШтрихкодКлиент(СтрокаПоискаКарты);
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьТоварныйЧек(Команда)
	ПечатьТоварногоЧекаКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзмененияЧека(Команда)
	
	Результат = Новый Структура;
	Результат.Вставить("ЧекККМ", ЧекККМПродажа);
	ДополнительныеПараметры = Неопределено;
	ВыборЧекаЗавершение(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтчетБезГашения(Команда)
	
	ОтчетБезГашенияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпровергнутьВозраст(Команда)
	
	ВыбранОтложенныйЧек = СостояниеПодтвержденияВозраста = "ВыбранОтложенныйЧек";
	СостояниеПодтвержденияВозраста = "Нет18";
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
	Если ВыбранОтложенныйЧек И ЗначениеЗаполнено(ОтложенныйЧек) Тогда
		ПродолжитьЧекКлиентЗавершение();
	ИначеЕсли ЕстьСвойство(ДанныеДобавляемогоТовара, "УдалятьТоварыСВозрастнымОграничением") Тогда
		
		ПозицииКУдалению = Новый Массив();
		
		Для Каждого Позиция Из Объект.Товары Цикл
			
			Если ТоварСВозрастнымОграничением(Позиция.ОсобенностьУчета) Тогда
				ПозицииКУдалению.Добавить(Позиция);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Позиция Из ПозицииКУдалению Цикл
			
			Если Позиция.НеобходимостьВводаКодаМаркировки Тогда
				ОжидатьВводМарки = Ложь;
			КонецЕсли;
			Объект.Товары.Удалить(Позиция);
			
		КонецЦикла;
		
		УстановитьДоступностьЭлементаФормы(Элементы.Каталог, Истина);
		УстановитьАктивностьСтроки();
		ПересчитатьИтогиТабличнойЧастиТовары();
		
	ИначеЕсли НЕ ДанныеДобавляемогоТовара = Неопределено
		И НЕ ДанныеДобавляемогоТовара.Свойство("ВыборТовараВручную") Тогда
		
			Строка = Объект.Товары.НайтиПоИдентификатору(ДанныеДобавляемогоТовара.ИдентификаторСтроки);
			Объект.Товары.Удалить(Строка);
			
			ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
			ДанныеДобавляемогоТовара = Неопределено;
		
	ИначеЕсли НЕ ДанныеДобавляемогоТовара = Неопределено Тогда
		
		РучноеСопоставлениеТовара = Ложь;
		ДанныеДляРучногоСопоставления = Неопределено;
		КодМаркиВРаботе = НСтр("ru = ''");
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		ДанныеДобавляемогоТовара = Неопределено;
		
		Если СписокДобавленныхСтрокТоваров.Количество() > 0 Тогда
			Для Каждого ДобавленныйТовар Из СписокДобавленныхСтрокТоваров Цикл
				СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(ДобавленныйТовар.Значение);
				Если Не СтрокаТовары = Неопределено Тогда
					СтруктураПоискаНабора = Новый Структура;
					СтруктураПоискаНабора.Вставить("НомерНабора", СтрокаТовары.НомерНабора);
					МассивСтрокТоваров = Объект.Товары.НайтиСтроки(СтруктураПоискаНабора);
					Для Каждого СтрокаМассива Из МассивСтрокТоваров Цикл
						Объект.Товары.Удалить(СтрокаМассива);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			УстановитьАктивностьСтроки();
			ПересчитатьИтогиТабличнойЧастиТовары();
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
			СписокДобавленныхСтрокТоваров.Очистить();
		КонецЕсли;
		
	Иначе
	КонецЕсли;
	
	ДанныеДобавляемогоТовара = Неопределено;
	
	Если Объект.Товары.Количество() = 0 Тогда
		СоздатьНовыйНабор();
		ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
		ПереключитьВРежимПлитки();
		ПлиткаДомойКлиент();
		НастроитьЭлементыФормы(Элементы.СтраницаПустая, Ложь);
	КонецЕсли;
	ОбработатьИзменениеТаблицыТоваровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьВозраст(Команда)
	
	ВыбранОтложенныйЧек = СостояниеПодтвержденияВозраста = "ВыбранОтложенныйЧек";
	СостояниеПодтвержденияВозраста = "Есть18";
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
	Если ВыбранОтложенныйЧек И ЗначениеЗаполнено(ОтложенныйЧек) Тогда
		ПродолжитьЧекКлиентЗавершение();
	ИначеЕсли НЕ ДанныеДобавляемогоТовара = Неопределено
		И ДанныеДобавляемогоТовара.Свойство("УдалятьТоварыСВозрастнымОграничением") Тогда
			ДанныеДобавляемогоТовара = Неопределено;
	ИначеЕсли НЕ ДанныеДобавляемогоТовара = Неопределено
		И НЕ ДанныеДобавляемогоТовара.Свойство("ВыборТовараВручную") Тогда
			ОбработатьШтрихкодЗавершение(ДанныеДобавляемогоТовара);
	ИначеЕсли НЕ ДанныеДобавляемогоТовара = Неопределено Тогда
		СписокТоваровВыборПродолжение();
	Иначе
	КонецЕсли;
	
	ДанныеДобавляемогоТовара = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажаПоЗаказу(Команда)
	
	ПродажаПоЗаказуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьРаботуСЧеком(Команда)
	
	Если Объект.Товары.Количество() > 0 И НЕ ТекущаяОперация = "ПодтвердитьВозвратЗапрещенногоТовара" Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
		
		Если ЗапрашиватьПодтверждениеВозраста18Плюс Тогда
			
			Если СостояниеПодтвержденияВозраста = "" ИЛИ СостояниеПодтвержденияВозраста = "Нет18"
				ИЛИ СостояниеПодтвержденияВозраста = "Выбор" Тогда
					
					Если ТоварСВозрастнымОграничением() Тогда
						
						ДанныеДобавляемогоТовара = Новый Структура;
						ДанныеДобавляемогоТовара.Вставить("УдалятьТоварыСВозрастнымОграничением", Истина);
						ПереключитьНаСтраницуПодтвержденияВозраста();
						Возврат;
						
					КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ПодтвердитьВозвратЗапрещенногоТовара" Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
		ОбработатьПробитиеЧекаНаКлиенте(Команда);
		
	Иначе
		СоздатьНовыйНабор();
		ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
		ПереключитьВРежимПлитки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БезналичныеПлатежи(Команда)
	
	БезналичныеПлатежиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемАванса(Команда)
	
	ПриемАвансаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРасчета(Команда)
	
	ДокументРасчетаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПродавца(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПродавцаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораПродавца", , ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПродавца(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Продавец = Неопределено;
	Если ТекущиеДанные.ЭтоНабор Тогда
		НомерНабора = ТекущиеДанные.НомерНабора;
		ЗаполнитьПродавцаВНаборе(Продавец, НомерНабора);
	Иначе
		ТекущиеДанные.Продавец = Продавец;
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеПродавца, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаПродавецВыбран, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницаДобавлениеПродавца, Истина);
	
	ТекущийПродавец = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавлениеТовараПослеПроверкиМарки(Команда)
	
	УстановитьДоступностьЭлементовРабочейОбластиФормы(Истина);
	
	Если ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки)Тогда
		НачатьПодтверждениеМарки(ВременныйКонтекстПроверкиМарки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтДобавленияТовараСНепровереннойМаркой(Команда)
	ОтказатьсяОтДобавленияТовара();
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоШтрихкоду(Команда)
	
	НайтиПоШтрихкодуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаНайтиПоШтрихкоду(Команда)
	
	ОтменаНайтиПоШтрихкодуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПоискПоШтрихкоду(Команда)
	
	ПоискПоШтрихкодуНаКлиенте(ШтрихкодДляПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаСертификатом(Команда) 
	
	ГруппаСлоевВспомогательнаяПанель = Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель;
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция
		Или ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевВспомогательнаяПанель)
		= Элементы.ГруппаПоискСертификатов Тогда
		
		ПереключитьНаОплатуСертификатом();
		
	Иначе
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ПереключитьНаОплатуСертификатомЗавершение", , Истина);
		Иначе
			КодВозврата = ?(НеобходимПересчетАвтоматическихСкидок, КодВозвратаДиалога.Да, КодВозвратаДиалога.Нет);
			ПереключитьНаОплатуСертификатомЗавершение(КодВозврата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСертификат(Команда)
	
	Если Не ЗначениеЗаполнено(НомерСертификата) Тогда 
		
		ТекстОшибки = НСтр("ru = 'Введите номер сертификата'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	НайтиСертификатКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСертификатКлиент()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПолучитьДанныеПодарочногоСертификата(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
		Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		Если Результат.ЕстьОшибки Тогда
			ТекстЗаголовка = НСтр("ru = 'Ошибка поиска подарочного сертификата.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, Результат.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДанныеОтвета = Неопределено;
		СтрокаJSON = Результат.ДанныеОтвета;
		СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
		
		Если НЕ ДанныеОтвета = Неопределено Тогда 
			
			Если ДанныеОтвета.Свойство("Error") И НЕ ДанныеОтвета.Error Тогда
				
				СуммаСертификата = ДанныеОтвета.GiftCardBalance;
				
				ГУИД = ДанныеОтвета.GiftCard.GiftCardRef;
				ПодарочныйСертификат = ПодарочныйСертификатПоГУИД(ГУИД);
				
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияСуммаСертификата, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.ОплатитьСертификатом, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.НайтиСертификат, Ложь);
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияОплатаСертификатами, Ложь);
				УстановитьВидимостьЭлементаФормы(Элементы.НомерСертификата, Ложь);
				УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьСертификатом, СуммаСертификата > 0);
				
				ТекущийЭлемент = ?(СуммаСертификата > 0, Элементы.ОплатитьСертификатом, Элементы.ОтменаПоискаСертификата);
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У клиента %1 %2'"),
					Формат(СуммаСертификата, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
					ПредставлениеВалюты);
				Элементы.ДекорацияСуммаСертификата.Заголовок = ТекстСообщения;
				
			ИначеЕсли ДанныеОтвета.Свойство("Error") И ДанныеОтвета.Error Тогда
				
				ТекстЗаголовка = НСтр("ru = 'Ошибка поиска подарочного сертификата.'");
				ТекстОшибки = СтрШаблон(НСтр("ru = '%1'"), ДанныеОтвета.ErrorMessage);
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначенияРМККлиент.ИспользоватьПоискСертификатаЛокально() Тогда
		
		НайтиСертификатЛокально();
		
		Если СуммаСертификата = 0 ИЛИ Не ЗначениеЗаполнено(ПодарочныйСертификат) Тогда
			ТекстЗаголовка = НСтр("ru = 'Ошибка поиска подарочного сертификата.'");
			Если СуммаСертификата = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Сертификат не активирован или полностью погашен.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Сертификат не найден.'");
			КонецЕсли;
			ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
			
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиСертификатЛокально()
	
	ОбщегоНазначенияРМКПереопределяемый.НайтиСертификатЛокально(ЭтотОбъект);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияСуммаСертификата, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ОплатитьСертификатом, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.НайтиСертификат, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияОплатаСертификатами, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.НомерСертификата, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьСертификатом, СуммаСертификата > 0);
		
	ТекстСообщения = СтрШаблон(НСтр("ru = 'У клиента %1 %2'"),
		Формат(СуммаСертификата, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
			ПредставлениеВалюты);
	Элементы.ДекорацияСуммаСертификата.Заголовок = ТекстСообщения;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПоискаСертификата(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	НастроитьВидимостьОплатыПодарочнымиСертификатами();
	РазблокироватьСертификат = (СуммаСертификата > 0) И ЭтоСерийныйПодарочныйСертификат;
	ОчиститьДанныеПодарочногоСертификата(РазблокироватьСертификат);
	ТекущийЭлемент = Элементы.НомерСертификата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьСертификатом(Команда)
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
	
	БалансСертификата = СуммаСертификата;
	ОсталосьДоступноДляОплаты = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
	СуммаСертификата = Мин(ОсталосьДоступноДляОплаты, СуммаСертификата);
	
	Если Не ЭтоСерийныйПодарочныйСертификат Тогда
		НомерСертификата = СтрЗаменить(Новый УникальныйИдентификатор(), "-", "_");
	КонецЕсли;
	Если НЕ Элементы.ГруппаСписокЧековПродажи.Видимость Тогда
		ПереключитьНаСледующийЧек("НаСледующий");
	КонецЕсли;
	
	ДобавитьСертификатВТаблицу(ЭтотОбъект, БалансСертификата);
	РаспределитьОплатуСертификатамиПоОрганизациям();
	ДобавитьРеквизиты(НомерСертификата);
	
	СуммаОстаткаСертификатов = ТаблицаПодарочныхСертификатов.Итог("СуммаСертификата");
	СуммаОплаченоСертификатами = СуммаОстаткаСертификатов;
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеОплатитьСертификатом = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	СуммаОплаченоБонусами = СуммаБонусов;
	
	НастроитьВидимостьОплатыПодарочнымиСертификатами(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСменуИзРежимаВыбораКассы(Команда)
	
	ОткрытьСменуКлиент();
	
	ПриПереключенииКассыККМ();
	
	Если Элементы.страницы.ТекущаяСтраница = Элементы.СтраницаВыборКассыККМ Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		ПроверитьКассовуюСменуИНайтиКассира();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСменуИзРежимаВыбораКассы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьСменуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Уверены, что хотите закрыть смену?'");
	ЗаголовокВопроса = НСтр("ru='Закрытие смены'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходИзРежимаВыбораКассы(Команда)
	
	ТекущаяОперация = "";
	КассаККМДляОперации = Неопределено;
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
	
	ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
	ПереключитьВРежимПлитки();
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьЧекПродажи(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	Элементы.ПереключитьЧекСНООСН.Пометка = Ложь;
	Элементы.ПереключитьЧекСНОУСНДоход.Пометка = Ложь;
	Элементы.ПереключитьЧекСНОУСНДоходРасход.Пометка = Ложь;
	Элементы.ПереключитьЧекСНОЕСН.Пометка = Ложь;
	Элементы.ПереключитьЧекСНОПатент.Пометка = Ложь;
	
	ЗакрытьСтраницуИнфоОшибка(Команда);
	
	ОплатаБезДеленияПоЧекам = Ложь;
	
	Если Лев(ИмяКоманды, 25) = "ПереключитьЧекОрганизация" Тогда
		
		ТекущийНомерКнопкиОрганизации = Сред(ИмяКоманды, 26);
		НомерПП = 0;
		Пока Истина Цикл
			НомерПП = НомерПП + 1;
			НайденЭлемент = Элементы.Найти("ПереключитьЧекОрганизация" + НомерПП);
			Если НайденЭлемент = Неопределено Тогда
				Прервать;
			КонецЕсли;
			НайденЭлемент.Пометка = ТекущийНомерКнопкиОрганизации = НомерПП;
		КонецЦикла;
		
	ИначеЕсли Лев(ИмяКоманды, 17) = "ПереключитьЧекСНО" Тогда
		Элементы[ИмяКоманды].Пометка = Истина;
	КонецЕсли;
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеПереключитьЧек = ИмяКоманды;
	
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСертификатаПриИзменении(Элемент)
	ТекущийЭлемент = Элементы.НайтиСертификат;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификат(Команда)
	
	ОткрытьФормуВыбораПодарочногоСертификата();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭквайринговыйТерминал(Команда)
	
	ТекущийТерминал = ЭквайринговыйТерминалВыполненияОперации;
	СтруктураПоиска = Новый Структура("ЭквайринговыйТерминал", ТекущийТерминал);
	
	РезультатПоиска = ТаблицаТерминалы.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		
		ДанныеВыбранногоТерминала = РезультатПоиска[0];
		
		Если НЕ ЭтоСторноОплатыПоКарте(ЧекККМПродажа, СуммаОплаченоБН, КассоваяСмена, ДанныеВыбранногоТерминала.ЭквайринговыйТерминал) Тогда
			ВыполнитьОплатуПоКарте(ДанныеВыбранногоТерминала);
		КонецЕсли;
		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите эквайринговый терминал.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтВыбораТерминала(Команда)
	
	ОчиститьРеквизитыQRКодаПлатежнойКарты();
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	НастроитьДоступностьПробитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьSMSСКодомПроверки(Команда)
	СформироватьСообщениеИОтправитьSMS();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаведениеКарты(Команда)
	
	ПараметрыВводаКодаSMS = Неопределено;
	Элементы.ОплатитьБонусами.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборМеню, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ЗакрытьФормуДанныеПокупателя, Истина);
	Если ВертикальнаяОриентация Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительнаяКоманднаяПанельПустая);
	КонецЕсли;
	ПереключитьНаСтраницуСозданиеКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСертификатНСПК(Команда)
	
	ПроверитьСертификатНСПКНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуСертификатомНСПК(Команда)
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеОтменитьОплатуСертификатомНСПК = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
	ЭлементВыбор = Элементы.ИдентификаторКорзиныНСПК;
	ЭлементВыбор.СписокВыбора.Очистить(); 
	ЭлементВыбор.ПодсказкаВвода = Нстр("ru='Идентификатор корзины'");
	
	ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	НастроитьЭлементыВРежимеПроверкаСертификатаНСПК(Ложь, ЭтоВозврат);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидки(Команда)
	РассчитатьСкидкиКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ВернутьПозициюБезМарки(Команда)
	ДобавитьТоварБезМарки();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСерию(Команда)
	
	ВыборСерии = Неопределено;
	ТекущийЭлемент = Элементы.ВыборСерии;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПартию(Команда)
	
	ВыборПартии = Неопределено;
	ТекущийЭлемент = Элементы.ВыборПартии;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаРасчетаСкидок(Команда)
	ОтменитьСкидки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратСкупки(Команда)
	ПереключитьРежимНаВозвратСкупки();
КонецПроцедуры

&НаКлиенте
Процедура Скупка(Команда)
	ПереключитьРежимНаСкупка();
КонецПроцедуры

&НаКлиенте
Процедура СписатьАлкогольнуюПродукцию(Команда)
	
	СписатьАлкогольнуюПродукциюКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаРассрочки(Команда)
	
	ОплатаРассрочкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторКорзиныНСПКЗавершить(Команда)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторКорзиныНСПК) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементВыбор = Элементы.ИдентификаторКорзиныНСПК;
	ЭлементВыбор.СписокВыбора.Очистить(); 
	ЭлементВыбор.ПодсказкаВвода = Нстр("ru='Идентификатор корзины'");
	
	ДанныеШтрихкода = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.РасшифроватьQRКодЧекаККТ(ИдентификаторКорзиныНСПК);
	Если ДанныеШтрихкода.Расшифрован Тогда
		СтруктураФискальногоПризнака = Новый Структура("НомерФискальногоНакопителя, ФискальныйПризнакЧека, ФискальныйЧекНомер",
												ДанныеШтрихкода.НомерФискальногоНакопителя,
												ДанныеШтрихкода.ФискальныйПризнак,
												ДанныеШтрихкода.НомерФискальногоДокумента);
		
		ПараметрыОперации = ПолучитьПараметрыОперацииНСПКНаСервере(Объект.КассаККМ, "");
		ЗаполнитьЗначенияСвойств(ПараметрыОперации, СтруктураФискальногоПризнака);
		
		ОповещениеМетода = Новый ОписаниеОповещения("ПолучениеИдентификатораКорзиныЗавершение", ЭтотОбъект, ПараметрыОперации);
		ЭлектронныеСертификатыНСПККлиент.НачатьПолучениеИдентификатораКорзины(ОповещениеМетода, ПараметрыОперации);
	Иначе
		ПолучениеИдентификатораКорзиныЗавершение(Новый Структура("Результат, ИдентификаторКорзины", Истина, ИдентификаторКорзиныНСПК),);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторКорзиныНСПКОтменить(Команда)
	
	ОтменитьОплатуСертификатомНСПК(Команда);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОграниченияПродаж(Команда)
	ОбновитьОграниченияПродажИнтерактивно();
КонецПроцедуры

&НаКлиенте
Процедура ГорячаяКлавишаESC(Команда)
	
	АктивныйСлойСлужебнойИнформацииЧека
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодтверждениеВозраста Тогда
		ОпровергнутьВозраст(Команды.ОпровергнутьВозраст);
	ИначеЕсли ОткрытаСтраницаПоискаТовара() Тогда
		ЗакрытьПоискТоваров(Неопределено);
	ИначеЕсли РежимПоказаСкидок Тогда
		ПереключитьРежимНаПоказСкидок(Ложь);
	ИначеЕсли АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаПлатежнаяСистема И Не ТипОплаты = "" Тогда
		ЗакрытьГруппуПлатежныеСистемы();
	ИначеЕсли Не РежимЦифровойПанели = РежимыЦифровойПанели.Пустой Тогда
		ЗакрытьФормуЦифровойПанели();
	ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект)
			И ОткрытаГруппаПроверкиДобавленияСертификата() Тогда
		ОтменаПоискаСертификата(Команда);
	ИначеЕсли (РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой)
			И АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаРучноеСопоставлениеТовара Тогда
		ОтменаСопоставленияТовара(Команда);
	ИначеЕсли РежимПоказаОстатков И ГруппаРедактированияСтрокиТовараДоступна() Тогда
		ПоказатьОстатки(Команда);
	ИначеЕсли РежимПлитки И ТипПостроенияПлитки = ТипыПостроенияПлитки.ВесовойТовар
			И Элементы.ЗакрытьПлиточныйИнтерфейс.Видимость Тогда
		ОткрытьПлиточныйИнтерфейс(Неопределено);
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьЗаявлениеНаВозврат(Команда)
	
	РаспечататьЗаявлениеНаВозвратКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуДанныеПокупателя(Команда)
	ЗакрытьФормуЦифровойПанели();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеОплаты(Команда)
	
	ОтменитьВведенныеОплаты();
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиОтменыВидовОплат,
		Объект.Оплата.Количество() > (0 + Число(ПриемАвансаПоЗаказу)));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКассуККМ(Команда)
	
	НомерКнопки = Прав(Команда.Имя,1);
	КассаККМДляОперации = ТаблицаКассККМОрганизаций.Получить(НомерКнопки-1).КассаККМ;
	
	ПриПереключенииКассыККМ();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСклад(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборСкладаЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВыборСклада");
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораСкладЯчейка",
		ПараметрыОткрытия,
		ЭтотОбъект, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЯчейку(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана текущая строка.'"));
		Возврат;
	КонецЕсли;
	Склад = ТекущаяСтрока.ТорговыйОбъект;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЯчейкиЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВыборЯчейки");
	ПараметрыОткрытия.Вставить("Склад", Склад);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораСкладЯчейка",
		ПараметрыОткрытия,
		ЭтотОбъект, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСклад(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Склад = Неопределено;
	Ячейка = Неопределено;
	Если ТекущиеДанные.ЭтоНабор Тогда
		НомерНабора = ТекущиеДанные.НомерНабора;
		ЗаполнитьСкладВНаборе(Склад, НомерНабора);
		ЗаполнитьЯчейкуВНаборе(Ячейка, НомерНабора);
	Иначе
		ТекущиеДанные.ТорговыйОбъект = Склад;
		ДанныеСтроки = Новый Структура("Номенклатура, Характеристика, ТорговыйОбъект, КоличествоОстаток", 
			ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, ТекущиеДанные.ТорговыйОбъект, ТекущиеДанные.КоличествоОстаток);
		ЗаполнитьОстатокСтрокиНаСервере(ДанныеСтроки);
		ТекущиеДанные.КоличествоОстаток = ДанныеСтроки.КоличествоОстаток;
		ТекущиеДанные.Ячейка = Ячейка;
	КонецЕсли;
	
	Если ОтображатьОстаток Тогда
		ТекущийТоварОстаток = СтрШаблон(НСтр("ru = 'Доступно: %1 %2'"),ТекущиеДанные.КоличествоОстаток, ТекущиеДанные.ПредставлениеЕдиницыИзмерения);
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеСклада, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаСкладВыбран, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницаДобавлениеСклада, Истина);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеЯчейки, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаЯчейкаВыбрана, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницаДобавлениеЯчейки, Истина);
	
	ТекущийСклад = "";
	ТекущаяЯчейка = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЯчейку(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ячейка = Неопределено;
	Если ТекущиеДанные.ЭтоНабор Тогда
		НомерНабора = ТекущиеДанные.НомерНабора;
		ЗаполнитьЯчейкуВНаборе(Ячейка, НомерНабора);
	Иначе
		ТекущиеДанные.Ячейка = Ячейка;
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеЯчейки, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаЯчейкаВыбрана, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницаДобавлениеЯчейки, Истина);
	
	ТекущаяЯчейка = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьОперациюПакетнойФискализации(Команда)
	ПовторитьОперациюПакетнойФискализацииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДанныеВыдачиНаличных(Команда)
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ПодготовитьДанныеВыдачиНаличныхКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДенежныйЯщикПриВыдачеНаличных(Команда)
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ОткрытьДенежныйЯщикКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДенежныйЯщик(Команда)
	
	ДенежныйЯщикКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПробитие(Команда)
	НачатьПечатьЧека();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтменуОплаты(Команда)
	ВыполнитьОтменуОплатыКлиент();
КонецПроцедуры

&НаКлиенте
Процедура СменитьМагазин(Команда)
	
	СменитьМагазинИлиКассира(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияКодаДоступа(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Кассир", КассирДляВхода);
	
	ДополнительныйПараметрЗакрытияФормы = Новый Структура();
	ДополнительныйПараметрЗакрытияФормы.Вставить("КодДоступа", Неопределено);
	
	Оповещение = Новый ОписаниеОповещения("СозданиеКодаДоступаЗавершение", ЭтотОбъект,
		ДополнительныйПараметрЗакрытияФормы);
	
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаУстановкиКодаДоступаКассира",
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор, , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботу(Команда)
	
	Если ТекущаяОперация = "ЧекНаВозвратРМК" Или ТекущаяОперация = "ЧекКоррекцииРМК" Тогда	
		
		ТекущаяОперация = "";
		ОткрытьОбщуюСтраницу(Истина);
		СформироватьЗаголовокВводКассира();
		ПереключитьРежимНаПродажа();
		
	Иначе
		ЗакрытьПриложениеПриОшибке(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбменаДанными(Команда)
	
	ЗапуститьОбменДаннымиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтложитьПринудительно(Команда)
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПанельДействий);
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОтложитьОперацию(
		ЭтотОбъект, 
		Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьБалансСертификата(Команда)
	
	ЗапроситьБалансСертификатаСервер();
	ЦенаИзКарточкиПриИзмененииПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветДаАвтономнаяКасса(Команда)
	
	ДополнительныеПараметры = ОборудованиеЧекопечатающиеАвтономныеУстройстваКлиент.ПараметрыВыполненияОперацииНаАвтономнойККТ();
	
	Если ОповещениеАвтономнойКассы.Команда = "CheckFiscalization" Тогда
		ДополнительныеПараметры.ПараметрыОперации = ОповещениеАвтономнойКассы.ОбщиеПараметры;
		ДополнительныеПараметры.Команда = ОповещениеАвтономнойКассы.Команда;
		ДополнительныеПараметры.ОповещениеПриЗавершении = Неопределено;
		ДополнительныеПараметры.ИспользуетсяОчередьПробития = Истина;
		ПодключитьОбработчикОжидания("ПроверитьСтатусЧекаНаКлиенте", 1, Истина); 
	ИначеЕсли ОповещениеАвтономнойКассы.Команда = "Encash" Тогда
		ДополнительныеПараметры.ПараметрыОперации = ОповещениеАвтономнойКассы.ОбщиеПараметры;
		ДополнительныеПараметры.Команда = ОповещениеАвтономнойКассы.Команда;
		Если ОповещениеАвтономнойКассы.ОбщиеПараметры.ТипИнкассации = 1 Тогда
			ДополнительныеПараметры.ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыполнитьОперациюВнесениеЗавершение", ЭтотОбъект);
		Иначе
			ДополнительныеПараметры.ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыполнитьОперациюВыемкаЗавершение", ЭтотОбъект);
		КонецЕсли;
		ДополнительныеПараметры.ИспользуетсяОчередьПробития = Ложь;
	КонецЕсли;
		
	ОборудованиеЧекопечатающиеАвтономныеУстройстваКлиент.ВыполнитьКомандуЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНетАвтономнаяКасса(Команда)
	
	ДополнительныеПараметры = ОборудованиеЧекопечатающиеАвтономныеУстройстваКлиент.ПараметрыВыполненияОперацииНаАвтономнойККТ();
	
	Если ОповещениеАвтономнойКассы.Команда = "CheckFiscalization" Тогда
		ДополнительныеПараметры.ПараметрыОперации = ОповещениеАвтономнойКассы.ОбщиеПараметры;
		ДополнительныеПараметры.Команда = ОповещениеАвтономнойКассы.Команда;
		ДополнительныеПараметры.ОповещениеПриЗавершении = Неопределено;
		ДополнительныеПараметры.ИспользуетсяОчередьПробития = Истина;
		ПодключитьОбработчикОжидания("ПроверитьСтатусЧекаНаКлиенте", 1, Истина); 
	ИначеЕсли ОповещениеАвтономнойКассы.Команда = "Encash" Тогда
		ДополнительныеПараметры.ПараметрыОперации = ОповещениеАвтономнойКассы.ОбщиеПараметры;
		ДополнительныеПараметры.Команда = ОповещениеАвтономнойКассы.Команда;
		ДополнительныеПараметры.ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыполнитьОперациюВнесениеЗавершение", ЭтотОбъект);
		ДополнительныеПараметры.ИспользуетсяОчередьПробития = Ложь;
	КонецЕсли;
		
	ОборудованиеЧекопечатающиеАвтономныеУстройстваКлиент.ВыполнитьКомандуЗавершение(КодВозвратаДиалога.Нет, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПослеПробитияЧека(Команда)
	
	РазморозитьФормуПослеПробитияЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьТекущийТоварныйЧек(Команда)
	
	РаспечататьТекущийТоварныйЧекКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьТекущийЧекПовторно(Команда)
	
	ПробитьТекущийЧекКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВозвратТекущегоЧека(Команда)
	
	ОбработатьВозвратТекущегоЧекаНаКлиенте(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлиточныйИнтерфейсКаталога(Команда)
	
	ОткрытьПлиточныйИнтерфейс(ТипыПостроенияПлитки.ПоПалитре);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПлиточныйИнтерфейс(Команда)
	ОткрытьПлиточныйИнтерфейс(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура УправляемыеСкидки(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		ДополнительныеПараметры = Новый Структура("ОбластьДействия", "На документ");

		Если СкидкиРассчитаны Тогда
			ЗадатьВопросПоРасчетуСкидок("УправляемыеСкидкиЗавершение", ДополнительныеПараметры);
		Иначе
			УправляемыеСкидкиЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетЗаСмену(Команда)
	
	ВывестиОтчетЗаСменуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКнопкиЦифровойПанели(Команда)
	
	Если РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели) Тогда
		ОбработатьКомандуЦифровойПанелиПриВводеСуммыОплаты(Команда);
	Иначе
		ОбработатьКомандуЦифровойПанелиДанныеПокупателя(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКонтрагента(Команда)
	
	ВыбратьКонтрагентаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьКупюру(Команда)
	НоминалКупюры = сред(Команда.Имя, 12);
	ОбработатьНажатиеКупюры(НоминалКупюры);
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеПромокода(Команда) 
	
	ИспользованиеПромокодаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПоискаПромокода(Команда)
	
	НастроитьВидимостьВводаПромокода();
	ОчиститьДанныеПромокодов();
	ТекущийЭлемент = Элементы.ВведенныйПромокод;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПромокод(Команда)
	НайтиПромокодВДоступномСервисе();
КонецПроцедуры

&НаКлиенте
Процедура НайтиПромокодВДоступномСервисе()
	Если Не ЗначениеЗаполнено(ВведенныйПромокод) Тогда 
		
		ТекстОшибки = НСтр("ru = 'Введите промокод'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		НайтиПромокодКлиент();
	ИначеЕсли ОбщегоНазначенияРМККлиент.ИспользоватьПоискПромокодаЛокально() Тогда
		НайтиПромокодЛокально();
	Иначе
		ТекстОшибки = НСтр("ru = 'Работа с промокодами не поддерживается в текущей версии'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	Если ПромокодДоступен Тогда
		ПрименитьПромокод(Неопределено);
	Иначе
		СкидкаВведенногоПромокода = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПромокодКлиент()
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПолучитьДанныеПромокода(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
		Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		Если Результат.ЕстьОшибки Тогда
			ТекстЗаголовка = НСтр("ru = 'Ошибка проверки промокода.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, Результат.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДанныеОтвета = Неопределено;
		СтрокаJSON = Результат.ДанныеОтвета;
		СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
		
		Если НЕ ДанныеОтвета = Неопределено Тогда
			
			Если ДанныеОтвета.Свойство("Error") И НЕ ДанныеОтвета.Error Тогда
				
				ДанныеОтвета.Свойство("PromocodeIsAvalible", ПромокодДоступен);
				ОбоснованиеОтказа = ДанныеОтвета.PromocodeStatus;
				
				Если ПромокодДоступен Тогда
					ТекущийЭлемент = Элементы.ПрименитьПромокод;
					Если ДанныеОтвета.Свойство("PromocodeDiscount") Тогда
						Если ТипЗнч(СкидкаВведенногоПромокода) = Тип("Строка") Тогда
							СкидкаВведенногоПромокода = ДанныеОтвета.PromocodeDiscount.Ref;
						Иначе
							СкидкаВведенногоПромокода = ПолучитьСкидкуВведенногоПромокодаНаСервере(ДанныеОтвета);
						КонецЕсли;
						ОписаниеСкидкиПромокода = ДанныеОтвета.PromocodeDiscount.Name;
					КонецЕсли;
				Иначе
					ТекущийЭлемент = Элементы.ОтменаВводаПромокода;
				КонецЕсли;
				
				ТекстПодсказки = "";
				Если ПромокодДоступен И ЗначениеЗаполнено(СкидкаВведенногоПромокода) Тогда
					УжеПримененныеПромокоды = ТаблицаПримененныхПромокодов.НайтиСтроки(Новый Структура("СкидкаНаценка, ЭтоАктивацияПромокода", СкидкаВведенногоПромокода, Ложь));
					Если УжеПримененныеПромокоды.Количество() > 0 Тогда
						ПромокодДоступен = Ложь;
						ТекстПодсказки = НСтр("ru = 'Промокод на эту скидку уже добавлен.'");
					КонецЕсли;
				ИначеЕсли Не ПромокодДоступен Тогда
					ТекстПодсказки = ОбоснованиеОтказа;
				КонецЕсли;
				Элементы.ВведенныйПромокод.Подсказка = ТекстПодсказки;
				
				УстановитьВидимостьЭлементаФормы(Элементы.ПрименитьПромокод, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.НайтиПромокод, Ложь);
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияВводПромокода, Ложь);
				УстановитьВидимостьЭлементаФормы(Элементы.ОписаниеНайденнойСкидки, Истина);
				УстановитьТолькоПросмотрЭлементаФормы(Элементы.ВведенныйПромокод, Истина);
				УстановитьДоступностьЭлементаФормы(Элементы.ПрименитьПромокод, ПромокодДоступен);
				
				ТекущийЭлемент = ?(ПромокодДоступен, Элементы.ПрименитьПромокод, Элементы.ОтменаВводаПромокода);
				
				Если Не ПромокодДоступен Тогда
					РазблокироватьПромокоды(, ВведенныйПромокод);
				КонецЕсли;
				
			ИначеЕсли ДанныеОтвета.Свойство("Error") И ДанныеОтвета.Error Тогда
				
				ТекстЗаголовка = НСтр("ru = 'Ошибка поиска промокода.'");
				ТекстОшибки = СтрШаблон(НСтр("ru = '%1'"), ДанныеОтвета.ErrorMessage);
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиПромокодЛокально()
	
	ОбщегоНазначенияРМКПереопределяемый.НайтиПромокодЛокально(ЭтотОбъект);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ПрименитьПромокод, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.НайтиПромокод, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияВводПромокода, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ОписаниеНайденнойСкидки, Истина);
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.ВведенныйПромокод, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ПрименитьПромокод, ПромокодДоступен);
	
КонецПроцедуры

&НаКлиенте
Процедура ВведенныйПромокодПриИзменении(Элемент)
	КорректныйПромокод = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ВведенныйПромокод);
	КорректныйПромокод = СтрЗаменить(КорректныйПромокод," ", "");
	ВведенныйПромокод = КорректныйПромокод;
	// Пока не нажата кнопка НайтиПромокод, мы не знаем, есть ли такой промокод, 
	// Не будем привлекать внимания
	ПромокодДоступен = Истина;
	ТекущийЭлемент = Элементы.НайтиПромокод;
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПромокод(Команда)
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
	
	ДобавитьПромокодВТаблицу();
	ДобавитьРеквизитыПромокода(ВведенныйПромокод);
	Если (РежимКассыСамообслуживания И Не РаботаВРежимеМедленногоСоединения)
		Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате Тогда
		РассчитатьСкидкиКлиент();
	ИначеЕсли НЕ РежимПоказаСкидок Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	НастроитьВидимостьВводаПромокода(, Истина);
	
	ВведенныйПромокод = "";
	Если НЕ РаботаВРежимеМедленногоСоединения Тогда
		РассчитатьСкидкиКлиент();
	Иначе
		ТребуетсяПересчетСкидок = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПромокод(Команда)
	
	Если НЕ ЗначениеЗаполнено(ВведенныйПромокод) Тогда
		АктивироватьГруппуВводаПромокода();
		ТекущийЭлемент = Элементы.ВведенныйПромокод;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторыКорзинПокупокНСПК(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьИдентификаторыКорзинПокупокНСПКВопрос", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Загрузить историю продаж по товару %1?'");
	ТекстВопроса = СтрШаблон(ТекстВопроса, Элементы.Товары.ТекущиеДанные.ПредставлениеНоменклатураХарактеристика);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокСертификатовНСПК(Команда)
	
	СписокСертификатовНСПККлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТоваровНСПК(Команда)
	
	ОтборТоваровНСПК = Не ОтборТоваровНСПК;
	Если ОтборТоваровНСПК Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СледующаяОперация", "ПолучениеСпискаТоваров");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюНСПКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОборудованиеПлатежныеСистемыКлиент.НачатьПолучениеПараметровКарты(ОписаниеОповещения, УникальныйИдентификатор);
	Иначе
		СписокТоваров.Отбор.Элементы.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьЧек(Команда)
	ПовторитьЧекНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяКомандаРаботыСЧеком(Команда)
	
	ГруппаСлоевОсновныхКоманд = Элементы.ГруппаСлоевОсновнаяКоманднаяПанельУправленияЧеком;
	ТекущийСлой = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевОсновныхКоманд);
	Если ТекущийСлой = Элементы.ГруппаКомандПробитияЧека И Элементы.ПробитьЧек.Доступность Тогда
		
		КомандаПробитьЧек = Команды.Найти("ПробитьЧек");
		ПробитьЧек(КомандаПробитьЧек);
		
	ИначеЕсли РежимПлитки Тогда
		
		Если Элементы.ПлиткаГруппаНиз.Видимость И Элементы.ПерейтиВОплату.Доступность Тогда
			КомандаПерейтиВОплату = Команды.Найти("ПерейтиВОплату");
			ПерейтиВОплату(КомандаПерейтиВОплату);
		КонецЕсли;
		
	ИначеЕсли ТекущийСлой = Элементы.ГруппаКомандПереходаКОплате И Элементы.ПерейтиКОплате.Доступность Тогда
		
		ПереключитьВРежимОплаты();
		
	ИначеЕсли ТекущийСлой = Элементы.ГруппаКомандПовторногоДействия
		И Элементы.ВыполнитьПовторноеПробитие.Доступность Тогда
		
		НачатьПечатьЧека();
		
	ИначеЕсли ТекущийСлой = Элементы.ГруппаКомандПробитияЧекаНСПК И Элементы.ПробитьЧекНСПК.Доступность Тогда
		
		ПроверитьСертификатНСПКНаКлиенте();
		
	ИначеЕсли ТекущийСлой = Элементы.ГруппаКомандЦифроваяПанель И Элементы.ЗакрытьФормуДанныеПокупателя.Доступность Тогда
		
		Если ОткрытаСтраницаОтправкиЧека() И Элементы.ГруппаСтраницыКнопкиОтправитьЧек.Доступность Тогда
			ОтправитьЧекКлиент();
		Иначе
			ЗакрытьФормуЦифровойПанели();
		КонецЕсли;
		
	ИначеЕсли ТекущийСлой = Элементы.ГруппаКомандПродолженияПослеПробития
		И Элементы.ПродолжитьПослеПробитияЧека.Доступность Тогда
		
		РазморозитьФормуПослеПробитияЧека();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОплатыКартой(Команда)
	
	ГруппаСлоевСлужебнаяИнформация = Элементы.ГруппаСлоевСлужебнаяИнформацияЧека;
	ГруппаСлоевВспомогательная = Элементы.ГруппаСлоевПраваяНижняяВспомогательнаяПанель;
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевСлужебнаяИнформация)
		= Элементы.ОбластьОперативногоУправленияЧеком Тогда
		Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект)
			И Элементы.ПанельВидовОплат.Видимость И Элементы.ГруппаВидОплатыКартой.Видимость
			И Элементы.ОплатаКартой.Доступность Тогда
			
			КомандаОплатаКартой = Команды.Найти("ОплатаКартой");
			ОплатаКартой(КомандаОплатаКартой);
			
		ИначеЕсли РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров
			И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевВспомогательная)
				= Элементы.ГруппаДополнительнаяИнформацияПоЧеку
			И Элементы.ГруппаQRCode.Видимость И Элементы.ГруппаQRCodeКарта.Видимость Тогда
			
			КомандаОплатаКартойВТихомРежиме = Команды.Найти("ОплатаКартойВТихомРежиме");
			ОплатаКартойВТихомРежиме(КомандаОплатаКартойВТихомРежиме);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОплатыНаличными(Команда)
	
	ГруппаСлоевСлужебнаяИнформация = Элементы.ГруппаСлоевСлужебнаяИнформацияЧека;
	ГруппаСлоевВспомогательная = Элементы.ГруппаСлоевПраваяНижняяВспомогательнаяПанель;
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевСлужебнаяИнформация)
		= Элементы.ОбластьОперативногоУправленияЧеком Тогда
		Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект)
			И Элементы.ПанельВидовОплат.Видимость И Элементы.ГруппаВидОплатыНаличными.Видимость
			И Элементы.ОплатаНаличными.Доступность Тогда
			
			КомандаОплатаНаличными = Команды.Найти("ОплатаНаличными");
			ОплатаНаличными(КомандаОплатаНаличными);
			
		ИначеЕсли РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров
			И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевВспомогательная)
				= Элементы.ГруппаДополнительнаяИнформацияПоЧеку
			И Элементы.ГруппаQRCode.Видимость И Элементы.ГруппаQRCodeНаличные.Видимость Тогда
			
			КомандаОплатаНаличнымиВТихомРежиме = Команды.Найти("ОплатаНаличнымиВТихомРежиме");
			ОплатаНаличнымиВТихомРежиме(КомандаОплатаНаличнымиВТихомРежиме);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокТоваров(Команда)
	
	ОбновитьСписокТоваровСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВОплату(Команда)
	
	НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
	Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ПерейтиВОплатуЗавершение", , Истина);
	Иначе
		ПерейтиВОплатуЗавершение(?(НеобходимПересчетАвтоматическихСкидок, КодВозвратаДиалога.Да, КодВозвратаДиалога.Нет));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлиткаДомой(Команда)
	ПлиткаДомойКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПлиткаНазад(Команда)
	ПерейтиНаСтраницуВлево();
КонецПроцедуры

&НаКлиенте
Процедура ПлиткаВперед(Команда)
	ПерейтиНаСтраницуВправо();
КонецПроцедуры

&НаКлиенте
Процедура СкидкаНаЧекПроцентомЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	Позиции = Объект.Товары;
	РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ЗначениеСкидкиНаЧек);
	
	ВыполнитьПересчетСкидок();
КонецПроцедуры

&НаКлиенте
Процедура СкидкаНаЧекСуммойЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	Позиции = Объект.Товары;
	РассчитатьРучнуюСкидкуСуммойНаПозиции(Позиции, ЗначениеСкидкиНаЧек);
	ВыполнитьПересчетСкидок();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезервнуюКопию(Команда)
	
	Перем ПараметрыКопирования;
	
	РезультатПроверки = ПроверитьРаботуОблачногоАрхива();
	Если Не РезультатПроверки.СозданиеРезервнойКопииДоступно Тогда
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Использование сервиса ""Облачный архив"" недоступно в текущем режиме работы.'"));
		Возврат;
	ИначеЕсли Не РезультатПроверки.ПодключениеОблачногоАрхиваВыполнено Тогда
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Не выполнено подключение к сервису ""Облачный архив"".
				|Для подключения обратитесь к администратору.'"));
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив20") Тогда
		
		МодульОблачныйАрхив20Клиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОблачныйАрхив20Клиент");
		ПараметрыКопирования 		= МодульОблачныйАрхив20Клиент.ПараметрыСозданияРезервнойКопии();
	
		МодульОблачныйАрхив20Клиент.СоздатьРезервнуюКопию(ПараметрыКопирования);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСкидкуВведенногоПромокодаНаСервере(ДанныеПромокода)
	
	ОписаниеТипаСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;
	Результат = ОбщегоНазначенияРМК.ПолучитьДесериализованноеСсылочноеЗначение(ДанныеПромокода, "PromocodeDiscount", ОписаниеТипаСкидкаНаценка);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВвестиКомментарийКЧеку(Команда)
	
	ВвестиКомментарийКЧекуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьВводКомментарияКЧеку(Команда)
	
	ПредыдущийСлой = ПредыдущийСлойДоДанныхПокупателя;
	Если ПредыдущийСлой = Неопределено Тогда
	
		ПредыдущийСлой = Элементы.ОбластьОперативногоУправленияЧеком;
	
	КонецЕсли; 
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, ПредыдущийСлой);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево,
		(Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект)));
	
	УстановитьИконкуКомментарияКЧеку(Элементы.ВвестиКомментарийКЧеку, КомментарийКЧеку);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВводаКомментарияКЧеку(Команда)
	
	КомментарийКЧеку = ТекущийКомментарийКЧеку;
	УстановитьИконкуКомментарияКЧеку(Элементы.ВвестиКомментарийКЧеку, КомментарийКЧеку);

	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево,
		(Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект)));
		
	ПредыдущийСлой = ПредыдущийСлойДоДанныхПокупателя;
	Если ПредыдущийСлой = Неопределено Тогда
		
		ПредыдущийСлой = Элементы.ОбластьОперативногоУправленияЧеком;
		
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, ПредыдущийСлой);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПакет(Команда)
	
	Если Не РежимПлитки И Не Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		Если ОжидатьВводМарки
			Или Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления)
			= Элементы.ПанельУправленияЧеком
			Или Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ОбластьОперативногоУправленияЧеком Тогда
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	ТребуетсяПовышениеПрав = Ложь;
	ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав);
	Если Не ТребуетсяПовышениеПрав Тогда
		ДобавитьПакетКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСтраницуПлатежнаяСистема(Команда)

	ЗакрытьГруппуПлатежныеСистемы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщениеВПоддержку(Команда)

	ОписаниеСистемнойИнформации = Новый Структура(
		"ТипПлатформы,
		|ВерсияПриложения,
		|ВерсияОС");
	
	НастройкиПоискаГотовогоОтвета = Новый Структура;
	НастройкиПоискаГотовогоОтвета.Вставить("Текст", "");
	НастройкиПоискаГотовогоОтвета.Вставить("ИдентификаторПрограммы", "");

	ОписаниеТехническойИнформации = Новый Структура(
		"ОписаниеПрограммы,
		|ТекущаяСессия,
		|ДанныеРасширений,
		|ДанныеПодсистем,
		|НастройкиИнтернетПоддержки,
		|ИнтернетНастройки");
	
	ОписаниеТехническойИнформации.Вставить("СистемнаяИнформацияКлиента", ОписаниеСистемнойИнформации);
	ОписаниеТехническойИнформации.Вставить("СистемнаяИнформацияСервера", ОписаниеСистемнойИнформации);
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("Получатель",                    "v8");
	ДанныеСообщения.Вставить("Тема",                          Элементы.ТекстПредупреждениеЗаголовок.Заголовок);
	ДанныеСообщения.Вставить("Сообщение",                     Элементы.ТекстПредупреждениеОшибка.Заголовок);
	ДанныеСообщения.Вставить("ИспользоватьСтандартныйШаблон", Ложь);

	ДанныеСообщения.Вставить("ИНН", "");
	ДанныеСообщения.Вставить("РегистрационныйНомер", "");
	ДанныеСообщения.Вставить("НастройкиПоискаГотовогоОтвета", НастройкиПоискаГотовогоОтвета);
	ДанныеСообщения.Вставить("ДанныеТехническойИнформации",   ОписаниеТехническойИнформации);
	
	СообщенияВСлужбуТехническойПоддержкиКлиент.ОтправитьСообщение(
		ДанныеСообщения);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетОбОшибке(Команда)
	ЗаголовокОшибки = Новый ФорматированнаяСтрока(Элементы.ТекстПредупреждениеЗаголовок.Заголовок, Новый Шрифт(,, Истина));
	ТекстОшибки = Элементы.ТекстПредупреждениеОшибка.Заголовок;
	
	Попытка
		ВызватьИсключение(ЗаголовокОшибки, КатегорияОшибки.ОшибкаКонфигурации, "PayDesk.error", ТекстОшибки);
	Исключение 
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОбработкаОшибок.ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке, ЗаголовокОшибки, ТекстОшибки, Истина);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказ(Команда)
	
	СоздатьЗаказИРаспечатать();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказИВнестиПредоплату(Команда)
	
	СозданныйЗаказ = Неопределено;
	СоздатьЗаказИРаспечатать(СозданныйЗаказ);
	Если СозданныйЗаказ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("ДокументЗаказ", СозданныйЗаказ);
	СтруктураВыбора.Вставить("ЭтоОплатаРассрочи", Ложь);
	СтруктураВыбора.Вставить("ЭтоВнесениеПредоплаты", Истина);
	
	ДополнительныеПараметры = Неопределено;
	ОповещениеОткрытьФормуВыбораЗаказаПокупателя(СтруктураВыбора, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказИОтгрузить(Команда)
	
	СозданныйЗаказ = Неопределено;
	СоздатьЗаказИРаспечатать(СозданныйЗаказ);
	Если СозданныйЗаказ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("ДокументЗаказ", СозданныйЗаказ);
	СтруктураВыбора.Вставить("ЭтоОплатаРассрочи", Ложь);
	СтруктураВыбора.Вставить("ЭтоВнесениеПредоплаты", Ложь);
	
	ДополнительныеПараметры = Неопределено;
	ОповещениеОткрытьФормуВыбораЗаказаПокупателя(СтруктураВыбора, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Заказ(Команда)
	ПереключитьРежимНаЗаказ();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияХочуБумажныйЧекФлагНажатие(Элемент)
	
	УстановитьПризнакХочуБумажныйЧек(Не ХочуБумажныйЧек);
	
КонецПроцедуры

&НаКлиенте
Процедура ГорячаяКлавишаEnter(Команда)
	
	ОбработатьГорячуюКлавишуEnter();
	
КонецПроцедуры

&НаКлиенте
Процедура ГорячаяКлавишаDel(Команда)
	
	ОбработатьГорячуюКлавишуDel();
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСписокТоваров(Команда)
	АктивироватьСписокТоваровНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КомандаМирТовары(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара Тогда
		СписокТоваровНСПК(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьПоискТоваров(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара Тогда
		ЗакрытьПоискТоваров(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереключитьПанельДанныхПокупателя(Команда)
	
	Если РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		
		РежимПанелиДанныеПокупателя = ПолучитьНомерСледующейПанелиПокупателя();
		Если РежимПанелиДанныеПокупателя >= 0 Тогда
			ОбработатьИзменениеРежимаПанелиДанныхПокупателя();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОплатыБонусами(Команда)
	
	Если РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		ГруппаСлоевДополнительнаяОбласть = Элементы.ГруппаСлоевДанныеПокупателяДополнительнаяОбласть;
		Если РежимПанелиДанныеПокупателя = 0 И КнопкаОплатитьБонусамиДоступна()
				И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевДополнительнаяОбласть)
					= Элементы.ДополнительнаяГруппаКартаНайдена Тогда
				
			ОплатитьБонусами(Команда);
				
		КонецЕсли;
	ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект)
			И КнопкаОплатыБонусамиДоступна() Тогда
			
		ОплатаБонусами(Команда);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСистемуНалогооблажения(Команда)
	
	Если ЭтоЧекКоррекции И Элементы.СистемаНалогообложенияЧекаКоррекции.Видимость
			И Не РежимРаботыСЧеком = РежимыРаботыСЧеком.ПродолжениеПослеПробития Тогда
			
		ТекущийЭлемент = Элементы.СистемаНалогообложенияЧекаКоррекции;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПрограммаЛояльности

&НаКлиенте
Процедура РаспределитьОплатуСертификатамиПоОрганизациям()
	
	СистемыНалогообложенияТоваровВКорзине = РазличныеСНОВСпискеПокупок();
	
	МассивНераспределенныхСертификатов = Новый Массив;
	Для Каждого СтрокаСертификата ИЗ ТаблицаПодарочныхСертификатов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСертификата.Организация) И НЕ ЗначениеЗаполнено(СтрокаСертификата.СистемаНалогообложения) Тогда
			МассивНераспределенныхСертификатов.Добавить(СтрокаСертификата);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НераспределенныйСертификат ИЗ МассивНераспределенныхСертификатов Цикл
		
		Индекс = 0;
		ОсталосьРаспределить = НераспределенныйСертификат.СуммаСертификата;
		РаспределенаТекущаяСтраница = Ложь;
		
		Для Каждого СистемаНалогообложения Из СистемыНалогообложенияТоваровВКорзине Цикл
			
			Если НЕ (СистемаНалогообложения.Организация = ВыбраннаяОрганизация И СистемаНалогообложения.СистемаНалогообложения = ВыбраннаяСистемаНалогообложения)
				И НЕ РаспределенаТекущаяСтраница Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаОплатПоЧеку = Объект.Оплата.Итог("Сумма");
			СуммаТоваровПоЧеку = 0;
			
			СтруктураОтбораСНО = Новый Структура("Организация, СистемаНалогообложения", СистемаНалогообложения.Организация, СистемаНалогообложения.СистемаНалогообложения);
			СтрокиТоваровПоСНО = Объект.Товары.НайтиСтроки(СтруктураОтбораСНО);
			Для Каждого СтрокаТоваровПоСНО Из СтрокиТоваровПоСНО Цикл
				
				СуммаТоваровПоЧеку = СуммаТоваровПоЧеку + СтрокаТоваровПоСНО.СуммаБезСкидки
					- СтрокаТоваровПоСНО.СуммаАвтоматическойСкидки - СтрокаТоваровПоСНО.СуммаСкидкиНаценки - ?(СуммаОплатПоЧеку > 0, 0, СтрокаТоваровПоСНО.СуммаСкидкиОплатыБонусом);
				
			КонецЦикла;
				
			СуммаСертификатаПоЧеку = Мин(ОсталосьРаспределить, СуммаТоваровПоЧеку - СуммаОплатПоЧеку);
			Если СуммаСертификатаПоЧеку <= 0 Тогда
				СтрокаСертификата = НераспределенныйСертификат;
				ЗаполнитьЗначенияСвойств(СтрокаСертификата, СистемаНалогообложения);
				СтрокаСертификата.УникальныйИдентификатор = СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
				Продолжить;
			КонецЕсли;
			
			СтрокаСертификата = НераспределенныйСертификат;
			Если Индекс > 0 Тогда
				СтрокаСертификата = ТаблицаПодарочныхСертификатов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСертификата, НераспределенныйСертификат);
			КонецЕсли;
				
			ЗаполнитьЗначенияСвойств(СтрокаСертификата, СистемаНалогообложения);
				
			СтрокаСертификата.СуммаСертификата = СуммаСертификатаПоЧеку;
			СтрокаСертификата.УникальныйИдентификатор = СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
				
			Индекс = Индекс + 1;
				
			ОсталосьРаспределить = ОсталосьРаспределить - СуммаСертификатаПоЧеку;
			
			РаспределенаТекущаяСтраница = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписатьРазблокироватьБонусныеБаллы()
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		Если ЗначениеЗаполнено(СуммаБонусов) Тогда
		
			ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
			ЗначенияПараметровМетода.Вставить("BonusesCount", Строка(СуммаБонусов));
			
			ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаСписатьБонусыКлиента(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
			Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
			
			СтрокаОтвета = Результат.ДанныеОтвета;
			
			Если СтрокаОтвета = НСтр("ru = 'Бонусы успешно списаны'") Тогда
				
				Если ОжидаемоеКоличествоЧеков < 1 Тогда
					ОчиститьДанныеКартыЛояльности(); 
				КонецЕсли;
				
			Иначе
				РазблокироватьОбъектСервераЛояльности("clientbonuses");
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(КоличествоБонусов) Тогда
			
			РазблокироватьОбъектСервераЛояльности("clientbonuses");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуОплатыБонусами(СтруктураОтложенногоПоказаПредупреждения = Неопределено)
	
	ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	
	Если ЭтоВозврат ИЛИ ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		
		Для Каждого Строка Из Объект.Товары Цикл
			Если Не Строка.СуммаСкидкиОплатыБонусомЧекаПродажи = 0
				ИЛИ Не Строка.СуммаАвтоматическойСкидкиЧекаПродажи = 0
				ИЛИ Не Строка.СуммаСкидкиНаценкиЧекаПродажи = 0 Тогда
				Строка.СуммаСкидкиОплатыБонусом =
					Строка.СуммаСкидкиОплатыБонусомЧекаПродажи / Строка.СуммаБезСкидкиЧекаПродажи * Строка.СуммаБезСкидки;
				Строка.СуммаАвтоматическойСкидки = 
					Строка.СуммаАвтоматическойСкидкиЧекаПродажи / Строка.СуммаБезСкидкиЧекаПродажи * Строка.СуммаБезСкидки;
				Строка.СуммаСкидкиНаценки =
					Строка.СуммаСкидкиНаценкиЧекаПродажи / Строка.СуммаБезСкидкиЧекаПродажи * Строка.СуммаБезСкидки;
					
				Строка.СуммаСкидокОбщая = Строка.СуммаСкидкиОплатыБонусом + Строка.СуммаАвтоматическойСкидки + Строка.СуммаСкидкиНаценкиЧекаПродажи;
				ПересчитатьСуммы(Строка);
			КонецЕсли;
		КонецЦикла;
		ПересчитатьКэшСкидкиНаценки();
	КонецЕсли;
	
	Если ЭтоВозврат Тогда
		Возврат;
	КонецЕсли;
	
	Если РассчитыватьБонусы И ЗначениеЗаполнено(КоличествоБонусов) Тогда
		
		СуммаКОплате = СуммаКОплате + СуммаБонусов;
		СуммаИтого = СуммаИтого + СуммаБонусов;
		СуммаБонусов = 0;
		
		МаксимальнаяСуммаОплатыБонусамиПоЧеку = СуммаИтого * ПроцентОплатыБонусами / 100;
		
		ОсталосьОплатитьЗаТовар = СуммаИтого - СуммаОплаченоНал - СуммаОплаченоБН
			- СуммаОплаченоБезнал - СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса;
		СуммаБонусовКРаспределению = Окр(Мин(МаксимальнаяСуммаОплатыБонусамиПоЧеку, БонусыДоступноКОплате), 2);
		СуммаБонусовКРаспределениюСУчетомОплат = СуммаБонусовКРаспределению;
		
		Если ОсталосьОплатитьЗаТовар <> 0 Тогда
			СуммаБонусовКРаспределениюСУчетомОплат = Мин(СуммаБонусовКРаспределению, ОсталосьОплатитьЗаТовар);
		Иначе
			СуммаБонусовКРаспределениюСУчетомОплат = ОсталосьОплатитьЗаТовар;
		КонецЕсли;
		
		СуммаБонусов = СуммаБонусовКРаспределениюСУчетомОплат;
		Если СуммаОплаченоБонусами = 0 Или СуммаОплаченоБонусами > СуммаБонусовКРаспределениюСУчетомОплат Тогда
			СуммаОплаченоБонусами = СуммаБонусовКРаспределениюСУчетомОплат;
		КонецЕсли;
		
		РаспределитьБонусыПоТоварам(СтруктураОтложенногоПоказаПредупреждения);
		ОбнулитьСуммыОплат = Ложь;
		ПересчитатьИтогиТабличнойЧастиТовары(ОбнулитьСуммыОплат);
		
		РаспределенныеБонусы = Объект.Товары.Итог("СуммаСкидкиОплатыБонусом");
		
		МаксимальноеКоличествоБонусовКИспользованию = ?(СуммаБонусовКРаспределениюСУчетомОплат > РаспределенныеБонусы,
			РаспределенныеБонусы,
			СуммаБонусовКРаспределению);
			
		СоставляющаяПодсказки = "";
		Если МаксимальноеКоличествоБонусовКИспользованию > 0 Тогда
			СоставляющаяПодсказки = СтрШаблон(НСтр("ru = 'до %1 р.'"),
				Формат(МаксимальноеКоличествоБонусовКИспользованию, "ЧЦ=10; ЧДЦ=2"));
		КонецЕсли;
		ТекстПодсказки = СтрШаблон("%1%2%3", НСтр("ru = 'Бонусы'"), Символы.ПС, СоставляющаяПодсказки);
		Элементы.ОплатаБонусами.РасширеннаяПодсказка.Заголовок = СоставляющаяПодсказки;
		Элементы.СуммаОплаченоБонусами.МаксимальноеЗначение = МаксимальноеКоличествоБонусовКИспользованию; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеКартыЛояльности()
	
	ПустаяСтрока = НСтр("ru = ''");
	
	НайденнаяКартаДатаРождения		= ПустаяСтрока;
	НайденнаяКартаНомер				= ПустаяСтрока;
	НайденнаяКартаПочта				= ПустаяСтрока;
	НайденнаяКартаТелефон			= ПустаяСтрока;
	НайденнаяКартаФИО				= ПустаяСтрока;
	НайденнаяКартаСуммаПродаж		= ПустаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПримененныеБонусы(ОчиститьДанныеКартыЛояльностиПокупателя = Истина)
	
	СуммаИтого = СуммаИтого + СуммаОплаченоБонусами;
	СуммаБонусов = 0;
	СуммаОплаченоБонусами = 0;
	НастроитьДоступностьПробитьЧек();
	Сдача = 0;
	ЭтоОплатаВстречнымПредоставлением = Ложь;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		СтрокаТовары.Сумма = СтрокаТовары.Сумма + СтрокаТовары.СуммаСкидкиОплатыБонусом;
		СтрокаТовары.СуммаСкидкиОплатыБонусом = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТовары.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	Если ОчиститьДанныеКартыЛояльностиПокупателя Тогда
		
		ОчиститьДанныеКартыЛояльности();
		ОчиститьДанныеПокупателя();
		
	КонецЕсли;
	АктуализироватьИзменениеЭтапаРаботыСЧекомПриИзмененииОплаты();
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыМетодовБонуснойПодсистемы(ЭтоСозданиеНовойКарты = Ложь)
	
	СтатичныеПараметры	= СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыМетодовБонуснойПодсистемы();
	ПрефиксПоля = ?(ЭтоСозданиеНовойКарты, "НоваяКарта", "НайденнаяКарта");
	
	Если ЭтоСозданиеНовойКарты Тогда 
		СтатичныеПараметры.Вставить("Client", ЭтотОбъект[ПрефиксПоля + "ФИО"]);
	КонецЕсли;
	
	СтатичныеПараметры.ClientCardTypeUID= НоваяКартаВидКарты;
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолученИдентификаторКартыЛояльности(ПараметрыКартыЛояльности) Тогда
		СтатичныеПараметры.Email		= "";
		СтатичныеПараметры.ClientCardID = ПараметрыКартыЛояльности.КодКарты;
		СтатичныеПараметры.Phone		= "";
		СтатичныеПараметры.DateOfBirth 	= ПараметрыКартыЛояльности.ДатаРождения;
	Иначе
		СтатичныеПараметры.Email			= ЭтотОбъект[ПрефиксПоля + "Почта"];
		СтатичныеПараметры.ClientCardID		= ЭтотОбъект[ПрефиксПоля + "Номер"];
		СтатичныеПараметры.Phone			= ЭтотОбъект[ПрефиксПоля + "Телефон"];
		ТекстДаты = ЭтотОбъект[ПрефиксПоля + "ДатаРождения"];
		СтатичныеПараметры.DateOfBirth
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПреобразоватьДатуИзСтроковогоПредставления(ТекстДаты);
	КонецЕсли;
	СтатичныеПараметры.GiftCardNumber	= НомерСертификата;
	СтатичныеПараметры.GiftCardUID		= Строка(ВыбранныйСертификат.УникальныйИдентификатор());
	СтатичныеПараметры.Promocode		= ВведенныйПромокод;
	
	Возврат СтатичныеПараметры;
	
КонецФункции

&НаКлиенте
Функция ПреобразованнаяСтрокаПоискаТелефонаНаСервереЛояльности(ШтрихкодПоиска)
	
	НачалоСтроки = "";
	Если Лев(ШтрихкодПоиска, 1) = "%" Тогда
		НачалоСтроки = "*";
	КонецЕсли;
	ШтрихкодТолькоЦифры = ИнтерфейсРМКСлужебныйКлиентСервер.ТолькоЦифры(ШтрихкодПоиска);
	
	Возврат СтрШаблон("%1%2", НачалоСтроки, ШтрихкодТолькоЦифры);
	
КонецФункции

&НаКлиенте
Функция ПараметрыМетодаНайтиКартуКлиента(СтруктураПараметровКлиента)
	
	ШтрихкодПоиска = СтруктураПараметровКлиента.ПараметрыШтрихкода.ШтрихкодОригинал;
	ФильтрПоиска = СтруктураПараметровКлиента.ПараметрыШтрихкода.ФильтрПоискаПоШтрихкоду;
	
	ПараметрыПоискаКарт = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураПараметровНайтиКартуКлиента();
	Если ФильтрПоиска.Свойство("УникальныйИдентификаторКарты") Тогда
		ПараметрыПоискаКарт.CardGUID = ШтрихкодПоиска;
	КонецЕсли;
	Если ФильтрПоиска.Свойство("ИнформационныеКарты") Тогда
		ПараметрыПоискаКарт.ClientCardID = ШтрихкодПоиска;
	КонецЕсли;
	Если ФильтрПоиска.Свойство("УникальныйИдентификаторВладельцаКарты") Тогда
		ПараметрыПоискаКарт.ClientGUID = ШтрихкодПоиска;
	КонецЕсли;
	Если ФильтрПоиска.Свойство("ШаблонАдресЭПСЛ") Тогда
		ПараметрыПоискаКарт.Email = ШтрихкодПоиска;
	КонецЕсли;
	Если ФильтрПоиска.Свойство("ШаблонНомерТелефонаСЛ") Или ФильтрПоиска.Свойство("ПоследниеЦифрыТелефонаСЛ") Тогда
		ПараметрыПоискаКарт.Phone = ПреобразованнаяСтрокаПоискаТелефонаНаСервереЛояльности(ШтрихкодПоиска);
	КонецЕсли;
	ВыборКлиента = Ложь;
	Если СтруктураПараметровКлиента.Свойство("ВыборКлиента") Тогда
		ВыборКлиента = СтруктураПараметровКлиента.ВыборКлиента;
	КонецЕсли;
	ПараметрыПоискаКарт.BlockBonuses = ?(ИспользоватьОплатуБонусами И НЕ ВыборКлиента, "1", "0");

	Возврат ПараметрыПоискаКарт;
	
КонецФункции

&НаКлиенте
Процедура РазблокироватьОбъектСервераЛояльности(ТипОбъекта = "clientbonuses")
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
		
		Если ТипОбъекта = "clientbonuses" Тогда
			Если СуммаБонусов <= 0 И КоличествоБонусов <= 0 Тогда
				Возврат;
			Иначе
				ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаРазблокироватьБонусыКлиента(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипОбъекта = "giftcard" Тогда
			Если СуммаОплаченоСертификатами <= 0 И СуммаСертификата <= 0 Тогда
				Возврат;
			Иначе
				ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаРазблокироватьПодарочныйСертификат(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипОбъекта = "promocode" Тогда
			ПредъявленныеПромокоды = ТаблицаПримененныхПромокодов.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
			Если ПредъявленныеПромокоды.Количество() = 0 И НЕ ЗначениеЗаполнено(ВведенныйПромокод) Тогда
				Возврат;
			Иначе
				ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаРазблокироватьПромокод(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
			КонецЕсли;
		КонецЕсли;
		Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		Если ТипОбъекта = "clientbonuses" Тогда 
			
			Если Не Результат.ДанныеОтвета = НСтр("ru = 'Бонусы разблокированы'") Тогда
				ПоказатьПредупреждение(,
					НСтр("ru = 'Не удалось разблокировать бонусы. Пожалуйста, обратитесь к администратору'"));
			КонецЕсли;
				
		КонецЕсли;
			
		Если ТипОбъекта = "giftcard" 
			И НЕ Результат.ДанныеОтвета = "Подарочный сертификат разблокирован" Тогда
				ПоказатьПредупреждение(,
					НСтр("ru = 'Не удалось разблокировать подарочный сертификат. Пожалуйста, обратитесь к администратору'"));
		КонецЕсли;
			
		Если ТипОбъекта = "promocode" 
			И НЕ Результат.ДанныеОтвета = "Промокод разблокирован" Тогда
				ПоказатьПредупреждение(,
					НСтр("ru = 'Не удалось разблокировать промокод. Пожалуйста, обратитесь к администратору'"));
		КонецЕсли;
		
	Иначе
		
		ПараметрыОбъекта = Новый Структура;
		ПараметрыОбъекта.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
		ПараметрыОбъекта.Вставить("НомерСертификата", НомерСертификата);
		ПараметрыОбъекта.Вставить("Промокод", ВведенныйПромокод);
		ОбщегоНазначенияРМККлиентПереопределяемый.РазблокироватьОбъектСервераЛояльности(ТипОбъекта, ПараметрыОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуОплатыСертификатами(СуммаИтогоОсталосьОплатить, СуммаБезОкругления)
	
	Если ЗначениеЗаполнено(ВыбраннаяОрганизация) И ЗначениеЗаполнено(ВыбраннаяСистемаНалогообложения) Тогда
		СтруктураОтбораСНО = Новый Структура("Организация, СистемаНалогообложения", ВыбраннаяОрганизация, ВыбраннаяСистемаНалогообложения);
		СтрокиПодарочныхСертификатов = ТаблицаПодарочныхСертификатов.НайтиСтроки(СтруктураОтбораСНО);
		
		ОплаченоСертификатами = 0;
		Для Каждого СтрокаПодарочныхСертификатов Из СтрокиПодарочныхСертификатов Цикл
			ОплаченоСертификатами = ОплаченоСертификатами + СтрокаПодарочныхСертификатов.СуммаСертификата;
			ЭтотОбъект["СуммаСертификата_" + СтрокаПодарочныхСертификатов.УникальныйИдентификатор] = СтрокаПодарочныхСертификатов.СуммаСертификата;
		КонецЦикла;
		СуммаОплаченоСертификатами = ОплаченоСертификатами;
	Иначе
		СуммаОплаченоСертификатами = ТаблицаПодарочныхСертификатов.Итог("СуммаСертификата");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписатьПодарочныйСертификат()
	
		ЭтоОперацияВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
		Если ЭтоОперацияВозврат Тогда
			СуммаСписания = Строка(-СуммаСертификата);
		Иначе
			СуммаСписания = Строка(СуммаСертификата);
		КонецЕсли;
		
		ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
		ЗначенияПараметровМетода.Вставить("GiftCardWriteOffAmount", СуммаСписания);
		
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаСписатьПодарочныйСертификат(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
		Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		СтрокаОтвета = Результат.ДанныеОтвета;
		
		Если СтрокаОтвета = "Подарочный сертификат успешно списан на указанную сумму" Тогда
			
			СуммаОстаткаСертификатов = СуммаОстаткаСертификатов - СуммаОплаченоСертификатами;
			Если ОжидаемоеКоличествоЧеков < 1 Тогда
				ОчиститьДанныеПодарочногоСертификата();
			КонецЕсли;
			
		Иначе
			РазблокироватьОбъектСервераЛояльности("giftcard");
		КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НайтиПодарочныйСертификат()
	
	Если Не ЗначениеЗаполнено(НомерСертификата) Тогда 
		
		ТекстОшибки = НСтр("ru = 'Введите номер сертификата'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПолучитьДанныеПодарочногоСертификата(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
		Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		Если Результат.ЕстьОшибки Тогда
			ТекстЗаголовка = НСтр("ru = 'Ошибка поиска подарочного сертификата.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, Результат.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДанныеОтвета = Неопределено;
		СтрокаJSON = Результат.ДанныеОтвета;
		СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
		
		
		Если НЕ ДанныеОтвета = Неопределено Тогда 
			
			Если ДанныеОтвета.Свойство("Error") И НЕ ДанныеОтвета.Error Тогда 
				
				СуммаСертификата = ДанныеОтвета.GiftCardBalance;
				
				ГУИД = ДанныеОтвета.GiftCard.GiftCardRef;
				ПодарочныйСертификат = ПодарочныйСертификатПоГУИД(ГУИД);
				
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияСуммаСертификата, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.ОплатитьСертификатом, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.НайтиСертификат, Ложь);
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияОплатаСертификатами, Ложь);
				УстановитьВидимостьЭлементаФормы(Элементы.НомерСертификата, Ложь);
				УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьСертификатом, СуммаСертификата > 0); 
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У клиента %1 %2'"),
					Формат(СуммаСертификата, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
					ПредставлениеВалюты);
				Элементы.ДекорацияСуммаСертификата.Заголовок = ТекстСообщения;
				
			ИначеЕсли ДанныеОтвета.Свойство("Error") И ДанныеОтвета.Error Тогда 
				
				ТекстЗаголовка = НСтр("ru = 'Ошибка поиска подарочного сертификата.'");
				ТекстОшибки = СтрШаблон(НСтр("ru = '%1'"), ДанныеОтвета.ErrorMessage);
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодарочныйСертификат(ИдентификаторСертификата, УдалитьСтрокуТаблицы = Ложь)
	
	Если УдалитьСтрокуТаблицы Тогда 
		
		Отбор = Новый Структура;
		Отбор.Вставить("УникальныйИдентификатор", ИдентификаторСертификата);
		МассивСтрокТаблицы = ТаблицаПодарочныхСертификатов.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
			ЭтоСерийныйПодарочныйСертификат = СтрокаТаблицы.ЭтоСерийныйПодарочныйСертификат;
			ТаблицаПодарочныхСертификатов.Удалить(СтрокаТаблицы);
		КонецЦикла;
		УстановитьВидимостьКомандыУдаленияВсехСертификатов(Элементы.ГруппаУдалитьСертификаты, ТаблицаПодарочныхСертификатов);
		
	КонецЕсли;
	
	Если НЕ Элементы.Найти("СуммаСертификата_" + ИдентификаторСертификата) = Неопределено Тогда
		УдаляемыеРеквизиты = Новый Массив;
		УдаляемыеРеквизиты.Добавить("СуммаСертификата_" + ИдентификаторСертификата);
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
		
		УдалитьЭлементФормы("ГруппаСуммаОплатаСертификатом_" + ИдентификаторСертификата);
		УдалитьЭлементФормы("СуммаСертификата_" + ИдентификаторСертификата);
		УдалитьЭлементФормы("ДекорацияУдалитьСертификат_" + ИдентификаторСертификата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписатьРазблокироватьПодарочныеСертификаты(Списать = Ложь)
	
	РазблокироватьСертификат = (СуммаСертификата > 0) И ЭтоСерийныйПодарочныйСертификат;
	СтруктураОтбора = Новый Структура("НомерСертификата", НомерСертификата);
	Если НЕ ТаблицаПодарочныхСертификатов.НайтиСтроки(СтруктураОтбора).Количество() 
		И РазблокироватьСертификат Тогда
		РазблокироватьОбъектСервераЛояльности("giftcard");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПодарочныхСертификатов Цикл
		
		Если СтрокаТаблицы.СуммаСертификата > 0 И СтрокаТаблицы.ЭтоСерийныйПодарочныйСертификат Тогда
			
			НомерСертификата = СтрокаТаблицы.НомерСертификата;
			СуммаСертификата = СтрокаТаблицы.СуммаСертификата;
			
			Если Списать И ИспользоватьСерверЛояльностиПолучательДанных Тогда
				СписатьПодарочныйСертификат();
			Иначе
				РазблокироватьОбъектСервераЛояльности("giftcard");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСертификатВТаблицу(Форма, БалансСертификата, ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		СуммаСертификата = Форма.СуммаСертификата;
		НомерСертификата = Форма.НомерСертификата;
		ПодарочныйСертификат = Форма.ПодарочныйСертификат;
		ЭтоСерийныйПодарочныйСертификат = Форма.ЭтоСерийныйПодарочныйСертификат;
		
	Иначе
		СуммаСертификата = Форма.ТекущийТоварЦенаИзКарточки;
		НомерСертификата = ТекущаяСтрока.Серия;
		ПодарочныйСертификат = ТекущаяСтрока.Номенклатура;
		ЭтоСерийныйПодарочныйСертификат = ЗначениеЗаполнено(ТекущаяСтрока.Серия);
	КонецЕсли;
	
	СтрокаДанныхСертификата = Форма.ТаблицаПодарочныхСертификатов.Добавить();
	СтрокаДанныхСертификата.СуммаСертификата = СуммаСертификата;
	СтрокаДанныхСертификата.ЛимитСертификата = СуммаСертификата;
	СтрокаДанныхСертификата.НомерСертификата = НомерСертификата;
	СтрокаДанныхСертификата.ПодарочныйСертификат = ПодарочныйСертификат;
	СтрокаДанныхСертификата.ЭтоСерийныйПодарочныйСертификат = ЭтоСерийныйПодарочныйСертификат;
	СтрокаДанныхСертификата.БалансСертификата = БалансСертификата;
	УстановитьВидимостьКомандыУдаленияВсехСертификатов(Форма.Элементы.ГруппаУдалитьСертификаты,
		Форма.ТаблицаПодарочныхСертификатов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользованиеСерий(Номенклатура)
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьИспользованиеСерий(Номенклатура, Результат);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьИспользованиеАвтоматическихСкидок()
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		ИспользоватьАвтоматическиеСкидки = Истина;
		
	Иначе
		
		ИспользуютсяАвтоСкидки = Ложь;
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьПризнакИспользованияАвтоматическихСкидок(ИспользуютсяАвтоСкидки);
		ИспользоватьАвтоматическиеСкидки = ИспользуютсяАвтоСкидки;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиРасчетаСкидок, ИспользоватьАвтоматическиеСкидки);
	ПоказыватьКнопкиСкидок = Истина;
	Если РежимКассыСамообслуживания Тогда
		ПоказыватьКнопкиСкидок = Ложь;
	Иначе
		ПоказыватьКнопкиСкидок = ИспользоватьАвтоматическиеСкидки ИЛИ ДопускаетсяПрименениеСкидок;
	КонецЕсли;
	УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьРассчитанныеСкидки, ПоказыватьКнопкиСкидок);
	УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьСкидкиНаЧек, ПоказыватьКнопкиСкидок);
	УстановитьВидимостьЭлементаФормы(Элементы.СуммаСкидки, НЕ ПоказыватьКнопкиСкидок);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьАвтоматическиеСкидкиНаСервере()
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		ОбщегоНазначенияРМК.РассчитатьАвтоматическиеСкидки(ЭтотОбъект);
	Иначе
		ОбщегоНазначенияРМКПереопределяемый.РассчитатьАвтоматическиеСкидки(ЭтотОбъект);
	КонецЕсли;
	
	Если (РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате И ВыдаватьПодарокНаКассе)
			Или Не РежимКассыСамообслуживания Тогда
		ПрименитьПодарки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиКлиент(ДополнительныеПараметры = Неопределено, ОткрыватьФормуВыбораПодарков = Ложь)

	ПроверитьСоединениеССерверомЛояльности();
	
	Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации) И ИспользоватьАвтоматическиеСкидки Тогда
		ОтменитьСкидки();
		БылСохраненТолькоНомер = (Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта))
			И ИнтерфейсРМКСлужебныйКлиентСервер.СохраненТолькоНомерКартыЛояльности(ПараметрыКартыЛояльности);
		РассчитатьАвтоматическиеСкидкиНаСервере();
		ПолученаКарта = ЗначениеЗаполнено(Объект.ДисконтнаяКарта)
			Или ИнтерфейсРМКСлужебныйКлиентСервер.ПолученИдентификаторКартыЛояльности(ПараметрыКартыЛояльности);
		Если ПолученаКарта И БылСохраненТолькоНомер Тогда
			ЗавершитьВводШтрихкодаНайденаКарта(КодВозвратаДиалога.Нет, Ложь);
		КонецЕсли;
		Если НЕ РежимКассыСамообслуживания Тогда
			РежимВыбораПодарка = Истина;
			ПодключитьОбработчикОжидания("ВыдатьПодарок", 0.1 , Истина);
		ИначеЕсли РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате И ВыдаватьПодарокНаКассе Тогда
			ВыдатьПодарокКассаСамообслуживания();
		КонецЕсли;
		СкидкиРассчитаны = Истина;
		ОтразитьСработавшиеПромокодыНаКлиенте();
		Если ТаблицаПодарков.Количество() И ОткрыватьФормуВыбораПодарков И РежимДопускаетВыборПодарка() Тогда
			РежимВыбораПодарка = Истина;
			ПодключитьОбработчикОжидания("ОткрытьФормуВыбораПодарков", 0.1, Истина);
		ИначеЕсли ТаблицаПодарков.Количество() И НЕ РежимКассыСамообслуживания Тогда
			РежимРасчетаСкидокСтрока = ?(РежимРасчетаСкидокСтрока, Ложь, РежимРасчетаСкидокСтрока);
			Если ИспользоватьАвтоматическиеСкидки Тогда
				ПерезаполнитьТаблицуСкидок();
				РежимРасчетаУправляемыхСкидок = ?(РежимРасчетаСкидокСтрока, "На строку", "На документ");
				ЗаполнитьУправляемыеСкидкиВыбор(РежимРасчетаУправляемыхСкидок);
			КонецЕсли;
			ПереключитьРежимНаПоказСкидок(Истина);
		КонецЕсли;
		ПроверитьПрименениеУправляемыхСкидокКлиент();
		ПересчитатьИтогиТабличнойЧастиТовары();
		РассчитатьСуммуОплатыБонусами();
		РассчитатьСуммыОплаты();
		УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, СкидкиРассчитаны);
		ТребуетсяПересчетСкидок = Ложь;
		ПерезаполнитьТаблицуСкидок();
		ВывестиСообщения();
	КонецЕсли;
	
	Если Не РежимВыбораПодарка И ЗначениеЗаполнено(ИмяМетода) Тогда
		
		Выполнить(ИмяМетода);
		ИмяМетода = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПрименениеУправляемыхСкидокКлиент()
	
	НеСработавшиеУправляемыеСкидки = Новый Массив();
	Для Каждого УправляемаяСкидка Из ТаблицаВыбранныхУправляемыхСкидок Цикл
		ОтборСкидок = Новый Структура("СкидкаНаценка",
			?(ТипЗнч(УправляемаяСкидка.СкидкаНаценка) = Тип("Строка"), УправляемаяСкидка.ИдентификаторСкидки, УправляемаяСкидка.СкидкаНаценка));
		Если ЗначениеЗаполнено(УправляемаяСкидка.ИдентификаторСтроки) Тогда
			ОтборСкидок.Вставить("ИдентификаторСтроки", УправляемаяСкидка.ИдентификаторСтроки);
		КонецЕсли;
		СработавшиеСкидки = ТаблицаСкидкиНаценки.НайтиСтроки(ОтборСкидок);
		Если СработавшиеСкидки.Количество() = 0 Тогда
			НеСработавшиеУправляемыеСкидки.Добавить(УправляемаяСкидка);
		КонецЕсли;
	КонецЦикла;
	СкидокНеСработало = НеСработавшиеУправляемыеСкидки.Количество();
	Если СкидокНеСработало > 0 Тогда
		ТекстЗаголовка = НСтр("ru = 'Некоторые управляемые скидки не применены.'");
		КраткоеОписаниеСкидок = "";
		ПодробноеОписаниеСкидок = "";
		Если СкидокНеСработало = 1 Тогда
			КраткоеОписаниеСкидок = Строка(НеСработавшиеУправляемыеСкидки[0].СкидкаНаценка);
		Иначе 
			КраткоеОписаниеСкидок = Строка(СкидокНеСработало) + НСтр("ru=' шт.'");
			ПереносСтроки = ";
			|";
			ПодробноеОписаниеСкидок = НСтр("ru = 'Не сработавшие скидки:'");
			Для Каждого НеСработавшаяСкидка Из НеСработавшиеУправляемыеСкидки Цикл
				ПодробноеОписаниеСкидок = СтрШаблон(НРег("%1%2"), ПереносСтроки, НеСработавшаяСкидка.СкидкаНаценка)
			КонецЦикла;
		КонецЕсли;
		ТекстПояснения = СтрШаблон(НСтр("ru='Управляемые скидки не сработали (%1). 
		|Возможно, скидки содержат дополнительные условия, которые не выполнены в данном чеке.%2'"),
		КраткоеОписаниеСкидок, ПодробноеОписаниеСкидок);
		
		ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстПояснения, ПараметрыОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщения(ПослеОформленияЧека = Ложь)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПослеОформленияЧека", ПослеОформленияЧека);
	МассивСообщений = ТаблицаСообщений.НайтиСтроки(Отбор);
	ТекстЗаголовка = НСтр("ru = 'Маркетинговое сообщение.'");
	Для Каждого Сообщение Из МассивСообщений Цикл
		ПоказатьПредупреждение(, Сообщение.ТекстСообщения, , ТекстЗаголовка);
		ТаблицаСообщений.Удалить(Сообщение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПодарков()
	
	Если ТаблицаПодарков.Количество() = 0 Тогда
		Если ТаблицаПодаркиБезВыбора.Количество() = 0 Тогда
		
			РежимВыбораПодарка = Ложь;
			ВыполнитьОтложенныйМетод();
			
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаДополнительныйСписокТоваров);
	НастроитьВидимостьЭлементовГруппыПоискаТовара(Истина);
	Адрес = ПолучитьМассивАдресовТаблицСПодарками();
	ЗаголовокСтраницы = НСтр("ru = 'Выберите подарок'");
	РежимВыбораПодарка = Истина;
	ИзменитьСостояниеЗаголовкаСтраницыПоискаТовара(ЗаголовокСтраницы, Истина);
	ПоискТоваровОткрытИзСтрокиВвода = Истина;
	ОткрытьКаталогКлиент();
	ЗаполнитьДанныеТаблицыДляВыбораНоменклатуры(Адрес);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивАдресовТаблицСПодарками()
	
	АдресПодарков = ПоместитьВоВременноеХранилище(ТаблицаПодарков.Выгрузить());
	Возврат АдресПодарков;
	
КонецФункции

&НаСервере
Процедура ПрименитьПодарки()
	
	Если ТаблицаПодарков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокКУдалению = Новый Массив;
	
	КоличествоТоваров = Объект.Товары.Количество();
	Если КоличествоТоваров > 0 Тогда
		Продавец = Объект.Товары[КоличествоТоваров - 1].Продавец;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаПодарков Цикл
		
		Если СтрокаТаблицы.ВыборИзСписка Тогда
			Продолжить;
		КонецЕсли;
		
		МассивТоваров = Новый Массив;
		МассивТоваров.Добавить(СтрокаТаблицы.Номенклатура);
		
		ТаблицаТовары = Новый ТаблицаЗначений;
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуТовары(МассивТоваров, ТаблицаТовары);
		
		ВидНоменклатуры = Неопределено;
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьВидНоменклатуры(СтрокаТаблицы.Номенклатура, ВидНоменклатуры);
		
		ТипНоменклатуры = Неопределено;
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТипНоменклатуры(СтрокаТаблицы.Номенклатура, ТипНоменклатуры);
	
		Для Каждого СтрокаТовара Из ТаблицаТовары Цикл
			НоваяСтрока = ТаблицаПодаркиБезВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		
		МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		ТаблицаПодарков.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСкидки(ОтменитьРучныеСкидки = Ложь)
	
	СкидкиРассчитаны = Ложь;
	ЦветФонаНеактивнойКнопки = ЦветаФормы.Авто;
	ТаблицаСкидкиНаценки.Очистить();
	ТаблицаБонусныеБаллы.Очистить();
	ТаблицаБонусныеБаллыЧекаПродажи.Очистить();
	
	МассивПодарков = Новый Массив;
	
	Для Каждого СтрокаТовар Из Объект.Товары Цикл
		
		Если СтрокаТовар.Подарок Тогда
			МассивПодарков.Добавить(СтрокаТовар);
			Продолжить;
		КонецЕсли;
		
		Если ОтменитьРучныеСкидки Тогда
			
			СтрокаТовар.СуммаСкидкиНаценки = 0;
			СтрокаТовар.ПроцентСкидкиНаценки = 0;
			СтрокаТовар.РассчитанаСкидка = Ложь;
			
			ЗначениеСкидкиНаЧек = 0;
			ПримененаСкидкаНаЧек = Ложь;
			
			Если СтрокаТовар.ОтображаетсяСкидкаПроцентом ИЛИ СтрокаТовар.ОтображаетсяСкидкаСуммой Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, НЕ СкидкиРассчитаны);
				
				Если СтрокаТовар.ОтображаетсяСкидкаПроцентом Тогда
					Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаНеактивнойКнопки;
				ИначеЕсли СтрокаТовар.ОтображаетсяСкидкаСуммой Тогда
					Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаНеактивнойКнопки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТовар.СуммаАвтоматическойСкидки= 0;
		СтрокаТовар.ПроцентАвтоматическойСкидки = 0;
		
		ПересчитатьСуммы(СтрокаТовар);
		
	КонецЦикла;
	
	Если ОтменитьРучныеСкидки Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ЗначениеСкидкиНаЧек, НЕ СкидкиРассчитаны);
		Если ОтображаетсяСкидкаПроцентомНаЧек Тогда
			Элементы.СкидкаНаЧекПроцентом.ЦветФона = ЦветФонаНеактивнойКнопки;
		ИначеЕсли ОтображаетсяСкидкаСуммойНаЧек Тогда
			Элементы.СкидкаНаЧекСуммой.ЦветФона = ЦветФонаНеактивнойКнопки;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаПодарок Из МассивПодарков Цикл
		Объект.Товары.Удалить(СтрокаПодарок);
	КонецЦикла;
	
	ТаблицаПодарков.Очистить();
	
	Если ТекущийТоварСкидка <> 0 И ОтменитьРучныеСкидки Тогда
		
		ТекущийТоварСкидка = 0;
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветаФормы.Авто;
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветаФормы.Авто;
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Истина);
		
	КонецЕсли;
	
	ПересчитатьИтогиТабличнойЧастиТовары();
	РассчитатьСуммыОплаты();
	
	ОтразитьСработавшиеПромокодыНаКлиенте();
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, СкидкиРассчитаны);
	ТребуетсяПересчетСкидок = Ложь;
	ОчиститьТаблицыУправленияСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТоварЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаТовар = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	ЭтоПодарок = СтрокаТовар.Подарок;
	Если СкидкиРассчитаны Тогда
		ОтменитьСкидки();
		Если ЭтоПодарок Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Строка = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВозможноЗакрытьСессиюРегистрацииМарок = ККМПоддерживаетПроверкуКодовМаркировки
		И ЗначениеЗаполнено(Строка.КодМаркировки)
		И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
		И ВозможноЗакрытьСессиюРегистрацииМарок();
		
	Если ВозможноЗакрытьСессиюРегистрацииМарок Тогда
		ЗакрытьСессиюРегистрацииМарок();
	КонецЕсли;
	
	УдалитьСтрокуТовара(ЭтотОбъект, Строка, Объект.Товары);
	ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
	ПроинформироватьПользователяОКоличествеЧеков();
	
	ОбновитьИнформациюНаДисплееПокупателя("УдалениеТовара");
	
	Если Объект.Товары.Количество() = 0 И НЕ ЭтоЧекКоррекции Тогда
		
		Если ЗначениеЗаполнено(ОтложенныйЧек) Тогда
			АннулироватьЧек(ОтложенныйЧек);
		КонецЕсли;
		
		ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
		РазблокироватьОбъектСервераЛояльности("clientbonuses");
		СписатьРазблокироватьПодарочныеСертификаты();
		ИнициализироватьИнтерфейсРабочегоМестаКассира();
		
	Иначе
		ПересчитатьСуммыПослеУдаленияСтроки();
	КонецЕсли;
	ОбработатьИзменениеТаблицыТоваровНаКлиенте();
		
КонецПроцедуры

&НаКлиенте
Процедура ЦенаИзКарточкиПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЦенаИзКарточкиПриИзмененииПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДанныеПриИзмененииКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("УвеличитьКоличество") Тогда
		УвеличитьКоличество = ДополнительныеПараметры.УвеличитьКоличество;
	Иначе
		УвеличитьКоличество = Ложь;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	
	Если Результат = КодВозвратаДиалога.Нет 
		ИЛИ (НЕ ТекущаяСтрока = Неопределено И ТекущаяСтрока.ТоварКЗамене) Тогда
		ТекущийТоварКоличество = ТекущаяСтрока.Количество;
		Возврат;
	КонецЕсли;
	
	Если ПримененыСкидки() Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Весовой Тогда
		ИзменитьКоличествоВесовогоТовара(ТекущаяСтрока, УвеличитьКоличество);
		Возврат;
	ИначеЕсли ТекущаяСтрока.ЭтоНабор Тогда
		ИзменитьКоличествоНабора(ТекущаяСтрока, УвеличитьКоличество);
		Возврат;
	КонецЕсли;
	
	Если УвеличитьКоличество Тогда
		ТекущийТоварКоличество = ТекущийТоварКоличество + 1;
		СкорректироватьТекущееКоличество(ТекущаяСтрока);
		ОбработатьИзменениеКоличестваНеВесовогоТовара(ТекущаяСтрока);
	Иначе
		Если ТекущийТоварКоличество > 1 Тогда
			ТекущийТоварКоличество = ТекущийТоварКоличество - 1;
			ОбработатьИзменениеКоличестваНеВесовогоТовара(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
		Если ИспользоватьНовыйПодборТоваров Тогда
			
			РежимВыбораПодарка = Ложь;
			РежимВыбораПодарочногоСертификата = Ложь;
			ОткрытьКаталогКлиент();
			
		Иначе
			ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьФормуПодбораТоваров(ЭтотОбъект);
		КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаНаЧекЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	Активность = Ложь;
	НастроитьИнтерфейсПримененияСкидкиНаЧек(Элементы.ГруппаСкидкиНаЧек, Активность);
	ТекущийЭлемент = Элементы.ЗначениеСкидкиНаЧек;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаТекущийТоварПроцентЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если ЭтоСоставляющаяНабора(ТекущиеДанные) Тогда
			
			СоставНабора = СоставНабораПоЭлементуНабора(ТекущиеДанные, Объект.Товары);
			
			Если СоставНабора.Количество() = Объект.Товары.Количество() Тогда
				Позиции = Объект.Товары;
			Иначе
				Позиции = СоставНабора;
			КонецЕсли;
			
			РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ТекущийТоварСкидка);
			
		Иначе
			РучнаяСкидкаПроцентомПоСтроке(ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	ВыполнитьПересчетСкидок();
КонецПроцедуры

&НаКлиенте
Процедура СкидкаТекущийТоварСуммаЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если ЭтоСоставляющаяНабора(ТекущиеДанные) Тогда
			
			СоставНабора = СоставНабораПоЭлементуНабора(ТекущиеДанные, Объект.Товары);
			
			Если СоставНабора.Количество() = Объект.Товары.Количество() Тогда
				Позиции = Объект.Товары;
			Иначе
				Позиции = СоставНабора;
			КонецЕсли;
			
			ЭтоРасчетСкидкиНаНабор = Истина;
			РассчитатьРучнуюСкидкуСуммойНаПозиции(Позиции, ТекущийТоварСкидка);
			
		Иначе
			РучнаяСкидкаСуммойПоСтроке(ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	ВыполнитьПересчетСкидок();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаНаличнымиЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ОплатаНаличнымиНаКлиенте()";
		РассчитатьСкидкиКлиент();
	Иначе
		ОплатаНаличнымиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаQRКодомЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		РассчитатьСкидкиКлиент();
	КонецЕсли;

	Если Не РежимВыбораПодарка Тогда
		Если ДополнительныеПараметры.Имя = "КомандаПлатежнаяСистема_ОплатаЮКасса" Тогда
			ПлатежнаяСистемаККТ = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.ЮКасса");
			ТипОплаты = "ЮКасса";
		ИначеЕсли ДополнительныеПараметры.Имя = "КомандаПлатежнаяСистема_ОплатаСБП" Тогда
			ПлатежнаяСистемаККТ = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей"); 
			ТипОплаты = "СБП";
		КонецЕсли;
		ОплатаQRКодом(ПлатежнаяСистемаККТ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОплатаВРассрочкуЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ОплатаВРассрочкуНаКлиенте()";
		РассчитатьСкидкиКлиент();
	Иначе
		ОплатаВРассрочкуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуВРассрочку()
	
	Если Элементы.Предоплата.Доступность Тогда
		ПредоплатаНаКлиенте();
	Иначе
		ОплатаВРассрочкуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуСертификатами(Элемент)
	
	ИдентификаторСертификата = СтрЗаменить(Элемент.Имя, "ДекорацияУдалитьСертификат_", "");
	
	Если ЗначениеЗаполнено(ИдентификаторСертификата) Тогда 
		
		УдалитьСтрокуПодарочногоСертификата(ИдентификаторСертификата);
		ПересчитатьСуммыОплатыПриРедактированииСертификатов();
		
	КонецЕсли;
	
	НастроитьВидимостьОплатыПодарочнымиСертификатами(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ПредоплатаНаКлиенте()";
		РассчитатьСкидкиКлиент();
	Иначе
		ПредоплатаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаСертификатомНСПКЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ПродолжитьОплатуСертификатомНСПКНаКлиенте()";
		РассчитатьСкидкиКлиент();
	Иначе
		ПродолжитьОплатуСертификатомНСПКНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансаЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ЗачетАвансаНаКлиенте()";
		РассчитатьСкидкиКлиент();
	Иначе
		ЗачетАвансаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БезналЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "БезналНаКлиенте()";
		РассчитатьСкидкиКлиент();
	Иначе
		БезналНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПоРасчетуСкидок(ИмяПроцедуры, ДополнительныеПараметры = Неопределено, ПересчетСкидок = Ложь)
	
	Если ПересчетСкидок Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Подтверждение расчета скидок.'");
		ТекстВопроса = НСтр("ru = 'Скидки не были рассчитаны, рассчитать?'");
		КнопкаПоУмолчанию = КодВозвратаДиалога.Да;
		
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'Подтверждение отмены скидок.'");
		ТекстВопроса = НСтр("ru = 'Скидки будут очищены, продолжить?'");
		КнопкаПоУмолчанию = КодВозвратаДиалога.Нет;
		
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КнопкаПоУмолчанию, ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОПревышенииМинимальнойЦены(Знач МинимальнаяЦена)
	
	МинимальнаяЦена = Формат(МинимальнаяЦена, "ЧДЦ=2");
	
	ТекстЗаголовка = НСтр("ru = 'Превышена минимальная цена'");
	ТекстПояснения = СтрШаблон(НСтр("ru = 'Установлено значение - %1 %2'"), МинимальнаяЦена, ПредставлениеВалюты);
	
	ПоказатьПредупреждение(, ТекстПояснения, , ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаКредитомЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ОплатаКредитомНаКлиенте()";
		РассчитатьСкидкиКлиент();
	Иначе
		ОплатаКредитомНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаИзКарточкиПриИзмененииПродолжение()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ПримененыСкидки() Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.МРЦ) Тогда
		
		Если ТекущийТоварЦенаИзКарточки <> ТекущаяСтрока.МРЦ Тогда
			ТекущийТоварЦенаИзКарточки = ТекущаяСтрока.МРЦ;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ЕМРЦ) Тогда
		
		Если ТекущийТоварЦенаИзКарточки < ТекущаяСтрока.ЕМРЦ Тогда
			ТекущийТоварЦенаИзКарточки = ТекущаяСтрока.ЕМРЦ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.МинимальнаяЦена) Тогда
		
		Если ТекущаяСтрока.РассчитанаСкидка Тогда
			ТекущаяСтрока.СуммаСкидкиНаценки = 0;
			ТекущаяСтрока.ПроцентСкидкиНаценки = 0;
			ТекущаяСтрока.РассчитанаСкидка = Ложь;
			ТекущийТоварСкидка = 0;
		КонецЕсли;
		
		Если ТекущийТоварЦенаИзКарточки < ТекущаяСтрока.МинимальнаяЦена Тогда
			ТекущийТоварЦенаИзКарточки = ТекущаяСтрока.МинимальнаяЦена;
			ПредупредитьОПревышенииМинимальнойЦены(ТекущаяСтрока.МинимальнаяЦена);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ЭтоНабор И ТекущаяСтрока.ЦенаНабораСводно Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("НомерНабора", ТекущаяСтрока.НомерНабора);
		
		СтрокиНабора = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
		
		СуммаДолейСтоимости = 0;
		Для Каждого СтрокаНабора Из СтрокиНабора Цикл
			СуммаДолейСтоимости = СуммаДолейСтоимости + СтрокаНабора.ДоляСтоимости;
		КонецЦикла;
		
		Счетчик = 0;
		ОстатокСтоимости = ТекущийТоварЦенаИзКарточки;
		Для Каждого СтрокаНабора Из СтрокиНабора Цикл
			СтрокаНабора.Цена = ТекущийТоварЦенаИзКарточки / СуммаДолейСтоимости * СтрокаНабора.ДоляСтоимости;
			ОстатокСтоимости = ОстатокСтоимости - СтрокаНабора.Цена * СтрокаНабора.Количество / СтрокаНабора.КоличествоНаборов;
			
			Счетчик = Счетчик + 1;
			Если Счетчик = СтрокиНабора.Количество() И ОстатокСтоимости <> 0 Тогда
				СтрокаНабора.Цена
					= СтрокаНабора.Цена + ОстатокСтоимости / СтрокаНабора.Количество * СтрокаНабора.КоличествоНаборов;
			КонецЕсли;
			
			ПересчитатьСуммы(СтрокаНабора);
		КонецЦикла;
		Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция Тогда
			ОбнулитьПеременныеСуммОплат();
		КонецЕсли;
		
	Иначе
		ТекущаяСтрока.Цена = ТекущийТоварЦенаИзКарточки;
		ПересчитатьСуммы(ТекущаяСтрока, Истина);
	КонецЕсли;

	РассчитатьСуммуОплатыБонусами();
	ОбновитьИнформациюНаДисплееПокупателя("ИзменениеЦены");
	ЗакрытьСтраницуСОшибкойЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура УправляемыеСкидкиЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
		ОтменитьСкидки(Истина);
	КонецЕсли;
	
	ОбластьДействияСкидки = Неопределено;
	Если ДополнительныеПараметры.Свойство("ОбластьДействия") Тогда
		ОбластьДействияСкидки = ДополнительныеПараметры.ОбластьДействия;
	КонецЕсли;
	ОткрытьВыборУправляемыхСкидок(ОбластьДействияСкидки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборУправляемыхСкидок(ОбластьДействияСкидки = Неопределено)
	
	МассивУправляемыхСкидок = ПолучитьМассивУправляемыхСкидок(ОбластьДействияСкидки);
	Если МассивУправляемыхСкидок.Количество() = 1 Тогда
		ОбработатьВыборУправляемыхСкидок(МассивУправляемыхСкидок, Неопределено);
	Иначе
		ИдентификаторТекущейСтроки = "";
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		Если Не ТекущаяСтрока = Неопределено 
			И Не ФормаЗамороженаПослеПробитияЧека() Тогда
			ИдентификаторТекущейСтроки = ТекущаяСтрока.ИдентификаторСтроки;
		КонецЕсли;
		Если ИдентификаторТекущейСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		МассивИдентификаторовВыбранныхСкидок = Новый Массив;
		РучнаяСкидкаДобалвена = Ложь;
		Для Каждого УправляемаяСкидка Из МассивУправляемыхСкидок Цикл
			Если УправляемаяСкидка.ТипСкидки = "Автоматическая" Тогда
				ОтборВыбранныхСкидок = Новый Структура("СкидкаНаценка", УправляемаяСкидка.СкидкаНаценка);
				Если УправляемаяСкидка.ОбластьДействия = "На строку" Тогда
					ОтборВыбранныхСкидок.Вставить("ИдентификаторСтроки", ИдентификаторТекущейСтроки);
				КонецЕсли;
				Если ТаблицаВыбранныхУправляемыхСкидок.НайтиСтроки(ОтборВыбранныхСкидок).Количество() > 0 Тогда				
					МассивИдентификаторовВыбранныхСкидок.Добавить(УправляемаяСкидка.ИдентификаторСкидки);
				КонецЕсли;
			Иначе 
				Если Не РучнаяСкидкаДобалвена
					И УправляемаяСкидка.ОбластьДействия = "На строку"
					И УправляемаяСкидка.ЗначениеСкидки = ТекущийТоварСкидка Тогда
					МассивИдентификаторовВыбранныхСкидок.Добавить(УправляемаяСкидка.ИдентификаторСкидки);
					РучнаяСкидкаДобалвена = Истина;
				Конецесли;
			КонецЕсли;
		КонецЦикла;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИспользоватьСерверЛояльностиПолучательДанных", ИспользоватьСерверЛояльностиПолучательДанных);
		ПараметрыОткрытия.Вставить("МассивУправляемыхСкидок", МассивУправляемыхСкидок);
		ПараметрыОткрытия.Вставить("МассивИдентификаторовВыбранныхСкидок", МассивИдентификаторовВыбранныхСкидок);
		
		ДополнительныеПараметры = Новый Структура();
		Если ЗначениеЗаполнено(ОбластьДействияСкидки) Тогда
			ДополнительныеПараметры.Вставить("ОбластьДействия", ОбластьДействияСкидки);
		КонецЕсли;
		ОбработчикОповещенияОткрытияФормыВыбора = Новый ОписаниеОповещения(
		"ОповещениеОткрытьФормуВыбораСкидки", ЭтотОбъект, ДополнительныеПараметры);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораСкидки",
						ПараметрыОткрытия, ЭтотОбъект, , , , 
						ОбработчикОповещенияОткрытияФормыВыбора, Режим);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКэшСкидкиНаценки()
	
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаКэшаСкидкиНаценки Из ТаблицаСкидкиНаценки Цикл
		
		СтруктураОтбора = Новый Структура("НомерСтроки", СтрокаКэшаСкидкиНаценки.КлючСвязи);
		СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		Если ЗначениеЗаполнено(СтрокиТоваров) Тогда
			Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл
				СтрокаКэшаСкидкиНаценки.Сумма = СтрокаТоваров.СуммаАвтоматическойСкидкиЧекаПродажи / СтрокаТоваров.СуммаБезСкидкиЧекаПродажи * СтрокаТоваров.СуммаБезСкидки;
			КонецЦикла;
		Иначе
			МассивСтрокКУдалению.Добавить(СтрокаКэшаСкидкиНаценки);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		ТаблицаСкидкиНаценки.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаКэшаБонусныеБаллы Из ТаблицаБонусныеБаллы Цикл
		
		СтруктураОтбора = Новый Структура("НомерСтроки", СтрокаКэшаБонусныеБаллы.КлючСвязи);
		СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		Если ЗначениеЗаполнено(СтрокиТоваров) Тогда
			Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл
				
				СтруктураОтбораПродажи = Новый Структура("КлючСвязи, СкидкаНаценка, БонуснаяПрограмма");
				ЗаполнитьЗначенияСвойств(СтруктураОтбораПродажи, СтрокаКэшаБонусныеБаллы);
				СтрокиКэшаБонусныеБаллыПродажи = ТаблицаБонусныеБаллыЧекаПродажи.НайтиСтроки(СтруктураОтбораПродажи);
				Для Каждого СтрокаКэшаБонусныеБаллыПродажи Из СтрокиКэшаБонусныеБаллыПродажи Цикл
					СтрокаКэшаБонусныеБаллы.КоличествоБонусныхБаллов = СтрокаКэшаБонусныеБаллыПродажи.КоличествоБонусныхБаллов / СтрокаТоваров.СуммаБезСкидкиЧекаПродажи * СтрокаТоваров.СуммаБезСкидки;
				КонецЦикла;
				
			КонецЦикла;
		Иначе
			МассивСтрокКУдалению.Добавить(СтрокаКэшаБонусныеБаллы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		ТаблицаБонусныеБаллы.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПромокод(ИдентификаторСтроки, УдалитьСтрокуТаблицы = Ложь)
	
	НомераЭлементов = Новый Массив;
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты.Добавить("ПримененныйПромокод_" + ИдентификаторСтроки);
	Если УдалитьСтрокуТаблицы Тогда
		
		СтруктураОтбора = Новый Структура("УникальныйИдентификатор", ИдентификаторСтроки);
		НайденныеСтроки = ТаблицаПримененныхПромокодов.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаКУдалению Из НайденныеСтроки Цикл
			ТаблицаПримененныхПромокодов.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
	КонецЕсли;
	
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	УдалитьЭлементФормы("ГруппаПримененныеПромокоды_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("ПримененныйПромокод_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("ДекорацияУдалитьПромокод_" + ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУправляемуюСкидку(ИдентификаторСтроки, УдалитьСтрокуТаблицы = Ложь)
	
	Если УдалитьСтрокуТаблицы Тогда 
		СтрокаУдалить = ТаблицаВыбранныхУправляемыхСкидок.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТаблицаВыбранныхУправляемыхСкидок.Удалить(СтрокаУдалить);
	КонецЕсли;		
	
	ИмяГруппы = "ГруппаПримененныеУправляемыеСкидки_"+ИдентификаторСтроки;
	ИмяКоманды = "КомандаУдалитьУправляемуюСкидку_" + ИдентификаторСтроки;

	УдалитьЭлементФормы(ИмяГруппы);
	УдалитьЭлементФормы(ИмяКоманды);	
	Команда = Команды.Найти(ИмяКоманды);
	Если Не Команда = Неопределено Тогда
		Команды.Удалить(Команда);
	КонецЕсли;
	
	Если Элементы.ГруппаПримененныеУправляемыеСкидки.ПодчиненныеЭлементы.Количество() = 2 Тогда
		Элементы.ГруппаПримененныеУправляемыеСкидки.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПромокодВТаблицу()
	
	СтрокаДанныхПромокода = ТаблицаПримененныхПромокодов.Добавить();
	СтрокаДанныхПромокода.Промокод = ВведенныйПромокод;
	СтрокаДанныхПромокода.СкидкаНаценка = СкидкаВведенногоПромокода;
	СтрокаДанныхПромокода.ЭтоАктивацияПромокода = Ложь;
	СтрокаДанныхПромокода.УникальныйИдентификатор = СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьСработавшиеПромокодыНаКлиенте()
	ПредъявленныеПромокоды = ТаблицаПримененныхПромокодов.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
	Для Каждого СтрокаПромокода Из ПредъявленныеПромокоды Цикл
		ИмяРеквизита  = "ПримененныйПромокод_" + СтрокаПромокода.УникальныйИдентификатор;
		ЦветТекста = ЦветаФормы.НеАктивизированныйПункт;
		ПримененныеСкидки = ТаблицаСкидкиНаценки.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаПромокода.СкидкаНаценка));
		Если ПримененныеСкидки.Количество() = 0 И СкидкиРассчитаны Тогда
			ЦветТекста = ЦветаФормы.ОсобыйТекст;
		КонецЕсли;
		Элементы[ИмяРеквизита].ЦветТекста = ЦветТекста;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПрименениеПромокода(Элемент)
	
	ИдентификаторСтроки = СтрЗаменить(Элемент.Имя, "ДекорацияУдалитьПромокод_", "");
	
	РазблокироватьПромокоды(ИдентификаторСтроки);
	ОчиститьДанныеПромокодов(Истина);
	УдалитьПромокод(ИдентификаторСтроки, Истина);
	Если (РежимКассыСамообслуживания ИЛИ РежимПоказаСкидок) И НЕ РаботаВРежимеМедленногоСоединения
		ИЛИ (РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате И Не ВопросПоРасчетуСкидок) Тогда
		РассчитатьСкидкиКлиент();
	Иначе
		ТребуетсяПересчетСкидок = Истина;
	КонецЕсли;
	
	НастроитьВидимостьВводаПромокода(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьУправляемуюСкидку(Элемент)
	
	ИдентификаторСтроки = СтрЗаменить(Элемент.Имя, "ДекорацияУдалитьУправляемуюСкидку_", "");
	ИдентификаторСтроки = СтрЗаменить(ИдентификаторСтроки, "ПримененнаяУправляемаяСкидка_", "");
	ИдентификаторСтроки = СтрЗаменить(ИдентификаторСтроки, "КомандаУдалитьУправляемуюСкидку_", "");
	

	УдалитьУправляемуюСкидку(ИдентификаторСтроки, Истина);
	ОтменитьСкидки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОстатки(Команда)
	
	РежимПоказаОстатков = Не РежимПоказаОстатков;
	ТаблицаОстатков.Очистить();
	
	Если РежимПоказаОстатков Тогда
		
		ТекущаяСтрокаТовара = Элементы.Товары.ТекущиеДанные;
		Если ТекущаяСтрокаТовара = Неопределено Тогда
			РежимПоказаОстатков = Не РежимПоказаОстатков;
			Возврат;
		КонецЕсли;
		
		ПараметрыПолученияОстатков = Новый Структура("Номенклатура, Характеристика, Упаковка",
			ТекущаяСтрокаТовара.Номенклатура, ТекущаяСтрокаТовара.Характеристика, ТекущаяСтрокаТовара.Упаковка);
		
		Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
			
			ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПолучитьОстатки(ПараметрыПодключенияКСерверуЛояльности, ПараметрыПолученияОстатков);
			Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
			
			Если Результат.ЕстьОшибки Тогда
				ТекстЗаголовка = НСтр("ru = 'Ошибка получения остатков.'");
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, Результат.ТекстОшибки);
				Возврат;
			КонецЕсли;
			
			ДанныеОтвета = Неопределено;
			СтрокаJSON = Результат.ДанныеОтвета;
			СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
			
			Если НЕ ДанныеОтвета = Неопределено Тогда 
				
				Если ДанныеОтвета.Свойство("Error") И НЕ ДанныеОтвета.Error Тогда
					
					Для Каждого Остаток Из ДанныеОтвета.LeftoversList Цикл
						НоваяСтрока = ТаблицаОстатков.Добавить();
						НоваяСтрока.МестоХранения = Остаток.LeftoverLocation;
						НоваяСтрока.Характеристика = Остаток.Variant;
						НоваяСтрока.Остаток = Остаток.Leftover;
						НоваяСтрока.ВРезерве = Остаток.Reserved;
						НоваяСтрока.Свободно = Остаток.FreeLeftover;
					КонецЦикла;
					
				ИначеЕсли ДанныеОтвета.Свойство("Error") И ДанныеОтвета.Error Тогда 
					
					ТекстЗаголовка = НСтр("ru = 'Ошибка получения остатков.'");
					ТекстОшибки = СтрШаблон(НСтр("ru = '%1'"), ДанныеОтвета.ErrorMessage);
					ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
					РежимПоказаОстатков = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьТаблицуОстатковНаСервере(ПараметрыПолученияОстатков);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПереключитьРежимПоказаОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимПоказаОстатков(ПоказатьОстатки = Неопределено)
	АктивныйСлойСлужебнойИнформацииЧека = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	Если РежимПоказаСкидок И АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаДанныеПокупателя ИЛИ (НЕ РежимКассыСамообслуживания И РежимВыбораПодарка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоказатьОстатки = Истина Тогда
		РежимПоказаОстатков = Истина;
	ИначеЕсли ПоказатьОстатки = Ложь Тогда
		РежимПоказаОстатков = Ложь;
	КонецЕсли;
	ЭтоВозвратПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	ВидимостьКнопокСкидок = ПоказыватьКнопкиСкидок И НЕ (РежимПоказаОстатков ИЛИ ЭтоВозвратПродажи);
	
	Элементы.ПоказатьОстатки.ЦветФона = ?(РежимПоказаОстатков, ЦветаФормы.АктивнаяКнопка, ЦветаФормы.Авто);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаТовары, НЕ РежимПоказаОстатков);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОстатки, РежимПоказаОстатков);
	УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьРассчитанныеСкидки, ВидимостьКнопокСкидок);
	УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьСкидкиНаЧек, ВидимостьКнопокСкидок);
	УстановитьВидимостьЭлементаФормы(Элементы.СуммаСкидки, НЕ ВидимостьКнопокСкидок);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОстатковНаСервере(ПараметрыПолученияОстатков)
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуОстатков(ЭтотОбъект, ПараметрыПолученияОстатков);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоединениеССерверомЛояльности()
	
	Если НЕ ИспользоватьСерверЛояльностиПолучательДанных Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьАвтоматическиеСкидки = Ложь;
	ИспользоватьНовыйАлгоритмЗапросаСЛ = Ложь;
	ИспользоватьЗапросПродажСЛ = Ложь;
	ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаИспользоватьАвтоматическиеСкидки(ПараметрыПодключенияКСерверуЛояльности);
	Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
	Если Результат.ЕстьОшибки Тогда
		
		ПараметрыОшибки = Новый Структура;
		ПараметрыОшибки.Вставить("НеВызыватьЗаменуПрав", Истина);
		ТекстЗаголовка = НСтр("ru = 'Ошибка определения использования автоматических скидок.'");
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, Результат.ТекстОшибки, ПараметрыОшибки);
		
	Иначе
		
		ДанныеОтвета = Неопределено;
		СтрокаJSON = Результат.ДанныеОтвета;
		СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
		
		Если НЕ ДанныеОтвета = Неопределено Тогда 
			
			Если ДанныеОтвета.Свойство("Error") И НЕ ДанныеОтвета.Error Тогда
				
				ИспользоватьАвтоматическиеСкидки = ДанныеОтвета.UseAutomaticDiscounts;
				
			КонецЕсли;
			Если ДанныеОтвета.Свойство("Version") И ЗначениеЗаполнено(ДанныеОтвета.Version) Тогда
				Попытка
					Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДанныеОтвета.Version, "3.0.5.1") > 0 Тогда
						ИспользоватьНовыйАлгоритмЗапросаСЛ = Истина;
						ИспользоватьЗапросПродажСЛ = Истина; 
						ИспользоватьВидКартыСЛ = Истина;
					КонецЕсли;
				Исключение
					ИспользоватьНовыйАлгоритмЗапросаСЛ = Ложь;
					ИспользоватьЗапросПродажСЛ = Ложь;
					ИспользоватьВидКартыСЛ = Ложь;
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеКоличестваНеВесовогоТовара(ТекущаяСтрока)
	
	ПересчетКоличестваТовара(ТекущаяСтрока);
	
	ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, ТекущаяСтрока, ,
		ИспользоватьАвтоматическиеСкидки);
	ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, ТекущаяСтрока);
	ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(Объект);
		
	ПересчитатьИтогиТабличнойЧастиТовары();
	ВызватьАвтоматическийРасчетСкидокВРежимеКСО();
	РассчитатьСуммуОплатыБонусами();
	
	ОбновитьИнформациюНаДисплееПокупателя("ИзменениеКоличества");
	
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьРассчитанныеСкидки(Команда)
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		ПроверитьСоединениеССерверомЛояльности();
	КонецЕсли;
	
	РежимПоказаСкидок = НЕ РежимПоказаСкидок;
	РежимРасчетаСкидокСтрока = Истина;
	ИзменитьРежимПоказаСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимПоказаСкидок()
	
	Если ТребуетсяПересчетСкидок
		И РаботаВРежимеМедленногоСоединения Тогда
		ТребуетсяПересчетСкидок = Ложь;
		ЗадатьВопросПоРасчетуСкидок("ПересчитатьСкидкиПриРежимеПоказаСкидок", , Истина);
	КонецЕсли;
	Если РежимПоказаСкидок И ИспользоватьАвтоматическиеСкидки Тогда
		ПерезаполнитьТаблицуСкидок();
		РежимРасчетаУправляемыхСкидок = ?(РежимРасчетаСкидокСтрока, "На строку", "На документ");
		ЗаполнитьУправляемыеСкидкиВыбор(РежимРасчетаУправляемыхСкидок);
	КонецЕсли;
	ПереключитьРежимНаПоказСкидок();
	Если ТаблицаВыборУправляемыхСкидок.Количество() > 0 И РежимПоказаСкидок Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаВыборУправляемыхСкидок;
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТаблицуСкидок()
	ОчиститьТаблицыУправленияСкидок();
	ЗаполнитьАвтоматическиеСкидкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыУправленияСкидок()
	
	ТаблицаРассчитанныеСкидки.Очистить();
	ЭлементыДерева = ДеревоСкидок.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	ЭлементыПодарки = ДеревоПодарков.ПолучитьЭлементы();
	ЭлементыПодарки.Очистить();
	ЭлементыСкидки = ДеревоДействующихСкидок.ПолучитьЭлементы();
	ЭлементыСкидки.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоматическиеСкидки()
	
	ТекущаяСтрока = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбщаяСуммаСкидок = 0;
	СтруктураПоискаСкидокНаценок = Новый Структура("ИдентификаторСтроки", ТекущаяСтрока.ИдентификаторСтроки);
	СтруктураПоискаУправляемыеСкидки = Новый Структура("ИдентификаторСкидки");
	ПримененныеСкидки = ТаблицаСкидкиНаценки.НайтиСтроки(СтруктураПоискаСкидокНаценок);
	Для Каждого СтрокаСкидки Из ПримененныеСкидки Цикл
		Если СтрокаСкидки.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(СтрокаСкидки.СкидкаНаценка) = Тип("Строка") Тогда
			СкидкаНаценкаИдентификатор = СтрокаСкидки.СкидкаНаценка;
		Иначе
			СкидкаНаценкаИдентификатор = Строка(СтрокаСкидки.СкидкаНаценка.УникальныйИдентификатор());
		КонецЕсли;
		СтруктураПоискаУправляемыеСкидки.ИдентификаторСкидки = СкидкаНаценкаИдентификатор;
		НоваяСтрока = ТаблицаРассчитанныеСкидки.Добавить();
		СтрокиУправляемыеСкидки = ТаблицаУправляемыхСкидок.НайтиСтроки(СтруктураПоискаУправляемыеСкидки);
		НоваяСтрока.ВалютаСуммы = ПредставлениеВалюты;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСкидки);
		СтруктураСкидки = Новый Структура("РучнаяСкидка, УправляемаяСкидка, Подарок", Ложь, СтрокиУправляемыеСкидки.Количество() > 0, Ложь);
		УстановитьКартинкуСкидок(СтруктураСкидки, НоваяСтрока);
		ОбщаяСуммаСкидок = ОбщаяСуммаСкидок + НоваяСтрока.Сумма;
	КонецЦикла;
	
	Если ТекущаяСтрока.ПроцентСкидкиНаценки <> 0 ИЛИ ТекущаяСтрока.СуммаСкидкиНаценки <> 0 Тогда
		НоваяСтрока = ТаблицаРассчитанныеСкидки.Добавить();
		НоваяСтрока.Представление = НСтр("ru = 'Ручная скидка'");
		НоваяСтрока.Сумма = ТекущаяСтрока.СуммаСкидкиНаценки;
		НоваяСтрока.ЗначениеСкидкиНаценки = ТекущаяСтрока.ПроцентСкидкиНаценки;
		СтруктураСкидки = Новый Структура("РучнаяСкидка, УправляемаяСкидка, Подарок", Истина, Ложь, Ложь);
		УстановитьКартинкуСкидок(СтруктураСкидки, НоваяСтрока);
		НоваяСтрока.ВалютаСуммы = ПредставлениеВалюты;
		ОбщаяСуммаСкидок = ОбщаяСуммаСкидок + НоваяСтрока.Сумма;
	КонецЕсли;
	
	
	Если ОбщаяСуммаСкидок <> 0 Тогда
		ЗаголовокТаблицы = НСтр("ru = 'Примененные скидки - %1 %2'");
		ЗаголовокТаблицы = СтрШаблон(ЗаголовокТаблицы,ОбщаяСуммаСкидок, ПредставлениеВалюты);
	Иначе
		ЗаголовокТаблицы = НСтр("ru = 'Примененные скидки'");
	КонецЕсли;
	Элементы.ДекорацияЗаголовокПримененныеСкидки.Заголовок = ЗаголовокТаблицы;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоматическиеСкидкиНаСервере()
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если РежимРасчетаСкидокСтрока Тогда
		ЗаполнитьАвтоматическиеСкидки();
	Иначе
		ЗаполнитьДеревоАвтоматическихСкидок();
		ЗаполнитьДеревоПодарков();
		ЗаполнитьДеревоДействующихСкидок();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоАвтоматическихСкидок()
	
	ДеревоСкидокОбъект = РеквизитФормыВЗначение("ДеревоСкидок");
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтруктураПоискаСкидокНаценок = Новый Структура("ИдентификаторСтроки", СтрокаТаблицы.ИдентификаторСтроки);
		СтруктураПоискаУправляемыеСкидки = Новый Структура("ИдентификаторСкидки");
		ПримененныеСкидки = ТаблицаСкидкиНаценки.НайтиСтроки(СтруктураПоискаСкидокНаценок);
		
		СтрокаНоменклатура = ДеревоСкидокОбъект.Строки.Добавить();
		СтрокаНоменклатура.НоменклатураПредставление = СтрокаТаблицы.Номенклатура;
		ОбщаяСуммаСкидки = 0;
		Для Каждого СтрокаТаблицыСкидки Из ПримененныеСкидки Цикл
			Если СтрокаТаблицыСкидки.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(СтрокаТаблицыСкидки.СкидкаНаценка) = Тип("Строка") Тогда
				СкидкаНаценкаИдентификатор = СтрокаТаблицыСкидки.СкидкаНаценка;
			Иначе
				СкидкаНаценкаИдентификатор = Строка(СтрокаТаблицыСкидки.СкидкаНаценка.УникальныйИдентификатор());
			КонецЕсли;
			СтруктураПоискаУправляемыеСкидки.ИдентификаторСкидки = СкидкаНаценкаИдентификатор;
			СтрокиУправляемыеСкидки = ТаблицаУправляемыхСкидок.НайтиСтроки(СтруктураПоискаУправляемыеСкидки);
			СтрокаСкидки = СтрокаНоменклатура.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаТаблицыСкидки);
			СтрокаСкидки.НоменклатураПредставление = СтрокаТаблицыСкидки.Представление;
			СтруктураСкидки = Новый Структура("РучнаяСкидка, УправляемаяСкидка, Подарок", Ложь, СтрокиУправляемыеСкидки.Количество() > 0, Ложь);
			УстановитьКартинкуСкидок(СтруктураСкидки, СтрокаСкидки);
			СтрокаСкидки.ВалютаСуммы = ПредставлениеВалюты;
			СтрокаСкидки.Уровень = 1;
			ОбщаяСуммаСкидки = ОбщаяСуммаСкидки + СтрокаСкидки.Сумма;
		КонецЦикла;
		
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 ИЛИ СтрокаТаблицы.СуммаСкидкиНаценки <> 0 Тогда
			СтрокаСкидки = СтрокаНоменклатура.Строки.Добавить();
			Если СтрокаТаблицы.Подарок Тогда
				СтрокаСкидки.НоменклатураПредставление = НСтр("ru = 'Подарок'");
			Иначе
				СтрокаСкидки.НоменклатураПредставление = НСтр("ru = 'Ручная скидка'");
			КонецЕсли;
			СтрокаСкидки.Сумма = СтрокаТаблицы.СуммаСкидкиНаценки;
			СтрокаСкидки.ЗначениеСкидкиНаценки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтруктураСкидки = Новый Структура("РучнаяСкидка, УправляемаяСкидка, Подарок", Истина, Ложь, СтрокаТаблицы.Подарок);
			УстановитьКартинкуСкидок(СтруктураСкидки, СтрокаСкидки);
			СтрокаСкидки.ВалютаСуммы = ПредставлениеВалюты;
			СтрокаСкидки.Уровень = 1;
			ОбщаяСуммаСкидки = ОбщаяСуммаСкидки + СтрокаТаблицы.СуммаСкидкиНаценки;
		КонецЕсли;
		СтрокаНоменклатура.Сумма = ОбщаяСуммаСкидки;
		СтрокаНоменклатура.ВалютаСуммы = ПредставлениеВалюты;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДеревоСкидокОбъект, "ДеревоСкидок");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУправляемыеСкидкиВыбор(ОбластьДействияСкидки)
	ТаблицаВыборУправляемыхСкидок.Очистить();
	МассивУправляемыхСкидок = ПолучитьМассивУправляемыхСкидок(ОбластьДействияСкидки);
	СтруктураПоискаВыбранныеСкидки = Новый Структура("ИдентификаторСкидки");
	Для Каждого СтрокаУправляемыеСкидки Из МассивУправляемыхСкидок Цикл
		Если СтрокаУправляемыеСкидки.ЗначениеСкидки = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоискаВыбранныеСкидки.ИдентификаторСкидки = СтрокаУправляемыеСкидки.ИдентификаторСкидки;
		СтрокиВыбранныеСкидки = ТаблицаВыбранныхУправляемыхСкидок.НайтиСтроки(СтруктураПоискаВыбранныеСкидки);
		НоваяСтрокаТаблицы = ТаблицаВыборУправляемыхСкидок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы,СтрокаУправляемыеСкидки);
		НоваяСтрокаТаблицы.ТипСкидкиПредставление = СтрШаблон("%1, %2", СтрокаУправляемыеСкидки.ТипСкидки, СтрокаУправляемыеСкидки.ОбластьДействия);
		Если СтрокиВыбранныеСкидки.Количество() > 0 Тогда
			НоваяСтрокаТаблицы.Отметка = Истина;
			НоваяСтрокаТаблицы.ОтметкаКартинка = БиблиотекаКартинок.РМКАктивныйВыбор;
		Иначе
			НоваяСтрокаТаблицы.ОтметкаКартинка = БиблиотекаКартинок.РМКНеактивныйВыбор;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаПоказСкидок(ПоказСкидок = Неопределено)
	
	АктивныйСлойСлужебнойИнформацииЧека = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	Если РежимКассыСамообслуживания Тогда
		Возврат;
	ИначеЕсли РежимПоказаСкидок И (АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаДанныеПокупателя ИЛИ РежимВыбораПодарка И НЕ РежимРасчетаСкидокСтрока) Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборПодарка, ТаблицаПодарков.Количество() > 0);
		ПерезаполнитьТаблицуСкидок();
		Возврат;
	ИначеЕсли ПоказСкидок <> Неопределено Тогда
		РежимПоказаСкидок = ПоказСкидок;
	КонецЕсли;
	
	ВидимостьСкидкиСтрока = РежимПоказаСкидок И РежимРасчетаСкидокСтрока И ДопускаетсяПрименениеСкидок;
	ВидимостьСкидкиЧек = РежимПоказаСкидок И НЕ РежимРасчетаСкидокСтрока И ДопускаетсяПрименениеСкидок;
	ВидимостьСкидки = РежимПоказаСкидок И НЕ РежимРасчетаСкидокСтрока;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСкидки, РежимПоказаСкидок И ИспользоватьАвтоматическиеСкидки);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРассчитанныеСкидки, РежимРасчетаСкидокСтрока И ИспользоватьАвтоматическиеСкидки);
	
	УстановитьВидимостьОсновныхЭлементовСкидки(ВидимостьСкидкиСтрока, ВидимостьСкидкиЧек, ВидимостьСкидки);
	
	Если НЕ РежимПоказаСкидок Тогда
		НастроитьВидимостьВводаПромокода();
	КонецЕсли;
	
	ЗаголовокПримененныеСкидки = НСтр("ru = 'Примененные скидки и подарки'");
	Элементы.ДекорацияЗаголовокДеревоСкидок.Заголовок = ЗаголовокПримененныеСкидки;
	
	ПеренестиПодсказкиВСкидках();
	АктивироватьСлойГруппПоискВСкидках();
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаТовары, НЕ РежимПоказаСкидок ИЛИ НЕ ИспользоватьАвтоматическиеСкидки);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаУправлениеТоваром, НЕ РежимПоказаСкидок);
	УстановитьВидимостьКоманднойПанелиСкидки();
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, НЕ РежимПоказаСкидок);
	ПоказДействующихСкидок = Ложь;
	ИзменитьРежимПоказаДействующихСкидок();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыборУправляемыхСкидокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущаяСтрокаТоваров = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	Если ТекущаяСтрокаТоваров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.Отметка = НЕ ТекущиеДанные.Отметка;
	Если ТекущиеДанные.Отметка Тогда
		ТекущиеДанные.ОтметкаКартинка = БиблиотекаКартинок.РМКАктивныйВыбор;
		ПрименитьУправляемуюСкидку(ТекущиеДанные);
	Иначе
		ТекущиеДанные.ОтметкаКартинка = БиблиотекаКартинок.РМКНеактивныйВыбор;
		ТребуетсяПересчетСкидок = Истина;
		СтруктураПоиска = Новый Структура("СкидкаНаценка", ТекущиеДанные.СкидкаНаценка);
		СтрокиВыбранныеСкидки = ТаблицаВыбранныхУправляемыхСкидок.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТаблицы Из СтрокиВыбранныеСкидки Цикл
			ТаблицаВыбранныхУправляемыхСкидок.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТребуетсяПересчетСкидок
		И НЕ РаботаВРежимеМедленногоСоединения Тогда
			ТребуетсяПересчетСкидок = Ложь;
			РассчитатьСкидкиКлиент();
	КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Процедура ПересчитатьСкидкиПриРежимеПоказаСкидок(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РассчитатьСкидкиКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРассчитанныеСкидкиНаЧек(Команда)
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		ПроверитьСоединениеССерверомЛояльности();
	КонецЕсли;
	
	РежимПоказаСкидок = НЕ РежимПоказаСкидок;
	РежимРасчетаСкидокСтрока = Ложь;
	ИзменитьРежимПоказаСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПересчетСкидок()
	Если РаботаВРежимеМедленногоСоединения Тогда
		ТребуетсяПересчетСкидок = Истина;
		ПерезаполнитьТаблицуСкидок();
	Иначе
		РассчитатьСкидкиКлиент();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеГорячиеКлавиши(ЗаголовокКнопки, Итератор, ТекстКлавиш)
	
	ЗаголовокОбщий = "";
	ТекстКнопки = ЗаголовокКнопки;
	Если НЕ ПустаяСтрока(ТекстКлавиш) Тогда
		УстановитьВидимостьДекорации = Истина;
		ЗаголовокОбщий = ЗаголовокОбщий + ТекстКнопки + " (" + ТекстКлавиш + ")";
	КонецЕсли;
	Если Итератор%2 = 0 Тогда
		ЗаголовокДекорации = Элементы.ДекорацияПравоСкидки.Заголовок;
		Элементы.ДекорацияПравоСкидки.Заголовок = ЗаголовокДекорации + ЗаголовокОбщий + Символы.ПС;
	Иначе
		ЗаголовокДекорации = Элементы.ДекорацияЛевоСкидки.Заголовок;
		Элементы.ДекорацияЛевоСкидки.Заголовок = ЗаголовокДекорации + ЗаголовокОбщий + Символы.ПС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МассивКомандДляЗаполнения()
	МассивИменКоманд = Новый Массив;
	МассивИменКоманд.Добавить("РассчитатьСкидки");
	МассивИменКоманд.Добавить("ОтменаРасчетаСкидок");
	МассивИменКоманд.Добавить("ПоказатьРассчитанныеСкидки");
	МассивИменКоманд.Добавить("ПоказатьСкидкиНаЧек");
	Возврат МассивИменКоманд;
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуОплатыБонусамиПредварительная()
	
	Если ЗначениеЗаполнено(КоличествоБонусов) Тогда
		
		СуммаКОплате = СуммаКОплате + СуммаБонусов;
		СуммаИтого = СуммаИтого + СуммаБонусов;
		
		МаксимальнаяСуммаОплатыБонусамиПоЧеку = СуммаИтого * ПроцентОплатыБонусами / 100;
		
		ОсталосьОплатитьЗаТовар = СуммаИтого - СуммаОплаченоНал - СуммаОплаченоБН
			- СуммаОплаченоБезнал - СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса;
		СуммаБонусовКРаспределению = Окр(Мин(МаксимальнаяСуммаОплатыБонусамиПоЧеку, БонусыДоступноКОплате), 2);
		СуммаБонусовКРаспределениюСУчетомОплат = СуммаБонусовКРаспределению;
		
		Если ОсталосьОплатитьЗаТовар <> 0 Тогда
			СуммаБонусовКРаспределениюСУчетомОплат = Мин(СуммаБонусовКРаспределению, ОсталосьОплатитьЗаТовар);
		Иначе
			СуммаБонусовКРаспределениюСУчетомОплат = ОсталосьОплатитьЗаТовар;
		КонецЕсли;
		
		СуммаБонусовПредварительная = СуммаБонусовКРаспределениюСУчетомОплат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОплатаКартойЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатОперации = Истина;
	ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьВыбранныйВидОплаты(ЭтотОбъект, ДополнительныеПараметры.Имя);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ОплатаКартойНаКлиенте()";
		РассчитатьСкидкиКлиент();
	Иначе
		РезультатОперации = ОплатаКартойНаКлиенте();
	КонецЕсли;
	Возврат РезультатОперации;
	
КонецФункции

&НаКлиенте
Процедура ВыдатьПодарок()
	
	Если ТаблицаПодаркиБезВыбора.Количество() = 0 Тогда
		Если ТаблицаПодарков.Количество() = 0 Тогда
			РежимВыбораПодарка = Ложь;
			ВыполнитьОтложенныйМетод();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СтрокаПодарок = ТаблицаПодаркиБезВыбора[0];
	ПараметрыВыбораПодарка = Новый Структура;
	ПараметрыВыбораПодарка.Вставить("СтрокаПодарок", СтрокаПодарок);
	ОбработкаВыбора = Новый ОписаниеОповещения("ОбработатьВыборПодарка", ЭтаФорма, ПараметрыВыбораПодарка);
	
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Выдать подарок %1?'"), СтрокаПодарок.Номенклатура);
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Выдать'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
	ПоказатьВопрос(ОбработкаВыбора,ТекстВопроса,СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПодарка(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТаблицы = ДополнительныеПараметры.СтрокаПодарок;
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущийВыбор = Новый Структура;
		ТекущийВыбор.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
		ТекущийВыбор.Вставить("Подарок", Истина);
		ДанныеТовара = Новый Структура;
		ДанныеТовара.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		ДанныеТовара.Вставить("Цена", СтрокаТаблицы.Цена);
		ДанныеТовара.Вставить("Количество", СтрокаТаблицы.Количество);
		ДанныеТовара.Вставить("КоличествоУпаковок", СтрокаТаблицы.КоличествоУпаковок);
		ДанныеТовара.Вставить("Упаковка", СтрокаТаблицы.Упаковка);
		ДанныеТовара.Вставить("Наименование", ОбщегоНазначенияРМКВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "Наименование"));
		ДанныеТовара.Вставить("ВыводитьПодарокВЧек", СтрокаТаблицы.ВыводитьПодарокВЧек);
		ДанныеТовара.Вставить("ВладелецПодарка", СтрокаТаблицы.ВладелецПодарка);
		ДобавитьСтрокуВТабличнуюЧасть(ДанныеТовара, ТекущийВыбор);
		КоличествоТоваров = Объект.Товары.Количество();
		Если КоличествоТоваров > 0 Тогда
			ТекущаяСтрока = Объект.Товары[КоличествоТоваров - 1];
			ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, ТекущаяСтрока, ,
				ИспользоватьАвтоматическиеСкидки);
		КонецЕсли;
		ПерезаполнитьТаблицуСкидок();
		
	КонецЕсли;
	ТаблицаПодаркиБезВыбора.Удалить(СтрокаТаблицы);
	ПерейтиКВыдачеСледующегоПодарка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыдачеСледующегоПодарка()
	
	Если ТаблицаПодаркиБезВыбора.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("ВыдатьПодарок", 0.1, Истина);
	ИначеЕсли ТаблицаПодарков.Количество() = 0 И Не ОткрытаСтраницаПоискаТовара() Тогда
		РежимВыбораПодарка = Ложь;
		ВыполнитьОтложенныйМетод();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтложенныйМетод()
	Если ЗначениеЗаполнено(ИмяМетода) Тогда
		Выполнить(ИмяМетода);
		ИмяМетода = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьПодарокКассаСамообслуживания()
	Если ТаблицаПодаркиБезВыбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПодаркиБезВыбора Цикл
		ТекущийВыбор = Новый Структура;
		ТекущийВыбор.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
		ТекущийВыбор.Вставить("Подарок", Истина);
		ДанныеТовара = Новый Структура;
		ДанныеТовара.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		ДанныеТовара.Вставить("Цена", СтрокаТаблицы.Цена);
		ДанныеТовара.Вставить("Количество", СтрокаТаблицы.Количество);
		ДанныеТовара.Вставить("КоличествоУпаковок", СтрокаТаблицы.КоличествоУпаковок);
		ДанныеТовара.Вставить("Упаковка", СтрокаТаблицы.Упаковка);
		ДанныеТовара.Вставить("Наименование", ОбщегоНазначенияРМКВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "Наименование"));
		ДанныеТовара.Вставить("ВыводитьПодарокВЧек", СтрокаТаблицы.ВыводитьПодарокВЧек);
		ДанныеТовара.Вставить("ВладелецПодарка", СтрокаТаблицы.ВладелецПодарка);
		ДобавитьСтрокуВТабличнуюЧасть(ДанныеТовара, ТекущийВыбор);
		
		КоличествоТоваров = Объект.Товары.Количество();
		Если КоличествоТоваров > 0 Тогда
			ТекущаяСтрока = Объект.Товары[КоличествоТоваров - 1];
			ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, ТекущаяСтрока, ,
				ИспользоватьАвтоматическиеСкидки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПодарков()
	Если ТаблицаПодарков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДеревоПодарковОбъект = РеквизитФормыВЗначение("ДеревоПодарков");
	МассивВладельцев = Новый Соответствие;
	Для Каждого СтрокаПодарка Из ТаблицаПодарков Цикл
		Если НЕ СтрокаПодарка.ВыборИзСписка Тогда
			Продолжить;
		КонецЕсли;
		Если МассивВладельцев.Получить(СтрокаПодарка.ВладелецПодарка) = Неопределено Тогда
			МассивВладельцев.Вставить(СтрокаПодарка.ВладелецПодарка, СтрокаПодарка.ПредставлениеВладельца);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаПоискаПоВладельцу = Новый Структура("ВладелецПодарка");
	Для Каждого Элемент Из МассивВладельцев Цикл
		СтрокаПоискаПоВладельцу.ВладелецПодарка = Элемент.Ключ;
		СтрокиПодарков = ТаблицаПодарков.НайтиСтроки(СтрокаПоискаПоВладельцу);
		СтрокаВладелец = ДеревоПодарковОбъект.Строки.Добавить();
		СтрокаВладелец.СкидкаНоменклатура = Элемент.Значение;
		СтрокаВладелец.Уровень = 1;
		Для Каждого СтрокаТаблицы Из СтрокиПодарков Цикл
			СтрокаПодарок = СтрокаВладелец.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПодарок,СтрокаТаблицы);
			СтрокаПодарок.СкидкаНоменклатура = Строка(СтрокаТаблицы.Номенклатура);
			СтрокаПодарок.ОтметкаКартинка = БиблиотекаКартинок.РМКНеактивныйВыбор;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоПодарковОбъект, "ДеревоПодарков");
КонецПроцедуры

&НаСервере
Процедура ПереместитьПодсказки(ПеремещениеПоУсловию)
	Если ПеремещениеПоУсловию Тогда
		Элементы.Переместить(Элементы.ДекорацияПравоСкидки,Элементы.ГруппаПодсказкаГорячиеКлавиши);
		Элементы.Переместить(Элементы.ДекорацияЛевоСкидки,Элементы.ГруппаПодсказкаГорячиеКлавиши);
	Иначе
		Если РежимРасчетаСкидокСтрока Тогда
			Элементы.Переместить(Элементы.ДекорацияПравоСкидки,Элементы.ГруппаГорячиеКлавишиСтрока);
		Иначе
			Элементы.Переместить(Элементы.ДекорацияПравоСкидки,Элементы.ГруппаГорячиеКлавишиДерево);
		КонецЕсли;
		Элементы.Переместить(Элементы.ДекорацияЛевоСкидки,Элементы.ГруппаГорячиеКлавишиСкидки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодарковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные.Уровень = 1 Тогда
		Возврат;
	КонецЕсли;
	ТекущийВладелецПодарка = ТекущиеДанные.ВладелецПодарка;
	РежимВыбораПодарка = Истина;
	СтруктураВыбора = ПодготовитьДанныеВыбораНоменклатуры(ТекущиеДанные.Номенклатура);
	СписокТоваровВыборКлиент(СтруктураВыбора);
	КоличествоТоваров = Объект.Товары.Количество();
	Если КоличествоТоваров > 0 Тогда
		ТекущаяСтрока = Объект.Товары[КоличествоТоваров - 1];
		ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, ТекущаяСтрока, ,
			ИспользоватьАвтоматическиеСкидки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоДействующихСкидок()
	
	ДеревоДействующихСкидокОбъект = РеквизитФормыВЗначение("ДеревоДействующихСкидок");
	
	СтрокаПримененныеСкидки = ДеревоДействующихСкидокОбъект.Строки.Добавить();
	СтрокаПримененныеСкидки.СкидкаНаценкаПредставление = НСтр("ru = 'Примененные скидки'");
	СтрокаПримененныеСкидки.Уровень = 1;
	СтрокаДействующиеСкидки = ДеревоДействующихСкидокОбъект.Строки.Добавить();
	СтрокаДействующиеСкидки.СкидкаНаценкаПредставление =  НСтр("ru = 'Доступные скидки'");
	СтрокаДействующиеСкидки.Уровень = 1;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДействующихСкидок Цикл
		СтрокаГруппировки = ДеревоДействующихСкидокОбъект.Строки.Найти(СтрокаТаблицы.Родитель, "СкидкаНаценка", Истина);
		Если СтрокаТаблицы.КоличествоВыполненныхУсловий > 0 Тогда
			СтрокаДерева = СтрокаПримененныеСкидки.Строки.Добавить();
		ИначеЕсли СтрокаГруппировки = Неопределено Тогда
			СтрокаДерева = СтрокаДействующиеСкидки.Строки.Добавить();
		Иначе
			СтрокаДерева = СтрокаГруппировки.Строки.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		Если СтрокаТаблицы.ЭтоГруппа Тогда
			СтрокаДерева.КартинкаОбозначение = БиблиотекаКартинок.Папка;
		КонецЕсли;
		МассивУсловий = Новый Массив;
		МассивУсловий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаТаблицы.УсловияПредоставления,Символы.ПС,Истина);
		Для Каждого СтрокаУсловий Из МассивУсловий Цикл
			СтрокаУсловийДерево = СтрокаДерева.Строки.Добавить();
			СтрокаУсловийДерево.СкидкаНаценкаПредставление = СтрокаУсловий;
			СтрокаУсловийДерево.Уровень = 2;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоДействующихСкидокОбъект, "ДеревоДействующихСкидок");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДействующиеСкидки(Команда)
	
	ПоказДействующихСкидок = НЕ ПоказДействующихСкидок;
	ИзменитьРежимПоказаДействующихСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимПоказаДействующихСкидок()
	
	Если ПоказДействующихСкидок Тогда
		Элементы.СтраницыУправленияСкидками.ТекущаяСтраница = Элементы.СтраницаДействующихСкидок;
	Иначе
		Элементы.СтраницыУправленияСкидками.ТекущаяСтраница = Элементы.СтраницаПримененныхСкидок;
	КонецЕсли;
	
	Элементы.ПоказатьДействующиеСкидки.ЦветФона = ?(ПоказДействующихСкидок, ЦветаФормы.АктивнаяКнопка, ЦветаФормы.Авто);
	УстановитьВидимостьЭлементаФормы(Элементы.ПечатьСкидок, ПоказДействующихСкидок);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСкидок(Команда) 
	
	ТабличныйДокументДеревоСкидок = ПечатьСкидокНаСервере();
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ПереданныйТабличныйДокумент", ТабличныйДокументДеревоСкидок);
	ПараметрыОткрытия.Вставить("ПредставлениеОтчета", НСтр("ru = 'Действующие скидки'"));
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаПечатногоДокумента", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
КонецПроцедуры

&НаСервере
Функция ПечатьСкидокНаСервере()
	
	ТабличныйДокументДеревоСкидок = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ДеревоСкидок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("СкидкаНаценкаПредставление");
	Дерево.Колонки.Добавить("СкидкаНаценка");
	Дерево.Колонки.Добавить("ЗначениеСкидкиНаценки");
	Дерево.Колонки.Добавить("Родитель");
	Дерево.Колонки.Добавить("ЭтоГруппа");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДействующихСкидок Цикл
		СтрокаГруппировки = Дерево.Строки.Найти(СтрокаТаблицы.Родитель, "СкидкаНаценка", Истина);
		Если СтрокаГруппировки = Неопределено Тогда
			СтрокаДерева = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		Иначе
			СтрокаДерева = СтрокаГруппировки.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		КонецЕсли;
		
		МассивУсловий = Новый Массив;
		МассивУсловий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаТаблицы.УсловияПредоставления,Символы.ПС,Истина);
		Для Каждого СтрокаУсловий Из МассивУсловий Цикл
			СтрокаУсловийДерево = СтрокаДерева.Строки.Добавить();
			СтрокаУсловийДерево.СкидкаНаценкаПредставление = СтрокаУсловий;
		КонецЦикла;
		
	КонецЦикла;
	
	ТабличныйДокументДеревоСкидок.Вывести(ОбластьШапка);
	ВывестиДеревоВТабличныйДокумент(Дерево, ТабличныйДокументДеревоСкидок, ОбластьСтрока);
	Возврат ТабличныйДокументДеревоСкидок;
	
КонецФункции

&НаСервере
Процедура ВывестиДеревоВТабличныйДокумент(Дерево, ТабличныйДокумент, ОбластьСтрока)
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтрокаДерева);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда 
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			ТабличныйДокумент.НачатьГруппуСтрок();
			ВывестиДеревоВТабличныйДокумент(СтрокаДерева, ТабличныйДокумент, ОбластьСтрока);
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
		Иначе
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуСкидок(СтруктураСкидки, СтрокаСкидки)
	Если СтруктураСкидки.РучнаяСкидка Тогда
		Если СтруктураСкидки.Подарок Тогда
			СтрокаСкидки.ОбозначениеСкидки = БиблиотекаКартинок.РМКОбозначениеПодарок;
		ИначеЕсли СтрокаСкидки.ЗначениеСкидкиНаценки >= 0 Тогда
			СтрокаСкидки.ОбозначениеСкидки = БиблиотекаКартинок.РМКОбозначениеРучныеСкидки;
		Иначе
			СтрокаСкидки.ОбозначениеСкидки = БиблиотекаКартинок.РМКОбозначениеРучныеНаценки;
		КонецЕсли;
	ИначеЕсли СтруктураСкидки.УправляемаяСкидка Тогда
		Если СтрокаСкидки.ЗначениеСкидкиНаценки >= 0 Тогда
			СтрокаСкидки.ОбозначениеСкидки = БиблиотекаКартинок.РМКОбозначениеУправляемыеСкидки;
		Иначе
			СтрокаСкидки.ОбозначениеСкидки = БиблиотекаКартинок.РМКОбозначениеУправляемыеНаценки;
		КонецЕсли;
	Иначе
		Если СтрокаСкидки.ЗначениеСкидкиНаценки >= 0 Тогда
			СтрокаСкидки.ОбозначениеСкидки = БиблиотекаКартинок.РМКОбозначениеАвтоматическиеСкидки;
		Иначе
			СтрокаСкидки.ОбозначениеСкидки = БиблиотекаКартинок.РМКОбозначениеАвтоматическиеНаценки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьОсновныхЭлементовСкидки(ВидимостьСкидкиСтрока, ВидимостьСкидкиЧек, ВидимостьСкидки)
	УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьСкидкиНаЧек, ПоказыватьКнопкиСкидок);
	УстановитьВидимостьЭлементаФормы(Элементы.СуммаСкидки, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьРассчитанныеСкидки, ПоказыватьКнопкиСкидок);
	ЭтоВозвратПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	Если РежимПоказаСкидок И РежимРасчетаСкидокСтрока Тогда
		Элементы.ПоказатьРассчитанныеСкидки.ЦветФона = ЦветаФормы.АктивнаяКнопка;
		Элементы.ПоказатьСкидкиНаЧек.ЦветФона = ЦветаФормы.Авто;
		УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьСкидкиНаЧек, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.СуммаСкидки, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьРассчитанныеСкидки, ПоказыватьКнопкиСкидок);
	ИначеЕсли РежимПоказаСкидок И НЕ РежимРасчетаСкидокСтрока Тогда
		Элементы.ПоказатьРассчитанныеСкидки.ЦветФона = ЦветаФормы.Авто;
		Элементы.ПоказатьСкидкиНаЧек.ЦветФона = ЦветаФормы.АктивнаяКнопка;
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаСкидкиНаЧек);
	ИначеЕсли ЭтоВозвратПродажи Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьСкидкиНаЧек, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.СуммаСкидки, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьРассчитанныеСкидки, Ложь);
	Иначе
		Элементы.ПоказатьРассчитанныеСкидки.ЦветФона = ЦветаФормы.Авто;
		Элементы.ПоказатьСкидкиНаЧек.ЦветФона = ЦветаФормы.Авто;
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаРедактированияСтрокиКорзины);
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ВидимостьСкидкиСтрока);
	УстановитьВидимостьЭлементаФормы(Элементы.ЭлементыПанелиУстановкиСкидкиНаЧек, ВидимостьСкидкиЧек);
	УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьДействующиеСкидки, ВидимостьСкидки);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДеревоРассчитанныхСкидок, ВидимостьСкидки И ИспользоватьАвтоматическиеСкидки);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборУправляемыхСкидок, РежимПоказаСкидок И ТаблицаВыборУправляемыхСкидок.Количество() > 0);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборПодарка, ВидимостьСкидки И ТаблицаПодарков.Количество() > 0);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПромокоды, ВидимостьСкидки И ИспользоватьПромокоды);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаДанныеДляТекущейСтроки, НЕ РежимПоказаСкидок);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКоманднойПанелиСкидки()
	ВидимостьСкидокНЕРежимПлитки = НЕ РежимПоказаСкидок И НЕ РежимПлитки;
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, НЕ РежимПоказаСкидок И ИспользоватьПанельИзбранныхТоваров);
	УстановитьВидимостьЭлементаФормы(Элементы.ПодгруппаОперации1,ВидимостьСкидокНЕРежимПлитки);
	УстановитьВидимостьЭлементаФормы(Элементы.ПодгруппаОперации3, ВидимостьСкидокНЕРежимПлитки);
	
	ФормаПлиточногоИнтерфейсаДоступна = ЗначениеЗаполнено(СтруктураПлиточногоИнтерфейсаПодбора);
	УстановитьВидимостьЭлементаФормы(Элементы.ОткрытьПлиточныйИнтерфейсКаталога,НЕ РежимПоказаСкидок И ФормаПлиточногоИнтерфейсаДоступна);
	ИспользоватьВводПоСтроке = НЕ РежимПоказаСкидок И ИспользоватьБыстроеДобавлениеТовара И Не РежимКассыСамообслуживания;
	УстановитьВидимостьЭлементаФормы(Элементы.ВводТовараПоСтроке, ИспользоватьВводПоСтроке);
	УстановитьВидимостьЭлементаФормы(Элементы.Каталог, НЕ РежимПоказаСкидок);
	УстановитьВидимостьЭлементаФормы(Элементы.ДобавитьПакет, НЕ РежимПоказаСкидок И НЕ ДанныеПакета = Неопределено);
	УстановитьВидимостьЭлементаФормы(Элементы.НайтиВЧеке, НЕ РежимПоказаСкидок ИЛИ НЕ РежимРасчетаСкидокСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПодсказкиВСкидках()
	ВидимостьСкидки = РежимПоказаСкидок И НЕ РежимРасчетаСкидокСтрока;
	УсловиеВыполнено = Ложь;
	Если ТаблицаВыборУправляемыхСкидок.Количество() = 0 И ТаблицаПодарков.Количество() > 0 И ВидимостьСкидки Тогда
		Элементы.ДеревоПодарков.АвтоМаксимальнаяВысота = Истина;
	ИначеЕсли ТаблицаВыборУправляемыхСкидок.Количество() > 0 И ТаблицаПодарков.Количество() > 0 И ВидимостьСкидки Тогда
		Элементы.ДеревоПодарков.АвтоМаксимальнаяВысота = Ложь;
	ИначеЕсли ТаблицаВыборУправляемыхСкидок.Количество() = 0 И ТаблицаПодарков.Количество() = 0 И РежимПоказаСкидок Тогда
		УсловиеВыполнено = Истина;
	КонецЕсли;
	Если РежимПоказаСкидок Тогда
		ПереместитьПодсказки(УсловиеВыполнено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСлойГруппПоискВСкидках()
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
		= Элементы.ГруппаНайтиВЧеке И НЕ РежимПоказаСкидок Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево,(Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект)));
		ПредыдущийСлой = Элементы.ОбластьОперативногоУправленияЧеком;
		Если Не (ПредыдущийСлойДоДанныхПокупателя = Неопределено
			Или ПредыдущийСлойДоДанныхПокупателя = Элементы.ГруппаНайтиВЧеке) Тогда
			
			ПредыдущийСлой = ПредыдущийСлойДоДанныхПокупателя;
			
		КонецЕсли;
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, ПредыдущийСлой);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьУправляемуюСкидку(ТекущиеДанные)
	ТекущаяСтрокаТоваров = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	Если ТекущиеДанные.ТипСкидки = "Ручная" Тогда
		Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
			ОтменитьСкидки(Истина);
		КонецЕсли;
		ТекущиеДанные.Отметка = Ложь;
		ТекущиеДанные.ОтметкаКартинка = БиблиотекаКартинок.РМКНеактивныйВыбор;
		Позиции = Объект.Товары;
		ЗначениеВыбраннойРучнойСкидки = ТекущиеДанные.ЗначениеСкидки;
		Если ТекущиеДанные.ОбластьДействия = "На строку" Тогда
			ПрименитьУправляемуюСкидкуНаСтроку(ЗначениеВыбраннойРучнойСкидки);
		Иначе
			ЗначениеСкидкиНаЧек = ЗначениеВыбраннойРучнойСкидки;
			РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ЗначениеВыбраннойРучнойСкидки);
		КонецЕсли;
		ТребуетсяПересчетСкидок = Истина;
	Иначе
		ТребуетсяПересчетСкидок = Истина;
		НоваяСтрока = ТаблицаВыбранныхУправляемыхСкидок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущаяСтрокаТоваров.ИдентификаторСтроки;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьУправляемуюСкидкуНаСтроку(ЗначениеВыбраннойРучнойСкидки)
	ТекущаяСтрокаТоваров = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	Если ЭтоСоставляющаяНабора(ТекущаяСтрокаТоваров) Тогда
		
		СоставНабора = СоставНабораПоЭлементуНабора(ТекущаяСтрокаТоваров, Объект.Товары);
		
		Если СоставНабора.Количество() = Объект.Товары.Количество() Тогда
			Позиции = Объект.Товары;
		Иначе
			Позиции = СоставНабора;
		КонецЕсли;
		ТекущийТоварСкидка = ЗначениеВыбраннойРучнойСкидки;
		РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ЗначениеВыбраннойРучнойСкидки);
	Иначе
		ТекущийТоварСкидка = ЗначениеВыбраннойРучнойСкидки;
		ТекущаяСтрокаТоваров.РассчитанаСкидка = Ложь;
		РучнаяСкидкаПроцентомПоСтроке(ТекущаяСтрокаТоваров);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВидовКарт()
	
	ТаблицаВидыКарт.Очистить();
	Элементы.НоваяКартаВидКарты.СписокВыбора.Очистить();
	
	Если Не РежимКассыСамообслуживания Тогда
		Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
			ПараметрыПодключения = ОбщегоНазначенияРМК.ЗначенияПараметровСервераЛояльности(ТекущаяНастройкаРМК);
			ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПолучитьВидыКарт(ПараметрыПодключения,);
			СтруктураРезультат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
			
			Если СтруктураРезультат.Свойство("ЕстьОшибки") И НЕ СтруктураРезультат.ЕстьОшибки Тогда
				СтрокаJSON = СтруктураРезультат.ДанныеОтвета;
				ДанныеОтвета = Неопределено;
				Если СтрокаJSON <> Неопределено Тогда
					СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
					Если ДанныеОтвета <> Неопределено И ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
						Для каждого СтрокаМассива Из ДанныеОтвета Цикл
							ВидКарты = ТаблицаВидыКарт.Добавить();
							ЗаполнитьЗначенияСвойств(ВидКарты, СтрокаМассива); 
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьТаблицуВидовКарт(ТаблицаВидыКарт);
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьРезультатПолученияВидовКарт(ТаблицаВидыКарт);
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатПолученияВидовКарт(ДанныеОтвета)
	Для каждого СтрокаМассива Из ДанныеОтвета Цикл
		Элементы.НоваяКартаВидКарты.СписокВыбора.Добавить(СтрокаМассива.Идентификатор, СтрокаМассива.Наименование);
	КонецЦикла;
	
	Если ТаблицаВидыКарт.Количество() = 1 Тогда
		НоваяКартаВидКарты = ТаблицаВидыКарт[0].Идентификатор;
		Элементы.НоваяКартаФИО.АвтоОтметкаНезаполненного = ТаблицаВидыКарт[0].ЭтоИменнаяКарта;
		Элементы.НоваяКартаТелефон.АвтоОтметкаНезаполненного = ТаблицаВидыКарт[0].ЭтоИменнаяКарта И ОтправлятьSMSКодПриЗаведенииКарты;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ДисплейПокупателя

&НаКлиенте
Функция БуферОбменаДисплеяПокупателя()
	
	Результат = Новый Структура();
	Результат.Вставить("ТоварНаименование");
	Результат.Вставить("ТоварЦена");
	Результат.Вставить("ТоварКоличество");
	Результат.Вставить("ТоварСумма");
	Результат.Вставить("ТоварСкидка");
	Результат.Вставить("СуммаИтого");
	Результат.Вставить("СуммаСкидки");
	Результат.Вставить("Сдача");
	Результат.Вставить("Оплата");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя(Операция)
	
	Если ЗначениеЗаполнено(ДисплейПокупателя) Тогда
	
		ИсходныеДанные = МенеджерОборудованияРМККлиент.ИсходныеДанныеДляПервичнойПередачиНаДисплейПокупателя();
		ИсходныеДанные.ИспользоватьПодключаемоеОборудование	= ИспользоватьПодключаемоеОборудование;
		ИсходныеДанные.ДанныеДляОтображения					= ДанныеКПередачеВДисплейПокупателя;
		ИсходныеДанные.Операция								= Операция;
		ИсходныеДанные.СуммаСкидки							= СуммаСкидки;
		ИсходныеДанные.СуммаИтого							= СуммаИтого;
		
		МенеджерОборудованияРМККлиент.ВывестиИнформациюНаДисплейПокупателя(ИсходныеДанные, ЭтотОбъект,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюНаДисплееПокупателя(Операция, ОтображатьТолькоИтоги = Ложь)
	
	Если ЗначениеЗаполнено(ДисплейПокупателя) Тогда
		
		Если Операция = "ДобавлениеТовара" ИЛИ Операция = "ИзменениеЦены" Тогда
			
			Элементы.Товары.ТекущаяСтрока = ТекущийТоварИдентификатор;
			ДобавленаНоваяСтрокаКорзины = Ложь;
			
		КонецЕсли;
		
		СтруктураДанных = МенеджерОборудованияРМККлиент.ИсходныеДанныеДляОбновленияДанныхНаДисплееПокупателя();
		СтруктураДанных.ИспользоватьПодключаемоеОборудование	= ИспользоватьПодключаемоеОборудование;
		СтруктураДанных.ДанныеДляОтображения					= ДанныеКПередачеВДисплейПокупателя;
		СтруктураДанных.Операция								= Операция;
		СтруктураДанных.ОтображатьТолькоИтоги					= ОтображатьТолькоИтоги;
		СтруктураДанных.ТекущаяСтрока							= Элементы.Товары.ТекущиеДанные;
		СтруктураДанных.Товары									= Объект.Товары;
		СтруктураДанных.СуммаСкидки								= СуммаСкидки;
		СтруктураДанных.СуммаИтого								= СуммаИтого;
		
		МенеджерОборудованияРМККлиент.ОбновитьДанныеНаДисплееПокупателя(СтруктураДанных, ЭтотОбъект,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПростояДисплеяПокупателя()
	
	Если НЕ Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() <= 0 Тогда
		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыводаОжиданияОплатыНаДисплейПокупателя()
	
	ОбработкаПростояДисплеяПокупателя();
	
	Если ЭтотОбъект.Открыта() И Объект.Товары.Количество() > 0 Тогда
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуПроверкиМарки(Контекст, СтраницаДиалога)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ТекущаяОперация = "" И РежимКассыСамообслуживания Тогда
		
		НеобходимоеПраво = "ПравоРучноеПодтверждениеМаркиРМК";
		ТекущаяОперация = "РучноеПодтверждениеМаркиРМК";
		
		ПараметрыТекущейОперации = Новый Структура;
		ПараметрыТекущейОперации.Вставить("Контекст", Контекст);
		ПараметрыТекущейОперации.Вставить("СтраницаДиалога", СтраницаДиалога.Имя);
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
		Возврат;
		
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПодтвержденияКонтрольнойМарки);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы[СтраницаДиалога.Имя]);
	ТекущийЭлемент = Элементы.ПродолжитьДобавлениеТовараПослеПроверкиМарки;
	
	ВременныйКонтекстПроверкиМарки = Контекст;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУспешноеДобавлениеМарки(ДанныеОбработкиДобавления)
	
	КонтекстВызова = ДанныеОбработкиДобавления.КонтекстВызова;
	ЭтоРучноеСопоставление = Ложь;
	
	СтруктураОтложенногоПоказаПредупреждения = Новый Структура();
	СтруктураОтложенногоПоказаПредупреждения.Вставить("ОтложенноеПредупреждение", Истина);
	СтруктураОтложенногоПоказаПредупреждения.Вставить("ПредупреждениеНужно", Ложь);
	
	Если КонтекстВызова = "ЗавершитьВводШтрихкодаМаркаВведена" Тогда
		ДобавитьТоварПоДаннымМарки(ДанныеОбработкиДобавления.ЭтоОбработкаСопоставленияТовара, СтруктураОтложенногоПоказаПредупреждения);
	ИначеЕсли КонтекстВызова = "ЗавершитьВводШтрихкода" Тогда
		
		ТекущийТоварКоличество = Элементы.Товары.ТекущиеДанные.КоличествоУпаковок;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		РассчитатьСуммуОплатыБонусами(СтруктураОтложенногоПоказаПредупреждения);
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
		
	ИначеЕсли КонтекстВызова = "ОбработатьВыборТовара" Тогда
		
		ЭтоРучноеСопоставление = ЗначениеЗаполнено(ДанныеДляРучногоСопоставления) И РучноеСопоставлениеТовара;
		ОбработатьВыборТовараСервер(ДанныеОбработкиДобавления.ТекущийВыбор,
			ДанныеОбработкиДобавления.ДействующиеЗапретыПродаж);
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		РассчитатьСуммуОплатыБонусами(СтруктураОтложенногоПоказаПредупреждения);
		
	КонецЕсли;
	
	Если ЭтоРучноеСопоставление Тогда
		СтрокаДобавлена = ЗначениеЗаполнено(ДанныеДляРучногоСопоставления);
	Иначе
		СтрокаДобавлена = Истина;
	КонецЕсли;
	
	Если СтрокаДобавлена Тогда
		
		Если ЗначениеЗаполнено(КонтекстВызова) Тогда
		
			СтрокаТаблицыТоваров = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
			СтрокаТаблицыТоваров.КонтрольнаяМарка = ДанныеОбработкиДобавления.КодМаркировки;
			
		КонецЕсли;
		
		УстановитьФокусНаТовареТребующемВводаМарки();
		
	КонецЕсли;
	
	Если СтруктураОтложенногоПоказаПредупреждения.ПредупреждениеНужно Тогда
		ВывестиПредупреждениеОНевозможностиОплатыБонусами();
	КонецЕсли;
	
	ВременныйКонтекстПроверкиМарки = Неопределено;
	ДанныеДляРучногоСопоставления = Неопределено;
	
	ОбработатьИзменениеТаблицыТоваровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателяЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ТекстЗаголовка = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.'");
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось вывести информацию на дисплей покупателя по причине: %1'"),
			РезультатВыполнения.ОписаниеОшибки);
		
		ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателяОВнесеннойСуммеОплаты()

	Если НЕ ЗначениеЗаполнено(ДанныеКПередачеВДисплейПокупателя) Тогда
		ДанныеКПередачеВДисплейПокупателя = БуферОбменаДисплеяПокупателя();
	КонецЕсли;
	
	ФорматЧисла = "ЧДЦ=2;ЧГ=;ЧН=0.00";
	ДанныеКПередачеВДисплейПокупателя.Сдача = Формат(Сдача, ФорматЧисла);
	ДанныеКПередачеВДисплейПокупателя.СуммаИтого = Формат(СуммаИтого, ФорматЧисла);
	ДанныеКПередачеВДисплейПокупателя.Оплата = Формат(Объект.Оплата.Итог("Сумма"), ФорматЧисла);
	ВывестиИнформациюНаДисплейПокупателя("Оплата");
	
КонецПроцедуры

#КонецОбласти

#Область ЗапретыПродаж

&НаКлиенте
Процедура АктуализироватьКорзинуПоДаннымОграниченийПродаж()
	
	// Проверить календарные ограничения продаж
	Если ИспользоватьЗапретПродаж И КэшЗапретовПродаж.Количество() > 0 Тогда
		
		ДанныеЗапрета = НаличиеЗапрещенныхКПродажеТоваровВЧеке();
		ЧекСодержитЗапрещенныеТовары = ДанныеЗапрета.Количество();
		
		Если ЧекСодержитЗапрещенныеТовары Тогда
			
			ОткрытьСтраницуЗапретаПродажиПоВремени(ДанныеЗапрета.ВидНоменклатуры,
				ДанныеЗапрета.ВремяНачалаЗапрета, ДанныеЗапрета.ВремяОкончанияЗапрета);
			
			ПозицииКорзиныКУдалению = Новый Массив();
			Для Каждого ТоварнаяПозиция Из Объект.Товары Цикл
				
				ДействующиеЗапретыПродаж = ОбщегоНазначенияРМККлиент.НаличиеЗапретовПродажи(
					ТоварнаяПозиция.ВидНоменклатуры, ТоварнаяПозиция.ОсобенностьУчета, КэшЗапретовПродаж);
				Если ДействующиеЗапретыПродаж.Количество() > 0 Тогда
					ПозицииКорзиныКУдалению.Добавить(ТоварнаяПозиция);
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Позиция Из ПозицииКорзиныКУдалению Цикл
				
				Если Позиция.НеобходимостьВводаКодаМаркировки Тогда
					ОжидатьВводМарки = Ложь;
				КонецЕсли;
				Объект.Товары.Удалить(Позиция);
				
			КонецЦикла;
			
			УстановитьАктивностьСтроки();
			ПересчитатьИтогиТабличнойЧастиТовары();
			ОбработатьИзменениеТаблицыТоваровНаКлиенте();
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверить возраст покупателя
	Если ЗапрашиватьПодтверждениеВозраста18Плюс Тогда
		
		Если СостояниеПодтвержденияВозраста = "" ИЛИ СостояниеПодтвержденияВозраста = "Нет18"
			ИЛИ СостояниеПодтвержденияВозраста = "Выбор" Тогда
				
				Если ТоварСВозрастнымОграничением() Тогда
					
					ДанныеДобавляемогоТовара = Новый Структура;
					ДанныеДобавляемогоТовара.Вставить("УдалятьТоварыСВозрастнымОграничением", Истина);
					ПереключитьНаСтраницуПодтвержденияВозраста();
					Возврат;
					
				КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуЗапретаПродажиПоВремени(ВидНоменклатуры, ВремяНачала, ВремяОкончания)
	
	Если ТекущаяОперация = "" И РежимКассыСамообслуживания Тогда
		
		НеобходимоеПраво = "ПравоОбработкиЗапретаПродажРМК";
		ТекущаяОперация = "ОбработкаЗапретаПродажРМК";
		
		ПараметрыТекущейОперации = Новый Структура;
		ПараметрыТекущейОперации.Вставить("ВидНоменклатуры", ВидНоменклатуры);
		ПараметрыТекущейОперации.Вставить("ВремяНачала", ВремяНачала);
		ПараметрыТекущейОперации.Вставить("ВремяОкончания", ВремяОкончания);
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
		Возврат;
		
	КонецЕсли;
	
	ЭтоОперацияВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	Если ЭтоОперацияВозврат Тогда
		ТекущаяОперация = "ПодтвердитьВозвратЗапрещенногоТовара";
		
		ТекстЗапретаПродажи = СтрШаблон(НСтр("ru = 'Продажа товаров из категории %1 запрещена с %2 по %3. Осуществить возврат?'"),
			ВидНоменклатуры, СекундыВЧасыИМинуты(ВремяНачала), СекундыВЧасыИМинуты(ВремяОкончания));  
			
		ТекстКомандыЗапретаПродажи = НСтр("ru = 'Пробить чек'");
	Иначе
		ТекстЗапретаПродажи = СтрШаблон(НСтр("ru = 'Продажа товаров из категории %1 запрещена с %2 по %3.'"),
			ВидНоменклатуры, СекундыВЧасыИМинуты(ВремяНачала), СекундыВЧасыИМинуты(ВремяОкончания));
			
		ТекстКомандыЗапретаПродажи = НСтр("ru = 'Продолжить чек'");
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьТекстЗапретаПродажиПоВремени(
			ЭтотОбъект, ТекстЗапретаПродажи, ВидНоменклатуры, ВремяНачала, ВремяОкончания);
	
	Элементы.ТекстЗапретаПродажи.Заголовок = ТекстЗапретаПродажи;
	Элементы.ПродолжитьРаботуСЧеком.Заголовок = ТекстКомандыЗапретаПродажи;
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЗапретаПродажи);
	ТекущийЭлемент = Элементы.ПродолжитьРаботуСЧеком;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОграниченияПродажИнтерактивно()
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	Если ИспользоватьПоставляемыеОграниченияПродаж
		ИЛИ (ИспользоватьЗапретПродаж И ИспользоватьСерверЛояльностиПолучательДанных) Тогда
		ОбновитьКалендарныеОграниченияПродаж();
	ИначеЕсли ИспользоватьЗапретПродаж Тогда
		ЗаполнитьКэшДействующихЗапретовПродаж();
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Пожалуйста, включите использование запретов продаж.'");
		ЗаголовокПредупреждения = НСтр("ru = 'Ограничения продаж не используются'");
		ПоказатьПредупреждение(, ТекстПредупреждения, , ЗаголовокПредупреждения);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьКалендарныеОграниченияПродаж()
	
	СостояниеОбновленияЗапретовПродаж = НСтр("ru = ''");
	
	Если ИспользоватьСерверЛояльностиПолучательДанных И ИспользоватьЗапретПродаж Тогда
		
		РезультатОбновления = ОбщегоНазначенияРМККлиентСервер.ОбновитьДанныеЗапретовРедактирования(ТекущаяНастройкаРМК,
			Объект.ТорговыйОбъект);
		
		Если НЕ РезультатОбновления.ПризнакУспешноОбновлен Тогда
			
			ПричинаНевозможностиОбновленияПризнака = НСтр("ru = 'Признак разрешения редактирования не обновлен по причине:'");
			СостояниеОбновленияЗапретовПродаж = СтрШаблон("%1 %2%3",
				ПричинаНевозможностиОбновленияПризнака, РезультатОбновления.КомментарийКОбновлениюПризнака, Символы.ПС);
			
		КонецЕсли;
		
		Если НЕ РезультатОбновления.ЗапретыПродажУспешноЗагружены Тогда
			
			ПричинаНевозможностиОбновленияЗапретовПродаж = НСтр("ru = 'Не удалось обновить запреты продаж по причине:'");
			ПричинаНевозможностиОбновленияЗапретовПродажРасширенная = СтрШаблон("%1%2",
				ПричинаНевозможностиОбновленияЗапретовПродаж, РезультатОбновления.КомментарийОбновленияЗапретов);
			СостояниеОбновленияЗапретовПродаж = СтрШаблон("%1%2%3",
				СостояниеОбновленияЗапретовПродаж, ПричинаНевозможностиОбновленияЗапретовПродажРасширенная, Символы.ПС);
			
		КонецЕсли;
		
	ИначеЕсли ИспользоватьПоставляемыеОграниченияПродаж Тогда
		
		РезультатОбновления = ОбновитьОграниченияПродажИзПоставляемыхДанных();
		СостояниеОбновленияЗапретовПродаж = РезультатОбновления.КомментарийОбновленияЗапретов;
		
	Иначе
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СостояниеОбновленияЗапретовПродаж) Тогда
		
		КомментарийКЗаписи = НСтр("ru = 'Данные о запретах продаж не были обновлены.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
				
		ИмяСобытия = НСтр("ru = 'Обновление данных запретов о продажах'",
			ОбщегоНазначения.КодОсновногоЯзыка());
				
		ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка, , , КомментарийКЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьОграниченияПродажИзПоставляемыхДанных()
	
	Результат = Новый Структура();
	Результат.Вставить("КомментарийОбновленияЗапретов", НСтр("ru = ''"));
	ТорговыйОбъект = Объект.ТорговыйОбъект;
	ОбщегоНазначенияРМК.ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат);
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьКэшДействующихЗапретовПродаж()
	
	Если ИспользоватьЗапретПродаж Тогда
		
		КэшЗапретовПродаж.Очистить();
		Выборка = ОбщегоНазначенияРМК.АктуальныеЗапретыПродаж(Объект.Организация, ТекущаяДатаСеанса());
		
		Если НЕ Выборка = Неопределено Тогда
		
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(КэшЗапретовПродаж.Добавить(), Выборка);
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеОплатПередПробитиемЧека(ОплатаЗаполненаВерно, СтруктураОшибки)
	
	СтандартнаяОбработка = Истина;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ПроверитьЗаполнениеОплатПередПробитиемЧека(
		ОплатаЗаполненаВерно, СтруктураОшибки, ЭтотОбъект, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Если ЭтоОплатаРассрочки Тогда
			
			Если СуммаОплаченоНал = 0 И СуммаОплаченоБН = 0 И СуммаОплаченоСБП = 0 Тогда
				
				ОплатаЗаполненаВерно = Ложь;
				ТекстОшибки = НСтр("ru = 'При оплате рассрочки необходимо ввести оплату наличными, платежной картой или СБП.'");
				СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка оплаты.'");
				СтруктураОшибки.ТекстОшибки = ТекстОшибки;
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Объект.ОперацияСДенежнымиСредствами
			И (СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса) >= СуммаИтого Тогда
			
			ОплатаЗаполненаВерно = Ложь;
			ТекстОшибки = НСтр("ru = 'Необходимо выбрать вид оплаты и ввести сумму предоплаты.'");
			СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка оплаты.'");
			СтруктураОшибки.ТекстОшибки = ТекстОшибки; 
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтДобавленияТовара()

	Если ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки)
		И ЕстьСвойство(ВременныйКонтекстПроверкиМарки, "КодМаркировки")
		И ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки.КодМаркировки) Тогда
		
		
		ИдентификаторЗапроса = ВременныйКонтекстПроверкиМарки.ИдентификаторЗапроса;
		ПараметрыПодтвержденияКМ = МенеджерОборудованияКлиентСервер.ПараметрыПодтверждениеКМ();
		ПараметрыПодтвержденияКМ.ИдентификаторЗапроса = ИдентификаторЗапроса;
		ПараметрыПодтвержденияКМ.Выбытие = Ложь;
		
		Отбор = Новый Структура("Организация", ВременныйКонтекстПроверкиМарки.Организация);
		СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
		ПодключаемоеОборудованиеДляПроверкиМарки = СтрокаКассы.ИдентификаторУстройства;
		
		ОповещениеОЗавершенииНеВыбытияКМ = Новый ОписаниеОповещения("ЗавершитьПодтверждениеНеВыбытияКонтрольнойМарки",
			ЭтотОбъект, ВременныйКонтекстПроверкиМарки);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПодтверждениеКМ(ОповещениеОЗавершенииНеВыбытияКМ,
			УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыПодтвержденияКМ);
		
	КонецЕсли;

	ВременныйКонтекстПроверкиМарки = Неопределено;
	ОжидатьВводМарки = Ложь;
	ДанныеДляРучногоСопоставления = Неопределено;
	УстановитьДоступностьЭлементовРабочейОбластиФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФокусНаТовареТребующемВводаМарки()
	
	Если ЭтоЧекКоррекции Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоиска = Новый Структура();
	ОтборПоиска.Вставить("НеобходимостьВводаКодаМаркировки", Истина);
	ОтборПоиска.Вставить("КодМаркировки", "");
	РезультатПоиска = Объект.Товары.НайтиСтроки(ОтборПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
	
		СтрокаТовара = РезультатПоиска[0];
		Элементы.Товары.ТекущаяСтрока = СтрокаТовара.ПолучитьИдентификатор();
		ПодготовитьИнтерфейсКВозвратуМаркируемогоТовараБезКонтрольнойМарки(СтрокаТовара);
		
	Иначе
		
		УстановитьДоступностьЭлементовРабочейОбластиФормы(Истина);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		НастроитьДоступностьПробитьЧек();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРезультатыЗапросаКМ()
	
	Контекст = ВременныйКонтекстПроверкиМарки;
	ПараметрыОперации = Новый Структура();
	
	Отбор = Новый Структура("Организация", Контекст.Организация);
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	ПодключаемоеОборудованиеДляПроверкиМарки = СтрокаКассы.ИдентификаторУстройства;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ЗавершитьПолучениеРезультатовЗапросаПроверкиКодаМаркировкиОтИСМП",
		ЭтотОбъект, Контекст);
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолученияРезультатовЗапросаКМ(ОповещениеОЗавершении,
		УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКонтрольныеМарки()
	
	Если ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) Тогда
		
		КодМаркировкаВBase64 = ПривестиКодМаркировкиКBase64(ВременныйКонтекстПроверкиМарки.КодМаркировки);
		ПараметрыПроверкиМарки = ДанныеЗапросаКМ(КодМаркировкаВBase64);
		ВременныйКонтекстПроверкиМарки.ИдентификаторЗапроса = ПараметрыПроверкиМарки.ИдентификаторЗапроса;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьЗапросКонтрольныхМарок",
			ЭтотОбъект, ВременныйКонтекстПроверкиМарки);
			
		Отбор = Новый Структура("Организация", ВременныйКонтекстПроверкиМарки.Организация);
		СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
		ПодключаемоеОборудованиеДляПроверкиМарки = СтрокаКассы.ИдентификаторУстройства;
		
		СохранитьПодключениеККМ = Истина;
		ПараметрыСохраненияПодключения =
			МенеджерОборудованияКлиентСервер.ДополнительныеПараметрыОперации(СохранитьПодключениеККМ);
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗапросКМ(ОповещениеОЗавершении,
			УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыПроверкиМарки,
			ПараметрыСохраненияПодключения);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСессиюРегистрацииМарок()
	
	Для Каждого Строка Из ТаблицаКассККМОрганизаций Цикл
	
		Если Строка.ПоддерживаетПроверкуКодовМаркировки Тогда
			
			ПодключаемоеОборудование = Строка.ИдентификаторУстройства;
			
			ОповещениеОЗакрытииСессииРегистрацииМарок = Новый ОписаниеОповещения(
				"ЗавершитьЗакрытиеСессииПроверкиКонтрольныхМарок", ЭтотОбъект);
			
			ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗакрытииСессииРегистрацииКМ(
				ОповещениеОЗакрытииСессииРегистрацииМарок, УникальныйИдентификатор, ПодключаемоеОборудование);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовРабочейОбластиФормы(ЗначениеДоступности)
	
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРядовКнопокБыстрыхТоваров,
		ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаТовары, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьТовар, ЗначениеДоступности);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКодыМаркировки()
	
	Для Каждого СтрокиКорзины Из Объект.Товары Цикл
	
		Если ЗначениеЗаполнено(СтрокиКорзины.КодМаркировки) Тогда
			СтрокиКорзины.КодМаркировки = "";
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИзбранныеПозиции

&НаСервере
Процедура ЗаполнитьПанельИзбранныхТоваров()
	
	Если ИзбранныеПозиции.Количество() = 0 Тогда
		
		ИнтерфейсРМКСлужебный.ЗаполнитьИсходныеДанныеИзбранныхПозиций(ТекущаяНастройкаРМК, ЭтотОбъект);
		ЕстьИзбранныеПозиции = ИзбранныеПозиции.Количество() > 0;
		
		Если ЕстьИзбранныеПозиции И ДанныеКнопок.Количество() = 0 Тогда
			
			ИсходныеДанныеГорячейКлавиши = ДанныеВедущейКомбинацииГорячихКлавиш();
			
			ВедущаяКомбинацияСтрокой = ИсходныеДанныеГорячейКлавиши.ВедущаяКомбинацияСтрокой;
			
			Если НЕ ПустаяСтрока(ВедущаяКомбинацияСтрокой) Тогда
				ЗаголовокИзбранныхТоваров = СтрШаблон(НСтр("ru = 'Избранное (%1 номер товара)'"),
					ВедущаяКомбинацияСтрокой);
				Элементы.ПанельИзбранныхТоваров.Заголовок = ЗаголовокИзбранныхТоваров;
			Иначе
				ЗаголовокИзбранныхТоваров = НСтр("ru = 'Избранное'");
			КонецЕсли;
			
			Элементы.ГруппаРядовКнопокБыстрыхТоваров.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
			
			АдресИзображенияУровеньВверх = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.УровеньВверх, ЭтотОбъект.УникальныйИдентификатор);
			АдресИзображенияУровеньВниз = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.УровеньВниз, ЭтотОбъект.УникальныйИдентификатор);
			
			ИнтерфейсРМКСлужебный.СформироватьЭлементыПанелиИзбранныхПозиций(ЭтотОбъект, ИсходныеДанныеГорячейКлавиши);
			ИспользоватьПанельИзбранныхТоваров = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ИнтерфейсРМКСлужебный.ЗаполнитьИсходныеДанныеИзбранныхПозиций(ТекущаяНастройкаРМК, ЭтотОбъект);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, ИзбранныеПозиции.Количество() > 0);
	УстановитьВидимостьЭлементаФормы(Элементы.ОткрытьПанельИзбранныхТоваров, ИзбранныеПозиции.Количество() > 0);
	
КонецПроцедуры

&НаСервере
Функция ДанныеВедущейКомбинацииГорячихКлавиш()
	
	Результат = Новый Структура("ВедущаяКомбинацияСтрокой,Shift,Alt,Ctrl", Ложь, Ложь, Ложь);
	
	КомандаОткрытияПанелиИзбранного = Элементы.Найти("ОткрытьПанельИзбранныхТоваров");
	
	Если НЕ КомандаОткрытияПанелиИзбранного = Неопределено Тогда
		
		СочетаниеКлавиш = КомандаОткрытияПанелиИзбранного.СочетаниеКлавиш;
		
		СоставляющаяCtrl	= ?(СочетаниеКлавиш.Ctrl, "Ctrl +", "");
		СоставляющаяAlt		= ?(СочетаниеКлавиш.Alt, "Alt +", "");
		СоставляющаяShift	= ?(СочетаниеКлавиш.Shift, "Shift +", "");
		
		КомбинацияГорячихКлавишСтрокой = СтрШаблон("%1%2%3", СоставляющаяCtrl, СоставляющаяAlt, СоставляющаяShift);
		
		Результат.Вставить("ВедущаяКомбинацияСтрокой", КомбинацияГорячихКлавишСтрокой);
		Результат.Вставить("Ctrl", СочетаниеКлавиш.Ctrl);
		Результат.Вставить("Alt", СочетаниеКлавиш.Alt);
		Результат.Вставить("Shift", СочетаниеКлавиш.Shift);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция НаличиеЗапрещенныхКПродажеТоваровВЧеке()
	
	Результат = Новый Структура;
	Если ИспользоватьЗапретПродаж Тогда
		
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			
			ДействующиеЗапретыПродаж = ОбщегоНазначенияРМККлиент.НаличиеЗапретовПродажи(
				СтрокаТовары.ВидНоменклатуры,
				СтрокаТовары.ОсобенностьУчета,
				КэшЗапретовПродаж);
		
			Если ДействующиеЗапретыПродаж.Количество() > 0 Тогда
				Возврат ДействующиеЗапретыПродаж;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьКнопкиИзбранныхПозиций();
	
	ИнтерфейсРМКСлужебныйКлиент.ЗаполнитьКнопкиИзбранныхПозиций(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКнопкиПлиток();
	
	ИнтерфейсРМКСлужебныйКлиент.ЗаполнитьКнопкиПлиток(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Интерфейс

&НаКлиенте
Процедура ЗакрытьСтраницуСОшибкойЦены()
	
	Если Не ТекущийТоварЦенаИзКарточки = 0
		И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаИнфоОшибка Тогда
	
		ЗакрытьСтраницуИнфоОшибка(Команды.ЗакрытьСтраницуИнфоОшибка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСтраницуСОшибкойКоличества()
	
	Если Не ТекущийТоварКоличество = 0
		И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаИнфоОшибка Тогда
		
		ЗакрытьСтраницуИнфоОшибка(Команды.ЗакрытьСтраницуИнфоОшибка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДоступностьПолейНайденнойКарты()
	
	ТолькоПросмотр = Элементы.НайденнаяКартаНомер.ТолькоПросмотр;
	
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.НайденнаяКартаТелефон, НЕ ТолькоПросмотр);
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.НайденнаяКартаПочта, НЕ ТолькоПросмотр);
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.НайденнаяКартаФИО, НЕ ТолькоПросмотр);
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.НайденнаяКартаДатаРождения, НЕ ТолькоПросмотр);
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.НайденнаяКартаНомер, НЕ ТолькоПросмотр);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СохранитьДанныеКарты, ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКартинкуВводПокупателя()
	
	ИзменитьКартинкуВводПокупателяБезКонтекста(ЭтотОбъект);
	ДанныеЗаполнены = ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнформацияПокупателя, ДанныеЗаполнены);
		
	КоличествоОтображаемыхПолей = 3;
	СчетчикВключенныхПолей = 0;
	
	Если Не РежимКассыСамообслуживания Тогда
		ВключитьВыключитьГруппуДанныхПокупателя("ГруппаИнформацияПокупателяФИО", "НайденнаяКартаФИО",
			КоличествоОтображаемыхПолей, СчетчикВключенныхПолей);
		ВключитьВыключитьГруппуДанныхПокупателя("ГруппаИнформацияПокупателяТелефон", "НайденнаяКартаТелефон",
			КоличествоОтображаемыхПолей, СчетчикВключенныхПолей);
		ВключитьВыключитьГруппуДанныхПокупателя("ГруппаИнформацияПокупателяСумма", "НайденнаяКартаСуммаПродаж",
			КоличествоОтображаемыхПолей, СчетчикВключенныхПолей);
		ВключитьВыключитьГруппуДанныхПокупателя("ГруппаИнформацияПокупателяДатаРождения", "НайденнаяКартаДатаРождения",
			КоличествоОтображаемыхПолей, СчетчикВключенныхПолей);
		ВключитьВыключитьГруппуДанныхПокупателя("ГруппаИнформацияПокупателяАдресЭлПочты", "НайденнаяКартаПочта",
			КоличествоОтображаемыхПолей, СчетчикВключенныхПолей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидОтображения()
	
	Если Не ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОтображения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНастройкаРМК, "ВидОтображения");
	
	Если ВидОтображения = Перечисления.ВидыОтображения.Стандартный Тогда
		Масштаб = 100;
	ИначеЕсли ВидОтображения = Перечисления.ВидыОтображения.Увеличенный Тогда
		Масштаб = 120;
	ИначеЕсли ВидОтображения = Перечисления.ВидыОтображения.Уменьшенный Тогда
		Масштаб = 80;
	КонецЕсли;
	Если РежимКассыСамообслуживания Или ВидОтображения = Перечисления.ВидыОтображения.Увеличенный Тогда
		ИнтерфейсРМКСлужебный.УвеличитьРазмерКоманд(ЭтотОбъект);
	КонецЕсли;
	ИнтерфейсРМКСлужебный.НастроитьЭлементыПоМасштабу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьКомандИзмененияКоличества(ТекущаяСтрока)
	
	ДоступностьКоманд = Истина;
	
	Если ЭтоУникальнаяМаркировкаСерияИлиПодарок(ТекущаяСтрока) Или ЭтоРаботаСАвансом()
		Или ЭтоВесовойТоварВРежимеКСО(ТекущаяСтрока) Тогда
		
			ДоступностьКоманд = Ложь;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ПоштучноеВыбытие Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияПоштучноеВыбытие, Истина);
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'из %1'"), ТекущаяСтрока.КоличествоВПотребительскойУпаковке);
		Элементы.ДекорацияПоштучноеВыбытие.Заголовок = ТекстЗаголовка;
	Иначе
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияПоштучноеВыбытие, Ложь);
		Элементы.ДекорацияПоштучноеВыбытие.Заголовок = "";
	КонецЕсли;
	
	Если ТекущийЭлемент = Элементы.ТекущийТоварКоличество И Не ДоступностьКоманд Тогда
		ТекущийЭлемент = Элементы.УдалитьТовар;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварУменьшитьКоличество, ДоступностьКоманд);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварУвеличитьКоличество, ДоступностьКоманд);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварКоличество, ДоступностьКоманд);
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоВесовойТоварВРежимеКСО(ТекущаяСтрока)
	
	Возврат ТекущаяСтрока.Весовой И РежимКассыСамообслуживания;
	
КонецФункции

&НаКлиенте
Функция ЭтоНеИзменяемаяМаркируемаяПродукция(ТекущаяСтрока)
	
	Возврат ТекущаяСтрока.НеобходимостьВводаКодаМаркировки И Не ТекущаяСтрока.ПоштучноеВыбытие
			И Не ТекущаяСтрока.ИзменятьКоличествоМаркируемойПродукции;
	
КонецФункции

&НаКлиенте
Функция ЭтоСтрокаУникальнойСерии(ТекущаяСтрока)
	
	Возврат ТекущаяСтрока.ПроверятьЗаполнениеСерий И ТекущаяСтрока.УникальностьСерии;
	
КонецФункции

&НаКлиенте
Функция ЭтоРаботаСАвансом()
	
	Возврат ПриемАванса Или ПриемАвансаПоЗаказу Или ЭтоВозвратАванса;
	
КонецФункции

&НаКлиенте
Функция ЭтоУникальнаяМаркировкаСерияИлиПодарок(ТекущаяСтрока)
	
	Возврат ЭтоНеИзменяемаяМаркируемаяПродукция(ТекущаяСтрока)
		Или ЭтоСтрокаУникальнойСерии(ТекущаяСтрока) Или ТекущаяСтрока.Подарок;
	
КонецФункции

&НаКлиенте
Процедура НастроитьКомандуУказатьСерии(ТекущаяСтрока)
	
	Если ТекущаяСтрока.НеобходимостьВводаСерии Или ТекущаяСтрока.ИспользоватьПартии Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.УказатьСерии, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ТекущийТоварСерияПартия, Истина);
		
		ТекстЗаголовкаСерии = "";
		Если ТекущаяСтрока.НеобходимостьВводаСерии Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.Серия) Тогда
				ТекстЗаголовкаСерии = СтрШаблон(НСтр("ru = 'Серия: %1'"), ТекущаяСтрока.Серия);
			Иначе
				ТекстЗаголовкаСерии = НСтр("ru = 'Серия не выбрана'");
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗаголовкаПартии = "";
		Если ТекущаяСтрока.ИспользоватьПартии Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
				ТекстЗаголовкаПартии = СтрШаблон(НСтр("ru = 'Партия: %1'"), ТекущаяСтрока.Партия);
			Иначе
				ТекстЗаголовкаПартии = НСтр("ru = 'Партия не выбрана'");
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ТекущийТоварСерияПартия.Заголовок = ТекстЗаголовкаСерии + НСтр("ru = ' '") + ТекстЗаголовкаПартии;
		НастроитьКартинкуУказанияСерийИПартий(ТекущаяСтрока);
		
	Иначе
		
		УстановитьВидимостьЭлементаФормы(Элементы.УказатьСерии, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ТекущийТоварСерияПартия, Ложь);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Поставщик) Тогда
		Если ТекущаяСтрока.ЭтоАгентскаяУслуга Тогда
			ЗаголовокПоставщика = НСтр("ru = 'Агент:'");
		Иначе
			ЗаголовокПоставщика = НСтр("ru = 'Комитент:'");
		КонецЕсли;
		Элементы.ТекущийТоварПоставщик.Заголовок = СтрШаблон(" %1 %2", ЗаголовокПоставщика, ТекущаяСтрока.Поставщик);
		УстановитьВидимостьЭлементаФормы(Элементы.ТекущийТоварПоставщик, Истина);
	Иначе
		УстановитьВидимостьЭлементаФормы(Элементы.ТекущийТоварПоставщик, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуСерии(ТекущаяСтрока = Неопределено)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяОперация = "" И РежимКассыСамообслуживания Тогда
		
		ПараметрыТекущейОперации = Новый Структура;
		ПараметрыТекущейОперации.Вставить("ИдентификаторСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
		
		НеобходимоеПраво = "ПравоВыбораСерииРМК";
		ТекущаяОперация = "ВыборСерииРМК";
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
		Если Не Элементы.ГруппаОперации.Видимость Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийТоварИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	
	Элементы.ДекорацияНоменклатураДляСерии.Заголовок = ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборСерии, ТекущаяСтрока.НеобходимостьВводаСерии);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборПартии, ТекущаяСтрока.ИспользоватьПартии);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Серия) Тогда
		ВыборСерии = ТекущаяСтрока.Серия;
	Иначе
		ВыборСерии = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
		ВыборПартии = ТекущаяСтрока.Партия;
	Иначе
		ВыборПартии = Неопределено;
	КонецЕсли;
	
	ЗаполнитьСписокСерийИПартий();
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаСерииИПартии);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Ложь);
	АктивироватьЭлементВыбораСерииПартии(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСериюДляТекущейСтроки()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ВыборСерии) И ТекущаяСтрока.ТипНоменклатуры = ОбщегоНазначенияРМККлиент.ТипНоменклатурыПодарочныйСертификат() Тогда
		Если ПроверитьСериюПодарочногоСертификата(ВыборСерии) Тогда
			ТекстЗаголовка = НСтр("ru = 'Ошибка серии подарочного сертификата.'");
			ТекстОшибки = НСтр("ru = 'Подарочный сертификат с данным номером уже был реализован ранее'");
			ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ТекущаяСтрока.Серия = ВыборСерии;
	ТекущаяСтрока.Партия = ВыборПартии;

	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Истина);
	
	Если ЭтоЗаменаТоваров Тогда
		НастроитьДоступностьПробитьЧек();
	Иначе
		ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
	КонецЕсли;
	
	УточнитьДанныеДляСтрокиПриВыбореСерииИПартии();
	ОбщегоНазначенияРМККлиентСервер.УстановитьНомерКартинкиСтрокиТовара(ТекущаяСтрока);
	НастроитьКомандуУказатьСерии(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура УточнитьДанныеДляСтрокиПриВыбореСерииИПартии()
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Если Не ТекущаяСтрока = Неопределено Тогда
		ОбщегоНазначенияРМКПереопределяемый.УточнитьДанныеДляСтрокиПриВыбореСерииИПартии(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСериюПодарочногоСертификата(Серия)
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ПроверитьСериюПодарочногоСертификата(Серия, ТекущаяНастройкаРМК, Результат);
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементаФормы(Элемент, Видимость)
	Элемент.Видимость = Видимость;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементаФормы(Элемент, Доступность)
	Элемент.Доступность = Доступность;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТолькоПросмотрЭлементаФормы(Элемент, ТолькоПросмотр)
	Элемент.ТолькоПросмотр = ТолькоПросмотр;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуОплата()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, Истина);
	
	ДоступностьЭлементов = (Объект.Товары.Количество() > 0);
	
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, ДоступностьЭлементов);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, ДоступностьЭлементов);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтложитьЧек, ДоступностьЭлементов);
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	ВернутьОсновнуюКоманднуюПанельЧека();
	НастроитьДоступностьПробитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьПробитьЧек()
	
	ЭтоОперацияВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	ЭтоВозвратТовара = ЭтоОперацияВозврат Или ЭтоВозвратБезОснования;
	
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой Тогда
		ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
	КонецЕсли;
	
	СтруктураОрганизацияИСНО = ВыбраннаяОрганизацияИСНО();
	
	ДоступноПробитиеЧека = НЕ ( (ВыбраннаяОрганизация = Неопределено)
		ИЛИ (ПробитыеЧеки.НайтиСтроки(СтруктураОрганизацияИСНО).Количество() > 0) );
		
	ЧекПолностьюОплаченБонусами = (СуммаБонусов = (СуммаБезСкидки - СуммаСкидки) И СуммаБонусов <> 0);
	ОсталосьОплатить = СуммаБезСкидки - СуммаСкидки - СуммаБонусов - СуммаОплаченоНал
		- СуммаОплаченоБН - СуммаОплаченоБезнал - СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса
		- СуммаОплаченоСертификатами - СуммаОплаченоСБП - СуммаОплаченоЮКасса - СуммаОплаченоСертификатамиНСПК
		- СуммаТоваровКЗамене - СуммаОплаченоКредитом; 
		
	ДоступноПробитиеЧека = ДоступноПробитиеЧека
		И (ЧекПолностьюОплаченБонусами ИЛИ (СуммаИтого > 0 И ОсталосьОплатить <= 0 И СуммаИтого >= СуммаТоваровКЗамене));
	
	Если ЭтоВозвратТовара И Объект.ОперацияСДенежнымиСредствами И НЕ ЭтоВозвратАванса Тогда
		Если ОсталосьОплатить < (СуммаБезСкидки - СуммаСкидки - СуммаБонусов) Тогда
			ДоступноПробитиеЧека = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоВозвратТовара И ОжидатьВводМарки Тогда
		ДоступноПробитиеЧека = Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура("Организация", ВыбраннаяОрганизация);
	СтрокиКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор);
	Если СтрокиКассы.Количество() > 0 Тогда
		СтрокаКассы = СтрокиКассы[0];
		Если НЕ СтрокаКассы.Открыта Тогда
			ДоступноПробитиеЧека = Ложь;
		ИначеЕсли СтрокаКассы.ДатаИстеченияСрокаДействия < ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
			ДоступноПробитиеЧека = Ложь;
		КонецЕсли;
	Иначе
		ДоступноПробитиеЧека = Ложь;
	КонецЕсли;
	
	Если ОтложенныйЧекПолностьюОплачен Тогда
		ДоступноПробитиеЧека = Истина;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, ДоступноПробитиеЧека);
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧекНСПК, ДоступноПробитиеЧека И ПредварительноеОдобрениеНСПКПолучено);
	
	ДопускаетсяОплатаКартойСканированиемКода = ИспользоватьОплатуПлатежнымиКартами
		И (ОсталосьОплатить = (СуммаБезСкидки - СуммаСкидки - СуммаБонусов))
		И НЕ (ЭтоВозвратТовара ИЛИ ЭтоВозвратАванса ИЛИ ЭтоЧекКоррекции);

	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, ДопускаетсяОплатаКартойСканированиемКода);
	
	ДопускаетсяОплатаНаличнымиСканированиемКода = ИспользоватьОплатуНаличными
		И (ОсталосьОплатить = (СуммаБезСкидки - СуммаСкидки - СуммаБонусов))
		И НЕ (ЭтоВозвратТовара ИЛИ ЭтоВозвратАванса ИЛИ ЭтоЧекКоррекции);
		
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeНаличные, ДопускаетсяОплатаНаличнымиСканированиемКода);
	
	Если ДоступноПробитиеЧека
		И Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаДанныеПокупателя Тогда
		
		УстановитьФокусНаЭлементеФормыПриВводеОплаты();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыФормы(ТекущаяСтраница, ДоступностьКоманд)
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ТекущаяСтраница);
	
	ЭтоОперацияПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	
	Если ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		
		ЭтоОперацияВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
		ЭтоОперацияСкупка = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииСкупка(Объект.ВидОперации);
		ЭтоОперацияВозвратСкупки = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозвратСкупки(Объект.ВидОперации);
		
		Если ЭтоОперацияПродажа Тогда
			РежимЧека = "Продажа";
			ОпределитьИспользованиеАвтоматическихСкидок();
		ИначеЕсли ЭтоОперацияВозврат Тогда
			РежимЧека = "Возврат";
		ИначеЕсли ЭтоОперацияСкупка Тогда
			РежимЧека = "Скупка";
		ИначеЕсли ЭтоОперацияВозвратСкупки Тогда
			РежимЧека = "ВозвратСкупки";
		Иначе
			РежимЧека = "Продажа";
		КонецЕсли;
		
		ОформитьРежимНовогоЧека(РежимЧека);
		
	КонецЕсли;
	
	ПереключитьВРежимПлитки();
	
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, ДоступностьКоманд);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, ДоступностьКоманд);
	УстановитьДоступностьЭлементаФормы(Элементы.ВвестиКомментарийКЧеку, ДоступностьКоманд);
	
	ДоступностьОтложитьЧек = Истина;
	
	Если ЭтоОплатаРассрочки ИЛИ ПриемАванса ИЛИ ПриемАвансаПоЗаказу ИЛИ ЭтоВозвратАванса ИЛИ ЭтоЗачетАванса Тогда
		ДоступностьОтложитьЧек = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОтложитьЧек, ДоступностьОтложитьЧек);
	ДоступноПрименениеСкидкиНаЧек = ДопускаетсяПрименениеСкидок
		И (Объект.Товары.Количество() > 0)
		И ЭтоОперацияПродажа;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ДоступноПрименениеСкидкиНаЧек);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, ДоступноПрименениеСкидкиНаЧек);
	УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, ЭтоОперацияПродажа И Объект.Товары.Количество() > 0);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, ЭтоОперацияПродажа И Объект.Товары.Количество() > 0);
	
	УстановитьТекущийЭлементПриНезаполненнойЦенеИлиКоличестве();
	НастроитьИнтерфейсРежимаКассыСамообслуживанияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементПриНезаполненнойЦенеИлиКоличестве()
	
	Если РежимПлитки Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Цена = 0 И Элементы.ТекущийТоварЦенаИзКарточки.Доступность Тогда
		ТекущийЭлемент = Элементы.ТекущийТоварЦенаИзКарточки;
	ИначеЕсли ТекущиеДанные.Количество = 0 Тогда
		Если Элементы.ПолучитьВес.Видимость И ТекущиеДанные.Весовой Тогда
			ТекущийЭлемент = Элементы.ПолучитьВес;
		Иначе
			ТекущийЭлемент = Элементы.ТекущийТоварКоличество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущийЭлементКоличество(Форма)
	
	Если Форма.РежимПлитки ИЛИ (НЕ Форма.РежимКассыСамообслуживания И Форма.РежимВыбораПодарка)
		ИЛИ Форма.РежимПоказаСкидок Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаОбщая
		Или Не Форма.Элементы.СтраницаОбщая.Доступность Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ТекущийТоварКоличество.Доступность = Истина;
	Форма.ТекущийЭлемент = Форма.Элементы.ТекущийТоварКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаВозврат()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимПлитки Тогда
		ПереключитьНаРежимПлиткиИзПалитры();
	КонецЕсли;
	
	ПользовательДоЗаменыПрав = Объект.ПользовательБД;
	КассирДоЗаменыПрав = Объект.Кассир;
	
	НеобходимоеПраво = "ПравоЧекНаВозвратРМК";
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		ВыбратьЧекНаВозврат();
	Иначе
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыВРежимеВозврат()
	
	Если НЕ ЭтоЧекКоррекции Тогда
		
		Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаВозврат;
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварПроцент, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварСумма, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.Безнал, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ЗачетАванса, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКредитом, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаБонусами, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЗаменаТоваров, ИспользоватьЗаменуТоваров);
		УстановитьВидимостьЭлементаФормы(Элементы.РаспечататьЗаявлениеНаВозврат, НЕ ЭтоЧекКоррекции);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиРасчетаСкидок, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьРассчитанныеСкидки, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьСкидкиНаЧек, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.СуммаСкидки, Истина);
		ИспользоватьАвтоматическиеСкидки = Ложь;
		
	Иначе
		
		ДанныеКартыЗаполнены = ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект);
		
		Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаКоррекция;
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварПроцент, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварСумма, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ВвестиДанныеПокупателя, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаБонусами, ДанныеКартыЗаполнены);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ОтложитьЧек, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeНаличные, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ОтменитьИзмененияЧека, Истина);
		
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Оплата Цикл
		
		ЭтоОплатаНаличными = ОбщегоНазначенияРМККлиент.ЭтоОплатаНаличными(Строка.ВидОплаты);
		ЭтоОплатаПлатежнойКартой = ОбщегоНазначенияРМККлиент.ЭтоОплатаПлатежнойКартой(Строка.ВидОплаты);
		ЭтоОплатаЗачетАванса = ОбщегоНазначенияРМККлиент.ЭтоОплатаЗачетомАванса(Строка.ВидОплаты);
		ЭтоОплатаБезналичными = ОбщегоНазначенияРМККлиент.ЭтоОплатаБезналичными(Строка.ВидОплаты);
		ЭтоОплатаВРассрочку = ОбщегоНазначенияРМККлиент.ЭтоОплатаВРассрочку(Строка.ВидОплаты);
		ЭтоОплатаВстречнымПредоставлением = ОбщегоНазначенияРМККлиент.ЭтоОплатаВстречнымПредоставлением(Строка.ВидОплаты);
		ЭтоОплатаКредитом = ОбщегоНазначенияРМККлиент.ЭтоОплатаКредитом(Строка.ВидОплаты);
		ЭтоОплатаПодарочнымСертификатом = ОбщегоНазначенияРМККлиент.ЭтоОплатаПодарочнымСертификатом(Строка.ВидОплаты);
		
		Если ЭтоОплатаНаличными Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
			
			СуммаВозврата = Строка(Строка.Сумма);
			ТекстПодсказки = Элементы.СуммаОплаченоНал.Подсказка + СтрШаблон(" (%1 р.)", СуммаВозврата);
			Элементы.СуммаОплаченоНал.Подсказка = ТекстПодсказки;
			
		КонецЕсли;
		
		Если ЭтоОплатаПлатежнойКартой Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
			
			НомерКарты = НСтр("ru = '*'") + Прав(Строка.НомерПлатежнойКарты, 4);
			ТекстПодсказки = Элементы.СуммаОплаченоБН.Подсказка + СтрШаблон(НСтр("ru = ' (%1)'"), НомерКарты);
			
			СуммаВозврата = Строка(Строка.Сумма);
			ТекстПодсказки = Элементы.СуммаОплаченоБН.Подсказка + СтрШаблон(" (%1 р.)", СуммаВозврата);
			
			Элементы.СуммаОплаченоБН.Подсказка = ТекстПодсказки;
			
		КонецЕсли;
		
		Если ЭтоОплатаВРассрочку Тогда
			
			Если Объект.ОперацияСДенежнымиСредствами Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, Истина);
				Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Возврат предоплаты'");
				Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Возврат предоплаты'");
				Элементы.СуммаОплаченоВРассрочку.Доступность = Ложь;
				
			КонецЕсли;
			
			Если Не Объект.ОперацияСДенежнымиСредствами И Не ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, Истина);
				Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Возврат рассрочки'");
				Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Возврат рассрочки'");
				Элементы.СуммаОплаченоВРассрочку.Доступность = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоОплатаЗачетАванса Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ЗачетАванса, Истина);
			
		КонецЕсли;
		
		Если ЭтоОплатаБезналичными Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.Безнал, Истина);
			
		КонецЕсли;
		
		Если ЭтоОплатаКредитом Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКредитом, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаКредитом, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКредитом, Истина);
			
		КонецЕсли;
		
		Если Строка.ВидОплаты = ВидОплатыНСПК
			И ЗначениеЗаполнено(ВидОплатыНСПК) Тогда
			
			ИдентификаторКорзиныНСПК = Строка.СсылочныйНомер;
			НастроитьЭлементыВРежимеПроверкаСертификатаНСПК(Истина, Истина);
			
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПодтверждениеНСПК);
			
			СуммаОплаченоСертификатамиНСПК = Строка.Сумма;
			
			УстановитьЗаголовкиОплаты();
			ПодготовитьПредварительноеОдобрениеНСПК();
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЗаменаТоваров, Ложь);
			
		КонецЕсли;
		
		Если ЭтоОплатаВстречнымПредоставлением Тогда
			ЕстьОплатаВстречнымПредоставлением = Истина;
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
		КонецЕсли;
		
		Если ЭтоОплатаПодарочнымСертификатом Тогда
			
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ОперацияСДенежнымиСредствами И НЕ ЭтоВозвратАванса Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаПредоплата, Истина);
		Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Возврат предоплаты'");
		Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Возврат предоплаты'");
		
	КонецЕсли;
	
	Если Объект.Оплата.Количество() = 0 Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
		
		Если ИспользоватьОплатуПлатежнымиКартами Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьВидимостьОплатыQRКодом();
	НастроитьВидимостьЗапросаБалансаСертификата();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыВРежимеПродажа()
	
	Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаПродажа;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварПроцент, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварСумма, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКредитом, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаБонусами, Истина); 
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЗаменаТоваров, ЭтоЗаменаТоваров);
	
	НастроитьВидимостьОплатыQRКодом();
	ОпределитьИспользованиеАвтоматическихСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаПродажа()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	ОформитьРежимНовогоЧека("Продажа");
	
	НачинатьНовыйЧекВРежимеСкупка = Ложь;
	
	НастроитьЭлементыВРежимеПродажа();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьСтроки()
	
	Если Объект.Товары.Количество() > 0 Тогда
		ИдентификаторПервойСтрокиКорзины = Объект.Товары[0].ПолучитьИдентификатор();
		Если Элементы.Товары.ТекущаяСтрока = ИдентификаторПервойСтрокиКорзины Тогда
			ТоварыПриАктивизацииСтроки(Элементы.Товары);
		Иначе
			Элементы.Товары.ТекущаяСтрока = ИдентификаторПервойСтрокиКорзины;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытыСообщенияОбОшибках
		= (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаИнфоОшибка);
	
	Если НЕ ОткрытыСообщенияОбОшибках Тогда
		УстановитьФокусНаТовареТребующемВводаМарки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоТекущемуПользователю()
	
	СтраницаДляОтображения = Элементы.СтраницаВводКассира;
	ТорговыйОбъектДляВхода = Объект.ТорговыйОбъект;
	
	Если ЗначениеЗаполнено(Объект.ПользовательБД) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Кассир) Тогда
			Объект.Кассир = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПользовательБД, "ФизическоеЛицо");
			Если ЗначениеЗаполнено(Объект.Кассир) Тогда
				КассирДляВхода = Объект.Кассир;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		ФизЛицоПользователя = Неопределено;
		ОбщегоНазначенияРМКПереопределяемый.ОпределитьФизЛицоПользователя(ФизЛицоПользователя, ЭтотОбъект);
		
		Если ЗначениеЗаполнено(ФизЛицоПользователя) Тогда
			
			Объект.Кассир = ФизЛицоПользователя;
			Объект.ПользовательБД = Пользователи.ТекущийПользователь();
			КассирДляВхода = Объект.Кассир;
			
			Если ПараметрыОткрытияФормы = Неопределено Тогда
				ПараметрыОткрытияФормы = Новый Структура();
			КонецЕсли;
			
			ПараметрыОткрытияФормы.Вставить("ПроверитьКассовуюСмену");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТорговыйОбъектДляВхода) И ЗначениеЗаполнено(КассирДляВхода) Тогда
		СтраницаДляОтображения = Элементы.СтраницаПустая;
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(СтраницаДляОтображения);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
		Если Не ЗначениеЗаполнено(ТорговыйОбъектДляВхода) Тогда
			ТекущийЭлемент = Элементы.ТорговыйОбъектДляВхода;
		ИначеЕсли Не ЗначениеЗаполнено(КассирДляВхода) Тогда
			ТекущийЭлемент = Элементы.КассирДляВхода;
		Иначе
			ТекущийЭлемент = Элементы.КодКассира;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТаблицуРолейПользователя();
	НастроитьФормуВСоответствииСПравамиПользователя();
	НастроитьВидимостьГруппыДанныеДляТекущейСтроки();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьГруппыДанныеДляТекущейСтроки()
	
	Если Не ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = "РазрешитьВыборПродавца, РазрешитьВыборСклада, РазрешитьВыборЯчейки";
	ДанныеНастройкиРМК = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяНастройкаРМК, СписокРеквизитов);
	
	Если ДанныеНастройкиРМК.РазрешитьВыборПродавца ИЛИ ДанныеНастройкиРМК.РазрешитьВыборСклада
		ИЛИ ДанныеНастройкиРМК.РазрешитьВыборЯчейки Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДанныеДляТекущейСтроки, Истина);
	КонецЕсли;
	
	Если ДанныеНастройкиРМК.РазрешитьВыборПродавца Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницыВыборПродавца, Истина);
	КонецЕсли;
	
	Если ДанныеНастройкиРМК.РазрешитьВыборСклада Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницыВыборСклада, Истина);
	КонецЕсли;
	
	Если ДанныеНастройкиРМК.РазрешитьВыборЯчейки Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницыВыборЯчейки, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуВСоответствииСПравамиПользователя()
	
	ПравоИзменятьЦенуРМК = НЕ (СписокРолейПользователя.НайтиПоЗначению("ПравоИзменятьЦенуРМК") = Неопределено);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, ПравоИзменятьЦенуРМК);
	
	ОбщегоНазначенияРМКПереопределяемый.УстановитьЗначениеПримененияРучнойСкидки(ЭтотОбъект);
	
	ДоступныРучныеСкидки = ДопускаетсяПрименениеСкидок И Объект.Товары.Количество() > 0;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ДоступныРучныеСкидки);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, ДоступныРучныеСкидки);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьНачальнуюСтраницу(НоваяСтраница)
	
	Если НЕ ЗначениеЗаполнено(Объект.Кассир) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборКассыККМ Тогда
		Если Объект.Товары.Количество() > 0 Тогда
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
			УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Истина);
		Иначе
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(НоваяСтраница);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ НоваяСтраница = Элементы.СтраницаВводКассира Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьЗаменитьПраваКассира(НеобходимоеПраво)
	
	КодДляЗаменыПрав = НСтр("ru = ''");
	ТекущаяОперация = "";
	
	ТекстЗаменыПравДополнительный =
		?(РежимКассыСамообслуживания, "", НСтр("ru='и отсканируйте его карту или введите персональный код'"));
		
	Если ЗначениеЗаполнено(НаименованиеПользователяПриЗапросеПрав) Тогда
		НаправлениеОбращения = НаименованиеПользователяПриЗапросеПрав;
	Иначе
		НаправлениеОбращения = ?(РежимКассыСамообслуживания, НСтр("ru='сотруднику магазина'"), НСтр("ru='администратору'"));
	КонецЕсли;
	
	Если НеобходимоеПраво = "ПравоУдалитьСтрокуРМК" Тогда
		
		ТекущаяОперация = "УдалитьСтрокуРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для удаления товара обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоУдалитьЧекРМК" Тогда
		
		ТекущаяОперация = "УдалитьЧекРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для удаления чека обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоОтложитьЧекРМК" Тогда
		
		ТекущаяОперация = "ОтложитьЧекРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Чтобы отложить чек обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоПродолжитьЧекРМК" Тогда
		
		ТекущаяОперация = "ПродолжитьЧекРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Чтобы продолжить чек обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоЗавершениеРаботыРМК" Тогда
		
		ТекущаяОперация = "ЗавершениеРаботыРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для завершения работы обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоЧекНаВозвратРМК" Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
		Элементы.ДекорацияЗаголовокЗаменаПрав.Заголовок =
			СтрШаблон(НСтр("ru='Для возврата обратитесь к %1'"), НаправлениеОбращения);
		Элементы.ДекорацияТекстЗаменаПрав.Заголовок = ТекстЗаменыПравДополнительный;
		Элементы.ДекорацияЗаголовокВводКассира.Заголовок =
			СтрШаблон(НСтр("ru='Для возврата обратитесь к %1 %2'"), НаправлениеОбращения, ТекстЗаменыПравДополнительный);
		Элементы.ЗавершитьРаботу.Заголовок = НСтр("ru='Отмена'");
		Элементы.Войти.Заголовок = НСтр("ru='Продолжить'");
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПараметрыДляВхода, Ложь);
		КассирДляВхода = Неопределено;
		КодКассира = "";
		ТекущаяОперация = "ЧекНаВозвратРМК";
		
	ИначеЕсли НеобходимоеПраво = "ПравоЧекКоррекцииРМК" Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
		Элементы.ДекорацияЗаголовокЗаменаПрав.Заголовок = 
			СтрШаблон(НСтр("ru='Для коррекции обратитесь к %1'"), НаправлениеОбращения);
		Элементы.ДекорацияТекстЗаменаПрав.Заголовок = ТекстЗаменыПравДополнительный;
		Элементы.ДекорацияЗаголовокВводКассира.Заголовок =
			СтрШаблон(НСтр("ru='Для коррекции обратитесь к %1 %2'"), НаправлениеОбращения, ТекстЗаменыПравДополнительный);
		Элементы.ЗавершитьРаботу.Заголовок = НСтр("ru='Отмена'");
		Элементы.Войти.Заголовок = НСтр("ru='Продолжить'");
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПараметрыДляВхода, Ложь);
		КассирДляВхода = Неопределено;
		КодКассира = "";
		ТекущаяОперация = "ЧекКоррекцииРМК";
		
	ИначеЕсли НеобходимоеПраво = "ПравоРедактироватьКартуРМК" Тогда
		
		ТекущаяОперация = "РедактироватьКартуРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для редактирования данных карты обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоВыбораПриПоискеПоШтрихкодуРМК" Тогда
		
		ТекущаяОперация = "ВыборПриПоискеПоШтрихкодуРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для добавления товара обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоПодтвержденияВозрастаРМК" Тогда
		
		ТекущаяОперация = "ПодтверждениеВозрастаРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Подтверждение возраста. Обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоОбработкиЗапретаПродажРМК" Тогда
		
		ТекущаяОперация = "ОбработкаЗапретаПродажРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Отложите товар и обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоВыбораСерииРМК" Тогда
		
		ТекущаяОперация = "ВыборСерииРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для выбора серии обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоРучноеПодтверждениеМаркиРМК" Тогда
		
		ТекущаяОперация = "РучноеПодтверждениеМаркиРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Ошибка при проверке марки. Обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоОткрытиеСтраницыОшибкиРМК" Тогда
		
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='%1 Обратитесь к %2'"),
			ПараметрыИнфоОшибки.ТекстЗаголовка, НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ВводВесаТовара" Тогда
		
		ТекущаяОперация = "ВводВесаТовара";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для ввода веса обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ИзменениеКоличестваВМеньшуюСторону"
			Или НеобходимоеПраво = "УменьшениеКоличестваНаЕдиницу" Тогда
		
		ТекущаяОперация = НеобходимоеПраво;
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для уменьшения количества товара обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПослеЗаменыПрав()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если Не ЗначениеЗаполнено(Объект.Кассир) Тогда
		КодДляЗаменыПрав = "";
		ТекущийЭлемент = Элементы.КодДляЗаменыПрав;
		Возврат;
	КонецЕсли;
	
	Если Не ТекущаяОперация = "" И Не ТекущаяОперацияВыполнена Тогда
		ЗаголовокСообщения = НСтр("ru='Операция не выполнена.'");
		ТекстПояснения = НСтр("ru='Нет необходимых прав.'");
		КартинкаСообщения = БиблиотекаКартинок.Ошибка32;
		ПоказатьОповещениеПользователя(ЗаголовокСообщения, ,ТекстПояснения , КартинкаСообщения);
	КонецЕсли;
	
	НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(Истина);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	
	Если ТекущаяОперация = "ЧекНаВозвратРМК" Тогда
		
		Если ТекущаяОперацияВыполнена Тогда
			ОткрытьОбщуюСтраницу(Истина);
			ВыбратьЧекНаВозврат();
		Иначе
			ТекущаяОперация = "";
			ОткрытьОбщуюСтраницу();
		КонецЕсли;
		СформироватьЗаголовокВводКассира();
		СформироватьЗаголовок();
		
	ИначеЕсли ТекущаяОперация = "ЧекКоррекцииРМК" Тогда
		
		Если ТекущаяОперацияВыполнена Тогда
			ОткрытьОбщуюСтраницу(Истина);
			ВыбратьЧекКоррекции();
		Иначе
			ТекущаяОперация = "";
			ОткрытьОбщуюСтраницу();
		КонецЕсли;
		СформироватьЗаголовокВводКассира();
		СформироватьЗаголовок();
		
	ИначеЕсли ТекущаяОперация = "УдалитьСтрокуРМК" И ТекущаяОперацияВыполнена Тогда
		
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		ПересчитатьСуммыПослеУдаленияСтроки();
		
	ИначеЕсли ТекущаяОперация = "УдалитьЧекРМК" И ТекущаяОперацияВыполнена Тогда
		
		ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
		ПлиткаДомойКлиент();
		
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		НастроитьЭлементыФормы(Элементы.СтраницаПустая, Ложь);
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		НастроитьЭлементыВРежимеПродажа();
		РазблокироватьОбъектСервераЛояльности("clientbonuses");
		СписатьРазблокироватьПодарочныеСертификаты();
		ОчиститьДанныеПромокодов(Истина);
		ПривестиПараметрыПробитияЧекаКЗначениямПоУмолчанию();
		
	ИначеЕсли ТекущаяОперация = "ОтложитьЧекРМК" И ТекущаяОперацияВыполнена Тогда
		
		ОтложитьЧекКлиент();
		
	ИначеЕсли ТекущаяОперация = "ПродолжитьЧекРМК" И ТекущаяОперацияВыполнена Тогда
		
		ОтложенныеЧекиКлиент();
		
	ИначеЕсли ТекущаяОперация = "ЗавершениеРаботыРМК"  И ТекущаяОперацияВыполнена Тогда
		
		ЗакрытьПриложениеПриОшибке(Истина);
		
	ИначеЕсли ТекущаяОперация = "РедактироватьКартуРМК" И ТекущаяОперацияВыполнена Тогда
		
		ПоказатьПанельВводаДанныхПокупателя();
		
	ИначеЕсли ТекущаяОперация = "ВыборПриПоискеПоШтрихкодуРМК" И ТекущаяОперацияВыполнена Тогда
		
		Если Не ПараметрыТекущейОперации = Неопределено Тогда
			ОбработатьДанныеПоКодуКлиент(ПараметрыТекущейОперации.СтруктураПараметровКлиента,
				ПараметрыТекущейОперации.ПараметрыДляОбработкиШтрихкода);
				
			ОбработатьШтрихкодЗавершение(ПараметрыТекущейОперации.ПараметрыДляОбработкиШтрихкода);
			ПараметрыТекущейОперации = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ПодтверждениеВозрастаРМК" И ТекущаяОперацияВыполнена Тогда
		
		ПереключитьНаСтраницуПодтвержденияВозраста();
		
	ИначеЕсли ТекущаяОперация = "ОбработкаЗапретаПродажРМК" И ТекущаяОперацияВыполнена Тогда
		
		Если Не ПараметрыТекущейОперации = Неопределено Тогда
			ОткрытьСтраницуЗапретаПродажиПоВремени(ПараметрыТекущейОперации.ВидНоменклатуры,
				ПараметрыТекущейОперации.ВремяНачала, ПараметрыТекущейОперации.ВремяОкончания);
			ПараметрыТекущейОперации = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ВыборСерииРМК" И ТекущаяОперацияВыполнена Тогда
		
		Если Не ПараметрыТекущейОперации = Неопределено Тогда
			СтрокаПоИД = Объект.Товары.НайтиПоИдентификатору(ПараметрыТекущейОперации.ИдентификаторСтроки);
			ОткрытьСтраницуСерии(СтрокаПоИД);
			ПараметрыТекущейОперации = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "РучноеПодтверждениеМаркиРМК" И ТекущаяОперацияВыполнена Тогда
		
		Если Не ПараметрыТекущейОперации = Неопределено Тогда
			ОбработатьОшибкуПроверкиМарки(ПараметрыТекущейОперации.Контекст, Элементы[ПараметрыТекущейОперации.СтраницаДиалога]);
			ПараметрыТекущейОперации = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ВводВесаТовара" Тогда
		
		НачатьВводВесаВРежимеКСО();
		
	ИначеЕсли ТекущаяОперация = "ПоказатьВыход" Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.УдалитьЧек, Истина);
		
	ИначеЕсли ТекущаяОперация = "ИзменениеКоличестваВМеньшуюСторону" Тогда
		
		ОбработатьИзменениеКоличестваТовара(ТекущаяСтрокаРедактированияКоличества);
		СохранитьРазрешениеНаУменьшениеКоличестваТекущейСтроки(ТекущаяСтрокаРедактированияКоличества);
		
	ИначеЕсли ТекущаяОперация = "УменьшениеКоличестваНаЕдиницу" Тогда
		
		ДополнительныеПараметры = Новый Структура("УвеличитьКоличество", Ложь);
		ПересчитатьИзменениеКоличестваСВопросомОСкидках(ДополнительныеПараметры);
		СохранитьРазрешениеНаУменьшениеКоличестваТекущейСтроки();
		
	ИначеЕсли Не ПараметрыИнфоОшибки = Неопределено Тогда
		
		ОткрытьСтраницуИнфоОшибка(ПараметрыИнфоОшибки.ТекстЗаголовка,
			ПараметрыИнфоОшибки.ТекстОшибки, ПараметрыИнфоОшибки.ПараметрыОшибки);
		ПараметрыИнфоОшибки = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	ТекущаяОперация = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбщуюСтраницу(ЭтоВозврат = Ложь)
	
	НоваяСтраница = Элементы.СтраницаПустая;
	
	Если Объект.Товары.Количество() > 0 Тогда
		НоваяСтраница = Элементы.СтраницаОбщая;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборКассыККМ Тогда
		НоваяСтраница = Элементы.СтраницаВыборКассыККМ;
	ИначеЕсли РежимПлитки Тогда
		НоваяСтраница = Элементы.СтраницаОбщая;
	КонецЕсли;
	
	Если ЭтоВозврат Тогда
		ОформитьРежимНовогоЧека("Возврат");
	КонецЕсли;
	
	НастроитьФормуПоТекущемуПользователю();
	НастроитьНачальнуюСтраницу(НоваяСтраница);
	
	Если ПереключатьсяВРежимПлитки И Не ЭтоВозврат И Не РежимПлитки Тогда
		ПереключитьВРежимПлитки();
	КонецЕсли;
	
	ОпределитьИспользованиеАвтоматическихСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокВводКассира()
	
	КодКассира = НСтр("ru = ''");
	
	Если ЗначениеЗаполнено(ОсобыйЗаголовокВводаКассира) Тогда
		Элементы.ДекорацияЗаголовокВводКассира.Заголовок = ОсобыйЗаголовокВводаКассира;
	Иначе
		
		Если Не ТекущаяОперация = "ЧекНаВозвратРМК" И Не ТекущаяОперация = "ЧекКоррекцииРМК" Тогда
			
			Элементы.ЗавершитьРаботу.Заголовок = НСтр("ru='Отмена'");
			Элементы.Войти.Заголовок = НСтр("ru='Войти'");
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПараметрыДляВхода, Истина);
			Элементы.ДекорацияЗаголовокВводКассира.Заголовок =
				НСтр("ru='Для входа отсканируйте персональный код или задействуйте магнитную карту'");
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуВРежимВозвратБезЧека()
	
	НастроитьЭлементыФормы(Элементы.СтраницаПустая, Истина);
	
	Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаВозврат;
	
	ПравоИзменятьЦену = НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоИзменятьЦенуРМК") = Неопределено;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, ПравоИзменятьЦену);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиРасчетаСкидок, Ложь);
	ИспользоватьАвтоматическиеСкидки = Ложь;
	
	ЭтоВозвратБезОснования = Истина;
	
	НастроитьВидимостьОплатыQRКодом();
	НастроитьВидимостьЗапросаБалансаСертификата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуСозданиеКарты()

	ТекстДекорации = "";
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(ЭтотОбъект) Тогда
		ТекстДекорации = НСтр("ru = 'Чтобы создать новую карту, отмените ввод текущей карты.'");
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ОсновнаяГруппаСозданиеКарты);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПустаяДополнительнаяГруппа);
	НастроитьЦифровуюПанель();
	ИнтерфейсРМКСлужебныйКлиент.УстановитьТекстДекорацииОПерсональныхДанных(Элементы.ДекорацияТекстОПерсональныхДанных,
		ТекстДекорации);
	УстановитьДоступностьГруппыСозданияРеквизитов(Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.СоздатьКарту, Истина);
	Если ПолеВводаСозданияКартыДоступноИВидимо(Элементы.НоваяКартаНомер) Тогда
		ТекущийЭлемент = Элементы.НоваяКартаНомер;
	Иначе
		ТекущийЭлемент = Элементы.НоваяКартаТелефон;
	КонецЕсли;
	ЭлементВводаДанныхПокупателя = ТекущийЭлемент;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуПоискКарты(ДанныеЗаполнены = Ложь)
	
	КнопкаПоискаДоступна = Ложь;
	Если ДанныеЗаполнены Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ОсновнаяГруппаКартаНайдена);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ДополнительнаяГруппаКартаНайдена);
		УбратьОтображениеПодсказкиОплатитьБонусами();
		ЭлементВводаДанныхПокупателя = Неопределено;
	Иначе
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПоискКарты);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПустаяДополнительнаяГруппа);
		КнопкаПоискаДоступна = Истина;
		ТекущийЭлемент = Элементы.СтрокаПоискаКарты;
		ЭлементВводаДанныхПокупателя = ТекущийЭлемент;
	КонецЕсли;
	НастроитьЦифровуюПанель();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуОтправкаЧека()
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаОтправкаЧека);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПустаяДополнительнаяГруппа);
	НастроитьЦифровуюПанель();
	ТекущийЭлемент = Элементы.ОтправкаЧекаТелефон;
	ЭлементВводаДанныхПокупателя = ТекущийЭлемент;
	
	ИнтерфейсРМКСлужебныйКлиент.НастроитьСвойстваКнопкиПробитьИОтправить(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВЧекеНажатие()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
		= Элементы.ГруппаНайтиВЧеке Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево,
			(Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект)));
		ПредыдущийСлой = Элементы.ОбластьОперативногоУправленияЧеком;
		Если Не (ПредыдущийСлойДоДанныхПокупателя = Неопределено
				Или ПредыдущийСлойДоДанныхПокупателя = Элементы.ГруппаНайтиВЧеке) Тогда
				
			ПредыдущийСлой = ПредыдущийСлойДоДанныхПокупателя;
			
		КонецЕсли;
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, ПредыдущийСлой);
		
	Иначе
		
		ПредыдущийСлойДоДанныхПокупателя
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаНайтиВЧеке);
		ТекущийЭлемент = Элементы.ШтрихкодДляПоиска;
		ШтрихкодДляПоиска = НСтр("ru = ''");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка = "", ТекстОшибки = "", ПараметрыОшибки = Неопределено)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если Не Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	КонецЕсли;
	
	ОтобразитьКнопкиДействийСЧеком = Ложь;
	ОтобразитьКнопкуОткрытияСмены = Ложь;
	ОтобразитьКнопкуЗакрытияСмены = Ложь; 
	ОтобразитьКнопкуПовторногоПробития = Ложь;
	ОтобразитьКнопкуОтменыПлатежа = Ложь;
	ОтобразитьКнопкуОтмены = Истина;
	НеобходимоСторно = Ложь;
	НеВызыватьЗаменуПрав = Ложь;
	ОтобразитьГруппуОтчетОбОшибке = Истина;
	
	Если Не ПараметрыОшибки = Неопределено Тогда
		
		НеВызыватьЗаменуПрав = ПараметрыОшибки.Свойство("НеВызыватьЗаменуПрав")
			И ПараметрыОшибки.НеВызыватьЗаменуПрав;
			
		ОтобразитьКнопкиДействийСЧеком = ПараметрыОшибки.Свойство("ОтобразитьКнопкиДействияСЧеком")
			И ПараметрыОшибки.ОтобразитьКнопкиДействияСЧеком;
		
		ОтобразитьКнопкуОткрытияСмены = ПараметрыОшибки.Свойство("ОтобразитьКнопкуОткрытияСмены")
			И ПараметрыОшибки.ОтобразитьКнопкуОткрытияСмены;
		
		ОтобразитьКнопкуЗакрытияСмены = ПараметрыОшибки.Свойство("ОтобразитьКнопкуЗакрытияСмены")
			И ПараметрыОшибки.ОтобразитьКнопкуЗакрытияСмены;
			
		НеобходимоСторно = ПараметрыОшибки.Свойство("НеобходимоСторно") И ПараметрыОшибки.НеобходимоСторно;
			
		Если НеобходимоСторно Тогда
			ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
			Если ЭтоПродажа И (ТранзакцияПоКартеЗавершена ИЛИ ТипОплаты = "СБП") Тогда
				ОтобразитьКнопкуОтмены = Ложь;
				ОтобразитьКнопкуПовторногоПробития = Истина;
				ОтобразитьКнопкуОтменыПлатежа = Истина;
				ОтобразитьКнопкиДействийСЧеком = Истина;
			ИначеЕсли Не ЭтоПродажа И ТранзакцияПоКартеЗавершена ИЛИ ТипОплаты = "СБП" Тогда
				ОтобразитьКнопкуОтмены = Ложь;
				ОтобразитьКнопкуПовторногоПробития = Истина;
				ОтобразитьКнопкуОтменыПлатежа = Ложь;
				ОтобразитьКнопкиДействийСЧеком = Истина;
			ИначеЕсли ТипОплаты = "ЮКасса" Тогда
				ОтобразитьКнопкуОтмены = Ложь;
				ОтобразитьКнопкуПовторногоПробития = Истина;
				ОтобразитьКнопкуОтменыПлатежа = Ложь;
				ОтобразитьКнопкиДействийСЧеком = Истина;
			Иначе
				ОтобразитьКнопкуОтмены = Ложь;
				ОтобразитьКнопкуПовторногоПробития = Истина;
				ОтобразитьКнопкуОтменыПлатежа = Истина;
				ОтобразитьКнопкиДействийСЧеком = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыОшибки.Свойство("ОшибкаФормированияИсходныхДанных") И ПараметрыОшибки.ОшибкаФормированияИсходныхДанных Тогда
			ОтобразитьКнопкуПовторногоПробития = Ложь;
		КонецЕсли;
		
		Если ПараметрыОшибки.Свойство("ЭтоПредупреждение") И ПараметрыОшибки.ЭтоПредупреждение Тогда
			ОтобразитьГруппуОтчетОбОшибке = Ложь;
		Иначе
			#Если Не ВебКлиент Тогда
				Сигнал();
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ОткрытьСменуИзОшибки.Видимость = ОтобразитьКнопкуОткрытияСмены;
	Элементы.ЗакрытьСменуИзОшибки.Видимость = ОтобразитьКнопкуЗакрытияСмены;
	Элементы.ГруппаИнфоОшибкаДействияСЧеком.Видимость = ОтобразитьКнопкиДействийСЧеком;
	Элементы.ЗакрытьСтраницуИнфоОшибка.Видимость = ОтобразитьКнопкуОтмены;
	Элементы.ВыполнитьОтменуОплаты.Видимость = ОтобразитьКнопкуОтменыПлатежа;
	Элементы.Предупреждение.Видимость = НЕ ОтобразитьГруппуОтчетОбОшибке;
	Элементы.ГруппаИнфоОшибкаОтчет.Видимость = (ОтобразитьГруппуОтчетОбОшибке И Не РежимКассыСамообслуживания);
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаИнфоОшибка);
	
	Элементы.ТекстПредупреждениеЗаголовок.Заголовок = ТекстЗаголовка;
	Элементы.ТекстПредупреждениеОшибка.Заголовок = ТекстОшибки;
	
	Если ОтобразитьКнопкуПовторногоПробития Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандПовторногоДействия);
	КонецЕсли;
	
	Если ВертикальнаяОриентация И ОтобразитьКнопкиДействийСЧеком Тогда 
		ВиденПовторОперацииФискализации = Элементы.ПовторитьОперациюПакетнойФискализации.Видимость;
		Если ВиденПовторОперацииФискализации Или ОтобразитьКнопкуОтменыПлатежа Тогда
			Элементы.ГруппаИнфоОшибкаДействияСЧекомНиз.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Иначе
			Элементы.ГруппаИнфоОшибкаДействияСЧекомНиз.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		КонецЕсли;
	КонецЕсли;
	
	ВызовСотрудника = Ложь;
	Если РежимКассыСамообслуживания И ПараметрыИнфоОшибки = Неопределено И Не НеВызыватьЗаменуПрав Тогда
		
		ПараметрыИнфоОшибки = Новый Структура;
		ПараметрыИнфоОшибки.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ПараметрыИнфоОшибки.Вставить("ТекстОшибки", ТекстОшибки);
		ПараметрыИнфоОшибки.Вставить("ПараметрыОшибки", ПараметрыОшибки);
		ПодключитьОбработчикОжидания("ОткрытьСтраницуЗаменыПравПередОшибкой", 0.1, Истина);
		ВызовСотрудника = Истина;
		
	КонецЕсли;
	
	Если ОтобразитьГруппуОтчетОбОшибке Или ВызовСотрудника Тогда
		
		ВывестиСветовойСигналОбОшибкеНаДисплей();
		
	КонецЕсли;
	
	Если ОткрытаСтраницаПоискаТовара() Тогда
		ЗакрытьПоискТоваровКлиент();
	КонецЕсли;
	
	ЗаблокироватьПробитиеЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуЗаменыПравПередОшибкой()
	
	НеобходимоеПраво = "ПравоОткрытиеСтраницыОшибкиРМК";
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуОтменаОплатыПоКарте(ТекстОшибки)
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Ложь);
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаОтменаОплатыПоКарте);
	Элементы.ДекорацияНадписьЭквайрингОшибка.Заголовок =
		СтрЗаменить(Элементы.ДекорацияНадписьЭквайрингОшибка.Заголовок, "%1", ТекстОшибки);
	Элементы.ДекорацияНадписьЭквайрингОшибка.Заголовок =
		СтрЗаменить(Элементы.ДекорацияНадписьЭквайрингОшибка.Заголовок, "%2", Строка(СуммаОплаченоБН));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуОтправкиЭлектронногоЧека()
	
	Доступность = Истина;
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьГруппДанныхПокупателя(ЭтотОбъект);
	ПоказатьПанельВводаДанныхПокупателя();
	РежимПанелиДанныеПокупателя = 2;
	ПереключитьНаСтраницуОтправкаЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуВнесение()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		
		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
		Возврат;
		
	КонецЕсли;
	
	Если ТаблицаКассККМОрганизаций.Количество() > 1 И ТекущаяОперация = "" Тогда
		
		ТекущаяОперация = "Внесение";
		ПереключитьНаСтраницуВыбораКассыККМ();
		Возврат;
		
	КонецЕсли;
	
	ТекущаяОперация = "";
	ВывестиИнформациюНаДисплейПокупателя("Сервис");
	СуммаВнесение = 0;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаВнесение);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВнесение);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницыЛево, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфоВнесение, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницыЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	
	ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуВнесенияДенежныхСредств()
	
	Если Не РаботаСЧекомЗавершена() Тогда

		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
		Возврат;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияРМККлиент.ИспользоватьСтандартныйИнтерфейсВнесения() Тогда
		ОткрытьСтраницуВнесение();
	Иначе
		ОбщегоНазначенияРМККлиентПереопределяемый.ВыполнитьОперациюВнесение(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуВыемкиДенежныхСредств()
	
	Если Не РаботаСЧекомЗавершена() Тогда

		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
		Возврат;
		
	КонецЕсли;
	
	Если ТаблицаКассККМОрганизаций.Количество() > 1 И ТекущаяОперация = "" Тогда
		
		ТекущаяОперация = "Выемка";
		ПереключитьНаСтраницуВыбораКассыККМ();
		Возврат;
		
	КонецЕсли;
	
	ТекущаяОперация = "";
	ВывестиИнформациюНаДисплейПокупателя("Сервис");
	СуммаВыемка = 0;
	ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьСуммуВыемки(ЭтотОбъект, СуммаВыемка);
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаВыемка);	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВыемка);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницыЛево, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфоВыемка, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницыЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	
	ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");

КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуДляРучногоСопоставленияТовара(ПараметрыШтрихкода)

	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ОжидатьВводМарки И Лев(ПараметрыШтрихкода.EAN, 2) = "29" Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
		
			ДанныеДляРучногоСопоставления = ПараметрыШтрихкода;
			
			Отказ = Ложь;
			СопоставитьСТекущейСтрокой(Отказ);
			Если Отказ Тогда
				ДанныеДляРучногоСопоставления = Неопределено;
				Возврат;
			КонецЕсли;
			
			КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
			ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, ТекущаяСтрока);
			ЭтоОбработкаСопоставленияТовара = Истина;
			КонтекстПроверкиКонтрольнойМарки.ЭтоОбработкаСопоставленияТовара = ЭтоОбработкаСопоставленияТовара;
			ЗавершитьВводШтрихкодаМаркаВведена(КонтекстПроверкиКонтрольнойМарки);
			ДанныеДляРучногоСопоставления = Неопределено;
			Возврат;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	
	ШтрихкодУрезанный = Лев(ПараметрыШтрихкода.Штрихкод, 25) + ?(СтрДлина(ПараметрыШтрихкода.Штрихкод) > 25, "...", "");
	Если ПараметрыШтрихкода.Свойство("ТоварНеНайденПоМарке") Тогда
		ТекстЗаголовкаСопоставления = СтрШаблон(НСтр("ru = 'Не найден товар по марке: %1'"), ШтрихкодУрезанный);
	ИначеЕсли ПараметрыШтрихкода.Свойство("ПодтвердитьВыборАлкоголя") Тогда
		ТекстЗаголовкаСопоставления = СтрШаблон(НСтр("ru = 'Не найден товар по марке: %1'"), ШтрихкодУрезанный);
	Иначе
		ТекстЗаголовкаСопоставления = СтрШаблон(НСтр("ru = 'Не найден товар по штрихкоду: %1'"), ШтрихкодУрезанный);
	КонецЕсли;
	
	Если ОжидатьВводМарки Тогда
		ТекстСопоставления = НСтр("ru = 'Сопоставить штрихкод с текущим товаром?'");
		ТекстКнопки = НСтр("ru = 'Сопоставить'");
	Иначе
		ТекстСопоставления = НСтр("ru = 'Сопоставить штрихкод с товаром из каталога?'");
		ТекстКнопки = НСтр("ru = 'Каталог'");
	КонецЕсли;
		
	Элементы.ДекорацияЗаголовокСопоставлениеТовара.Заголовок = ТекстЗаголовкаСопоставления;
	Элементы.ДекорацияТекстСопоставлениеТовара.Заголовок = ТекстСопоставления;
	Элементы.СопоставитьТовар.Заголовок = ТекстКнопки;
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаРучноеСопоставлениеТовара);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	
	ДанныеДляРучногоСопоставления = ПараметрыШтрихкода;
	ТекущийЭлемент = Элементы.СопоставитьТовар;
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьПравильностьНоменклатуры(ПараметрыШтрихкода)
	
	Если НЕ ПараметрыШтрихкода = Неопределено И ЕстьСвойство(ПараметрыШтрихкода, "ТекущаяНоменклатура") Тогда
		
		ОповещениеЗавершения = Новый ОписаниеОповещения("УточнитьПравильностьНоменклатурыЗавершение",
				ЭтотОбъект, ПараметрыШтрихкода);
		
		НужноПодтверждениеМаркиАлкоголя = Истина;
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьПодтверждениеМаркиАлкоголя(НужноПодтверждениеМаркиАлкоголя);
		
		Если РежимКассыСамообслуживания Тогда
			НужноПодтверждениеМаркиАлкоголя = Ложь;
		КонецЕсли;
		
		Если НужноПодтверждениеМаркиАлкоголя Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Подтверждение ввода марки алкоголя.'");
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Марка для товара ""%1"" указана верно?'"),
				Строка(ПараметрыШтрихкода.ТекущаяНоменклатура));
			ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,
				КодВозвратаДиалога.Да, ТекстЗаголовка);
				
		Иначе
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, КодВозвратаДиалога.Да);
		КонецЕсли;
	Иначе
		ОткрытьФормуРучногоСопоставленияТовараПриВозможности(ПараметрыШтрихкода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогКлиент()
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПоискТовара);
	
	Если Не (РежимВыбораПодарка Или РежимВыбораПодарочногоСертификата) Тогда
		ИзменитьСостояниеЗаголовкаСтраницыПоискаТовара();
	Иначе
		СписокТоваров.Отбор.Элементы.Очистить();
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ПриОткрытииКаталогаТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПоискТоваровКлиент()
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаСписокТоваров);
	НастроитьВидимостьЭлементовГруппыПоискаТовара();
	
	НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	Если Не РежимВыбораПодарочногоСертификата Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьЭлементовФормыПриПереключенииРежима(ЭтотОбъект,
		ЭтоОперацияПродажи, Ложь);
	КонецЕсли;
	
	ВернутьсяНаСтраницуСтартаПродажПриНеобходимости();
	
	Если РежимВыбораПодарка Или РежимВыбораПодарочногоСертификата Тогда
		СписокТоваров.Отбор.Элементы.Очистить();
	КонецЕсли;
	
	Если НЕ ЗакрыватьПодборПриВыбореТовара Тогда
		Отказ = ЕстьНезаполненныеДанные();
	КонецЕсли;
	
	Если ПоискТоваровОткрытИзСтрокиВвода Тогда
		ЭлементОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
			СписокТоваров.Отбор.Элементы, "ЗначениеВводаТовараПоСтроке");
		
		Если Не ЭлементОтбора = Неопределено Тогда
			СписокТоваров.Отбор.Элементы.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЕсли;
	
	ПоискТоваровОткрытИзСтрокиВвода = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьФормуРабочегоМестаКассира()
	
	Если Не Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершение Тогда
	
		ИдентификаторЗамераПробитияЧека		= НСтр("ru = ''");
		ИдентификаторЗамераВремениПоиска	= НСтр("ru = ''");
		ЭлектронныеВесыЗаняты				= Ложь;
		ДанныеКПередачеВДисплейПокупателя	= БуферОбменаДисплеяПокупателя();
		
		ВременныйКонтекстПроверкиМарки = Неопределено;
		
		СформироватьЗаголовок(НСтр("ru ='Продажа'"));
		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
		УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ВвестиКомментарийКЧеку, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборМагазинаДляВхода, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыНСПК, ИспользоватьОплатуСертификатамиНСПК);
		УстановитьВидимостьКнопкиМирТовары(Элементы, ИспользоватьОплатуСертификатамиНСПК);
		УстановитьВидимостьЭлементаФормы(Элементы.ОтправитьПодтверждениеНСПК, ИспользоватьОплатуСертификатамиНСПК);
		УстановитьВидимостьЭлементаФормы(Элементы.ПодборТоваровНСПК, ИспользоватьОплатуСертификатамиНСПК);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЗаменаТоваров, Ложь);

		НастроитьВидимостьОплатыQRКодом(Истина);
		НастроитьИнтерфейсРежимаКассыСамообслуживанияКлиент();
		
		ПолучитьПараметрыПодключенияКСерверуЛояльности();
		ОпределитьИспользованиеАвтоматическихСкидок();
		ПроверитьСоединениеССерверомЛояльности();
		ОбщегоНазначенияРМККлиентПереопределяемый.ИнициализироватьФормуРабочегоМестаКассира(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаЧекКоррекции()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимПлитки Тогда
		ПереключитьНаРежимПлиткиИзПалитры();
	КонецЕсли;
	
	ПользовательДоЗаменыПрав = Объект.ПользовательБД;
	КассирДоЗаменыПрав = Объект.Кассир;
	
	НеобходимоеПраво = "ПравоЧекКоррекцииРМК";
	
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		ВыбратьЧекКоррекции();
	Иначе
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
	ОпределитьИспользованиеАвтоматическихСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧекКоррекции()
	
	ВывестиИнформациюНаДисплейПокупателя("Коррекция");
	СформироватьЗаголовок(НСтр("ru='Коррекция'"));
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Выбор чека для коррекции'"));
	ПараметрыОткрытия.Вставить("ЧекКоррекции", Истина);
	ПараметрыОткрытия.Вставить("ВыводитьКомментарийКЧеку", ВыводитьКомментарийКЧеку);
	
	ЭтоЧекКоррекции = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЧекаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТоваровВыборПродолжение(ЭтоФормаРучногоПодбора = Ложь)
	
	Если ЗапрашиватьПодтверждениеВозраста18Плюс
		И (СостояниеПодтвержденияВозраста = "" Или СостояниеПодтвержденияВозраста = "Нет18") Тогда
			Если ТоварСВозрастнымОграничением(ДанныеДобавляемогоТовара.ОсобенностьУчета) Тогда
				ПереключитьНаСтраницуПодтвержденияВозраста();
				Оповестить("ЗакрытьФормуПодбораИзНовогоРМК");
				Возврат;
			КонецЕсли;
	КонецЕсли;
		
	Если СписокДобавленныхСтрокТоваров.Количество() > 0 Тогда
		СписокДобавленныхСтрокТоваров.Очистить();
		Возврат;
	КонецЕсли;
	
	Если СкидкиРассчитаны И Не РежимВыбораПодарка Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	Если ИспользоватьЗапретПродаж И НЕ ЭтоВозвратБезОснования Тогда
		
		ЗапретыПродаж = Новый Структура();
		ОбработатьВыборТовара(ДанныеДобавляемогоТовара, ЗапретыПродаж);
		
		Если ЗапретыПродаж.Количество() > 0 Тогда
			
			ОткрытьСтраницуЗапретаПродажиПоВремени(ЗапретыПродаж.ВидНоменклатуры,
				ЗапретыПродаж.ВремяНачалаЗапрета, ЗапретыПродаж.ВремяОкончанияЗапрета);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		ОбработатьВыборТовара(ДанныеДобавляемогоТовара, Ложь);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) Тогда
		
		ОбновитьИнформациюНаДисплееПокупателя("ДобавлениеТовара");
		
		Если ((Не ЭтоФормаРучногоПодбора)
			ИЛИ (ЭтоФормаРучногоПодбора И ИспользоватьНовыйПодборТоваров И ЗакрыватьПодборПриВыбореТовара)
			ИЛИ (ЭтоФормаРучногоПодбора И НЕ ИспользоватьНовыйПодборТоваров)
			ИЛИ (ЭтоФормаРучногоПодбора И РежимПлитки)) Тогда
			
				Если Объект.Товары.Количество() > 0 Тогда
					ПереключатьсяВРежимПлиткиВЛожь = Ложь;
					Если РежимПлитки И Не ПереключатьсяВРежимПлитки Тогда
						ПереключатьсяВРежимПлиткиВЛожь = Истина;
						ПереключатьсяВРежимПлитки = Истина;
					КонецЕсли;
					НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
					Если ПереключатьсяВРежимПлиткиВЛожь Тогда
						ПереключатьсяВРежимПлитки = Ложь;
					КонецЕсли;
				КонецЕсли;
			
		КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		РассчитатьСуммуОплатыБонусами();
		
		РучноеСопоставлениеТовара = Ложь;
		ДанныеДляРучногоСопоставления = Неопределено;
		КодМаркиВРаботе = НСтр("ru = ''");
		
		Если ЗапрашиватьПодтверждениеВозраста18Плюс Тогда
			Если СостояниеПодтвержденияВозраста = "" ИЛИ СостояниеПодтвержденияВозраста = "Нет18" Тогда
				Если ТоварСВозрастнымОграничением() Тогда
					ПереключитьНаСтраницуПодтвержденияВозраста();
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СписокДобавленныхСтрокТоваров.Очистить();
		
	КонецЕсли;
	
	Если РежимВыбораПодарка И ТаблицаПодаркиБезВыбора.Количество() = 0 И ТаблицаПодарков.Количество() = 0 Тогда
		ВыполнитьОтложенныйМетод();
		РежимВыбораПодарка = Ложь;
	КонецЕсли;

	ЗапросВесаСПовышениемПрав = Ложь;
	ДобавляемаяПозиция = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Если Не ДобавляемаяПозиция = Неопределено Тогда
		
		Если ДобавляемаяПозиция.Весовой И Не ДобавляемаяПозиция.Фасованный Тогда
			Если ЭтоФормаРучногоПодбора И (Не ЗакрыватьПодборПриВыбореТовара) И (Не РежимПлитки) Тогда
				ЗакрытьПоискТоваровКлиент();
			КонецЕсли;
			ОжиданиеКонтроляВеса = Ложь;
			ВесТекущегоТовара(ЗапросВесаСПовышениемПрав);
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьНезаполненныеДанные = ЕстьНезаполненныеДанные(ЗапросВесаСПовышениемПрав);
	ОжиданиеКонтроляВеса = Истина;
	РассчитатьСуммуОплатыБонусами();
	ОбработатьИзменениеТаблицыТоваровНаКлиенте(Не ЕстьНезаполненныеДанные);
	НастроитьИнтерфейсРежимаКассыСамообслуживанияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуПодтвержденияВозраста(ВыбранОтложенныйЧек = Ложь)
	
	Если ТекущаяОперация = "" И РежимКассыСамообслуживания Тогда
		
		НеобходимоеПраво = "ПравоПодтвержденияВозрастаРМК";
		ТекущаяОперация = "ПодтверждениеВозрастаРМК";
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПодтверждениеВозраста);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	
	ТекущийЭлемент = Элементы.ОпровергнутьВозраст;
	Если НЕ СостояниеПодтвержденияВозраста = "Нет18" Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПодтверждениеВозрастаПервая);
		ТекущийЭлемент = Элементы.ПодтвердитьВозраст;
	Иначе
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПодтверждениеВозрастаПовторная);
		ТекущийЭлемент = Элементы.ПодтвердитьВозрастПовт;
	КонецЕсли;
	
	СостояниеПодтвержденияВозраста = ?(ВыбранОтложенныйЧек, "ВыбранОтложенныйЧек", "Выбор");
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	ПредельнаяДатаВозраста = Формат(ДобавитьМесяц(КонецДня(ДатаСеанса), -12*18)+1, "ДЛФ=D");
	Элементы.ДекорацияТекстВозрастноеОграничение.Заголовок =
		СтрШаблон(НСтр("ru = 'Покупателю уже исполнилось 18 лет?
			|Дата рождения раньше %1 г.?'"), ПредельнаяДатаВозраста);

КонецПроцедуры

&НаКлиенте
Функция ТоварСВозрастнымОграничением(ОсобенностьУчетаТовара = Неопределено)
	
	МассивОсобенностейУчета = Новый Массив;
	ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьМассивДляПроверкиВозраста(МассивОсобенностейУчета);
	
	ЕстьТоварСВозрастнымОграничением = Ложь;
	Если ОсобенностьУчетаТовара = Неопределено Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если Не МассивОсобенностейУчета.Найти(СтрокаТовары.ОсобенностьУчета) = Неопределено Тогда
				ЕстьТоварСВозрастнымОграничением = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЕстьТоварСВозрастнымОграничением = Не МассивОсобенностейУчета.Найти(ОсобенностьУчетаТовара) = Неопределено;
	КонецЕсли;
	
	Возврат ЕстьТоварСВозрастнымОграничением;
	
КонецФункции

&НаКлиенте
Процедура ОграничитьДоступностьЭлементовПриОжиданииМарки(ОжидатьМарку)
	
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, НЕ ОжидатьМарку);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРядовКнопокБыстрыхТоваров, НЕ ОжидатьМарку);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаТовары, НЕ ОжидатьМарку);
	УстановитьДоступностьЭлементаФормы(Элементы.ВвестиДанныеПокупателя, НЕ ОжидатьМарку);
	УстановитьДоступностьЭлементаФормы(Элементы.ПоказатьСкидкиНаЧек, НЕ ОжидатьМарку);
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, НЕ ОжидатьМарку);
	УстановитьДоступностьЭлементаФормы(Элементы.ДобавитьПакет, НЕ ОжидатьМарку);
	
	ОжидатьВводМарки = ОжидатьМарку;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтраницуВыбораКассККМ()
	
	СписокКассККМ = Элементы.КассаККМДляОперации.СписокВыбора;
	СписокКассККМ.Очистить();
	Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	ЕстьАктуальныеСмены = Ложь;
	ЕстьИстекшаяСмена = Ложь;
	ФорматДаты = НСтр("ru='ДФ=''dd.MM.yyyy HH:mm'''");
	
	Для Каждого СтрокаКассККМ Из ТаблицаКассККМОрганизаций Цикл
		
		ЭлементКнопкаКассы = Элементы.Найти(СтрокаКассККМ.ИмяКнопки);
		Если ЭлементКнопкаКассы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаКассККМ.Открыта Тогда
			ТекстСмены = СтрШаблон(НСтр("ru = 'Смена открыта: %1'"),
				Формат(СтрокаКассККМ.НачалоКассовойСмены, ФорматДаты));
		Иначе
			ТекстСмены = НСтр("ru = 'Смена закрыта'");
		КонецЕсли;
		
		ТекстОкончанияСмены = "";
		ОсталосьСекунд = 0;
		
		Если СтрокаКассККМ.Открыта Тогда
			
			ОсталосьСекунд = (СтрокаКассККМ.ДатаИстеченияСрокаДействия - Дата);
			Если ОсталосьСекунд > 0 Тогда
				
				ВремяНачалаСменыВСекундах = ВремяНачалаСмены - Дата(1, 1, 1);
				
				МинимальноеДатаНачалаСмены = НачалоДня(Дата) + ВремяНачалаСменыВСекундах;
				Если Дата < МинимальноеДатаНачалаСмены Тогда
					МинимальноеДатаНачалаСмены = МинимальноеДатаНачалаСмены - 86400;
				КонецЕсли;
				
				ОсталосьМинут = Окр((ОсталосьСекунд / 60), 0);
				Если ОсталосьМинут = 0 Тогда
					ТекстОкончанияСмены = НСтр("ru = 'Осталось менее минуты.'");
				ИначеЕсли ОсталосьМинут < 60 Тогда
					ТекстМинут = НСтр("ru = ';Осталось: %1 минута;;Осталось: %1 минуты;Осталось: %1 минут;Осталось: %1 минуты'");
					ТекстОкончанияСмены = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ТекстМинут, ОсталосьМинут);
				Иначе
					ОсталосьЧасов = Окр((ОсталосьМинут / 60), 0);
					ТекстЧасов = НСтр("ru = ';Осталось: %1 час;;Осталось: %1 часа;Осталось: %1 часов;Осталось: %1 часа'");
					ТекстОкончанияСмены = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ТекстЧасов, ОсталосьЧасов);
				КонецЕсли;
				
				ЕстьАктуальныеСмены = Истина;
				
				Если СтрокаКассККМ.НачалоКассовойСмены < МинимальноеДатаНачалаСмены Тогда
					ТекстОкончанияСмены = НСтр("ru = 'Рекомендуется переоткрыть смену.'");
					ОсталосьСекунд = 0;
				КонецЕсли;
				
			Иначе
				
				ТекстОкончанияСмены = НСтр("ru = 'Прошло более 24 часов. Требуется закрытие.'");
				ЕстьИстекшаяСмена = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПредставлениеКнопкиКассы = СтрШаблон(НСтр("ru = 'Касса: %1
				| Организация: %2
				|
				| %3
				| %4'"), СтрокаКассККМ.КассаККМ, СтрокаКассККМ.Организация, ТекстСмены, ТекстОкончанияСмены);
		
		ЭлементКнопкаКассы.Заголовок = ПредставлениеКнопкиКассы;
		
		Если ЗначениеЗаполнено(ТекущаяОперация) Тогда
			ЭлементКнопкаКассы.ЦветФона = ЦветаФормы.Авто;
		КонецЕсли;
		
		Если ОсталосьСекунд > 0 Тогда
			ЭлементКнопкаКассы.Картинка = БиблиотекаКартинок.РМККассаЗеленая;
		Иначе
			ЭлементКнопкаКассы.Картинка = БиблиотекаКартинок.РМККассаКрасная;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая
			И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
				= Элементы.ГруппаИнфоОшибка Тогда
		
			ЗакрытьСтраницуИнфоОшибка(Команды.ЗакрытьСтраницуИнфоОшибка);
			УстановитьСообщениеПоСтатусуСмены();
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуВыбораКассыККМ()
	
	НастроитьСтраницуВыбораКассККМ();
	
	КассаККМДляОперации = Неопределено;
	
	ВидимостьКнопокОткрытияЗакрытия = (ТекущаяОперация = "");
	УстановитьВидимостьЭлементаФормы(Элементы.ОткрытьСменуИзРежимаВыбораКассы, ВидимостьКнопокОткрытияЗакрытия);
	УстановитьВидимостьЭлементаФормы(Элементы.ЗакрытьСменуИзРежимаВыбораКассы, ВидимостьКнопокОткрытияЗакрытия);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВыборКассыККМ);
	
	Если ТекущаяОперация = "" Тогда
		
		Если НЕ ЗначениеЗаполнено(КассаККМДляОперации) Тогда
			КассаККМДляОперации = ТаблицаКассККМОрганизаций[0].КассаККМ;
		КонецЕсли;
	
		ПриПереключенииКассыККМ();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПереключенииКассыККМ()
	
	Для Каждого СтрокаКассы Из ТаблицаКассККМОрганизаций Цикл
		Элементы[СтрокаКассы.ИмяКнопки].ЦветФона = ЦветаФормы.Авто;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(КассаККМДляОперации) Тогда
		Возврат;
	КонецЕсли;

	Отбор = Новый Структура("КассаККМ", КассаККМДляОперации);
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	Элементы[СтрокаКассы.ИмяКнопки].ЦветФона = ЦветаФормы.АктивнаяКнопка;
	
	ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
	КассоваяСмена = СтрокаКассы.КассоваяСмена;
	Объект.Организация = СтрокаКассы.Организация;
	Объект.КассаККМ = СтрокаКассы.КассаККМ;
	ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
	
	СменаПоКассеОткрыта = ЗначениеЗаполнено(СтрокаКассы.НачалоКассовойСмены);
	УстановитьДоступностьЭлементаФормы(Элементы.ЗакрытьСменуИзРежимаВыбораКассы, СменаПоКассеОткрыта);
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьСменуИзРежимаВыбораКассы, НЕ СменаПоКассеОткрыта);
	
	Если ТекущаяОперация = "ОтчетБезГашения" Тогда
		СнятьОтчетБезГашенияКлиент();
	ИначеЕсли ТекущаяОперация = "Выемка" Тогда
		ОткрытьСтраницуВыемкиДенежныхСредств();
	ИначеЕсли ТекущаяОперация = "Внесение" Тогда
		ОткрытьСтраницуВнесение();
	Иначе
	КонецЕсли;
	
	Если НЕ ТекущаяОперация = "" Тогда
		
		ТекущаяОперация = "";
		КассаККМДляОперации = Неопределено;
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСледующийЧек(ИмяКоманды = "")
	
	СистемыНалогообложенияТоваровВКорзине = РазличныеСНОВСпискеПокупок();
	
	СписокОрганизаций = Новый СписокЗначений;
	НомерПП = 0;
	НомерНажатойКнопкиОрганизации = "";
	ИмяСНО = "";
	НаСледующийЧек = Ложь;
	
	Если ИмяКоманды = "НаСледующий" Тогда
		НаСледующийЧек = Истина;
	ИначеЕсли Лев(ИмяКоманды, 25) = "ПереключитьЧекОрганизация" Тогда
		
		НаСледующийЧек = Истина;
		НомерНажатойКнопкиОрганизации = СтрЗаменить(ИмяКоманды, "ПереключитьЧекОрганизация", "");
		
	Иначе
		ИмяСНО = СтрЗаменить(ИмяКоманды, "ПереключитьЧекСНО", "");
	КонецЕсли;
	
	Для Каждого ОрганизацияИСНОЧека Из СистемыНалогообложенияТоваровВКорзине Цикл
		
		Если СписокОрганизаций.НайтиПоЗначению(ОрганизацияИСНОЧека.Организация) = Неопределено Тогда
			
			НомерПП = НомерПП + 1;
			СписокОрганизаций.Добавить(ОрганизацияИСНОЧека.Организация, НомерПП);
			Если НомерНажатойКнопкиОрганизации = Строка(НомерПП) Тогда
				ВыбраннаяОрганизация = ОрганизацияИСНОЧека.Организация;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокОрганизаций.СортироватьПоЗначению();
	
	НомерПП = 0;
	Пока Истина Цикл
		НомерПП = НомерПП + 1;
		НайденЭлемент = Элементы.Найти("ПереключитьЧекОрганизация" + НомерПП);
		Если НайденЭлемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		НайденЭлемент.Пометка = Ложь;
		НайденЭлемент.Видимость = Ложь;
	КонецЦикла;
	
	Если НаСледующийЧек Тогда
		
		Для Каждого ОрганизацияИСНОЧека Из СистемыНалогообложенияТоваровВКорзине Цикл
			
			Если НЕ НомерНажатойКнопкиОрганизации = "" И НЕ ВыбраннаяОрганизация = ОрганизацияИСНОЧека.Организация Тогда
				Продолжить;
			КонецЕсли;
			
			Элементы.ПереключитьЧекСНООСН.Пометка = Ложь;
			Элементы.ПереключитьЧекСНОУСНДоход.Пометка = Ложь;
			Элементы.ПереключитьЧекСНОУСНДоходРасход.Пометка = Ложь;
			Элементы.ПереключитьЧекСНОЕСН.Пометка = Ложь;
			Элементы.ПереключитьЧекСНОПатент.Пометка = Ложь;
			
			ПробитыйЧек = ПробитыеЧеки.НайтиСтроки(ОрганизацияИСНОЧека);
			
			ОрганизацияВСписке = СписокОрганизаций.НайтиПоЗначению(ОрганизацияИСНОЧека.Организация);
			ВыбраннаяОрганизация = ОрганизацияИСНОЧека.Организация;
			ВыбраннаяСистемаНалогообложения = ОрганизацияИСНОЧека.СистемаНалогообложения;
			Элементы["ПереключитьЧекОрганизация" + ОрганизацияВСписке.Представление].Пометка = Истина;
			ИмяПеречисления = СтрЗаменить(ПолучитьПолноеИмяПредопределенногоЗначения(ВыбраннаяСистемаНалогообложения),
				"Перечисление.ТипыСистемНалогообложенияККТ.", "");
			Элементы["ПереключитьЧекСНО" + ИмяПеречисления].Пометка = Истина;
				
			Если ПробитыйЧек.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Раскраска и видимость кнопок
	Элементы.ГруппаСписокОрганизацийПоКорзине.Видимость = (СписокОрганизаций.Количество() > 1);
	
	Элементы.ПереключитьЧекСНООСН.Видимость = Ложь;
	Элементы.ПереключитьЧекСНОУСНДоход.Видимость = Ложь;
	Элементы.ПереключитьЧекСНОУСНДоходРасход.Видимость = Ложь;
	Элементы.ПереключитьЧекСНОЕСН.Видимость = Ложь;
	Элементы.ПереключитьЧекСНОПатент.Видимость = Ложь;
	
	КоличествоСНОПоОрганизации = 0;
	
	Для Каждого ОрганизацияИзСписка Из СписокОрганизаций Цикл
		
		ПоОрганизацииПробитыНеВсеЧеки = Ложь;
		
		Для Каждого ОрганизацияИСНОЧека Из СистемыНалогообложенияТоваровВКорзине Цикл
			
			Если ОрганизацияИзСписка.Значение = ОрганизацияИСНОЧека.Организация Тогда
				
				ПробитыйЧек = ПробитыеЧеки.НайтиСтроки(ОрганизацияИСНОЧека);
				
				Если ПробитыйЧек.Количество() = 0 Тогда
					ПоОрганизацииПробитыНеВсеЧеки = Истина;
				КонецЕсли;
				
				Если ОрганизацияИзСписка.Значение = ВыбраннаяОрганизация Тогда
					
					ИмяПеречисления =
						СтрЗаменить(ПолучитьПолноеИмяПредопределенногоЗначения(ОрганизацияИСНОЧека.СистемаНалогообложения),
						"Перечисление.ТипыСистемНалогообложенияККТ.", "");
					
					ЦветФонаКнопки = ?(ПробитыйЧек.Количество() = 0, ЦветаФормы.Авто, ЦветаФормы.ЗеленаяКнопка);
					Элементы["ПереключитьЧекСНО" + ИмяПеречисления].ЦветФона = ЦветФонаКнопки;
					Элементы["ПереключитьЧекСНО" + ИмяПеречисления].Видимость = Истина;
					
					Если ИмяПеречисления = ИмяСНО Тогда
						ВыбраннаяСистемаНалогообложения = ОрганизацияИСНОЧека.СистемаНалогообложения;
					КонецЕсли;
					
					КоличествоСНОПоОрганизации = КоличествоСНОПоОрганизации + 1;
					
				КонецЕсли;
			
			КонецЕсли;
		
		КонецЦикла;
		
		ЦветФонаКнопки = ?(ПоОрганизацииПробитыНеВсеЧеки Или ФормаЗамороженаПослеПробитияЧека(), ЦветаФормы.Авто, ЦветаФормы.ЗеленаяКнопка);
		Элементы["ПереключитьЧекОрганизация" + ОрганизацияИзСписка.Представление].ЦветФона = ЦветФонаКнопки;
		Элементы["ПереключитьЧекОрганизация" + ОрганизацияИзСписка.Представление].Заголовок =
			СокрЛП(ОрганизацияИзСписка.Значение);
			
		Элементы["ПереключитьЧекОрганизация" + ОрганизацияИзСписка.Представление].Видимость = Истина;
		
		НайденаСтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("Организация", ОрганизацияИзСписка.Значение));
		Если НайденаСтрокаКассы.Количество() = 0 Тогда
			Элементы["ПереключитьЧекОрганизация" + ОрганизацияИзСписка.Представление].ЦветФона = ЦветаФормы.КраснаяКнопка;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ГруппаСписокСНОПоОрганизации.Видимость = (КоличествоСНОПоОрганизации > 1);
	
	УстановитьСообщениеПоСтатусуСмены();
	
	ОтборСтрок = Неопределено;
	Если ЗначениеЗаполнено(ВыбраннаяОрганизация) И ЗначениеЗаполнено(ВыбраннаяСистемаНалогообложения) Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура(ВыбраннаяОрганизацияИСНО());
	КонецЕсли;
	
	Элементы.Товары.ОтборСтрок = ОтборСтрок;
	ПересчитатьИтогиТабличнойЧастиТовары();
	НастроитьВидимостьОплатыПодарочнымиСертификатами();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСообщениеПоСтатусуСмены()
	
	Для Каждого СтрокаКассыККМ Из ТаблицаКассККМОрганизаций Цикл
		Если СтрокаКассыККМ.СтатусКонтроляВремениНачалаСмены = 1 Тогда
			СтрокаКассыККМ.СтатусКонтроляВремениНачалаСмены = 0;
		КонецЕсли;
	КонецЦикла;
	
	СписокОрганизаций = Новый СписокЗначений;
	Для Каждого СтрокаКорзины Из Объект.Товары Цикл
		Если СписокОрганизаций.НайтиПоЗначению(СтрокаКорзины.Организация) = Неопределено Тогда
			СписокОрганизаций.Добавить(СтрокаКорзины.Организация);
		КонецЕсли;
	КонецЦикла;
	СписокОрганизаций.СортироватьПоЗначению();
	
	Для Каждого ОрганизацияИзСписка Из СписокОрганизаций Цикл
		
		ОрганизацияКассыККМ = ОрганизацияИзСписка.Значение;
		
		НайденаСтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("Организация", ОрганизацияКассыККМ));
	
		ПараметрыОшибки = Новый Структура;
		ПараметрыОшибки.Вставить("ОтобразитьКнопкиДействияСЧеком", Истина);
		ПараметрыОшибки.Вставить("ОтобразитьКнопкуОткрытияСмены", Ложь);
		ПараметрыОшибки.Вставить("ОтобразитьКнопкуЗакрытияСмены", Ложь);
		ПараметрыОшибки.Вставить("ЭтоПредупреждение", Истина);
	
		Если НайденаСтрокаКассы.Количество() > 0 Тогда
			
			СтрокаКассы = НайденаСтрокаКассы[0];
			ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
			КассоваяСмена = СтрокаКассы.КассоваяСмена;
			Объект.Организация = СтрокаКассы.Организация; 
			Объект.КассаККМ = СтрокаКассы.КассаККМ;
			ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
			
			Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
			ВремяНачалаСменыВСекундах = ВремяНачалаСмены - Дата(1, 1, 1);
			
			МинимальноеДатаНачалаСмены = НачалоДня(Дата) + ВремяНачалаСменыВСекундах;
			Если Дата < МинимальноеДатаНачалаСмены Тогда
				МинимальноеДатаНачалаСмены = МинимальноеДатаНачалаСмены - 86400;
			КонецЕсли;
			
			НаименованиеКассыККМ = Строка(СтрокаКассы.КассаККМ);
			
			Если Не СтрокаКассы.Открыта Тогда
				
				КассаККМДляОперации = СтрокаКассы.КассаККМ;
				ПриПереключенииКассыККМ();
				ПараметрыОшибки.ОтобразитьКнопкуОткрытияСмены = Истина;
				
				ОтменитьВведенныеОплаты();
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиОтменыВидовОплат,
					Объект.Оплата.Количество() > (0 + Число(ПриемАвансаПоЗаказу)));
				
				ТекстЗаголовка = НСтр("ru = 'Смена закрыта.'") + символы.ПС + НаименованиеКассыККМ;
				ТекстСообщения = НСтр("ru = 'Откройте смену, отложите или удалите чек.'");
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
				Возврат;
				
			ИначеЕсли СтрокаКассы.ДатаИстеченияСрокаДействия < Дата Тогда
				
				КассаККМДляОперации = СтрокаКассы.КассаККМ;
				ПриПереключенииКассыККМ();
				ПараметрыОшибки.ОтобразитьКнопкуЗакрытияСмены = Истина;
				
				ОтменитьВведенныеОплаты();
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиОтменыВидовОплат,
					Объект.Оплата.Количество() > (0 + Число(ПриемАвансаПоЗаказу)));
				
				ТекстЗаголовка = НСтр("ru = 'Смена истекла.'") + Символы.ПС + НаименованиеКассыККМ;
				ТекстСообщения = 
					НСтр("ru = 'Закройте смену - затем откройте, отложите или удалите чек.'");
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
				Возврат;
				
			ИначеЕсли СтрокаКассы.НачалоКассовойСмены < МинимальноеДатаНачалаСмены
				И СтрокаКассы.СтатусКонтроляВремениНачалаСмены = 0 Тогда
				
				КассаККМДляОперации = СтрокаКассы.КассаККМ;
				ПриПереключенииКассыККМ();
				ПараметрыОшибки.ОтобразитьКнопкуЗакрытияСмены = Истина;
				
				ОтменитьВведенныеОплаты();
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиОтменыВидовОплат,
					Объект.Оплата.Количество() > (0 + Число(ПриемАвансаПоЗаказу)));
				СтрокаКассы.СтатусКонтроляВремениНачалаСмены = 1;
				
				ТекстЗаголовка = НСтр("ru = 'Рекомендуется переоткрыть смену.'") + Символы.ПС + НаименованиеКассыККМ;
				ТекстСообщения = 
					НСтр("ru = 'Закройте смену - затем откройте. Отложите чек, удалите чек или закройте сообщение.'");
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			ТекстЗаголовка = НСтр("ru = 'Нет подключенной кассы по выбранной организации.'") + Символы.ПС + ОрганизацияКассыККМ;
			ТекстСообщения = НСтр("ru = 'Отложите или удалите чек.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НайденаСтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("Организация", ВыбраннаяОрганизация));
	
	Если НайденаСтрокаКассы.Количество() > 0 Тогда
			
			СтрокаКассы = НайденаСтрокаКассы[0];
			ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
			КассоваяСмена = СтрокаКассы.КассоваяСмена;
			Объект.Организация = СтрокаКассы.Организация; 
			Объект.КассаККМ = СтрокаКассы.КассаККМ;
			ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКнопкиОрганизацийИСНО()
	
	ЦветАктивнойКнопки = ЦветаФормы.АктивнаяКнопка;
	ЦветНеАктивнойКнопки = ЦветаФормы.Авто;
	
	МассивИмен = Новый Массив;
	
	НомерПП = 0;
	Пока Истина Цикл
		НомерПП = НомерПП + 1;
		НайденЭлемент = Элементы.Найти("ПереключитьЧекОрганизация" + НомерПП);
		Если НайденЭлемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		МассивИмен.Добавить("ПереключитьЧекОрганизация" + НомерПП);
	КонецЦикла;
	
	МассивИмен.Добавить("ПереключитьЧекСНОЕСН");
	МассивИмен.Добавить("ПереключитьЧекСНООСН");
	МассивИмен.Добавить("ПереключитьЧекСНОПатент");
	МассивИмен.Добавить("ПереключитьЧекСНОУСНДоход");
	МассивИмен.Добавить("ПереключитьЧекСНОУСНДоходРасход");
	
	Для Каждого ЭлементКнопка Из МассивИмен Цикл
		
		Если Элементы[ЭлементКнопка].ЦветФона = ЦветаФормы.ЗеленаяКнопка
			ИЛИ Элементы[ЭлементКнопка].ЦветФона = ЦветаФормы.КраснаяКнопка Тогда
			Продолжить;
		КонецЕсли;
		
		КнопкаАктивна = Элементы[ЭлементКнопка].Пометка И НЕ ОплатаБезДеленияПоЧекам;
		Элементы[ЭлементКнопка].ЦветФона = ?(КнопкаАктивна, ЦветАктивнойКнопки, ЦветНеАктивнойКнопки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФокусНаЭлементеФормыПриВводеОплаты(СуммаПоВидуОплаты = 0, ИмяПоляВвода = "")

	Если ТипЗнч(СуммаПоВидуОплаты) = Тип("Строка") Тогда
	
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		СуммаПоВидуОплаты = ОписаниеТипа.ПривестиЗначение(СуммаПоВидуОплаты);
		
	КонецЕсли;
	
	Если ИмяПоляВвода = "СуммаОплаченоБонусами" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоСБП + СуммаОплаченоЮКасса + СуммаОплаченоБН + СуммаПоВидуОплаты
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоНал" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоСБП + СуммаОплаченоЮКасса + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаПоВидуОплаты + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоБН" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоСБП + СуммаОплаченоЮКасса + СуммаПоВидуОплаты + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоВРассрочку" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоСБП + СуммаОплаченоЮКасса + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаПоВидуОплаты + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоЗачетАванса" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоСБП + СуммаОплаченоЮКасса + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаПоВидуОплаты + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплатаСертификатами" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоСБП + СуммаОплаченоЮКасса + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаПоВидуОплаты;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоСБП" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоЮКасса + СуммаПоВидуОплаты + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоЮКасса" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоСБП + СуммаПоВидуОплаты + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	Иначе
		СуммаВнесенныхОплат = СуммаОплаченоСБП + СуммаОплаченоЮКасса +СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами
			+ СуммаОплаченоСертификатамиНСПК;
	КонецЕсли;
	
	ОткрытыСообщенияОбОшибках =
		(ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаИнфоОшибка);
	ТекущаяСтраницаОбщая = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая);
	
	Если НЕ (ОжидатьВводМарки ИЛИ ОткрытыСообщенияОбОшибках) И ТекущаяСтраницаОбщая Тогда
		
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		ЭлементСУчетомВидаОплаты = ?(ИмяПоляВвода = "СуммаОплаченоНал",
			Элементы.ОплатаКартой,
			Элементы.ОплатаНаличными);
			
		ВыбратьЭлемент = ?(СуммаИтого <= СуммаВнесенныхОплат, Элементы.ПробитьЧек, ЭлементСУчетомВидаОплаты);
		
		Если НЕ ТекущийЭлемент = ВыбратьЭлемент Тогда
			ТекущийЭлемент = ВыбратьЭлемент;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьИнтерфейсКВозвратуМаркируемогоТовараБезКонтрольнойМарки(СтрокаТовара)
	
	Если НЕ СтрокаТовара = Неопределено Тогда
		
		ЭтоОперацияВозврата = НЕ ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации)
			ИЛИ ЭтоВозвратБезОснования;
			
		ОсобенностиУчетаТоваровДопускающиеВозвратМаркированныхТоваровБезКМ =
			ОсобенностиУчетаМаркированныхТоваровДопускающиеВозвратБезМарки();
			
		ТоварДопускаетсяКВозвратуБезМарки = ОсобенностиУчетаТоваровДопускающиеВозвратМаркированныхТоваровБезКМ.Найти(
				СтрокаТовара.ОсобенностьУчета) <> Неопределено;
				
		ОткрытыСообщенияОбОшибках
			= (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
				= Элементы.ГруппаИнфоОшибка);
		ТекущаяСтраницаОбщая = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая);
		
		Если НЕ ОткрытыСообщенияОбОшибках Тогда
			
			ВидимостьГруппыВозвратаМаркированногоТовараБезМарки = ЭтоОперацияВозврата
				И СтрокаТовара.НеобходимостьВводаКодаМаркировки
				И НЕ ЗначениеЗаполнено(СтрокаТовара.КодМаркировки)
				И ТоварДопускаетсяКВозвратуБезМарки;
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыполненияВозвратаБезМаркиПослеОшибкиВводаМарки,
			ВидимостьГруппыВозвратаМаркированногоТовараБезМарки);
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыполненияВозвратаБезМарки,
			ВидимостьГруппыВозвратаМаркированногоТовараБезМарки);
			
			ТекущийСлойСлужебнойИнформацииЧека
				= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
			Если ТекущаяСтраницаОбщая И (ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаОтсканироватьМарку
				ИЛИ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаНеверноОтсканированныйШтрихкод) Тогда
				
				ТекущийЭлемент = ?(ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаОтсканироватьМарку,
					Элементы.ВернутьПозициюБезМарки,
					Элементы.ВернутьПозициюБезМаркиПослеОшибкиРазбораМарки);
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьИнтерфейсКВозвратуМаркируемогоТовараБезКонтрольнойМаркиНаСервере(СтрокаТовара)
	
	Если НЕ СтрокаТовара = Неопределено Тогда
		
		ЭтоПродажа = ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		ЭтоОперацияВозврата = Не ЭтоПродажа Или ЭтоВозвратБезОснования;
		
		МассивОсобенностейУчетаДляВозвратаБезМарки = ОбщегоНазначенияРМК.МассивОсобенностейУчетаДляВозвратаБезМарки();
		ТоварДопускаетсяКВозвратуБезМарки = МассивОсобенностейУчетаДляВозвратаБезМарки.Найти(
				СтрокаТовара.ОсобенностьУчета) <> Неопределено;
			
		ОткрытыСообщенияОбОшибках
			= (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
				= Элементы.ГруппаИнфоОшибка);
		ТекущаяСтраницаОбщая = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая);
		
		Если НЕ ОткрытыСообщенияОбОшибках Тогда
			
			ВидимостьГруппыВозвратаМаркированногоТовараБезМарки = ЭтоОперацияВозврата
				И СтрокаТовара.НеобходимостьВводаКодаМаркировки
				И НЕ ЗначениеЗаполнено(СтрокаТовара.КодМаркировки)
				И ТоварДопускаетсяКВозвратуБезМарки;
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыполненияВозвратаБезМаркиПослеОшибкиВводаМарки,
			ВидимостьГруппыВозвратаМаркированногоТовараБезМарки);
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыполненияВозвратаБезМарки,
			ВидимостьГруппыВозвратаМаркированногоТовараБезМарки);
			
			ТекущийСлойСлужебнойИнформацииЧека
				= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
			Если ТекущаяСтраницаОбщая И (ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаОтсканироватьМарку
				ИЛИ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаНеверноОтсканированныйШтрихкод) Тогда
			
				ТекущийЭлемент = ?(ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаОтсканироватьМарку,
					Элементы.ВернутьПозициюБезМарки,
					Элементы.ВернутьПозициюБезМаркиПослеОшибкиРазбораМарки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьКартинкуУказанияСерийИПартий(ТекущаяСтрока)
	
	СерияЗаполнена = Истина;
	ПартияЗаполнена = Истина;
	
	ТребуетсяУказыватьСерию = ТекущаяСтрока.ПроверятьЗаполнениеСерий;
	Если ТребуетсяУказыватьСерию Тогда
		СерияЗаполнена = ЗначениеЗаполнено(ТекущаяСтрока.Серия);
	КонецЕсли;
	
	ТребуетсяУказыватьПартию = ТекущаяСтрока.ПроверятьЗаполнениеПартий;
	Если ТребуетсяУказыватьПартию Тогда
		ПартияЗаполнена = ЗначениеЗаполнено(ТекущаяСтрока.Партия);
	КонецЕсли;
	
	Если ТребуетсяУказыватьСерию И Не СерияЗаполнена Тогда
		Элементы.УказатьСерии.Картинка = БиблиотекаКартинок.СерииНеУказаны;
	ИначеЕсли ТребуетсяУказыватьПартию И Не ПартияЗаполнена Тогда
		Элементы.УказатьСерии.Картинка = БиблиотекаКартинок.РМКПартииНеУказаны;
	ИначеЕсли ТекущаяСтрока.НеобходимостьВводаСерии И Не ЗначениеЗаполнено(ТекущаяСтрока.Серия) Тогда
		Элементы.УказатьСерии.Картинка = БиблиотекаКартинок.РМКСерииНеОбязательны;
	ИначеЕсли ТекущаяСтрока.ИспользоватьПартии И Не ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
		Элементы.УказатьСерии.Картинка = БиблиотекаКартинок.РМКПартииНеОбязательны;
	ИначеЕсли ТекущаяСтрока.НеобходимостьВводаСерии И ЗначениеЗаполнено(ТекущаяСтрока.Серия) Тогда
		Элементы.УказатьСерии.Картинка = БиблиотекаКартинок.СерииУказаны;
	ИначеЕсли ТекущаяСтрока.ИспользоватьПартии И ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
		Элементы.УказатьСерии.Картинка = БиблиотекаКартинок.РМКПартииУказаны;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаВозвратСкупки()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимПлитки Тогда
		ПереключитьНаРежимПлиткиИзПалитры();
	КонецЕсли;
	
	ПользовательДоЗаменыПрав = Объект.ПользовательБД;
	КассирДоЗаменыПрав = Объект.Кассир;
	
	НеобходимоеПраво = "ПравоЧекНаВозвратРМК";
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		ВыбратьЧекНаВозвратСкупки();
	Иначе
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыВРежимеСкупка()
	
	Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаСкупка;
	
	ПравоИзменятьЦену = НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоИзменятьЦенуРМК") = Неопределено;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, ПравоИзменятьЦену);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСБП, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаЮКасса, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeНаличные, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыВРежимеВозвратСкупки()
	
	Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаВозвратСкупки;
	
	ПравоИзменятьЦену = НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоИзменятьЦенуРМК") = Неопределено;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, ПравоИзменятьЦену);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСБП, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаЮКасса, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeНаличные, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаСкупка()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	ОформитьРежимНовогоЧека("Скупка");
	
	НачинатьНовыйЧекВРежимеСкупка = Истина;
	
	НастроитьЭлементыВРежимеСкупка();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуВРежимВозвратСкупкиБезЧека()
	
	НастроитьЭлементыФормы(Элементы.СтраницаПустая, Истина);
	
	НастроитьЭлементыВРежимеВозвратСкупки();
	
	ЭтоВозвратБезОснования = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСтраницуИнфоОшибкаНаКлиенте()
	
	Для Каждого СтрокаКассыККМ Из ТаблицаКассККМОрганизаций Цикл
		Если СтрокаКассыККМ.СтатусКонтроляВремениНачалаСмены = 1 Тогда
			СтрокаКассыККМ.СтатусКонтроляВремениНачалаСмены = 2;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ОсновнаяСтраницаДляОтображения = Элементы.СтраницаОбщая;
	ДоступностьПоискаВЧеке = (Объект.Товары.Количество() > 0);
	
	Если Объект.Товары.Количество() = 0 И Не РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		ОсновнаяСтраницаДляОтображения = Элементы.СтраницаПустая;
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ОсновнаяСтраницаДляОтображения);
	
	АктивнаяГруппаСлоя = Элементы.ОбластьОперативногоУправленияЧеком;
	Если РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		АктивнаяГруппаСлоя = Элементы.ГруппаДанныеПокупателя;
		УстановитьДоступностьКомандПанелиПокупателя(Истина);
	Иначе
		ОтображатьСтраницуВводаМарки = Ложь;
		Если Объект.Товары.Количество() > 0 Тогда
			
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
			Если Не ТекущаяСтрока = Неопределено Тогда
				
				ОтображатьСтраницуВводаМарки = ТекущаяСтрока.НеобходимостьВводаКодаМаркировки
					И НЕ ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки)
					И НЕ ЭтоЧекКоррекции;
				
				Если ОтображатьСтраницуВводаМарки Тогда
					АктивнаяГруппаСлоя = Элементы.ГруппаОтсканироватьМарку;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		Если (СуммаОплаченоСБП > 0 Или СуммаОплаченоЮКасса > 0) И НЕ ОтображатьСтраницуВводаМарки Тогда
			АктивнаяГруппаСлоя = Элементы.ГруппаПлатежнаяСистема;
		КонецЕсли;
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, АктивнаяГруппаСлоя);
	ЭтоРежимОплаты = Ложь; 
	Если Не РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		ЭтоРежимОплаты = ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект);
		Если ЭтоРежимОплаты Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция Тогда
			Если СуммаОплаченоСертификатамиНСПК > 0 Тогда
				ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандПробитияЧекаНСПК);
			Иначе
				ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандПробитияЧека);
			КонецЕсли;
			НастроитьДоступностьПробитьЧек();
		ИначеЕсли РежимРаботыСЧеком = РежимыРаботыСЧеком.ПродолжениеПослеПробития Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандПродолженияПослеПробития);
		ИначеЕсли Не РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели) Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандПереходаКОплате);
			ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
		КонецЕсли;
		
		ПодготовитьИнтерфейсКВозвратуМаркируемогоТовараБезКонтрольнойМарки(ТекущаяСтрока);
	
		УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, ДоступностьПоискаВЧеке);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Не ЭтоРежимОплаты);
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьЭлементовГруппыОперацииКромеОтложитьУдалить(Элементы,
			Не ЭтоРежимОплаты);
		УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Не ЭтоРежимОплаты);
	КонецЕсли;

	Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект) Тогда
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	КонецЕсли;
	ПогаситьСветовойСигналОбОшибкеНаДисплее();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыФормыПоОтложенномуЧеку()
	
	Если ОтложенныйЧекПолностьюОплачен Тогда
		
		СНОВСписке      = РазличныеСНОВСпискеПокупок();
		СНОИОрганизация = СНОВСписке[0]; 
		
		ВыбраннаяОрганизация            = СНОИОрганизация.Организация;
		ВыбраннаяСистемаНалогообложения = СНОИОрганизация.СистемаНалогообложения;
		
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВидовОплат, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.Каталог, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧекНСПК, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаголовкаСтраницыПоискаТовара(ТекстЗаголовка = "", ДополнительныйСписок = Ложь)
	
	СписокТоваровДляЗаголовка = Элементы.СписокТоваров;
	Если ДополнительныйСписок = Истина Тогда
		СписокТоваровДляЗаголовка = Элементы.ДополнительныйСписокТоваров;
	КонецЕсли;
	
	ОтображатьЗаголовокКаталога = ЗначениеЗаполнено(ТекстЗаголовка);
	СписокТоваровДляЗаголовка.ПоложениеЗаголовка
		= ?(ОтображатьЗаголовокКаталога, ПоложениеЗаголовкаЭлементаФормы.Верх, ПоложениеЗаголовкаЭлементаФормы.Нет);
	Если ОтображатьЗаголовокКаталога Тогда
		СписокТоваровДляЗаголовка.Заголовок = ТекстЗаголовка;
	Иначе
		РежимВыбораПодарка = Ложь;
		РежимВыбораПодарочногоСертификата = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьПереченьГруппыКомандЕще()

	УстановитьВидимостьЭлементаФормы(Элементы.ОбновитьОграниченияПродаж, 
		ИспользоватьЗапретПродаж ИЛИ ИспользоватьПоставляемыеОграниченияПродаж);
		
	УстановитьВидимостьЭлементаФормы(Элементы.СверкаИтогов, ИспользоватьОплатуПлатежнымиКартами);
	
	ЭтоПечатьТоварногоЧекаНаКассовомОборудовании = (СпособФормированияТоварногоЧека = 2);
	ЭтоПечатьТоварногоЧекаНаОфисномПринтере = (СпособФормированияТоварногоЧека = 1);
	
	ПечататьТоварныйЧек = ЭтоПечатьТоварногоЧекаНаКассовомОборудовании Или ЭтоПечатьТоварногоЧекаНаОфисномПринтере;
	
	Если ПечататьТоварныйЧек Тогда
		
		КомандаПечати = Команды.Найти("РаспечататьТоварныйЧек");
		Если Не КомандаПечати = Неопределено Тогда
			
			ЗаголовокКоманды = НСтр("ru = ''");
			
			Если ЭтоПечатьТоварногоЧекаНаКассовомОборудовании Тогда
				
				ЗаголовокКоманды = НСтр("ru = 'Распечатать товарный чек (принтер чеков/ККТ)'");
				Подсказка = НСтр("ru = 'Сформировать товарный чек на принтере чеков или ККТ, если не подключен принтер чеков.'");
				
			Иначе
				
				ЗаголовокКоманды = НСтр("ru = 'Распечатать товарный чек (офисный принтер)'");
				Подсказка = НСтр("ru = 'Сформировать товарный чек для вывода на офисном принтере.'");
				
			КонецЕсли;
			
			КомандаПечати.Заголовок = ЗаголовокКоманды;
			КомандаПечати.Подсказка = Подсказка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.РаспечататьТоварныйЧек, ПечататьТоварныйЧек);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьФормуОбменаДанными, ЗапускатьОбменИзИнтерфейсаРМК);

КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьЭлементыПослеВнесенияИлиВыемки()
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфоВнесение, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфоВыемка, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницыЛево, Истина);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницыЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаморозитьФормуПослеПробитияЧека()
	
	ЭтоПечатьТоварногоЧекаНаКассовомОборудовании = (СпособФормированияТоварногоЧека = 2);
	ЭтоПечатьТоварногоЧекаНаОфисномПринтере = (СпособФормированияТоварногоЧека = 1);
	РаспечаткаТоварногоЧекаДоступна = Ложь;
	Если (ЭтоПечатьТоварногоЧекаНаКассовомОборудовании
			И (ЗначениеЗаполнено(ПринтерЧеков) ИЛИ ЗначениеЗаполнено(ПодключаемоеОборудование)))
			Или ЭтоПечатьТоварногоЧекаНаОфисномПринтере Тогда
		РаспечаткаТоварногоЧекаДоступна = Истина;
	КонецЕсли;
	ЭтоПродажа = ((Не ЭтоЧекКоррекции) И ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации));
	ЭтоВозврат = ((Не ЭтоЧекКоррекции) И ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации));
	
	РежимРаботыСЧеком = РежимыРаботыСЧеком.ПродолжениеПослеПробития;
	ИнтерфейсРМКСлужебныйКлиентСервер.СкрытьКнопкиНулевыхВидовОплат(ЭтотОбъект);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Истина);
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ОбластьОперативногоУправленияЧеком);
	ТекущийСлойВспомогательнойПанели
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель);
	УстановитьВспомогательныйСлойЗамороженногоЧека(ТекущийСлойВспомогательнойПанели);
	УстановитьДоступностьИнформацииДляЧека(Ложь, ТекущийСлойВспомогательнойПанели);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьВозвратаВПодбор(ЭтотОбъект, Ложь);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандПродолженияПослеПробития);
	ИнтерфейсРМКСлужебныйКлиентСервер.ВключитьДополнительнуюКоманднуюПанельУправленияЧеком(Элементы.ГруппаКомандПродолженияПослеПробитияДополнительно);
	ЭтаФорма.ТекущийЭлемент = Элементы.ПродолжитьПослеПробитияЧека;

	УстановитьВидимостьЭлементаФормы(Элементы.ВыполнитьВозвратТекущегоЧека,
		(ЭтоПродажа И ЕстьПравоНаДействие("ПравоЧекНаВозвратРМК")));
	УстановитьВидимостьЭлементаФормы(Элементы.РаспечататьТекущийТоварныйЧек,
		((ЭтоПродажа ИЛИ ЭтоВозврат) И РаспечаткаТоварногоЧекаДоступна));
	УстановитьВидимостьЭлементаФормы(Элементы.ПробитьТекущийЧекПовторно, (ЭтоПродажа ИЛИ ЭтоВозврат));
	УстановитьВидимостьЭлементаФормы(Элементы.РаспечататьТекущееЗаявлениеНаВозврат, ЭтоВозврат);
	УстановитьВидимостьЭлементаФормы(Элементы.ПовторитьЧек, ЭтоПродажа И Не ПриемАванса);
	
	Элементы.СуммаИтогоРасширеннаяПодсказка.ЦветТекста = WebЦвета.Серый;
	Элементы.СдачаРасширеннаяПодсказка.ЦветТекста = WebЦвета.Серый;
	РазблокироватьГруппуОперацийВЗамороженнойФорме();
	Если ИспользоватьПанельИзбранныхТоваров Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, Истина);
	КонецЕсли;
	Если Элементы.СтраницыЛево.ТекущаяСтраница = Элементы.СтраницаПодтверждениеНСПК Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЛевоОбщая);
	КонецЕсли;
	
	СистемыНалогообложенияТоваровВКорзине = РазличныеСНОВСпискеПокупок();
	Если СистемыНалогообложенияТоваровВКорзине.Количество() > 1 Тогда
		КомандаПереключенияОрганизации = ЭтаФорма.Команды.Найти("ПереключитьЧекОрганизация1");
		Если Не КомандаПереключенияОрганизации = Неопределено Тогда
			ПереключитьЧекПродажи(КомандаПереключенияОрганизации);
		КонецЕсли;
	КонецЕсли;
	ОбработатьИзменениеТаблицыТоваровНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РазморозитьФормуПослеПробитияЧека(ЭтоВозвратТекущегоЧека = Ложь)
	
	ИнтерфейсРМКСлужебныйКлиентСервер.ВосстановитьКнопкиВидовОплат(ЭтотОбъект);
	УстановитьДоступностьИнформацииДляЧека(Истина);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительнаяКоманднаяПанельПустая);

	Если Не ЭтоВозвратТекущегоЧека Тогда
		ПоказатьПустуюСтраницуПослеПробитияЧека();
	ИначеЕсли Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель)
		= Элементы.ГруппаДополнительноеУправлениеЧеком Тогда
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительноеУправлениеЧеком);
	КонецЕсли;
	Элементы.СуммаИтогоРасширеннаяПодсказка.ЦветТекста = WebЦвета.Черный;
	Элементы.СдачаРасширеннаяПодсказка.ЦветТекста = WebЦвета.Черный;
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьГруппуОперацийВЗамороженнойФорме()
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	Для каждого ПодчиненныйЭлемент Из Элементы.ГруппаОперации.ПодчиненныеЭлементы Цикл
		ЗначениеДоступности = Не (ПодчиненныйЭлемент = Элементы.СкидкаНаЧек
				ИЛИ ПодчиненныйЭлемент = Элементы.ОтменитьИзмененияЧека 
				ИЛИ ПодчиненныйЭлемент = Элементы.УдалитьЧек);
		УстановитьДоступностьЭлементаФормы(ПодчиненныйЭлемент, ЗначениеДоступности);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьИнформацииДляЧека(ЗначениеДоступности, ТекущийСлойВспомогательнойПанели = Неопределено)
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаИнфо, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаТовары, ЗначениеДоступности);
	УстановитьДоступностьПолейОплаты(ЗначениеДоступности, ТекущийСлойВспомогательнойПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПолейОплаты(ЗначениеДоступности, ТекущийСлойВспомогательнойПанели)
	Если ЗначениеДоступности Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ПанельВидовОплат, Истина);
	Иначе
		Если ТекущийСлойВспомогательнойПанели = Элементы.ПанельВводаНаличныхВертикальная Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.ПанельВидовОплат, Ложь);
		Иначе
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека, Ложь);
		КонецЕсли;
	КонецЕсли;
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаСводныеДанныеЧека, ЗначениеДоступности);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьКартинкуВводПокупателяБезКонтекста(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(Форма) Тогда
		КартаФИО = Форма.НайденнаяКартаФИО;
		ЧастиФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(КартаФИО),
			СтрШаблон(НСтр("ru = '%1'"), " "));
		ПредставлениеФИО = КартаФИО;
		Если ЧастиФИО.Количество() > 2 Тогда
			ПредставлениеФИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Форма.НайденнаяКартаФИО);
		КонецЕсли;
		
		Элементы.ВвестиДанныеПокупателя.Картинка = БиблиотекаКартинок.ДанныеПокупателяВведены;
		ЗаголовокКнопки = НСтр("ru = 'Карта введена'");
		Если ЗначениеЗаполнено(Объект.Контрагент)
				И Не ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(Форма) Тогда
			ЗаголовокКнопки = ПредставлениеФИО;
		Иначе
			Если ЗначениеЗаполнено(Форма.НайденнаяКартаНомер) Тогда
				ЗаголовокКнопки = СтрШаблон(НСтр("ru = 'Карта
					|№ %1'"), Форма.НайденнаяКартаНомер);
			ИначеЕсли ЗначениеЗаполнено(Форма.НайденнаяКартаТелефон) Тогда
				ЗаголовокКнопки = СтрШаблон(НСтр("ru = 'Карта
					|тел. %1'"), Форма.НайденнаяКартаТелефон);
			ИначеЕсли ЗначениеЗаполнено(Форма.НайденнаяКартаФИО) Тогда
				ЗаголовокКнопки = ПредставлениеФИО;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ВвестиДанныеПокупателя.Заголовок = ЗаголовокКнопки;
	Иначе
		Элементы.ВвестиДанныеПокупателя.Картинка = БиблиотекаКартинок.ВвестиДанныеПокупателя;
		Элементы.ВвестиДанныеПокупателя.Заголовок =
			?(Форма.РежимКассыСамообслуживания, НСтр("ru = 'Карта лояльности'"), НСтр("ru = 'Данные покупателя'"));
	КонецЕсли;
		
	НастроитьЗаголовкиКнопокПоискаОтменыКарты(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьРежимНовогоЧека(РежимЧека)
	
	Если Не РежимЧека = "Заказ" И РежимЗаказа Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Или ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ОчиститьДанныеПокупателя();
			ИзменитьКартинкуВводПокупателя();
		КонецЕсли;
	КонецЕсли;
	
	РежимЗаказа = ?(РежимЧека = "Заказ", Истина, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCode, Не (РежимЗаказа Или РежимКассыСамообслуживания));
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКомандСозданияЗаказа, РежимЗаказа);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКомандКОплате, Не РежимЗаказа);
	
	Если РежимЧека = "Продажа" Тогда
		
		Если ДанныеПакета = Неопределено Или РежимКассыСамообслуживания Тогда
			Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаПродажа;
		Иначе
			Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКQRПакет;
		КонецЕсли;
		Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
			ТекстПустойСтраницыВРежимеПродажи(РежимКассыСамообслуживания);
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации();
		
	ИначеЕсли РежимЧека = "Возврат" Тогда
		
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаВозврат;
		Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
			НСтр("ru='Начните возврат, добавив товар сканером, из избранного или каталога'");
		СформироватьЗаголовок(НСтр("ru='Возврат'"));
		Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации(Истина);
		
	ИначеЕсли РежимЧека = "Скупка" Тогда
		
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаСкупка;
		Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
			НСтр("ru='Начните скупку, добавив товар сканером, из избранного или каталога'");
		СформироватьЗаголовок(НСтр("ru='Скупка'"));
		Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации( ,Истина);
		
	ИначеЕсли РежимЧека = "ВозвратСкупки" Тогда
		
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаВозвратСкупки;
		Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
			НСтр("ru='Начните возврат скупки, добавив товар сканером, из избранного или каталога'");
		СформироватьЗаголовок(НСтр("ru='Возврат скупки'"));
		Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации(Истина, Истина);
		
	ИначеЕсли РежимЧека = "Заказ" Тогда
		
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаЗаказ;
		Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
			НСтр("ru='Начните заказ, добавив товар сканером, из избранного или каталога'");
		СформироватьЗаголовок(НСтр("ru='Заказ'"));
		Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПустойСтраницыВРежимеПродажи(ЭтоРежимКассыСамообслуживания = Ложь)
	
	Если ЭтоРежимКассыСамообслуживания Тогда
		ТекстСтраницы = НСтр("ru='Начните покупку просканировав товар или выбрав из каталога'");
	Иначе
		ТекстСтраницы = НСтр("ru='Начните продажу, добавив товар сканером или из каталога'");
	КонецЕсли;
	
	Возврат ТекстСтраницы;
	
КонецФункции

&НаКлиенте
Процедура ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ПредыдущийСлойДоДанныхПокупателя
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаЗаменаПрав);
	НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(Ложь);
	Элементы.ДекорацияЗаголовокЗаменаПрав.Заголовок = ЗаголовокЗаменыПрав;
	Элементы.ДекорацияТекстЗаменаПрав.Заголовок = ТекстЗаменыПравДополнительный;
	ТекущийЭлемент = Элементы.КодДляЗаменыПрав;
	Если РежимПлитки Тогда
		ПереключатьсяВРежимПлитки = Ложь;
		ПереключитьНаРежимПлиткиИзПалитры();
	КонецЕсли;
	УстановитьВидимостьЭлементаФормы(Элементы.ОтменитьПарольКассира, ДоступнаОтменаОперацииЗаменыПрав());
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуПоискКартыКартаНеНайдена()
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКартаНеНайдена);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПустаяДополнительнаяГруппа);
	НастроитьЦифровуюПанель();
	ТекущийЭлемент = Элементы.СтрокаПовторныйПоискКарты;
	ЭлементВводаДанныхПокупателя = ТекущийЭлемент;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВспомогательныйСлойЗамороженногоЧека(ТекущийСлойВспомогательнойПанели)
	Если ЭтоЗаменаТоваров Или ЭтоЧекКоррекции Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительноеУправлениеЧеком);
	Иначе
		Если Не (ТекущийСлойВспомогательнойПанели = Элементы.ГруппаПоискСертификатов Или ТекущийСлойВспомогательнойПанели = Элементы.ПанельВводаНаличныхВертикальная) Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительноеУправлениеЧеком);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗаголовокКнопкиОплаты()
	
	Если РежимПлитки Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйТекстЗаголовка = СтрШаблон(НСтр("ru='Оплатить (позиций: %1)'"), Объект.Товары.Количество());
	Элементы.ПерейтиКОплате.Заголовок = НовыйТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьШиринуКолонкиНомерСтроки()
	КоличествоСтрок = Объект.Товары.Количество();
	Если КоличествоСтрок > 99 и ОтображатьНумерациюСтрок
		и Элементы.ТоварыНомерСтроки.Ширина < 3 тогда
		Элементы.ТоварыНомерСтроки.Ширина = 3;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УбратьОтображениеПодсказкиОплатитьБонусами()
	
	Если ПараметрыВводаКодаSMS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаПодтвержденияСписанияБонусов > 0 Тогда
		РассчитатьСуммуОплатыБонусамиПредварительная();
		Если СуммаБонусовПредварительная > 0 И СуммаБонусовПредварительная < СуммаПодтвержденияСписанияБонусов Тогда
			Элементы.ОплатитьБонусами.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗаголовокКнопкиСкидки()
	ЗаголовокСкидок = НСтр("ru='%1'");
	Если СуммаСкидки >= 0 Тогда
		ФорматВыводаСкидки = НСтр("ru = 'ЧДЦ=2; ЧН=0,00; ЧФ=''- Ч'''");
	Иначе
		ФорматВыводаСкидки = НСтр("ru = 'ЧДЦ=2; ЧН=0,00; ЧО=0; ЧФ=''+ Ч'''");
	КонецЕсли;
	НовыйТекстЗаголовка = СтрШаблон(ЗаголовокСкидок, Формат(СуммаСкидки,ФорматВыводаСкидки));
	Элементы.ПоказатьСкидкиНаЧекРасширеннаяПодсказка.Заголовок = НовыйТекстЗаголовка;
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеСкидки()
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыГруппаСкидка, РежимОтображенияСкидки = 0);
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыГруппаПроцентСкидки, РежимОтображенияСкидки = 1);
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьЭлементВыбораСерииПартии(ТекущаяСтрока)
	Если Не Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара Тогда
		Если ТекущаяСтрока.НеобходимостьВводаСерии Тогда
			ТекущийЭлемент = Элементы.ВыборСерии;
		ИначеЕсли ТекущаяСтрока.ИспользоватьПартии Тогда
			ТекущийЭлемент = Элементы.ВыборПартии;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Оборудование

&НаКлиенте
Процедура ВыполнитьПоискШтрихкода(Штрихкод)
	
	Если ЗакрыватьПодборПриВыбореТовара Тогда
		ВыйтиИзРежимаПлитки();
	КонецЕсли;
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	ОтменитьРедактированиеКоличестваТовараПриНеобходимости();
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека) 
		= Элементы.ГруппаНайтиВЧеке И НЕ РежимПоказаСкидок Тогда
		НайтиТоварВЧеке(Штрихкод);
	ИначеЕсли РежимПоказаСкидок И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
		= Элементы.ГруппаНайтиВЧеке Тогда
		НайтиТоварРасшифровкеСкидок(Штрихкод);
	ИначеЕсли Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодНетМарки() Тогда
		Если Не ФормаЗамороженаПослеПробитияЧека() Тогда
			ДобавитьТоварБезМарки();
		КонецЕсли;
	ИначеЕсли Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодОплатаНаличными()
		ИЛИ Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодОплатаНаличнымиБезУчетаШрифтов() Тогда
		Если Не ФормаЗамороженаПослеПробитияЧека() Тогда 
			ОплатитьНаличнымиВТихомРежиме();
		КонецЕсли;
	ИначеЕсли Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодОплатаКартой()
		ИЛИ Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодОплатаКартойБезУчетаШрифтов() Тогда
		Если Не ФормаЗамороженаПослеПробитияЧека() Тогда 
			ОплатитьКартойВТихомРежиме();
		КонецЕсли;
	ИначеЕсли Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодАвтоматическиеСкидки()
		ИЛИ Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодАвтоматическиеСкидкиБезУчетаШрифтов() Тогда
		Если Элементы.РассчитатьСкидки.Доступность И Элементы.РассчитатьСкидки.Видимость Тогда
			РассчитатьСкидкиКлиент();
		КонецЕсли;
	ИначеЕсли ДоступнаОплатаQRКодомПлатежнойКарты(Штрихкод) Тогда
		ОбработатьQRКодПлатежнойКарты(Штрихкод);
	ИначеЕсли Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодПакет()
		ИЛИ Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодПакетБезУчетаШрифтов() Тогда
		ДобавитьПакетКлиент();
	Иначе
		ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
		ОбработатьШтрихкодКлиент(Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартойВТихомРежиме()
	
	Если ЕстьНезаполненныеДанные() Тогда
		
		ТоварыПриАктивизацииСтроки(Элементы.Товары);
		
	Иначе
		
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ОплатитьКартойВТихомРежимеЗавершение", , Истина);
		Иначе
			ОплатитьКартойВТихомРежимеЗавершение(?(НеобходимПересчетАвтоматическихСкидок,
													КодВозвратаДиалога.Да,
													КодВозвратаДиалога.Нет), Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаменуПравКассираКлиент(Штрихкод)
	
	ПользовательДоЗаменыПрав = Объект.ПользовательБД;
	КассирДоЗаменыПрав = Объект.Кассир;
	
	ЗаменитьПраваИВыполнитьТребуемоеДействие(Штрихкод);
	НастроитьФормуПослеЗаменыПрав();
	ОбработатьИзменениеТаблицыТоваровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКассовуюСменуИНайтиКассира(Штрихкод = "")
	
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		ВыполнитьПоискКассираКлиент(Штрихкод);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Кассир)Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяОперация = "ЧекНаВозвратРМК"
		ИЛИ ТекущаяОперация = "ЧекКоррекцииРМК"
		ИЛИ Объект.Товары.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сутки = 86400;
	НужноОткрытьСмену = Ложь;
	НужноЗакрытьСмену = Ложь;
	ЕстьИстекшаяСмена = Ложь;
	
	Для Каждого СтрокаКасса Из ТаблицаКассККМОрганизаций Цикл
		
		Если ЗначениеЗаполнено(СтрокаКасса.НачалоКассовойСмены) Тогда
			
			Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
			
			Если Дата - СтрокаКасса.НачалоКассовойСмены >= Сутки Тогда
				НужноЗакрытьСмену = Истина;
				ЕстьИстекшаяСмена = Истина;
			КонецЕсли;
			
			ВремяНачалаСменыВСекундах = ВремяНачалаСмены - Дата(1, 1, 1);
			
			МинимальноеДатаНачалаСмены = НачалоДня(Дата) + ВремяНачалаСменыВСекундах;
			Если Дата < МинимальноеДатаНачалаСмены Тогда
				МинимальноеДатаНачалаСмены = МинимальноеДатаНачалаСмены - Сутки;
			КонецЕсли;
			
			Если СтрокаКасса.НачалоКассовойСмены < МинимальноеДатаНачалаСмены Тогда
				НужноЗакрытьСмену = Истина;
			КонецЕсли;
			
		Иначе
			НужноОткрытьСмену = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТорговыйОбъектДляВхода) Тогда
		Если НужноОткрытьСмену Или НужноЗакрытьСмену Тогда
			
			Если ТаблицаКассККМОрганизаций.Количество() > 1 Тогда
				ПереключитьНаСтраницуВыбораКассыККМ();
			Иначе
				
				Если НужноЗакрытьСмену Тогда
					
					Если ЕстьИстекшаяСмена Тогда
						ТекстВопроса = НСтр("ru = 'С момента открытия кассовой смены прошло более 24 часов.
							|Закрыть кассовую смену?'");
							ТекстЗаголовка = НСтр("ru = 'Кассовая смена истекла.'");
					Иначе
						ДатаВремяОткрытияСмены = Формат(СтрокаКасса.НачалоКассовойСмены, "ДЛФ=DT");
						ТекстВопроса = СтрШаблон(НСтр("ru = 'Смена открыта: %1
							|Закрыть кассовую смену?'"), ДатаВремяОткрытияСмены);
							ТекстЗаголовка = НСтр("ru = 'Возможно, забыли закрыть смену.'");
					КонецЕсли;
					
					ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьСменуЗавершение", ЭтотОбъект);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ТекстЗаголовка);
					
				ИначеЕсли НужноОткрытьСмену Тогда
					
					ТекстВопроса = НСтр("ru = 'Открыть кассовую смену?'");
					ТекстЗаголовка = НСтр("ru = 'Кассовая смена закрыта.'");
					
					ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСменуПослеОтвета", ЭтотОбъект);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ТекстЗаголовка);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтруктуруДляПроверкиКассовойСмены()
	
	СтруктураДляПроверкиКассовойСмены = Новый Структура();
	СтруктураДляПроверкиКассовойСмены.Вставить("Отказ", Ложь);
	СтруктураДляПроверкиКассовойСмены.Вставить("НужноЗакрытьСмену", Ложь);
	СтруктураДляПроверкиКассовойСмены.Вставить("НужноОткрытьСмену", Ложь);
	СтруктураДляПроверкиКассовойСмены.Вставить("ТекстОшибки", НСтр("ru = ''"));
	СтруктураДляПроверкиКассовойСмены.Вставить("ДанныеКассаККМ");
	СтруктураДляПроверкиКассовойСмены.Вставить("ФИОКассира", НСтр("ru = ''"));
	
	Возврат СтруктураДляПроверкиКассовойСмены;
	
КонецФункции

&НаСервере
Процедура НайтиКассираИПерезаполнитьПрава(Штрихкод)
	
	ВыполнитьПоискКассира(Штрихкод);
	ЗаполнитьТаблицуРолейПользователя();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискКассира(Штрихкод)
	ШтрихкодированиеРМК.ВыполнитьПоискКассира(Объект, Штрихкод);
	Если Не ЗначениеЗаполнено(КассирДляВхода) И ЗначениеЗаполнено(Объект.Кассир) Тогда
		КассирДляВхода = Объект.Кассир;
	КонецЕсли;
	Если Не КассирДляВхода = Объект.Кассир И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
		Объект.Кассир = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодКлиент(Штрихкод)
	
	ИмяИдентификатора = НСтр("ru = 'Обработка.РабочееМестоКассира.ОбработатьШтрихкодКлиент'");
	ФиксироватьСОшибкой = Ложь;
	АвтозавершениеЗамера = Ложь;
	
	ИдентификаторЗамераВремениПоиска = ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяИдентификатора,
		ФиксироватьСОшибкой, АвтозавершениеЗамера);
	
	ИдентификаторСтроки = 0;
	
	ЗаменитьСимволGS1(Штрихкод);
	
	ПараметрыДляОбработкиШтрихкода = Новый Структура();
	ПараметрыДляОбработкиШтрихкода.Вставить("Штрихкод", Штрихкод);
	ПараметрыДляОбработкиШтрихкода.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	ПроверитьНеобходимостьВводаМарки(ПараметрыДляОбработкиШтрихкода);
	
	ДополнитьПараметрыДляОбработкиШтрихкода(ПараметрыДляОбработкиШтрихкода);
	ОповещениеПоискаПоШтрихкоду(Штрихкод, ПараметрыДляОбработкиШтрихкода);
	
	ОбработатьШтрихкодЗавершение(ПараметрыДляОбработкиШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодЗавершение(ПараметрыДляОбработкиШтрихкода)
	
	Если ИспользоватьЗапретПродаж Тогда
		
		ЗапретыПродаж = ПараметрыДляОбработкиШтрихкода.ДействующиеЗапреты;
		
		Если ЗапретыПродаж.Количество() > 0 Тогда
			
			ОткрытьСтраницуЗапретаПродажиПоВремени(ЗапретыПродаж.ВидНоменклатуры,
			ЗапретыПродаж.ВремяНачалаЗапрета, ЗапретыПродаж.ВремяОкончанияЗапрета);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗапрашиватьПодтверждениеВозраста18Плюс Тогда
		Если СостояниеПодтвержденияВозраста = "" ИЛИ СостояниеПодтвержденияВозраста = "Нет18" Тогда
			Если Объект.Товары.Количество() > 0 И ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "СтрокаТовараДобавлена") Тогда
				СтрокаПоИдентификатору = Объект.Товары.НайтиПоИдентификатору(ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки);
				Если ТоварСВозрастнымОграничением(СтрокаПоИдентификатору.ОсобенностьУчета) Тогда
					ПереключитьНаСтраницуПодтвержденияВозраста();
					ДанныеДобавляемогоТовара = ПараметрыДляОбработкиШтрихкода;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОткрытаСтраницаНайтиПоШтрихкоду() Тогда
		ОтменаНайтиПоШтрихкодуКлиент();
	КонецЕсли;
	
	Если ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ТаблицаДляВыбораНоменклатуры") Тогда
		ЗавершитьВводШтрихкодаЗаполнитьТаблицуДляВыбора(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ОшибкаЕГАИС") Тогда
		ОтобразитьОшибкуЕГАИС(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "УпаковкаНеНайдена") Тогда
		ЗавершитьВводШтрихкодаУпаковкаНеНайдена(ПараметрыДляОбработкиШтрихкода.НоменклатураБезУпаковки);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "НеверныйКод") Тогда
		ЗавершитьВводШтрихкодаНеверныйКод();
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "МаркаВведена") Тогда
		
		ПараметрыОбработки = КонтекстПроверкиКонтрольнойМарки();
		ПараметрыОбработки.КодМаркировки = ПараметрыДляОбработкиШтрихкода.Штрихкод;
		
		ОсобенностьУчета = ОсобенностьУчетаНоменклатуры(ПараметрыДляОбработкиШтрихкода.ТекущаяНоменклатура);
		ПараметрыОбработки.ОсобенностьУчета = ОсобенностьУчета;
		ПараметрыОбработки.Организация = ПараметрыДляОбработкиШтрихкода.Организация;
		
		ЗавершитьВводШтрихкодаМаркаВведена(ПараметрыОбработки);
		
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ТоварНеНайденПоМарке") Тогда
		ОткрытьФормуРучногоСопоставленияТовараПриВозможности(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ТоварНеНайденПоШтрихкоду") Тогда
		Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект) Тогда
			ОткрытьФормуРучногоСопоставленияТовараПриВозможности(ПараметрыДляОбработкиШтрихкода);
		КонецЕсли;
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "МаркаНайденаВЧеке") Тогда
		ЗавершитьВводШтрихкодаМаркаНайденаВЧеке(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ПодтвердитьВыборАлкоголя") Тогда
		УточнитьПравильностьНоменклатуры(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "СерияВведена") Тогда
		ВыбратьСериюДляТекущейСтроки();
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "СтрокаТовараДобавлена") Тогда
		ЗавершитьВводШтрихкода(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ДобавленНабор") Тогда
		ЗавершитьВводШтрихкодаНабора();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗамераПробитияЧека) Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамераВремениПоиска, Ложь);
	КонецЕсли;
	
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления)
			= Элементы.ПанельУправленияЧеком
		Или Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ОбластьОперативногоУправленияЧеком Тогда
		
		ВыйтиИзРежимаПлитки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьПараметрыДляОбработкиШтрихкода(ПараметрыДляОбработкиШтрихкода)
	
	ПараметрыДляОбработкиШтрихкода.Вставить("РозничныйВидЦены", РозничныйВидЦены);
	ПараметрыДляОбработкиШтрихкода.Вставить("ЭтоЧекКоррекции", ЭтоЧекКоррекции);
	ПараметрыДляОбработкиШтрихкода.Вставить("ОжидатьВводМарки", ОжидатьВводМарки);
	ПараметрыДляОбработкиШтрихкода.Вставить("СистемаНалогообложенияПоУмолчанию",
		СистемаНалогообложенияОрганизацииПоУмолчанию);
	ПараметрыДляОбработкиШтрихкода.Вставить("ОсновнаяОрганизация", ОсновнаяОрганизация);
	ПараметрыДляОбработкиШтрихкода.Вставить("КонтролироватьЕМРЦ", КонтролироватьЕМРЦ);
	ПараметрыДляОбработкиШтрихкода.Вставить("УчитыватьМРЦ", УчитыватьМРЦ);
	
	// Запреты
	ПараметрыДляОбработкиШтрихкода.Вставить("КэшЗапретовПродаж", КэшЗапретовПродаж);
	ПараметрыДляОбработкиШтрихкода.Вставить("ИспользоватьЗапретПродаж", ИспользоватьЗапретПродаж);
	ПараметрыДляОбработкиШтрихкода.Вставить("ДействующиеЗапреты", Новый Структура());
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ДопускаетсяПрименениеСкидок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискМагнитнойКарты(МагнитныйКод)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
		ПроверитьКассовуюСменуИНайтиКассира(МагнитныйКод);
	ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаЗаменаПрав Тогда
		ВыполнитьЗаменуПравКассираКлиент(МагнитныйКод);
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			
			НайтиДисконтнуюКарту(МагнитныйКод);
			Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(ЭтотОбъект) Тогда
				ЗапроситьДанныеБонусов();
				ЗапроситьДанныеПродаж();
				ИзменитьКартинкуВводПокупателя();
			ИначеЕсли ИспользоватьСерверЛояльностиПолучательДанных И ИспользоватьНовыйАлгоритмЗапросаСЛ Тогда
				СтруктураПараметровКлиента = ПодготовитьСтруктуруПараметровДляПоискаПоМагнитномуКоду(МагнитныйКод);
				ОбработатьПолучениеКартССервераЛояльности(СтруктураПараметровКлиента);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиДисконтнуюКарту(МагнитныйКод)
	
	ДанныеКарты = ШтрихкодированиеРМК.ДанныеКартыЛояльности();
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДанныеКартыЛояльности(МагнитныйКод, ДанныеКарты);
	
	ОчиститьДанныеПокупателя();
	ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, ДанныеКарты);
	
КонецПроцедуры

&НаКлиенте
Функция ПодключеноОборудование(ТипОборудования)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ТипОборудования) Тогда
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ТипОборудования", ТипОборудования);
		СтруктураПоиска.Вставить("Подключено", 1);
		
		МассивОборудования = Оборудование.НайтиСтроки(СтруктураПоиска);
		
		Если МассивОборудования.Количество() > 0
			И ЗначениеЗаполнено(МассивОборудования[0].Ссылка) Тогда
				Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПодключениеОборудованияПоИдентификатору(РезультатВыполнения, СтрокаТЧ) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") Тогда
		
		Если РезультатВыполнения.Результат Тогда
			
			Если СтрокаТЧ.ТипОборудования =
				ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
						"Перечисление.ТипыПодключаемогоОборудования.ДисплейПокупателя") Тогда
				ДисплейПокупателя = СтрокаТЧ.Ссылка;
			ИначеЕсли СтрокаТЧ.ТипОборудования =
					ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
						"Перечисление.ТипыПодключаемогоОборудования.ПринтерЧеков") Тогда
				ПринтерЧеков = СтрокаТЧ.Ссылка;
			Иначе
			КонецЕсли;
			
		Иначе
			
			ОписаниеОшибки = РезультатВыполнения.ОписаниеОшибки;
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "'", "");
			ТекстПредупреждения = СтрШаблон(НСтр("ru = 'При подключении устройства класса %2 произошла ошибка: "" %1 "".';
				|en = 'An error occurred when connecting the %2 device: "" %1 "".'"), РезультатВыполнения.ОписаниеОшибки,
				СтрокаТЧ.ТипОборудования);
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		КонецЕсли;
		
	СтрокаТЧ.Подключено = РезультатВыполнения.Результат;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПолучениеПараметровТерминала(РезультатВыполнения, ПодключаемоеОборудованиеТерминала) Экспорт

	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат
		И ЕстьСвойство(РезультатВыполнения, "ПараметровУстройства") Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("ПодключаемоеОборудование", ПодключаемоеОборудованиеТерминала);
		РезультатПоиска = ТаблицаТерминалы.НайтиСтроки(Отбор);
		
		Если РезультатПоиска.Количество() > 0 Тогда
			
			ПараметрыОборудования = РезультатВыполнения.ПараметровУстройства;
			
			Если ЕстьСвойство(ПараметрыОборудования, "ВыдачиНаличныхДенежныхСредств") Тогда
				
				Для Каждого Элемент Из РезультатПоиска Цикл
					Элемент.ПоддерживаетВыдачуНаличных = ПараметрыОборудования.ВыдачиНаличныхДенежныхСредств;
					Элемент.ПоддерживаетОплатуПоQRКоду = ПараметрыОборудования.ConsumerPresentedQR;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоКодМаркировки(ДанныеМаркировки)
	
	Если Не ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеМаркировки, "ТипИдентификатораТовара") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипИдентификатораТовара = ДанныеМаркировки.ТипИдентификатораТовара;
	
	ТипыШтрихкодовМарок = Новый СписокЗначений;
	ИмяМаркировкиМех = "Перечисление.ТипыИдентификаторовТовараККТ.ИзделияИзНатуральногоМеха";
	ИмяМаркировкиGS1 =	"Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1";
	ИмяМаркировкиВФорматеЕГАИС2 = "Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеЕГАИС2";
	ИмяМаркировкиВФорматеЕГАИС3 = "Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеЕГАИС3";
	
	ТипыШтрихкодовМарок.Добавить(ПредопределенноеЗначение(ИмяМаркировкиМех));
	ТипыШтрихкодовМарок.Добавить(ПредопределенноеЗначение(ИмяМаркировкиGS1));
	ТипыШтрихкодовМарок.Добавить(ПредопределенноеЗначение(ИмяМаркировкиВФорматеЕГАИС2));
	ТипыШтрихкодовМарок.Добавить(ПредопределенноеЗначение(ИмяМаркировкиВФорматеЕГАИС3));
	
	Возврат НЕ ТипыШтрихкодовМарок.НайтиПоЗначению(ТипИдентификатораТовара) = Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ПараметрыДляОбработкиШтрихкода) Экспорт
	
	Если ПустаяСтрока(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодПоиска = Штрихкод;
	
	ФильтрПоискаПоШтрихкоду = Новый Структура;
	ПараметрыСобытийПО = Новый Структура;
	ДобавитьВФильтрМассивУжеДобавленныхСерий = Ложь;
	
	АктивныйСлойСлужебнойИнформацииЧека
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	Если АктивныйСлойСлужебнойИнформацииЧека = Элементы.ОбластьОперативногоУправленияЧеком
		И Элементы.ГруппаОплатаСертификатами.Видимость Тогда
		
			НомерСертификата = Штрихкод;
			НайтиПодарочныйСертификат();
			Возврат;
			
	ИначеЕсли АктивныйСлойСлужебнойИнформацииЧека = Элементы.ОбластьОперативногоУправленияЧеком
		И Элементы.ГруппаВводПромокода.Видимость Тогда
		
		ВведенныйПромокод = Штрихкод;
		НайтиПромокодВДоступномСервисе();
		Возврат;
		
	ИначеЕсли АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаЗаменаПрав
		ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
		
		ФильтрПоискаПоШтрихкоду.Вставить("Пользователи");
		ФильтрПоискаПоШтрихкоду.Вставить("ФизическиеЛица");
		ФильтрПоискаПоШтрихкоду.Вставить("ИнформационныеКарты");
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира
			И ЗначениеЗаполнено(КассирДляВхода) Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("КассирДляВхода", КассирДляВхода);
		КонецЕсли;
		
	ИначеЕсли АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаПлатежнаяСистема Тогда
		
		ОбработатьQRКодПлатежнойСистемы(Штрихкод);
		Возврат;
		
	ИначеЕсли АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаПанельИдентификаторКорзиныНСПК Тогда
		
		ИдентификаторКорзиныНСПК = Штрихкод;
		ИдентификаторКорзиныНСПКЗавершить(Неопределено);
		Возврат;
		
	ИначеЕсли АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаДанныеПокупателя Тогда
		
		ТекущийСлойДанныхПокупателя
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть);
		Если ТекущийСлойДанныхПокупателя = Элементы.ГруппаПоискКарты
			Или ТекущийСлойДанныхПокупателя = Элементы.ГруппаКартаНеНайдена Тогда
			
			ПоследниеЦифрыТелефона = Сред(Штрихкод, 2);
			Если СтрНачинаетсяС(Штрихкод, "*")
				И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследниеЦифрыТелефона) Тогда
				
				Если ИспользоватьСерверЛояльностиПолучательДанных И ИспользоватьНовыйАлгоритмЗапросаСЛ Тогда
					ФильтрПоискаПоШтрихкоду.Вставить("ШаблонНомерТелефонаСЛ");
					ФильтрПоискаПоШтрихкоду.Вставить("ПоследниеЦифрыТелефонаСЛ");
				Иначе
					ФильтрПоискаПоШтрихкоду.Вставить("ШаблонНомерТелефона");
					ФильтрПоискаПоШтрихкоду.Вставить("ПоследниеЦифрыТелефона");
				КонецЕсли;
				ШтрихкодПоиска = "%" + ПоследниеЦифрыТелефона;
				
			Иначе
				ФильтрПоискаПоШтрихкоду.Вставить("ИнформационныеКарты");
			КонецЕсли;
			Если ИспользоватьСерверЛояльностиПолучательДанных И ИспользоватьНовыйАлгоритмЗапросаСЛ Тогда
				ФильтрПоискаПоШтрихкоду.Вставить("ДанныеПокупателя");
			КонецЕсли;
			
		ИначеЕсли ТекущийСлойДанныхПокупателя = Элементы.ОсновнаяГруппаСозданиеКарты Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("ДобавлятьНеизвестнуюКИ");
		ИначеЕсли ТекущийСлойДанныхПокупателя = Элементы.ГруппаОтправкаЧека Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("ДобавлятьНеизвестнуюКИ");
		Иначе
		КонецЕсли;
		
	ИначеЕсли АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаСерииИПартии Тогда
		ФильтрПоискаПоШтрихкоду.Вставить("СерииНоменклатуры", Элементы.Товары.ТекущиеДанные.Номенклатура);
		ДобавитьВФильтрМассивУжеДобавленныхСерий = Истина;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара Тогда
		ФильтрПоискаПоШтрихкоду.Вставить("Номенклатура");
		ДобавитьВФильтрМассивУжеДобавленныхСерий = Истина;
	ИначеЕсли РежимКассыСамообслуживания И ОткрытаСтраницаНайтиПоШтрихкоду() Тогда
		ФильтрПоискаПоШтрихкоду.Вставить("Номенклатура");
		ДобавитьФильтрДляВводаМарки(ФильтрПоискаПоШтрихкоду, Элементы.Товары.ТекущиеДанные);
		Если РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("Пользователи");
		КонецЕсли;
	Иначе
		
		Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект) Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("Номенклатура");
		КонецЕсли;
		Если Не РежимКассыСамообслуживания Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("Пользователи");
			ФильтрПоискаПоШтрихкоду.Вставить("ФизическиеЛица");
			ФильтрПоискаПоШтрихкоду.Вставить("ДобавлятьНеизвестнуюКИ");
		ИначеЕсли РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("Пользователи");
		КонецЕсли;
		Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект) Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("ИнформационныеКарты");
		КонецЕсли;
		
		ФильтрПоискаПоШтрихкоду.Вставить("СерииНоменклатуры");
		ФильтрПоискаПоШтрихкоду.Вставить("СерийныеНомера");
		
		ДобавитьФильтрДляВводаМарки(ФильтрПоискаПоШтрихкоду, Элементы.Товары.ТекущиеДанные);
		
		ДобавитьВФильтрМассивУжеДобавленныхСерий = Истина;
		ПараметрыСобытийПО.Вставить("РегистрацияНовойКарты", Истина);
		
	КонецЕсли;
	
	Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) Тогда
		ФильтрПоискаПоШтрихкоду.Вставить("ЭтоВозвратПродажи");
	КонецЕсли;
	
	Если ДобавитьВФильтрМассивУжеДобавленныхСерий Тогда
		
		МассивУжеДобавленныхСерий = Новый Массив;
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовара.Серия) И СтрокаТовара.УникальностьСерии Тогда
				МассивУжеДобавленныхСерий.Добавить(СтрокаТовара.Серия);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивУжеДобавленныхСерий.Количество() > 0 Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("МассивУжеДобавленныхСерий", МассивУжеДобавленныхСерий);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаЗаменаПрав
		И НЕ АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаДанныеПокупателя
		И НЕ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
			
		Если ПараметрыДляОбработкиШтрихкода.Свойство("ОжидатьВводМарки")
			И ПараметрыДляОбработкиШтрихкода.ОжидатьВводМарки Тогда
			
			ДанныеМаркировки = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Штрихкод);
			ЭтоКодМарки = ЭтоКодМаркировки(ДанныеМаркировки);
				
			Если НЕ ЭтоКодМарки Тогда
				
				ПараметрыДляОбработкиШтрихкода.Вставить("НеверныйКод");
				Возврат;
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПараметровКлиента = ДанныеПоискаПоШтрихкодуСервер(ШтрихкодПоиска);
	СтруктураПараметровКлиента.Вставить("ПараметрыДляОбработкиШтрихкода", ПараметрыДляОбработкиШтрихкода);
	СтруктураПараметровКлиента.Вставить("ОтображатьОстаток", ОтображатьОстаток);
	СтруктураПараметровКлиента.Вставить("ТорговыйОбъект", ТорговыйОбъектДляВхода);
	ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ПараметрыДляОбработкиШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод)
	
	ДанныеШтрихкода = Новый Структура;
	РаботаСоШтрихкодамиПереопределяемый.ЗаполнитьДанныеПоискаПоШтрихкоду(Штрихкод, ЭтотОбъект, ДанныеШтрихкода);
	Возврат ДанныеШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьОбработатьДанныеПоКодуКлиент(СтруктураРезультат) Экспорт
	
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если НЕ СтруктураРезультат.Свойство("ДействиеОтменено") Тогда
		
		Если СтрокаРезультата.Свойство("Карта") Тогда
			СтрокаРезультата.Вставить("Владелец", СтрокаРезультата.Карта);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ПараметрыДляОбработкиШтрихкода = Неопределено) Экспорт
	
	ОжидаетсяМаркаАлкоголя = Ложь;
	Если Не ПараметрыДляОбработкиШтрихкода = Неопределено Тогда
		ОжидаетсяМаркаАлкоголя = ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "НеобходимоВвестиМаркуАлкоголя");
		ПараметрыДляОбработкиШтрихкода.Вставить("ПараметрыШтрихкода", СтруктураПараметровКлиента.ПараметрыШтрихкода);
	КонецЕсли;
	
	АктивныйСлойГруппыДанныхПокупателя
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть);
	ОткрытаСтраницаПоискаКарты = ОткрытаСтраницаПоискаКарты(, АктивныйСлойГруппыДанныхПокупателя);
	
	КоличествоНайденныхЗначений = СтруктураПараметровКлиента.ЗначенияПоиска.Количество();
	Если КоличествоНайденныхЗначений > 1 И РежимКассыСамообслуживания
			И ТекущаяОперация = "" И Не ОткрытаСтраницаПоискаКарты Тогда
		
		ПараметрыТекущейОперации = Новый Структура;
		ПараметрыТекущейОперации.Вставить("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
		ПараметрыТекущейОперации.Вставить("ПараметрыДляОбработкиШтрихкода", ПараметрыДляОбработкиШтрихкода);
		
		НеобходимоеПраво = "ПравоВыбораПриПоискеПоШтрихкодуРМК";
		ТекущаяОперация = "ВыборПриПоискеПоШтрихкодуРМК";
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
		Возврат;
		
	КонецЕсли;
	
	ОткрытаБлокирующаяФорма = Ложь;
	РаботаСоШтрихкодамиКлиентПереопределяемый.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента,
		ОткрытаБлокирующаяФорма);
		
	Если РежимВыбораПодарочногоСертификата И СтруктураПараметровКлиента.ЗначенияПоиска.Количество() > 0 Тогда
		СтрокаРезультата = СтруктураПараметровКлиента.ЗначенияПоиска[0];
		Если СтрокаРезультата.ТипОбъекта = ТипЗнч(ВводТовараПоСтроке)
				И ЗначениеЗаполнено(СтрокаРезультата.Владелец) Тогда
				
			ОбработатьРежимВыбораПодарочногоСертификатаКлиент(СтрокаРезультата.Владелец);
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		
		Если СтруктураПараметровКлиента.ЗначенияПоиска.Количество() > 0 Тогда
			
			СтрокаРезультата = СтруктураПараметровКлиента.ЗначенияПоиска[0];
			ПользовательДоЗаменыПрав = Объект.ПользовательБД;
			КассирДоЗаменыПрав = Объект.Кассир;
			
			ЗаполнитьДанныеПоШтрихкоду(СтрокаРезультата, ПараметрыДляОбработкиШтрихкода);
			ОбработатьИзменениеТаблицыТоваровНаКлиенте();
			
			Если ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "НайденаКартаЛояльности") Тогда
				ЗавершитьВводКартыЛояльностиПоШтрихкоду();
			ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "НайденКассир") Тогда
				
				ВосстанавливатьПользователя = ЗначениеЗаполнено(ТекущаяОперация);
				
				Если ТекущаяОперация = "УдалитьСтрокуРМК" Тогда
					
					Если Не СписокРолейПользователя.НайтиПоЗначению("ПравоУдалитьСтрокуРМК") = Неопределено Тогда
						Строка = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
						
						ВозможноЗакрытьСессиюРегистрацииМарок = ККМПоддерживаетПроверкуКодовМаркировки
							И ЗначениеЗаполнено(Строка.КодМаркировки)
							И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
							И ВозможноЗакрытьСессиюРегистрацииМарок();
						
						Если ВозможноЗакрытьСессиюРегистрацииМарок Тогда
							ЗакрытьСессиюРегистрацииМарок();
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ТекущаяОперация = "УдалитьЧекРМК" Тогда
					
					Если Не СписокРолейПользователя.НайтиПоЗначению("ПравоУдалитьЧекРМК") = Неопределено Тогда
						ВыполнитьОтменуОплатыКлиент();
						РазблокироватьОбъектСервераЛояльности("clientbonuses");
					КонецЕсли;
					
				Иначе
				КонецЕсли;
				
				Если Не ТипОплаты = "СБП" И ЗначениеЗаполнено(ТекущаяОперация) Тогда
					ВыполнитьТекущуюОперацию();
					Если Не ПропуститьОбновлениеТаблицыДляОперации() Тогда
						ОбработатьИзменениеТаблицыТоваровНаКлиенте();
					КонецЕсли;
				КонецЕсли;
				
				Если ВосстанавливатьПользователя Или НЕ ПараметрыИнфоОшибки = Неопределено Тогда
					ВыбратьПользователяДоЗаменыПрав();
				КонецЕсли;
				
				Если ТипОплаты = "СБП" И ЗначениеЗаполнено(ТекущаяОперация) Тогда
					Возврат;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекущаяОперация) Или НЕ ПараметрыИнфоОшибки = Неопределено Тогда
					
					НастроитьФормуПослеЗаменыПрав();
					Возврат;
					
				Иначе
					
					Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
						Если Не ЗначениеЗаполнено(ТорговыйОбъектДляВхода) И Элементы.ГруппаВыборМагазинаДляВхода.Видимость Тогда
							ВывестиСообщениеОбОшибкеАвторизации("ПустойМагазин");
							Возврат;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ТорговыйОбъектДляВхода) И Не ТорговыйОбъектДляВхода = Объект.ТорговыйОбъект Тогда
							СменитьТорговыйОбъект();
						КонецЕсли;
					КонецЕсли;
					
					ИнициализироватьФормуРабочегоМестаКассира();
					ПроверитьКассовуюСменуИНайтиКассира();
					ОткрытьОбщуюСтраницу();
					СформироватьЗаголовокВводКассира();
					
				КонецЕсли;
				
				СформироватьЗаголовок();
				
			ИначеЕсли ТипЗнч(СтрокаРезультата.Владелец) = ТипЗнч(ВводТовараПоСтроке) Тогда
				ОтобразитьСопутствующиеТоварыПриДобавленииНоменклатуры(СтрокаРезультата);
			Иначе
			КонецЕсли;
			
		ИначеЕсли ОткрытаСтраницаПоискаКарты И ИспользоватьСерверЛояльностиПолучательДанных
				И ИспользоватьНовыйАлгоритмЗапросаСЛ Тогда
			
			ОбработатьПолучениеКартССервераЛояльности(СтруктураПараметровКлиента);
			
		ИначеЕсли ОткрытаСтраницаПоискаКарты
			И СохранятьНомерКартыЛояльности(СтруктураПараметровКлиента.ПараметрыШтрихкода.ФильтрПоискаПоШтрихкоду) Тогда
			
			СохранитьНомерКартыЛокально(ПараметрыДляОбработкиШтрихкода.Штрихкод);
			ЗавершитьВводКартыЛояльностиПоШтрихкоду();
			
		Иначе
			
			Если АктивныйСлойГруппыДанныхПокупателя = Элементы.ОсновнаяГруппаСозданиеКарты Тогда
				
				ДанныеМаркировки =
					МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(ПараметрыДляОбработкиШтрихкода.Штрихкод);
				ЭтоКодМарки = ЭтоКодМаркировки(ДанныеМаркировки);
				
				Если НЕ ЭтоКодМарки Тогда
					НоваяКартаНомер = ПараметрыДляОбработкиШтрихкода.Штрихкод;
				КонецЕсли;
				
			ИначеЕсли ОткрытаСтраницаПоискаКарты Тогда
				
				ПереключитьНаСтраницуПоискКартыКартаНеНайдена(); 
				
			ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления)
					= Элементы.ПанельУправленияЧеком
				И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
					= Элементы.ГруппаЗаменаПрав Тогда
				
				ТекущийЭлемент = Элементы.КодДляЗаменыПрав;
				
			ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
				
				Если ЗначениеЗаполнено(КассирДляВхода) Тогда
					Если СуществуетКодАвторизацииУКассира(КассирДляВхода) Тогда
						ВывестиСообщениеОбОшибкеАвторизации("НеВерныйКод");
					Иначе
						ВывестиСообщениеОбОшибкеАвторизации("НеУстановленКод");
					КонецЕсли;
				Иначе
					ВывестиСообщениеОбОшибкеАвторизации("НеОпределенКассир");
				КонецЕсли;
				
			Иначе
				
				СтрокаРезультата = Неопределено;
				ЗаполнитьДанныеПоШтрихкоду(СтрокаРезультата, ПараметрыДляОбработкиШтрихкода);
				ОбработатьИзменениеТаблицыТоваровНаКлиенте();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара И Не РежимВыбораПодарка Тогда
		ЗакрытьПоискТоваровКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоШтрихкоду(СтрокаРезультата, ПараметрыДляОбработкиШтрихкода)
	
	ПараметрыДляОбработкиШтрихкода.Вставить("Объект", Объект);
	
	Если СтрокаРезультата = Неопределено Тогда
		ШтрихкодированиеРМК.СформироватьПараметрыНеизвестногоШтрихкода(ПараметрыДляОбработкиШтрихкода);
		Возврат;
	КонецЕсли;
	
	ВладелецШтрихкода = СтрокаРезультата.Владелец;
	
	Если ВладелецШтрихкода = Неопределено Тогда
		
		ОсновнойТекущийСлой
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть);
		Если СтрокаРезультата.ШаблонШтрихкода = Перечисления.ШаблоныШтрихкодов.Телефон Тогда
			
			ИсходныйНомер = СтрокаРезультата.НомерТелефона;
			МаскаТелефона = ИнтерфейсРМКСлужебныйКлиентСервер.МаскаВводаТелефона();
			Если ОсновнойТекущийСлой = Элементы.ОсновнаяГруппаСозданиеКарты Тогда
				НоваяКартаТелефон = ИнтерфейсРМКСлужебныйКлиентСервер.ПривестиЗначениеКМаскеТелефона(ИсходныйНомер, МаскаТелефона);
			Иначе
				ОтправкаЧекаТелефон
					= ИнтерфейсРМКСлужебныйКлиентСервер.ПривестиЗначениеКМаскеТелефона(ИсходныйНомер, МаскаТелефона);
			КонецЕсли;
			Возврат;
			
		ИначеЕсли СтрокаРезультата.ШаблонШтрихкода = Перечисления.ШаблоныШтрихкодов.АдресЭП Тогда
			
			Если ОсновнойТекущийСлой = Элементы.ОсновнаяГруппаСозданиеКарты Тогда
				НоваяКартаПочта = СтрокаРезультата.Штрихкод;
			Иначе
				ОтправкаЧекаПочта = СтрокаРезультата.Штрихкод;
			КонецЕсли;
			Возврат;
			
		КонецЕсли;
		
	Иначе
	КонецЕсли;
	
	НайденныйКассир = Неопределено;
	ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденногоКассира(ВладелецШтрихкода, ЭтотОбъект, НайденныйКассир);
	Если НЕ НайденныйКассир = Неопределено Тогда
		
		Если РежимКассыСамообслуживания И РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой
				И Не ЗначениеЗаполнено(ТекущаяОперация)
				И Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
					= Элементы.ГруппаЗаменаПрав Тогда
				
			ТекущаяОперация = "ПоказатьВыход";
				
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущаяОперация) И ПараметрыИнфоОшибки = Неопределено Тогда
			Если Не ЗначениеЗаполнено(НайденныйКассир.Кассир) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
			Если ЗначениеЗаполнено(КассирДляВхода) И Не КассирДляВхода = НайденныйКассир.Кассир Тогда
				Возврат;
			Иначе
				КассирДляВхода = НайденныйКассир.Кассир;
			КонецЕсли;
		КонецЕсли;
		
		Объект.Кассир = НайденныйКассир.Кассир;
		Объект.ПользовательБД = НайденныйКассир.ПользовательБД;
		
		ЗаполнитьТаблицуРолейПользователя();
		
		ПараметрыДляОбработкиШтрихкода.Вставить("НайденКассир");
		Возврат;
		
	КонецЕсли;
	
	НайденнаяКартаЛояльности = Неопределено;
	ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(ВладелецШтрихкода,
		НайденнаяКартаЛояльности);
	Если НЕ НайденнаяКартаЛояльности = Неопределено Тогда
		
		ОчиститьДанныеПокупателя();
		ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, НайденнаяКартаЛояльности);
		ПараметрыДляОбработкиШтрихкода.Вставить("НайденаКартаЛояльности");
		ЗаполнитьПараметрыВводаКодаSMS(СтрокаРезультата);
		Возврат;
		
	КонецЕсли;
	
	НоменклатураДляПоискаСерий = Неопределено;
	Если НЕ ФильтрПоискаПоШтрихкоду = Неопределено Тогда
		ФильтрПоискаПоШтрихкоду.Свойство("СерииНоменклатуры", НоменклатураДляПоискаСерий);
	КонецЕсли;
	
	Если НоменклатураДляПоискаСерий = Неопределено Тогда
		
		НайденнаяНоменклатура = Неопределено;
		ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойНоменклатуры(
			СтрокаРезультата, ЭтотОбъект, ПараметрыДляОбработкиШтрихкода, НайденнаяНоменклатура);
		Если НЕ НайденнаяНоменклатура = Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(НайденнаяНоменклатура.СистемаНалогообложения) Тогда
				НайденнаяНоменклатура.СистемаНалогообложения = СистемаНалогообложенияОрганизацииПоУмолчанию;
			КонецЕсли;
			
			Если НЕ НайденнаяНоменклатура.ЭтоНабор Тогда
				ОбщегоНазначенияРМКПереопределяемый.ПереопределитьПараметрыЗаполненияСерийИПартий(
					НайденнаяНоменклатура, ЭтотОбъект);
				ДобавитьСтрокуВТабличнуюЧастьПоШтрихкоду(ПараметрыДляОбработкиШтрихкода, НайденнаяНоменклатура);
				
				Если ПараметрыДляОбработкиШтрихкода.Свойство("СтрокаТовараДобавлена") И Не ПараметрыДляОбработкиШтрихкода.Свойство("МаркаНайденаВЧеке") Тогда
					ИдентификаторСтрокиТовара = ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки;
					Если ПараметрыДляОбработкиШтрихкода.Свойство("МаркаВведена") Тогда
						ИдентификаторСтрокиТовара = ПараметрыДляОбработкиШтрихкода.НомерСтроки;
					КонецЕсли;
					СтрокаДобавленногоТовара = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтрокиТовара);
					ДополнитьСтрокуТовараВычисляемымиДанными(СтрокаДобавленногоТовара);
				КонецЕсли;
			Иначе
				СписокДобавленныхСтрокТоваров.Очистить();
				ДобавитьНаборВТабличнуюЧасть(НайденнаяНоменклатура);
				ПараметрыДляОбработкиШтрихкода.Вставить("ДобавленНабор");
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НайденнаяСерияНоменклатуры = Неопределено;
	ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойСерииНоменклатуры(ВладелецШтрихкода,
		НайденнаяСерияНоменклатуры);
	Если НЕ НайденнаяСерияНоменклатуры = Неопределено Тогда
		
		ПараметрыДляОбработкиШтрихкода.Вставить("СерияВведена");
		ВыборСерии = НайденнаяСерияНоменклатуры;
		Возврат;
		
	КонецЕсли;
	
	НайденнаяПартияНоменклатуры = Неопределено;
	ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойПартииНоменклатуры(ВладелецШтрихкода,
		НайденнаяПартияНоменклатуры);
	Если НЕ НайденнаяПартияНоменклатуры = Неопределено Тогда
		
		ПараметрыДляОбработкиШтрихкода.Вставить("СерияВведена");
		ВыборПартии = НайденнаяПартияНоменклатуры;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтруктураПараметровКлиента.Свойство("ПоказыватьБонусы") Тогда
			
			ШтрихкодОригинал = ДополнительныеПараметры.СтруктураПараметровКлиента.ДанныеПО;
			ОбработатьВыборКартыКлиентаСервераЛояльности(Результат.ЗначенияПоиска[0], ШтрихкодОригинал);
			
			Если ОжидаетсяОбработкаПослеВыбораВладельца Тогда
				ОжидаетсяОбработкаПослеВыбораВладельца = Ложь;
				ЗапроситьДанныеБонусов();
				ЗапроситьДанныеПродаж();
			КонецЕсли;
		ИначеЕсли ДополнительныеПараметры.СтруктураПараметровКлиента.Свойство("ВыборКонтрагента") Тогда
			
			ДанныеКартыКлиента = Новый Структура("Карта,НомерКарты", Неопределено, "");
			ДанныеКартыКлиента.Карта = Результат.ЗначенияПоиска[0].Карта;
			ДанныеКартыКлиента.НомерКарты = Результат.ЗначенияПоиска[0].НомерКарты;
			ИнтерфейсРМКСлужебныйКлиент.ДополнитьФормуЛокальнойКартойКлиента(ЭтотОбъект, ДанныеКартыКлиента);
			Если ОжидаетсяОбработкаПослеВыбораВладельца Тогда
				ОжидаетсяОбработкаПослеВыбораВладельца = Ложь;
				ЗапроситьДанныеБонусов();
				ЗапроситьДанныеПродаж();
			КонецЕсли;
			
		Иначе
		
			ПараметрыДляОбработкиШтрихкода = ДополнительныеПараметры.СтруктураПараметровКлиента.ПараметрыДляОбработкиШтрихкода;
			ОбработатьДанныеПоКодуКлиент(Результат, ПараметрыДляОбработкиШтрихкода);
			ОбработатьШтрихкодЗавершение(ПараметрыДляОбработкиШтрихкода);
			
		КонецЕсли;
	Иначе
		
		КонтрагентВыбран = Ложь;
		ОжидаетсяОбработкаПослеВыбораВладельца = Ложь;
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеОборудованиеПоИдентификаторуЗавершение(Данные, СтрокаТЧ) Экспорт
	
	Если ЕстьСвойство(Данные, "Результат") И Не Данные.Результат Тогда
		
		Данные.ОписаниеОшибки = СтрЗаменить(Данные.ОписаниеОшибки, "'", "");

		ТекстПредупреждения = СтрШаблон(НСтр("ru = 'При подключении устройства произошла ошибка:""%1"".';
			|en = 'An error occurred when connecting the device:""%1"".'"), Данные.ОписаниеОшибки);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		СтрокаТЧ.Подключено = 0;
		
	Иначе
		
		СтрокаТЧ.Подключено = 1;
		
		Если СтрокаТЧ.ТипОборудования = 
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
				"Перечисление.ТипыПодключаемогоОборудования.ЭлектронныеВесы") Тогда
					ТаблицаЭлектронныхВесов = СтрокаТЧ.Ссылка;
		ИначеЕсли СтрокаТЧ.ТипОборудования = 
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
				"Перечисление.ТипыПодключаемогоОборудования.ДисплейПокупателя") Тогда
					ДисплейПокупателя = СтрокаТЧ.Ссылка;
		ИначеЕсли СтрокаТЧ.ТипОборудования =
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
				"Перечисление.ТипыПодключаемогоОборудования.ПринтерЧеков") Тогда
					ПринтерЧеков = СтрокаТЧ.Ссылка;
		Иначе
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьОперациюПакетнойФискализацииКлиент()
	
	ЗакрытьСтраницуИнфоОшибка(Неопределено);
	НачатьПечатьЧека(Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ПовторитьОперациюПакетнойФискализации, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСменуПослеОтвета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьСменуКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораСкидки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Массив") Тогда
		
		ОбработатьВыборУправляемыхСкидок(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартойВТихомРежимеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ОплатитьКартойИПробитьЧекВТихомРежиме()";
		РассчитатьСкидкиКлиент(, Истина);
	Иначе
		ОплатитьКартойИПробитьЧекВТихомРежиме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартойИПробитьЧекВТихомРежиме()
	
	ПереключитьВРежимОплатыНаКлиенте(РежимыРаботыСЧеком.Оплата);
	СерверныйВызов();
	КомандаОплатыКартой = Команды.ОплатаКартой;
	
	ПараметрыОплатыВТихомРежиме = Новый Структура;
	ПараметрыОплатыВТихомРежиме.Вставить("ПробитьЧек", Истина);
	ВыполнитьОплатуКартой(КомандаОплатыКартой, ПараметрыОплатыВТихомРежиме);
	
КонецПроцедуры

&НаКлиенте
Функция ДоступнаОплатаQRКодомПлатежнойКарты(Штрихкод)
	
	Если ОборудованиеПлатежныеСистемыКлиентСервер.ЭтоРеквизитыКартыQR(Штрихкод)
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая Тогда
		
		Для Каждого Терминал Из ТаблицаТерминалы Цикл
			Если Терминал.ПоддерживаетОплатуПоQRКоду Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьQRКодПлатежнойКарты(Штрихкод)
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект) Тогда
		
		Если Элементы.ГруппаОплатаКартой.Видимость Тогда
			Если ЗначениеЗаполнено(РеквизитыQRПлатежнойКарты) Тогда
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'QR-код'"),
					,
					НСтр("ru = 'Обновлен QR-код платежной карты'"),
					БиблиотекаКартинок.ПодтверждениеДействияРМК,
					СтатусОповещенияПользователя.Важное,
					УникальныйИдентификатор);
			КонецЕсли;
			РеквизитыQRПлатежнойКарты = Штрихкод;
			Элементы.ОплатаКартой.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Иначе
			РеквизитыQRПлатежнойКарты = Штрихкод;
			Элементы.ОплатаКартой.Отображение = ОтображениеКнопки.КартинкаИТекст;
			ОплатаКартой(Команды.ОплатаКартой);
		КонецЕсли;
		
	ИначеЕсли Не ФормаЗамороженаПослеПробитияЧека() Тогда 
		РеквизитыQRПлатежнойКарты = Штрихкод;
		ОплатитьКартойВТихомРежиме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыQRКодаПлатежнойКарты()
	
	РеквизитыQRПлатежнойКарты = "";
	Элементы.ОплатаКартой.Отображение = ОтображениеКнопки.Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиВТихомРежиме()
	
	Если ЕстьНезаполненныеДанные() Тогда
		
		ТоварыПриАктивизацииСтроки(Элементы.Товары);
		
	Иначе
		
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ОплатитьНаличнымиВТихомРежимеЗавершение", , Истина);
		Иначе
			ОплатитьНаличнымиВТихомРежимеЗавершение(?(НеобходимПересчетАвтоматическихСкидок, КодВозвратаДиалога.Да, КодВозвратаДиалога.Нет), Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиВТихомРежимеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ОплатитьНаличнымиИПробитьЧекВТихомРежиме()";
		РассчитатьСкидкиКлиент(, Истина);
	Иначе
		ОплатитьНаличнымиИПробитьЧекВТихомРежиме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиИПробитьЧекВТихомРежиме()
	
	ПереключитьВРежимОплатыНаКлиенте(РежимыРаботыСЧеком.Оплата);
	КомандаОплатыНаличными = Команды.ОплатаНаличными;
	ОплатаНаличными(КомандаОплатыНаличными);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВТабличнуюЧастьПоШтрихкоду(ПараметрыДляОбработкиШтрихкода, СтрокаТовары)
	
	Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ТекущаяНоменклатура") Тогда
		Если Не ПараметрыДляОбработкиШтрихкода.ТекущаяНоменклатура = СтрокаТовары.Номенклатура Тогда
			ПараметрыДляОбработкиШтрихкода.Вставить("НеверныйКод");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьЗапретПродаж
		И ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
		
		ДействующиеЗапреты = ОбщегоНазначенияРМК.НаличиеЗапретовПродажи(
			СтрокаТовары.Номенклатура, КэшЗапретовПродаж);
		
		Если ДействующиеЗапреты.Количество() > 0 Тогда
			ПараметрыДляОбработкиШтрихкода.ДействующиеЗапреты = ДействующиеЗапреты;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоКодМарки = ПараметрыДляОбработкиШтрихкода.ПараметрыШтрихкода.ЭтоКодМаркировки;
	ТекущийШтрихкод = СтрокаТовары.Штрихкод;
	
	// Маркируемый товар добавляем отдельной строкой.
	Если СтрокаТовары.Маркируемый Тогда
		
		Если ЭтоЧекКоррекции Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭтоКодМарки И ОбщегоНазначенияРМК.ЭтоАлкогольнаяПродукция(СтрокаТовары.ОсобенностьУчета) Тогда
			НужнаПроверкаСтатусаМарки = Ложь;
			ШтрихкодированиеРМКПереопределяемый.ЗаполнитьПризнакНеобходимостиПроверкиСтатусаМарки(НужнаПроверкаСтатусаМарки);
			Если НужнаПроверкаСтатусаМарки Тогда
				ПараметрыДляОбработкиШтрихкода.Вставить("СтрокаТовары", СтрокаТовары);
				ШтрихкодированиеРМКПереопределяемый.ПроверитьСтатусМарки(ПараметрыДляОбработкиШтрихкода);
				Если ПараметрыДляОбработкиШтрихкода.Свойство("ОшибкаЕГАИС") Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоКодМарки Тогда
			
			// Проверка на наличие марки.
			МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("КодМаркировки", ТекущийШтрихкод));
				
			Если МассивСтрок.Количество() > 0 Тогда
				ПараметрыДляОбработкиШтрихкода.Вставить("МаркаНайденаВЧеке", Истина);
				ПараметрыДляОбработкиШтрихкода.Вставить("НомерСтрокиНайденнойМарки", МассивСтрок[0].ПолучитьИдентификатор());
				Возврат;
			КонецЕсли;
			
			// Найти строку, подставить туда код марки и вернуться.
			Если ПараметрыДляОбработкиШтрихкода.Свойство("НомерСтроки") Тогда
				
				НайденнаяСтрока = ПараметрыДляОбработкиШтрихкода.Объект.Товары.НайтиПоИдентификатору(
					ПараметрыДляОбработкиШтрихкода.НомерСтроки);
				
				Если Не НайденнаяСтрока = Неопределено Тогда
					
					Если НайденнаяСтрока.Количество = 0 И СтрокаТовары.Количество > 0 Тогда
						НайденнаяСтрока.Количество = СтрокаТовары.Количество;
						НайденнаяСтрока.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок;
					КонецЕсли;
					
					НайденнаяСтрока.КодМаркировки = ТекущийШтрихкод;
					ПараметрыДляОбработкиШтрихкода.Вставить("МаркаВведена");
					ПараметрыДляОбработкиШтрихкода.Вставить("Организация", НайденнаяСтрока.Организация);
					ШтрихкодированиеРМК.РазобратьМаркуИЗаполнитьДанные(НайденнаяСтрока, ТекущийШтрихкод, СтрокаТовары.ОсобенностьУчета,
						ПараметрыДляОбработкиШтрихкода);
					Возврат;
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ПараметрыДляОбработкиШтрихкода.Свойство("НеобходимоВвестиМарку") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработатьВыборТовараСервер(СтрокаТовары);
	
	ПараметрыДляОбработкиШтрихкода.Вставить("СтрокаТовараДобавлена");
	Если СтрокаТовары.Количество = 0 Тогда
		ПараметрыДляОбработкиШтрихкода.Вставить("ДобавлятьВесСПодключенныхВесов");
	КонецЕсли;
	
	ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки = Элементы.Товары.ТекущаяСтрока;
	
	Если СтрокаТовары.Маркируемый Тогда
		
		НоваяСтрока = Объект.Товары.НайтиПоИдентификатору(ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки);
		
		Если ЭтоКодМарки Тогда
			НоваяСтрока.КодМаркировки = ТекущийШтрихкод;
			НоваяСтрока.Штрихкод = "";
		КонецЕсли;
		
		ШтрихкодированиеРМК.РазобратьМаркуИЗаполнитьДанные(НоваяСтрока, ТекущийШтрихкод, СтрокаТовары.ОсобенностьУчета,
			ПараметрыДляОбработкиШтрихкода);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКассовуюСменуИНайтиКассираВФоне()
	ПроверитьКассовуюСменуИНайтиКассира();
КонецПроцедуры

#КонецОбласти

#Область Общее

&НаКлиенте
Процедура ОткрытьФормуОбменаДаннымиКлиент()
	
 	Если ЗапускатьОбменИзИнтерфейсаРМК
		И Не (СписокРолейПользователя.НайтиПоЗначению("ВыполнениеСинхронизацииДанных") = Неопределено) Тогда
		
		Если УзлыОбмена.Количество() = 1 Тогда
			
			УзелОбмена = УзлыОбмена[0].Значение;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("УзелИнформационнойБазы", УзелОбмена);
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗакрытиеФормыОбмена", ЭтотОбъект);
			
			ОткрытьФорму("Обработка.ВыполнениеОбменаДанными.Форма",
			ПараметрыФормы, ЭтаФорма, УзелОбмена.УникальныйИдентификатор(),,,ОповещениеОЗакрытии,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
		Иначе
			
			ЗаголовокПредупреждения = НСтр("ru = 'Обмен данными'");
			ТекстПредупреждения = НСтр("ru = 'Обнаружено несколько настроек синхронизации.
				|Обратитесь к администратору за помощью в выборе подходящей настройки.'");
			ПоказатьПредупреждение(,ТекстПредупреждения, , ЗаголовокПредупреждения);

			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыОбмена(Результат, Параметры) Экспорт
	
	ДатаОбновления = МенеджерОборудованияКлиент.ДатаСеанса();
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("Дата", ДатаОбновления);
	ОбновитьДанныеБыстрыхТоваров();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтатусЗавершенияРаботыСЧеком()
	
	РаботаСЧекомЗавершена = (Объект.Товары.Количество() = 0 ИЛИ ФормаЗамороженаПослеПробитияЧека());
	ДанныеЧекаОчищены = Объект.Товары.Количество() = 0;
	РезультатФункции = Новый Структура("РаботаСЧекомЗавершена,ДанныеЧекаОчищены", РаботаСЧекомЗавершена, ДанныеЧекаОчищены);
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция РаботаСЧекомЗавершена(ЗаголовокПредупреждения = "")
	
	СтатусЗавершенияРаботыСЧеком = ПолучитьСтатусЗавершенияРаботыСЧеком();	
	РаботаСЧекомЗавершена = СтатусЗавершенияРаботыСЧеком.РаботаСЧекомЗавершена;	
	Если НЕ РаботаСЧекомЗавершена Тогда	
		ТекстПредупреждения = НСтр("ru='Перед началом операции необходимо пробить, удалить или отложить текущий чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения, , ЗаголовокПредупреждения);			
	ИначеЕсли Не СтатусЗавершенияРаботыСЧеком.ДанныеЧекаОчищены Тогда	
		РазморозитьФормуПослеПробитияЧека();	
	КонецЕсли;	
	Возврат РаботаСЧекомЗавершена;
			
КонецФункции

&НаКлиенте
Функция ПрерватьОбработкуОповещения()
	
	ЭлементГруппаСлоевДополнительнаяОбласть = Элементы.ГруппаСлоевДанныеПокупателяДополнительнаяОбласть;
	ОткрытаСтраницаПоискаКартыВводСМС = ОткрытаСтраницаПоискаКарты()
		И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ЭлементГруппаСлоевДополнительнаяОбласть)
			= Элементы.ГруппаПодтверждениеСМС;
				
	Возврат Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодтверждениеВозраста
		ИЛИ ВыбранБанковскийПлатеж
		ИЛИ ПриемАванса
		ИЛИ ПриемАвансаПоЗаказу
		ИЛИ ЭтоВозвратАванса
		ИЛИ (ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) И Не ТекущаяОперация = "РучноеПодтверждениеМаркиРМК")
		ИЛИ (ПробитыеЧеки.Количество() > 0 И (Не ФормаЗамороженаПослеПробитияЧека()))
		ИЛИ ОткрытаСтраницаПоискаКартыВводСМС;
	
КонецФункции

&НаКлиенте
Процедура НачатьПечатьЧека(ЭтоПакетнаяФискализация = Ложь)
	
	Если СуммаОплаченоБН > 0 И НЕ ТранзакцияПоКартеЗавершена И НЕ ЭтоЧекКоррекции И Не ЭтоПакетнаяФискализация Тогда
		ПровестиОплатуПоКарте();
		Возврат;
	КонецЕсли;
	
	ПробитьЧекКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекКлиент()
	
	ОтборСтрок = Неопределено;
	Если НЕ ВыбраннаяОрганизация = Неопределено И НЕ ВыбраннаяСистемаНалогообложения = Неопределено Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура(ВыбраннаяОрганизацияИСНО());
	КонецЕсли;
	Элементы.Товары.ОтборСтрок = ОтборСтрок;
	ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
	РассчитатьСуммыОплаты();
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПробитьЧекНаКлиентеЗавершение", ЭтотОбъект);
	
	Отбор = Новый Структура("КассаККМ", Объект.КассаККМ);
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	Если Не СтрокаКассы.ИспользоватьБезПодключенияОборудования Тогда
		ИдентификаторУстройстваФР = ПодключаемоеОборудование;
	Иначе
		ИдентификаторУстройстваФР = "АвтономнаяККТ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) Тогда
		
		ТекущийЧекЭлектронный = ТребуетсяПробитьЭлектронныйЧек();
		ПараметрыПробитияЧека = Новый Структура("ОповещениеОЗавершении, ИдентификаторУстройстваФР, БумажныйЧек",
			ОповещениеПриЗавершении, ИдентификаторУстройстваФР, (Не ТекущийЧекЭлектронный));
			
			Если ОжидаемоеКоличествоЧеков >= 1 Тогда
				ПодготовитьДанныеЧековДляФискализации(ПараметрыПробитияЧека);
			Иначе
				
				ТекстСообщения =
					НСтр("ru = 'Для товаров из списка покупок не удалось определить системы налогообложения.'");
				ОткрытьСтраницуИнфоОшибка(ТекстСообщения);
				
			КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОткрытьСтраницуИнфоОшибка(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяПробитьЭлектронныйЧек()
	
	РезультатФункции = ИнтерфейсРМКСлужебныйКлиент.ЗаполненаКонтактнаяИнформацияДляОтправкиЧека(ЭтотОбъект)
		И (ПробитиеСоСтраницыОтправкиЧека Или (Не ХочуБумажныйЧек) Или (Не ПечататьБумажныйЧек = ХочуБумажныйЧек));
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ЭтоПакетнаяОперацияФискализации()
	
	Если СуммаОплаченоБН > 0 И ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации) Тогда
		Если ПечататьКороткийСлипЧек Тогда
			Возврат Истина;
		ИначеЕсли ВыдаватьНаличныеНаКассе И СуммаНаличныхКВыдаче > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ФискализироватьЧек(Контекст, ДополнительныеДанные, ОповещениеПриЗавершении, СистемаНалогообложения)
	
	ИмяИдентификатора = НСтр("ru = 'Обработка.РабочееМестоКассира.ФискализироватьЧек'");
	ФиксироватьСОшибкой = Ложь;
	АвтозавершениеЗамера = Ложь;
	ПараметрыПакетнойОперации = Неопределено;
	
	ИдентификаторЗамераПробитияЧека = ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяИдентификатора,
		ФиксироватьСОшибкой, АвтозавершениеЗамера);
		
	ИдентификаторУстройстваФР = ДополнительныеДанные.ИдентификаторУстройстваФР;
	ТранспортныйМодуль = ДополнительныеДанные.ТранспортныйМодуль;
	
	ОбщиеПараметры = ДанныеДляПробитияЧека(Контекст, ДополнительныеДанные, СистемаНалогообложения);
	
	Отказ = ДополнительныеДанные.Отказ;
	ТекстОшибки = ДополнительныеДанные.ТекстОшибки;
	ЕстьПродукцияЕГАИС = ДополнительныеДанные.ЕстьПродукцияЕГАИС;
	
	Если Отказ Тогда
		
		Если ПустаяСтрока(ТекстОшибки) Тогда
			ТекстОшибки = НСтр("ru='Ошибка формирования исходных данных для фискализации чека'");
		КонецЕсли;
		
		ДополнительныеДанные.ТекстОшибки = ТекстОшибки;
		
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамераПробитияЧека, Ложь);
		
		Доступность = Истина;
		ОшибкаФормированияИсходныхДанных = Истина;
		
		Если ТранзакцияПоКартеЗавершена Тогда
			ОбработатьОтменуОплаты(, ТекстОшибки, ОшибкаФормированияИсходныхДанных);
		Иначе
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка пробития чека.'");
			Если Не ДополнительныеДанные.ПечататьБумажныйЧек Тогда
				ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
			КонецЕсли;
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ДополнительныеДанные.ПечататьБумажныйЧек Тогда
		
		Если ЗначениеЗаполнено(ОтправкаЧекаПочта) И (Не РежимКассыСамообслуживания)
				И ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ОтправкаЧекаПочта) Тогда
			ОбщиеПараметры.ПокупательEmail = ОтправкаЧекаПочта;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтправкаЧекаТелефон) И НЕ ЗначениеЗаполнено(ОбщиеПараметры.ПокупательEmail) Тогда
			ОбщиеПараметры.ПокупательНомер = ОтправкаЧекаТелефон;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщиеПараметры.Электронно = НЕ ДополнительныеДанные.ПечататьБумажныйЧек;
	
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ЕстьПродукцияЕГАИС", ЕстьПродукцияЕГАИС);
	
	ДополнительныеПараметры = Неопределено;
	
	Если ЕстьПродукцияЕГАИС Тогда
		
		Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
		ОбщиеПараметры.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", ЕстьПродукцияЕГАИС);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭквайринговыйТерминалВыполненияОперации) Тогда
		
		ТекущийТерминал = ЭквайринговыйТерминалВыполненияОперации;
		СтруктураПоиска = Новый Структура("ЭквайринговыйТерминал", ТекущийТерминал);
		
		РезультатПоиска = ТаблицаТерминалы.НайтиСтроки(СтруктураПоиска);
		
		// Пакетная операция фискализации (оплата картой с последующей фискализацией)
		Если ЭтоПакетнаяОперацияФискализации() И НЕ РезультатПоиска[0].ИспользоватьБезПодключенияОборудования Тогда
			
			ДанныеЗаполнения = Новый Структура();
			ДанныеЗаполнения.Вставить("ИдентификаторЭТ", ЭквайринговыйТерминалВыполненияОперации);
			ДанныеЗаполнения.Вставить("СуммаОплатыКартой", СуммаОплаченоБН);
			
			Если РезультатПоиска.Количество() > 0 Тогда
				
				ДанныеЗаполнения.Вставить("ВидОплаты", РезультатПоиска[0].ВидОплаты);
				ДанныеЗаполнения.Вставить("ПроцентКомиссии", РезультатПоиска[0].ПроцентКомиссииПриПродаже);
				ДанныеЗаполнения.Вставить("ИдентификаторЭТ", РезультатПоиска[0].ПодключаемоеОборудование);
				ДанныеЗаполнения.Вставить("РеквизитыQRПлатежнойКарты", РеквизитыQRПлатежнойКарты);
				
			КонецЕсли;
			
			Если СуммаНаличныхКВыдаче > 0 И ВыдаватьНаличныеНаКассе Тогда
				
				СведенияДляВыдачиНаличных = Новый Структура();
				СведенияДляВыдачиНаличных.Вставить("СуммаВыдачи", СуммаНаличныхКВыдаче);
				СведенияДляВыдачиНаличных.Вставить("ОрганизацияВыдачи", ВыбраннаяОрганизация);
				ДанныеЗаполнения.Вставить("ПараметрыВыдачиНаличных", СведенияДляВыдачиНаличных);
				ДанныеЗаполнения.Вставить("ДанныеЧекаПродажи", ЧекККМВОбработке);
				
			КонецЕсли;
			
			ЗаполнитьДанныеДляПакетнойФискализации(ОбщиеПараметры, ПараметрыПакетнойОперации, ДанныеЗаполнения);
			
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторЧекаВОчереди = 
		ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДобавитьЧекВОчередьЧековККТ(ОбщиеПараметры,
			ПараметрыПакетнойОперации);
	
	Если ОбщиеПараметры.АвтономнаяККТ Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
		ДополнительныеПараметры.Вставить("КассаККМ", Неопределено);
	Иначе
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КассаККМ", ОбщиеПараметры.КассаККМ);
		ПодключитьОбработчикОжидания("ПроверитьСтатусЧекаНаКлиенте", 1, Истина);
	КонецЕсли;
	
	МенеджерОборудованияКлиент.ФискализацияЧековВОчереди(РазрешенаАвтоматическаяФискализация, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДляПакетнойФискализации(ОбщиеПараметры, ПараметрыПакетнойФискализации, ДанныеДляЗаполнения)
	
	ОбщегоНазначенияРМК.ЗаполнитьДанныеДляПакетнойФискализации(ОбщиеПараметры,
		ПараметрыПакетнойФискализации, ДанныеДляЗаполнения);
	
КонецПроцедуры

&НаСервере
Функция ДанныеДляПробитияЧека(Контекст, ИсходныеДанные, СистемаНалогообложения)
	
	ЕстьПродукцияЕГАИС = ИсходныеДанные.ЕстьПродукцияЕГАИС;
	Отказ = ИсходныеДанные.Отказ;
	ТекстОшибки = ИсходныеДанные.ТекстОшибки;
	БумажныйЧек = ИсходныеДанные.ПечататьБумажныйЧек;
	СворачиватьСтрокиПриПечатиЧека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНастройкаРМК,
		"СворачиватьСтрокиПриПечатиЧека");
	
	Если Не ККМПоддерживаетПроверкуКодовМаркировки Тогда
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.КонтрольнаяМарка = СтрокаТовара.КодМаркировки;
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаписатьЧекККМПередПробитием(ЭтотОбъект, Отказ, ТекстОшибки,
		СистемаНалогообложения);
	
	Если Не ЗначениеЗаполнено(ЧекККМВОбработке) И Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		ИсходныеДанные.Отказ = Отказ;
		ИсходныеДанные.ТекстОшибки = НСтр("ru = 'Не заполнен реквизит ""ЧекККМВОбработке"".'");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Отказ Тогда
		ИсходныеДанные.Отказ = Отказ;
		ИсходныеДанные.ТекстОшибки = ТекстОшибки;
		Возврат Неопределено;
	КонецЕсли;
	
	Контекст.Вставить("ЧекККМСсылка", ЧекККМВОбработке);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЕстьПродукцияЕГАИС", ЕстьПродукцияЕГАИС);
	ДополнительныеПараметры.Вставить("ПечататьБумажныйЧек", ПечататьБумажныйЧек);
	ДополнительныеПараметры.Вставить("СистемаНалогообложения", СистемаНалогообложения);
	ДополнительныеПараметры.Вставить("СворачиватьСтрокиПриПечатиЧека", СворачиватьСтрокиПриПечатиЧека);
	ДополнительныеПараметры.Вставить("ОсобенностиУчетаВозвращаемойМаркируемойПродукции",
		ОсобенностиУчетаВозвращаемойМаркируемойПродукции);
	ДополнительныеПараметры.Вставить("ВариантЗаполненияМестаРасчетов", ВариантЗаполненияМестаРасчетов);
	ДополнительныеПараметры.Вставить("ВариантЗаполненияКассира", ВариантЗаполненияКассира);
	ДополнительныеПараметры.Вставить("РабочееМестоКассира", Истина);
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	
	ОбщиеПараметры = ОбщегоНазначенияРМК.ДанныеДляПробитияЧека(ЧекККМВОбработке, ДополнительныеПараметры);
		
	Если ЕстьСвойство(ОбщиеПараметры, "ШаблонЧека") И НЕ ЗначениеЗаполнено(ОбщиеПараметры.ШаблонЧека) Тогда
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьШаблонЧека(ЧекККМВОбработке, ОбщиеПараметры, ТекущаяНастройкаРМК);
	КонецЕсли;
	
	ИсходныеДанные.ЕстьПродукцияЕГАИС = ДополнительныеПараметры.ЕстьПродукцияЕГАИС;
	
	Если ЕстьСвойство(ОбщиеПараметры, "ПозицииЧека") Тогда
		ДополнитьДаннымиМарок(ОбщиеПараметры.ПозицииЧека);
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьСтатусЧекаНаКлиенте()
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("ОписаниеОшибки", НСтр("ru = ''"));
	
	ПроверитьСтатусЧека(РезультатВыполнения);
	Если ЗначениеЗаполнено(РезультатВыполнения.Результат) Тогда
		ПробитьЧекНаКлиентеЗавершение(РезультатВыполнения, Неопределено);
	Иначе
		ПодключитьОбработчикОжидания("ПроверитьСтатусЧекаНаКлиенте", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтатусЧека(РезультатВыполнения)
	
	Если ЕстьСвойство(ЧекККМВОбработке, "ИдентификаторЧекаВОчереди") Тогда
		
		ДанныеСтатусаЧека =
		ОборудованиеЧекопечатающиеУстройстваВызовСервера.ПолучитьСтатусЧекаВОчереди(
			ЧекККМВОбработке.ИдентификаторЧекаВОчереди);
		
	Иначе
		
		ДанныеСтатусаЧека =
		ОборудованиеЧекопечатающиеУстройстваВызовСервера.ПолучитьСтатусЧекаВОчереди(
			XMLСтрока(ЧекККМВОбработке));
		
	КонецЕсли;
	
	ПараметрыДляЗаписиЧека = Новый Структура;
	ПараметрыДляЗаписиЧека.Вставить("Результат", Неопределено);
	ПараметрыДляЗаписиЧека.Вставить("ЧекККМСсылка", Неопределено);
	
	СтатусЧека = Неопределено;
	Если ЕстьСвойство(ДанныеСтатусаЧека, "СтатусЧека") Тогда
		СтатусЧека = ДанныеСтатусаЧека.СтатусЧека;
		Если СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Ошибка Тогда
			ПараметрыДляЗаписиЧека.Результат = Ложь;
		ИначеЕсли СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Фискализирован Тогда
			ПараметрыДляЗаписиЧека.Результат = Истина;
		Иначе
			ПараметрыДляЗаписиЧека.Результат = Неопределено;
		КонецЕсли;
	Иначе
		СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Ошибка;
		ПараметрыДляЗаписиЧека.Результат = Ложь;
	КонецЕсли;
	Если ЕстьСвойство(ДанныеСтатусаЧека, "ДокументОснование") Тогда
		ПараметрыДляЗаписиЧека.ЧекККМСсылка = ДанныеСтатусаЧека.ДокументОснование;
	КонецЕсли;
	
	Если ЕстьСвойство(ДанныеСтатусаЧека, "РезультатПакетнойОперации") Тогда
		
		ПараметрыДляЗаписиЧека.Вставить("РезультатПакетнойОперации", ДанныеСтатусаЧека.РезультатПакетнойОперации);
		
		ДанныеПакетнойОперации = ДанныеСтатусаЧека.РезультатПакетнойОперации;
		
		Если ЭтоОшибкаФискализацииЧекаВыдачиВПакетномРежиме(ДанныеПакетнойОперации) Тогда
			ОбщегоНазначенияРМК.ЗаполнитьОплатуКартойДляПакетнойФискализации(ДанныеСтатусаЧека.ДокументОснование,
				ДанныеПакетнойОперации.РезультатВыполненияЭквайринговойОперации,
				ДанныеПакетнойОперации.ПараметрыЭквайринговойОперации);
		КонецЕсли;
		
	КонецЕсли;
	
	ПробитьЧекЗавершение(ПараметрыДляЗаписиЧека);
	
	Если СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Фискализирован Тогда
		РезультатВыполнения.Результат = Истина;
	ИначеЕсли СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Ошибка Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтатусаЧека) Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка при пробитии чека на ККТ.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , ДанныеСтатусаЧека.ТекстОшибки);
			
			ОборудованиеЧекопечатающиеУстройстваВызовСервера.УдалитьЧекИзОчереди(ДанныеСтатусаЧека.ДокументОснование);
			
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ДанныеСтатусаЧека.ТекстОшибки;
		Иначе
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка заполнения данных чека. Обратитесь к администратору.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , ,);
			
			ОборудованиеЧекопечатающиеУстройстваВызовСервера.УдалитьЧекИзОчереди(ЧекККМВОбработке);
			
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = НСтр("ru = 'Ошибка заполнения данных чека. Обратитесь к администратору.'");
		КонецЕсли;
		
	Иначе
		РезультатВыполнения.Результат = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСтатусаЧека) = Тип("Структура") Тогда
		
		РезультатВыполнения.Вставить("ТипПакетнойОперации", ДанныеСтатусаЧека.ТипПакетнойОперации);
		РезультатВыполнения.Вставить("РезультатПакетнойОперации", ДанныеСтатусаЧека.РезультатПакетнойОперации);
		РезультатВыполнения.Вставить("ФискализированныйЧек", ДанныеСтатусаЧека.ДокументОснование); // АПК:1036
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекНаКлиентеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Доступность = Истина;
	ЭтоПоследнийЧекСписка = Истина;
	НужноЗаморозитьФорму = ЛожЬ;
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельУправленияЧеком, Истина);
	
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		Если СуммаОплаченоСертификатамиНСПК > 0 Тогда
			Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
				ПередатьДанныеФискальногоЧекаНСПК();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ТранзакцияПоКартеЗавершена = Ложь;
		ТипОплаты = "";
		ТекущаяОперация = "";
		ЧекККМВОбработке = Неопределено;
		
		ОжидаемоеКоличествоЧеков = ОжидаемоеКоличествоЧеков -1;
		
		Если ЗначениеЗаполнено(ОтложенныйЧек) Тогда
			ОтложенныйЧек = Неопределено;
		КонецЕсли;
		
		ЭтоПоследнийЧекСписка = ОжидаемоеКоличествоЧеков < 1;
		СписатьРазблокироватьБонусныеБаллы();
		СписатьРазблокироватьПодарочныеСертификаты(Истина);
		
		Если ЭтоПоследнийЧекСписка Тогда
			
			Если ККМПоддерживаетПроверкуКодовМаркировки
				И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
				И ВозможноЗакрытьСессиюРегистрацииМарок(Истина) Тогда
				ЗакрытьСессиюРегистрацииМарок();
			КонецЕсли; 
			
			ВыполнитьДействияПослеПробитияПоследнегоЧека(НужноЗаморозитьФорму);
			
		КонецЕсли;
		
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		
		Если ЗначениеЗаполнено(ИдентификаторЗамераПробитияЧека) Тогда
			 ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамераПробитияЧека, Ложь);
		КонецЕсли;
		
	Иначе
		
		Если ВыдаватьНаличныеНаКассе И ЕстьСвойство(РезультатВыполнения, "ТипПакетнойОперации")
			И РезультатВыполнения.ТипПакетнойОперации =
				ПредопределенноеЗначение("Перечисление.ТипыПакетнойОперацииВОчередиЧеков.ПродажаСВыдачейНаличных") Тогда
			
			Если ЕстьСвойство(РезультатВыполнения, "РезультатПакетнойОперации") Тогда
				
				РезультатПакетнойОперации = РезультатВыполнения.РезультатПакетнойОперации;
				
				ОформитьДокументВозвратаПослеОшибкиВыдачиНаличных =
					ЕстьСвойство(РезультатПакетнойОперации, "РезультатФискализацииЧекаВозврата")
					И ЗначениеЗаполнено(РезультатПакетнойОперации.РезультатФискализацииЧекаВозврата)
					И ЕстьСвойство(РезультатПакетнойОперации, "ПараметрыПродажаСВыдачейНаличных")
					И ЗначениеЗаполнено(РезультатПакетнойОперации.ПараметрыПродажаСВыдачейНаличных)
					И ЕстьСвойство(РезультатПакетнойОперации.ПараметрыПродажаСВыдачейНаличных, "ДокументОснованиеВыдачи")
					И ЕстьСвойство(РезультатВыполнения, "ФискализированныйЧек") 
					И ЕстьСвойство(РезультатПакетнойОперации.РезультатФискализацииЧекаВозврата, "НомерЧекаККТ")
					И ЕстьСвойство(РезультатПакетнойОперации.РезультатФискализацииЧекаВозврата, "НомерСменыККТ")
					И ЕстьСвойство(РезультатПакетнойОперации, "РезультатВыполненияЭквайринговойОперации");
					
				Если ОформитьДокументВозвратаПослеОшибкиВыдачиНаличных Тогда
					
						ПараметрыЭквайринговойОперации = Новый Структура();
						ПараметрыЭквайринговойОперации.Вставить("ИдентификаторУстройства");
						ПараметрыЭквайринговойОперации.Вставить("НомерЧекаЭТ");
						ПараметрыЭквайринговойОперации.Вставить("СсылочныйНомер");
						ПараметрыЭквайринговойОперации.Вставить("НомерКарты");
						ЗаполнитьЗначенияСвойств(ПараметрыЭквайринговойОперации,
							РезультатПакетнойОперации.РезультатВыполненияЭквайринговойОперации);
					
						НомерЧекаККМ = Число(РезультатПакетнойОперации.РезультатФискализацииЧекаВозврата.НомерЧекаККТ);
						НомерСменыККМ = Число(РезультатПакетнойОперации.РезультатФискализацииЧекаВозврата.НомерСменыККТ);
						
						СсылкаНаЧекВыдачиНаличных = РезультатПакетнойОперации.ПараметрыПродажаСВыдачейНаличных.ДокументОснованиеВыдачи;
						ЗаменитьЧекВыдачиНаличныхНаЧекВозвратаНаКлиенте(СсылкаНаЧекВыдачиНаличных,
							РезультатВыполнения.ФискализированныйЧек, НомерЧекаККМ, НомерСменыККМ, ПараметрыЭквайринговойОперации);
						
				КонецЕсли;
				
				ТекстОшибки = "";
				Если ТекстОшибки = "" И ЕстьСвойство(РезультатПакетнойОперации, "РезультатФискализацииЧекаВыдачи") Тогда
					РезультатВложеннойОперации = РезультатПакетнойОперации.РезультатФискализацииЧекаВыдачи;
					Если ЕстьСвойство(РезультатВложеннойОперации, "ОписаниеОшибки")
						И ЗначениеЗаполнено(РезультатВложеннойОперации.ОписаниеОшибки) Тогда
							ТекстОшибки = РезультатВложеннойОперации.ОписаниеОшибки;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекстОшибки = "" И ЕстьСвойство(РезультатПакетнойОперации, "РезультатФискализацииЧекаВозврата") Тогда
					РезультатВложеннойОперации = РезультатПакетнойОперации.РезультатФискализацииЧекаВозврата;
					Если ЕстьСвойство(РезультатВложеннойОперации, "ОписаниеОшибки")
						И ЗначениеЗаполнено(РезультатВложеннойОперации.ОписаниеОшибки) Тогда
							ТекстОшибки = РезультатВложеннойОперации.ОписаниеОшибки;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекстОшибки = "" И ЕстьСвойство(РезультатПакетнойОперации, "РезультатФискализацииЧека") Тогда
					РезультатВложеннойОперации = РезультатПакетнойОперации.РезультатФискализацииЧека;
					Если ЕстьСвойство(РезультатВложеннойОперации, "ОписаниеОшибки")
						И ЗначениеЗаполнено(РезультатВложеннойОперации.ОписаниеОшибки) Тогда
							ТекстОшибки = РезультатВложеннойОперации.ОписаниеОшибки;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекстОшибки = "" И ЕстьСвойство(РезультатПакетнойОперации, "РезультатВыполненияЭквайринговойОперации") Тогда
					РезультатВложеннойОперации = РезультатПакетнойОперации.РезультатВыполненияЭквайринговойОперации;
					Если ЕстьСвойство(РезультатВложеннойОперации, "ОписаниеОшибки")
						И ЗначениеЗаполнено(РезультатВложеннойОперации.ОписаниеОшибки) Тогда
							ТекстОшибки = РезультатВложеннойОперации.ОписаниеОшибки;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекстОшибки = "" И ЕстьСвойство(РезультатПакетнойОперации, "РезультатАварийнойОтменыОперации") Тогда
					РезультатВложеннойОперации = РезультатПакетнойОперации.РезультатАварийнойОтменыОперации;
					Если ЕстьСвойство(РезультатВложеннойОперации, "ОписаниеОшибки")
						И ЗначениеЗаполнено(РезультатВложеннойОперации.ОписаниеОшибки) Тогда
							ТекстОшибки = РезультатВложеннойОперации.ОписаниеОшибки;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекстОшибки = "" Тогда
					ТекстОшибки = РезультатВыполнения.ОписаниеОшибки;
				КонецЕсли;
				
				ТекстЗаголовка = НСтр("ru = 'Ошибка пакетной фискализации чека'");
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
				
			КонецЕсли;
			
		ИначеЕсли ПечататьКороткийСлипЧек И ЕстьСвойство(РезультатВыполнения, "ТипПакетнойОперации")
			И РезультатВыполнения.ТипПакетнойОперации =
				ПредопределенноеЗначение("Перечисление.ТипыПакетнойОперацииВОчередиЧеков.ФискализацияЧекаСОплатойКартой") Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка пакетной фискализации чека'");
			ТекстОшибки = РезультатВыполнения.ОписаниеОшибки;
			
			ПараметрыОшибки = Новый Структура("ОтобразитьКнопкиДействияСЧеком", Истина);
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
			УстановитьВидимостьЭлементаФормы(Элементы.ПовторитьОперациюПакетнойФискализации, Истина);

		Иначе
			
			ТекстЗаголовка = НСтр("ru = 'При печати чека произошла ошибка.'");
			ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
			
			Если (СуммаОплаченоСБП > 0 Или СуммаОплаченоЮКасса > 0) Тогда
				Объект.Оплачивается = Истина;
			КонецЕсли;
			
			ОбработатьОтменуОплаты(ТекстЗаголовка, ТекстСообщения);
			
			Если ЗначениеЗаполнено(ИдентификаторЗамераПробитияЧека) Тогда
				ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамераПробитияЧека);
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЭтоЧекКоррекции И НЕ ЭтоПоследнийЧекСписка Тогда
		ПробитьЧекКоррекцииПродажи();
	ИначеЕсли ЭтоЗаменаТоваров И НЕ ЭтоПоследнийЧекСписка Тогда
		ПробитьЧекЗаменыТоваровПродажи();
	КонецЕсли;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		Если ПлатежнаяСистема_ОжидаемоеКоличествоЧеков > 0 Тогда
			
			ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = ПлатежнаяСистема_ОжидаемоеКоличествоЧеков  - 1;
			
			Если ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = 0 Тогда
				СанкционироватьЗакрытиеОперацииПлатежнойСистемой(Ложь)
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОжидаемоеКоличествоЧеков > 0 Тогда
		
			ОтобранныеСтроки = Объект.Товары.НайтиСтроки(ВыбраннаяОрганизацияИСНО());
			Для Каждого СтрокаКорзины Из ОтобранныеСтроки Цикл
				СтрокаКорзины.Оплачена = Истина;
			КонецЦикла;
		
			ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
			ПараметрыПересчета.ПоКомандеПереключитьЧек = "НаСледующий";
			РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
			ПродолжитьОплачиваемыйЧекQRКодом(Истина);
			
			ПробитоЧеков = ПробитыеЧеки.Количество();
			Если ОплатаБезДеленияПоЧекам И ПробитоЧеков > 0 Тогда
				ОбработатьПробитиеЧекаНаКлиенте(Команды.ПробитьЧек);
				Если НЕ ПечататьБумажныйЧек Тогда
					ОтправитьЧек(Команды.ОтправитьЧек);
				КонецЕсли;
				УстановитьДоступностьЭлементаФормы(Элементы.ВернутьсяВРежимПодбораТовара, ПробитыеЧеки.Количество() = 0);
				Если НужноЗаморозитьФорму Тогда
					ЗаморозитьФормуПослеПробитияЧека();
				КонецЕсли;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	УстановитьДоступностьЭлементаФормы(Элементы.ВернутьсяВРежимПодбораТовара, ПробитыеЧеки.Количество() = 0);
	Если НужноЗаморозитьФорму Тогда
		ЗаморозитьФормуПослеПробитияЧека();
	КонецЕсли;
	
	ОплатаБезДеленияПоЧекам = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПробитьЧекЗавершение(ВходящиеДанные)
	
	Если НЕ ЕстьСвойство(ВходящиеДанные, "ЧекККМСсылка") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ПробитьЧекЗавершение(ВходящиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаНаличнымиНаКлиенте()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеНал = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ОбластьОперативногоУправленияЧеком
				И Элементы.ГруппаОплатаНал.Видимость И Не СенсорныйЭкран Тогда
		ТекущийЭлемент = Элементы.СуммаОплаченоНал;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаСертификатомНаКлиенте(ОткрытьФормуВыбора = Ложь)
	
	ОчиститьДанныеПодарочногоСертификата();
	
	Если ОткрытьФормуВыбора Тогда
		ОткрытьФормуВыбораПодарочногоСертификата();
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПодарочногоСертификата()
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаДополнительныйСписокТоваров);
	НастроитьВидимостьЭлементовГруппыПоискаТовара(Истина);
	Адрес = "";
	ПолучитьАдресТаблицыПодарочныхСертификатов(Адрес);
	ЗаголовокСтраницы = НСтр("ru = 'Выберите подарочный сертификат'");
	РежимВыбораПодарочногоСертификата = Истина;
	РежимВыбораПодарка = Ложь;
	ИзменитьСостояниеЗаголовкаСтраницыПоискаТовара(ЗаголовокСтраницы, Истина);
	ОткрытьКаталогКлиент();
	ЗаполнитьДанныеТаблицыДляВыбораНоменклатуры(Адрес);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАдресТаблицыПодарочныхСертификатов(Адрес)
	
	ОбщегоНазначенияРМКПереопределяемый.ПолучитьАдресТаблицыПодарочныхСертификатов(Адрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаНаКлиенте()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеПредоплата = Истина;
	
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	Объект.ОперацияСДенежнымиСредствами = Элементы.ГруппаОплатаПредоплата.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВРассрочкуНаКлиенте()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеВРассрочку = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьСертификатомНСПКНаКлиенте()
	
	Если ЕстьВозможностьОплатыСертификатомНСПК() Тогда
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		ПараметрыПересчета.ПоКомандеОплатитьСертификатомНСПК = Истина;
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
		ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
		НастроитьЭлементыВРежимеПроверкаСертификатаНСПК(Истина, ЭтоВозврат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансаНаКлиенте()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеЗачетАванса = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура БезналНаКлиенте()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеБезнал = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВведенныеОплаты(ВсеСуммыПересчитаны = Ложь)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если СуммаОплаченоСертификатамиНСПК > 0 Тогда
		ОплатитьСертификатомНСПКНаКлиенте();
		Возврат;
	КонецЕсли;
	
	Если СуммаОплаченоБонусами > 0 Тогда
		ОтменитьОплатуБонусами();
	КонецЕсли;
	
	Если СуммаОплаченоНал > 0 Или Элементы.ГруппаОплатаНал.Видимость Тогда
		ОплатаНаличнымиНаКлиенте();
	КонецЕсли;
	
	Если СуммаОплаченоВРассрочку > 0 И Не ПриемАвансаПоЗаказу И Не ЭтоВнесениеПредоплатыПоЗаказу Тогда
		ОтменитьОплатуВРассрочку();
	КонецЕсли;
	
	Если СуммаОплаченоБезнал > 0 Тогда
		БезналНаКлиенте();
	КонецЕсли;
	
	Если СуммаНаличныхКВыдаче > 0 Тогда
		ПодготовитьДанныеВыдачиНаличныхКлиент();
	КонецЕсли;
	
	Если СуммаОплаченоБН > 0 Или Элементы.ГруппаОплатаКартой.Видимость Тогда
		ОплатаКартойНаКлиенте();
	КонецЕсли;
	
	Если СуммаОплаченоКредитом > 0 Тогда
		ОплатаКредитомНаКлиенте();
	КонецЕсли;
	
	УдалитьВсеПодарочныеСертификаты();
	ВсеСуммыПересчитаны = Истина;
	
	УстановитьДоступностьОплатыПлатежнымиСистемами(Элементы.ГруппаВидОплатыСБП, Элементы.ГруппаВидОплатыЮКасса, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтменуОплатыКлиент()
	
	ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	
	Если ТипОплаты = "НСПК" Тогда
		СледующаяОперация = "ЗавершитьОтменуОплаты";
		ВернутьЭлектронныйСертификат(СледующаяОперация);
	ИначеЕсли ТипОплаты = "Карта" Тогда
		Если Не ЭтоВозврат Тогда
			Если ОтложенныйЧекПолностьюОплачен Тогда
				ДанныеТерминалов = ОбщегоНазначенияРМККлиент.ДанныеОплатКартойПоЧеку(ЭтотОбъект);
			Иначе
				ДанныеТерминалов = ОбщегоНазначенияРМККлиент.ДанныеТекущихЭквайринговыхТерминалов(ЭтотОбъект);
			КонецЕсли;
			
			Если ДанныеТерминалов.Количество() = 0 Тогда
				ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
				ТекстСообщения = НСтр("ru = 'Не удалось определить эквайринговый терминал.
				|Оплата по карте не была произведена.'");
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
				Возврат;
			КонецЕсли;
			
			Для Каждого ОплатаТерминалом Из ДанныеТерминалов Цикл
				ВыполнитьСторноОплатыПоКарте(ДанныеТерминалов[0]);
			КонецЦикла;
			
		КонецЕсли;
	ИначеЕсли ТипОплаты = "СБП" Тогда
		ТекущаяОперация = "ВозвратОплаты";
		ОтменаПлатежаСБП = Истина;
		ПлатежнаяСистема_НоваяЗаявка.ИдентификаторОплаты = ПлатежнаяСистема_НоваяЗаявка.СсылочныйНомер;
		ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа = Ложь;
		Если ПлатежнаяСистема_НоваяЗаявка.Оплачивается Тогда
			
			ПодключитьОбработчикОжидания("ОпределитьСтатусВозврата", 0.1, Истина);
			
		ИначеЕсли ЗначениеЗаполнено(ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты)
			И Не ЗначениеЗаполнено(ПлатежнаяСистема_НоваяЗаявка.СсылочныйНомер) Тогда
			
			ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
			
		Иначе
			
			ПодключитьОбработчикОжидания("ВыполнитьВозвратПлатежнойСистемой", 0.1, Истина);
			
		КонецЕсли;
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаПлатежнаяСистема);
	Иначе
		Если ОткрытаСтраницаИнфоОшибка() Тогда
			ЗакрытьСтраницуИнфоОшибкаНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтменуОплаты(ТекстЗаголовка, ТекстСообщения, ОшибкаФормированияИсходныхДанных = Ложь)
	
	Если Объект.Оплата.Количество() > 0 И ОжидаемоеКоличествоЧеков > 1 Тогда
		ОтобранныеСтроки = Объект.Товары.НайтиСтроки(ВыбраннаяОрганизацияИСНО());
		Для Каждого СтрокаКорзины Из ОтобранныеСтроки Цикл
			СтрокаКорзины.Оплачена = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ОтложенныйЧекПолностьюОплачен = (Объект.Оплата.Количество() > 0);
	ПараметрыОшибки = Новый Структура;
	ПараметрыОшибки.Вставить("НеобходимоСторно", Истина); 
	ПараметрыОшибки.Вставить("ОшибкаФормированияИсходныхДанных", ОшибкаФормированияИсходныхДанных);
	
	Если ТранзакцияПоКартеЗавершена И ТипОплаты = "Карта" Тогда
		
		ЭквайринговыйТерминалПродажи = ЭквайринговыйТерминалВыполненияОперации;
		ОтборПоиска = Новый Структура();
		ОтборПоиска.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминалПродажи);
		Терминалы = ТаблицаТерминалы.НайтиСтроки(ОтборПоиска);
		
		Если Терминалы.Количество()=0 ИЛИ Терминалы[0].ИспользоватьБезПодключенияОборудования
			И НЕ ЗначениеЗаполнено(Терминалы[0].ПодключаемоеОборудование) Тогда
			ОткрытьСтраницуОтменаОплатыПоКарте(ТекстСообщения);
		Иначе
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
		КонецЕсли;
		
		Элементы.ВыполнитьОтменуОплаты.Заголовок = НСтр("ru = 'Отменить платеж'");
	Иначе
		Если ТипОплаты = "НСПК" ИЛИ ТипОплаты = "СБП" ИЛИ ТипОплаты = "ЮКасса" Тогда
			ТекущаяОперация = "ВозвратОплаты";
			Элементы.ВыполнитьОтменуОплаты.Заголовок = НСтр("ru = 'Вернуть платеж'");
			Если ПлатежнаяСистема_ОжидаемоеКоличествоЧеков > 0 Тогда
			
				ОтключитьОбработчикОжидания("ОпределитьСтатусВозврата");
				ОтключитьОбработчикОжидания("ОпределитьСтатусОплаты");
				ОтключитьОбработчикОжидания("ПолучитьИдентификаторОплаты");
				ОтключитьОбработчикОжидания("ВыполнитьВозвратПлатежнойСистемой");
				
				ТекущаяОперация = "";
				ПлатежнаяСистема_СанкционированноеЗакрытие = Ложь;
				ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = 0;
				
				Элементы.ГруппаСписокОрганизацийПоКорзине.Доступность = Истина;
			
			КонецЕсли;
		Иначе
			Элементы.ВыполнитьОтменуОплаты.Заголовок = НСтр("ru = 'Отменить платеж'");
		КонецЕсли;
		Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
				= Элементы.ГруппаДанныеПокупателя Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ОбластьОперативногоУправленияЧеком);
		КонецЕсли;
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СменитьКассираСервер()

	Объект.Кассир = Неопределено;
	КодКассира = НСтр("ru = ''");
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	ТекущийЭлемент = Элементы.КодКассира;

КонецПроцедуры

&НаКлиенте
Процедура ОплатаКредитомНаКлиенте()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеКредит = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
	Если Элементы.ГруппаОплатаКредитом.Видимость Тогда
		ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьФормуОплатыКредитом(ЭтотОбъект);
	Иначе
		ПараметрыОплатыКредитом = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуКредитомЗавершение(Результат, Параметры) Экспорт
	
	Если Элементы.ГруппаОплатаКредитом.Видимость И Результат = Неопределено Тогда
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		ПараметрыПересчета.ПоКомандеКредит = Истина;
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		ПараметрыОплатыКредитом = Неопределено;
		Возврат;
	КонецЕсли;
	
	ПараметрыОплатыКредитом = Результат;
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	Если НЕ Результат = Неопределено И Результат.Свойство("Сумма") Тогда
		СуммаОплаченоКредитом = Результат.Сумма;
	КонецЕсли;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборУправляемыхСкидок(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПримененаСкидкаНаЧек = Ложь;
	ИдентификаторТекущейСтроки = "";
	ТекущаяСтрокаТоваров = Неопределено;
	Если ДополнительныеПараметры = Неопределено Тогда
		ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
	ИначеЕсли ДополнительныеПараметры.Свойство("ОбластьДействия") И ДополнительныеПараметры.ОбластьДействия = "На строку" Тогда
		ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	Если Не ТекущаяСтрокаТоваров = Неопределено Тогда
		ИдентификаторТекущейСтроки = ТекущаяСтрокаТоваров.ИдентификаторСтроки;
	КонецЕсли; 
	
	МассивИдентификаторовДобавленныхСтрок = Новый Массив();
	РучнаяСкидкаПрименена = Ложь;
	Для Каждого ВыбраннаяСкидка Из Результат Цикл
		Если ВыбраннаяСкидка.ТипСкидки = "Ручная" И Не РучнаяСкидкаПрименена Тогда
			Позиции = Объект.Товары;
			ЗначениеВыбраннойРучнойСкидки = ВыбраннаяСкидка.ЗначениеСкидки;
			Если ВыбраннаяСкидка.ОбластьДействия = "На строку" Тогда
				Если ТекущаяСтрокаТоваров = Неопределено Тогда
					ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
				КонецЕсли;
				
				Если ЭтоСоставляющаяНабора(ТекущаяСтрокаТоваров) Тогда
					
					СоставНабора = СоставНабораПоЭлементуНабора(ТекущаяСтрокаТоваров, Объект.Товары);
					
					Если СоставНабора.Количество() = Объект.Товары.Количество() Тогда
						Позиции = Объект.Товары;
					Иначе
						Позиции = СоставНабора;
					КонецЕсли;
					РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ЗначениеВыбраннойРучнойСкидки);
				Иначе
					ТекущийТоварСкидка = ЗначениеВыбраннойРучнойСкидки;
					ТекущаяСтрокаТоваров.РассчитанаСкидка = Ложь;
					РучнаяСкидкаПроцентомПоСтроке(ТекущаяСтрокаТоваров);
				КонецЕсли;
			Иначе
				РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ЗначениеВыбраннойРучнойСкидки);
			КонецЕсли;
			РучнаяСкидкаПрименена = Истина;
			УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, Истина);
		Иначе
			СтруктураОтбора = Новый Структура("СкидкаНаценка", ВыбраннаяСкидка.СкидкаНаценка);
			Если ВыбраннаяСкидка.ОбластьДействия = "На строку" Тогда
				СтруктураОтбора.Вставить("ИдентификаторСтроки", ИдентификаторТекущейСтроки);
			Иначе
				СтруктураОтбора.Вставить("ИдентификаторСтроки", "");
			КонецЕсли;
			СуществующиеСтроки = ТаблицаВыбранныхУправляемыхСкидок.НайтиСтроки(СтруктураОтбора);
			Если СуществующиеСтроки.Количество() = 0 Тогда
				НоваяУправляемаяСкидка = ТаблицаВыбранныхУправляемыхСкидок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяУправляемаяСкидка, ВыбраннаяСкидка);
				Если ВыбраннаяСкидка.ОбластьДействия = "На строку" Тогда
					НоваяУправляемаяСкидка.ИдентификаторСтроки = ИдентификаторТекущейСтроки;
				КонецЕсли;
				МассивИдентификаторовДобавленныхСтрок.Добавить(НоваяУправляемаяСкидка.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ДобавитьРеквизитыНовыхУправляемыхСкидок(МассивИдентификаторовДобавленныхСтрок);
	ТоварыПриАктивизацииСтроки(Элементы.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыНовыхУправляемыхСкидок(МассивИдентификаторовСтрок)
	Для Каждого Идентификатор Из МассивИдентификаторовСтрок Цикл
		СтрокаСкидки = ТаблицаВыбранныхУправляемыхСкидок.НайтиПоИдентификатору(Идентификатор);
		Если Не СтрокаСкидки = Неопределено Тогда
			ДобавитьРеквизитыУправляемойСкидки(СтрокаСкидки.СкидкаНаценка, СтрокаСкидки.ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеПромокодаНаКлиенте()
	
	ОчиститьДанныеПромокодов();
	ПромокодДоступен = Истина; // Пока не проверили промокод на возможность применения, не следует его подсвечивать
	
	АктивироватьГруппуВводаПромокода();
	ЭтаФорма.ТекущийЭлемент = Элементы.ВведенныйПромокод;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьКПечатиЧека(АвтономнаяККТ = Ложь)
	
	Если АвтономнаяККТ Или ОткрытаСтраницаОтправкиЧека() Или СразуОтправлятьНаПечатьЧека() Тогда
		НачатьПечатьЧека();
	Иначе
		ПерейтиНаСтраницуОтправкиЭлектронногоЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОплатаКартойНаКлиенте()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеБН = Истина;
	ПараметрыПересчета.ПриИзмененииБНОплаты = Истина;
	Возврат РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецФункции

#КонецОбласти

#Область ПробитиеЧека

#Область ОтправкаПечатьПробитогоЧека

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЧекаПриПечатиПробитогоЧека(РезультатВыполнения, Параметры) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "ЧекККМ") И ЗначениеЗаполнено(РезультатВыполнения.ЧекККМ) Тогда
		
		ЧекККМ = РезультатВыполнения.ЧекККМ;
		
		Если ЕстьСвойство(РезультатВыполнения, "РежимПечатиЧека")
			И ЗначениеЗаполнено(РезультатВыполнения.РежимПечатиЧека) Тогда
			
			РежимПечатиЧека = РезультатВыполнения.РежимПечатиЧека;
			
			Если РежимПечатиЧека = "ПечатьПробитогоЧека" Тогда
				НапечататьФискальныйЧекБезФискализации(ЧекККМ);
			ИначеЕсли РежимПечатиЧека = "ПечатьТоварногоЧека" Тогда
				НапечататьТоварныйЧекПоФискальномуЧеку(ЧекККМ);
			Иначе
				ПоказатьПредупреждение(, НСтр("ru = 'Нештатное завершение попытки распечатать чек'"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПовторнуюПечатьФискальногоЧека(РезультатВыполнения, ПараметрДействия) Экспорт
	
	ЕстьОшибка = Ложь;
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ЕстьОшибка = Истина;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Произошла ошибка при попытке повторной печати фискального чека.
			|Причина: %1'"), РезультатВыполнения.ОписаниеОшибки);
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	Если ТипЗнч(ПараметрДействия) = Тип("Структура") И ПараметрДействия.Свойство("ПечатьПослеПробития") Тогда
		Если Не ЕстьОшибка Тогда
			ПараметрДействия.ИндексЧека = ПараметрДействия.ИндексЧека + 1;
			ВыполнитьПечатьКопииЧекаПоПорядку(ПараметрДействия);
		ИначеЕсли Не ПараметрДействия.НужноЗаморозитьФорму Тогда
			ПараметрыПустойСтраницы = Неопределено;
			ПоказатьПустуюСтраницуПослеПробитияЧека();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеЧекаДляВыведенияНаПринтерЧеков(ЧекККМ, ТекущаяНастройкаРМК,
	ОсобенностиУчетаВозвращаемойМаркируемойПродукции, ВариантЗаполненияМестаРасчетов, ВариантЗаполненияКассира)
	
	ОбщиеПараметры = Новый Структура();
	
	Если ЗначениеЗаполнено(ЧекККМ) Тогда
		
		ПечататьБумажныйЧек = Истина;
		СворачиватьСтрокиПриПечатиЧека = Истина;
		
		Если ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
			
			СворачиватьСтрокиПриПечатиЧека =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНастройкаРМК, "СворачиватьСтрокиПриПечатиЧека");
			ПечататьБумажныйЧек = ПроверитьВозможностьПечатиБумажногоЧека(ТекущаяНастройкаРМК);
			
		КонецЕсли;
		
		ОрганизацияПродажи = ЧекККМ.Организация;
		
		СистемаНалогообложения = СистемаНалогообложенияЧека(ЧекККМ);
		ЕстьПродукцияЕГАИС = ПродажиРМК.ЕстьПродукцияЕГАИС(ЧекККМ);
			
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ЕстьПродукцияЕГАИС", ЕстьПродукцияЕГАИС);
		ДополнительныеПараметры.Вставить("ПечататьБумажныйЧек", ПечататьБумажныйЧек);
		ДополнительныеПараметры.Вставить("СистемаНалогообложения", СистемаНалогообложения);
		ДополнительныеПараметры.Вставить("СворачиватьСтрокиПриПечатиЧека", СворачиватьСтрокиПриПечатиЧека);
		ДополнительныеПараметры.Вставить("ОсобенностиУчетаВозвращаемойМаркируемойПродукции",
			ОсобенностиУчетаВозвращаемойМаркируемойПродукции);
		ДополнительныеПараметры.Вставить("ВариантЗаполненияМестаРасчетов", ВариантЗаполненияМестаРасчетов);
		ДополнительныеПараметры.Вставить("ВариантЗаполненияКассира", ВариантЗаполненияКассира); 
		ДополнительныеПараметры.Вставить("РабочееМестоКассира", Истина);
		
		ОбщиеПараметры = ОбщегоНазначенияРМК.ДанныеДляПробитияЧека(ЧекККМ, ДополнительныеПараметры);
			
		Если ЕстьСвойство(ОбщиеПараметры, "ШаблонЧека") И НЕ ЗначениеЗаполнено(ОбщиеПараметры.ШаблонЧека) Тогда
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьШаблонЧека(ЧекККМ, ОбщиеПараметры, ТекущаяНастройкаРМК);
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаКлиенте
Процедура НапечататьФискальныйЧекБезФискализации(ЧекККМ, ДополнительныеПараметры = Неопределено)
	
	ИдентификаторУстройстваФискальногоРегистратора = ПодключаемоеОборудование;
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершитьПовторнуюПечатьФискальногоЧека", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПринтерЧеков) И ЗначениеЗаполнено(ЧекККМ) Тогда
		
		ПараметрыОперации = ДанныеЧекаДляВыведенияНаПринтерЧеков(ЧекККМ, ТекущаяНастройкаРМК,
			ОсобенностиУчетаВозвращаемойМаркируемойПродукции, ВариантЗаполненияМестаРасчетов, ВариантЗаполненияКассира);
			
		ТекстЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СформироватьТекстНефискальногоЧека(ПараметрыОперации);
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПечатиТекста(ТекстЧека);
		ОборудованиеЧекопечатающиеУстройстваКлиент.
			НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, ПринтерЧеков, ПараметрыОперации);
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторУстройстваФискальногоРегистратора)
		И ЗначениеЗаполнено(ЧекККМ) Тогда
		
		НомерЧека = ОбщегоНазначенияРМКВызовСервера.ЗначениеРеквизитаОбъекта(ЧекККМ, "НомерЧекаККМ");
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПечатьКопииЧека();
		ПараметрыОперации.НомерЧека = НомерЧека;
		ПараметрыОперации.Аппаратно = Ложь;
		ПараметрыОперации.Вставить("ДокументСсылка", ЧекККМ);
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПечатьКопииЧека(ОповещениеПриЗавершении,
			УникальныйИдентификатор, ИдентификаторУстройстваФискальногоРегистратора, ПараметрыОперации);
			
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОткрытьСтраницуИнфоОшибка(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьПечатиБумажногоЧека(ТекущаяНастройкаРМК)
	
	Результат = Истина;
	
	Если ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	НастройкиРабочегоМестаКассира.ПечататьБумажныйЧек КАК ПечататьБумажныйЧек
		|ИЗ
		|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
		|ГДЕ
		|	НастройкиРабочегоМестаКассира.Ссылка = &ТекущаяНастройкаРМК");
		
		Запрос.УстановитьПараметр("ТекущаяНастройкаРМК", ТекущаяНастройкаРМК);
		
		ЗначениеНастройки = Запрос.Выполнить().Выбрать();
		
		Если ЗначениеНастройки.Следующий() Тогда
			Результат = ЗначениеНастройки.ПечататьБумажныйЧек;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФормированиеЧековПоНесколькимСНО

&НаКлиенте
Функция РазличныеСНОВСпискеПокупок()
	
	Корзина = Объект.Товары;
	СНОТоваровВКорзине = Новый Массив;
	
	СписокОрганизаций = Новый СписокЗначений;
	
	Для Каждого СтрокаКорзины Из Корзина Цикл
		
		Если СписокОрганизаций.НайтиПоЗначению(СтрокаКорзины.Организация) = Неопределено Тогда
			СписокОрганизаций.Добавить(СтрокаКорзины.Организация);
		КонецЕсли;
		
	КонецЦикла;
	
	СписокОрганизаций.СортироватьПоЗначению();
	
	Для Каждого ОрганизацияИзСписка Из СписокОрганизаций Цикл
		
		СписокСНО = Новый СписокЗначений;
		
		ОтборПоОрганизации = Новый Структура("Организация", ОрганизацияИзСписка.Значение);
		СтрокиПоОрганизации = Корзина.НайтиСтроки(ОтборПоОрганизации);
		
		Для Каждого СтрокаКорзины Из СтрокиПоОрганизации Цикл
			
			Если СписокСНО.НайтиПоЗначению(СтрокаКорзины.СистемаНалогообложения) = Неопределено Тогда
				СписокСНО.Добавить(СтрокаКорзины.СистемаНалогообложения);
			КонецЕсли;
			
		КонецЦикла;
		
		СписокСНО.СортироватьПоЗначению();
		
		Для Каждого СНОИзСписка Из СписокСНО Цикл
			
			СтруктураОрганизацийИСНО = Новый Структура("Организация, СистемаНалогообложения");
			СтруктураОрганизацийИСНО.Организация = ОрганизацияИзСписка.Значение;
			СтруктураОрганизацийИСНО.СистемаНалогообложения = СНОИзСписка.Значение;
			СНОТоваровВКорзине.Добавить(СтруктураОрганизацийИСНО);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СНОТоваровВКорзине;
	
КонецФункции

&НаСервереБезКонтекста
Функция КассаПоддерживаетОперацииПоСНОИзСпискаПокупок(ИдентификаторУстройства, СНОИзСпискаПокупок)
	
	Результат = Новый Структура("Ошибка,ТекстОшибки", Ложь, "");
	
	Если ЗначениеЗаполнено(ИдентификаторУстройства) И СНОИзСпискаПокупок.Количество() > 0 Тогда
		
		ПараметрыРегистрацииУстройства =
			ОборудованиеЧекопечатающиеУстройстваВызовСервера.ПараметрыРегистрацииУстройства(ИдентификаторУстройства);
			
		Если ПараметрыРегистрацииУстройства.Свойство("КодыСистемыНалогообложения")
			И ЗначениеЗаполнено(ПараметрыРегистрацииУстройства.КодыСистемыНалогообложения) Тогда
			
			ПрименяемыеКодыНалогообложения = ПараметрыРегистрацииУстройства.КодыСистемыНалогообложения;
			
			Если ПустаяСтрока(ПрименяемыеКодыНалогообложения) Тогда
				
				ТекстОшибки = НСтр("ru ='Не заданы коды систем налогообложения в параметрах регистрации кассы'");
				Результат.Вставить("Ошибка", Истина);
				Результат.Вставить("ТекстОшибки", ТекстОшибки);
				Возврат Результат;
				
			КонецЕсли;
			
			ТекстОшибки = НСтр("ru = ''");
			
			Для Каждого СтрокаСписка Из СНОИзСпискаПокупок Цикл
				
				Если НЕ СтрокаСписка.Организация = ИдентификаторУстройства.Организация Тогда
					Продолжить;
				КонецЕсли;
				
				СНО = СтрокаСписка.СистемаНалогообложения;
				КодСНО = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодСистемыНалогообложенияККТ(СНО);
				
				Если НЕ КодСНО = Неопределено Тогда
					
					КодСНОСтрокой = Строка(КодСНО);
					
					Если СтрНайти(ПрименяемыеКодыНалогообложения, КодСНОСтрокой) = 0 Тогда
						
						СимволДополнения = ?(ПустаяСтрока(ТекстОшибки), "", НСтр("ru = ' '"));
						ТекстТекущейОшибки = СтрШаблон(НСтр("ru = 'Касса не поддерживает продажу по СНО ""%1"" '"), СНО);
						ТекстОшибки = СтрШаблон("%1%2%3", ТекстОшибки, СимволДополнения, ТекстТекущейОшибки);
						
					КонецЕсли;
					
				Иначе
					
					СимволДополнения = ?(ПустаяСтрока(ТекстОшибки), "", " ");
					ТекстТекущейОшибки = СтрШаблон(НСтр("ru = 'В БПО не найдено подходящего кода для СНО ""%1"" '"), СНО);
					ТекстОшибки = СтрШаблон("%1%2%3", ТекстОшибки, СимволДополнения, ТекстТекущейОшибки);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
				
				ТекстОшибки = СтрШаблон(НСтр("ru = '%1'"), ТекстОшибки);
				Результат.Вставить("Ошибка", Истина);
				Результат.Вставить("ТекстОшибки", ТекстОшибки);
				
			КонецЕсли;
			
		Иначе
			
			Результат.Вставить("ТекстОшибки",
				НСтр("ru = 'Не удалось определить коды систем налогообложения из параметров регистрации кассы'"));
			Результат.Вставить("Ошибка", Истина);
			
		КонецЕсли;
		
	Иначе
		
		Результат.Вставить("ТекстОшибки",
			НСтр("ru = 'Не удалось определить кассу или в списке покупок отсутствуют данные о СНО'"));
		Результат.Вставить("Ошибка", Истина);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроинформироватьПользователяОКоличествеЧеков()

	СистемыНалогообложенияТоваровВКорзине = РазличныеСНОВСпискеПокупок();
	ОжидаемоеКоличествоЧеков = СистемыНалогообложенияТоваровВКорзине.Количество();
	
	Если ОжидаемоеКоличествоЧеков > 1 Тогда
		
		ТекстУведомления = НСтр("ru='Продажа товаров из списка покупок будет оформлена
									|согласно закону №54-ФЗ.%2Ожидаемое количество чеков: %1'");
		ТекстУведомления = СтрШаблон(ТекстУведомления, ОжидаемоеКоличествоЧеков, Символы.ПС);
		Элементы.ДекорацияКоличествоЧеков.Заголовок = ТекстУведомления;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияКоличествоЧеков, ОжидаемоеКоличествоЧеков > 1);
	
КонецПроцедуры

#КонецОбласти

#Область ПринятиеОплат

&НаКлиенте
Процедура ПерерасчитатьСуммыОплаты(ПараметрыПересчета = Неопределено)
	
	Если ПараметрыПересчета = Неопределено Тогда
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	КонецЕсли;
	
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуКартой()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПриИзмененииБНОплаты = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуНаличными()
	ПерерасчитатьСуммыОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуВРассрочку()
	ПерерасчитатьСуммыОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуЗачетАванса()
	ПерерасчитатьСуммыОплаты();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыОплатыАванса()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаБезСкидки = 0 Или ОбновлятьСуммуАванса Тогда
		СуммаБезСкидки = СуммаОплаченоНал + СуммаОплаченоБН + СуммаОплаченоБезнал + СуммаОплаченоСБП + СуммаОплаченоЮКасса;
		ТекущаяСтрока.Цена = СуммаБезСкидки;
		ТекущаяСтрока.Сумма = СуммаБезСкидки;
		ОбщегоНазначенияРМККлиентСервер.УстановитьНомерКартинкиСтрокиТовара(ТекущаяСтрока);
	КонецЕсли;
	
	РассчитатьСуммыОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСоответствияОплат(СтруктураЭлементов, ИмяКоманды, ИмяГруппа, ИмяПоля)
	
	СтруктураЭлементов.Вставить(ИмяКоманды, Новый Структура("Группа, Поле", ИмяГруппа, ИмяПоля));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПревышениеСуммыЗачетаАванса()
	
	Если ЭтоЗачетАванса И Не ЭтоВнесениеПредоплатыПоЗаказу Тогда
		СуммаОплаченоЗачетАванса = Мин(СуммаИтого, СуммаОстаткаДокументаРасчета);
	ИначеЕсли ЭтоОплатаРассрочки Тогда
		СуммаОплаченоЗачетАванса = СуммаИтого - СуммаОстаткаДокументаРасчета;
	ИначеЕсли ЭтоВнесениеПредоплатыПоЗаказу Тогда
		
		Если СуммаОстаткаДокументаРасчета > 0 Тогда
			СуммаОплаченоЗачетАванса = Макс((СуммаИтого - СуммаОстаткаДокументаРасчета), 0);
			ЗаполнитьТаблицуОплат();
		КонецЕсли;
		
		СуммаОплаченоВРассрочку = СуммаИтого - (СуммаОплаченоНал + СуммаОплаченоБН + СуммаОплаченоБезнал
			+ СуммаОплаченоЗачетАванса + СуммаОплаченоСертификатами + СуммаОплаченоСБП + СуммаОплаченоЮКасса
			+ СуммаОплаченоСертификатамиНСПК + СуммаТоваровКЗамене + СуммаОплаченоКредитом);
		СуммаОплаченоВРассрочку = Макс(СуммаОплаченоВРассрочку, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаЗачетАвансаКлиент()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеЗачетАванса = Истина;
	
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	ПроверитьПревышениеСуммыЗачетаАванса();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуБезналом()
	ПерерасчитатьСуммыОплаты();
КонецПроцедуры

&НаКлиенте
Функция РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета)
	ПереключитьРежимПоказаОстатков(Ложь);
	ПереключитьРежимНаПоказСкидок(Ложь);
	
	Если ЕстьНезаполненныеДанные() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстОшибки = "";
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	
	НеКонтролироватьОстатки = Ложь;
	Если Не ПараметрыПересчета.ПоКомандеПредоплата Тогда
		НеКонтролироватьОстатки = Объект.ОперацияСДенежнымиСредствами;
	ИначеЕсли ПараметрыПересчета.ПоКомандеПредоплата И Не Элементы.ГруппаОплатаВРассрочку.Видимость Тогда
		НеКонтролироватьОстатки = Истина;
	ИначеЕсли ПараметрыПересчета.ПоКомандеПредоплата И Элементы.ГруппаОплатаВРассрочку.Видимость Тогда
		Если СуммаОплаченоВРассрочку = СуммаИтого - СуммаОплаченоЗачетАванса И СуммаОплаченоВРассрочку > 0 Тогда
			НеКонтролироватьОстатки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) И ПараметрыПересчета.ПоКомандеЗачетАванса
		И СуммаОплаченоЗачетАванса < СуммаИтого И СуммаОплаченоЗачетАванса > 0 Тогда
		НеКонтролироватьОстатки = Истина;
	КонецЕсли;
	
	Если (ЭтоОперацияПродажи ИЛИ ЭтоЗаменаТоваров)
		И Не НеКонтролироватьОстатки
		И Не ЭтоОплатаРассрочки
		И Не ПриемАванса
		И Не ПриемАвансаПоЗаказу
		И Не КонтрольОстатковПройден(ТекстОшибки) Тогда
		
		Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект) Тогда
			ПереключитьВРежимВводаТоваров();
		КонецЕсли;
		ТекстЗаголовка = НСтр("ru = 'Контроль остатков.
									|Измените количество или удалите товар.'");
		ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ПоКомандеНал = ПараметрыПересчета.ПоКомандеНал;
	ПоКомандеБН = ПараметрыПересчета.ПоКомандеБН;
	ПоКомандеБезнал = ПараметрыПересчета.ПоКомандеБезнал;
	ПоКомандеВРассрочку = ПараметрыПересчета.ПоКомандеВРассрочку;
	ПоКомандеЗачетАванса = ПараметрыПересчета.ПоКомандеЗачетАванса;
	ПриИзмененииБНОплаты = ПараметрыПересчета.ПриИзмененииБНОплаты;
	ПересчитыватьОкругление = ПараметрыПересчета.ПересчитыватьОкругление;
	ПоКомандеПредоплата = ПараметрыПересчета.ПоКомандеПредоплата;
	ПоКомандеПереключитьЧек = ПараметрыПересчета.ПоКомандеПереключитьЧек;
	ПоКомандеОплатитьСертификатом = ПараметрыПересчета.ПоКомандеОплатитьСертификатом;
	ПоКомандеОтменитьОплатуСертификатом = ПараметрыПересчета.ПоКомандеОтменитьОплатуСертификатом;
	ПриИзмененииСуммыОплатыСертификатом = ПараметрыПересчета.ПриИзмененииСуммыОплатыСертификатом;
	ПоКомандеОплатаQRКодом = ПараметрыПересчета.ПоКомандеОплатаQRКодом;
	ПоКомандеОтменитьОплатуQRКодом = ПараметрыПересчета.ПоКомандеОтменитьОплатуQRКодом;
	ПоКомандеОплатитьСертификатомНСПК = ПараметрыПересчета.ПоКомандеОплатитьСертификатомНСПК;
	ПоКомандеОтменитьОплатуСертификатомНСПК = ПараметрыПересчета.ПоКомандеОтменитьОплатуСертификатомНСПК;
	ПоКомандеЗаменаТоваров = ПараметрыПересчета.ПоКомандеЗаменаТоваров;
	ПоКомандеОплатитьВсюСуммуБонусами = ПараметрыПересчета.ПоКомандеОплатитьВсюСуммуБонусами;
	ПоКомандеКредит = ПараметрыПересчета.ПоКомандеКредит;
	
	Если Объект.Товары.Количество() = 0 И НЕ ПриемАванса Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПоКомандеПереключитьЧек = "" Тогда
		
		ПереключитьНаСледующийЧек(ПоКомандеПереключитьЧек);
		
		Если Элементы.ГруппаСуммаОплатаСертификатами.Видимость Тогда
			
			ПоКомандеОплатитьСертификатом = Истина;
			ПараметрыПересчета.ПоКомандеОплатитьСертификатом = Истина;
			Элементы.ГруппаОплатаНал.Видимость = Ложь;
			Элементы.ГруппаОплатаКартой.Видимость = Ложь;
			
		ИначеЕсли Элементы.ГруппаОплатаНал.Видимость Тогда
			
			Если ПробитыеЧеки.Количество() > 0 И ОплатаБезДеленияПоЧекам Тогда
				ПоследнийПробитыйЧек = ПробитыеЧеки.Получить(ПробитыеЧеки.Количество()-1);
				СдачаПриОшибкеПробитияЧека = ПоследнийПробитыйЧек.Сдача;
				СуммаОплаченоНал = ПоследнийПробитыйЧек.Сдача;
			Иначе
				Элементы.ГруппаОплатаНал.Видимость = Ложь;
				Элементы.ГруппаОплатаКартой.Видимость = Ложь;
				ПоКомандеНал = Истина;
				ПараметрыПересчета.ПоКомандеНал = Истина;
			КонецЕсли;
			
		ИначеЕсли Элементы.ГруппаОплатаКартой.Видимость Тогда
			
			Элементы.ГруппаОплатаКартой.Видимость = Ложь;
			ПоКомандеБН = Истина;
			ПараметрыПересчета.ПоКомандеБН = Истина;
			ПриИзмененииБНОплаты = Истина;
			
		ИначеЕсли Элементы.ГруппаОплатаКредитом.Видимость Тогда
			
			ПоКомандеНал = Истина;
			ПараметрыПересчета.ПоКомандеНал = Истина;
			
		Иначе
		КонецЕсли;
		
		Если Элементы.ГруппаОплатаБонусами.Видимость Тогда
			СуммаОплаченоБонусами = СуммаБонусов;
		КонецЕсли;
		
		Элементы.ГруппаОплатаКредитом.Видимость = Ложь;
		
	КонецЕсли;
	
	СоответствияОплат = Новый Структура;
	ДобавитьСоответствияОплат(СоответствияОплат, "ПоКомандеНал", "ГруппаОплатаНал", "СуммаОплаченоНал");
	ДобавитьСоответствияОплат(СоответствияОплат, "ПоКомандеБН", "ГруппаОплатаКартой", "СуммаОплаченоБН");
	ДобавитьСоответствияОплат(СоответствияОплат, "ПоКомандеКредит", "ГруппаОплатаКредитом", "СуммаОплаченоКредитом");
	ДобавитьСоответствияОплат(СоответствияОплат, "ПоКомандеВРассрочку", "ГруппаОплатаВРассрочку", "СуммаОплаченоВРассрочку");
	ДобавитьСоответствияОплат(СоответствияОплат, "ПоКомандеПредоплата", "ГруппаОплатаПредоплата", "СуммаОплаченоВРассрочку");
	ДобавитьСоответствияОплат(СоответствияОплат, "ПоКомандеЗачетАванса", "ГруппаОплатаЗачетАванса", "СуммаОплаченоЗачетАванса");
	ДобавитьСоответствияОплат(СоответствияОплат, "ПоКомандеБезнал", "ГруппаОплатаБезнал", "СуммаОплаченоБезнал");
	ДобавитьСоответствияОплат(СоответствияОплат, "ПоКомандеЗаменаТоваров", "ГруппаСуммаТоваровКЗамене", "СуммаТоваровКЗамене");
	
	Для Каждого Соответствие Из СоответствияОплат Цикл
		
		ГруппаЭлементовПоляСуммы = Элементы[Соответствие.Значение.Группа];
		Если ПриемАвансаПоЗаказу Тогда
			Если ГруппаЭлементовПоляСуммы.Имя = "ГруппаОплатаВРассрочку" Или ГруппаЭлементовПоляСуммы.Имя = "ГруппаОплатаПредоплата" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыПересчета[Соответствие.Ключ] = Истина Тогда
			НовоеЗначениеВидимости = НЕ ГруппаЭлементовПоляСуммы.Видимость;
			УстановитьВидимостьЭлементаФормы(ГруппаЭлементовПоляСуммы, НовоеЗначениеВидимости);
			Если Соответствие.Ключ = "ПоКомандеНал" Тогда
				ПереключитьПанельВводаНаличных(НовоеЗначениеВидимости);
			ИначеЕсли Соответствие.Ключ = "ПоКомандеБН" И НовоеЗначениеВидимости И Не СенсорныйЭкран Тогда
				ТекущийЭлемент = Элементы[Соответствие.Значение.Поле];
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОткрытаСтраницаИнфоОшибка = (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека) = Элементы.ГруппаИнфоОшибка);
	
	ПоКомандеКромеНал = ПоКомандеБезнал ИЛИ ПоКомандеБН ИЛИ ПоКомандеВРассрочку
		ИЛИ ПоКомандеЗачетАванса ИЛИ ПоКомандеОплатаQRКодом ИЛИ ПоКомандеОплатитьВсюСуммуБонусами
		ИЛИ ПоКомандеОплатитьСертификатом ИЛИ ПоКомандеОплатитьСертификатомНСПК ИЛИ ПоКомандеОтменитьОплатуQRКодом
		ИЛИ ПоКомандеОтменитьОплатуСертификатом ИЛИ ПоКомандеОтменитьОплатуСертификатомНСПК
		ИЛИ ПоКомандеПредоплата;
		
	Если ПоКомандеКромеНал Тогда
		ОтборСтрок = Неопределено;
		Если ЗначениеЗаполнено(ВыбраннаяОрганизация) И ЗначениеЗаполнено(ВыбраннаяСистемаНалогообложения) Тогда
			ОтборСтрок = Новый ФиксированнаяСтруктура(ВыбраннаяОрганизацияИСНО());
		КонецЕсли;
		Элементы.Товары.ОтборСтрок = ОтборСтрок;
		ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
		ОбновлятьСуммуАванса = Ложь;
	КонецЕсли;
	
	Если ПоКомандеПереключитьЧек = ""
		И (ПоКомандеКромеНал ИЛИ ПробитыеЧеки.Количество() > 0) Тогда
		ОплатаБезДеленияПоЧекам = Ложь;
	КонецЕсли;
	
	Если ПриемАванса Тогда
		РассчитатьСуммыОплатыАванса();
	КонецЕсли;
	
	СуммаОкругления = 0; 
	СуммаБезОкругления = СуммаИтого + СуммаОкругления;
	
	ОсталосьОплатитьСОкруглением = СуммаИтого - СуммаОплаченоНал - СуммаОплаченоБН - СуммаОплаченоБезнал
			- СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса - СуммаОплаченоСертификатами
			- СуммаОплаченоСертификатамиНСПК - СуммаТоваровКЗамене - СуммаОплаченоКредитом;
			
	ОсталосьОплатить = ОсталосьОплатитьСОкруглением + СуммаОкругления;
	
	Для Каждого Соответствие Из СоответствияОплат Цикл
		ГруппаЭлементовПоляСуммы = Элементы[Соответствие.Значение.Группа];
		
		Если ПараметрыПересчета[Соответствие.Ключ] = Истина И НЕ Соответствие.Значение.Поле = "" Тогда
			Если Соответствие.Ключ = "ПоКомандеВРассрочку" Тогда
				ТекущийЭлемент = Элементы.СуммаОплаченоВРассрочку;
			ИначеЕсли Соответствие.Ключ = "ПоКомандеПредоплата" Тогда
				ТекущийЭлемент = Элементы.СуммаОплаченоПредоплата;
			ИначеЕсли Не СенсорныйЭкран Тогда
				ТекущийЭлемент = Элементы[Соответствие.Значение.Поле];
			КонецЕсли;
			Если Соответствие.Ключ = "ПоКомандеБН" Тогда
				ЭтотОбъект[Соответствие.Значение.Поле] = ОсталосьОплатить;
			ИначеЕсли Соответствие.Ключ = "ПоКомандеЗаменаТоваров" Тогда
				ЭтотОбъект[Соответствие.Значение.Поле] = СуммаБезОкругления;
			ИначеЕсли Соответствие.Ключ = "ПоКомандеЗачетАванса" И СуммаОплаченоЗачетАванса > 0 Тогда
				ЭтотОбъект[Соответствие.Значение.Поле] = СуммаОплаченоЗачетАванса;
			Иначе
				ЭтотОбъект[Соответствие.Значение.Поле] = ОсталосьОплатитьСОкруглением;
			КонецЕсли;
		КонецЕсли;
		
		Если Не (Соответствие.Ключ = "ПоКомандеВРассрочку" Или Соответствие.Ключ = "ПоКомандеПредоплата") Тогда
			Если НЕ ГруппаЭлементовПоляСуммы.Видимость И НЕ Соответствие.Значение.Поле = "" Тогда
				ЭтотОбъект[Соответствие.Значение.Поле] = 0; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Если Не (Элементы.ГруппаОплатаПредоплата.Видимость Или Элементы.ГруппаОплатаВРассрочку.Видимость) Тогда
		СуммаОплаченоВРассрочку = 0;
	КонецЕсли;
	
	Если ПоКомандеБН Тогда
		
		ВидимостьГруппыОплатыКартой = НЕ Элементы.ГруппаОплатаКартой.Видимость;
		ВидимостьЭлементовВыдачиНаличных = ВыдаватьНаличныеНаКассе И НЕ ВидимостьГруппыОплатыКартой И ЭтоОперацияПродажи;
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРазделВыдачиНаличных, ВидимостьЭлементовВыдачиНаличных);
		
		Если ВидимостьГруппыОплатыКартой Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыдачиНаличных, ВидимостьЭлементовВыдачиНаличных);
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРазделДенежныйЯщик, ВидимостьЭлементовВыдачиНаличных);
			
			ОчиститьРеквизитыQRКодаПлатежнойКарты();
		КонецЕсли;
		
	ИначеЕсли ПоКомандеВРассрочку Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, НЕ Элементы.Предоплата.Доступность);
		КонецЕсли;
		НастроитьПолеВводаСуммыВРассрочку();
		
	ИначеЕсли ПоКомандеПредоплата Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, НЕ Элементы.ОплатаВРассрочку.Доступность);
		НастроитьПолеВводаСуммыВРассрочку();
		
	ИначеЕсли ПоКомандеОплатитьСертификатом ИЛИ ПриИзмененииСуммыОплатыСертификатом Тогда
		
		СуммаИтогоОсталосьОплатить = СуммаБезОкругления - СуммаОплаченоНал - СуммаОплаченоБН - СуммаОплаченоБезнал
			- СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса - СуммаТоваровКЗамене - СуммаОплаченоКредитом;
			
		РассчитатьСуммуОплатыСертификатами(СуммаИтогоОсталосьОплатить, СуммаБезОкругления);

	ИначеЕсли ПоКомандеОплатитьСертификатомНСПК Тогда
		
		УстановитьЗаголовкиОплаты();
		ПодготовитьПредварительноеОдобрениеНСПК();
		
	ИначеЕсли ПоКомандеОтменитьОплатуСертификатомНСПК Тогда
		
		ТаблицаТоваровФСС.Очистить();
		СуммаОплаченоСертификатамиНСПК = 0;
		СуммаОплаченоНал = 0;
		СуммаОплаченоБН = 0;
		ТабличныйДокументСертификатНСПК = Неопределено;
		ПредварительноеОдобрениеНСПКПолучено = Ложь;
		
	ИначеЕсли ПоКомандеЗаменаТоваров Тогда
		
		СуммаБезОкругления = 0;
		СуммаБезСкидки = 0;
		СуммаИтого = 0;
		
	КонецЕсли;
	
	НетПробитыхЧеков = ПробитыеЧеки.Количество() = 0;
	
	ДоступностьЭлементов = (НЕ Элементы.ГруппаОплатаНал.Видимость И НЕ Элементы.ГруппаОплатаКартой.Видимость
								И (НЕ Элементы.ГруппаОплатаВРассрочку.Видимость ИЛИ ПриемАвансаПоЗаказу)
								И НЕ Элементы.ГруппаОплатаСертификатом.Видимость
								И НЕ Элементы.ГруппаСуммаОплатаСертификатамиНСПК.Видимость
								И НЕ Элементы.ГруппаОплатаКредитом.Видимость
								И НЕ ПоКомандеОплатитьСертификатом
								И НЕ ПоКомандеОплатаQRКодом)
							ИЛИ ПоКомандеОтменитьОплатуQRКодом
							ИЛИ ПоКомандеОтменитьОплатуСертификатомНСПК
							ИЛИ ПоКомандеЗаменаТоваров
							ИЛИ ПоКомандеОтменитьОплатуСертификатом;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаБонусами, ДоступностьЭлементов И НетПробитыхЧеков);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьБонусами, КоличествоБонусов > 0 И ДоступностьЭлементов
		И НетПробитыхЧеков);
	
	Если НетПробитыхЧеков Тогда
		НастроитьЭлементыФормы(Элементы.Страницы.ТекущаяСтраница, Истина);
	Иначе
		
		Для Каждого ЭлементГруппы Из Элементы.ГруппаОперации.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементГруппы = Элементы.УдалитьЧек И НЕ ЭлементГруппы = Элементы.ОтложитьЧек Тогда
				УстановитьДоступностьЭлементаФормы(ЭлементГруппы, Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПриИзмененииБНОплаты Тогда
		
		СуммаОплаченоБН = Мин(СуммаБезОкругления, СуммаОплаченоБН);
		СуммаОплаченоБН = Макс(0, СуммаОплаченоБН);
		
		Если ЗначениеЗаполнено(ЧекККМПродажа) И НЕ ЭтоОперацияПродажи Тогда
			
			СуммаБНОплатыПоЭквайрингуВЧекеПродажи = СуммаБНОплатыСПодключеннымЭквайрингом(ЧекККМПродажа);
			
			Если СуммаБНОплатыПоЭквайрингуВЧекеПродажи > 0 И НЕ ЕстьОплатаВстречнымПредоставлением И НЕ ЭтоЗаменаТоваров Тогда
				СуммаОплаченоБН = Мин(СуммаОплаченоБН, СуммаБНОплатыПоЭквайрингуВЧекеПродажи);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаОплаченоНал = Макс(0, СуммаОплаченоНал);
	
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	
	ПроверкаНаРасчетСкидок = Истина;
	Если ИспользоватьАвтоматическиеСкидки Тогда
		ПроверкаНаРасчетСкидок = СкидкиРассчитаны;
	КонецЕсли;
	
	Если ЭтоОперацияПродажи И ПроверкаНаРасчетСкидок Тогда
		
		Если ОкруглятьПриПроизвольномВидеОплаты Тогда
			ОкруглитьСуммуЧекаВПользуПокупателя();
		Иначе
			
			Если СуммаОплаченоНал >= СуммаИтого Тогда
				ОкруглитьСуммуЧекаВПользуПокупателя();
			Иначе
				ОтменитьОкругление();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоКомандеНал И Элементы.ГруппаОплатаНал.Видимость Тогда
		СуммаОплаченоНал = СуммаИтого - СуммаОплаченоБН - СуммаОплаченоБезнал
			- СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса - СуммаОплаченоСертификатами 
			- СуммаОплаченоСертификатамиНСПК - СуммаТоваровКЗамене - СуммаОплаченоКредитом;
	КонецЕсли;
	СуммаОплаченоНал = Макс(0, СуммаОплаченоНал);
	
	Если (Элементы.Предоплата.Доступность И НЕ Элементы.ОплатаВРассрочку.Доступность)
			ИЛИ ПриемАвансаПоЗаказу Тогда
		СуммаОплаченоВРассрочку = СуммаИтого - СуммаОплаченоНал - СуммаОплаченоБН
			- СуммаОплаченоБезнал - СуммаОплаченоЗачетАванса - СуммаОплаченоСертификатамиНСПК
			- СуммаТоваровКЗамене - СуммаОплаченоКредитом - СуммаОплаченоСБП - СуммаОплаченоЮКасса;
	КонецЕсли;
		
	Если ПоКомандеОплатитьСертификатом Или ПоКомандеОтменитьОплатуСертификатом Или ПриИзмененииСуммыОплатыСертификатом Тогда
		Если СуммаОплаченоСертификатами = 0 И Элементы.ГруппаОплатаСертификатом.Видимость Тогда
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатом, Ложь);
		ИначеЕсли Не (СуммаОплаченоСертификатами = 0 Или Элементы.ГруппаОплатаСертификатом.Видимость) Тогда
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатом, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ПроинформироватьПользователяОКоличествеЧеков();
	РассчитатьСуммыОплаты();
	НастроитьДоступностьПробитьЧек();
	ЗаполнитьТаблицуОплат();
	ВывестиИнформациюНаДисплейПокупателяОВнесеннойСуммеОплаты();
	ОтобразитьКнопкиОрганизацийИСНО();
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиОтменыВидовОплат,
		Объект.Оплата.Количество() > (1+Число(ПриемАвансаПоЗаказу)));
		
	ДоступныПлатежныеСистемы = (СуммаЗаполненныхОплат < СуммаИтого);
	УстановитьДоступностьОплатыПлатежнымиСистемами(Элементы.ГруппаВидОплатыСБП,
		Элементы.ГруппаВидОплатыЮКасса, ДоступныПлатежныеСистемы);
	
	ДоступностьКомандОплатыПодарочнымСертификатом = (СуммаКОплате > 0 И ЭтоОперацияПродажи);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаДобавитьСертификат, ДоступностьКомандОплатыПодарочнымСертификатом);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаУдалитьСертификаты, ЭтоОперацияПродажи);
	
	Если ОткрытаСтраницаИнфоОшибка И ПоКомандеПереключитьЧек = "" Тогда
		ОплатаБезДеленияПоЧекам = Ложь;
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаИнфоОшибка);
	ИначеЕсли ОткрытаСтраницаИнфоОшибка И НЕ ПоКомандеПереключитьЧек = "" Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ФормированиеОтчетаБезГашения

&НаКлиенте
Процедура СнятьОтчетБезГашенияКлиент()

	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;

	
	Если ТаблицаКассККМОрганизаций.Количество() > 1 И ТекущаяОперация = "" Тогда
		
		ТекущаяОперация = "ОтчетБезГашения";
		ПереключитьНаСтраницуВыбораКассыККМ();
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СнятиеОтчетаБезГашенияЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Уверены, что хотите снять отчет без гашения (X - отчет)?'");
	ЗаголовокВопроса = НСтр("ru='Отчет без гашения'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);

КонецПроцедуры

&НаКлиенте
Процедура СнятиеОтчетаБезГашенияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПроизвестиСнятиеОтчетаБезГашения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиСнятиеОтчетаБезГашения()

	ОповещениеОФормированияОтчетаБезГашения = Новый ОписаниеОповещения("ЗавершитьФормированиеОтчетаБезГашения",
		ЭтотОбъект);
		
	ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
	ДополнительныеПараметрыДляПечати = ДополнительныеПараметрыОткрытияЗакрытияСмены();
	ДополнительныеПараметрыДляПечати.Пользователь = Объект.ПользовательБД;
	ДополнительныеПараметрыДляПечати.Кассир = Объект.Кассир;
	ДополнительныеПараметрыДляПечати.КассаККМ = Объект.КассаККМ;
	ДополнительныеПараметрыДляПечати.ВариантЗаполненияМестаРасчетов = ВариантЗаполненияМестаРасчетов;
	
	ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, ДополнительныеПараметрыДляПечати);
	
	Доступность = Ложь;
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФормированиеОтчетаБезГашения(
		ОповещениеОФормированияОтчетаБезГашения,
		УникальныйИдентификатор,
		ПодключаемоеОборудование,
		ПараметрыОперации);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьФормированиеОтчетаБезГашения(Результат, Параметры) Экспорт
	
	Доступность = Истина;
	
	Если ЕстьСвойство(Результат, "Результат") И НЕ Результат.Результат Тогда
		
		ТекстОшибки = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
		|%1
		|Отчет на фискальном регистраторе не сформирован.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.ОписаниеОшибки);
		
		ЗаголовокОшибки = НСтр("ru = 'Ошибка печати отчета без гашения'");
		
		ПоказатьПредупреждение(, ТекстОшибки, , ЗаголовокОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область Выдача_наличных_на_кассе

&НаКлиенте
Процедура ОткрытьДенежныйЯщикКлиент()

	ЗавершениеОткрытияДенежногоЯщика = Новый ОписаниеОповещения("ЗавершитьОткрытиеДенежногоЯщика", ЭтотОбъект);
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьОткрытиеДенежногоЯщика(ЗавершениеОткрытияДенежногоЯщика,
		УникальныйИдентификатор, ПодключаемоеОборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОткрытиеДенежногоЯщика(РезультатВыполнения, ПараметрыДействия) Экспорт

	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ЗаголовокОшибки = НСтр("ru = 'При открытии денежного ящика произошла ошибка'");
		ТелоОшибки = РезультатВыполнения.ОписаниеОшибки;
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТелоОшибки);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДанныеВыдачиНаличныхКлиент()

	ТекущаяВидимостьЭлементов = Элементы.ГруппаВыдачиНаличных.Видимость;
	Если ТекущаяВидимостьЭлементов Тогда
		СуммаНаличныхКВыдаче = 0;
	КонецЕсли;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыдачиНаличных, Не ТекущаяВидимостьЭлементов);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРазделДенежныйЯщик, Не ТекущаяВидимостьЭлементов);
	
КонецПроцедуры
	
#КонецОбласти

&НаКлиенте
Процедура ПодготовитьДанныеЧековДляФискализации(ИсходныеДанные)
	
	ОповещениеПриЗавершении = ИсходныеДанные.ОповещениеОЗавершении;
	ИдентификаторУстройстваФР = ИсходныеДанные.ИдентификаторУстройстваФР;
	Если ИсходныеДанные.ИдентификаторУстройстваФР = "АвтономнаяККТ" Тогда
		БумажныйЧек = Ложь;
	Иначе
		БумажныйЧек = ИсходныеДанные.БумажныйЧек;
	КонецЕсли;
	
	Доступность = Ложь;
	
	ДополнительныеДанные = ДополнительныеДанныеДляФискализации(БумажныйЧек);
	
	Если НЕ ЭтоЧекКоррекции Тогда
		
		ПробитыеЧекиПоСНО = ПробитыеЧеки.НайтиСтроки(ВыбраннаяОрганизацияИСНО());
		
		Если ПробитыеЧекиПоСНО.Количество() = 0 И ОжидаемоеКоличествоЧеков > 0 Тогда
			
			Контекст = Новый Структура();
			ФискализироватьЧек(Контекст, ДополнительныеДанные, ОповещениеПриЗавершении, ВыбраннаяСистемаНалогообложения);
			
		КонецЕсли;
		
	Иначе
		
		ОтборПоВидуОперации = Новый Структура("Возврат", Истина);
		ПробитыеЧекиПоВидуОперации = ПробитыеЧеки.НайтиСтроки(ОтборПоВидуОперации);
		
		Если ПробитыеЧекиПоВидуОперации.Количество() = 0 И ОжидаемоеКоличествоЧеков > 0 Тогда
			
			СистемаНалогообложения = СистемаНалогообложенияЧека(ЧекККМПродажа);
			Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации(Истина);
			Контекст = Новый Структура();
			ФискализироватьЧек(Контекст, ДополнительныеДанные, ОповещениеПриЗавершении, СистемаНалогообложения);
			
			Если ДополнительныеДанные.Отказ Тогда
				Возврат;
			КонецЕсли;
			
		Иначе
			ПробитьЧекКоррекцииПродажи();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекКоррекцииПродажи()
	
	Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПробитьЧекНаКлиентеЗавершение", ЭтотОбъект);
	ДополнительныеДанные = ДополнительныеДанныеДляФискализации();
	
	ОтборПоВидуОперации = Новый Структура("Возврат", Ложь);
	ПробитыеЧекиПоВидуОперации = ПробитыеЧеки.НайтиСтроки(ОтборПоВидуОперации);
	
	Если ПробитыеЧекиПоВидуОперации.Количество() = 0 И ОжидаемоеКоличествоЧеков > 0 Тогда
		
		Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации();
		
		Контекст = Новый Структура();
		ФискализироватьЧек(Контекст, ДополнительныеДанные, ОповещениеПриЗавершении,
		СистемаНалогообложенияЧекаКоррекции);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗаменыТоваровПродажи()
	
	Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПробитьЧекНаКлиентеЗавершение", ЭтотОбъект);
	ДополнительныеДанные = ДополнительныеДанныеДляФискализации();
	
	ОтборПоВидуОперации = Новый Структура("Возврат", Ложь);
	ПробитыеЧекиПоВидуОперации = ПробитыеЧеки.НайтиСтроки(ОтборПоВидуОперации);
	
	Если ПробитыеЧекиПоВидуОперации.Количество() = 0 И ОжидаемоеКоличествоЧеков > 0 Тогда
		
		Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации();
		СтруктураОтбора = Новый Структура("ТоварКЗамене", Истина);
		ТоварыКЗамене = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		Для Каждого ТоварКЗамене Из ТоварыКЗамене Цикл
			Объект.Товары.Удалить(ТоварКЗамене);
		КонецЦикла;
		
		Контекст = Новый Структура();
		ФискализироватьЧек(Контекст, ДополнительныеДанные, ОповещениеПриЗавершении,
			ВыбраннаяСистемаНалогообложения);
		ОбработатьИзменениеТаблицыТоваровНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьНефискальныхДокументов

&НаКлиенте
Процедура РаспечататьТоварныйЧекКлиент()
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Выбор чека для печати товарного чека'"));
	ПараметрыОткрытия.Вставить("РежимПечатиЧека", "ПечатьТоварногоЧека");
	ПараметрыОткрытия.Вставить("ВыводитьКомментарийКЧеку", ВыводитьКомментарийКЧеку);
	
	ОбработчикОповещенияОткрытияФормыВыбора = Новый ОписаниеОповещения(
		"ОповещениеОткрытьФормуВыбораЧекаПриПечатиПробитогоЧека", ЭтотОбъект);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОбработчикОповещенияОткрытияФормыВыбора, Режим)
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьТоварныйЧекПоФискальномуЧеку(ЧекККМ)
	
	ЭтоПечатьТоварногоЧекаНаКассовомОборудовании = (СпособФормированияТоварногоЧека = 2);
	ЭтоПечатьТоварногоЧекаНаОфисномПринтере = (СпособФормированияТоварногоЧека = 1);
	
	Если ЭтоПечатьТоварногоЧекаНаКассовомОборудовании
		И (ЗначениеЗаполнено(ПринтерЧеков) ИЛИ ЗначениеЗаполнено(ПодключаемоеОборудование))
		И ЗначениеЗаполнено(ЧекККМ) Тогда
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершитьПовторнуюПечатьФискальногоЧека", ЭтотОбъект);
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(ЧекККМ);
		ТекстЧека = ПодготовитьТекстТоварногоЧека(МассивДокументов);
		
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("СтрокиТекста", ТекстЧека);
		
		ОборудованиеВывода = ?(ЗначениеЗаполнено(ПринтерЧеков), ПринтерЧеков, ПодключаемоеОборудование);
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.
			НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, ОборудованиеВывода, ПараметрыОперации);
			
	ИначеЕсли ЭтоПечатьТоварногоЧекаНаОфисномПринтере И ЗначениеЗаполнено(ЧекККМ) Тогда
		СформироватьПечатнуюФормуТоварногоЧека(ЧекККМ);
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка печати товарного чека'");
		ТекстСообщения = НСтр("ru = 'Не удалось распечатать товарный чек.'");
		ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПечатнуюФормуТоварногоЧека(ЧекККМ)
	
	ОбщегоНазначенияРМККлиентПереопределяемый.СформироватьПечатнуюФормуТоварногоЧека(ЧекККМ, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьТекстТоварногоЧека(МассивЧеков)
	
	ТекстЧека = "";
	ОбщегоНазначенияРМКПереопределяемый.СформироватьТекстТоварногоЧека(МассивЧеков, ТекстЧека);
	
	Возврат ТекстЧека;
	
КонецФункции

&НаКлиенте
Процедура НапечататьЗаказПокупателя(ЧекККМ)
	
	ЭтоПечатьТоварногоЧекаНаКассовомОборудовании = (СпособПечатиЗаказаПокупателя = 2);
	ЭтоПечатьТоварногоЧекаНаОфисномПринтере = (СпособПечатиЗаказаПокупателя = 1);
	
	Если ЭтоПечатьТоварногоЧекаНаКассовомОборудовании
		И (ЗначениеЗаполнено(ПринтерЧеков) ИЛИ ЗначениеЗаполнено(ПодключаемоеОборудование))
		И ЗначениеЗаполнено(ЧекККМ) Тогда
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершитьПовторнуюПечатьФискальногоЧека", ЭтотОбъект);
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(ЧекККМ);
		ТекстЧека = ПодготовитьТекстЗаказа(МассивДокументов);
		
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("СтрокиТекста", ТекстЧека);
		
		ОборудованиеВывода = ?(ЗначениеЗаполнено(ПринтерЧеков), ПринтерЧеков, ПодключаемоеОборудование);
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.
			НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, ОборудованиеВывода, ПараметрыОперации);
			
	ИначеЕсли ЭтоПечатьТоварногоЧекаНаОфисномПринтере И ЗначениеЗаполнено(ЧекККМ) Тогда
		СформироватьПечатнуюФормуЗаказаПокупателя(ЧекККМ);
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка печати товарного чека'");
		ТекстСообщения = НСтр("ru = 'Не удалось распечатать товарный чек.'");
		ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПечатнуюФормуЗаказаПокупателя(ЧекККМ)
	
	ОбщегоНазначенияРМККлиентПереопределяемый.СформироватьПечатнуюФормуЗаказаПокупателя(ЧекККМ, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьТекстЗаказа(МассивЧеков)
	
	ТекстЧека = "";
	ОбщегоНазначенияРМКПереопределяемый.СформироватьТекстЗаказа(МассивЧеков, ТекстЧека);
	Возврат ТекстЧека;
	
КонецФункции 

#КонецОбласти

#Область Интерактивный_запуск_обмена_СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьУзлыОбмена()

	УзлыОбмена.Очистить();
	Результат = Новый Массив;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьУзлыОбменаРМК(Результат);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		УзлыОбмена.ЗагрузитьЗначения(Результат);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РучныеСкидкиИОкругление

&НаКлиенте
Функция ДопустимоПрименениеСкидкиПоСтроке(СтрокаЧека, СкидкиРазрешены, ТекущийТоварСкидка)
	
	Возврат СкидкиРазрешены И Не (СтрокаЧека.РассчитанаСкидка Или ТекущийТоварСкидка = 0
		Или СтрокаЧека.Сумма = СтрокаЧека.СуммаСкидкиОплатыБонусом);
	
КонецФункции

&НаКлиенте
Функция СуммаРучнойСкидкиНаПозицию(СтрокаЧека)
	
	Результат = 0;
	
	Если ТипЗнч(СтрокаЧека) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		Если ЭтоСоставляющаяНабора(СтрокаЧека) Тогда
			
			СоставНабора = СоставНабораПоЭлементуНабора(СтрокаЧека, Объект.Товары);
			
			Для Каждого ПозицияНабора Из СоставНабора Цикл
				Результат = Результат + ПозицияНабора.СуммаСкидкиНаценки;
			КонецЦикла;
			
		Иначе
			Результат = СтрокаЧека.СуммаСкидкиНаценки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает текущей заданную страницу, меняет активность элементов формы.
//
// Параметры:
//  АктивнаяСтраница - ЭлементФормы - страница для установки текущей;
//  АктивностьЭлементовУправленияФормы - Булево - новое значение элементов формы.
//
&НаКлиенте
Процедура НастроитьИнтерфейсПримененияСкидкиНаЧек(АктивнаяСтраница, АктивностьЭлементовУправленияФормы)

	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(АктивнаяСтраница);
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельУправленияЧеком, АктивностьЭлементовУправленияФормы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, АктивностьЭлементовУправленияФормы);
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельИзбранныхТоваров , АктивностьЭлементовУправленияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, ЗначениеСкидки, ЭтоСкидкаПроцентом = Истина)
	
	ЭтоПрименениеСкидки = (ЗначениеСкидки > 0);
	
	СтрокаКорзины.РассчитанаСкидка = ЭтоПрименениеСкидки;
	
	Если ЭтоПрименениеСкидки Тогда
		
		Если ЭтоСкидкаПроцентом Тогда
			
			СтрокаКорзины.ПроцентСкидкиНаценки = ЗначениеСкидки;
			СтрокаКорзины.СуммаСкидкиНаценки = 0;
			
		Иначе
			
			СтрокаКорзины.СуммаСкидкиНаценки = ЗначениеСкидки;
			СтрокаКорзины.ПроцентСкидкиНаценки = 0;
			
		КонецЕсли;
			
	Иначе
		
		СтрокаКорзины.СуммаСкидкиНаценки = ЗначениеСкидки;
		СтрокаКорзины.ПроцентСкидкиНаценки = ЗначениеСкидки;
		
	КонецЕсли;
		
КонецПроцедуры

// Вычисляет сумму округления и распределяет ее между позициями корзины.
//
&НаКлиенте
Процедура ОкруглитьСуммуЧекаВПользуПокупателя()
	
	Если ТочностьОкругления > 0.01 Тогда
		
		ОтменитьОкругление();
		РассчитатьСуммуОкругленияВПользуПокупателя();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОкругление()
	
	СуммаОкругленияВПользуПокупателя = Объект.Товары.Итог("СуммаОкругленияВПользуПокупателя");
	
	Если СуммаОкругленияВПользуПокупателя > 0 Тогда
		
		Для Каждого СтрокаКорзины Из Объект.Товары Цикл
			
			Если СтрокаКорзины.Оплачена Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаКорзины.СуммаСкидкиНаценки = СтрокаКорзины.СуммаСкидкиНаценки - СтрокаКорзины.СуммаОкругленияВПользуПокупателя;
			СтрокаКорзины.СуммаОкругленияВПользуПокупателя = 0;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины.ПолучитьИдентификатор());
			
		КонецЦикла;
		
		ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуУправляемыхСкидок()
	
	НоваяТаблицаУправляемыхСкидок = ТаблицаУправляемыхСкидок.Выгрузить();
	НоваяТаблицаУправляемыхСкидок.Очистить();
	
	Если ИспользоватьСерверЛояльностиПолучательДанных И Не РежимКассыСамообслуживания Тогда
		
		ПараметрыПодключения = ОбщегоНазначенияРМК.ЗначенияПараметровСервераЛояльности(ТекущаяНастройкаРМК);
		ЗначенияПараметровМетода = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыМетодовБонуснойПодсистемы();
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.
									ПараметрыЗапросаПолучитьТаблицуУправляемыхСкидок(ПараметрыПодключения, ЗначенияПараметровМетода);
		Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		Если Не Результат.ЕстьОшибки Тогда
			СтрокаJSON = Результат.ДанныеОтвета;
			ДанныеОтвета = Неопределено;
			Если СтрокаJSON <> Неопределено Тогда
				СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
				Если ДанныеОтвета <> Неопределено И ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
					Для каждого СтрокаМассива Из ДанныеОтвета Цикл
						НоваяСтрока = НоваяТаблицаУправляемыхСкидок.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
						
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.СкидкаНаценка) Тогда
							ОписаниеТипаСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;
							НоваяСтрока.СкидкаНаценка = ОбщегоНазначенияРМК.ПолучитьДесериализованноеСсылочноеЗначение(СтрокаМассива, "ИдентификаторСкидки", ОписаниеТипаСкидкаНаценка);
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Не РежимКассыСамообслуживания Тогда
		СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.
			ЗаполнитьТаблицуУправляемыхСкидок(НоваяТаблицаУправляемыхСкидок);
	КонецЕсли;
	
	Если НоваяТаблицаУправляемыхСкидок.Количество() > 0 Тогда
		ТаблицаУправляемыхСкидок.Очистить();
		ТаблицаУправляемыхСкидок.Загрузить(НоваяТаблицаУправляемыхСкидок);
		// Заполнение по-умолчанию, если ответ пришел в старом формате.
		Для Каждого СтрокаСкидки Из ТаблицаУправляемыхСкидок Цикл
			Если Не ЗначениеЗаполнено(СтрокаСкидки.ТипСкидки) Тогда
				СтрокаСкидки.ТипСкидки = "Ручная";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаСкидки.ОбластьДействия) Тогда
				СтрокаСкидки.ОбластьДействия = "На документ";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаСкидки.ИдентификаторСкидки) Тогда
				СтрокаСкидки.ИдентификаторСкидки = Лев(СтрокаСкидки.Представление ,36);
			КонецЕсли;
		КонецЦикла;
		Если ТаблицаУправляемыхСкидок.Количество() = 1 Тогда
			Элементы.УправляемыеСкидки.Заголовок = ТаблицаУправляемыхСкидок[0].Представление;
		Иначе
			Элементы.УправляемыеСкидки.Заголовок = НСтр("ru = 'Управляемые скидки'");
		КонецЕсли;
	Иначе
		УстановитьВидимостьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуОкругленияВПользуПокупателя()
	
	РазличныеОрганизацииИСНО = РазличныеСНОВСпискеПокупок();
	Для Каждого ОрганизацияИСНОЧека Из РазличныеОрганизацииИСНО Цикл
	
		СуммаДоОкругления					= 0;
		СуммаТоваровБезОкругления			= 0;
		МассивКоэффициентов					= Новый Массив;
		ТочностьОкругленияПриРаспределении	= 2;
		РаспределенныеОкругления			= Новый Массив;
		
		ОтборСтрок = ОрганизацияИСНОЧека;
		ОтборСтрок.Вставить("Оплачена", Ложь);
		СтрокиСОтбором = Объект.Товары.НайтиСтроки(ОтборСтрок);
		
		Для каждого СтрокаКорзины Из СтрокиСОтбором Цикл
			
			Если (Не СтрокаКорзины.ЗапретОплатыБонусамиСкидками) Тогда
				
				СуммаДоОкругления = СуммаДоОкругления + СтрокаКорзины.Сумма;
				МассивКоэффициентов.Добавить(СтрокаКорзины.Сумма);
				
			Иначе
				СуммаТоваровБезОкругления = СуммаТоваровБезОкругления + СтрокаКорзины.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
		СуммаПослеОкругления = Цел(СуммаДоОкругления / ТочностьОкругления) * ТочностьОкругления;
		СуммаОкругленийВЧеке = СуммаДоОкругления - СуммаПослеОкругления;
		
		Если СуммаОкругленийВЧеке > 0 И СуммаПослеОкругления > 0 Тогда
			
			ИндексСтрокиДляРаспределенияПогрешностиОкругления = -1;
			СуммаСтрокиДляРаспределенияПогрешностиОкругления = 0;
			Итератор = 0;
			
			РаспределенныеОкругления = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
				СуммаОкругленийВЧеке, МассивКоэффициентов, ТочностьОкругленияПриРаспределении);
				
			ДоступныДанныеРаспределения = (РаспределенныеОкругления.Количество() > 0);
				
			ИдентификаторТекущейСтрокиДоРасчетаОкруглений = ТекущийТоварИдентификатор;
			
			СуммаПоСтрокам = 0;
			Для Каждого СтрокаКорзины Из СтрокиСОтбором Цикл
				
				ТекущийТоварИдентификатор = СтрокаКорзины.ПолучитьИдентификатор();
				
				Если СтрокаКорзины.ЗапретОплатыБонусамиСкидками Тогда
					
					СуммаПоСтрокам = СуммаПоСтрокам + СтрокаКорзины.Сумма;
					Продолжить;
					
				КонецЕсли;
				
				Если ДоступныДанныеРаспределения Тогда
					
					Если СтрокаКорзины.Сумма > СуммаСтрокиДляРаспределенияПогрешностиОкругления Тогда
						
						СуммаСтрокиДляРаспределенияПогрешностиОкругления = СтрокаКорзины.Сумма;
						ИндексСтрокиДляРаспределенияПогрешностиОкругления = Итератор;
						
					КонецЕсли;
					
					ЗначениеСкидкиОкруглением = РаспределенныеОкругления[Итератор];
					СтрокаКорзины.СуммаОкругленияВПользуПокупателя = ЗначениеСкидкиОкруглением;
					
					Итератор = Итератор + 1;
					
				КонецЕсли;
				
				РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
				
				СуммаПоСтрокам = СуммаПоСтрокам + СтрокаКорзины.Сумма;
				
			КонецЦикла;
			
			Погрешность = СуммаПослеОкругления + СуммаТоваровБезОкругления - СуммаПоСтрокам;
			
			Если Погрешность <> 0 И ИндексСтрокиДляРаспределенияПогрешностиОкругления >= 0 Тогда
				
				СтрокаКорзины = Объект.Товары.Получить(ИндексСтрокиДляРаспределенияПогрешностиОкругления);
				СтрокаКорзины.СуммаСкидкиНаценки = СтрокаКорзины.СуммаСкидкиНаценки - Погрешность;
				СтрокаКорзины.Сумма = СтрокаКорзины.Сумма + Погрешность;
				ПересчитатьСуммы(СтрокаКорзины);
				
			КонецЕсли;
			
			ТекущийТоварИдентификатор = ИдентификаторТекущейСтрокиДоРасчетаОкруглений;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФФД12

&НаКлиенте
Процедура ДобавитьТоварПоДаннымМарки(ЭтоОбработкаСопоставленияТовара, СтруктураОтложенногоПоказаПредупреждения = Неопределено)

	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	РассчитатьСуммуОплатыБонусами(СтруктураОтложенногоПоказаПредупреждения);
	ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
	НастроитьДоступностьПробитьЧек();

	Если ЭтоОбработкаСопоставленияТовара Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ДанныеДляРучногоСопоставления = Неопределено;
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция КонтекстПроверкиКонтрольнойМарки()
	
	КонтекстПроверкиКонтрольнойМарки = Новый Структура();
	КонтекстПроверкиКонтрольнойМарки.Вставить("КодМаркировки", "");
	КонтекстПроверкиКонтрольнойМарки.Вставить("ОсобенностьУчета", Неопределено);
	КонтекстПроверкиКонтрольнойМарки.Вставить("КонтекстВызова", "");
	КонтекстПроверкиКонтрольнойМарки.Вставить("РезультатЛокальнойПроверки", РезультатЛокальнойПроверки());
	КонтекстПроверкиКонтрольнойМарки.Вставить("РезультатУдаленнойПроверки", РезультатУдаленнойПроверки());
	КонтекстПроверкиКонтрольнойМарки.Вставить("ИдентификаторЗапроса", "");
	КонтекстПроверкиКонтрольнойМарки.Вставить("ЭтоОбработкаСопоставленияТовара", Ложь);
	КонтекстПроверкиКонтрольнойМарки.Вставить("Организация", Неопределено);

	
	Возврат КонтекстПроверкиКонтрольнойМарки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьКонтрольнуюМарку(КонтекстПроверкиКонтрольнойМарки)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ЕстьСвойство(КонтекстПроверкиКонтрольнойМарки, "КодМаркировки")
		И ЗначениеЗаполнено(КонтекстПроверкиКонтрольнойМарки.КодМаркировки) Тогда

		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
		
		ОтборПоКодуМарки = Новый Структура();
		ОтборПоКодуМарки.Вставить("КодМаркировки", КонтекстПроверкиКонтрольнойМарки.КодМаркировки);
		РезультатПоиска = Объект.Товары.НайтиСтроки(ОтборПоКодуМарки);
		
		Если (РезультатПоиска.Количество() = 1 
			И НЕ ЗначениеЗаполнено(РезультатПоиска[0].КонтрольнаяМарка))
			ИЛИ РезультатПоиска.Количество() = 0 Тогда
		
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект,
				Элементы.ГруппаПодтвержденияКонтрольнойМарки);
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПодтверждениеПродажиОжиданиеПроверки);
			
			УстановитьДоступностьЭлементовРабочейОбластиФормы(Ложь);
			
			ВременныйКонтекстПроверкиМарки = КонтекстПроверкиКонтрольнойМарки;
			
			Отбор = Новый Структура("Организация", ВременныйКонтекстПроверкиМарки.Организация);
			СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
			Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
			Сутки = 86400;
			
			СменаВалидна = ((Дата - СтрокаКассы.НачалоКассовойСмены) < Сутки);
		
			Если СменаВалидна Тогда
				ЗапроситьКонтрольныеМарки();
			Иначе
				
				ИмитацияРезультатаВыполнения = Новый Структура();
				ИмитацияРезультатаВыполнения.Вставить("Результат", Ложь);
				ИмитацияРезультатаВыполнения.Вставить("ТекущаяСменаНеВалидна", Истина);
				ЗавершитьЗапросКонтрольныхМарок(ИмитацияРезультатаВыполнения, ВременныйКонтекстПроверкиМарки);
				
			КонецЕсли;
		
		Иначе
			
			Если РезультатПоиска.Количество() > 0 Тогда
				Элементы.Товары.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеТекущегоСостоянияККТЗавершение(РезультатВыполнения, Контекст) Экспорт
	
	Если РезультатВыполнения.Результат И РезультатВыполнения.СтатусСмены = 2 Тогда
		// Замедление до секунды, чтобы касса успевала отработать
		ПодключитьОбработчикОжидания("ЗапроситьКонтрольныеМарки", 1, Истина);
	Иначе
		
		ОтборДляПоискаПоМарке = Новый Структура("КодМаркировки",
			ВременныйКонтекстПроверкиМарки.КодМаркировки);
		
		СтрокиКУдалению = Объект.Товары.НайтиСтроки(ОтборДляПоискаПоМарке);
		
		Если СтрокиКУдалению.Количество() > 0 Тогда
			Объект.Товары.Удалить(СтрокиКУдалению[0]);
		КонецЕсли;
		
		ПересчитатьИтогиТабличнойЧастиТовары();
		РассчитатьСуммуОплатыБонусами();
		
		Если Объект.Товары.Количество() = 0 Тогда
			СоздатьНовыйНабор();
		КонецЕсли;
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		
		ВременныйКонтекстПроверкиМарки = Неопределено;
		ОжидатьВводМарки = Ложь;
		ДанныеДляРучногоСопоставления = Неопределено;
		УстановитьДоступностьЭлементовРабочейОбластиФормы(Истина);
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка добавления маркированного товара.'");
		ТекстСообщения = НСтр("ru = 'Кассовая смена закрыта или истекла.'");
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		ОбработатьИзменениеТаблицыТоваровНаКлиенте();
		
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура ЗавершитьЗапросКонтрольныхМарок(РезультатВыполнения, Контекст) Экспорт
	
	ЕстьДанныеОтвета = ЕстьСвойство(РезультатВыполнения, "Результат");
	
	Если ЕстьДанныеОтвета И РезультатВыполнения.Результат Тогда
		
		ДанныеПроверки = ДанныеПроверкиКодаМаркировки(РезультатВыполнения);
		
		Если ЗначениеЗаполнено(ДанныеПроверки) И ТипЗнч(ДанныеПроверки) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Контекст.РезультатЛокальнойПроверки, ДанныеПроверки);
		КонецЕсли;
		
	ИначеЕсли ЕстьДанныеОтвета Тогда
		
		ОтборДляПоискаПоМарке = Новый Структура("КодМаркировки",
			ВременныйКонтекстПроверкиМарки.КодМаркировки);
		
		СтрокиКУдалению = Объект.Товары.НайтиСтроки(ОтборДляПоискаПоМарке);
		
		Если СтрокиКУдалению.Количество() > 0 Тогда
			Объект.Товары.Удалить(СтрокиКУдалению[0]);
		КонецЕсли;
		
		ПересчитатьИтогиТабличнойЧастиТовары();
		РассчитатьСуммуОплатыБонусами();
		
		Если Объект.Товары.Количество() = 0 Тогда
			СоздатьНовыйНабор();
		КонецЕсли;
		
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		
		ВременныйКонтекстПроверкиМарки = Неопределено;
		ОжидатьВводМарки = Ложь;
		ДанныеДляРучногоСопоставления = Неопределено;
		УстановитьДоступностьЭлементовРабочейОбластиФормы(Истина);
		
		Если ЕстьСвойство(РезультатВыполнения, "ТекущаяСменаНеВалидна") Тогда
			ТекстСообщения = НСтр("ru = 'Кассовая смена закрыта или истекла.'");
		Иначе
			Если ЕстьСвойство(РезультатВыполнения, "ОписаниеОшибки") Тогда
				ТекстСообщения = СтрШаблон("%1", РезультатВыполнения.ОписаниеОшибки);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось завершить запрос контрольной марки.'");
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка добавления маркированного товара.'");
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		ОбработатьИзменениеТаблицыТоваровНаКлиенте();
		Возврат;
			
	КонецЕсли;
	
	// Замедление до секунды, чтобы касса успевала отработать
	ЗаполнитьЗначенияСвойств(ВременныйКонтекстПроверкиМарки, Контекст);
	ВременныйКонтекстПроверкиМарки = Контекст;
	ПодключитьОбработчикОжидания("ПолучитьРезультатыЗапросаКМ", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПолучениеРезультатовЗапросаПроверкиКодаМаркировкиОтИСМП(РезультатВыполнения, Контекст) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ДанныеРезультатаПроверки = ДанныеПроверкиКодаМаркировки(РезультатВыполнения);
		
		Если ЗначениеЗаполнено(ДанныеРезультатаПроверки) Тогда
			
			ЗаполнитьРезультатУдаленнойПроверки(Контекст.РезультатУдаленнойПроверки, ДанныеРезультатаПроверки);
			ЗаполнитьЗначенияСвойств(ВременныйКонтекстПроверкиМарки, Контекст);
			
			РезультатПроверкиККМ = Контекст.РезультатЛокальнойПроверки;
			РезультатПроверкиИСМП = Контекст.РезультатУдаленнойПроверки;
			
			ТребуетсяПовторнаяУдаленнаяПроверка = ТребуетсяПовторныйЗапросВОИСМ(РезультатПроверкиИСМП);
			ПроведенаПроверкаОИСМ = ?(ЕстьСвойство(РезультатВыполнения, "РезультатПроверкиОИСМ"),
				РезультатВыполнения.РезультатПроверкиОИСМ, Ложь);
			
			Если ТребуетсяПовторнаяУдаленнаяПроверка Тогда
				
				Контекст.РезультатУдаленнойПроверки = РезультатУдаленнойПроверки();
				ВременныйКонтекстПроверкиМарки = Контекст;
				// Замедление до секунды, чтобы касса успевала отработать
				ПодключитьОбработчикОжидания("ПолучитьРезультатыЗапросаКМ", 1, Истина);
				
			ИначеЕсли ПроведенаПроверкаОИСМ Или Не ОжидатьПолученияОтветаИСМП Тогда
				НачатьПодтверждениеМарки(Контекст);
			Иначе
				
				ОбщегоНазначенияРМККлиентПереопределяемый.ОбработатьОшибкуПроверкиКодаМаркировки(ЭтотОбъект,
					РезультатПроверкиККМ, РезультатПроверкиИСМП);
				
				СтраницаДиалога = Элементы.ПодтверждениеПродажиБезПроверкиМарки;
				ОбработатьОшибкуПроверкиМарки(Контекст, СтраницаДиалога);
				
			КонецЕсли;
			
		Иначе
			
			ТекстЗаголовка = НСтр("ru = 'Не удалось получить данные ответа проверки кода маркировки в ИСМП.'");
			ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияРМККлиентПереопределяемый.ОбработатьОшибкуПроверкиКодаМаркировки(ЭтотОбъект);
		
		СтраницаДиалога = Элементы.ПодтверждениеПродажиБезПроверкиМарки;
		ОбработатьОшибкуПроверкиМарки(Контекст, СтраницаДиалога);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТовара(ТекущийВыбор, ДействующиеЗапретыПродаж = Неопределено)
	
	Если ИспользоватьЗапретПродаж И ЗначениеЗаполнено(ТекущийВыбор.Номенклатура) И НЕ ЭтоВозвратБезОснования Тогда
		
		ТекущийКэшЗапретов = КэшЗапретовПродаж;
		ДействующиеЗапретыПродаж = ОбщегоНазначенияРМККлиент.НаличиеЗапретовПродажи(ТекущийВыбор.ВидНоменклатуры,
			ТекущийВыбор.ОсобенностьУчета, ТекущийКэшЗапретов);
		
		Если ДействующиеЗапретыПродаж.Количество() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КодМарки = ?(ЕстьСвойство( ДанныеДляРучногоСопоставления, "КодМарки"),
			ДанныеДляРучногоСопоставления.КодМарки, "");
			
	ОсобенностьУчета = Неопределено;
	Если ТекущийВыбор.Свойство("ОсобенностьУчета") Тогда
		ОсобенностьУчета = ТекущийВыбор.ОсобенностьУчета;
	КонецЕсли;
	
	ПсевдоСтрока = Новый Структура;
	ПсевдоСтрока.Вставить("Номенклатура", ТекущийВыбор.Номенклатура);
	ПсевдоСтрока.Вставить("Организация");
	Если ТекущийВыбор.Свойство("Организация") Тогда
		ПсевдоСтрока.Организация = ТекущийВыбор.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодМарки) Тогда
		ЗаполнитьОрганизациюПродажи(ПсевдоСтрока);
		Если НЕ ЗначениеЗаполнено(ПсевдоСтрока.Организация) Тогда
			ПсевдоСтрока.Организация = ОсновнаяОрганизация;
		Иначе
			
			ОтборПоОрганизации = Новый Структура("Организация", ПсевдоСтрока.Организация);
			КассыККМПоОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоОрганизации);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверкаМаркиВозможна(КодМарки, ОсобенностьУчета, ПсевдоСтрока.Организация) Тогда
		
		КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
		ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, ТекущийВыбор);
		КонтекстПроверкиКонтрольнойМарки.Организация = ПсевдоСтрока.Организация;
		КонтекстПроверкиКонтрольнойМарки.КодМаркировки = КодМарки;
		КонтекстПроверкиКонтрольнойМарки.КонтекстВызова = "ОбработатьВыборТовара";
		
		КонтекстПроверкиКонтрольнойМарки.Вставить("ТекущийВыбор", ТекущийВыбор);
		КонтекстПроверкиКонтрольнойМарки.Вставить("ДействующиеЗапретыПродаж", ДействующиеЗапретыПродаж);
		
		ОбработатьКонтрольнуюМарку(КонтекстПроверкиКонтрольнойМарки);
		
	Иначе
		ОбработатьВыборТовараСервер(ТекущийВыбор, ДействующиеЗапретыПродаж);
	КонецЕсли;
	
	ОтобразитьСопутствующиеТоварыПриДобавленииНоменклатуры(ТекущийВыбор);
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеЗапросаКМ(ПроверяемыйКодМарки, Количество = 1)
	
	ПараметрыЗапроса = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыЗапросКМ();
	ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);

	ПланируемыйСтатусТовара = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
			"Перечисление.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварРеализован");
	
	Если ЭтоВозврат Тогда
		ПланируемыйСтатусТовара = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
			"Перечисление.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварВозвращен");
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		Если ТекущаяСтрока.ПоштучноеВыбытие Тогда
			
			ПланируемыйСтатусТовара = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
					"Перечисление.ПланируемыйСтатусМаркируемогоТовара.МерныйТоварВСтадииРеализации");
			
			Если ЭтоВозврат Тогда
				ПланируемыйСтатусТовара = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
					"Перечисление.ПланируемыйСтатусМаркируемогоТовара.ЧастьТовараВозвращена");
			КонецЕсли;
			
			Если ОбщегоНазначенияРМККлиентСервер.ЭтоПивнаяПродукция(ТекущаяСтрока.ОсобенностьУчета) Тогда
				Количество = ТекущаяСтрока.Количество;
				ПараметрыЗапроса.МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Литр");
			Иначе
				ПараметрыЗапроса.ДробноеКоличество.Числитель = ТекущаяСтрока.ЧастичноеВыбытиеКоличество;
				ПараметрыЗапроса.ДробноеКоличество.Знаменатель = ТекущаяСтрока.КоличествоВПотребительскойУпаковке;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторТекущейСессииПроверкиМарок		= Строка(Новый УникальныйИдентификатор);
	ПараметрыЗапроса.ИдентификаторЗапроса		= ИдентификаторТекущейСессииПроверкиМарок;
	ПараметрыЗапроса.ПланируемыйСтатусТовара	= ПланируемыйСтатусТовара;
	ПараметрыЗапроса.КонтрольнаяМарка			= ПроверяемыйКодМарки;
	ПараметрыЗапроса.ОжидатьПолучениеОтветаОИСМ	= ОжидатьПолученияОтветаИСМП;
	ПараметрыЗапроса.Количество					= Количество;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПривестиКодМаркировкиКBase64(КодМаркировки)
	
	СимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
	Разделитель = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
	КодМаркировкиОригинал = СтрЗаменить(КодМаркировки, Разделитель, СимволGS1);
	
	Возврат МенеджерОборудованияКлиентСервер.ШтрихкодВBase64(КодМаркировкиОригинал);
	
КонецФункции

&НаКлиенте
Функция ПроверкаМаркиВозможна(КодМарки, ОсобенностьУчета, Организация)
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(КодМарки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Отбор = Новый Структура("Организация", Организация);
	СтрокиКасс = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор);
	Если СтрокиКасс.Количество() = 0 Тогда
		Отбор = Новый Структура("Организация", ОсновнаяОрганизация);
		СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	Иначе
		СтрокаКассы = СтрокиКасс[0];
	КонецЕсли;
	
	ПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
	
	Если НЕ ПоддерживаетПроверкуКодовМаркировки Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоАлкогольнаяМаркированнаяПродукция =
		(ОсобенностьУчета = ОбщегоНазначенияРМККлиент.ОсобенностьУчетаАлкоголь());
	ЭтоИзделиеИзНатуральногоМеха =
		(ОсобенностьУчета = ОбщегоНазначенияРМККлиент.ОсобенностьУчетаГИСМ());
		
	Результат = НЕ(ЭтоАлкогольнаяМаркированнаяПродукция ИЛИ ЭтоИзделиеИзНатуральногоМеха);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОсобенностьУчетаНоменклатуры(Номенклатура)
	
	ОтборПоТовару = Новый Структура("Номенклатура", Номенклатура);
	СтрокиКорзины = Объект.Товары.НайтиСтроки(ОтборПоТовару);
	Результат = ?(СтрокиКорзины.Количество() > 0,
		СтрокиКорзины[0].ОсобенностьУчета,
		Неопределено);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция РезультатЛокальнойПроверки()

	Результат = Новый Структура();
	Результат.Вставить("КодМаркировкиПроверен", Ложь);
	Результат.Вставить("РезультатПроверки", Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция РезультатУдаленнойПроверки()

	Результат = Новый Структура();
	Результат.Вставить("РезультатПроверкиОИСМ", Ложь);
	Результат.Вставить("КодОбработкиЗапроса", -1);
	Результат.Вставить("КодРезультатаПроверкиОИСМ", -1);
	Результат.Вставить("РезультатПроверкиСведенийОТоваре", "");
	Результат.Вставить("РезультатПроверкиСведенийОТовареПФ", "");
	Результат.Вставить("РезультатОбработкиЗапроса",
		НСтр("ru = 'Ответ из ""Честного знака"" не получен'"));
	Результат.Вставить("РезультатПроверкиОИСМПредставление", "");
	Результат.Вставить("СтатусОбработкиЗапроса",
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.СтатусОбработкиЗапросаКМ.ПустаяСсылка"));
	Результат.Вставить("СтатусРезультата",
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.СтатусРезультатаЗапросаКМ.ПустаяСсылка"));
	Результат.Вставить("СтатусТовара",
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОтветОИСМОСтатусеТовара.ПустаяСсылка"));
			
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДанныеПроверкиКодаМаркировки(ИсходныеДанные)

	Результат = Неопределено;
	
	Если ТипЗнч(ИсходныеДанные) = Тип("Структура")
		И ЗначениеЗаполнено(ИсходныеДанные) Тогда
			Результат = ИсходныеДанные;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьРезультатУдаленнойПроверки(РезультатПроверки, ИсходныеДанные)

	ЗаполнитьЗначенияСвойств(РезультатПроверки, ИсходныеДанные);
	
	Если ЕстьСвойство(ИсходныеДанные, "КодОбработкиЗапроса")
		И ТипЗнч(ИсходныеДанные.КодОбработкиЗапроса) = Тип("Число") Тогда
		
			КодОбработкиЗапроса = ИсходныеДанные.КодОбработкиЗапроса;
			
			Если КодОбработкиЗапроса = 0 Тогда
				РезультатОбработкиЗапроса = НСтр("ru = 'Формат запроса и кода маркировки корректны'");
			ИначеЕсли КодОбработкиЗапроса = 1 Тогда
				РезультатОбработкиЗапроса = НСтр("ru = 'Некорректный формат запроса'");
			ИначеЕсли КодОбработкиЗапроса = 2 Тогда
				РезультатОбработкиЗапроса = НСтр("ru = 'Некорректный формат кода маркировки'");
			Иначе
				РезультатОбработкиЗапроса = НСтр("ru = 'Ответ из ""Честного знака"" не распознан'");
			КонецЕсли;
			
			РезультатПроверки.РезультатОбработкиЗапроса = РезультатОбработкиЗапроса;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ТребуетсяПовторныйЗапросВОИСМ(ДанныеОИСМ)

	Результат = Ложь;
	
	Если ЕстьСвойство(ДанныеОИСМ, "СтатусРезультата") Тогда
		
		Результат = (ДанныеОИСМ.СтатусРезультата =
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.СтатусРезультатаЗапросаКМ.Ожидается"));
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НачатьПодтверждениеМарки(Контекст)
	
	ИдентификаторЗапроса = Контекст.ИдентификаторЗапроса;
	ПараметрыПодтвержденияКМ = МенеджерОборудованияКлиентСервер.ПараметрыПодтверждениеКМ();
	ПараметрыПодтвержденияКМ.ИдентификаторЗапроса = ИдентификаторЗапроса;
	ПараметрыПодтвержденияКМ.Выбытие = Истина;
	
	Отбор = Новый Структура("Организация", Контекст.Организация);
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	ПодключаемоеОборудованиеДляПроверкиМарки = СтрокаКассы.ИдентификаторУстройства;
		
	ОповещениеОЗавершенииПодтвержденияКМ = Новый ОписаниеОповещения("ЗавершитьПодтверждениеКонтрольнойМарки",
		ЭтотОбъект, Контекст);
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПодтверждениеКМ(ОповещениеОЗавершенииПодтвержденияКМ,
		УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыПодтвержденияКМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодтверждениеКонтрольнойМарки(РезультатВыполнения, Контекст) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И (РезультатВыполнения.Результат) Тогда
		ОбработатьУспешноеДобавлениеМарки(Контекст);
	Иначе
		
		ОбщегоНазначенияРМККлиентПереопределяемый.ОбработатьОшибкуПроверкиКодаМаркировки(ЭтотОбъект);
		
		ДанныеПроверки = ДанныеПроверкиКодаМаркировки(РезультатВыполнения);
		СтраницаДиалога = Элементы.ПодтверждениеПродажиБезПроверкиМарки;
		ОбработатьОшибкуПроверкиМарки(Контекст, СтраницаДиалога);
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗакрытиеСессииПроверкиКонтрольныхМарок(РезультатВыполнения, ПараметрыВыполнения) Экспорт

	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось закрыть сессию проверки кода маркировки'");
		
		Если ЕстьСвойство(РезультатВыполнения, "ОписаниеОшибки") Тогда
			ТекстСообщения= СтрШаблон("%1: %2", ТекстСообщения, РезультатВыполнения.ОписаниеОшибки);
		КонецЕсли;
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка закрытия сессии проверки кода маркировки'");
		ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
		
	КонецЕсли;

	ВременныйКонтекстПроверкиМарки = Неопределено;

КонецПроцедуры

&НаСервере
Процедура ДополнитьДаннымиМарок(ПозицииЧека)

	ТаблицаТоваров = Объект.Товары;
	ОтборДляПоиска = Новый Структура();
	
	Для Каждого Строка Из ПозицииЧека Цикл
		
		Если НЕ Строка.Свойство("КонтрольнаяМарка") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоЧекКоррекции Тогда
			Строка.КонтрольнаяМарка = "";
			Продолжить;
		КонецЕсли;
		
		Если Строка.Свойство("Штрихкод") И ЗначениеЗаполнено(Строка.Штрихкод) Тогда
			
			ОтборДляПоиска.Вставить("КодМаркировки", Строка.Штрихкод);
			Результат = ТаблицаТоваров.НайтиСтроки(ОтборДляПоиска);
			
			Если Результат.Количество() = 1 Тогда
				Строка.КонтрольнаяМарка = ПривестиКодМаркировкиКBase64(Результат[0].КонтрольнаяМарка);
				
				Если НЕ ККМПоддерживаетПроверкуКодовМаркировки И ЗначениеЗаполнено(Строка.КонтрольнаяМарка) Тогда
					Строка.ШтрихкодBase64 = Строка.КонтрольнаяМарка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборТовараСервер(ТекущийВыбор, ДействующиеЗапретыПродаж = Неопределено)
	
	МассивТоваров = Новый Массив;
	МассивТоваров.Добавить(ТекущийВыбор.Номенклатура);
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуТовары(МассивТоваров, ТаблицаТовары);
	
	ЕстьСерияПартия = Ложь;
	ДобавлятьСерийныйТоварНовойСтрокой = Истина;
	Если ЕстьСвойство(ТекущийВыбор, "Серия") Или ЕстьСвойство(ТекущийВыбор, "Партия") Тогда
		ЕстьСерияПартия = Истина;
	КонецЕсли;
	Если ЕстьСвойство(ТекущийВыбор, "УникальностьСерии") И ЕстьСвойство(ТекущийВыбор, "Серия") Тогда
		Если Не ТекущийВыбор.УникальностьСерии И ЗначениеЗаполнено(ТекущийВыбор.Серия) Тогда
			ДобавлятьСерийныйТоварНовойСтрокой = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
		
		Если СтрокаТаблицы.Маркируемый Тогда
			
			Если ЭтоЧекКоррекции Тогда
				Возврат;
			КонецЕсли;
			ДобавитьСтрокуВТабличнуюЧасть(СтрокаТаблицы, ТекущийВыбор, Истина);
			Возврат;
			
		ИначеЕсли (СтрокаТаблицы.НеобходимоДобавитьСтроку И Не ЕстьСерияПартия) ИЛИ РежимВыбораПодарка Тогда
			
			ДобавитьСтрокуВТабличнуюЧасть(СтрокаТаблицы, ТекущийВыбор);
			Возврат;
			
		ИначеЕсли ЕстьСерияПартия И ДобавлятьСерийныйТоварНовойСтрокой И СтрокаТаблицы.НеобходимостьВводаСерии Тогда
			
			ДобавитьСтрокуВТабличнуюЧасть(СтрокаТаблицы, ТекущийВыбор);
			Возврат
			
		ИначеЕсли СтрокаТаблицы.ЭтоНабор Тогда
			
			ДобавитьНаборВТабличнуюЧасть(ТекущийВыбор);
			Возврат;
			
		Иначе
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура", ТекущийВыбор.Номенклатура);
		Если ТекущийВыбор.Свойство("Характеристика") Тогда
			СтруктураПоиска.Вставить("Характеристика", ТекущийВыбор.Характеристика);
		КонецЕсли;
		Если ТекущийВыбор.Свойство("Партия") Тогда
			ПартияВТаблице = Метаданные.ОпределяемыеТипы.ПартияРМК.Тип.ПривестиЗначение(ТекущийВыбор.Партия);
			СтруктураПоиска.Вставить("Партия", ПартияВТаблице);
		КонецЕсли;
		Если ТекущийВыбор.Свойство("Серия") Тогда
			СерияВТаблице = Метаданные.ОпределяемыеТипы.СерияРМК.Тип.ПривестиЗначение(ТекущийВыбор.Серия);
			СтруктураПоиска.Вставить("Серия", СерияВТаблице);
		КонецЕсли;
		УпаковкаВТаблице = Метаданные.ОпределяемыеТипы.УпаковкаРМК.Тип.ПривестиЗначение(ТекущийВыбор.Упаковка);
		СтруктураПоиска.Вставить("Упаковка", УпаковкаВТаблице);
		СтруктураПоиска.Вставить("ЭтоНабор", Ложь);
		СтруктураПоиска.Вставить("ТоварКЗамене", Ложь);
		
		МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() = 0 Или ДобавитьТоварОтдельнойСтрокой(СтрокаТаблицы) Тогда
			ДобавитьСтрокуВТабличнуюЧасть(СтрокаТаблицы, ТекущийВыбор);
		Иначе
			ИзменитьСтрокуВТабличнойЧасти(МассивСтрок[0], ТекущийВыбор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодтверждениеНеВыбытияКонтрольнойМарки(РезультатВыполнения, Контекст) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ОтборДляПоискаПоМарке = Новый Структура("КодМаркировки",
		Контекст.КодМаркировки);
		
		СтрокиКУдалению = Объект.Товары.НайтиСтроки(ОтборДляПоискаПоМарке);
		
		Если СтрокиКУдалению.Количество() > 0 Тогда
			
			ВозможноЗакрытьСессиюРегистрацииМарок = ККМПоддерживаетПроверкуКодовМаркировки
				И ЗначениеЗаполнено(СтрокиКУдалению[0].КодМаркировки)
				И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
				И ВозможноЗакрытьСессиюРегистрацииМарок();
			
			Если ВозможноЗакрытьСессиюРегистрацииМарок Тогда
				ЗакрытьСессиюРегистрацииМарок();
			КонецЕсли;
				
			Объект.Товары.Удалить(СтрокиКУдалению[0]);
			
		КонецЕсли;
		
		ПересчитатьИтогиТабличнойЧастиТовары();
		РассчитатьСуммуОплатыБонусами();
		
		Если Объект.Товары.Количество() > 0 Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		Иначе
			СоздатьНовыйНабор();
			НастроитьЭлементыФормы(Элементы.Страницы.ТекущаяСтраница, Ложь);
		КонецЕсли;
		
		ОбработатьИзменениеТаблицыТоваровНаКлиенте();
		ВременныйКонтекстПроверкиМарки = Неопределено;
		
	Иначе
		
		Если ЕстьСвойство(РезультатВыполнения, "ОписаниеОшибки") Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Подтверждение не выбытия контрольной марки завершено с ошибкой.'");
			ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ВозможноЗакрытьСессиюРегистрацииМарок(ПриУдаленииВсехСтрок = Ложь)
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Оплачена", Ложь);
	НеоплаченныеПозиции = Объект.Товары.НайтиСтроки(ОтборСтрок);
	
	ОтборСтрок.Вставить("КодМаркировки", "");
	НеоплаченныеПозицииБезМарок = Объект.Товары.НайтиСтроки(ОтборСтрок);
	
	КоличествоНеоплаченныхПозицийСМарками =
	НеоплаченныеПозиции.Количество() - НеоплаченныеПозицииБезМарок.Количество();
	
	Если ПриУдаленииВсехСтрок Тогда
		Возврат КоличествоНеоплаченныхПозицийСМарками > 0;
	КонецЕсли;
	
	Возврат КоличествоНеоплаченныхПозицийСМарками <= 1;
	
КонецФункции

&НаКлиенте
Функция ОсобенностиУчетаМаркированныхТоваровДопускающиеВозвратБезМарки()
	
	МассивОсобенностей = Новый Массив;
	ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьМассивОсобенностейДляВозвратаБезМарки(МассивОсобенностей);
	
	Возврат МассивОсобенностей;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОрганизациюПродажи(НоваяСтрока)
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОрганизациюПродажи(НоваяСтрока, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область Эквайринг

&НаСервере
Процедура ЗаполнитьЭквайринговыеТерминалы(ТерминалБезПодключения)
	
	Если ИспользоватьОплатуПлатежнымиКартами Тогда
		
		Запрос = Новый Запрос;
		ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросДанныеЭквайринговыхТерминалов(Запрос, ЭтотОбъект);
		
		Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
			
			НастроитьФормуБезОплатыКартой();
			Возврат;
			
		КонецЕсли;
		
		ВозможностьВыдачиНаличных = Новый Соответствие;
		
		Для Каждого Строка Из ТаблицаТерминалы Цикл
			ВозможностьВыдачиНаличных.Вставить(Строка.ПодключаемоеОборудование,
				Строка.ПоддерживаетВыдачуНаличных);
		КонецЦикла;
		
		ТаблицаТерминалы.Очистить();
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если РежимКассыСамообслуживания Тогда
				Если Не (ЗначениеЗаполнено(Выборка.ПодключаемоеОборудование) И ПодключаемоеОборудованиеИспользуется(Выборка.ПодключаемоеОборудование)) Тогда
					ТерминалБезПодключения = Истина;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НовыйТерминал = ТаблицаТерминалы.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйТерминал, Выборка);
			СведенияОВыдачеНаличных = ВозможностьВыдачиНаличных.Получить(НовыйТерминал.ПодключаемоеОборудование);
			ТерминалПоддерживаетВыдачуНаличных = ?(СведенияОВыдачеНаличных = Неопределено, Ложь, СведенияОВыдачеНаличных);
			НовыйТерминал.ПоддерживаетВыдачуНаличных = ТерминалПоддерживаетВыдачуНаличных;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаТерминалы.Количество() = 0 Или Не ИспользоватьОплатуПлатежнымиКартами Тогда
		НастроитьФормуБезОплатыКартой();
		ИспользоватьОплатуПлатежнымиКартами = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуБезОплатыКартой()
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыКартой, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ПодменюКарта, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиОплатуПоКарте()
	
	ДанныеТерминалов = ОбщегоНазначенияРМККлиент.ДанныеТекущихЭквайринговыхТерминалов(ЭтотОбъект);
	Если ЗначениеЗаполнено(РеквизитыQRПлатежнойКарты) Тогда
		ДанныеТерминаловСОплатойПоQRКоду = Новый Массив();
		Для Каждого Терминал Из ДанныеТерминалов Цикл
			Если Терминал.ПоддерживаетОплатуПоQRКоду Тогда
				ДанныеТерминаловСОплатойПоQRКоду.Добавить(Терминал);
			КонецЕсли;
		КонецЦикла;
		Если ДанныеТерминаловСОплатойПоQRКоду.Количество()>0 Тогда
			ДанныеТерминалов = ДанныеТерминаловСОплатойПоQRКоду;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоАктивныхТерминаловПоОрганизации = ДанныеТерминалов.Количество();
	
	Если КоличествоАктивныхТерминаловПоОрганизации = 0 Тогда
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = 'Не удалось определить эквайринговый терминал.
		|Оплата по карте не была произведена.'");
		СброситьОплатуПриОшибке();
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		Возврат;
		
	ИначеЕсли КоличествоАктивныхТерминаловПоОрганизации = 1 Тогда
		ВыполнитьОплатуПоКарте(ДанныеТерминалов[0]);
	Иначе
		
		Если НЕ ЭтоСторноОплатыПоКарте(ЧекККМПродажа, СуммаОплаченоБН, КассоваяСмена, ЭквайринговыйТерминалВыполненияОперации) Тогда
			ПерейтиКВыборуТерминала(ДанныеТерминалов);
		Иначе
			
			Если ЗначениеЗаполнено(ЭквайринговыйТерминалВыполненияОперации) Тогда
				
				ЭквайринговыйТерминалПродажи = ЭквайринговыйТерминалВыполненияОперации;
				ОтборПоиска = Новый Структура();
				ОтборПоиска.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминалПродажи);
				Результат = ТаблицаТерминалы.НайтиСтроки(ОтборПоиска);
				
				Если Результат.Количество() > 0 Тогда
					
					ДанныеТерминалов = Результат[0];
					ВыполнитьОплатуПоКарте(ДанныеТерминалов);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОплатуПоКарте(ДанныеТерминала)
	
	Если ДанныеТерминала.ИспользоватьБезПодключенияОборудования
		И НЕ ЗначениеЗаполнено(ДанныеТерминала.ПодключаемоеОборудование) Тогда
			ПерейтиНаСтраницуВопросЭквайринговаяОперация(ДанныеТерминала);
	Иначе
		ПровестиОплатуПоКартеПродолжение(ДанныеТерминала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыборуТерминала(ДанныеТерминалов)
	
	ДанныеТерминалов = ОбщегоНазначенияРМККлиент.ДанныеТекущихЭквайринговыхТерминалов(ЭтотОбъект);
	
	ДанныеДляЗагрузки = Новый Массив();
	
	Для каждого Строка Из ДанныеТерминалов Цикл
		ДанныеДляЗагрузки.Добавить(Строка.ЭквайринговыйТерминал);
	КонецЦикла;
	
	ЭлементПереключателя = Элементы.ЭквайринговыйТерминалВыполненияОперации;
	ЭлементПереключателя.СписокВыбора.Очистить();
	ЭлементПереключателя.СписокВыбора.ЗагрузитьЗначения(ДанныеДляЗагрузки);
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаВыборЭквайринговогоТерминала);
	ТекущийЭлемент = Элементы.ЭквайринговыйТерминалВыполненияОперации;
	ЗаблокироватьПробитиеЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиОплатуПоКартеПродолжение(ДанныеЭТ)
	
	ПерейтиНаСтраницуЭквайринговаяОперация();
	СерверныйВызов();
	
	ЭтоОперацияПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	Если ЭтоОперацияПродажа Или ЭтоЗаменаТоваров Тогда
		ОплатитьКартой(ДанныеЭТ);
	Иначе
		
		Если ЭтоСторноОплатыПоКарте(ЧекККМПродажа, СуммаОплаченоБН, КассоваяСмена, ДанныеЭТ.ЭквайринговыйТерминал) Тогда
			ВыполнитьСторноОплатыПоКарте(ДанныеЭТ, Истина);
		Иначе
			ВернутьОплатуПоКарте(ДанныеЭТ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуВопросЭквайринговаяОперация(ДанныеЭТ)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ВидОплаты", ДанныеЭТ.ВидОплаты);
	
	МассивОплат = Объект.Оплата.НайтиСтроки(ПараметрыПоиска);
	Если МассивОплат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОплаты = МассивОплат[0];
	СтрокаОплаты.ЭквайринговыйТерминал = ДанныеЭТ.ЭквайринговыйТерминал;
	СтрокаОплаты.ПроцентКомиссии = ДанныеЭТ.ПроцентКомиссииПриПродаже;
	СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Ложь);
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаВопросЭквайринговаяОперация);
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Ложь);
	ТекущийЭлемент = Элементы.ОтветДа;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуЭквайринговаяОперация()
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Ложь);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаЭквайринговаяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуСторноЭквайринг(ТекстЗаголовка, ТекстСообщения)
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Ложь);
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаСторноЭквайринг);
	
	Элементы.ЗаголовокСторноЭквайринг.Заголовок = ТекстЗаголовка;
	Элементы.ТекстСторноЭквайринг.Заголовок = ТекстСообщения;
	ЗаблокироватьПробитиеЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартой(ТекущийТерминал)
	
	ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции = НСтр("ru = 'AuthorizeSales'");
	ПараметрыОперации.СуммаОперации = СуммаОплаченоБН;
	ПараметрыОперации.НомерЧека = НСтр("ru = ' '");
	ПараметрыОперации.РеквизитыКартыQR = РеквизитыQRПлатежнойКарты;
	
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("ДанныеТерминала", ТекущийТерминал);

	Доступность = Ложь;
	
	ВозможнаВыдачаНаличных = СуммаНаличныхКВыдаче > 0 И ВыдаватьНаличныеНаКассе
		И ТекущийТерминал.ПоддерживаетВыдачуНаличных;
	КонтекстДополнительнойПроверки = Новый Структура();
	КонтекстДополнительнойПроверки.Вставить("ДанныеТерминала", ТекущийТерминал);
	КонтекстДополнительнойПроверки.Вставить("КонтекстФормы", ЭтотОбъект);
	ОбщегоНазначенияРМККлиент.
		ПроверитьДополнительныеУсловияВыполненияВыдачиНаличных(ВозможнаВыдачаНаличных, КонтекстДополнительнойПроверки);

	ВыполнитьОперациюПакетнойФискализации = НЕ ТекущийТерминал.ИспользоватьБезПодключенияОборудования
		И (ВозможнаВыдачаНаличных ИЛИ ПечататьКороткийСлипЧек);
	
	Если ВыполнитьОперациюПакетнойФискализации Тогда
		
		ЭквайринговыйТерминалВыполненияОперации = ТекущийТерминал.ЭквайринговыйТерминал;
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ВидОплаты", ТекущийТерминал.ВидОплаты);
		МассивОплат = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	
		Если МассивОплат.Количество() > 0 Тогда
			
			СтрокаОплаты = МассивОплат[0];
			СтрокаОплаты.ЭквайринговыйТерминал = ТекущийТерминал.ЭквайринговыйТерминал;
			СтрокаОплаты.ПроцентКомиссии = ТекущийТерминал.ПроцентКомиссииПриПродаже;
			СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
		КонецЕсли;
		
		НачатьПечатьЧека(Истина);
		
	Иначе
	
		ЭквайринговыйТерминалВыполненияОперации = ТекущийТерминал.ЭквайринговыйТерминал;
		ЭквайринговыйТерминал = ТекущийТерминал.ПодключаемоеОборудование;
		Оповещение = Новый ОписаниеОповещения("ОплатитьКартойЗавершение", ЭтотОбъект, ПараметрыДействия);
		ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение,
			УникальныйИдентификатор,
			ЭквайринговыйТерминал,
			ПараметрыОперации, ,
			ПодключаемоеОборудование);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартойЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Доступность = Истина;
	
	ДанныеТерминала = ДополнительныеПараметры.ДанныеТерминала;
	
	ОчиститьРеквизитыQRКодаПлатежнойКарты();
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ВидОплаты", ДанныеТерминала.ВидОплаты);
	Если ЕстьСвойство(РезультатВыполнения, "СуммаОперации") Тогда
		СтруктураПоиска.Вставить("Сумма", РезультатВыполнения.СуммаОперации);
	КонецЕсли;
	
	МассивОплат = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	
	Если МассивОплат.Количество() > 0 Тогда
		
		СтрокаОплаты = МассивОплат[0];
		СтрокаОплаты.ЭквайринговыйТерминал = ДанныеТерминала.ЭквайринговыйТерминал;
		СтрокаОплаты.ПроцентКомиссии = ДанныеТерминала.ПроцентКомиссииПриПродаже;
		СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
		
		Если ЕстьСвойство(РезультатВыполнения, "НомерКарты") Тогда
			СтрокаОплаты.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
		КонецЕсли;
		Если ЕстьСвойство(РезультатВыполнения, "НомерЧекаЭТ") Тогда
			СтрокаОплаты.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
		КонецЕсли;
		Если ЕстьСвойство(РезультатВыполнения, "СсылочныйНомер") Тогда
			СтрокаОплаты.СсылочныйНомер = РезультатВыполнения.СсылочныйНомер;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ТранзакцияПоКартеЗавершена = Истина; 
		ТипОплаты = "Карта";
		НачатьПечатьЧека();
		
	Иначе
		
		ТранзакцияПоКартеЗавершена = Ложь;
		ТипОплаты = "";
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		СброситьОплатуПриОшибке();
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидаПлатежнойКарты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКоманды = Новый Структура;
	СтруктураКоманды.Вставить("Имя", Результат.Значение);
	
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция
		Или Элементы.ГруппаОплатаКартой.Видимость Тогда
		
		Если ОплатаКартойЗавершение(КодВозвратаДиалога.Нет, СтруктураКоманды) Тогда
			Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ПробитьЧек")
				И ДополнительныеПараметры.ПробитьЧек = Истина Тогда
				
				КомандаПробитияЧека = Команды.ПробитьЧек;
				ПробитьЧек(КомандаПробитияЧека);
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ОплатаКартойЗавершение", СтруктураКоманды, Истина);
		Иначе
			ОплатаКартойЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да), СтруктураКоманды);
			УстановитьФокусВПолеВводаСуммыКартой();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоСторноОплатыПоКарте(ЧекККМПродажа, СуммаОплаченоБН, ТекущаяКассоваяСмена, ЭквайринговыйТерминал)
	
	ПараметрыСторно = Новый Структура;
	ПараметрыСторно.Вставить("ЧекККМПродажа", ЧекККМПродажа);
	ПараметрыСторно.Вставить("СуммаИтого", СуммаОплаченоБН);
	ПараметрыСторно.Вставить("КассоваяСмена", ТекущаяКассоваяСмена);
	ПараметрыСторно.Вставить("Результат", Ложь);
	ПараметрыСторно.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакЭтоСторно(ПараметрыСторно);
	
	Возврат ПараметрыСторно.Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьСторноОплатыПоКарте(ДанныеТерминала, ПечататьЧекНаВозврат = Ложь, ДанныеОшибки = Неопределено)
	
	Доступность = Ложь;
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Сумма", СуммаОплаченоБН);
	СтруктураПоиска.Вставить("ВидОплаты", ДанныеТерминала.ВидОплаты);
	
	МассивОплат = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	Если МассивОплат.Количество() > 0 Тогда
		
		СтрокаОплаты = МассивОплат[0];
		
		ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции = НСтр("ru = 'AuthorizeVoid'");
		ПараметрыОперации.СуммаОперации = СтрокаОплаты.Сумма;
		ПараметрыОперации.НомерЧекаЭТ = СтрокаОплаты.НомерЧекаЭТ;
		ПараметрыОперации.СсылочныйНомер = СтрокаОплаты.СсылочныйНомер;
		ПараметрыОперации.РеквизитыКартыQR = РеквизитыQRПлатежнойКарты;
		
		СтруктураПоискаТерминала = Новый Структура();
		СтруктураПоискаТерминала.Вставить("ЭквайринговыйТерминал", ДанныеТерминала.ЭквайринговыйТерминал);
		
		Терминал = Неопределено;
		МассивТерминалов = ТаблицаТерминалы.НайтиСтроки(СтруктураПоискаТерминала);
		
		КоличествоТерминалов = МассивТерминалов.Количество();
		
		Если КоличествоТерминалов > 0 Тогда
			
			Терминал = МассивТерминалов[0].ПодключаемоеОборудование;
			
			ПараметрДействия = Новый Структура();
			ПараметрДействия.Вставить("ПечататьЧекНаВозврат", ПечататьЧекНаВозврат);
			ПараметрДействия.Вставить("СтрокаОплаты", СтрокаОплаты);
			ПараметрДействия.Вставить("ТекущийТерминал", МассивТерминалов[0]);
			ПараметрДействия.Вставить("ДанныеОшибки", ДанныеОшибки);
			
			Оповещение = Новый ОписаниеОповещения("ВыполнитьСторноОплатыПоКартеЗавершение", ЭтотОбъект, ПараметрДействия);
			ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение,
				УникальныйИдентификатор, Терминал, ПараметрыОперации, , ПодключаемоеОборудование);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСторноОплатыПоКартеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Доступность = Истина;
	
	ПечататьЧекНаВозврат = ДополнительныеПараметры.ПечататьЧекНаВозврат;
	СтрокаОплаты = ДополнительныеПараметры.СтрокаОплаты;
	ДанныеТерминала = ДополнительныеПараметры.ТекущийТерминал;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		Если ПечататьЧекНаВозврат Тогда
		
			ТранзакцияПоКартеЗавершена = Истина;
			ТипОплаты = "Карта";
			
			СтрокаОплаты.ЭквайринговыйТерминал = ДанныеТерминала.ЭквайринговыйТерминал;
			СтрокаОплаты.ПроцентКомиссии = ДанныеТерминала.ПроцентКомиссииПриОтмене;
			СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
			
			НачатьПечатьЧека();
			
		Иначе
			
			ТранзакцияПоКартеЗавершена = Ложь;
			ТипОплаты = "";
			
			Если ЕстьСвойство(ДополнительныеПараметры, "ДанныеОшибки")
				И ЗначениеЗаполнено(ДополнительныеПараметры.ДанныеОшибки) Тогда
				
				ДанныеОшибки = ДополнительныеПараметры.ДанныеОшибки;
				ОткрытьСтраницуИнфоОшибка(ДанныеОшибки.ТекстЗаголовка, ДанныеОшибки.ТекстСообщения);
				
			Иначе
				
				СброситьОплатуПриОшибке();
				РассчитатьСуммыОплаты();
				НастроитьДоступностьПробитьЧек();
				ПерейтиНаСтраницуОплата();
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТранзакцияПоКартеЗавершена = Ложь;
		ТипОплаты = "";
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
									|Отмена платежа по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
			
		СброситьОплатуПриОшибке();
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьОплатуПоКарте(ТекущийЭквайринговыйТерминал)
	
	Доступность = Ложь;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Сумма", СуммаОплаченоБН);
	СтруктураПоиска.Вставить("ВидОплаты", ТекущийЭквайринговыйТерминал.ВидОплаты);
	
	МассивОплат = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	Если МассивОплат.Количество() > 0 Тогда
		
		СтрокаОплаты = МассивОплат[0];
		
		ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции = НСтр("ru = 'AuthorizeRefund'");
		ПараметрыОперации.СуммаОперации = СуммаОплаченоБН;
		ПараметрыОперации.НомерЧека = НСтр("ru = ' '");
		
		ЭквайринговыйТерминал = Неопределено;
		ТекущийТерминал = Неопределено;
		
		Если ЭтоВозвратБезОснования Тогда
			
			ТекущийТерминал = ТекущийЭквайринговыйТерминал;
			ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал.ПодключаемоеОборудование;
			
		Иначе
			
			СтруктураПоискаТерминала = Новый Структура();
			СтруктураПоискаТерминала.Вставить("ЭквайринговыйТерминал", СтрокаОплаты.ЭквайринговыйТерминал);
			
			МассивТерминалов = ТаблицаТерминалы.НайтиСтроки(СтруктураПоискаТерминала);
			Если МассивТерминалов.Количество() > 0 Тогда
				
				ТекущийТерминал = МассивТерминалов[0];
				ЭквайринговыйТерминал = ТекущийТерминал.ПодключаемоеОборудование;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрДействия = Новый Структура();
		ПараметрДействия.Вставить("СтрокаОплаты", СтрокаОплаты);
		ПараметрДействия.Вставить("ТекущийТерминал", ТекущийТерминал);
		ЗаполнитьЗначенияСвойств(ПараметрыОперации, СтрокаОплаты);
		
		Оповещение = Новый ОписаниеОповещения("ВернутьОплатуПоКартеЗавершение", ЭтотОбъект, ПараметрДействия);
		ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение,
			УникальныйИдентификатор, ЭквайринговыйТерминал, ПараметрыОперации, , ПодключаемоеОборудование);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьОплатуПоКартеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Доступность = Истина;
	
	СтрокаОплаты = ДополнительныеПараметры.СтрокаОплаты;
	ТекущийТерминал = ДополнительныеПараметры.ТекущийТерминал;
	
	Если ТекущийТерминал = Неопределено Тогда
		
		ТранзакцияПоКартеЗавершена = Ложь;
		ТипОплаты = "";
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = 'Не удалось определить эквайринговый терминал.'");
		
		ПерейтиНаСтраницуСторноЭквайринг(ТекстЗаголовка, ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаОплаты.ЭквайринговыйТерминал = ТекущийТерминал.ЭквайринговыйТерминал;
	СтрокаОплаты.ПроцентКомиссии = ТекущийТерминал.ПроцентКомиссииПриВозврате;
	СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
	
	Если ЕстьСвойство(РезультатВыполнения, "НомерКарты") Тогда
		СтрокаОплаты.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
	КонецЕсли;
	Если ЕстьСвойство(РезультатВыполнения, "НомерЧекаЭТ") Тогда
		СтрокаОплаты.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
	КонецЕсли;
	Если ЕстьСвойство(РезультатВыполнения, "СсылочныйНомер") Тогда
		СтрокаОплаты.СсылочныйНомер = РезультатВыполнения.СсылочныйНомер;
	КонецЕсли;

	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ТранзакцияПоКартеЗавершена = Истина; 
		ТипОплаты = "Карта";
		НачатьПечатьЧека();
		
	Иначе
		
		ТранзакцияПоКартеЗавершена = Ложь;
		ТипОплаты = "";
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		ПерейтиНаСтраницуСторноЭквайринг(ТекстЗаголовка, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СверкаИтоговЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьСверкуИтогов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверкуИтогов(ОрганизацияОтбор = Неопределено)
	
	Для Каждого Терминал Из ТаблицаТерминалы Цикл
		
		Если Не ОрганизацияОтбор = Неопределено Тогда
			Если Не Терминал.Организация = ОрганизацияОтбор Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Терминал.ИспользоватьБезПодключенияОборудования
			И ЗначениеЗаполнено(Терминал.ПодключаемоеОборудование) Тогда
			
			Доступность = Ложь;
			
			Оповещение = Новый ОписаниеОповещения("ВыполнитьСверкуИтоговЗавершение", ЭтотОбъект);
			
			Отбор = Новый Структура("Организация", Терминал.Организация);
			НайденыСтрокиКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор);
			Если НайденыСтрокиКассы.Количество() > 0 Тогда
				СтрокаКассы = НайденыСтрокиКассы[0];
				ПодключаемоеОборудованиеДляСверки = СтрокаКассы.ИдентификаторУстройства;
			Иначе
				ПодключаемоеОборудованиеДляСверки = ПодключаемоеОборудование;
			КонецЕсли;
			
			ЭквайринговыйТерминал = Терминал.ПодключаемоеОборудование;
			ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
			ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(Оповещение,
				УникальныйИдентификатор, ЭквайринговыйТерминал, ПараметрыОперации, , ПодключаемоеОборудованиеДляСверки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверкуИтоговЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Доступность = Истина;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции произошла ошибка'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
										|Операция сверки итогов не была проведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОплатуПриОшибке()
	
	СуммаОплаченоНал = 0;
	СуммаОплаченоБН = 0;
	СуммаОплаченоСБП = 0;
	СуммаОплаченоЮКасса = 0;
	СуммаОплаченоБезнал = 0;
	СуммаОплаченоВРассрочку = 0;
	СуммаОплаченоСертификатамиНСПК = 0;
	Сдача = 0;
	
	Объект.Оплата.Очистить();
	ПодключитьОбработчикОжидания("ОбработкаВыводаОжиданияОплатыНаДисплейПокупателя", 5, Истина);

	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Ложь);
	ОтложенныйЧекПолностьюОплачен = Ложь;
	ПараметрыОплатыПлатежнойСистемой = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверткуИтоговЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Доступность = Истина;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И Не РезультатВыполнения.Результат Тогда
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции произошла ошибка'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
										|Операция сверки итогов не была проведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПрикассовыеВесы

&НаКлиенте
Функция ЭлектронныеВесыДоступны()
	Возврат ТаблицаЭлектронныхВесов.Количество() И НЕ ЭлектронныеВесыЗаняты;
КонецФункции

&НаКлиенте
Процедура ЗапроситьПраваНаПолучениеВеса()
	
	НеобходимоеПраво = "ВводВесаТовара";
	ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВводВесаВРежимеКСО()
	
	Если ЗначениеЗаполнено(ТаблицаЭлектронныхВесов) Тогда
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
		ЗапуститьПолучениеВеса(ТекущаяСтрока.Номенклатура);
	Иначе
		УстановитьДоступностьВводаВесаВесовогоТовара();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПолучениеВеса(Товар)
	
	ЭлектронныеВесыЗаняты = Истина;
	ПараметрыВзвешивания = Новый Структура();
	ПараметрыВзвешивания.Вставить("Товар", Товар);
	ПараметрыОперации = Новый Структура();
	
	Если ТаблицаЭлектронныхВесов.Количество() > 1 Тогда
		ИдентификаторВесов = Неопределено;
	Иначе
		ИдентификаторВесов = ТаблицаЭлектронныхВесов[0].ЭлектронныеВесы;
	КонецЕсли;
	
	ОповещениеЗавершенияВзвешивания = Новый ОписаниеОповещения("ПолучитьВесСЭлектронныхВесовЗавершение",
		ЭтотОбъект, ПараметрыВзвешивания);
		
	ОборудованиеВесовоеОборудованиеКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеЗавершенияВзвешивания,
		УникальныйИдентификатор, ИдентификаторВесов, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьВводаВесаВесовогоТовара()

	Элемент = Элементы.ТекущийТоварКоличество;
	ЭтоВводСуммы = ЭтоПолеВводаДробнойСуммы(Элемент.ТекстРедактирования);
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент, Не ЭтоВводСуммы);
	
	УстановитьДоступностьЭлементаФормы(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесТекущегоТовара(ЗапросВесаСПовышениемПрав = Ложь)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ЗаполнитьВесТекущегоТовара(ТекущаяСтрока, ЗапросВесаСПовышениемПрав);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВесТекущегоТовара(ТекущаяСтрока, ЗапросВесаСПовышениемПрав = Ложь)
	
	Товар = ТекущаяСтрока.Номенклатура;
	Если ЗначениеЗаполнено(ТаблицаЭлектронныхВесов) Тогда
		
		Если Не ЭлектронныеВесыЗаняты Тогда
			Если ТекущаяСтрока.Количество > 0 И РежимКассыСамообслуживания Тогда
				ЗапроситьПраваНаПолучениеВеса();
				ЗапросВесаСПовышениемПрав = Истина;
			Иначе
				ЗапуститьПолучениеВеса(Товар);
			КонецЕсли;
		КонецЕсли;
			
	ИначеЕсли РежимКассыСамообслуживания Тогда
		
		ЗапроситьПраваНаПолучениеВеса();
		ЗапросВесаСПовышениемПрав = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВесСЭлектронныхВесов(ТекущаяСтрока, ВесТовара)
	
	Если РежимКассыСамообслуживания Тогда
		ТекущаяСтрока.Количество = ВесТовара;
		ТекущийТоварКоличество = ВесТовара;
	Иначе
		ТекущаяСтрока.Количество = ТекущаяСтрока.Количество + ВесТовара;
		ТекущийТоварКоличество = ТекущийТоварКоличество + ВесТовара;
	КонецЕсли;
	ПересчетКоличестваТовара(ТекущаяСтрока);
	ПересчитатьСуммы(ТекущаяСтрока, Истина);
	РассчитатьСуммуОплатыБонусами();
	ОбновитьИнформациюНаДисплееПокупателя("ИзменениеКоличества");
	ЗакрытьСтраницуСОшибкойКоличества();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесСЭлектронныхВесовЗавершение(Результат, ПараметрыВзвешивания) Экспорт
	
	ЭлектронныеВесыЗаняты = Ложь;
	
	Если ЕстьСвойство(Результат, "Результат") И Результат.Результат Тогда
		
		ВесТовара = Результат.Вес;
		
		Если ЕстьСвойство(ПараметрыВзвешивания, "Товар") Тогда
			
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
			
			Если ТекущаяСтрока <> Неопределено И ТекущаяСтрока.Свойство("Количество") Тогда
				
				Если ТекущаяСтрока.Количество > 0 И ВесТовара = 0 Тогда
					
					ТекстОповещенияПользователя = НСтр("ru = 'Электронные весы вернули нулевой вес'");
					ВывестиПредупреждениеОшибкиПолученияВеса(ТекстОповещенияПользователя);
					
				ИначеЕсли ВесТовара > 0 Тогда
					
					УстановитьВесСЭлектронныхВесов(ТекущаяСтрока, ВесТовара);
					
				ИначеЕсли ТекущаяСтрока.Количество = 0 И ВесТовара = 0 И ОжиданиеКонтроляВеса Тогда
					
					ЕстьНезаполненныеДанные();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'При взвешивании товара произошла ошибка. Пожалуйста, повторите попытку.'");
		
		Если ЕстьСвойство(Результат, "ОписаниеОшибки") И ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
			ТекстПредупреждения = Результат.ОписаниеОшибки;
		КонецЕсли;
		
		ВывестиПредупреждениеОшибкиПолученияВеса(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПредупреждениеОшибкиПолученияВеса(ТекстПредупреждения)
	
	Если РежимКассыСамообслуживания Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Не указан вес.'");
		ТекстНачало = СтрШаблон("%1 ", НСтр("ru = 'Нажмите кнопку'"));
		ТекстВесПродолжение = СтрШаблон(" %1", НСтр("ru = 'для получения веса.'"));
		ТекстОшибки = Новый ФорматированнаяСтрока(ТекстПредупреждения, ТекстНачало,
			БиблиотекаКартинок.Scales, ТекстВесПродолжение);
		ПараметрыОшибки = Новый Структура;
		ПараметрыОшибки.Вставить("НеВызыватьЗаменуПрав", Истина);
		ПараметрыОшибки.Вставить("ЭтоПредупреждение", Истина);
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПараметрамТарирования()

	Если ЭлектронныеВесыДоступны() Тогда
		ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
		
		ПараметрыОткрытия = Новый Структура("ВесТары,ТаблицаЭлектронныхВесов,ЭлектронныеВесыЗаняты",
			ВесТары, ТаблицаЭлектронныхВесов, ЭлектронныеВесыЗаняты);
		
		ОповещениеОЗавершенииРаботыСПараметрамиТарирования = Новый ОписаниеОповещения(
			"ЗавершениеРаботыСПараметрамиТарирования", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаТарированияЭлектронныхВесов",
			ПараметрыОткрытия, ЭтотОбъект, , , , ОповещениеОЗавершенииРаботыСПараметрамиТарирования,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеРаботыСПараметрамиТарирования(РезультатВыполнения, Параметры) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "ВесТары")
		И ЕстьСвойство(РезультатВыполнения, "ЭлектронныеВесыЗаняты") Тогда
		
			ВесТары = РезультатВыполнения.ВесТары;
			ЭлектронныеВесыЗаняты = РезультатВыполнения.ЭлектронныеВесыЗаняты;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиенте
Функция ЭтоСоставляющаяНабора(СтрокаТаблицыТовары)
	Возврат ?(СтрокаТаблицыТовары = Неопределено, Ложь, СтрокаТаблицыТовары.НомерНабора > 0);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СоставНабораПоЭлементуНабора(СтрокаТаблицыТовары, ТаблицаТовары)

	Результат = Новый Массив();
	
	Если Не СтрокаТаблицыТовары = Неопределено
		И ТипЗнч(СтрокаТаблицыТовары) = Тип("ДанныеФормыЭлементКоллекции")
		И ТипЗнч(ТаблицаТовары) = Тип("ДанныеФормыКоллекция") Тогда
		
		ИдентификаторНабора = СтрокаТаблицыТовары.НомерНабора;
		ОтборДляПоиска = Новый Структура();
		ОтборДляПоиска.Вставить("НомерНабора", ИдентификаторНабора);
		
		Результат = ТаблицаТовары.НайтиСтроки(ОтборДляПоиска);
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МаксимальныйНомерНабора(ТаблицаТовары)
	
	МаксимальныйНомерНабора = 0;
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		ТекущийНомерНабора = СтрокаТовары.НомерНабора;
		Если ТекущийНомерНабора > МаксимальныйНомерНабора Тогда
			МаксимальныйНомерНабора = ТекущийНомерНабора;
		КонецЕсли;
	КонецЦикла;
	МаксимальныйНомерНабора = МаксимальныйНомерНабора + 1;
	
	Возврат МаксимальныйНомерНабора;
	
КонецФункции

&НаСервере
Процедура ДобавитьНаборВТабличнуюЧасть(ТекущийВыбор)
	
	ТаблицаСоставНабора = Новый ТаблицаЗначений;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСоставНабора(ТекущийВыбор, ТаблицаСоставНабора, ЭтотОбъект);
	
	МаксимальныйНомерНабора = МаксимальныйНомерНабора(Объект.Товары);
	ВНабореЕстьПострочныйТовар = ВНабореЕстьПострочныйТовар(ТаблицаСоставНабора);
	
	Если ВНабореЕстьПострочныйТовар Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаСоставНабора Цикл
			ДобавитьКомплектующуюНабораВТабличнуюЧасть(СтрокаТаблицы, МаксимальныйНомерНабора);
		КонецЦикла;
		
	Иначе
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НоменклатураНабора", ТекущийВыбор.Номенклатура);
		Если ТекущийВыбор.Свойство("Характеристика") Тогда
			СтруктураПоиска.Вставить("ХарактеристикаНабора", ТекущийВыбор.Характеристика);
		КонецЕсли;
		МассивСтрокТоваров = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрокТоваров.Количество() = 0 ИЛИ ДобавлятьВсеТоварыОтдельнойСтрокой Тогда
			
			Для Каждого СтрокаТаблицы Из ТаблицаСоставНабора Цикл
				ДобавитьКомплектующуюНабораВТабличнуюЧасть(СтрокаТаблицы, МаксимальныйНомерНабора);
			КонецЦикла;
			
		Иначе
			
			Для Каждого СтрокаМассива Из МассивСтрокТоваров Цикл
				СтароеКоличествоНаборов = СтрокаМассива.КоличествоНаборов;
				НовоеКоличествоНаборов = СтароеКоличествоНаборов + 1;
				КоэффициентПересчета = НовоеКоличествоНаборов / СтароеКоличествоНаборов;
				СтрокаМассива.КоличествоНаборов = НовоеКоличествоНаборов;
				СтрокаМассива.Количество = СтрокаМассива.Количество * КоэффициентПересчета;
				СтрокаМассива.КоличествоУпаковок = СтрокаМассива.КоличествоУпаковок * КоэффициентПересчета;
				
				ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, СтрокаМассива, ,
					ИспользоватьАвтоматическиеСкидки);
				ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, СтрокаМассива);
				ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(Объект);
				
				ТекущийТоварКоличество = НовоеКоличествоНаборов;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомплектующуюНабораВТабличнуюЧасть(СтрокаКомплектующая, НомерНабора)

	НоваяСтрока = Объект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКомплектующая);
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	НоваяСтрока.НеобходимостьВводаКодаМаркировки = СтрокаКомплектующая.Маркируемый;
	НоваяСтрока.НомерНабора = НомерНабора;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОрганизациюПродажи(НоваяСтрока, ЭтотОбъект);
	Если Не ЗначениеЗаполнено(НоваяСтрока.Организация) Тогда
		НоваяСтрока.Организация = ОсновнаяОрганизация;
	Иначе
		ОтборПоОрганизации = Новый Структура("Организация", НоваяСтрока.Организация);
		КассыККМПоОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоОрганизации);
		Если КассыККМПоОрганизации.Количество() = 0 Тогда
			НоваяСтрока.ОплатаНедоступна = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.СистемаНалогообложения) Тогда
		НоваяСтрока.СистемаНалогообложения = ОбщегоНазначенияРМК.СНОККТДляОрганизации(ЭтотОбъект, НоваяСтрока);
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьВозможностьОплатыЭС(НоваяСтрока, ЭтотОбъект);
	
	СтавкаНДС = ПродажиРМК.АктуальнаяСтавкаНДСДляТовара(Объект, НоваяСтрока, НоваяСтрока.СистемаНалогообложения);
	НоваяСтрока.СтавкаНДС = СтавкаНДС;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ПолучитьВес, НоваяСтрока.Весовой);
	
	ПредставлениеХарактеристики = "";
	Если ЗначениеЗаполнено(СтрокаКомплектующая.Характеристика) Тогда
		ПредставлениеХарактеристики = " (" + Строка(СтрокаКомплектующая.Характеристика) + ")";
	КонецЕсли;
	
	ПредставлениеТовара = СтрШаблон("%1%2", СтрокаКомплектующая.Наименование, ПредставлениеХарактеристики);
	НоваяСтрока.ПредставлениеНоменклатураХарактеристика = ПредставлениеТовара;
	ШтрихкодированиеРМК.ЗаполнитьПредставлениеЕдиницыИзмерения(НоваяСтрока);
	
	ТекущийТоварКоличество = НоваяСтрока.КоличествоУпаковок;
	Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ДоступныРучныеСкидки = ДопускаетсяПрименениеСкидок И (Объект.Товары.Количество() > 0);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ДоступныРучныеСкидки);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, ДоступныРучныеСкидки);
	ПодготовитьИнтерфейсКВозвратуМаркируемогоТовараБезКонтрольнойМаркиНаСервере(НоваяСтрока);
	
	ДобавленаНоваяСтрокаКорзины = Истина;
	
	СписокДобавленныхСтрокТоваров.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	ДополнитьСтрокуТовараВычисляемымиДанными(НоваяСтрока);
	
	ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, НоваяСтрока, , ИспользоватьАвтоматическиеСкидки);
	ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, НоваяСтрока);
	ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВНабореЕстьПострочныйТовар(СписокТоваров)
	
	ВНабореЕстьПострочныйТовар = Ложь;
	
	Для Каждого СтрокаТовара Из СписокТоваров Цикл
		Если СтрокаТовара.НеобходимостьВводаСерии Или СтрокаТовара.НеобходимостьВводаКодаМаркировки Тогда
			ВНабореЕстьПострочныйТовар = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВНабореЕстьПострочныйТовар;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьКоличествоНабора(ТекущаяСтрока, УвеличитьКоличество, НовоеКоличество = 0)
	
	МаксимальныйНомерНабора = МаксимальныйНомерНабора(Объект.Товары);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерНабора", ТекущаяСтрока.НомерНабора);
	МассивСтрокНабора = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	
	ВНабореЕстьПострочныйТовар = ВНабореЕстьПострочныйТовар(МассивСтрокНабора);
	
	Если ВНабореЕстьПострочныйТовар Тогда
		
		Если УвеличитьКоличество Тогда
			Для Каждого СтрокаМассива Из МассивСтрокНабора Цикл
				НоваяСтрока = Объект.Товары.Добавить();
				ИсключаяСвойства = "Серия, Партия, КодМаркировки, ПроцентАвтоматическойСкидки, ПроцентСкидкиНаценки,
					|СуммаАвтоматическойСкидки, СуммаСкидкиНаценки, СуммаСкидкиОплатыБонусом, Продавец, РассчитанаСкидка,
					|КонтрольнаяМарка, КонтрольнаяМаркаОбработана, Оплачена, СуммаСкидокОбщая";
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива, , ИсключаяСвойства);
				НоваяСтрока.НомерНабора = МаксимальныйНомерНабора;
				НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
				
				ПересчитатьСуммы(НоваяСтрока);
			КонецЦикла;
		Иначе
			Для Каждого СтрокаМассива Из МассивСтрокНабора Цикл
				Объект.Товары.Удалить(СтрокаМассива);
			КонецЦикла;
			ПересчитатьИтогиТабличнойЧастиТовары();
		КонецЕсли;
		
	Иначе
		Для Каждого СтрокаМассива Из МассивСтрокНабора Цикл
			ИзменитьКоличествоКомплектующихНабора(СтрокаМассива, УвеличитьКоличество, НовоеКоличество);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 И Не ЭтоЧекКоррекции Тогда
		ИнициализироватьИнтерфейсРабочегоМестаКассира();
	КонецЕсли;
	
	ОбработатьИзменениеТаблицыТоваровНаКлиенте();
	ОбновитьИнформациюНаДисплееПокупателя("ИзменениеКоличества");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличествоКомплектующихНабора(ТекущаяСтрока, УвеличитьКоличество, НовоеКоличество)
	
	СтароеКоличествоНаборов = ТекущаяСтрока.КоличествоНаборов;
	
	Если УвеличитьКоличество Тогда
		НовоеКоличествоНаборов = ?(НовоеКоличество = 0, СтароеКоличествоНаборов + 1, НовоеКоличество);
	Иначе
		НовоеКоличествоНаборов = ?(НовоеКоличество = 0, СтароеКоличествоНаборов - 1, НовоеКоличество);
		Если Не ТекущаяСтрока.Весовой И НовоеКоличествоНаборов = 0 Тогда
			Объект.Товары.Удалить(ТекущаяСтрока);
			ПересчитатьИтогиТабличнойЧастиТовары();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КоэффициентПересчета = НовоеКоличествоНаборов / СтароеКоличествоНаборов;
	ТекущаяСтрока.Количество = ТекущаяСтрока.Количество * КоэффициентПересчета;
	ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок * КоэффициентПересчета;
	ТекущаяСтрока.КоличествоНаборов = НовоеКоличествоНаборов;
	ТекущийТоварКоличество = НовоеКоличествоНаборов;
	ПересчитатьСуммы(ТекущаяСтрока, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОплатаQRКодом

&НаКлиенте
Процедура НачатьОплатуВозвратПлатежнойСистемой(ПлатежнаяСистемаККТ, АвтономнаяККТСБП = Ложь)
	
	Перем ТекстОшибки;
	
	Элементы.ГруппаПлатежнаяСистема.Доступность = Истина;
	ЭтоОперацияПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	
	Если СуммаКОплате = 0 Тогда 
		
		Если ПлатежнаяСистемаККТ = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.ЮКасса") Тогда
			ТекстОшибки = НСтр("ru = 'Нулевая сумма оплаты по ЮКассе.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Нулевая сумма оплаты по СБП.'");
		КонецЕсли;
		
	ИначеЕсли ЭтоОперацияПродажа
		И ПлатежнаяСистемаККТ = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.ЮКасса") Тогда
		ЗаписатьЧекПередОплатойПлатежнойСистемы(ВыбраннаяСистемаНалогообложения, ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОткрытьСтраницуИнфоОшибка(НСтр("ru = 'Ошибки оплаты'"), ТекстОшибки);
		ТипОплаты = "";
	Иначе
		ПроверитьЗапуститьОплатуВозвратПлатежнойСистемой(АвтономнаяККТСБП);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗапуститьОплатуВозвратПлатежнойСистемой(АвтономнаяККТСБП)
	
	Если СразуОтправлятьНаПечатьЧека() Или АвтономнаяККТСБП Тогда
		ЗапуститьОплатуВозвратПлатежнойСистемой(АвтономнаяККТСБП);
	Иначе
		ПараметрыОплатыПлатежнойСистемой = Новый Структура;
		ПараметрыОплатыПлатежнойСистемой.Вставить("АвтономнаяККТ", АвтономнаяККТСБП);
		ПерейтиНаСтраницуОтправкиЭлектронногоЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОплатуВозвратПлатежнойСистемой(АвтономнаяККТСБП)
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	Если ЗначениеЗаполнено(ЭтотОбъект.ПлатежныеСистемы_ВыбраннаяКоманда) Тогда
		НомерВидаОплаты = Число(Прав(ЭтотОбъект.ПлатежныеСистемы_ВыбраннаяКоманда,1));
		ВариантыВыбора  = Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.ВыгрузитьЗначения();
		
		ИнициализацияПанелиДействийПлатежнойСистемы(ВариантыВыбора[НомерВидаОплаты-1], АвтономнаяККТСБП);
	Иначе
		ИнициализацияПанелиДействийПлатежнойСистемы(ПлатежнаяСистема_ИдентификаторПС, АвтономнаяККТСБП);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЭтапОплатыПлатежнойСистемой()
	
	ОповещениеЗавершитьОплату 				= Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	
	ТекущийСлойПанелиПлатежнойСистемы = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиДействийПлатежнойСистемы);
	Если ТекущийСлойПанелиПлатежнойСистемы = Элементы.ГруппаОсновнаяСтраница Тогда
		
		Если ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа Тогда
		
			Если ПлатежнаяСистема_НоваяЗаявка.Оплачивается Тогда
				ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
			Иначе
				ПодключитьОбработчикОжидания("ПолучитьИдентификаторОплаты", 0.1, Истина);
			КонецЕсли;
			
		Иначе
			
			Если ПлатежнаяСистема_НоваяЗаявка.Оплачивается Тогда
				
				ПодключитьОбработчикОжидания("ОпределитьСтатусВозврата", 0.1, Истина);
				
			ИначеЕсли ЗначениеЗаполнено(ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты)
				И Не ЗначениеЗаполнено(ПлатежнаяСистема_ИдентификаторОплаты) Тогда
				
				ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
				
			Иначе
				
				ПодключитьОбработчикОжидания("ВыполнитьВозвратПлатежнойСистемой", 0.1, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекущийСлойПанелиПлатежнойСистемы = Элементы.ГруппаПодтверждение Тогда
		
		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПодтвердитьВозврат(ЭтотОбъект, ОповещениеЗавершитьОплату);
		
	ИначеЕсли ТекущийСлойПанелиПлатежнойСистемы = Элементы.ГруппаQRКод Тогда
		
		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПечатьПречека(ЭтотОбъект, Истина, ПлатежнаяСистема_НоваяЗаявка.ПодключаемоеОборудование);
		
	ИначеЕсли ТекущийСлойПанелиПлатежнойСистемы = Элементы.ГруппаВыполняется
		ИЛИ ТекущийСлойПанелиПлатежнойСистемы = Элементы.ГруппаQRКодПовтор
		ИЛИ ТекущийСлойПанелиПлатежнойСистемы = Элементы.ГруппаОшибкаПолученияСтатуса Тогда
		
		Если ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа Тогда
			ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
		Иначе
			ПодключитьОбработчикОжидания("ОпределитьСтатусВозврата", 0.1, Истина);
		КонецЕсли;
		
	ИначеЕсли ТекущийСлойПанелиПлатежнойСистемы = Элементы.ГруппаОшибка Тогда
		
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеЗавершитьОплату, "ЗакрытьЧек");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуПринудительно()
	
	ОповещениеЗавершитьОплату 				= Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	ТребуетсяПодтверждениеАдминистратором 	= Не ЕстьПравоНаДействие("РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы");
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевРазделПлатежнаяСистема) = Элементы.ГруппаПодтверждениеОплаты Тогда
		
		Если ТребуетсяПодтверждениеАдминистратором Тогда
			
			Если НЕ ЗначениеЗаполнено(КодДляЗаменыПрав) Тогда
				Возврат;
			КонецЕсли;
	
			ПлатежнаяСистема_НоваяЗаявка.БылоПодтверждениеКодомАдминистратора = Ложь;
			ПользовательДоЗаменыПрав = Объект.ПользовательБД;
			КассирДоЗаменыПрав = Объект.Кассир;
	
			ЗаменитьПраваИВыполнитьТребуемоеДействие(КодДляЗаменыПрав);
			ОбработатьИзменениеТаблицыТоваровНаКлиенте();
			
			Если ПлатежнаяСистема_НоваяЗаявка.БылоПодтверждениеКодомАдминистратора Тогда
				ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПодтвердитьОплату(ЭтотОбъект, ОповещениеЗавершитьОплату);
			Иначе
				
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияТекстПодтверждениеОплатыОшибка, Истина);
				ПодключитьОбработчикОжидания("СкрытьОшибкиПлатежнойСистемы", 5, Истина);
				
			КонецЕсли;
		
		Иначе
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПодтвердитьОплату(ЭтотОбъект, ОповещениеЗавершитьОплату);
		КонецЕсли;
		
	ИначеЕсли ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа Тогда
		
		ТекущаяОперация  = "ПодтвердитьОплатуПлатежнойСистемой";
		КодДляЗаменыПрав = "";
		
		ТекстИнформации  = НСтр("ru = 'Проверьте выполнение операции оплаты платежной системы.'") + Символы.ПС;
		ТекстИнформации  = ТекстИнформации + НСтр("ru = 'Сумма операции:'")
			+ " "+ ПлатежнаяСистема_НоваяЗаявка.ИтогПоОрганизации + Символы.ПС;
		
		Если ТребуетсяПодтверждениеАдминистратором Тогда
			
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВывестиИнформацию(ЭтотОбъект,
				НСтр("ru = 'Попросите администратора подтвердить оплату'"),
				ТекстИнформации, 
																"ПодтверждениеОплаты");
																
			Элементы.КодДляПодтвержденияОплаты.Видимость = Истина;
			ТекущийЭлемент 					 = Элементы.КодДляПодтвержденияОплаты;
			
		Иначе
			
			Элементы.КодДляПодтвержденияОплаты.Видимость = Ложь;
			
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВывестиИнформацию(ЭтотОбъект, 
				НСтр("ru = 'Операция оплаты прошла успешно?'"), 
				ТекстИнформации, 
				"ПодтверждениеОплаты");
		КонецЕсли;
		
	Иначе
		
		КодДляЗаменыПрав = "";
		ТекущаяОперация  = "ПодтвердитьОплатуПлатежнойСистемой";
		
		ТекстИнформации  = НСтр("ru = 'Проверьте выполнение операции возврата платежной системы.'") + Символы.ПС;
		ТекстИнформации  = ТекстИнформации + НСтр("ru = 'Сумма операции:'")
			+ " "+ ПлатежнаяСистема_НоваяЗаявка.ИтогПоОрганизации + Символы.ПС;
		
		Если ТребуетсяПодтверждениеАдминистратором Тогда
			
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВывестиИнформацию(ЭтотОбъект,
				НСтр("ru = 'Попросите администратора подтвердить возврат'"),
				ТекстИнформации,
				"ПодтверждениеОплаты");
			
			Элементы.КодДляПодтвержденияОплаты.Видимость = Истина;
			ТекущийЭлемент 					 = Элементы.КодДляПодтвержденияОплаты;
			
		Иначе
			
			Элементы.КодДляПодтвержденияОплаты.Видимость = Ложь;
			
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВывестиИнформацию(ЭтотОбъект, 
				НСтр("ru = 'Операция возврата прошла успешно?'"),
				ТекстИнформации,
				"ПодтверждениеОплаты");
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуВозвратПлатежнойСистемой(Действие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Действие = "ОтложитьЧек" Тогда
		
		Объект.Оплачивается = Истина;
		СтрокиНаУдаления 	= Объект.Товары.НайтиСтроки(Новый Структура("Оплачена", Истина));
		
		Для Каждого СтрокаНаУдаление Из СтрокиНаУдаления Цикл
			Объект.Товары.Удалить(СтрокаНаУдаление);
		КонецЦикла;
		
		ЭтоОперацияПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		Если ЭтоОперацияПродажа Тогда
			ОтложенныйЧек = ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты;
		Иначе
			ОтложенныйЧек = ПлатежнаяСистема_НоваяЗаявка.ДокументВозврата;
		КонецЕсли;
		
		ОтложитьЧек(Команды.ОтложитьЧек);
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
		
	ИначеЕсли Действие = "ОтменитьЧек" Тогда

		ПлатежнаяСистема_СанкционированноеЗакрытие = Истина;
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
		
	ИначеЕсли Действие = "ЗакрытьЧек"
		ИЛИ Действие = "Да" 
		ИЛИ Действие = "ДобавитьВидОплаты" Тогда
		
		Если Действие = "ДобавитьВидОплаты" Тогда
			ПлатежнаяСистема_НоваяЗаявка.БылоПодтверждениеПлатежнойСистемы = Истина;
		КонецЕсли;
		
		#Область ПробитиеЧека
		Если ОтменаПлатежаСБП И ТекущаяОперация = "ВозвратОплаты" Тогда
			
			СброситьОплатуПриОшибке();
			РассчитатьСуммыОплаты();
			НастроитьДоступностьПробитьЧек();
			ПерейтиНаСтраницуОплата();
			
		ИначеЕсли ОтменаПлатежаСБП И ТекущаяОперация = "УдалитьЧекРМК" Тогда
			
			Если КодДляЗаменыПрав = "" Тогда
				УдалитьЧекКлиент();
			Иначе
				ЗаменитьПраваИВыполнитьТребуемоеДействие(КодДляЗаменыПрав);
				НастроитьФормуПослеЗаменыПрав();
			КонецЕсли; 
			
		Иначе
			
			УстановитьДоступностьЭлементаФормы(Элементы.ПанельУправленияЧеком, Ложь);
			Если ПлатежнаяСистема_НоваяЗаявка.ТипПлатежнойСистемы = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.ЮКасса") Тогда
				СуммаОплаченоЮКасса = ПлатежнаяСистема_НоваяЗаявка.ИтогПоОрганизации;
			Иначе
				СуммаОплаченоСБП = ПлатежнаяСистема_НоваяЗаявка.ИтогПоОрганизации;
			КонецЕсли;
			
			Если ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа Тогда
				ЧекККМВОбработке = ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты;
				ОтложенныйЧек	 = ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты;
			Иначе
				ЧекККМВОбработке = ПлатежнаяСистема_НоваяЗаявка.ДокументВозврата;
				ОтложенныйЧек	 = ПлатежнаяСистема_НоваяЗаявка.ДокументВозврата;
			КонецЕсли;
		
			Если ПлатежнаяСистема_НоваяЗаявка.БылоПодтверждениеПлатежнойСистемы
				И ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа Тогда
				
				СсылочныйНомерСБП =
					ИнтеграцияСПлатежнымиСистемамиРМКВызовСервера.ИдентификаторыОперацииОплаты(
						ПлатежнаяСистема_НоваяЗаявка.Интеграция,
						ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты);
						
				ПлатежнаяСистема_НоваяЗаявка.СсылочныйНомер = ?(ЗначениеЗаполнено(СсылочныйНомерСБП), 
					СсылочныйНомерСБП, 
					ПлатежнаяСистема_НоваяЗаявка.СсылочныйНомер);
				
			Иначе
				ПлатежнаяСистема_НоваяЗаявка.СсылочныйНомер = "";
			КонецЕсли;
		
			ЗаполнитьТаблицуОплат();
			РассчитатьСуммыОплаты();
			НастроитьДоступностьПробитьЧек();
			
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаЗавершение);
			ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.НастроитьФормуПоИнтеграции(ЭтотОбъект);
			
			ПодготовитьКПечатиЧека(ПлатежнаяСистема_НоваяЗаявка.АвтономнаяККТ);
			
		КонецЕсли;
		#КонецОбласти
		
	КонецЕсли;
	ОчиститьQRКодНаДисплееПокупателя();
	ОбработатьИзменениеТаблицыТоваровНаКлиенте();
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторОплаты()
	
	ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	
	Если РежимКассыСамообслуживания Тогда
		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПолучитьИдентификаторОплаты(ЭтотОбъект, ОповещениеЗавершитьОплату, Ложь);
	Иначе
		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПолучитьИдентификаторОплаты(ЭтотОбъект, ОповещениеЗавершитьОплату);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВозвратПлатежнойСистемой()
	
	ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВозвратОплаты(ЭтотОбъект, ОповещениеЗавершитьОплату);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьСтатусОплаты()
	
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевРазделПлатежнаяСистема) = Элементы.ГруппаПанельДействий Тогда
		
		ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусОплатыПозже = Истина;
		Возврат;
		
	КонецЕсли;
	
	ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьСтатусОплаты(ЭтотОбъект, ОповещениеЗавершитьОплату);
	ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусОплатыПозже = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьСтатусВозврата()
	
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевРазделПлатежнаяСистема) = Элементы.ГруппаПанельДействий Тогда
		ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусВозвратаПозже = Истина;
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьСтатусВозврата(ЭтотОбъект, ОповещениеЗавершитьОплату);
	
	ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусВозвратаПозже = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьОплатыQRКодом(ИнициализацияФормы = Ложь)
	
	КлючПоискаОплатаСБП 	= Новый Структура("ПлатежнаяСистема",
		ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей"));
	КлючПоискаОплатаЮКасса 	= Новый Структура("ПлатежнаяСистема",
		ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.ЮКасса"));
	
	ПлатежнаяСистема_ИдентификаторОплаты	= "";
	ПлатежнаяСистема_ИдентификаторПС		= "";
	
	Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) Тогда
		
		Если ЗначениеЗаполнено(ЧекККМПродажа) Тогда
			
			ПараметрыВозврата =
				ИнтеграцияСПлатежнымиСистемамиРМКВызовСервера.ПолучитьПараметрыДокументаОплаты(ЧекККМПродажа);
			ПлатежнаяСистема_ВозможенВозврат = ЗначениеЗаполнено(ПараметрыВозврата.ВидОплатыВозврата);
			
			Если ПлатежнаяСистема_ВозможенВозврат Тогда
				
				Если ПлатежнаяСистема_ВидыОплат.НайтиСтроки(Новый Структура("ИдентификаторПС, Организация",
						ПараметрыВозврата.ИдентификаторПС, ПараметрыВозврата.Организация)).Количество() Тогда
					
					КлючПоискаОплатаСБП.Вставить("ИдентификаторПС", 	ПараметрыВозврата.ИдентификаторПС);
					КлючПоискаОплатаСБП.Вставить("Организация", 		ПараметрыВозврата.Организация);
					
					КлючПоискаОплатаЮКасса.Вставить("ИдентификаторПС", 	ПараметрыВозврата.ИдентификаторПС);
					КлючПоискаОплатаЮКасса.Вставить("Организация",		ПараметрыВозврата.Организация);
					
					ПлатежнаяСистема_ИдентификаторОплаты = ПараметрыВозврата.ИдентификаторОплаты;
					ПлатежнаяСистема_ИдентификаторПС 	 = ПараметрыВозврата.ИдентификаторПС;

					ПлатежныеСистемы_ОснованиеПродажи 	 = ?(ПараметрыВозврата.Свойство("ОснованиеПродажи"),
						ПараметрыВозврата.ОснованиеПродажи,
						ЧекККМПродажа);
					
					ПлатежныеСистемы_СуммаКВозврату 	 = ?(ПараметрыВозврата.Свойство("СуммаКВозврату"),
						ПараметрыВозврата.СуммаКВозврату,
						СуммаКОплате);
						
				КонецЕсли;
				
			Иначе
				
				КлючПоискаОплатаСБП 	= Неопределено;
				КлючПоискаОплатаЮКасса 	= Неопределено;
				
			КонецЕсли;
			
		Иначе
			ПлатежнаяСистема_ВозможенВозврат = Истина;
		КонецЕсли;

		ИспользоватьОплатуСПБ 	 = КлючПоискаОплатаСБП 	<> Неопределено
			И ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПоискаОплатаСБП).Количество() > 0
			И ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВозвратВозможен(КлючПоискаОплатаСБП.ПлатежнаяСистема);
		
		ИспользоватьОплатуЮКасса = КлючПоискаОплатаЮКасса <> Неопределено
			И ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПоискаОплатаЮКасса).Количество() > 0
			И ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВозвратВозможен(КлючПоискаОплатаЮКасса.ПлатежнаяСистема);
		
	Иначе
		
		ИспользоватьОплатуСПБ 	 = ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПоискаОплатаСБП).Количество() > 0;
		ИспользоватьОплатуЮКасса = ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПоискаОплатаЮКасса).Количество() > 0;
			
	КонецЕсли;
	
	Если ИнициализацияФормы Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыСБП, ИспользоватьОплатуСПБ);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыЮКасса, ИспользоватьОплатуЮКасса);
		
	Иначе
		
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСБП,  	ИспользоватьОплатуСПБ);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаЮКасса, 	ИспользоватьОплатуЮКасса);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьЧекПередОплатойПлатежнойСистемы(СистемаНалогообложения, ТекстОшибки, Отказ = Ложь)

	ОбщегоНазначенияРМКПереопределяемый.ЗаписатьЧекККМПередПробитием(ЭтотОбъект, Отказ, ТекстОшибки,
		СистемаНалогообложения);

	Возврат Не Отказ;
		
КонецФункции

&НаКлиенте
Процедура ПродолжитьОплачиваемыйЧекQRКодом(СледующийЧек = Ложь)
	
 	Если СледующийЧек 
		И ПлатежнаяСистема_ОжидаемоеКоличествоЧеков > 0 Тогда
		
		Если ЗначениеЗаполнено(ПлатежнаяСистема_ИдентификаторПС) 
			И ЗначениеЗаполнено(ВыбраннаяОрганизация) Тогда
			
			ПлатежнаяСистема    = ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьПлатежнуюСистему(ЭтотОбъект, ПлатежнаяСистема_ВидыОплат);
			
			Ключ 				= Новый Структура("ПлатежнаяСистема, Организация", ПлатежнаяСистема, ВыбраннаяОрганизация);
			СтрокиОплаты 		= ПлатежнаяСистема_ВидыОплат.НайтиСтроки(Ключ);
		
			Если СтрокиОплаты.Количество() Тогда
				
				ПлатежнаяСистема_СанкционированноеЗакрытие 	= Ложь;
				ЧекККМВОбработке 							= Неопределено;
				
				ОбработатьПробитиеЧекаНаКлиенте(СтрокиОплаты[0].ПлатежнаяСистема);
			
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Объект.Оплачивается Тогда
		
		СтруктураОплаты			   		  =
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьПараметрыОплатыПоОперациямДокумента(ЭтотОбъект,
				ПлатежнаяСистема_ВидыОплат, ОтложенныйЧек);
		ПлатежнаяСистема_ИдентификаторПС  = СтруктураОплаты.ИдентификаторПС;
		ПлатежнаяСистемаККТ 	   		  = СтруктураОплаты.ПлатежнаяСистема;

		Если ЗначениеЗаполнено(ПлатежнаяСистема_ИдентификаторПС) Тогда
			ОплатаQRКодом(ПлатежнаяСистемаККТ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СанкционироватьЗакрытиеОперацииПлатежнойСистемой(ОтменитьОплатуQRКодом = Истина)
	
	ОтключитьОбработчикОжидания("ОпределитьСтатусВозврата");
	ОтключитьОбработчикОжидания("ОпределитьСтатусОплаты");
	ОтключитьОбработчикОжидания("ПолучитьИдентификаторОплаты");
	ОтключитьОбработчикОжидания("ВыполнитьВозвратПлатежнойСистемой");
	
	ТипОплаты = "";
	ТекущаяОперация = "";
	ПлатежнаяСистема_СанкционированноеЗакрытие = Ложь;
	ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = 0;
	
	Элементы.ГруппаСписокОрганизацийПоКорзине.Доступность = Истина;
	Элементы.ГруппаСБПДополнительнаяПанель.Видимость 	  = Истина;
	
	Если ОтменитьОплатуQRКодом Тогда 
		
		СуммаОплаченоСБП = 0;
		СуммаОплаченоЮКасса = 0;
		
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		ПараметрыПересчета.ПоКомандеОтменитьОплатуQRКодом = Истина;
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСБП, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЮКасса, Ложь);
		
		ПлатежныеСистемы_ВыбраннаяКоманда = "";
		
	КонецЕсли;

	Если Не ФормаЗамороженаПослеПробитияЧека() Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОшибкиПлатежнойСистемы()
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияТекстПодтверждениеОплатыОшибка, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОплатаQRКодом(ПлатежнаяСистемаККТ)
	
	ПлатежнаяСистема_СанкционированноеЗакрытие = Ложь;
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеОплатаQRКодом = Истина;
		
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
	Если НЕ ЗначениеЗаполнено(ВыбраннаяОрганизация) Тогда
		
		ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = ОжидаемоеКоличествоЧеков - ПробитыеЧеки.Количество();
		
		Если ПлатежнаяСистема_ОжидаемоеКоличествоЧеков > 1
			И ПлатежнаяСистема_ВидыОплат.
				НайтиСтроки(Новый Структура("Организация, ПлатежнаяСистема",
					ВыбраннаяОрганизация, ПлатежнаяСистемаККТ)).Количество() = 0 Тогда
			
				ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = ПлатежнаяСистема_ОжидаемоеКоличествоЧеков - 1;
				ПереключитьЧекПродажи(Команды.ПереключитьЧекОрганизация2);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОткрытаСтраницаИнфоОшибка() Тогда
		
		Если (ПриемАванса 
				ИЛИ ПриемАвансаПоЗаказу 
				ИЛИ ЭтоОплатаРассрочки
				ИЛИ Объект.ОперацияСДенежнымиСредствами) 
			И Не ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) Тогда
			
			ЭлементГруппыОплаты = Неопределено;
			ПолеСуммы = Неопределено;
			Если ПлатежнаяСистемаККТ = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.ЮКасса") Тогда
				ЭлементГруппыОплаты = Элементы.ГруппаОплатаЮКасса;
				СуммаОплаченоЮКасса = СуммаКОплате;
				ПолеСуммы = Элементы.СуммаОплаченоЮКасса;
			Иначе
				ЭлементГруппыОплаты = Элементы.ГруппаОплатаСБП;
				СуммаОплаченоСБП = СуммаКОплате;
				ПолеСуммы = Элементы.СуммаОплаченоСБП;
			КонецЕсли;
			
			Если Элементы.СуммаОплаченоВРассрочку.Доступность 
				И Не ПриемАванса И Не ПриемАвансаПоЗаказу Тогда
				СуммаОплаченоQRКодомПриИзменении(СуммаКОплате, ЭлементГруппыОплаты);
			Иначе
				УстановитьВидимостьЭлементаФормы(ЭлементГруппыОплаты, Истина);
				ТекущийЭлемент = ПолеСуммы;
			КонецЕсли;
			
		ИначеЕсли СуммаКОплате = 0
			И (СуммаОплаченоСБП > 0 Или СуммаОплаченоЮКасса > 0) Тогда
			ОбработатьПробитиеЧекаНаКлиенте(Команды.ПробитьЧек);
		Иначе
			РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата;
			ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
			ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьМаркетинговыхКомандПоЭтапуРаботыСЧеком(ЭтотОбъект,
				ЭтоОперацияПродажи);
			ОбработатьПробитиеЧекаНаКлиенте(ПлатежнаяСистемаККТ);
		КонецЕсли;

	Иначе
		ТипОплаты = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьQRКодПлатежнойСистемы(ШтрихКод)
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиДействийПлатежнойСистемы) = Элементы.ГруппаОсновнаяСтраница
		И Элементы.ИдентификаторОплаты.Видимость Тогда
		
		ПлатежнаяСистема_ИдентификаторОплаты = ШтрихКод;
		ПриИзмененииИдентификатораОплаты();
		
	ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевРазделПлатежнаяСистема) = Элементы.ГруппаПодтверждениеОплаты
		И Элементы.КодДляПодтвержденияОплаты.Видимость Тогда
		
		КодДляЗаменыПрав = ШтрихКод;
		ЗавершитьОплатуПринудительно();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИдентификатораОплаты()
	
	ПлатежнаяСистема_НоваяЗаявка.ИдентификаторОплаты = ПлатежнаяСистема_ИдентификаторОплаты;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыборПлатежнойСистемы(Результат, ПараметрыВыбора) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПлатежныеСистемы_ВыбраннаяКоманда = Результат.Значение;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Имя", ПараметрыВыбора.КомандаИмя);
	
	НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
	Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ОплатаQRКодомЗавершение", ДополнительныеПараметры, Истина);
	Иначе
		ОплатаQRКодомЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да), ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияПанелиДействийПлатежнойСистемы(ВыбранныйИдентификаторПС = Неопределено, АвтономнаяККТСБП = Ложь)
	
	Если ВыбранныйИдентификаторПС <> Неопределено Тогда
		
		ПлатежнаяСистема_ИдентификаторПС = ВыбранныйИдентификаторПС;
		ПлатежнаяСистема_ВидОплаты = ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьВидОплаты(ЭтотОбъект,
			ПлатежнаяСистема_ВидыОплат);
		ПлатежнаяСистема_СпособОплаты = ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьСпособОплаты(ЭтотОбъект,
			ПлатежнаяСистема_ВидыОплат, ВыбраннаяОрганизация);
		
	КонецЕсли;
	
	ТекущаяОперация = "Оплата QR-кодом";
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаПлатежнаяСистема);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПанельДействий);
	
	ПереданныеПараметры = ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ПараметрыИнициализации();
	
	ДокументОплачивается = ЗначениеЗаполнено(ОтложенныйЧек) И Объект.Оплачивается;
	ЭтоОперацияПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	Если ЭтоОперацияПродажа Тогда

		ПереданныеПараметры.ДокументОплаты 			= ?(ДокументОплачивается, ОтложенныйЧек, ЧекККМВОбработке);     
		
		ШаблонДекорации					   	  		= НСтр("ru = 'Сумма оплаты: %1 %2'");
		
		Элементы.ДекорацияСуммаЧека.Заголовок 		= СтрШаблон(
			ШаблонДекорации, 
			Формат(СуммаКОплате, "ЧДЦ=2; ЧГ="), 
			ПредставлениеВалюты);
		
		Элементы.ДекорацияСуммаЧекаПовтор.Заголовок = СтрШаблон(
			ШаблонДекорации, 
			Формат(СуммаКОплате, "ЧДЦ=2; ЧГ="), 
			ПредставлениеВалюты);
		
	Иначе
		
		ПереданныеПараметры.ДокументВозврата 	= ?(ДокументОплачивается, ОтложенныйЧек, ЧекККМВОбработке);
		ПереданныеПараметры.ДокументОплаты 		= ЭтотОбъект.ПлатежныеСистемы_ОснованиеПродажи;
		ПереданныеПараметры.ИдентификаторОплаты = ПлатежнаяСистема_ИдентификаторОплаты;
		
	КонецЕсли;
	
	ПереданныеПараметры.ИтогПоОрганизации = СуммаКОплате;
	ПереданныеПараметры.НомерДокумента = 1;
	ПереданныеПараметры.ВидОперации = Объект.ВидОперации;
	ПереданныеПараметры.Оплачивается = ДокументОплачивается;
	ПереданныеПараметры.ИдентификаторПС = ПлатежнаяСистема_ИдентификаторПС;
	ПереданныеПараметры.ВидОплатыПлатежнойСистемы = ПлатежнаяСистема_ВидОплаты;
	ПереданныеПараметры.СпособОплатыПлатежнойСистемы = ПлатежнаяСистема_СпособОплаты;
	ПереданныеПараметры.Магазин = Объект.ТорговыйОбъект;
	ПереданныеПараметры.Организация = ВыбраннаяОрганизация;
	ПереданныеПараметры.КассаККМ = Объект.КассаККМ;
	ПереданныеПараметры.ВидОперацииПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	ПереданныеПараметры.ПодключаемоеОборудование = ПодключаемоеОборудование;
    ПереданныеПараметры.АвтономнаяККТ = АвтономнаяККТСБП;
	
	ПереданныеПараметры.РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы = Истина; // Обрабатывается отдельным правом
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		
		Если СтрокаТоваров.Организация = ВыбраннаяОрганизация Тогда
		
			НоваяСтрока = ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.СтрокаТоваров();
		
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
		
			НоваяСтрока.Наименование = СтрокаТоваров.ПредставлениеНоменклатураХарактеристика;
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТоваров.ПредставлениеЕдиницыИзмерения;
			НоваяСтрока.СуммаСкидки = СтрокаТоваров.СуммаСкидкиНаценки;
		
			ПереданныеПараметры.Товары.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ИнициализироватьПараметры(ЭтотОбъект, ПереданныеПараметры, ПлатежнаяСистема_ВидыОплат);
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ЗапуститьФоновыеЗадания(ЭтотОбъект);
	
	Элементы.ГруппаСписокОрганизацийПоКорзине.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьQRКодНаДисплееПокупателя()
	Если ОборудованиеДисплеиПокупателяКлиент.ПодключенныеДисплеиПокупателяВыводятQRКод() Тогда
		ПараметрыОперации = ОборудованиеДисплеиПокупателяКлиент.ПараметрыОперацииДисплейПокупателя();
		ОборудованиеДисплеиПокупателяКлиент.НачатьОчисткуДисплеяПокупателя(
			,
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено, 
			ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОплатаСертификатомНСПК

&НаКлиенте
Процедура ПроверитьСертификатНСПКНаКлиенте()
	
	ТоварныеПозиции = Новый Массив();
	ДополнительныеПараметры = Новый Структура();
	
	ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	
	Если ПредварительноеОдобрениеНСПКПолучено Тогда
		СледующаяОперация = "ОплатитьЭлектроннымСертификатом";
		Если ЭтоВозврат Тогда
			СледующаяОперация = "ВернутьЭлектроннымСертификатом";
		КонецЕсли;
	Иначе
		СледующаяОперация = "ПредварительноеОдобрениеИспользования";
		Если ЭтоВозврат Тогда
			СледующаяОперация = "ПредварительноеОдобрениеВозврата";
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СледующаяОперация", СледующаяОперация);
	
	Если ПредварительноеОдобрениеНСПКПолучено Тогда
		
		Если СуммаОплаченоБН > 0 Тогда
			
			ЗаголовокПредупреждения = НСтр("ru='Оплата с карты МИР'");
			ШаблонПредупреждения = НСтр("ru='С карты МИР покупателя будет списано'");
			Если ЭтоВозврат Тогда
				ЗаголовокПредупреждения = НСтр("ru='Возврат на карту МИР'");
				ШаблонПредупреждения = НСтр("ru='На карту МИР покупателя будет возвращено'");
			КонецЕсли;
			
			ПараметрыОповещения = Новый Структура("ЭтоВозврат, СледующаяОперация", ЭтоВозврат, СледующаяОперация);
			ОписаниеОповещенияОплаты = Новый ОписаниеОповещения("ВыполнитьОперациюЭлектронныйСертификат", ЭтотОбъект, ПараметрыОповещения);
			ПоказатьВопрос(ОписаниеОповещенияОплаты,
				СтрШаблон(НСтр("ru='%1 %2 рублей. Продолжить?'"), ШаблонПредупреждения, СуммаОплаченоБН),
			РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, ЗаголовокПредупреждения);
		Иначе
			Если ЭтоВозврат Тогда
				ВернутьЭлектронныйСертификат(СледующаяОперация);
			Иначе
				ОплатитьЭлектроннымСертификатом(СледующаяОперация);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Для Каждого СтрокаТоваров Из ТаблицаТоваровФСС Цикл
			ТоварнаяПозиция = Новый Структура();
			ТоварнаяПозиция.Вставить("НомерПозиции", СтрокаТоваров.НомерПозиции);
			ТоварнаяПозиция.Вставить("Артикул", СтрокаТоваров.Артикул);
			ТоварнаяПозиция.Вставить("КодТовараТРУ", СтрокаТоваров.КодТРУ);
			ТоварнаяПозиция.Вставить("Количество", СтрокаТоваров.Количество);
			ТоварнаяПозиция.Вставить("Цена", СтрокаТоваров.Цена);
			ТоварнаяПозиция.Вставить("НомерПозицииВозврата", СтрокаТоваров.НомерПозицииВозврата);
			ТоварныеПозиции.Добавить(ТоварнаяПозиция);
		КонецЦикла;
		ДополнительныеПараметры.Вставить("ТоварныеПозиции", ТоварныеПозиции);
		
		Если ЭтоВозврат Тогда
			ДополнительныеПараметры.Вставить("ИдентификаторКорзины", ИдентификаторКорзиныНСПК);
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюНСПКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОборудованиеПлатежныеСистемыКлиент.НачатьПолучениеПараметровКарты(ОписаниеОповещения, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюЭлектронныйСертификат(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если НЕ (ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ЭтоВозврат")
			И ДополнительныеПараметры.Свойство("СледующаяОперация")) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения = КодВозвратаДиалога.Да Тогда
		
		ЭтоВозврат = ДополнительныеПараметры.ЭтоВозврат;
		СледующаяОперация = ДополнительныеПараметры.СледующаяОперация;
		
		Если ЭтоВозврат Тогда
			ВернутьЭлектронныйСертификат(СледующаяОперация);
		Иначе
			ОплатитьЭлектроннымСертификатом(СледующаяОперация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьЭлектроннымСертификатом(СледующаяОперация)
	
	ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции  = "PayElectronicCertificate";
	ПараметрыОперации.ИдентификаторКорзины = ИдентификаторКорзиныНСПК;
	ПараметрыОперации.СуммаЭлектронногоСертификата = СуммаОплаченоСертификатамиНСПК;
	ПараметрыОперации.СуммаСобственныхСредств = СуммаОплаченоБН;
	
	ПараметрыОперации.Вставить("СледующаяОперация", СледующаяОперация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
	ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
		ОписаниеОповещения,
		УникальныйИдентификатор,
		Неопределено,
		ПараметрыОперации,
		Неопределено,
		Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьЭлектронныйСертификат(СледующаяОперация)
	
	ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции  = "ReturnElectronicCertificate";
	ПараметрыОперации.ИдентификаторКорзины = ИдентификаторКорзиныНСПК;
	ПараметрыОперации.СуммаЭлектронногоСертификата = СуммаОплаченоСертификатамиНСПК;
	ПараметрыОперации.СуммаСобственныхСредств = СуммаОплаченоБН;
	
	ПараметрыОперации.Вставить("СледующаяОперация", СледующаяОперация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
	ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
		ОписаниеОповещения,
		УникальныйИдентификатор,
		Неопределено,
		ПараметрыОперации,
		Неопределено,
		Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюНСПКЗавершение(РезультатВыполнения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ (ТипЗнч(РезультатВыполнения) = Тип("Структура") И РезультатВыполнения.Свойство("Результат")) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Результат Тогда
		
		ХешНомерКарты = ?(РезультатВыполнения.Свойство("ХешНомерКарты"), РезультатВыполнения.ХешНомерКарты, "");
		НомерКарты = ?(РезультатВыполнения.Свойство("НомерКарты"), РезультатВыполнения.НомерКарты, "");
		СсылкаНаПлатежныйСчет = ?(РезультатВыполнения.Свойство("СсылкаНаПлатежныйСчет"), РезультатВыполнения.СсылкаНаПлатежныйСчет, "");
		
		Если НЕ ДополнительныеПараметры = Неопределено И ДополнительныеПараметры.Свойство("СледующаяОперация") Тогда
			
			Если ДополнительныеПараметры.СледующаяОперация = "ПредварительноеОдобрениеИспользования" Тогда
				СогласоватьЭСНСПК(ДополнительныеПараметры.ТоварныеПозиции, ХешНомерКарты, СсылкаНаПлатежныйСчет);
			ИначеЕсли ДополнительныеПараметры.СледующаяОперация = "ПредварительноеОдобрениеВозврата" Тогда
				СогласоватьВозвратЭСНСПК(ДополнительныеПараметры.ТоварныеПозиции, ХешНомерКарты, СсылкаНаПлатежныйСчет);
			ИначеЕсли ДополнительныеПараметры.СледующаяОперация = "ПолучениеИдентификаторовКорзинПокупокТСП" Тогда
				ПолучитьИдентификаторыКорзинПокупокТСП(ХешНомерКарты, СсылкаНаПлатежныйСчет);
			ИначеЕсли ДополнительныеПараметры.СледующаяОперация = "ПолучениеСпискаСертификатов" Тогда
				ПолучитьСертификатыЭСНСПК(ХешНомерКарты, СсылкаНаПлатежныйСчет);
			ИначеЕсли ДополнительныеПараметры.СледующаяОперация = "ПолучениеСпискаТоваров" Тогда
				ПолучитьТоварыЭСНСПК(ХешНомерКарты, СсылкаНаПлатежныйСчет);
			ИначеЕсли ДополнительныеПараметры.СледующаяОперация = "ЗавершитьОтменуОплаты" Тогда
				
				СброситьОплатуПриОшибке();
				РассчитатьСуммыОплаты();
				НастроитьДоступностьПробитьЧек();
				ПерейтиНаСтраницуОплата(); 
				
				ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
				НастроитьЭлементыВРежимеПроверкаСертификатаНСПК(Ложь, ЭтоВозврат);
				
			Иначе
				
				ДанныеЭТ = ОбщегоНазначенияРМККлиент.ДанныеТекущегоЭквайринговогоТерминала(ЭтотОбъект);
				Если ДанныеЭТ = Неопределено Тогда
					ЗаголовокОшибки = НСтр("ru='Оплата ЭС (ФЗ-491)'");
					ТекстСообщения = НСтр("ru='Не определен текущий эквайринговый терминал.'");
					ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения);
					Возврат;
				КонецЕсли;
				
				СтруктураПоискаПК = Новый Структура();
				СтруктураПоискаПК.Вставить("ВидОплаты", ОбщегоНазначенияРМККлиент.ВидОплатыПлатежнаяКартаНСПК());
				Если ЕстьСвойство(РезультатВыполнения, "СуммаОперации") Тогда
					СтруктураПоискаПК.Вставить("Сумма", РезультатВыполнения.СуммаСобственныхСредств);
				КонецЕсли;
				МассивОплатПК = Объект.Оплата.НайтиСтроки(СтруктураПоискаПК);
				Если МассивОплатПК.Количество() > 0 Тогда
					
					СтрокаОплаты = МассивОплатПК[0];
					СтрокаОплаты.ЭквайринговыйТерминал = ДанныеЭТ.ЭквайринговыйТерминал;
					СтрокаОплаты.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
					СтрокаОплаты.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
					СтрокаОплаты.СсылочныйНомер = РезультатВыполнения.СсылочныйНомер;
					
				КонецЕсли;
				
				СтруктураПоискаЭС = Новый Структура();
				СтруктураПоискаЭС.Вставить("ВидОплаты", ВидОплатыНСПК);
				
				Если ЕстьСвойство(РезультатВыполнения, "СуммаЭлектронногоСертификата") Тогда
					СтруктураПоискаЭС.Вставить("Сумма", РезультатВыполнения.СуммаЭлектронногоСертификата);
				КонецЕсли;
				МассивОплатЭС = Объект.Оплата.НайтиСтроки(СтруктураПоискаЭС);
				
				Если МассивОплатЭС.Количество() > 0 Тогда
					
					СтрокаОплаты = МассивОплатЭС[0];
					СтрокаОплаты.ВидОплаты = ВидОплатыНСПК;
					СтрокаОплаты.ЭквайринговыйТерминал = ДанныеЭТ.ЭквайринговыйТерминал;
					СтрокаОплаты.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
					СтрокаОплаты.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
					СтрокаОплаты.СсылочныйНомер = РезультатВыполнения.ИдентификаторКорзины;
					
				КонецЕсли;
				
				ТипОплаты = "НСПК";
				ТранзакцияПоКартеЗавершена = Истина;
				НачатьПечатьЧека();
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Объект.Оплата.Очистить();
		ПредварительноеОдобрениеНСПКПолучено = Ложь;
		ОплатитьСертификатомНСПКНаКлиенте();
		УстановитьДоступностьЭлементаФормы(Элементы.ПроверитьСертификатНСПК, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧекНСПК, Ложь);
		
		ЗаголовокОшибки = НСтр("ru='Оплата электронным сертификатом'");
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеИдентификатораКорзиныЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если НЕ (ТипЗнч(РезультатВыполнения) = Тип("Структура") И РезультатВыполнения.Свойство("Результат")) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибка = Ложь;
	ЗаголовокОшибки = НСтр("ru = 'Оплата электронным сертификатом'");
	Если РезультатВыполнения.Результат Тогда
		ИдентификаторКорзиныНСПК = РезультатВыполнения.ИдентификаторКорзины;
	Иначе
		ЕстьОшибка = Истина;
		ТекстОшибки = НСтр("ru = 'Не удалось получить идентификатор корзины по фискальному признаку чека'");
	КонецЕсли;
	
	Если НЕ ЕстьОшибка И НЕ СтрДлина(ИдентификаторКорзиныНСПК) = 24 Тогда
		ЕстьОшибка = Истина;
		ТекстОшибки = НСтр("ru = 'Идентификатор корзины должен состоять из 24 символов.'");
	КонецЕсли;
	
	Если ЕстьОшибка Тогда
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки);
		
	Иначе
		ОплатитьСертификатомНСПКНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьЭСНСПК(ТоварныеПозиции, ХешНомерКарты, СсылкаНаПлатежныйСчет)
	
	ПараметрыОперации = ПолучитьПараметрыОперацииНСПКНаСервере(Объект.КассаККМ, "");
	
	ПараметрыОперации.ХешНомерКарты = ХешНомерКарты;
	ПараметрыОперации.СсылкаНаПлатежныйСчет = СсылкаНаПлатежныйСчет;
	ПараметрыОперации.ТоварныеПозиции = ТоварныеПозиции;
	
	ПредварительноеОдобрениеНСПКПолучено = Ложь;
	ОповещениеМетода = Новый ОписаниеОповещения("ПредварительноеОдобрениеНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
	ЭлектронныеСертификатыНСПККлиент.НачатьПредварительноеОдобрениеИспользования(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьВозвратЭСНСПК(ТоварныеПозиции, ХешНомерКарты, СсылкаНаПлатежныйСчет)
	
	ПараметрыОперации = ПолучитьПараметрыОперацииНСПКНаСервере(Объект.КассаККМ, ИдентификаторКорзиныНСПК);
	
	ПараметрыОперации.ХешНомерКарты = ХешНомерКарты;
	ПараметрыОперации.СсылкаНаПлатежныйСчет = СсылкаНаПлатежныйСчет;
	
	ДополнительныеПараметры = Новый Структура("ПараметрыОперации, ТоварныеПозиции", ПараметрыОперации, ТоварныеПозиции);
	ПредварительноеОдобрениеНСПКПолучено = Ложь;
	ОповещениеМетода = Новый ОписаниеОповещения("ПолучениеСоставаКорзиныНСПКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ЭлектронныеСертификатыНСПККлиент.НачатьПолучениеСоставаКорзины(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительноеОдобрениеНСПКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если НЕ (ТипЗнч(РезультатВыполнения) = Тип("Структура") И РезультатВыполнения.Свойство("Результат")) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Результат Тогда
		
		ПредварительноеОдобрениеНСПКПолучено = Истина;
		ОбработатьРезультатНСПКНаСервере(РезультатВыполнения,
			ДополнительныеПараметры.Свойство("СохранитьИдентификаторКорзиныНСПК"));
			
	Иначе
		
		ЗаголовокОшибки = НСтр("ru='Оплата электронным сертификатом'");
		ТекстСообщения =
			СтрШаблон(НСтр("ru='Ошибка: (%1) %2'"), РезультатВыполнения.КодРезультата, РезультатВыполнения.ОписаниеОшибки);
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения);
		
	КонецЕсли;

	АктивныйСлойГруппы
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	
	Если ПредварительноеОдобрениеНСПКПолучено 
		И НЕ АктивныйСлойГруппы = Элементы.ГруппаСторноЭквайринг
		И НЕ АктивныйСлойГруппы = Элементы.ГруппаИнфоОшибка Тогда
		
			РассчитатьСуммыОплаты();
		
			ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
			Если НЕ ЭтоВозврат Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
				УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
				
			КонецЕсли;
			
			УстановитьДоступностьЭлементаФормы(Элементы.ПроверитьСертификатНСПК, Ложь); 
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПробитияЧекаНСПК);
			
			ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
			ПараметрыПересчета.ПоКомандеБН = НЕ Элементы.ГруппаОплатаКартой.Видимость И НЕ ЭтоВозврат;
			ПараметрыПересчета.ПриИзмененииБНОплаты = Истина;
			РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
			
	КонецЕсли;
	
	УстановитьЗаголовкиОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеСоставаКорзиныНСПКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если НЕ (ТипЗнч(РезультатВыполнения) = Тип("Структура") И РезультатВыполнения.Свойство("Результат")) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Результат Тогда
	
		РезультатВыполнения.Вставить("ПредыдущаяПокупка", Истина);
		
		ОбработатьРезультатНСПКНаСервере(РезультатВыполнения, Истина);
		
		РезультатВыполнения.Удалить("ПредыдущаяПокупка");
		
		Если НЕ РезультатВыполнения.Результат Тогда
			Возврат;
		КонецЕсли;
		
		ТоварныеПозиции = ДополнительныеПараметры.ТоварныеПозиции;
		// Удаление строк, которых не было в оригинальной продаже ЭС.
		СтрокиНеИзВозврата = ТаблицаТоваровФСС.НайтиСтроки(Новый Структура("НомерПозицииВозврата", 999));
		
		Для каждого СтрокаНеИзВозврата Из СтрокиНеИзВозврата Цикл
			КоличествоТоварныхПозиций = ТоварныеПозиции.Количество();
			Для Индекс = 1 По КоличествоТоварныхПозиций Цикл
				СтрокаТовара = ТоварныеПозиции[КоличествоТоварныхПозиций - Индекс];
				Если СтрокаТовара.Артикул = СтрокаНеИзВозврата.Артикул Тогда
					ТоварныеПозиции.Удалить(КоличествоТоварныхПозиций - Индекс);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Заполнение номера позиции в оригинальной продаже ЭС.
		Для каждого СтрокаПодтверждения Из ТоварныеПозиции Цикл
			СтрокаФСС = ТаблицаТоваровФСС.НайтиПоИдентификатору(СтрокаПодтверждения.НомерПозиции);
			Если НЕ СтрокаФСС = Неопределено Тогда
				СтрокаПодтверждения.НомерПозицииВозврата = СтрокаФСС.НомерПозицииВозврата;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
		ПараметрыОперации.ТоварныеПозиции = ТоварныеПозиции;
		
		ПредварительноеОдобрениеНСПКПолучено = Ложь;
		ОповещениеМетода = Новый ОписаниеОповещения("ПредварительноеОдобрениеНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
		ЭлектронныеСертификатыНСПККлиент.НачатьПредварительноеОдобрениеВозврата(ОповещениеМетода, ПараметрыОперации);
		
	Иначе
		ЗаголовокОшибки = НСтр("ru='Оплата электронным сертификатом'");
		ТекстСообщения =
			СтрШаблон(НСтр("ru='Ошибка: (%1) %2'"), РезультатВыполнения.КодРезультата, РезультатВыполнения.ОписаниеОшибки);
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОперацииНСПКНаСервере(КассаККМ, ИдентификаторКорзиныНСПК)
	
	ПараметрыОперации = ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК();
	ЭлектронныеСертификатыНСПКРМКПереопределяемый.ЗаполнитьПараметрыОперацииНСПКПоКассеККМ(ПараметрыОперации, КассаККМ, ИдентификаторКорзиныНСПК);
	
	Возврат ПараметрыОперации;
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатНСПКНаСервере(РезультатВыполнения, СохранитьИдентификаторКорзиныНСПК = Ложь)
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ИдентификаторКорзины") И НЕ ПустаяСтрока(РезультатВыполнения.ИдентификаторКорзины) 
		И НЕ СохранитьИдентификаторКорзиныНСПК Тогда
		ИдентификаторКорзиныНСПК = РезультатВыполнения.ИдентификаторКорзины;
	КонецЕсли;
	Если РезультатВыполнения.Свойство("СуммаСертификатами") Тогда
		
		СуммаОплаченоСертификатамиНСПК = РезультатВыполнения.СуммаСертификатами;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ТоварныеПозиции") И РезультатВыполнения.ТоварныеПозиции.Количество() > 0 Тогда
		Для Каждого ТоварнаяПозиция Из РезультатВыполнения.ТоварныеПозиции Цикл
			
			СтрокаТовара = Неопределено;
			
			Если РезультатВыполнения.Свойство("ПредыдущаяПокупка") Тогда
				СтрокиТоваров = ТаблицаТоваровФСС.НайтиСтроки(Новый Структура("Артикул", ТоварнаяПозиция.Артикул));
				Если СтрокиТоваров.Количество() > 0 Тогда
					СтрокаТовара = СтрокиТоваров[0];
				КонецЕсли;
			Иначе
				СтрокаТовара = ТаблицаТоваровФСС.НайтиПоИдентификатору(ТоварнаяПозиция.НомерПозиции);
			КонецЕсли;
			
			Если СтрокаТовара = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если РезультатВыполнения.Свойство("ПредыдущаяПокупка") Тогда
				СтрокаТовара.НомерПозицииВозврата = ТоварнаяПозиция.НомерПозиции;
			КонецЕсли;
			
			СтрокаТовара.КоличествоФСС = ТоварнаяПозиция.Количество;
			СтрокаТовара.ЦенаФСС = ТоварнаяПозиция.Цена;
			СтрокаТовара.СуммаФСС = СтрокаТовара.КоличествоФСС*СтрокаТовара.ЦенаФСС;
			
			Если ТоварнаяПозиция.Свойство("Сертификаты") И ТоварнаяПозиция.Сертификаты.Количество() > 0 Тогда
				
				КоличествоПоСертификату = 0;
				СуммаПоСертификату = 0;
				МаксимальнаяЦена = 0;
				Для Каждого Сертификат Из ТоварнаяПозиция.Сертификаты Цикл
					СтрокаСертификата = СтрокаТовара.Сертификаты.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСертификата, Сертификат);
					КоличествоПоСертификату = КоличествоПоСертификату + СтрокаСертификата.Количество;
					СуммаПоСертификату = СуммаПоСертификату + (СтрокаСертификата.Количество * СтрокаСертификата.Цена);
					МаксимальнаяЦена = Макс(МаксимальнаяЦена, СтрокаСертификата.МаксимальнаяЦена);
				КонецЦикла;
				
				СтрокаТовара.МаксимальнаяЦена = МаксимальнаяЦена;
				СтрокаТовара.КоличествоФСС = КоличествоПоСертификату;
				СтрокаТовара.СуммаФСС = СуммаПоСертификату;
				СтрокаТовара.ЦенаФСС =
					?(КоличествоПоСертификату = 0, СуммаПоСертификату, Окр(СуммаПоСертификату/КоличествоПоСертификату, 2));
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВывестиПредварительноеОдобрениеНСПКНаПечать();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовкиОплаты()
	
	ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	
	Если ЭтоВозврат Тогда
		ЗаголовокОплаты = НСтр("ru = 'Вернуть'");
	Иначе
		ЗаголовокОплаты = НСтр("ru = 'Пробить чек'");
	КонецЕсли;
	
	Элементы.ПробитьЧекНСПК.Заголовок = ЗаголовокОплаты;

КонецПроцедуры

&НаКлиенте
Функция ЕстьВозможностьОплатыСертификатомНСПК()
	
	ЗаголовокОшибки = НСтр("ru = 'Оплата электронным сертификатом'");
	ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
	
	Если Объект.Оплата.Количество() Тогда
		ТекстОшибки = НСтр("ru = 'Удалите другие виды оплаты из документа. Совместное использование с другими видами оплат не поддерживается.'");
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки, ПараметрыОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	СтрокиДляОплатыЭС = Объект.Товары.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Истина));
	Если СтрокиДляОплатыЭС.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'В документе не выбраны товары из перечня ТРУ, либо у товаров не указан код ТРУ.'");
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки, ПараметрыОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ТекстОшибки = ПроверитьВозможностьОплатыНСПКНаСервере();
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки, ПараметрыОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура НастроитьЭлементыВРежимеПроверкаСертификатаНСПК(РежимОплаты = Истина, ЭтоВозврат = Ложь)
	
	ДобавленаНоваяСтрокаКорзины = Ложь;
	Если РежимОплаты Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПодтверждениеНСПК);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ОбластьОперативногоУправленияЧеком);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатамиНСПК, Истина);
		Если Не ЭтоВозврат Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
		КонецЕсли;
		УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКредитом, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСБП, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаЮКасса, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаБонусами, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ПодготовитьДанныеВыдачиНаличных, Ложь);
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПроверкаНСПК);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeНаличные, Ложь);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПробитияЧекаНСПК);
		
		УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧекНСПК, Ложь);
	Иначе
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЛевоОбщая);
		
		Если Не ЭтоВозврат Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
			НастроитьВидимостьОплатыQRКодом(Истина);
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, ИспользоватьОплатуПлатежнымиКартами);
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeНаличные, ИспользоватьОплатуНаличными);
			
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСБП, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаЮКасса, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКредитом, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаБонусами, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ПодготовитьДанныеВыдачиНаличных, Истина);
		КонецЕсли;
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительноеУправлениеЧеком);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПробитияЧека);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатамиНСПК, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРазделВыдачиНаличных, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Истина);
	КонецЕсли;
	УстановитьДоступностьЭлементаФормы(Элементы.ПроверитьСертификатНСПК, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПредварительноеОдобрениеНСПК()
	
	ТаблицаТоваровФСС.Очистить();
	ЗаполнитьТаблицуТоваровФСС(Объект.Товары);
	ВывестиПредварительноеОдобрениеНСПКНаПечать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоваровФСС(Товары)
	
	Если ЗначениеЗаполнено(ВыбраннаяОрганизация) Тогда
		ТоварныеПозиции = Товары.НайтиСтроки(
			Новый Структура("ВозможнаОплатаЭС, Организация", Истина, ВыбраннаяОрганизация));
	Иначе
		ТоварныеПозиции = Товары.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Истина));
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТоварныеПозиции Цикл
		ТоварныеСтроки = ТаблицаТоваровФСС.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТовара.Номенклатура));
		Если ТоварныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаТоваровФСС.Добавить();
			НоваяСтрока.НомерПозиции = НоваяСтрока.ПолучитьИдентификатор();
			НоваяСтрока.НомерПозицииВозврата = 999;
			НоваяСтрока.Артикул = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовара.Номенклатура, "Код");
			НоваяСтрока.КодТРУ = СтрокаТовара.КодТРУ;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
		Иначе
			НоваяСтрока = ТоварныеСтроки[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + СтрокаТовара.Количество;
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + СтрокаТовара.Сумма;
			НоваяСтрока.Цена =
				?(НоваяСтрока.Количество = 0, НоваяСтрока.Сумма, Окр(НоваяСтрока.Сумма/НоваяСтрока.Количество, 2));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПредварительноеОдобрениеНСПКНаПечать()
	
	Таб = Новый ТабличныйДокумент();
	
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ДанныеПроверкиТоваровФСС");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ЭтоОперацияВозврат = Не ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	Если ЭтоОперацияВозврат Тогда
		ЗаголовокТаблицы = НСтр("ru = 'Товары к возврату на электронный сертификат'");
	Иначе
		ЗаголовокТаблицы = НСтр("ru = 'Товары к оплате электронным сертификатом'");
	КонецЕсли;
	
	УстановитьПараметрМакетаНСПК(ОбластьЗаголовок, "ЗаголовокТаблицы", ЗаголовокТаблицы);
	
	Таб.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	Таб.Вывести(ОбластьШапка);
	
	СуммаЧекФСС = 0;
	Для Каждого СтрокаТоваров Из ТаблицаТоваровФСС Цикл
		
		ОбластьДанныхСтроки = Макет.ПолучитьОбласть("Строка");
		УстановитьПараметрМакетаНСПК(
			ОбластьДанныхСтроки,
			"Наименование",
			СтрШаблон("%1, %2", СтрокаТоваров.Артикул, СокрЛП(СтрокаТоваров.Номенклатура)));
		ОбластьДанныхСтроки.Параметры.Заполнить(СтрокаТоваров);
		Таб.Вывести(ОбластьДанныхСтроки);
		
		СуммаЧекФСС = СуммаЧекФСС + СтрокаТоваров.Сумма;
	КонецЦикла;
	
	ОбластьПодвалФСС = Макет.ПолучитьОбласть("ПодвалФСС");
	УстановитьПараметрМакетаНСПК(ОбластьПодвалФСС, "Сумма", СуммаЧекФСС);
	УстановитьПараметрМакетаНСПК(ОбластьПодвалФСС, "СуммаФСС", СуммаОплаченоСертификатамиНСПК);
	Таб.Вывести(ОбластьПодвалФСС);
	
	Если НЕ ЭтоОперацияВозврат Тогда
		
		ОбластьПрочиеТовары = Макет.ПолучитьОбласть("ПрочиеТовары");
		УстановитьПараметрМакетаНСПК(ОбластьПрочиеТовары, "Сумма", СуммаИтого - СуммаЧекФСС);
		Таб.Вывести(ОбластьПрочиеТовары);
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		УстановитьПараметрМакетаНСПК(ОбластьПодвал, "Сумма", СуммаИтого);
		Таб.Вывести(ОбластьПодвал);
	КонецЕсли;
	
	ТабличныйДокументСертификатНСПК.Очистить();
	ТабличныйДокументСертификатНСПК = Таб;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрМакетаНСПК(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	
	ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьОплатыНСПКНаСервере()
	
	ТекстОшибки = Неопределено;
	ЭлектронныеСертификатыНСПКРМКПереопределяемый.ПроверитьВозможностьОплатыНСПК(ТекстОшибки, ЭтотОбъект);
	Возврат ТекстОшибки;
	
КонецФункции

&НаКлиенте
Процедура ПередатьДанныеФискальногоЧекаНСПК()
	
	ПараметрыОперации = ПолучитьПараметрыФискальнойОперацииНСПКНаСервере(ЧекККМВОбработке);
	Если ПараметрыОперации = Неопределено Тогда
		Сообщение = СтрШаблон(НСтр("ru = 'Отсутствуют данные о фискализации чека: %1'"), СокрЛП(ЧекККМВОбработке));
		ПоказатьПредупреждение(,Сообщение, , НСтр("ru = 'Оплата сертификатом (ФЗ-491)'"));
	Иначе
		ОповещениеМетода = Новый ОписаниеОповещения("ПередатьДанныеФискальногоЧекаНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
		ЭлектронныеСертификатыНСПККлиент.НачатьПередачуДанныхФискальногоЧека(ОповещениеМетода, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФискальнойОперацииНСПКНаСервере(ЧекККМ)
	
	ПараметрыФискальнойОперации = ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК();
	ЭлектронныеСертификатыНСПКРМКПереопределяемый.ЗаполнитьПараметрыФискальнойОперацииНСПК(ПараметрыФискальнойОперации, ЧекККМ);
	
	Возврат ПараметрыФискальнойОперации;
	
КонецФункции

&НаКлиенте
Процедура ПередатьДанныеФискальногоЧекаНСПКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	РезультатПередачи = Новый Структура("Результат, КодРезультата, ОписаниеОшибки", Ложь, 999, "");
	ЗаполнитьЗначенияСвойств(РезультатПередачи, РезультатВыполнения);
	
	Если Не РезультатПередачи.Результат Тогда
		Сообщение = СтрШаблон(
			НСтр("ru = 'При отправке подтверждения операции %1 на сервер НСПК произошла ошибка (код %2):
			|%3'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()),
			ДополнительныеПараметры.ИдентификаторКорзины,
			Строка(РезультатПередачи.КодРезультата),
			РезультатПередачи.ОписаниеОшибки);
			
			ПоказатьПредупреждение(,Сообщение, , НСтр("ru = 'Оплата сертификатом (ФЗ-491)'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОплатуСертификатомНСПКНаКлиенте()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	ЭтоВозвратБезОснования = Ложь;
	Если ЭтоВозврат И НЕ ЗначениеЗаполнено(ЧекККМПродажа) Тогда
		ЭтоВозвратБезОснования = Истина;
		ИдентификаторКорзиныНСПК = Неопределено;
	КонецЕсли;
	
	Если ЭтоВозвратБезОснования Тогда
		
		СтрокиДляОплатыЭС = Объект.Товары.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Ложь));
		Если СтрокиДляОплатыЭС.Количество() > 0 Тогда
			ЗаголовокОшибки = НСтр("ru = 'Оплата электронным сертификатом'");
			ТекстОшибки = НСтр("ru = 'При возврате без основания в документе должны быть выбраны товары только из классификатора ФСС.'");
			ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки);
			Возврат;
		КонецЕсли;
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект,
			Элементы.ГруппаПанельИдентификаторКорзиныНСПК);
		
	Иначе
		ОплатитьСертификатомНСПКНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторыКорзинПокупокНСПКВопрос(Результат, ПараметрыОперации)Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СледующаяОперация", "ПолучениеИдентификаторовКорзинПокупокТСП");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюНСПКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОборудованиеПлатежныеСистемыКлиент.НачатьПолучениеПараметровКарты(ОписаниеОповещения, УникальныйИдентификатор);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторыКорзинПокупокТСП(ХешНомерКарты, СсылкаНаПлатежныйСчет)
	
	ПараметрыОперации = ПолучитьПараметрыОперацииНСПКНаСервере(Объект.КассаККМ, "");
	ПараметрыОперации.ХешНомерКарты = ХешНомерКарты;
	ПараметрыОперации.СсылкаНаПлатежныйСчет = СсылкаНаПлатежныйСчет;
	ПараметрыОперации.КодТовараТРУ = Элементы.Товары.ТекущиеДанные.КодТРУ;
	ОповещениеМетода = Новый ОписаниеОповещения("ПолучитьИдентификаторыКорзинПокупокТСПЗавершение", ЭтотОбъект, ПараметрыОперации);
	ЭлектронныеСертификатыНСПККлиент.НачатьПолучениеСпискаИдентификаторовКорзинПокупокТСП(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторыКорзинПокупокТСПЗавершение(Результат, ПараметрыОперации) Экспорт
	
	Если НЕ (ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Результат")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Результат Тогда
		Если Результат.ИдентификаторыКорзинПокупок.Количество() = 1 Тогда
			ИдентификаторКорзиныНСПК = Результат.ИдентификаторыКорзинПокупок[0].ИдентификаторКорзины;
		ИначеЕсли Результат.ИдентификаторыКорзинПокупок.Количество() > 1 Тогда
			
			ЭлементВыбор = Элементы.ИдентификаторКорзиныНСПК;
			ЭлементВыбор.СписокВыбора.Очистить();
			Для Каждого ИдентификаторКорзины Из Результат.ИдентификаторыКорзинПокупок Цикл
				ЭлементВыбор.СписокВыбора.Вставить(0, ИдентификаторКорзины.ИдентификаторКорзины, Строка(ИдентификаторКорзины.ДатаАвторизации));
			КонецЦикла;
			ЭлементВыбор.КнопкаВыпадающегоСписка = Истина;
			ЭлементВыбор.ПодсказкаВвода = Нстр("ru='Выберите ИД продажи'");
			
		КонецЕсли;
			
	Иначе
		
		ТекстСообщения =
			СтрШаблон(НСтр("ru='Ошибка: (%1) %2'"), Результат.КодРезультата, Результат.ОписаниеОшибки);
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСертификатыЭСНСПК(ХешНомерКарты, СсылкаНаПлатежныйСчет)
	
	ПараметрыОперации = ПолучитьПараметрыОперацииНСПКНаСервере(Объект.КассаККМ, "");
	ПараметрыОперации.ХешНомерКарты = ХешНомерКарты;
	ПараметрыОперации.СсылкаНаПлатежныйСчет = СсылкаНаПлатежныйСчет;
	ОповещениеМетода = Новый ОписаниеОповещения("ПолучитьСертификатыЭСНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
	ЭлектронныеСертификатыНСПККлиент.НачатьПолучениеСпискаСертификатов(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСертификатыЭСНСПКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ (ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Результат")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Результат Тогда
		Если Результат.ДоступныеСертификаты.Количество() > 0 Тогда
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("ДоступныеСертификаты", Результат.ДоступныеСертификаты);
			ОткрытьФорму("ОбщаяФорма.ПодборСертификатовЭСНСПК", ПараметрыОткрытияФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	Иначе
		
		ТекстСообщения =
			СтрШаблон(НСтр("ru='Ошибка: (%1) %2'"), Результат.КодРезультата, Результат.ОписаниеОшибки);
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТоварыЭСНСПК(ХешНомерКарты, СсылкаНаПлатежныйСчет)
	
	ПараметрыОперации = ПолучитьПараметрыОперацииНСПКНаСервере(Объект.КассаККМ, "");
	ПараметрыОперации.ХешНомерКарты = ХешНомерКарты;
	ПараметрыОперации.СсылкаНаПлатежныйСчет = СсылкаНаПлатежныйСчет;
	ОповещениеМетода = Новый ОписаниеОповещения("ПолучитьТоварыЭСНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
	ЭлектронныеСертификатыНСПККлиент.НачатьПолучениеСпискаСертификатов(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТоварыЭСНСПКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ (ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Результат")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Результат Тогда
		Если Результат.ТоварныеПозиции.Количество() > 0 Тогда
			
			МассивТРУ = Новый Массив;
			
			Для Каждого Товар Из Результат.ТоварныеПозиции Цикл
				МассивТРУ.Добавить(Товар.КодТовараТРУ);
			КонецЦикла;
			
			ЗаполнитьНоменклатуруПоТРУ(МассивТРУ);
			
		КонецЕсли;
	Иначе
		
		ТекстСообщения =
			СтрШаблон(НСтр("ru='Ошибка: (%1) %2'"), Результат.КодРезультата, Результат.ОписаниеОшибки);
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьНоменклатуруПоТРУ(МассивТРУ) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьНоменклатуруПоТРУ(ЭтотОбъект, МассивТРУ);
КонецПроцедуры
#КонецОбласти

#Область SMSПодтверждениеНомераТелефона

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПроверкиПоSMSКоду()
	
	ПараметрыПроверкиПоSMS = Новый Структура();
	ПараметрыПроверкиПоSMS.Вставить("КодПодтверждения", "");
	ПараметрыПроверкиПоSMS.Вставить("ВариантПроверки", "");
	ПараметрыПроверкиПоSMS.Вставить("ПопытокВвода", 0);
	
	Возврат ПараметрыПроверкиПоSMS;
	
КонецФункции

&НаКлиенте
Процедура ПереключитьНаСтраницуВводаКодаSMS(ПриОплатеБонусами = Ложь, ПриЗаведенииКарты = Ложь)
	
	Если ПриЗаведенииКарты Тогда
		
		ПараметрыВводаКодаSMS = ПараметрыПроверкиПоSMSКоду();
		ПараметрыВводаКодаSMS.ВариантПроверки = "ПриЗаведенииКарты";
		
	Иначе
		
		Если ПараметрыВводаКодаSMS = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	
	ПоказатьКнопкуОтправитьСМС = Истина;
	Если ВертикальнаяОриентация Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ОтменитьЗаведениеКарты, Ложь);
		Если ПриЗаведенииКарты Тогда
			ПоказатьКнопкуОтправитьСМС = Ложь;
			УстановитьВидимостьЭлементаФормы(Элементы.СоздатьКарту, Ложь);
			ИнтерфейсРМКСлужебныйКлиентСервер.ВключитьДополнительнуюКоманднуюПанельУправленияЧеком(Элементы.ГруппаКомандПодтверждениеСозданияКарты);
		КонецЕсли;
	Иначе
		УстановитьВидимостьЭлементаФормы(Элементы.ОтменитьЗаведениеКарты, ПриЗаведенииКарты);
	КонецЕсли;
	УстановитьВидимостьЭлементаФормы(Элементы.ОтправитьSMSСКодомПроверки, ПоказатьКнопкуОтправитьСМС);
	
	Если ПараметрыВводаКодаSMS.ВариантПроверки = "ПриВыборе" Тогда
		ВвестиДанныеПокупателяКлиент();
	ИначеЕсли ПараметрыВводаКодаSMS.ВариантПроверки = "ПриОплатеБонусами" Тогда
		Если ПриОплатеБонусами Тогда
			ВвестиДанныеПокупателяКлиент();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ЗакрытьФормуДанныеПокупателя, ПриОплатеБонусами);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборМеню, Ложь);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПодтверждениеСМС);
	
	НастроитьЦифровуюПанель();
	
	УстановитьДоступностьГруппыСозданияРеквизитов(Ложь);
	
	СформироватьСообщениеИОтправитьSMS();
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияВведенныйИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Введено4Цифры = СтрДлина(СокрЛП(Текст)) = 4;
	
	Если Введено4Цифры Тогда
		
		ТекущийЭлемент = Элементы.ОтправитьSMSСКодомПроверки;
		КодПроверкиИзSMS = Текст;
		ПроверитьВведенныйКодИзSMS();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВведенныйКодИзSMS()
	
	Если ПараметрыВводаКодаSMS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КодПроверкиИзSMS = ПараметрыВводаКодаSMS.КодПодтверждения Тогда
		
		ЗаголовокСообщения = НСтр("ru='Верный код.'");
		ТекстПояснения = НСтр("ru='Номер телефона подтвержден.'");
		КартинкаСообщения = БиблиотекаКартинок.Успешно32;
		ПоказатьОповещениеПользователя(ЗаголовокСообщения, , ТекстПояснения , КартинкаСообщения);
		
		УстановитьДоступностьЭлементаФормы(Элементы.ЗакрытьФормуДанныеПокупателя, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборМеню, Истина);
		
		Если ПараметрыВводаКодаSMS.ВариантПроверки = "ПриЗаведенииКарты" Тогда
			СоздатьКартуКлиент();
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПустаяДополнительнаяГруппа);
			Если ВертикальнаяОриентация Тогда
				ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительнаяКоманднаяПанельПустая);
			КонецЕсли;
		ИначеЕсли ПараметрыВводаКодаSMS.ВариантПроверки = "ПриВыборе" Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ДополнительнаяГруппаКартаНайдена);
		ИначеЕсли ПараметрыВводаКодаSMS.ВариантПроверки = "ПриОплатеБонусами" Тогда
			ОплатитьБонусамиКлиент();
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПустаяДополнительнаяГруппа);
		КонецЕсли;
		
		ПараметрыВводаКодаSMS = Неопределено;
		Элементы.ОплатитьБонусами.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		
		НастроитьЦифровуюПанель();
		
	Иначе
		
		ЗаголовокСообщения = НСтр("ru='Неверный код.'");
		ТекстПояснения = НСтр("ru='Повторите ввод кода или отправьте SMS повторно или отмените ввод карты.'");
		КартинкаСообщения = БиблиотекаКартинок.Ошибка32;
		ПоказатьОповещениеПользователя(ЗаголовокСообщения, ,ТекстПояснения , КартинкаСообщения);
		
		Попыток = ПараметрыВводаКодаSMS.ПопытокВвода;
		Попыток = Попыток + 1;
		ПараметрыВводаКодаSMS.ПопытокВвода = Попыток;
		
		ПодсказкаПоляВводаКода = Элементы.КодПроверкиИзSMSРасширеннаяПодсказка;
		ПодсказкаПоляВводаКода.Заголовок = НСтр("ru='Неверный код'");
		ПодсказкаПоляВводаКода.ЦветТекста = ЦветаФормы.ОсобыйТекст;
		
		ТекущийЭлемент = Элементы.КодПроверкиИзSMS;
		КодПроверкиИзSMS = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСообщениеИОтправитьSMS()
	
	ПодсказкаПоляВводаКода = Элементы.КодПроверкиИзSMSРасширеннаяПодсказка;
	ПодсказкаПоляВводаКода.Заголовок = НСтр("ru='Введите код из SMS'");
	ПодсказкаПоляВводаКода.ЦветТекста = ЦветаФормы.Авто;
	
	РезультатОтправкиSMS = СформироватьСообщениеИОтправитьSMSСервер();
	
	Если РезультатОтправкиSMS.Результат Тогда
		
		ТекстПояснения = НСтр("ru='Введите код из SMS для подтверждения'");
		ЗаголовокСообщения = СтрШаблон(НСтр("ru='SMS с кодом отправлено на номер %1'"), РезультатОтправкиSMS.НомерТелефона);
		КартинкаСообщения = БиблиотекаКартинок.ОтправитьSMS;
		
	Иначе
		
		ТекстПояснения = РезультатОтправкиSMS.ОписаниеОшибки;
		ЗаголовокСообщения = СтрШаблон(НСтр("ru='Ошибка отправки SMS на номер %1'"), РезультатОтправкиSMS.НомерТелефона);
		КартинкаСообщения = БиблиотекаКартинок.Ошибка32;
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ЗаголовокСообщения, , ТекстПояснения, КартинкаСообщения);
	КодПроверкиИзSMS = "";
	ТекущийЭлемент = Элементы.КодПроверкиИзSMS;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСообщениеИОтправитьSMSСервер()
	
	КодПодтверждения = СлучайноеЧетырехзначноеЧисло();
	
	ПараметрыВводаКодаSMS.КодПодтверждения = КодПодтверждения;
	ПараметрыВводаКодаSMS.ПопытокВвода = 0;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КодПодтверждения", КодПодтверждения);
	
	Если ПараметрыВводаКодаSMS.ВариантПроверки = "ПриЗаведенииКарты" Тогда
		
		ШаблонСообщения = ТекущаяНастройкаРМК.ШаблонSMSПриЗаведенииКарты;
		НомерТелефонаПолучателя = НоваяКартаТелефон;
		
	ИначеЕсли ПараметрыВводаКодаSMS.ВариантПроверки = "ПриОплатеБонусами" Тогда
		
		ШаблонСообщения = ТекущаяНастройкаРМК.ШаблонSMSПриСписанииБонусов;
		НомерТелефонаПолучателя = НайденнаяКартаТелефон;
		
	Иначе
		
		ШаблонСообщения = ТекущаяНастройкаРМК.ШаблонSMSПриПродаже;
		НомерТелефонаПолучателя = НайденнаяКартаТелефон;
		
	КонецЕсли;
	
	ТекстСообщения = "";
	ОбщегоНазначенияРМКПереопределяемый.СформироватьТекстСообщения(ШаблонСообщения,
		ДополнительныеПараметры,
		ТекстСообщения);
	
	РезультатОтправки = ОтправитьSMS(ТекстСообщения, НомерТелефонаПолучателя);
	
	Возврат РезультатОтправки;
	
КонецФункции

// Отправляет SMS сообщение на указанный номер телефона.
//
// Параметры:
//  ТекстСообщения - Строка - Текст SMS.
//  НомерТелефона - Строка - Номер телефона получателя.
//
// Возвращаемое значение:
//  РезультатОтправки - Структура со свойствами:
//   Результат - Булево - Истина при успешной отправке.
//   ОписаниеОшибки - Строка - Текст ошибки.
//   НомерТелефона - Строка - Номер телефона получателя.
//
&НаСервереБезКонтекста
Функция ОтправитьSMS(ТекстСообщения, НомерТелефона)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОтправки = Новый Структура;
	РезультатОтправки.Вставить("Результат", Ложь);
	РезультатОтправки.Вставить("ОписаниеОшибки", "");
	РезультатОтправки.Вставить("НомерТелефона", НомерТелефона);
	
	Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
		РезультатОтправки.ОписаниеОшибки =
			НСтр("ru = 'Не сформирован текст сообщения для отправки.'");
		Возврат РезультатОтправки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		
		МассивНомеров = Новый Массив;
		МассивНомеров.Добавить(НомерТелефона);
		ОбщегоНазначенияРМКПереопределяемый.ОтправитьSMS(МассивНомеров, ТекстСообщения, РезультатОтправки);
		
	Иначе
		РезультатОтправки.ОписаниеОшибки =
			НСтр("ru = 'Для владельца карты не задан номер телефона. Выслать код подтверждения не удалось'");
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Возвращает случайное число.
//
// Возвращаемое значение:
//  Строка - число в формате от 0 до 9999.
//
&НаСервереБезКонтекста
Функция СлучайноеЧетырехзначноеЧисло()
	
	Генератор = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	СлучайноеЧисло = Генератор.СлучайноеЧисло(0, 9999);
	
	Если СлучайноеЧисло < 1000 Тогда
		СлучайноеЧислоСтрокой = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(СлучайноеЧисло), 4, "0");
	Иначе
		СлучайноеЧислоСтрокой = Формат(СлучайноеЧисло, "ЧГ=0");
	КонецЕсли;
	
	Возврат СлучайноеЧислоСтрокой;
	
КонецФункции

#КонецОбласти

#Область ЗаменаТоваров

&НаКлиенте
Процедура НастроитьЭлементыВРежимеЗаменаТоваров()
	
	СформироватьЗаголовок(НСтр("ru='Замена товаров'"));
	
	ПереключитьНаСледующийЧек("НаСледующий");
	Элементы.Товары.ОтборСтрок = Неопределено;
	
	СуммаОплаченоНал = 0;
	СуммаОплаченоБН = 0;
	
	СуммаОплаченоЗачетАванса = 0;
	СуммаОплаченоБезнал = 0;
	
	Элементы.СуммаОплаченоНал.Подсказка = НСтр("ru = 'Наличные'");
	Элементы.СуммаОплаченоБН.Подсказка = НСтр("ru = 'Карта'");
	Элементы.СуммаОплаченоБонусами.Подсказка = НСтр("ru = 'Бонусы'");
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКредитом, Ложь);
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		
		СтрокаТоваров.ТоварКЗамене = Истина;
		
	КонецЦикла;
	
	Если СуммаОплаченоВРассрочку > 0 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыНаличными, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыКартой, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСБП, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаЮКасса, Ложь);
		СуммаОплаченоВРассрочку = 0;
	КонецЕсли;
	
	ЭтоЗаменаТоваров = Истина;
	НастроитьЭлементыВРежимеПродажа();
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, Истина);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыНСПК, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиРасчетаСкидок, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ОтложитьЧек, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeНаличные, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьРассчитанныеСкидки, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборТоваровПрикладнаяФорма

&НаКлиенте
Процедура ОбработкаПодбораТоваров(РезультатПодбора, ДополнительныПараметры) Экспорт
	
	Если ТипЗнч(РезультатПодбора) = Тип("Структура")
		И РезультатПодбора.Свойство("АдресКорзиныВХранилище")
		И ЗначениеЗаполнено(РезультатПодбора.АдресКорзиныВХранилище) Тогда
		
		ОбработкаПодбораТоваровНаСервере(РезультатПодбора);
		СформироватьЗаголовок();
		УстановитьАктивностьСтроки();
		ПересчитатьИтогиТабличнойЧастиТовары();
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
		АктуализироватьКорзинуПоДаннымОграниченийПродаж();
		ЕстьНезаполненныеДанные = ЕстьНезаполненныеДанные();
		ОбработатьИзменениеТаблицыТоваровНаКлиенте(Не ЕстьНезаполненныеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораТоваровНаСервере(РезультатПодбора)
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПоПодборуТоваров(РезультатПодбора, ЭтотОбъект);
	ДополнитьСведенияОНоменклатуре();
	ОбработкаПодбораНаборовЗавершение();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораНаборовЗавершение()
	
	СтрокиНаборов = Объект.Товары.НайтиСтроки(Новый Структура("ЭтоНабор, НомерНабора", Истина, 0));
	
	Для каждого СтрокаТовара Из СтрокиНаборов Цикл
		Если СтрокаТовара.ЭтоНабор Тогда
			ДанныеНабора = Новый Структура();
			ДанныеНабора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			ДанныеНабора.Вставить("Характеристика", СтрокаТовара.Характеристика);
			ДанныеНабора.Вставить("Цена", СтрокаТовара.Цена);
			Для к = 1 По СтрокаТовара.КоличествоУпаковок Цикл
				ДобавитьНаборВТабличнуюЧасть(ДанныеНабора);
			КонецЦикла;
		КонецЕсли;
		Объект.Товары.Удалить(СтрокаТовара);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ЗаявлениеНаВозврат

&НаКлиенте
Процедура ВвестиПерсональныеДанныеЗаявителя()
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ЗаголовокПредупреждения = НСтр("ru = 'Печать заявления на возврат'");
		ТекстПредупреждения = НСтр("ru = 'Пожалуйста, заполните перечень возвращаемых товаров.'");
		ПоказатьПредупреждение(, ТекстПредупреждения, , ЗаголовокПредупреждения);
		Возврат;
	
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ПараметрыОткрытия.Вставить("ДисконтнаяКартаКлиента", Объект.ДисконтнаяКарта);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЗаявленияНаВозвратЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВводаДанныхДляЗаявления",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПечатьЗаявленияНаВозвратЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		СведенияЗаявителя = Результат;
		
		ДанныеЗаявленияНаВозврат = ДанныеЗаявленияНаВозврат(СведенияЗаявителя);
		СформироватьЗаявлениеНаВозврат(ДанныеЗаявленияНаВозврат);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ДанныеЗаявленияНаВозврат(ИсходныеДанные)

	СведенияЗаявления = ОбщегоНазначенияРМККлиент.СтруктураЗаявленияНаВозврат();
	
	ТабличнаяЧастьЗаявления = Новый Массив();
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
	
		ДанныеСтроки = ОбщегоНазначенияРМККлиент.СтрокаЗаявленияНаВозврат();
		ДанныеСтроки.Номер = СтрокаТоваров.НомерСтроки;
		ДанныеСтроки.Номенклатура = СтрокаТоваров.ПредставлениеНоменклатураХарактеристика;
		ДанныеСтроки.Количество = СтрокаТоваров.Количество;
		ДанныеСтроки.ПредставлениеЕдиницыИзмерения = СтрокаТоваров.ПредставлениеЕдиницыИзмерения;
		ДанныеСтроки.Сумма = СтрокаТоваров.Сумма;
		ТабличнаяЧастьЗаявления.Добавить(ДанныеСтроки);
	
	КонецЦикла;
	
	СведенияЗаявления.Товары = ТабличнаяЧастьЗаявления;
	СведенияЗаявления.ФИОПокупателя = ИсходныеДанные.ФИОПокупателя;
	СведенияЗаявления.ДатаРождения = ИсходныеДанные.ДатаРождения;
	СведенияЗаявления.УдостоверениеЛичности = ИсходныеДанные.УдостоверениеЛичности;
	СведенияЗаявления.СуммаДокумента = СуммаИтого;
	СведенияЗаявления.ЧекПродажи = ЧекККМПродажа;
	СведенияЗаявления.Магазин = Объект.ТорговыйОбъект;
	СведенияЗаявления.ЧекНомер = 0;
	СведенияЗаявления.ЧекДата = Дата(1, 1, 1);
	СведенияЗаявления.Кому = ИсходныеДанные.Кому;
	СведенияЗаявления.ФИОРуководителя = ИсходныеДанные.ФИОРуководителя;
	СведенияЗаявления.ОтКого = ИсходныеДанные.ФИОПокупателя;
	СведенияЗаявления.Дата = Дата(1, 1, 1);
	
	Возврат СведенияЗаявления;
	
КонецФункции

&НаКлиенте
Процедура СформироватьЗаявлениеНаВозврат(ДанныеЗаявленияНаВозврат)
	
	ИдентификаторПечатнойФормы = "ЗаявлениеНаВозврат";
	МодульУправлениеПечатьюКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеПечатьюКлиент");
	КоллекцияПечатныхФорм = МодульУправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	СформироватьЗаявлениеНаВозвратСервер(ДанныеЗаявленияНаВозврат, КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ОбластиОбъектов = Новый СписокЗначений;
	МодульУправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьЗаявлениеНаВозвратСервер(ДанныеЗаявленияНаВозврат, КоллекцияПечатныхФорм,
	ИдентификаторПечатнойФормы)
	
	ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат);
	Макет = ОбщегоНазначенияРМК.МакетЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат);
	БуферКоллекцииПечатныхФорм = ПодготовитьКоллекциюПечатныхФорм(ИдентификаторПечатнойФормы);
	СинонимМакета = НСтр("ru = 'Заявление на возврат'");
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(БуферКоллекцииПечатныхФорм,
		"ЗаявлениеНаВозврат",
		СинонимМакета,
		Макет, ,
		"ОбщийМакет.ПФ_MXL_ЗаявлениеНаВозвратРМК");
	
	Если БуферКоллекцииПечатныхФорм.Количество() > 0
		И КоллекцияПечатныхФорм.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(КоллекцияПечатныхФорм[0], БуферКоллекцииПечатныхФорм[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьКоллекциюПечатныхФорм(Знач Идентификаторы)
	
	Результат = ОбщегоНазначенияРМК.ПодготовитьКоллекциюПечатныхФорм(Идентификаторы);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат)
	ОбщегоНазначенияРМК.ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат);
КонецПроцедуры

#КонецОбласти

#Область ПродажаСВыдачейНаличных

&НаКлиенте
Процедура ЗаменитьЧекВыдачиНаличныхНаЧекВозвратаНаКлиенте(СсылкаНаЧекВыдачиНаличных, ЧекПродажиПриВыдачеНаличных,
	НомерЧекаККМ, НомерСменыККМ, ПараметрыЭквайринговойОперации)
		ЗаменитьЧекВыдачиНаличныхНаЧекВозвратаСервер(СсылкаНаЧекВыдачиНаличных, ЧекПродажиПриВыдачеНаличных,
			НомерЧекаККМ, НомерСменыККМ, ПараметрыЭквайринговойОперации);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоОшибкаФискализацииЧекаВыдачиВПакетномРежиме(ДанныеПакетнойОперации)

	Возврат ЕстьСвойство(ДанныеПакетнойОперации, "РезультатФискализацииЧека")
			И ЕстьСвойство(ДанныеПакетнойОперации.РезультатФискализацииЧека, "Результат")
			И ДанныеПакетнойОперации.РезультатФискализацииЧека.Результат
			И ЕстьСвойство(ДанныеПакетнойОперации, "РезультатВыполненияЭквайринговойОперации")
			И ЗначениеЗаполнено(ДанныеПакетнойОперации.РезультатВыполненияЭквайринговойОперации)
			И ЕстьСвойство(ДанныеПакетнойОперации, "ПараметрыЭквайринговойОперации")
			И ЗначениеЗаполнено(ДанныеПакетнойОперации.ПараметрыЭквайринговойОперации)
			И ЕстьСвойство(ДанныеПакетнойОперации, "РезультатФискализацииЧекаВыдачи")
			И ЗначениеЗаполнено(ДанныеПакетнойОперации.РезультатФискализацииЧекаВыдачи)
			И НЕ ДанныеПакетнойОперации.РезультатФискализацииЧекаВыдачи.Результат;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаменитьЧекВыдачиНаличныхНаЧекВозвратаСервер(СсылкаНаЧекВыдачиНаличных, ЧекПродажиПриВыдачеНаличных,
	НомерЧекаККМ, НомерСменыККМ, ПараметрыЭквайринговойОперации)
		ОбщегоНазначенияРМК.ЗаменитьЧекВыдачиНаЧекВозврата(СсылкаНаЧекВыдачиНаличных,
			ЧекПродажиПриВыдачеНаличных, НомерЧекаККМ, НомерСменыККМ, ПараметрыЭквайринговойОперации);
КонецПроцедуры
	
#КонецОбласти

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НастроитьГруппуДанныеДляТекущейСтроки(ТекущаяСтрока)
	
	УказанОтветственныйЗаПродажу = ЗначениеЗаполнено(ТекущаяСтрока.Продавец);
	Если УказанОтветственныйЗаПродажу Тогда
		АктивнаяСтраница = Элементы.СтраницаПродавецВыбран;
		ТекущийПродавец = СтрШаблон("%1 %2", НСтр("ru = 'Продавец:'"), ТекущаяСтрока.Продавец);
	Иначе
		АктивнаяСтраница = Элементы.СтраницаДобавлениеПродавца;
		ТекущийПродавец = "";
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(АктивнаяСтраница);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаПродавецВыбран, УказанОтветственныйЗаПродажу);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеПродавца, НЕ УказанОтветственныйЗаПродажу);
	
	Если ИспользоватьВыборСкладаПриПродаже Тогда
		
		СкладУказан = ЗначениеЗаполнено(ТекущаяСтрока.ТорговыйОбъект);
		Если СкладУказан Тогда
			АктивнаяСтраница = Элементы.СтраницаСкладВыбран;
			ТекущийСклад = СтрШаблон("%1 %2", НСтр("ru = 'Склад:'"), ТекущаяСтрока.ТорговыйОбъект);
		Иначе
			АктивнаяСтраница = Элементы.СтраницаДобавлениеСклада;
			ТекущийСклад = "";
		КонецЕсли;
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(АктивнаяСтраница);
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаСкладВыбран, СкладУказан);
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеСклада, Не СкладУказан);
		
		ЯчейкаУказана = ЗначениеЗаполнено(ТекущаяСтрока.Ячейка);
		Если ЯчейкаУказана Тогда
			АктивнаяСтраница = Элементы.СтраницаЯчейкаВыбрана;
			ТекущаяЯчейка = СтрШаблон("%1 %2", НСтр("ru = 'Ячейка:'"), ТекущаяСтрока.Ячейка);
		Иначе
			АктивнаяСтраница = Элементы.СтраницаДобавлениеЯчейки;
			ТекущаяЯчейка = "";
		КонецЕсли;
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(АктивнаяСтраница);
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаЯчейкаВыбрана, ЯчейкаУказана);
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеЯчейки, Не ЯчейкаУказана);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьГруппуПримененныеУправляемыеСкидки(ТекущаяСтрока) 
	
	ГруппаУправляемыхСкидок = Элементы.Найти("ГруппаПримененныеУправляемыеСкидки");
	Если Не ГруппаУправляемыхСкидок = Неопределено И Не ГруппаУправляемыхСкидок.Видимость Тогда
		// Управлямые скидки не доступны
		Возврат;
	КонецЕсли;	
	ИдентификаторыСкрытыхСтрокСкидок = Новый Массив;
	ИдентификаторыВидимыхСтрокСкидок = Новый Массив;
	ИдентификаторТекущейСтрокиТовара = ТекущаяСтрока.ИдентификаторСтроки;
	Для Каждого СтрокаСкидки Из ТаблицаВыбранныхУправляемыхСкидок Цикл
		Если ЗначениеЗаполнено(СтрокаСкидки.ИдентификаторСтроки) 
			И СтрокаСкидки.ИдентификаторСтроки <> ИдентификаторТекущейСтрокиТовара Тогда
			ИдентификаторыСкрытыхСтрокСкидок.Добавить(СтрокаСкидки.ПолучитьИдентификатор());
		Иначе
			ИдентификаторыВидимыхСтрокСкидок.Добавить(СтрокаСкидки.ПолучитьИдентификатор());
		КонецЕсли;		
	КонецЦикла;
	ЦелеваяВидимость = Ложь;
	Для Каждого ИдентификаторСкрыть Из ИдентификаторыСкрытыхСтрокСкидок Цикл
		ГруппаТекущейСкидки = Элементы.Найти("ГруппаПримененныеУправляемыеСкидки_"+ИдентификаторСкрыть);
		Если Не ГруппаТекущейСкидки = Неопределено И Не ГруппаТекущейСкидки.Видимость = ЦелеваяВидимость Тогда
			ГруппаТекущейСкидки.Видимость = ЦелеваяВидимость;
		КонецЕсли;
	КонецЦикла;
	ЦелеваяВидимость = Истина;
	Для Каждого ИдентификаторПоказать Из ИдентификаторыВидимыхСтрокСкидок Цикл
		ГруппаТекущейСкидки = Элементы.Найти("ГруппаПримененныеУправляемыеСкидки_"+ИдентификаторПоказать);
		Если Не ГруппаТекущейСкидки = Неопределено И Не ГруппаТекущейСкидки.Видимость = ЦелеваяВидимость Тогда
			ГруппаТекущейСкидки.Видимость = ЦелеваяВидимость;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыборПродавцаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Продавец = Результат;
	Если ТекущиеДанные.ЭтоНабор Тогда
		НомерНабора = ТекущиеДанные.НомерНабора;
		ЗаполнитьПродавцаВНаборе(Продавец, НомерНабора);
	Иначе
		ТекущиеДанные.Продавец = Продавец;
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаПродавецВыбран, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеПродавца, Ложь);
	ТекущийПродавец = СтрШаблон("%1 %2", НСтр("ru = 'Продавец:'"), Продавец);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПродавецВыбран);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПродавцаВНаборе(Продавец, НомерНабора)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерНабора", НомерНабора);
	МассивТоваров = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если МассивТоваров.Количество() > 0 Тогда
		Для Каждого СтрокаМассива Из МассивТоваров Цикл
			СтрокаМассива.Продавец = Продавец;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВНаборе(Склад, НомерНабора)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерНабора", НомерНабора);
	МассивТоваров = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если МассивТоваров.Количество() > 0 Тогда
		Для Каждого СтрокаМассива Из МассивТоваров Цикл
			СтрокаМассива.ТорговыйОбъект = Склад;
			ДанныеСтроки = Новый Структура("Номенклатура, Характеристика, ТорговыйОбъект, КоличествоОстаток", 
				СтрокаМассива.Номенклатура, СтрокаМассива.Характеристика, СтрокаМассива.ТорговыйОбъект, СтрокаМассива.КоличествоОстаток);
			ЗаполнитьОстатокСтрокиНаСервере(ДанныеСтроки);
			СтрокаМассива.КоличествоОстаток = ДанныеСтроки.КоличествоОстаток;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЯчейкуВНаборе(Ячейка, НомерНабора)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерНабора", НомерНабора);
	МассивТоваров = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если МассивТоваров.Количество() > 0 Тогда
		Для Каждого СтрокаМассива Из МассивТоваров Цикл
			СтрокаМассива.Ячейка = Ячейка;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуОплат()
	ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьТаблицуОплат(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыОплаты()
	
	СуммаИтого = СуммаБезСкидки - СуммаСкидки - СуммаБонусов;
	СуммаЗаполненныхОплат = СуммаОплаченоНал + СуммаОплаченоБН + СуммаОплаченоБезнал + СуммаОплаченоВРассрочку 
		+ СуммаОплаченоЗачетАванса + СуммаОплаченоСертификатами + СуммаОплаченоСБП + СуммаОплаченоЮКасса 
		+ СуммаОплаченоСертификатамиНСПК + СуммаТоваровКЗамене + СуммаОплаченоКредитом;
	СуммаКОплатеВсего = СуммаИтого - СуммаЗаполненныхОплат;
	
	СуммаКОплате = СуммаКОплатеВсего;
	Сдача = ?(СуммаОплаченоНал = 0, 0, ?(СуммаКОплатеВсего >0, 0, -1 * СуммаКОплатеВсего));
	
	ОбновитьМаксимальныеСуммыСертификатов();
	АктуализироватьИзменениеЭтапаРаботыСЧекомПриИзмененииОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовок(ТекстЗаголовка = "")
	ОбщегоНазначенияРМККлиентПереопределяемый.СформироватьЗаголовокПрограммы(ТекстЗаголовка, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыбратьПользователяДоЗаменыПрав();
	
	Если Результат = Неопределено Тогда
		
		ЭтоЧекКоррекции = Ложь;
		ТекущаяОперация = "";
		
		Если НачинатьНовыйЧекВРежимеСкупка Тогда
			ОформитьРежимНовогоЧека("Скупка");
		Иначе
			ОформитьРежимНовогоЧека("Продажа");
		КонецЕсли;
		
	Иначе
		
		ЭтоВозвратПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
		ЭтоВозвратСкупки = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозвратСкупки(Объект.ВидОперации);
		
		Если ЕстьСвойство(Результат, "ЧекККМ") Тогда
			ТекущаяОперация = "";
			ЗаполнитьНаОснованииЧекаККМ(Результат.ЧекККМ);
			Если (Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта))
					И ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыКартыЗаполнены(ПараметрыКартыЛояльности) Тогда
				
				ДозаполнитьДанныеКартыССервераЛояльности();
				
			КонецЕсли;
			ИзменитьКартинкуВводПокупателя();
			УстановитьАктивностьСтроки();
			ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
			НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
			
			Если ЭтоВозвратПродажи Тогда
				
				ПроверитьВозможностьВозвратаВПлатежнойСистемеПродажи();
				НастроитьЭлементыВРежимеВозврат();
				
			ИначеЕсли ЭтоЧекКоррекции Тогда
				НастроитьЭлементыВРежимеВозврат();
			ИначеЕсли ЭтоВозвратСкупки Тогда
				НастроитьЭлементыВРежимеВозвратСкупки();
			Иначе
			КонецЕсли;
			
			ПерерасчитатьСуммыОплаты();
			РассчитатьСуммыОплаты();
			НастроитьДоступностьПробитьЧек();
			ПереключитьВРежимОплатыНаКлиенте(, Ложь);
			
		Иначе
			
			Если ЭтоВозвратПродажи Тогда
				НастроитьФормуВРежимВозвратБезЧека();
			ИначеЕсли ЭтоВозвратСкупки Тогда
				НастроитьФормуВРежимВозвратСкупкиБезЧека();
			Иначе
			КонецЕсли;
			
		КонецЕсли;
		
		СформироватьЗаголовок();
		УстановитьВидимостьЭлементаФормы(Элементы.РаспечататьЗаявлениеНаВозврат, ЭтоВозвратПродажи);
		
	КонецЕсли;
	
	ТекущаяОперация = "";
	СформироватьЗаголовокВводКассира();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаОснованииЧекаККМ(ЧекПродажи)
	
	ВыбраннаяСистемаНалогообложения = СистемаНалогообложенияЧека(ЧекПродажи);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЧекПродажи, "Организация") Тогда
		ВыбраннаяОрганизация = ЧекПродажи.Организация;
	Иначе
		ВыбраннаяОрганизация = ОсновнаяОрганизация;
	КонецЕсли;
	
	Отбор = Новый Структура("Организация", ВыбраннаяОрганизация);
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	
	ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
	Объект.Организация = СтрокаКассы.Организация;
	Объект.КассаККМ = СтрокаКассы.КассаККМ;
	КассоваяСмена = СтрокаКассы.КассоваяСмена;
	ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
	
	Если ЭтоЧекКоррекции Тогда
		
		СистемаНалогообложенияЧекаКоррекции = СистемаНалогообложенияЧека(ЧекПродажи);
		СНОКассы = СистемыНалогообложенияДоступныеВКассеККМ(ПодключаемоеОборудование);
		СписокВыборкаСНО = Элементы.СистемаНалогообложенияЧекаКоррекции.СписокВыбора;
		СписокВыборкаСНО.Очистить();
		СписокВыборкаСНО.ЗагрузитьЗначения(СНОКассы);
		ОднаСНО = СНОКассы.Количество() = 1;
		УстановитьВидимостьЭлементаФормы(Элементы.СистемаНалогообложенияЧекаКоррекции, НЕ ОднаСНО);
		ЭтоОбщаяСНО = СистемаНалогообложенияЧекаКоррекции = ОбщегоНазначения.ПредопределенныйЭлемент(
			"Перечисление.ТипыСистемНалогообложенияККТ.ОСН");
		УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДС, ЭтоОбщаяСНО);
		УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДСПереключатель, ЭтоОбщаяСНО);
		
	КонецЕсли;
	
	ЗаполнитьДанныеНаОснованииЧекаККМ(ЧекПродажи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогиТабличнойЧастиТовары(ОбнулитьСуммыОплат = Истина)
	
	ПересчитатьКоличествоВПлитках();
	
	СуммаБезСкидки = 0;
	СуммаСкидки = 0;
	СуммаБонусов = 0;
	
	СтрокиТоваров = Объект.Товары.НайтиСтроки(Новый Структура(Элементы.Товары.ОтборСтрок));
	
	Для Каждого СтрокаТовары Из СтрокиТоваров Цикл
		
		Если СтрокаТовары.ТоварКЗамене Или СтрокаТовары.Подарок Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаБезСкидки = СуммаБезСкидки + СтрокаТовары.СуммаБезСкидки;
		СуммаСкидки = СуммаСкидки
			+ СтрокаТовары.СуммаАвтоматическойСкидки
			+ СтрокаТовары.СуммаСкидкиНаценки;
			
		СуммаБонусов = СуммаБонусов + СтрокаТовары.СуммаСкидкиОплатыБонусом;
		
		СтрокаТовары.СуммаСкидокОбщая = СтрокаТовары.СуммаСкидкиНаценки
			+ СтрокаТовары.СуммаАвтоматическойСкидки
			+ СтрокаТовары.СуммаСкидкиОплатыБонусом;
			
		СтрокаТовары.ПроцентСкидкиОбщий = ?(СтрокаТовары.СуммаБезСкидки = 0, 0, СтрокаТовары.СуммаСкидокОбщая/СтрокаТовары.СуммаБезСкидки) * 100;
		
		Если НЕ СтрокаТовары.ПроцентСкидкиОбщий = 0 Тогда
			СтрокаТовары.КартинкаПроцентов = БиблиотекаКартинок.SaleBlack;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаКОплате = СуммаБезСкидки - СуммаСкидки - СуммаБонусов;
	
	СуммаИтого = СуммаКОплате;
	
	Если (РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция)
			И ОбнулитьСуммыОплат И НЕ ОтложенныйЧекПолностьюОплачен Тогда
		
		ОбнулитьПеременныеСуммОплат();
		
	КонецЕсли;
	
	Если СуммаСкидки >= 0 Тогда
		Элементы.СуммаСкидки.Формат = НСтр("ru = 'ЧДЦ=2; ЧН=0,00; ЧФ=''- Ч'''");
	Иначе
		Элементы.СуммаСкидки.Формат = НСтр("ru = 'ЧДЦ=2; ЧН=0,00; ЧО=0; ЧФ=''+ Ч'''");
	КонецЕсли;
	
	ПроверитьПревышениеСуммыЗачетаАванса();
	НастроитьДоступностьПробитьЧек();
	НастроитьЗаголовокКнопкиОплаты();
	НастроитьЗаголовокКнопкиСкидки();
	НастроитьШиринуКолонкиНомерСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетКоличестваТовара(ТекущаяСтрока)
	
	ТекущаяСтрока.Количество = ТекущийТоварКоличество;
	ТекущаяСтрока.КоличествоУпаковок = ТекущийТоварКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(ИдентификаторСтроки = Неопределено)
	
	ТекущаяСтрока = ?((ИдентификаторСтроки <> Неопределено),
		Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки),
		Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор));
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийТоварЦенаИзКарточки = ТекущаяСтрока.Цена;
	
	ПересчитатьСуммы(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДанныеПриИзмененииКоличества(УвеличитьКоличество = Ложь)
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УвеличитьКоличество", УвеличитьКоличество);
	
	Если УвеличитьКоличество Или УменьшениеКоличестваТовараВозможно() Тогда
		ПроверитьПравоИПересчитатьИзменениеКоличества(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтложитьЧекЗавершение(Результат) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ОтложенныйЧек) Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьЧекКлиент();
	
КонецПроцедуры

&НаКлиенте
Функция ПримененыСкидки()

	Возврат СкидкиРассчитаны
		ИЛИ (Элементы.Товары.ТекущиеДанные <> Неопределено И Элементы.Товары.ТекущиеДанные.РассчитанаСкидка);

КонецФункции

&НаСервере
Процедура ПродолжитьЧек()
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДанныеИзОтложенногоЧека(ЭтотОбъект, ОтложенныйЧек);
	ДополнитьСведенияОНоменклатуре();
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект) Тогда
		
		НайденнаяКартаЛояльности = Неопределено;
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(Объект.ДисконтнаяКарта, НайденнаяКартаЛояльности);
		ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(Объект.Контрагент, НайденнаяКартаЛояльности);
		Иначе
			НайденнаяКартаЛояльности = ЭтотОбъект.ПараметрыКартыЛояльности;
		КонецЕсли;
		
		Если НЕ НайденнаяКартаЛояльности = Неопределено Тогда
			ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, НайденнаяКартаЛояльности);
		КонецЕсли;
			
	КонецЕсли;
	
	Если Объект.Оплата.Количество() > 0 Тогда
		Для Каждого Оплата Из Объект.Оплата Цикл
			Если СуммаОплаченоБН <> 0 Тогда
				ТипОплаты = "Карта";
			ИначеЕсли СуммаОплаченоСБП <> 0 Или СуммаОплаченоЮКасса <> 0 Тогда
				ТипОплаты = "СБП";
			ИначеЕсли СуммаОплаченоСертификатамиНСПК <> 0 Тогда
				ТипОплаты = "НСПК";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОтложенныйЧекОбъект = ОтложенныйЧек.ПолучитьОбъект();
	ДокументЗаблокирован = Истина;
	
	Попытка
		ОтложенныйЧекОбъект.Заблокировать();
	Исключение
		
		ДокументЗаблокирован = Ложь;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, ,
			ОтложенныйЧекОбъект,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
	Если ДокументЗаблокирован Тогда
		ОбщегоНазначенияРМКПереопределяемый.УстановитьСтатусЧека(ОтложенныйЧекОбъект);
		ОтложенныйЧекОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли; 
	
	// Промокоды
	СтрокиПромокодов = ТаблицаПримененныхПромокодов.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
	Для Каждого СтрокаПромокода Из СтрокиПромокодов Цикл
		ОписаниеСкидкиПромокода = Строка(СтрокаПромокода.СкидкаНаценка);
		Если Не ЗначениеЗаполнено(СтрокаПромокода.УникальныйИдентификатор) Тогда
			СтрокаПромокода.УникальныйИдентификатор = СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
		КонецЕсли;
		ДобавитьРеквизитыПромокода(СтрокаПромокода.Промокод);
	Конеццикла;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПримененныеПромокоды, СтрокиПромокодов.Количество() > 0);
	// Управляемые скидки
	Для Каждого СтрокаУправляемойСкидки Из ТаблицаВыбранныхУправляемыхСкидок Цикл
		ДобавитьРеквизитыУправляемойСкидки(СтрокаУправляемойСкидки.СкидкаНаценка, СтрокаУправляемойСкидки.ИдентификаторСтроки);
	Конеццикла;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПримененныеУправляемыеСкидки, ТаблицаВыбранныхУправляемыхСкидок.Количество() > 0);
	УстановитьИконкуКомментарияКЧеку(Элементы.ВвестиКомментарийКЧеку, КомментарийКЧеку);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСведенияОНоменклатуре()
	ОбщегоНазначенияРМКПереопределяемый.ДополнитьСведенияОТоварах(ЭтотОбъект);
	ДополнитьСтрокиТовараВычисляемымиДанными();
КонецПроцедуры

&НаСервере
Процедура ОтложитьЧекСервер()
	
	ЧекСоздан = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.СоздатьОтложенныйЧек(ЭтотОбъект, ЧекСоздан);
	
	Если ЧекСоздан И ОжидаемоеКоличествоЧеков <= 1 Тогда
		СоздатьНовыйНабор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйНабор(ПараметрыЗавершения = Неопределено)
	
	Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаПродажа;
	
	Объект.ВидОперации = ОбщегоНазначенияРМК.ВидТекущейОперации();
	Объект.Контрагент = Неопределено;
	Объект.ДисконтнаяКарта = Неопределено;
	Объект.СуммаДокумента = 0;
	Объект.ОперацияСДенежнымиСредствами = Ложь;
	Объект.ДокументРасчета = Неопределено;
	Объект.ЗаказПокупателя = Неопределено;
	
	Если КопированиеПродажи Тогда
		ОчиститьЛишниеДанныеПриКопированииПродажи();
	Иначе
		Объект.Товары.Очистить();
	КонецЕсли;
	Объект.Оплата.Очистить();
	
	ТекущийТоварИдентификатор = 0;
	ТекущийТоварКоличество = 0;
	ТекущийТоварСкидка = 0;
	ТекущийТоварСуммаСкидки = 0;
	ТекущийТоварЦенаИзКарточки = 0;
	
	РежимЗаказа = Ложь;
	Сдача = 0;
	ОплатаБезДеленияПоЧекам = Ложь;
	СдачаПриОшибкеПробитияЧека = 0;
	СуммаБезСкидки = 0;
	СуммаИтого = 0;
	СуммаОплаченоБН = 0;
	СуммаОплаченоНал = 0;
	СуммаОплаченоКредитом = 0;
	ПараметрыОплатыКредитом = Неопределено;
	СуммаОплаченоВРассрочку = 0;
	СуммаОплаченоЗачетАванса = 0;
	СуммаОплаченоСертификатами = 0;
	СуммаОстаткаСертификатов = 0;
	СуммаСертификата = 0;
	СуммаОплаченоСертификатамиНСПК = 0;
	СуммаТоваровКЗамене = 0;
	ПредварительноеОдобрениеНСПКПолучено = Ложь;
	ПримененаСкидкаНаЧек = Ложь;
	ИспользоватьАвтоматическиеСкидки = Ложь;
	КонтрагентВыбран = Ложь;
	ПараметрыКартыЛояльности = Неопределено;
	
	СуммаОплаченоБезнал = 0;
	СуммаОплаченоБонусами = 0;
	СуммаСкидки = 0;
	ЗначениеСкидкиНаЧек = 0;
	СуммаБонусов = 0;
	ТекущийТоварОстаток = "";
	
	УстановитьДоступностьЭлементаФормы(Элементы.ЗначениеСкидкиНаЧек, Истина);
	Элементы.СкидкаНаЧекПроцентом.ЦветФона = ЦветаФормы.Авто;
	Элементы.СкидкаНаЧекСуммой.ЦветФона = ЦветаФормы.Авто;
	
	#Область ОплатаQRКодом_ОбнулениеПараметров
	Объект.Оплачивается = Ложь;
	СуммаОплаченоСБП 						= 0;
	СуммаОплаченоЮКасса						= 0;
	ДокументОплаты 		 						= Неопределено;
	ДокументВозврата 	 						= Неопределено;
	ПлатежнаяСистема_ИдентификаторПС			= "";
	ПлатежнаяСистема_ВидОплаты  				= Неопределено;
	ПлатежнаяСистема_БанкКлиента    			= "";
	ПлатежнаяСистема_ВозможенВозврат    		= Ложь;
	ПлатежнаяСистема_ИдентификаторОплаты		= "";
	ПлатежнаяСистема_ОжидаемоеКоличествоЧеков   = 0;
	#КонецОбласти
	
	СуммаОстаткаДокументаРасчета = 0;
	ЭтоВозвратАванса = Ложь;
	ЭтоЗачетАванса = Ложь;
	ЭтоОплатаРассрочки = Ложь;
	ЭтоВнесениеПредоплатыПоЗаказу = Ложь;
	СкидкиРассчитаны = Ложь;
	ЭтоЗаменаТоваров = Ложь;
	ОтменаПлатежаСБП = Ложь;
	
	ЭтоЧекКоррекции = Ложь;
	СуммаКОплате = 0; 
	ТипОплаты = "";
	
	РеквизитыQRПлатежнойКарты = "";
	Элементы.ОплатаКартой.Отображение = ОтображениеКнопки.Текст;
	
	НомерСертификата = "";
	ПодарочныйСертификат = Неопределено;
	СостояниеПодтвержденияВозраста = "";
	ИдентификаторТекущейСессииПроверкиМарок = "";
	ДанныеДобавляемогоТовара = Неопределено;
	
	ВыбраннаяОрганизация = Неопределено;
	ВыбраннаяСистемаНалогообложения = Неопределено;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСписокЧековПродажи, Ложь);
	Элементы.Товары.ОтборСтрок = Неопределено;
	
	Элементы.ТекущийТоварСерияПартия.Заголовок = НСтр("ru = ''");
	Элементы.УказатьСерии.Картинка = Новый Картинка();
	
	Для Каждого ЭлементГруппы Из Элементы.ГруппаОперации.ПодчиненныеЭлементы Цикл
		УстановитьДоступностьЭлементаФормы(ЭлементГруппы, Истина);
	КонецЦикла;
	
	ЭквайринговыйТерминалВыполненияОперации = Неопределено;
	
	Если ИспользоватьПанельИзбранныхТоваров Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, Истина);
	КонецЕсли;
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДС, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДСПереключатель, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.СистемаНалогообложенияЧекаКоррекции, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ОтложитьЧек, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, ИспользоватьОплатуПлатежнымиКартами);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeНаличные, ИспользоватьОплатуНаличными);
	УстановитьВидимостьЭлементаФормы(Элементы.ОтменитьИзмененияЧека, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВидовОплат, Истина);
	
	УстановитьВидимостьЭлементаФормы(Элементы.УказатьСерии, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ТекущийТоварСерияПартия, Ложь);
	
	РазрешеноИзменятьЦену = НЕ (СписокРолейПользователя.НайтиПоЗначению("ПравоИзменятьЦенуРМК") = Неопределено);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, РазрешеноИзменятьЦену);
	
	#Область ОплатаQRКодом_ОбнулениеПараметров
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСБП, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаЮКасса, Истина);
	#КонецОбласти
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, ИспользоватьОплатуСертификатамиНСПК);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыНСПК, ИспользоватьОплатуСертификатамиНСПК);
	УстановитьВидимостьКнопкиМирТовары(Элементы, ИспользоватьОплатуСертификатамиНСПК);
	УстановитьВидимостьЭлементаФормы(Элементы.ПробитьЧек, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиРасчетаСкидок, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЗаменаТоваров, Ложь);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ЗачетАванса, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКредитом, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаБонусами, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.Безнал, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРедактированияСтрокиКорзины, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, Истина); 
	
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварСумма, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварПроцент, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.РассчитатьСкидки, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаПромокоды, Истина);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаПредоплата, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыЗачетАванса, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКредитом, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатамиНСПК, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатом, Ложь);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаТоваровКЗамене, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатами, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеПродавца, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаПродавецВыбран, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиОтменыВидовОплат, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ЗапроситьБалансСертификата, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ВернутьсяВРежимПодбораТовара, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ВвестиДанныеПокупателя, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправкаЧекаПочта, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправкаЧекаТелефон, Истина);
	
	ТекущийПродавец = "";
	
	Если ЗавершатьСессиюКассираПослеПродажи Тогда
		СменитьКассираСервер();
	Иначе
		
		Если Объект.Товары.Количество() = 0 Тогда
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
			ПоказатьСообщениеЗавершенияОплаты(ПараметрыЗавершения);
		Иначе
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		КонецЕсли;
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЛевоОбщая);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		
	КонецЕсли;
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьРежимРаботыПустойЧек(ЭтотОбъект);
	
	Если ДанныеПакета = Неопределено Или РежимКассыСамообслуживания Тогда
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаПродажа;
	Иначе
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКQRПакет;
	КонецЕсли;
	Элементы.ДекорацияТекстПустойСтраницы.Заголовок = ТекстПустойСтраницыВРежимеПродажи(РежимКассыСамообслуживания);
	ТекущийТоварНаименование = "";
	Элементы.ТекущийТоварПоставщик.Заголовок = "";
	Элементы.СуммаОплаченоНал.Подсказка = НСтр("ru = 'Наличные'");
	Элементы.СуммаОплаченоБН.Подсказка = НСтр("ru = 'Карта'");
	Элементы.СуммаОплаченоБонусами.Подсказка = НСтр("ru = 'Бонусы'");
	Элементы.Предоплата.Заголовок = НСтр("ru = 'Предоплата'");
	Элементы.ЗачетАванса.Заголовок = НСтр("ru = 'Зачет аванса'");
	ИзменитьКартинкуВводПокупателяБезКонтекста(ЭтотОбъект);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнформацияПокупателя, Ложь);
	
	Элементы.ДекорацияКоличествоЧеков.Заголовок = НСтр("ru = ''");
	ПробитыеЧеки.Очистить();
	ОжидаемоеКоличествоЧеков = 0;
	ЭтоВозвратБезОснования = Ложь;
	ВыбранБанковскийПлатеж = Ложь;
	ЭтоОплатаВстречнымПредоставлением = Ложь;
	ЕстьОплатаВстречнымПредоставлением = Ложь;
	ПриемАванса = Ложь;
	ПриемАвансаПоЗаказу = Ложь;
	ОтложенныйЧекПолностьюОплачен = Ложь;
	ПредупреждениеОПродукцииБезОплатыБонусамиПоказано = Ложь;
	
	ВыборСерии = Неопределено;
	ЧекККМВОбработке = Неопределено;
	ЧекККМПродажа = Неопределено;
	РежимВыбораПодарка = Ложь;
	РежимВыбораПодарочногоСертификата = Ложь;
	ЭтоСерийныйПодарочныйСертификат = Ложь;
	ИдентификаторКорзиныНСПК = Неопределено;
	
	ОбщегоНазначенияРМКПереопределяемый.ОчиститьОтложенныйЧек(ОтложенныйЧек);
	ОсобенностиУчетаВозвращаемойМаркируемойПродукции = Новый СписокЗначений;
	
	ОчиститьДанныеПокупателя();
	ОчиститьТаблицуПодарочныхСертификатов();
	ОчиститьТаблицуПримененныхПромокодов();
	ОчиститьТаблицуВыбранныхУправляемыхСкидок();
	ОбновитьКалендарныеОграниченияПродаж();
	ЗаполнитьКэшДействующихЗапретовПродаж();
	ТаблицаСкидкиНаценки.Очистить();
	ТаблицаБонусныеБаллы.Очистить();
	ТаблицаБонусныеБаллыЧекаПродажи.Очистить();
	
	ПараметрыВводаКодаSMS = Неопределено;
	Элементы.ОплатитьБонусами.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	СписокДобавленныхСтрокТоваров.Очистить();
	ТаблицаСообщений.Очистить();
	
	УстановитьВидимостьЭлементаФормы(Элементы.РаспечататьЗаявлениеНаВозврат, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРазделВыдачиНаличных, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыдачиНаличных, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРазделДенежныйЯщик, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ПанельВводаНаличных, Ложь);
	СуммаНаличныхКВыдаче = 0;
	
	ПечататьБумажныйЧек = ПроверитьВозможностьПечатиБумажногоЧека(ТекущаяНастройкаРМК);
	
	ПараметрыТекущейОперации = Неопределено;
	ПараметрыИнфоОшибки = Неопределено;
	
	Для Каждого СтрокаКассыККМ Из ТаблицаКассККМОрганизаций Цикл
		// 0-нужен контроль, 1-результат отрицательный, 2-пропускать контроль
		СтрокаКассыККМ.СтатусКонтроляВремениНачалаСмены = 0;
	КонецЦикла;
	
	ТранзакцияПоКартеЗавершена = Ложь;
	
	КомментарийКЧеку = "";
	ТекущийКомментарийКЧеку = "";
	УстановитьИконкуКомментарияКЧеку(Элементы.ВвестиКомментарийКЧеку, КомментарийКЧеку);
	УстановитьДоступностьОплатыПлатежнымиСистемами(Элементы.ГруппаВидОплатыСБП, Элементы.ГруппаВидОплатыЮКасса, Истина);
	
	ОбщегоНазначенияРМКПереопределяемый.НастроитьФормуПриСозданииНовогоНабора(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоОтложенныхЧеков(СтруктураПараметров, ОтложенныйЧек)
	
	КоличествоЧеков = 0;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьКоличествоОтложенныхЧеков(СтруктураПараметров,
		ОтложенныйЧек,
		КоличествоЧеков);
	
	Возврат КоличествоЧеков;
	
КонецФункции

&НаКлиенте
Процедура ВыборОтложенногоЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЕстьСвойство(Результат, "ЧекККМ") Тогда
		
		ОтложенныйЧек = Результат.ЧекККМ;
		ПродолжитьЧекКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЧекКлиент()
	
	Если ЗначениеЗаполнено(ОтложенныйЧек) Тогда
		АннулироватьЧек(ОтложенныйЧек);
	КонецЕсли;
	
	Если ККМПоддерживаетПроверкуКодовМаркировки
		И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
		И ВозможноЗакрытьСессиюРегистрацииМарок(Истина) Тогда
		ЗакрытьСессиюРегистрацииМарок();
	КонецЕсли;
	
	ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
	РазблокироватьОбъектСервераЛояльности("clientbonuses");
	СписатьРазблокироватьПодарочныеСертификаты();
	ОчиститьДанныеПромокодов(Истина);
	ТаблицаПодарков.Очистить();
	НастроитьВидимостьВводаПромокода(Истина);
	ВывестиИнформациюНаДисплейПокупателя("Аннулирование");
	ИнициализироватьИнтерфейсРабочегоМестаКассира();
	СформироватьЗаголовок(НСтр("ru='Продажа'"));
	ТекущаяОперация = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЧекКлиент()
	
	Если ЗапрашиватьПодтверждениеВозраста18Плюс Тогда
		
		Если ЕстьТоварыСВозрастнымОграничением(ОтложенныйЧек) Тогда
			
			ПереключитьНаСтраницуПодтвержденияВозраста(Истина);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
		
	ПродолжитьЧекКлиентЗавершение();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьТоварыСВозрастнымОграничением(ЧекККМ)
	
	Результат = Ложь;
	Если ОбщегоНазначенияРМК.ЭтоЧекПродажи(ЧекККМ) Тогда
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакЕстьТоварСВозрастнымОграничениемВЧекККМ(ЧекККМ, Результат);
	Иначе
		СостояниеПодтвержденияВозраста = "Есть18";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьЧекКлиентЗавершение()
	
	ПродолжитьЧек();
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект) Тогда
		Если (Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта))
				И ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыКартыЗаполнены(ПараметрыКартыЛояльности) Тогда
			ДозаполнитьДанныеКартыССервераЛояльности();
		Иначе
			ЗавершитьВводШтрихкодаНайденаКарта(КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		НастроитьФормуВРежимПродажаПоЗаказу();
	КонецЕсли;
	Если ТаблицаСкидкиНаценки.Количество() > 0 Тогда
		СкидкиРассчитаны = Истина;
	КонецЕсли;
	
	УстановитьАктивностьСтроки();
	
	УдалитьКодыМаркировки();
	
	ОтменитьПримененныеБонусы(Ложь);
	ПересчитатьИтогиТабличнойЧастиТовары();
	НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	НастроитьЭлементыФормыПоОтложенномуЧеку();
	
	ЭтоОперацияВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	ЭтоОперацияСкупка = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииСкупка(Объект.ВидОперации);
	ЭтоОперацияВозвратСкупки = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозвратСкупки(Объект.ВидОперации);
	
	Если ЭтоОперацияВозврат Тогда
		НастроитьЭлементыВРежимеВозврат();
	ИначеЕсли ЭтоОперацияСкупка Тогда
		НастроитьЭлементыВРежимеСкупка();
	ИначеЕсли ЭтоОперацияВозвратСкупки Тогда
		НастроитьЭлементыВРежимеВозвратСкупки();
	КонецЕсли;
	
	Если ВыбранБанковскийПлатеж Тогда
		
		НастроитьФормуВРежимБанковскогоПлатежа();
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Истина);
		СуммаОплаченоБезнал = СуммаИтого;
		РассчитатьСуммыОплаты();
		НастроитьДоступностьПробитьЧек();
		
	КонецЕсли;
	
	Если Не ОтложенныйЧекПолностьюОплачен Тогда
		Если объект.Оплачивается Тогда
			ПереключитьВРежимОплатыНаКлиенте();
		КонецЕсли;
		ПродолжитьОплачиваемыйЧекQRКодом();
	КонецЕсли;
	ОбработатьИзменениеТаблицыТоваровНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРолейПользователя()
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуРолейПользователя(ЭтотОбъект);
	ИнтеграцияСПлатежнымиСистемамиРМКПереопределяемый.ЗаполнитьТаблицуРолейПользователя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПравоНаДействие(НаименованиеРоли = "")
	Возврат НЕ СписокРолейПользователя.НайтиПоЗначению(НаименованиеРоли) = Неопределено;
КонецФункции

&НаСервере
Процедура ЗаменитьПраваИВыполнитьТребуемоеДействие(Штрихкод)
	
	ВыполнитьПоискКассира(Штрихкод);
	ЗаполнитьТаблицуРолейПользователя();
	ВыполнитьТекущуюОперацию();
	ВыбратьПользователяДоЗаменыПрав();
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьПользователяДоЗаменыПрав()
	
	Объект.ПользовательБД = ?(ЗначениеЗаполнено(ПользовательДоЗаменыПрав),
		ПользовательДоЗаменыПрав,
		Объект.ПользовательБД);
		
	Объект.Кассир = ?(ЗначениеЗаполнено(КассирДоЗаменыПрав),
		КассирДоЗаменыПрав,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПользовательБД, "ФизическоеЛицо"));
		
	ЗаполнитьТаблицуРолейПользователя();
	КодДляЗаменыПрав = "";
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьТекущуюОперацию()
	
	Если ТекущаяОперация = "" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОперацияВыполнена = Ложь;
	
	Если ТекущаяОперация = "ЧекНаВозвратРМК" Тогда
		
		Если Не СписокРолейПользователя.НайтиПоЗначению("ПравоЧекНаВозвратРМК") = Неопределено Тогда
			ТекущаяОперацияВыполнена = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ЧекКоррекцииРМК" Тогда
		
		Если Не СписокРолейПользователя.НайтиПоЗначению("ПравоЧекКоррекцииРМК") = Неопределено Тогда
			ТекущаяОперацияВыполнена = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "УдалитьСтрокуРМК" Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоУдалитьСтрокуРМК") = Неопределено Тогда
			
			ТекущаяОперацияВыполнена = Истина;
			Строка = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
			УдалитьСтрокуТовара(ЭтотОбъект, Строка, Объект.Товары);
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "УдалитьЧекРМК" Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоУдалитьЧекРМК") = Неопределено Тогда
			
			ТекущаяОперацияВыполнена = Истина;
			Если ЗначениеЗаполнено(ОтложенныйЧек) Тогда
				АннулироватьЧек(ОтложенныйЧек);
			КонецЕсли;
			
			СоздатьНовыйНабор();
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ОтложитьЧекРМК" Тогда
		
		Если Не СписокРолейПользователя.НайтиПоЗначению("ПравоОтложитьЧекРМК") = Неопределено Тогда
			ТекущаяОперацияВыполнена = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ПродолжитьЧекРМК" Тогда
		
		Если Не СписокРолейПользователя.НайтиПоЗначению("ПравоПродолжитьЧекРМК") = Неопределено Тогда
			ТекущаяОперацияВыполнена = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "РедактироватьКартуРМК" Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоРедактироватьКартуРМК") = Неопределено Тогда
			
			ТекущаяОперацияВыполнена = Истина;
			НомерКартыДоИзменения = НайденнаяКартаНомер;
			ИзменитьДоступностьПолейНайденнойКарты();
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ПодтвердитьОплатуПлатежнойСистемой" Тогда
		
		Если НЕ СписокРолейПользователя.
			НайтиПоЗначению("РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы") = Неопределено Тогда
			
			ТекущаяОперацияВыполнена = Истина;
			ПлатежнаяСистема_НоваяЗаявка.БылоПодтверждениеКодомАдминистратора = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ВводВесаТовара" Тогда
		ТекущаяОперацияВыполнена = Истина;
	ИначеЕсли ТекущаяОперация = "ВыборПриПоискеПоШтрихкодуРМК" Тогда
		ТекущаяОперацияВыполнена = Истина;
	ИначеЕсли ТекущаяОперация = "ПодтверждениеВозрастаРМК" Тогда
		ТекущаяОперацияВыполнена = Истина;
	ИначеЕсли ТекущаяОперация = "ОбработкаЗапретаПродажРМК" Тогда
		ТекущаяОперацияВыполнена = Истина;
	ИначеЕсли ТекущаяОперация = "ВыборСерииРМК" Тогда
		ТекущаяОперацияВыполнена = Истина;
	ИначеЕсли ТекущаяОперация = "РучноеПодтверждениеМаркиРМК" Тогда
		ТекущаяОперацияВыполнена = Истина;
	ИначеЕсли ТекущаяОперация = "ЗавершениеРаботыРМК" Тогда
		ТекущаяОперацияВыполнена = Истина;
	ИначеЕсли ТекущаяОперация = "ПоказатьВыход" Тогда
		ТекущаяОперацияВыполнена = Истина;
	ИначеЕсли ТекущаяОперация = "ИзменениеКоличестваВМеньшуюСторону" Тогда
		ТекущаяОперацияВыполнена = Истина;
	ИначеЕсли ТекущаяОперация = "УменьшениеКоличестваНаЕдиницу" Тогда
		ТекущаяОперацияВыполнена = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыПослеУдаленияСтроки()
	
	ПересчитатьИтогиТабличнойЧастиТовары();
	РассчитатьСуммуОплатыБонусами();
	
	Если Объект.Товары.Количество() = 0 И НЕ ЭтоЧекКоррекции Тогда
		
		Если ЗначениеЗаполнено(ОтложенныйЧек) Тогда
			АннулироватьЧек(ОтложенныйЧек);
		КонецЕсли;
		
		ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
		НастроитьЭлементыФормы(Элементы.СтраницаПустая, Ложь);
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		РазблокироватьОбъектСервераЛояльности("clientbonuses");
		СписатьРазблокироватьПодарочныеСертификаты();
		ИнициализироватьИнтерфейсРабочегоМестаКассира();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧекНаВозврат()
	
	ВывестиИнформациюНаДисплейПокупателя("ВозвратТовара");
	СформироватьЗаголовок(НСтр("ru='Возврат'"));
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Выбор чека для возврата'"));
	ПараметрыОткрытия.Вставить("ВозвратПродажи", Истина);
	ПараметрыОткрытия.Вставить("ВыводитьКомментарийКЧеку", ВыводитьКомментарийКЧеку);
	
	Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации(Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЧекаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Функция ПодключенныеКассыККМИОрганизации()
	
	МассивКассККМ = Новый Массив;
	МассивОрганизаций = Новый Массив;
	
	Для Каждого СтрокаКасс Из ТаблицаКассККМОрганизаций Цикл
		
		МассивКассККМ.Добавить(СтрокаКасс.КассаККМ);
		МассивОрганизаций.Добавить(СтрокаКасс.Организация);
		
	КонецЦикла;
	
	СтруктураКассККМИОрганизаций = Новый Структура();
	СтруктураКассККМИОрганизаций.Вставить("МассивКассККМ", МассивКассККМ);
	СтруктураКассККМИОрганизаций.Вставить("МассивОрганизаций", МассивОрганизаций);
	
	Возврат СтруктураКассККМИОрганизаций;
	
КонецФункции

&НаКлиенте
Процедура НайтиТоварВЧеке(Штрихкод)
	
	Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	
	СтрокиТоваров = Элементы.Товары; 
	СтрокиТоваров.ВыделенныеСтроки.Очистить();
	
	МассивСтрокШтрихкод = Объект.Товары.НайтиСтроки(Новый Структура("Штрихкод", Штрихкод));
	Если МассивСтрокШтрихкод.Количество() > 0 Тогда
		
		Для Каждого НайденнаяСтрока Из МассивСтрокШтрихкод Цикл
			
			ИдентификаторНайденнойСтроки = НайденнаяСтрока.ПолучитьИдентификатор();
			Если СтрокиТоваров.ВыделенныеСтроки.Количество() = 0 Тогда
				Элементы.Товары.ТекущаяСтрока = ИдентификаторНайденнойСтроки;
			КонецЕсли;
			СтрокиТоваров.ВыделенныеСтроки.Добавить(ИдентификаторНайденнойСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	МассивСтрокКодМаркировки = Объект.Товары.НайтиСтроки(Новый Структура("КодМаркировки", Штрихкод));
	Если МассивСтрокКодМаркировки.Количество() > 0 Тогда
		
		Для Каждого НайденнаяСтрока Из МассивСтрокКодМаркировки Цикл
			
			ИдентификаторНайденнойСтроки = НайденнаяСтрока.ПолучитьИдентификатор();
			Если СтрокиТоваров.ВыделенныеСтроки.Количество() = 0 Тогда
				Элементы.Товары.ТекущаяСтрока = ИдентификаторНайденнойСтроки;
			КонецЕсли;
			СтрокиТоваров.ВыделенныеСтроки.Добавить(ИдентификаторНайденнойСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФильтрПоискаПоШтрихкоду = Новый Структура;
	ФильтрПоискаПоШтрихкоду.Вставить("Номенклатура");
	
	СтруктураПараметровКлиента = ДанныеПоискаПоШтрихкодуСервер(Штрихкод);
	
	Если СтруктураПараметровКлиента.ЗначенияПоиска.Количество() > 0 Тогда
		Для Каждого СтрокаПоШтрихкоду Из СтруктураПараметровКлиента.ЗначенияПоиска Цикл
			
			МассивСтрокПоНоменклатуре = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаПоШтрихкоду.Владелец));
			Для Каждого НайденнаяСтрока Из МассивСтрокПоНоменклатуре Цикл
				
				ИдентификаторНайденнойСтроки = НайденнаяСтрока.ПолучитьИдентификатор();
				Если СтрокиТоваров.ВыделенныеСтроки.Количество() = 0 Тогда
					Элементы.Товары.ТекущаяСтрока = ИдентификаторНайденнойСтроки;
				КонецЕсли;
				СтрокиТоваров.ВыделенныеСтроки.Добавить(ИдентификаторНайденнойСтроки);
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево,
		(Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект)));
	ШтрихкодДляПоиска = НСтр("ru = ''");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТекстВводМарки()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ЭтоНабор Тогда
		ПредставлениеТовара = ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика;
	Иначе
		ПредставлениеТовара = ТекущийТоварНаименование;
	КонецЕсли;
	
	Если СтрНайти(Элементы.ДекорацияТекстВводМарки.Заголовок, ПредставлениеТовара) > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияТекстВводМарки.Заголовок = СтрШаблон("%1%2%3",
		НСтр("ru='Отсканируйте марку'"),
		Символы.ПС,
		ПредставлениеТовара);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьВводаМарки(ПараметрыДляОбработкиШтрихкода)
	
	Если ОткрытСлойОжиданияМарки() Тогда
		
		Если НЕ Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		
			ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			ПараметрыДляОбработкиШтрихкода.Вставить("ТекущаяНоменклатура", ТекущаяСтрока.Номенклатура);
			ПараметрыДляОбработкиШтрихкода.Вставить("НомерСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
			ПараметрыДляОбработкиШтрихкода.Вставить("НеобходимоВвестиМарку");
			ПараметрыДляОбработкиШтрихкода.Вставить("ТекущаяНоменклатураОсобенностьУчета", ТекущаяСтрока.ОсобенностьУчета);
			Если ТекущаяСтрока.ОсобенностьУчета = ОбщегоНазначенияРМККлиент.ОсобенностьУчетаАлкоголь() Тогда
				ПараметрыДляОбработкиШтрихкода.Вставить("НеобходимоВвестиМаркуАлкоголя", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварБезМарки()
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НеобходимостьВводаКодаМаркировки = Ложь;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	ОжидатьВводМарки = ТекущиеДанные.НеобходимостьВводаКодаМаркировки;
	ОграничитьДоступностьЭлементовПриОжиданииМарки(ОжидатьВводМарки);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ОсобенностьУчета)
		И (ОсобенностиУчетаВозвращаемойМаркируемойПродукции.НайтиПоЗначению(ТекущиеДанные.ОсобенностьУчета)
			= Неопределено) Тогда
				ОсобенностиУчетаВозвращаемойМаркируемойПродукции.Добавить(ТекущиеДанные.ОсобенностьУчета);
	КонецЕсли;
	
	УстановитьФокусНаТовареТребующемВводаМарки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСменуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПредлагатьОткрытьСмену = Истина;
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ПредлагатьОткрытьСмену") Тогда
			ПредлагатьОткрытьСмену = ДополнительныеПараметры.ПредлагатьОткрытьСмену;
		КонецЕсли;
		
		ЗакрытиеСменыПереопределено = Ложь;
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗакрытьСмену(ЭтотОбъект, ЗакрытиеСменыПереопределено);
		
		Если ЗакрытиеСменыПереопределено Тогда
			
			Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
				
				Если Не ФизЛицоПользователяЗаполнено Тогда
					ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
					УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		ВыполнитьСверкуИтогов(Объект.Организация);
		
		СтруктураДляПроверкиКассовойСмены = СформироватьСтруктуруДляПроверкиКассовойСмены();
		ЗаархивироватьЧекиККМ(СтруктураДляПроверкиКассовойСмены);
		
		Если СтруктураДляПроверкиКассовойСмены.Отказ Тогда
			
			ПоказатьПредупреждение(, СтруктураДляПроверкиКассовойСмены.ТекстОшибки);
			Возврат;
			
		КонецЕсли;
		
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
			ПараметрыОперации.КассаККМ = Объект.КассаККМ;
		Иначе
			ПараметрыОперации.КассаККМ = КассаККМДляОперации;
		КонецЕсли;
		ДополнительныеПараметрыДляПечати = ДополнительныеПараметрыОткрытияЗакрытияСмены();
		ДополнительныеПараметрыДляПечати.Пользователь = Объект.ПользовательБД;
		ДополнительныеПараметрыДляПечати.Кассир = Объект.Кассир;
		ДополнительныеПараметрыДляПечати.КассаККМ = Объект.КассаККМ;
		ДополнительныеПараметрыДляПечати.ВариантЗаполненияМестаРасчетов = ВариантЗаполненияМестаРасчетов;
		
		ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, ДополнительныеПараметрыДляПечати);
		
		Оповещение = Новый ОписаниеОповещения("ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетПечатьЗавершение",
			ЭтотОбъект,
			ПредлагатьОткрытьСмену);
			
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(Оповещение,
			УникальныйИдентификатор, ПодключаемоеОборудование, ПараметрыОперации, ДополнительныеПараметры);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаархивироватьЧекиККМ(СтруктураПараметров)
	
	// Раз в сутки смену нужно закрывать, следовательно, уместно обновить кэш запретов
	ЗаполнитьКэшДействующихЗапретовПродаж();
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаархивироватьЧекиККМ(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБумажногоЧекаВместоЭлектронногоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущийЧекЭлектронный = Ложь;
		ПечататьБумажныйЧек = Истина;
		ЗакрытьФормуДанныеПокупателяКлиент();
		НачатьПечатьЧека();
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Чек не был пробит. Пожалуйста, повторите пробитие чека.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискКассираКлиент(Штрихкод)
	
	НайтиКассираИПерезаполнитьПрава(Штрихкод);
	Если Не ЗначениеЗаполнено(Объект.Кассир) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяОперация = "ЧекНаВозвратРМК" Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоЧекНаВозвратРМК") = Неопределено Тогда
			
			ОткрытьОбщуюСтраницу(Истина);
			ВыбратьЧекНаВозврат();
			СформироватьЗаголовокВводКассира();
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ЧекКоррекцииРМК" Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоЧекКоррекцииРМК") = Неопределено Тогда
			
			ОткрытьОбщуюСтраницу(Истина);
			ВыбратьЧекКоррекции();
			СформироватьЗаголовокВводКассира();
			
		КонецЕсли;
		
	Иначе
		ОткрытьОбщуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетПечатьЗавершение(РезультатВыполнения,
	ПараметрыВыполнения) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучениеТекущегоСостоянияККТПриЗакрытии", ЭтотОбъект);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(
			ОповещениеОЗавершении, УникальныйИдентификатор, РезультатВыполнения.ИдентификаторУстройства);
		
		ТекстЗаголовка = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.'");
		ТекстСообщения =
			СтрШаблон(НСтр("ru = '""%1""
				|Отчет на фискальном регистраторе не сформирован.'"), РезультатВыполнения.ОписаниеОшибки);
		
		ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
		
	Иначе
		ИзменитьСостояниеКассовойСмены(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеКассовойСмены(ПредлагатьОткрытьСмену = Истина)
	
	ПроверитьВозможностьРаботы();
	НастроитьСтраницуВыбораКассККМ();
	
	Если ТаблицаКассККМОрганизаций.Количество() > 1 Тогда
		ПриПереключенииКассыККМ();
	Иначе
		
		СменаОткрыта = Ложь;
		Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
			СменаОткрыта = ЗначениеЗаполнено(ТаблицаКассККМОрганизаций[0].НачалоКассовойСмены);
		КонецЕсли;
		
		Если Не СменаОткрыта Тогда
			Если ФизЛицоПользователяЗаполнено Тогда
				Если ПредлагатьОткрытьСмену = Истина Тогда
					ПроверитьКассовуюСменуИНайтиКассира();
				КонецЕсли;
			Иначе	
				Объект.Кассир = Неопределено;
				ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВТабличнуюЧасть(ДанныеТовара, ТекущийВыбор, НеобходимВводМаркировки = Ложь)
	
	НоваяСтрока = Объект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеТовара);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийВыбор);
	
	Если РежимВыбораПодарка Тогда
		ВладелецПодарка = Неопределено;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", НоваяСтрока.Характеристика);
		СтрокиПодарков = ТаблицаПодарков.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиПодарков.Количество() Тогда
			НоваяСтрока.Подарок = Истина;
			НоваяСтрока.ПроцентСкидкиНаценки = 100;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиПодарков[0], "Количество, КоличествоУпаковок, ВыводитьПодарокВЧек, ВладелецПодарка");
			
			СкидкаВладельцаПодарка = СкидкаПоТекущемуВладельцуПодарка();
			СтрокиСкидкиПодарка = ТаблицаСкидкиНаценки.НайтиСтроки(Новый Структура("СкидкаНаценка", СкидкаВладельцаПодарка));
			Для Каждого СтрокаСкидкиПодарка ИЗ СтрокиСкидкиПодарка Цикл
				СтрокаСкидкиПодарка.Сумма = СтрокиПодарков[0].Сумма;
			КонецЦикла;
		КонецЕсли;
		
		ОчиститьПодаркиПоТекущемуВладельцу(Ложь);
	КонецЕсли;
	
	Если НоваяСтрока.Подарок Тогда
		КоличествоТоваров = Объект.Товары.Количество();
		Если КоличествоТоваров > 0 Тогда
			НоваяСтрока.Продавец = Объект.Товары[КоличествоТоваров - 2].Продавец;
		КонецЕсли;
		НоваяСтрока.ПроцентСкидкиНаценки = 100;
		НоваяСтрока.СуммаАвтоматическойСкидки = НоваяСтрока.Цена * НоваяСтрока.КоличествоУпаковок;
		НоваяСтрока.СуммаБезСкидки= НоваяСтрока.Цена * НоваяСтрока.КоличествоУпаковок;
		НоваяСтрока.ОтображаетсяСкидкаПроцентом = Истина;
	КонецЕсли;
	
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	НоваяСтрока.НеобходимостьВводаКодаМаркировки = НеобходимВводМаркировки;
	
	Если ЭтоВнесениеПредоплатыПоЗаказу Или ЭтоОплатаРассрочки Или РежимЗаказа Тогда
		НоваяСтрока.НеобходимостьВводаКодаМаркировки = Ложь;
		НоваяСтрока.ПроверятьЗаполнениеСерий = Ложь;
		Если Не РежимЗаказа Тогда
			НоваяСтрока.НеобходимостьВводаСерии = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока.ПоштучноеВыбытие Тогда
		НоваяСтрока.ЧастичноеВыбытиеВариантУчета = ДанныеТовара.ВариантЧастичногоВыбытия;
		НоваяСтрока.ЧастичноеВыбытиеНоменклатура = НоваяСтрока.Номенклатура;
		НоваяСтрока.ЧастичноеВыбытиеХарактеристика = НоваяСтрока.Характеристика;
		НоваяСтрока.ЧастичноеВыбытиеКоличество = НоваяСтрока.Количество;
	КонецЕсли;
	
	Отказ = Ложь;
	Если РучноеСопоставлениеТовара И ЗначениеЗаполнено(ДанныеДляРучногоСопоставления) Тогда
		ЗаполнитьДанныеРучногоСопоставления(НоваяСтрока, ДанныеТовара.ОсобенностьУчета, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодМаркиВРаботе) Тогда
		НоваяСтрока.КодМаркировки = КодМаркиВРаботе;
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОрганизациюПродажи(НоваяСтрока, ЭтотОбъект);
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.Организация) Тогда
		НоваяСтрока.Организация = ОсновнаяОрганизация;
	Иначе
		
		ОтборПоОрганизации = Новый Структура("Организация", НоваяСтрока.Организация);
		КассыККМПоОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоОрганизации);
		Если КассыККМПоОрганизации.Количество() = 0 Тогда
			НоваяСтрока.ОплатаНедоступна = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.СистемаНалогообложения) Тогда
		НоваяСтрока.СистемаНалогообложения = ОбщегоНазначенияРМК.СНОККТДляОрганизации(ЭтотОбъект, НоваяСтрока);
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьВозможностьОплатыЭС(НоваяСтрока, ЭтотОбъект);
	
	СтавкаНДС = ПродажиРМК.АктуальнаяСтавкаНДСДляТовара(Объект, НоваяСтрока, НоваяСтрока.СистемаНалогообложения);
	НоваяСтрока.СтавкаНДС = СтавкаНДС;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ПолучитьВес, НоваяСтрока.Весовой);
	
	ОбщегоНазначенияРМКПереопределяемый.СкорректироватьЦенуПодарочногоСертификата(ЭтотОбъект, НоваяСтрока);
	
	Если НЕ Отказ Тогда
		
		ПредставлениеХарактеристики = "";
		Если ТекущийВыбор.Свойство("Характеристика") Тогда
			Если ЗначениеЗаполнено(ТекущийВыбор.Характеристика) Тогда
				ПредставлениеХарактеристики = " (" + Строка(ТекущийВыбор.Характеристика) + ")";
			КонецЕсли;
		КонецЕсли;
		
		ПредставлениеТовара = СтрШаблон("%1%2", ДанныеТовара.Наименование, ПредставлениеХарактеристики);
		НоваяСтрока.ПредставлениеНоменклатураХарактеристика = ПредставлениеТовара;
		ШтрихкодированиеРМК.ЗаполнитьПредставлениеЕдиницыИзмерения(НоваяСтрока);
		
		ТекущийТоварКоличество = НоваяСтрока.КоличествоУпаковок;
		
		Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		ДоступныРучныеСкидки = ДопускаетсяПрименениеСкидок И (Объект.Товары.Количество() > 0);
		
		Если Не РежимПлитки Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ДоступныРучныеСкидки);
			УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, ДоступныРучныеСкидки);
			УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации));
			УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации));
		КонецЕсли;
		ПодготовитьИнтерфейсКВозвратуМаркируемогоТовараБезКонтрольнойМаркиНаСервере(НоваяСтрока);
		
		ДобавленаНоваяСтрокаКорзины = Истина;
		
		ОбщегоНазначенияРМКПереопределяемый.ПереопределитьПараметрыЗаполненияСерийИПартий(НоваяСтрока, ЭтотОбъект);
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		КонецЕсли;
		УстановитьТекущийЭлементКоличество(ЭтотОбъект);
		
	КонецЕсли;
	ДополнитьСтрокуТовараВычисляемымиДанными(НоваяСтрока);

КонецПроцедуры

&НаСервере
Процедура ИзменитьСтрокуВТабличнойЧасти(НайденнаяСтрока, ТекущийВыбор)
	
	Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.ИдентификаторСтроки) Тогда
		НайденнаяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если РучноеСопоставлениеТовара И ЗначениеЗаполнено(ДанныеДляРучногоСопоставления) Тогда
		Отказ = Ложь;
		ЗаполнитьДанныеРучногоСопоставления(НайденнаяСтрока, НайденнаяСтрока.ОсобенностьУчета, Отказ);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	КонецЕсли;
	
	ДобавленВесовойНефасованныйТовар = НайденнаяСтрока.Весовой И Не НайденнаяСтрока.Фасованный;
	Если Не ДобавленВесовойНефасованныйТовар Тогда
		
		НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
		НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок + 1;
		
	Иначе
		
		Если ТекущийВыбор.Свойство("Количество") Тогда
			НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекущийВыбор.Количество;
		КонецЕсли;
		
		Если ТекущийВыбор.Свойство("КоличествоУпаковок") Тогда
			НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок + ТекущийВыбор.КоличествоУпаковок;
		КонецЕсли;
		
	КонецЕсли;
	
	ШтрихкодированиеРМК.ЗаполнитьПредставлениеЕдиницыИзмерения(НайденнаяСтрока);
	
	ТекущийТоварКоличество = НайденнаяСтрока.КоличествоУпаковок;
	
	Элементы.Товары.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	
	УстановитьТекущийЭлементКоличество(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущуюНастройкуРМК()
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто)Тогда
		РабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
	КонецЕсли;
	ДоступноИзменениеНастройкиРМК = ПравоДоступа("Добавление", Метаданные.Справочники.НастройкиРабочегоМестаКассира);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиРабочегоМестаКассира.Ссылка КАК Ссылка,
	|	НастройкиРабочегоМестаКассира.ПечататьБумажныйЧек КАК ПечататьБумажныйЧек,
	|	НастройкиРабочегоМестаКассира.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	НастройкиРабочегоМестаКассира.ТочностьОкругления КАК ТочностьОкругления,
	|	НастройкиРабочегоМестаКассира.ОкруглятьПриПроизвольномВидеОплаты КАК ОкруглятьПриПроизвольномВидеОплаты,
	|	НастройкиРабочегоМестаКассира.ОкруглятьЧекВПользуПокупателяПострочно КАК ОкруглятьЧекВПользуПокупателяПострочно,
	|	НастройкиРабочегоМестаКассира.ЗапрашиватьПодтверждениеВозраста18Плюс КАК ЗапрашиватьПодтверждениеВозраста18Плюс,
	|	НастройкиРабочегоМестаКассира.ОжидатьРезультатПроверкиМарок КАК ОжидатьРезультатПроверкиМарок,
	|	НастройкиРабочегоМестаКассира.ИспользоватьНовыйПодборТоваров КАК ИспользоватьНовыйПодборТоваров,
	|	НастройкиРабочегоМестаКассира.ЗакрыватьПодборПриВыбореТовара КАК ЗакрыватьПодборПриВыбореТовара,
	|	НастройкиРабочегоМестаКассира.ПоказыватьАртикулНоменклатуры КАК ПоказыватьАртикулНоменклатуры,
	|	НастройкиРабочегоМестаКассира.ПоказыватьКодНоменклатуры КАК ПоказыватьКодНоменклатуры,
	|	НастройкиРабочегоМестаКассира.ОтправлятьSMSКодПриЗаведенииКарты КАК ОтправлятьSMSКодПриЗаведенииКарты,
	|	НастройкиРабочегоМестаКассира.КонтролироватьЕМРЦ КАК КонтролироватьЕМРЦ,
	|	НастройкиРабочегоМестаКассира.ИспользоватьРежимСкупки КАК ИспользоватьРежимСкупки,
	|	НастройкиРабочегоМестаКассира.ВопросПоРасчетуСкидок КАК ВопросПоРасчетуСкидок,
	|	НастройкиРабочегоМестаКассира.РазрешитьВыборСклада КАК РазрешитьВыборСклада,
	|	НастройкиРабочегоМестаКассира.ВремяНачалаСмены КАК ВремяНачалаСмены,
	|	НастройкиРабочегоМестаКассира.ВариантЗаполненияМестаРасчетов КАК ВариантЗаполненияМестаРасчетов,
	|	НастройкиРабочегоМестаКассира.ВариантЗаполненияКассира КАК ВариантЗаполненияКассира,
	|	НастройкиРабочегоМестаКассира.ВыдаватьНаличныеНаКассе КАК ВыдаватьНаличныеНаКассе,
	|	НастройкиРабочегоМестаКассира.ЗавершатьСессиюКассираПослеПродажи КАК ЗавершатьСессиюКассираПослеПродажи,
	|	НастройкиРабочегоМестаКассира.ЗапускатьОбменИзИнтерфейсаРМК КАК ЗапускатьОбменИзИнтерфейсаРМК,
	|	НастройкиРабочегоМестаКассира.НаименованиеПользователяПриЗапросеПрав КАК НаименованиеПользователяПриЗапросеПрав,
	|	НастройкиРабочегоМестаКассира.СтруктураПлиточногоИнтерфейсаПодбора КАК СтруктураПлиточногоИнтерфейсаПодбора,
	|	НастройкиРабочегоМестаКассира.СпособФормированияТоварногоЧека КАК СпособФормированияТоварногоЧека,
	|	НастройкиРабочегоМестаКассира.ИспользоватьСтрокуБыстрогоДобавленияТовара КАК ИспользоватьБыстроеДобавлениеТовара,
	|	НастройкиРабочегоМестаКассира.ДобавлятьВсеТоварыОтдельнойСтрокой КАК ДобавлятьВсеТоварыОтдельнойСтрокой,
	|	НастройкиРабочегоМестаКассира.ОставлятьПоследнийЧекНаЭкране КАК ОставлятьПоследнийЧекНаЭкране,
	|	НастройкиРабочегоМестаКассира.ИспользоватьОплатуНаличными КАК ИспользоватьОплатуНаличными,
	|	НастройкиРабочегоМестаКассира.ИспользоватьОплатуБонусами КАК ИспользоватьОплатуБонусами,
	|	НастройкиРабочегоМестаКассира.ИспользоватьОплатуСертификатами КАК ИспользоватьОплатуСертификатами,
	|	НастройкиРабочегоМестаКассира.ИспользоватьПанельВводаНаличныхКупюр КАК ИспользоватьПанельВводаНаличныхКупюр,
	|	НастройкиРабочегоМестаКассира.ИспользоватьПромокоды КАК ИспользоватьПромокоды,
	|	НастройкиРабочегоМестаКассира.ОсновнойПодборПлиточный КАК ОсновнойПодборПлиточный,
	|	НастройкиРабочегоМестаКассира.ВертикальнаяОриентация КАК ВертикальнаяОриентация,
	|	НастройкиРабочегоМестаКассира.ОтображатьНумерациюСтрок КАК ОтображатьНумерациюСтрок,
	|	НастройкиРабочегоМестаКассира.СуммаПодтвержденияСписанияБонусов КАК СуммаПодтвержденияСписанияБонусов,
	|	НастройкиРабочегоМестаКассира.ВыдаватьПодарокНаКассе КАК ВыдаватьПодарокНаКассе,
	|	НастройкиРабочегоМестаКассира.РаботаВРежимеМедленногоСоединения КАК РаботаВРежимеМедленногоСоединения,
	|	НастройкиРабочегоМестаКассира.РазрешитьЗапускРезервногоКопированияИзФормыРМК КАК РазрешитьЗапускРезервногоКопированияИзФормыРМК,
	|	НастройкиРабочегоМестаКассира.РежимОтображенияСкидки КАК РежимОтображенияСкидки,
	|	НастройкиРабочегоМестаКассира.ОтправлятьSMSКодПриПродаже КАК ОтправлятьSMSКодПриПродаже,
	|	НастройкиРабочегоМестаКассира.РазрешитьВводКомментарияКЧеку КАК РазрешитьВводКомментарияКЧеку,
	|	НастройкиРабочегоМестаКассира.ОтображатьОстаток КАК ОтображатьОстаток,
	|	НастройкиРабочегоМестаКассира.РазрешитьБыстроеДобавлениеПакета КАК РазрешитьБыстроеДобавлениеПакета,
	|	НастройкиРабочегоМестаКассира.НоменклатураПакет КАК НоменклатураПакет,
	|	НастройкиРабочегоМестаКассира.СоздаватьЗаказы КАК СоздаватьЗаказы,
	|	НастройкиРабочегоМестаКассира.ПокупательНовогоЗаказа КАК ПокупательНовогоЗаказа,
	|	НастройкиРабочегоМестаКассира.СпособПечатиЗаказаПокупателя КАК СпособПечатиЗаказаПокупателя,
	|	НастройкиРабочегоМестаКассира.ПечататьЗаказПриСоздании КАК ПечататьЗаказПриСоздании
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|ГДЕ
	|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
	|	И НастройкиРабочегоМестаКассира.РабочееМесто = &РабочееМесто");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	ВыборкаНастроек = Запрос.Выполнить().Выбрать();
	КоличествоНастроек = ВыборкаНастроек.Количество();
	
	Если КоличествоНастроек = 1 И ВыборкаНастроек.Следующий() Тогда
		
		ТекущаяНастройкаРМК = ВыборкаНастроек.Ссылка;
		МаксимальныйПроцентРучнойСкидки = ВыборкаНастроек.МаксимальныйПроцентРучнойСкидки;
		
		ТекстПодсказки = СтрШаблон(НСтр("ru = 'Максимальная ручная скидка: %1%%'", МаксимальныйПроцентРучнойСкидки));
		
		Элементы.ТекущийТоварСкидка.Подсказка = ТекстПодсказки;
		Элементы.ЗначениеСкидкиНаЧек.Подсказка = ТекстПодсказки;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаНастроек, ,
			"ВертикальнаяОриентация,ИспользоватьПромокоды");
		
		Если СоздаватьЗаказы И ЕстьПравоСозданияЗаказов Тогда
			УстановитьВидимостьЭлементаФормы(Элементы.ПродажаПоЗаказу, Истина);
			УстановитьВидимостьЭлементаФормы(Элементы.Заказ, Истина);
		КонецЕсли;
		
		ТочностьОкругления = 0;
		Если ЗначениеЗаполнено(ВыборкаНастроек.ТочностьОкругления) Тогда
			ТочностьОкругления = Число(Строка(ВыборкаНастроек.ТочностьОкругления));
		КонецЕсли;
		
		ОжидатьПолученияОтветаИСМП = ВыборкаНастроек.ОжидатьРезультатПроверкиМарок;
		ИспользоватьВыборСкладаПриПродаже = ВыборкаНастроек.РазрешитьВыборСклада;
		
		УстановитьВидимостьЭлементаФормы(Элементы.СписокТоваровАртикул, ВыборкаНастроек.ПоказыватьАртикулНоменклатуры);
		УстановитьВидимостьЭлементаФормы(Элементы.ДополнительныйСписокТоваровАртикул, ВыборкаНастроек.ПоказыватьАртикулНоменклатуры);
		УстановитьВидимостьЭлементаФормы(Элементы.СписокТоваровКод, ВыборкаНастроек.ПоказыватьКодНоменклатуры);
		УстановитьВидимостьЭлементаФормы(Элементы.ДополнительныйСписокТоваровКод, ВыборкаНастроек.ПоказыватьКодНоменклатуры);
		
		УстановитьВидимостьЭлементаФормы(Элементы.Скупка, ВыборкаНастроек.ИспользоватьРежимСкупки);
		УстановитьВидимостьЭлементаФормы(Элементы.ВозвратСкупки, ВыборкаНастроек.ИспользоватьРежимСкупки);
		
		ИспользоватьВводПоСтроке = ВыборкаНастроек.ИспользоватьБыстроеДобавлениеТовара И Не РежимКассыСамообслуживания;
		УстановитьВидимостьЭлементаФормы(Элементы.ВводТовараПоСтроке, ИспользоватьВводПоСтроке);
		
		ДоступнаОтправкаSMS = Ложь;
		ОбщегоНазначенияРМКПереопределяемый.ПроверитьВозможностьОтправкиSMS(ДоступнаОтправкаSMS);
		ОтправлятьSMSКодПриЗаведенииКарты = ВыборкаНастроек.ОтправлятьSMSКодПриЗаведенииКарты И ДоступнаОтправкаSMS;
		
		Если ОтправлятьSMSКодПриЗаведенииКарты Тогда
			Элементы.СоздатьКарту.Заголовок = НСтр("ru = 'К подтверждению номера'");
		КонецЕсли;
		
		ФормаПлиточногоИнтерфейсаДоступна = ЗначениеЗаполнено(СтруктураПлиточногоИнтерфейсаПодбора);
		УстановитьВидимостьЭлементаФормы(Элементы.ОткрытьПлиточныйИнтерфейсКаталога, ФормаПлиточногоИнтерфейсаДоступна);
		
		РазрешитьБыстроеДобавлениеПакета = ВыборкаНастроек.РазрешитьБыстроеДобавлениеПакета = Истина
			И ЗначениеЗаполнено(ВыборкаНастроек.НоменклатураПакет);
		Если РазрешитьБыстроеДобавлениеПакета Тогда
			Если Не РежимКассыСамообслуживания Тогда
				Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКQRПакет;
			КонецЕсли;
			ДанныеПакета = ПодготовитьДанныеВыбораНоменклатуры(ВыборкаНастроек.НоменклатураПакет);
		КонецЕсли;
		УстановитьВидимостьЭлементаФормы(Элементы.ДобавитьПакет, РазрешитьБыстроеДобавлениеПакета);
		
		ИспользоватьПромокоды = Ложь;
		Если РежимКассыСамообслуживания Тогда
			ИспользоватьОплатуНаличными = Ложь;
			ИспользоватьОплатуСертификатамиНСПК = Ложь;
			ВопросПоРасчетуСкидок = Ложь;
			Если ОсновнойПодборПлиточный Тогда
				ЗакрыватьПодборПриВыбореТовара = Ложь;
			КонецЕсли;
			ВыводитьКомментарийКЧеку = Ложь;
		Иначе
			ВыдаватьПодарокНаКассе = Истина;
			ИспользоватьПромокоды = ВыборкаНастроек.ИспользоватьПромокоды;
			ВыводитьКомментарийКЧеку = ВыборкаНастроек.РазрешитьВводКомментарияКЧеку;
		КонецЕсли;
		
		УстановитьВидимостьЭлементаФормы(Элементы.ВвестиКомментарийКЧеку, ВыводитьКомментарийКЧеку);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыБонусы, ИспользоватьОплатуБонусами);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаБонусов, ИспользоватьОплатуБонусами);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыСертификатом, ИспользоватьОплатуСертификатами);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаСертификата, ИспользоватьОплатуСертификатами);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыНаличными, ИспользоватьОплатуНаличными);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСдача, ИспользоватьОплатуНаличными);
		
		УстановитьВидимостьЭлементаФормы(Элементы.Внесение, ИспользоватьОплатуНаличными);
		УстановитьВидимостьЭлементаФормы(Элементы.Выемка, ИспользоватьОплатуНаличными);
		УстановитьВидимостьЭлементаФормы(Элементы.ОткрытьДенежныйЯщик, ИспользоватьОплатуНаличными);
		
		ОбщегоНазначенияРМКПереопределяемый.ДополнитьНастройкиОтображенияОстатков(ЭтотОбъект);
		УстановитьВидимостьЭлементаФормы(Элементы.ТекущийТоварОстаток, ОтображатьОстаток);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ТоварыНомерСтроки, ОтображатьНумерациюСтрок);
		
		Если Не ВертикальнаяОриентация = ВыборкаНастроек.ВертикальнаяОриентация Тогда
			ВертикальнаяОриентация = ВыборкаНастроек.ВертикальнаяОриентация;
			ИнтерфейсРМКСлужебный.НастроитьПанельУправленияЧеком(ЭтотОбъект, ВертикальнаяОриентация);
		КонецЕсли;
		
		ИспользоватьПанельВводаНаличныхКупюр
			= ВыборкаНастроек.ИспользоватьОплатуНаличными И ВыборкаНастроек.ИспользоватьПанельВводаНаличныхКупюр;
		ИнтерфейсРМКСлужебный.ПодготовитьПанельВводаНаличныхКупюр(ЭтотОбъект,
			ИспользоватьПанельВводаНаличныхКупюр, ВертикальнаяОриентация);
		
		НастроитьОтображениеСкидки();
		
		ЕстьПравоНаРезервноеКопирование = ВыборкаНастроек.РазрешитьЗапускРезервногоКопированияИзФормыРМК;
		
		Если ЕстьПравоНаРезервноеКопирование Тогда
			
			РезультатПроверки 				= ПроверитьРаботуОблачногоАрхива();

			ЕстьПравоНаРезервноеКопирование = РезультатПроверки.СозданиеРезервнойКопииДоступно
				И РезультатПроверки.ПодключениеОблачногоАрхиваВыполнено;

		КонецЕсли;
		
		УстановитьВидимостьЭлементаФормы(Элементы.СохранитьРезервнуюКопию,
			ЕстьПравоНаРезервноеКопирование);
			
		УстановитьВидимостьЭлементаФормы(Элементы.СохранитьРезервнуюКопиюИзРежимаВыбораКассы,
			ЕстьПравоНаРезервноеКопирование);
			
		ОбщегоНазначенияРМК.ЗаполнитьПризнакиРаботыСКартамиЛояльности(ЭтотОбъект);
		
	КонецЕсли;
	СенсорныйЭкран = СенсорныйЭкран();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОбщуюВозможностьРаботы(Отказ, ДанныеПроверки)
	
	Если РежимКассыСамообслуживания И Не ФизЛицоПользователяЗаполнено Тогда
		ЗарегистрироватьОшибкуОпределенияКассира(Отказ, ДанныеПроверки);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		ДанныеПроверки.ОшибкаЗапуска = "РабочееМесто";
		ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения рабочего места'");
		ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Не смогли определить рабочее место.
									|Обратитесь к администратору системы.'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		ДанныеПроверки.ОшибкаЗапуска = "НастройкаРМК";
		ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Настройки РМК.'");
		ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Не удалось определить настройки РМК.
									|Обратитесь к администратору системы.'");
		ОбщегоНазначенияРМККлиентСерверПереопределяемый.ЗаполнитьТекстОшибкиПриОпределенииНастройкиРМК(ДанныеПроверки.ТекстСообщения);
		Отказ = Истина;
		Возврат;
	ИначеЕсли РежимКассыСамообслуживания Тогда
		СценарийИспользованияРМК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНастройкаРМК, "СценарийИспользования");
		Если Не СценарийИспользованияРМК = Перечисления.СценарииИспользованияРМК.ТерминалСамообслуживания Тогда
			ЗарегистрироватьОшибкуОпределенияНастройкиРМКДЛяРежимаКСО(Отказ, ДанныеПроверки);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	НастроеныСотрудникиДляОтменыЧека = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ПроверитьНаличиеКодаПодтвержденияУСотрудниковСПравамиОтменыЧека(НастроеныСотрудникиДляОтменыЧека);
	Если РежимКассыСамообслуживания И Не НастроеныСотрудникиДляОтменыЧека Тогда
		ЗарегистрироватьОшибкуРегистрацииСтаршегоСотрудника(Отказ, ДанныеПроверки);
		Возврат;
	КонецЕсли;
	
	ВалютаЗаполненаПравильно = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ПроверитьВозможностьРаботыСВалютой(ВалютаЗаполненаПравильно, ЭтотОбъект);
	Если Не ВалютаЗаполненаПравильно Тогда
		ДанныеПроверки.ОшибкаЗапуска = "Валюта";
		ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Настройки валюты.'");
		ДанныеПроверки.ТекстСообщения = НСтр("ru = 'В настройках программы и в данных торгового объекта указаны разные валюты.
									|Обратитесь к администратору системы.'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросДанныеОрганизаций(Запрос, ЭтотОбъект);
	Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
		ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
		ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Не сформирован запрос для получения данных организаций'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросДанныеКассыККМ(Запрос, ЭтотОбъект);
	Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
		ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
		ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Не сформирован запрос для получения данных Касс ККМ'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ПодключенныеККМПроверка = РезультатЗапроса.Выгрузить();
	ПодключенныеККМПроверка.Колонки.Добавить("Количество");
	ПодключенныеККМПроверка.ЗаполнитьЗначения(1, "Количество");
	ПодключенныеККМПроверкаККТ = ПодключенныеККМПроверка.Скопировать();
	
	ПодключенныеККМПроверка.Свернуть("Организация", "Количество");
	Для Каждого СтрокаОрганизации Из ПодключенныеККМПроверка Цикл
		Если СтрокаОрганизации.Количество > 1 Тогда
			ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
			ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
			ДанныеПроверки.ТекстСообщения = СтрШаблон(НСтр("ru = 'На организацию: %1 подключено несколько касс ККМ. Допустима одна.
				|Обратитесь к администратору системы.'"), СтрокаОрганизации.Организация);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
	КонецЦикла;
	
	ПодключенныеККМПроверкаККТ.Свернуть("ПодключаемоеОборудование", "Количество");
	Для Каждого СтрокаОборудования Из ПодключенныеККМПроверкаККТ Цикл
		Если СтрокаОборудования.Количество > 1 И ЗначениеЗаполнено(СтрокаОборудования.ПодключаемоеОборудование) Тогда
			ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
			ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
			ДанныеПроверки.ТекстСообщения = СтрШаблон(НСтр("ru = 'Подключаемое оборудование: %1 установлено к нескольким кассам ККМ.
				|Обратитесь к администратору системы.'"), СтрокаОборудования.ПодключаемоеОборудование);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущаяНастройкаРМК.ПродажиСНесколькихКассККМ И НЕ ЗначениеЗаполнено(ТекущаяНастройкаРМК.ОсновнаяКассаККМ) Тогда
		ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
		ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Не определена касса ККМ используемая по умолчанию.
			|Обратитесь к администратору системы.'");
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ЭтоРМКБазовая = Метаданные.Имя = "РМКБазовая";
	Если Выборка.Количество() > 2 И ЭтоРМКБазовая Тогда
		ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
		ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Нельзя подключить более 2-х касс ККМ.
			|Обратитесь к администратору системы.'");
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли Выборка.Количество() > 1 И НЕ ТекущаяНастройкаРМК.ПродажиСНесколькихКассККМ Тогда
		ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
		ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Настроено несколько элементов подключаемого оборудования для касс ККМ
			|при отключенной возможность использования нескольких касс.
			|Обратитесь к администратору.'");
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли Выборка.Количество() > 0 Тогда
		
		ТаблицаКассККМОрганизаций.Очистить();
		
		#Область ОплатаQRКодом_ПараметрыОрганизации
		ПлатежнаяСистема_ВидыОплат.Очистить();
		#КонецОбласти
		
		НомерПП = 0;
		Пока Выборка.Следующий() Цикл
			
			ОсновнаяОрганизация = Выборка.Организация;
			
			Если НЕ Выборка.ИспользоватьБезПодключенияОборудования Тогда
				Если (Не РежимКассыСамообслуживания)
					Или (ЗначениеЗаполнено(Выборка.ПодключаемоеОборудование) 
					И ПодключаемоеОборудованиеИспользуется(Выборка.ПодключаемоеОборудование)) Тогда
					
					ОписаниеПоследнейКассовойСмены = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(Выборка.ПодключаемоеОборудование);
					
				Иначе
					ЗарегистрироватьОшибкуПодключаемогоОборудованияККМ(Отказ, ДанныеПроверки);
					Возврат;
				КонецЕсли;
			Иначе
				ОписаниеПоследнейКассовойСмены = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(Выборка.КассаККМ);
			КонецЕсли;
			
			Объект.КассаККМ = Выборка.КассаККМ;
			Объект.Организация = Выборка.Организация;
			ПодключаемоеОборудование = Выборка.ПодключаемоеОборудование;
			
			ККМПоддерживаетПроверкуКодовМаркировки = Ложь;
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьНеобходимостьПроверкиМаркиНаККТ(ККМПоддерживаетПроверкуКодовМаркировки,
				ПодключаемоеОборудование);
			
			ТекущаяОрганизация = Объект.Организация;
			
			НалогообложениеНДС = Неопределено;
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСНОНДСДляОрганизации(НалогообложениеНДС, ЭтотОбъект);
			
			СистемаНалогообложенияОрганизацииПоУмолчанию = ОбщегоНазначенияРМК.СНОККТДляОрганизации(ЭтотОбъект);
			
			СтрокаКассККМ = ТаблицаКассККМОрганизаций.Добавить();
			НомерПП = НомерПП + 1;
			СтрокаКассККМ.ИмяКнопки                            = "ВыбратьКассуККМ"+НомерПП;
			СтрокаКассККМ.КассаККМ                             = Объект.КассаККМ;
			СтрокаКассККМ.ПоддерживаетПроверкуКодовМаркировки  = ККМПоддерживаетПроверкуКодовМаркировки;
			СтрокаКассККМ.ИдентификаторУстройства              = ПодключаемоеОборудование;
			СтрокаКассККМ.Организация                          = Объект.Организация;
			СтрокаКассККМ.ИспользоватьБезПодключенияОборудования = Выборка.ИспользоватьБезПодключенияОборудования;
			
			#Область ОплатаQRКодом_ПараметрыОрганизации
			НастройкиИнтеграцииОрганизации =
				РегистрыСведений.СоответствиеНастроекИнтеграцииРМК.НастройкиИнтеграции(СтрокаКассККМ.Организация,
					Объект.ТорговыйОбъект);
			
			Если ЗначениеЗаполнено(НастройкиИнтеграцииОрганизации) Тогда
				
				СтрокаКассККМ.ВозможнаОплатаQRКодом = Истина;
				
				Для Каждого Настройка Из НастройкиИнтеграцииОрганизации Цикл 
					ЗаполнитьЗначенияСвойств(ПлатежнаяСистема_ВидыОплат.Добавить(), Настройка);
				КонецЦикла;
				
			Иначе
				СтрокаКассККМ.ВозможнаОплатаQRКодом = Ложь;
			КонецЕсли;
			#КонецОбласти
			
			Если НЕ ОписаниеПоследнейКассовойСмены = Неопределено Тогда
				
				КассоваяСмена                     = ОписаниеПоследнейКассовойСмены.КассоваяСмена;
				СтрокаКассККМ.КассоваяСмена       = ОписаниеПоследнейКассовойСмены.КассоваяСмена;
				СтрокаКассККМ.НачалоКассовойСмены = ОписаниеПоследнейКассовойСмены.НачалоКассовойСмены;
				СтрокаКассККМ.ДатаИстеченияСрокаДействия = ОписаниеПоследнейКассовойСмены.ДатаИстеченияСрокаДействия;
				СтрокаКассККМ.Открыта = Истина;

				Если ОписаниеПоследнейКассовойСмены.Статус = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
					СтрокаКассККМ.НачалоКассовойСмены = Неопределено;
					СтрокаКассККМ.Открыта = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СистемаНалогообложенияОрганизацииПоУмолчанию) Тогда
				ЗарегистрироватьОшибкуОпределенияСНО(СтрокаКассККМ.Организация, Отказ, ДанныеПроверки);
				Возврат;
			КонецЕсли;
			
			Если Не ТекущаяНастройкаРМК.ПродажиСНесколькихКассККМ Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Выборка.Количество() > 1 И ТекущаяНастройкаРМК.ПродажиСНесколькихКассККМ Тогда
			
			ОтборПоКассеККМ = Новый Структура("КассаККМ", ТекущаяНастройкаРМК.ОсновнаяКассаККМ);
			
			Если ЗначениеЗаполнено(ТекущаяНастройкаРМК.ОсновнаяКассаККМ) Тогда
				
				СтрокиПоКассеККМ = ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоКассеККМ);
				Если СтрокиПоКассеККМ.Количество() = 0 Тогда
					ЗарегистрироватьОшибкуОпределенияДоступныхКассККМ(Отказ, ДанныеПроверки);
					Возврат;
				Иначе
					ОсновнаяОрганизация = СтрокиПоКассеККМ[0].Организация;
					Объект.Организация = ОсновнаяОрганизация;
					СистемаНалогообложенияОрганизацииПоУмолчанию = ОбщегоНазначенияРМК.СНОККТДляОрганизации(ЭтотОбъект);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщегоНазначенияРМКПереопределяемый.ПроверитьНастройкиКассККМ(ЭтотОбъект, Отказ, ДанныеПроверки.ТекстЗаголовка, ДанныеПроверки.ТекстСообщения);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ТерминалБезПодключения = Ложь;
		ЗаполнитьЭквайринговыеТерминалы(ТерминалБезПодключения);
		ПроверитьЗаполнениеВидовОплатДляКассыСамообслуживания(ТерминалБезПодключения, Отказ, ДанныеПроверки);
		
		Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
			Если ТаблицаКассККМОрганизаций[0].Открыта Тогда
				Элементы.ЗакрытьСмену.Заголовок = НСтр("ru = 'Закрыть смену (Z-отчет)'");
			Иначе
				Элементы.ЗакрытьСмену.Заголовок = НСтр("ru = 'Открыть смену'");
			КонецЕсли;
		Иначе
			Элементы.ЗакрытьСмену.Заголовок = НСтр("ru = 'Открыть/закрыть смену'");
		КонецЕсли;
		
	Иначе
		Если Не ЗначениеЗаполнено(Объект.ТорговыйОбъект) Тогда
			ДанныеПроверки.ОшибкаЗапуска = "ТорговыйОбъект";
			ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Выбор магазина.'");
			ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Для запуска РМК необходимо выбрать магазин.'");
		Иначе
			ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
			ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
			ДанныеПроверки.ТекстСообщения = СтрШаблон(НСтр("ru = 'Для магазина ""%1"" и рабочего места ""%2""
				|не удалось определить доступную кассу ККМ.'"), Объект.ТорговыйОбъект, РабочееМесто);
			ОбщегоНазначенияРМККлиентСерверПереопределяемый.ЗаполнитьТекстОшибкиПриОпределенииКассы(ДанныеПроверки.ТекстСообщения);
		КонецЕсли;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПроверитьНастройкиПользователя(Отказ, ДанныеПроверки.ТекстЗаголовка, ДанныеПроверки.ТекстСообщения);
	ПроверитьИспользованиеНДССверху(ЭтотОбъект, Отказ, ДанныеПроверки.ТекстЗаголовка, ДанныеПроверки.ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОшибкуОпределенияСНО(ОрганизацияККМ, Отказ, ДанныеПроверки)
	ДанныеПроверки.ОшибкаЗапуска = "СНО";
	ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения СНО.'");
	ДанныеПроверки.ТекстСообщения = СтрШаблон(НСтр("ru = 'У организации: %1 не задана СНО по умолчанию.
		|Обратитесь к администратору системы.'"), ОрганизацияККМ);
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОшибкуОпределенияДоступныхКассККМ(Отказ, ДанныеПроверки)
	ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
	ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
	ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Не подключена касса ККМ используемая по умолчанию.
		|Обратитесь к администратору системы.'");
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОшибкуОпределенияКассира(Отказ, ДанныеПроверки)
	ДанныеПроверки.ОшибкаЗапуска = "Кассир";
	ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения кассира'");
	ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Не смогли определить кассира КСО.
		|Обратитесь к администратору системы.'");
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОшибкуПодключаемогоОборудованияККМ(Отказ, ДанныеПроверки)
	ДанныеПроверки.шибкаЗапуска = "КассаККМ";
	ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения подключаемого оборудования кассы ККМ'");
	ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Подключаемое оборудование не настроено на кассе ККМ.
		|Обратитесь к администратору системы.'");
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОшибкуРегистрацииСтаршегоСотрудника(Отказ, ДанныеПроверки)
	ДанныеПроверки.ОшибкаЗапуска = "СтаршийКассир";
	ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения старшего кассира'");
	ДанныеПроверки.ТекстСообщения = НСтр("ru = 'На рабочем месте нет сотрудника с правами старшего кассира и выше, у которого введен код подтверждения.
		|Обратитесь к администратору системы.'");
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Функция ПодключаемоеОборудованиеИспользуется(ПроверяемоеПодключаемоеОборудование)
	РезультатФункции = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияПодключаемогоОборудования(ПроверяемоеПодключаемоеОборудование, РезультатФункции);
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеВидовОплатДляКассыСамообслуживания(ТерминалБезПодключения, Отказ, ДанныеПроверки)
	Если РежимКассыСамообслуживания Тогда
		Если ПлатежнаяСистема_ВидыОплат.Количество() = 0 И Не ИспользоватьОплатуПлатежнымиКартами Тогда
			Если ТерминалБезПодключения Тогда
				ДанныеПроверки.ОшибкаЗапуска = "ЭквайринговыйТерминал";
				ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка настройки оплаты банковскими картами'");
				ДанныеПроверки.ТекстСообщения = НСтр("ru = 'В режиме КСО можно использовать только эквайринговые терминалы
					|с настроенным подключенным оборудованием.
					|Обратитесь к администратору системы.'");
			Иначе
				ДанныеПроверки.ОшибкаЗапуска = "ВидыОплат";
				ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка настройки видов оплат'");
				ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Не настроен ни один вид оплаты на рабочем месте.
					|Обратитесь к администратору системы.'");
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиОрганизацийНаФорме()
	
	// Кнопки на странице выбора кассы
	НомерПП = 0;
	НомерППГруппы = 0;
	КоличествоКассККМ = ТаблицаКассККМОрганизаций.Количество();
	ЧетноеКоличествоКассККМ = КоличествоКассККМ%2 = 0;
	НомерПоследнейГруппы = Окр(КоличествоКассККМ / 2);
	
	ГруппыКассККМ = Элементы.ГруппаКассыККМ.ПодчиненныеЭлементы;
	КоличествоГрупп = ГруппыКассККМ.Количество();
	Для НомерГруппы = 0 По КоличествоГрупп - 1 Цикл
		Элементы.Удалить(ГруппыКассККМ[0]);
	КонецЦикла;
	
	Для Каждого СтрокаКассККМ Из ТаблицаКассККМОрганизаций Цикл
		
		НомерПП = НомерПП + 1;
		ИмяКоманды = СтрокаКассККМ.ИмяКнопки;
		НоваяКоманда = Команды.Найти(ИмяКоманды);
		Если НоваяКоманда = Неопределено Тогда
			НоваяКоманда = Команды.Добавить(ИмяКоманды);
		КонецЕсли;
		НоваяКоманда.Действие = "ВыбратьКассуККМ";
		
		Если (НомерПП+1)%2 = 0 Тогда
			НомерППГруппы = НомерППГруппы + 1;
			ИмяГруппы = СтрШаблон("%1%2", "ГруппаКассыККМГруппа", НомерППГруппы);
			ГруппаОрганизацийГоризонтальная = Элементы.Найти(ИмяГруппы);
			Если ГруппаОрганизацийГоризонтальная = Неопределено Тогда
				ГруппаОрганизацийГоризонтальная = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаКассыККМ);
			КонецЕсли;
			ГруппаОрганизацийГоризонтальная.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОрганизацийГоризонтальная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаОрганизацийГоризонтальная.Ширина = 40;
			ГруппаОрганизацийГоризонтальная.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОрганизацийГоризонтальная.ОтображатьЗаголовок = Ложь;
			ГруппаОрганизацийГоризонтальная.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;
		
		Если Не ЧетноеКоличествоКассККМ И НомерПоследнейГруппы = НомерППГруппы Тогда
			ИмяДекорации = "ВыбратьКассуККМСмещениеЛево";
			ДекорацияСмещение = Элементы.Найти(ИмяДекорации);
			Если ДекорацияСмещение = Неопределено Тогда
				ДекорацияСмещение = Элементы.Добавить("ВыбратьКассуККМСмещениеЛево", Тип("ДекорацияФормы"),
					ГруппаОрганизацийГоризонтальная);
			КонецЕсли;
			ДекорацияСмещение.Ширина = 1;
		КонецЕсли;
		
		КнопкаКассы = Элементы.Найти(ИмяКоманды);
		Если КнопкаКассы = Неопределено Тогда
			КнопкаКассы = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаОрганизацийГоризонтальная);
		КонецЕсли;
		КнопкаКассы.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		КнопкаКассы.Ширина = 2;
		КнопкаКассы.Высота = 6;
		КнопкаКассы.РастягиватьПоГоризонтали = Истина;
		КнопкаКассы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		КнопкаКассы.ИмяКоманды = ИмяКоманды;
		КнопкаКассы.Шрифт = Элементы.ТекстПредупреждениеОшибка.Шрифт;
		
		Если Не ЧетноеКоличествоКассККМ И НомерПоследнейГруппы = НомерППГруппы Тогда
			ИмяДекорации = "ВыбратьКассуККМСмещениеПраво";
			ДекорацияСмещение = Элементы.Найти(ИмяДекорации);
			Если ДекорацияСмещение = Неопределено Тогда
				ДекорацияСмещение = Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"),
					ГруппаОрганизацийГоризонтальная);
			КонецЕсли;
			ДекорацияСмещение.Ширина = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	// Кнопки на панели оплаты
	КоличествоКнопокОрганизаций = 1;
	Запрос = Новый Запрос;
	ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросДанныеОрганизаций(Запрос, ЭтотОбъект);
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		КоличествоКнопокОрганизаций = Запрос.Выполнить().Выбрать().Количество();
	КонецЕсли;
	
	НомерППГруппы = 0;
	Для НомерПП = 1 По КоличествоКнопокОрганизаций Цикл
		
		КомандаИмя = "ПереключитьЧекОрганизация"+НомерПП;
		НоваяКоманда = Команды.Найти(КомандаИмя);
		Если НоваяКоманда = Неопределено Тогда
			НоваяКоманда = Команды.Добавить(КомандаИмя);
		КонецЕсли;
		НоваяКоманда.Действие = "ПереключитьЧекПродажи";
		
		Если (НомерПП+1)%2 = 0 Тогда
			НомерППГруппы = НомерППГруппы + 1;
			ИмяГруппы = СтрШаблон("%1%2", "ГруппаСписокОрганизацийПоКорзинеГруппа", НомерППГруппы);
			ГруппаОрганизацийГоризонтальная = Элементы.Найти(ИмяГруппы);
			Если ГруппаОрганизацийГоризонтальная = Неопределено Тогда
				ГруппаОрганизацийГоризонтальная = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"),
					Элементы.ГруппаСписокОрганизацийПоКорзине);
			КонецЕсли;
			ГруппаОрганизацийГоризонтальная.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОрганизацийГоризонтальная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаОрганизацийГоризонтальная.Ширина = 12;
			ГруппаОрганизацийГоризонтальная.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОрганизацийГоризонтальная.ОтображатьЗаголовок = Ложь;
			ГруппаОрганизацийГоризонтальная.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
		КонецЕсли;
		
		ИмяКнопки = "ПереключитьЧекОрганизация"+НомерПП;
		КнопкаКассы = Элементы.Найти(ИмяКнопки);
		Если КнопкаКассы = Неопределено Тогда
			КнопкаКассы = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ГруппаОрганизацийГоризонтальная);
		КонецЕсли;
		КнопкаКассы.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		КнопкаКассы.Ширина = 12;
		КнопкаКассы.ИмяКоманды = КомандаИмя;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНастройкиПользователя(Отказ, ТекстЗаголовка, ТекстСообщения)
	
	ОбщегоНазначенияРМКПереопределяемый.ПроверитьНастройкиПользователя(Отказ, ТекстЗаголовка, ТекстСообщения);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	НастроитьДоступностьСозданияКодаДоступа();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИспользованиеНДССверху(Форма, Отказ, ТекстЗаголовка, ТекстСообщения)
	
	ОбщегоНазначенияРМКПереопределяемый.ПроверитьИспользованиеНДССверху(Форма, Отказ, ТекстЗаголовка, ТекстСообщения);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КодДоступаПользователяУказан()
	
	Результат = Ложь;
	Запрос = Новый Запрос;
	ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросПолученияКодовДоступаПользователя(Запрос, ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		КоличествоПаролейПользователя = Выборка.Количество();
		Результат = (КоличествоПаролейПользователя > 0);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПроверитьВозможностьРаботы(Отказ = Ложь)
	
	ПустаяСтрока = НСтр("ru = ''");
	ТекстЗаголовка = ПустаяСтрока;
	ТекстСообщения = ПустаяСтрока;
	ОшибкаЗапуска = ПустаяСтрока;
	ДанныеПроверки = Новый Структура("ТекстЗаголовка,ТекстСообщения,ОшибкаЗапуска", ТекстЗаголовка, ТекстСообщения, ОшибкаЗапуска);
	
	ПроверитьОбщуюВозможностьРаботы(Отказ, ДанныеПроверки);
	Если Отказ Тогда
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("ТекстЗаголовка", ДанныеПроверки.ТекстЗаголовка);
		ПараметрыОткрытияФормы.Вставить("ТекстСообщения", ДанныеПроверки.ТекстСообщения);
		ПараметрыОткрытияФормы.Вставить("ОшибкаЗапуска", ДанныеПроверки.ОшибкаЗапуска);
		
		ТаблицаКассККМОрганизаций.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСменуКлиент(ДанныеДляОткрытияСмены = неопределено)
	
	Отбор = Новый Структура("КассаККМ", Объект.КассаККМ);
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	
	Если СтрокаКассы.ИспользоватьБезПодключенияОборудования Тогда 
		ИспользоватьКассуККМБезПодключенияОборудования = Истина;
	Иначе
		СохранятьПодключение = Истина;
		ИдентификаторУстройства = ПодключаемоеОборудование;
		ИспользоватьКассуККМБезПодключенияОборудования = Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КассаККМ", Объект.КассаККМ);
	ДополнительныеПараметры.Вставить("Магазин", Объект.ТорговыйОбъект);
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("ОставитьПодключенным", СохранятьПодключение);
	ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
	
	ДополнительныеПараметрыДляПечати = ДополнительныеПараметрыОткрытияЗакрытияСмены();
	ДополнительныеПараметрыДляПечати.Пользователь = Объект.ПользовательБД;
	ДополнительныеПараметрыДляПечати.Кассир = Объект.Кассир;
	ДополнительныеПараметрыДляПечати.КассаККМ = Объект.КассаККМ;
	ДополнительныеПараметрыДляПечати.ВариантЗаполненияМестаРасчетов = ВариантЗаполненияМестаРасчетов;
	
	Если ИспользоватьПодключаемоеОборудование
		И НЕ ИспользоватьКассуККМБезПодключенияОборудования
		И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		
		Доступность = Ложь;
		ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, ДополнительныеПараметрыДляПечати);
		
	ИначеЕсли ИспользоватьКассуККМБезПодключенияОборудования Тогда
		ПараметрыОперации.КассаККМ = Объект.КассаККМ;
	КонецЕсли;
	
	Контекст = Новый Структура("КассаККМ", Объект.КассаККМ);
	Оповещение = Новый ОписаниеОповещения("ОткрытьСменуЗавершение", ЭтотОбъект, Контекст);
			
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(Оповещение,
		УникальныйИдентификатор, ИдентификаторУстройства, ПараметрыОперации, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСменуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Доступность = Истина;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ОписаниеПоследнейКассовойСмены = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(Объект.КассаККМ);
		
		Если ЕстьСвойство(ОписаниеПоследнейКассовойСмены, "КассоваяСмена") Тогда
			КассоваяСмена = ОписаниеПоследнейКассовойСмены.КассоваяСмена;
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Кассовая смена в системе открыта'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
		Оповестить("ИзменениеСостоянияКассовойСмены", Параметры.КассаККМ);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучениеТекущегоСостоянияККТПриОткрытии", ЭтотОбъект);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(
			ОповещениеОЗавершении, УникальныйИдентификатор, РезультатВыполнения.ИдентификаторУстройства);
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка открытия смены'");
		
		ЛокализованныйТекстСообщения = СтрШаблон(НСтр("ru = 'При открытии смены произошла ошибка.
			|%1
			|Смена не открыта на фискальном устройстве.'"), РезультатВыполнения.ОписаниеОшибки);
		ПоказатьПредупреждение(, ЛокализованныйТекстСообщения, , ТекстЗаголовка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюВыемкаЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ВосстановитьЭлементыПослеВнесенияИлиВыемки();
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		Если СуммаВнесение = 0 Тогда
			
			Если ЕстьСвойство(РезультатВыполнения, "СуммаВнесения") Тогда
				СуммаВнесение = РезультатВыполнения.СуммаВнесения;
			КонецЕсли;
			
		КонецЕсли;
		
		Отказ = Ложь;
		ТекстОшибки = "";
		
		СоздатьВыемкуДС(Отказ, ТекстОшибки);
		
		Если Отказ Тогда
			
			Если ПустаяСтрока(ТекстОшибки) Тогда
				ТекстОшибки = НСтр("ru='Ошибка формирования документа внесения'");
			КонецЕсли;
			
			Доступность = Истина;
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка пробития чека.'");
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
			
			Возврат;
			
		КонецЕсли;
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Произведена выемка в размере %1 %2'"), СуммаВыемка, ПредставлениеВалюты);
		ПоказатьОповещениеПользователя(НСтр("ru='Выемка'"), , ТекстПояснения, БиблиотекаКартинок.РМКВыемка);
		
	Иначе
		
		ТекстОшибки = НСтр("ru='Ошибка выемки'");
		Если ЕстьСвойство(РезультатВыполнения, "ТекстСообщения") Тогда
			ТекстОшибки = РезультатВыполнения.ТекстСообщения;
		КонецЕсли;
		Если ЕстьСвойство(РезультатВыполнения, "ОписаниеОшибки") Тогда
			ТекстОшибки = РезультатВыполнения.ОписаниеОшибки;
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстОшибки, , НСтр("ru='Ошибка выемки ДС.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюВнесениеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ВосстановитьЭлементыПослеВнесенияИлиВыемки();
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		Если СуммаВнесение = 0 Тогда
			
			Если ЕстьСвойство(РезультатВыполнения, "СуммаВнесения") Тогда
				СуммаВнесение = РезультатВыполнения.СуммаВнесения;
			КонецЕсли;
			
		КонецЕсли;
		
		Отказ = Ложь;
		ТекстОшибки = "";
		
		СоздатьВнесениеДС(Отказ, ТекстОшибки);
		
		Если Отказ Тогда
			
			Если ПустаяСтрока(ТекстОшибки) Тогда
				ТекстОшибки = НСтр("ru='Ошибка формирования документа внесения'");
			КонецЕсли;
			
			Доступность = Истина;
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка пробития чека.'");
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
			
			Возврат;
			
		КонецЕсли;
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Произведено внесение в размере %1 %2'"), СуммаВнесение, ПредставлениеВалюты);
		ПоказатьОповещениеПользователя(НСтр("ru='Внесение'"), , ТекстПояснения, БиблиотекаКартинок.РМКВнесение);
		
	Иначе
		
		ТекстОшибки = НСтр("ru='Ошибка выемки'");
		
		Если ЕстьСвойство(РезультатВыполнения, "ТекстСообщения") Тогда
			ТекстОшибки = РезультатВыполнения.ТекстСообщения;
		КонецЕсли;
		Если ЕстьСвойство(РезультатВыполнения, "ОписаниеОшибки") Тогда
			ТекстОшибки = РезультатВыполнения.ОписаниеОшибки;
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстОшибки, , НСтр("ru='Ошибка внесения'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВнесениеДС(Отказ, ТекстОшибки)
	
	ОбщегоНазначенияРМКПереопределяемый.СоздатьВнесениеДС(ЭтотОбъект, Отказ, ТекстОшибки);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВыемкуДС(Отказ, ТекстОшибки)
	
	ОбщегоНазначенияРМКПереопределяемый.СоздатьВыемкуДС(ЭтотОбъект, Отказ, ТекстОшибки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеРучногоСопоставления(ТекущаяСтрока, ОсобенностьУчета, Отказ)
	
	ПараметрыШтрихкодирования = Новый Структура();
	ПараметрыШтрихкодирования.Вставить("Объект", Объект);
	ПараметрыШтрихкодирования.Вставить("КонтролироватьЕМРЦ", КонтролироватьЕМРЦ);
	ПараметрыШтрихкодирования.Вставить("УчитыватьМРЦ", УчитыватьМРЦ);
	
	Если ЕстьСвойство(ДанныеДляРучногоСопоставления, "КодМарки") Тогда
		
		ШтрихкодированиеРМК.РазобратьМаркуИЗаполнитьДанные(ТекущаяСтрока,
			ДанныеДляРучногоСопоставления.КодМарки,
			ОсобенностьУчета,
			ПараметрыШтрихкодирования);
			
	КонецЕсли;
	
	Если ЕстьСвойство(ПараметрыШтрихкодирования, "УпаковкаНеНайдена") Тогда
		
		Отказ = Истина;
		ДанныеДляРучногоСопоставления = Неопределено;
		ЗавершитьВводШтрихкодаУпаковкаНеНайдена(ПараметрыШтрихкодирования.НоменклатураБезУпаковки);
		
	Иначе
		
		Если ЕстьСвойство(ДанныеДляРучногоСопоставления, "EAN") Тогда
			ТекущаяСтрока.Штрихкод = ДанныеДляРучногоСопоставления.EAN;
		КонецЕсли;
		Если ЕстьСвойство(ДанныеДляРучногоСопоставления, "Штрихкод") 
			И ЕстьСвойство(ДанныеДляРучногоСопоставления, "ТоварНеНайденПоШтрихкоду")
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Штрихкод) Тогда
			ТекущаяСтрока.Штрихкод = ДанныеДляРучногоСопоставления.Штрихкод;
		КонецЕсли;
		Если ЕстьСвойство(ДанныеДляРучногоСопоставления, "КодМарки") Тогда
			ТекущаяСтрока.КодМаркировки = ДанныеДляРучногоСопоставления.КодМарки;
		КонецЕсли;
		
		СоздатьЗаписьВШтрихкоды(ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаписьВШтрихкоды(ТекущаяСтрока)
	ОбщегоНазначенияРМКПереопределяемый.ЗаписатьШтрихкод(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаНеверныйКод()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаНеверноОтсканированныйШтрихкод);
	Если ТекущаяСтрока.ЭтоНабор Тогда
		ПредставлениеТовара = ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика;
	Иначе
		ПредставлениеТовара = ТекущийТоварНаименование;
	КонецЕсли;
	
	Элементы.ДекорацияТекстНеправильныйШтрихкод.Заголовок = СтрШаблон("%1%2%3",
		НСтр("ru='Отсканируйте марку'"),
		Символы.ПС,
		ПредставлениеТовара);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаМаркаНайденаВЧеке(ПараметрыШтрихкода)
	
	ТекстЗаголовка = НСтр("ru = 'Ошибка ввода кода маркировки.'");
	ТекстОшибки = НСтр("ru = 'Товар с таким кодом маркировки уже добавлен в чек'");
	ПоказатьПредупреждение(, ТекстОшибки, , ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаМаркаВведена(КонтекстПроверкиКонтрольнойМарки)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		НастроитьТекущееКоличество(ТекущаяСтрока);
		НастроитьДоступностьКомандИзмененияКоличества(ТекущаяСтрока);
	КонецЕсли;
	
	ЭтоОбработкаСопоставленияТовара = КонтекстПроверкиКонтрольнойМарки.ЭтоОбработкаСопоставленияТовара;
	
	Если ПроверкаМаркиВозможна(КонтекстПроверкиКонтрольнойМарки.КодМаркировки,
			КонтекстПроверкиКонтрольнойМарки.ОсобенностьУчета, КонтекстПроверкиКонтрольнойМарки.Организация) Тогда
		
		КонтекстПроверкиКонтрольнойМарки.КонтекстВызова = "ЗавершитьВводШтрихкодаМаркаВведена";
		ОбработатьКонтрольнуюМарку(КонтекстПроверкиКонтрольнойМарки);
		
	Иначе
		ДобавитьТоварПоДаннымМарки(ЭтоОбработкаСопоставленияТовара);
		УстановитьФокусНаТовареТребующемВводаМарки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьВводШтрихкодаУпаковкаНеНайдена(ТекущаяНоменклатура)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая
		ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара Тогда
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		ТекущийТоварНаименование = НСтр("ru = ''");
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаИнфоОшибка);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	
	ТекстЗаголовка = НСтр("ru='Сообщите администратору.
								|Не найдена упаковка'");
	ТекстОшибки = СтрЗаменить(НСтр("ru='Для товара %1 не найдена упаковка'"), "%1", ТекущаяНоменклатура.Наименование);
	
	Элементы.ТекстПредупреждениеЗаголовок.Заголовок = ТекстЗаголовка;
	Элементы.ТекстПредупреждениеОшибка.Заголовок = ТекстОшибки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкода(ПараметрыДляОбработкиШтрихкода)
	
	Если НЕ ОжидатьВводМарки Тогда
		Элементы.Товары.ТекущаяСтрока = ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки;
	КонецЕсли;
	
	Если НЕ Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		
		Если СкидкиРассчитаны Тогда
			ОтменитьСкидки();
		КонецЕсли;
		
		ОбновитьИнформациюНаДисплееПокупателя("ДобавлениеТовара");
		
		ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
		
		КодМаркировки = ДанныеСтроки.КодМаркировки;
		ОсобенностьУчета = ДанныеСтроки.ОсобенностьУчета;
		Организация = ДанныеСтроки.Организация;
		
		Если ПроверкаМаркиВозможна(КодМаркировки, ОсобенностьУчета, Организация) Тогда
			
			КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
			ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, ДанныеСтроки);
			КонтекстПроверкиКонтрольнойМарки.КонтекстВызова = "ЗавершитьВводШтрихкода";
			ОбработатьКонтрольнуюМарку(КонтекстПроверкиКонтрольнойМарки);
			
		Иначе
			
			ТекущийТоварКоличество = ДанныеСтроки.КоличествоУпаковок;
			РассчитатьСуммуВСтрокеТабличнойЧасти();
			РассчитатьСуммуОплатыБонусами();
			НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
			
			Если (ДанныеСтроки.ПроверятьЗаполнениеСерий И НЕ ЗначениеЗаполнено(ДанныеСтроки.Серия))
				ИЛИ (ДанныеСтроки.ПроверятьЗаполнениеПартий И НЕ ЗначениеЗаполнено(ДанныеСтроки.Партия)) Тогда
				ОткрытьСтраницуСерии();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеСтроки.Весовой И ПараметрыДляОбработкиШтрихкода.Свойство("ДобавлятьВесСПодключенныхВесов") Тогда
			ВесТекущегоТовара();
		КонецЕсли;
		
		НастроитьДоступностьПробитьЧек();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаНабора()
	
	ЕстьНезаполненныеДанные();
	
	Если НЕ ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) Тогда
	
		ОбновитьИнформациюНаДисплееПокупателя("ДобавлениеТовара");
		
		Если Объект.Товары.Количество() > 0 Тогда
			НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
		КонецЕсли;
			
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		РассчитатьСуммуОплатыБонусами();
		
		РучноеСопоставлениеТовара = Ложь;
		ДанныеДляРучногоСопоставления = Неопределено;
		КодМаркиВРаботе = НСтр("ru = ''");
		
		Если ЗапрашиватьПодтверждениеВозраста18Плюс Тогда
			Если СостояниеПодтвержденияВозраста = "" ИЛИ СостояниеПодтвержденияВозраста = "Нет18" Тогда
				Если ТоварСВозрастнымОграничением() Тогда
					ДанныеДобавляемогоТовара = Новый Структура;
					ДанныеДобавляемогоТовара.Вставить("ВыборТовараВручную");
					ПереключитьНаСтраницуПодтвержденияВозраста();
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СписокДобавленныхСтрокТоваров.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаЗаполнитьТаблицуДляВыбора(ПараметрыШтрихкода)
	
	Адрес = ПараметрыШтрихкода.ТаблицаДляВыбораНоменклатуры;
	
	Если ЕстьСвойство(ПараметрыШтрихкода, "КодМарки") Тогда
		КодМаркиВРаботе = ПараметрыШтрихкода.КодМарки;
	КонецЕсли;
	
	ОткрытьКаталогКлиент();
	ЗаполнитьДанныеТаблицыДляВыбораНоменклатуры(Адрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОшибкуЕГАИС(ПараметрыШтрихкода)
	
	ТекстЗаголовка = НСтр("ru = 'Ошибка ЕГАИС.'");
	ТекстОшибки = ПараметрыШтрихкода.ОшибкаЕГАИС;
	
	Если Объект.Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(, ТекстОшибки, , ТекстЗаголовка);
	Иначе
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТаблицыДляВыбораНоменклатуры(Адрес)
	
	ТаблицаДляВыбора = ПолучитьИзВременногоХранилища(Адрес);
	
	СписокНоменклатуры = Новый СписокЗначений;
	СписокХарактеристик = Новый СписокЗначений;
	
	Если НЕ ТаблицаДляВыбора.Колонки.Найти("ВладелецПодарка") = Неопределено 
		И ТаблицаДляВыбора.Количество() Тогда
		
		ТекущийВладелецПодарка = ТаблицаДляВыбора[0].ВладелецПодарка;
		СтруктураОтбора = Новый Структура("ВладелецПодарка", ТекущийВладелецПодарка);
		
		ТаблицаДляВыбора = ТаблицаДляВыбора.НайтиСтроки(СтруктураОтбора);
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляВыбора Цикл
		
		СписокНоменклатуры.Добавить(СтрокаТаблицы.Номенклатура);
		СписокХарактеристик.Добавить(СтрокаТаблицы.Характеристика);
		
	КонецЦикла;
	
	ЭлементОтбора = СписокТоваров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокНоменклатуры;
	
	// Проверка, на случай, если в конфигурации отключено использование характеристик в настройках
	ДоступноеПолеОтбора = СписокТоваров.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Характеристика");
	Если ДоступноеПолеОтбора <> Неопределено Тогда
		ЭлементОтбора = СписокТоваров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Характеристика");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = СписокХарактеристик;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПодаркиПоТекущемуВладельцу(ОчищатьСкидки)
	
	Если ЗначениеЗаполнено(ТекущийВладелецПодарка) Тогда
		ТаблицаПодарковКУдалению = ТаблицаПодарков.НайтиСтроки(Новый Структура("ВладелецПодарка", ТекущийВладелецПодарка));
		Для Каждого СтрокаПодарка Из ТаблицаПодарковКУдалению Цикл
			ТаблицаПодарков.Удалить(СтрокаПодарка);
		КонецЦикла;
		
		Если ОчищатьСкидки Тогда
			СкидкаНаценка = СкидкаПоТекущемуВладельцуПодарка();
			ТаблицаСкидокКУдалению = ТаблицаСкидкиНаценки.НайтиСтроки(Новый Структура("СкидкаНаценка", СкидкаНаценка));
			Для Каждого СтрокаСкидки Из ТаблицаСкидокКУдалению Цикл
				ТаблицаСкидкиНаценки.Удалить(СтрокаСкидки);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийВладелецПодарка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличествоВесовогоТовара(ТекущаяСтрока, УвеличитьКоличество)
	
	Если УвеличитьКоличество Тогда
		
		ТекущийЭлемент = Элементы.ТекущийТоварКоличество;
		УстановитьТолькоПросмотрЭлементаФормы(Элементы.ТекущийТоварКоличество, Ложь);
		
	Иначе
		
		ТекущийТоварКоличество = 0;
		ТекущаяСтрока.Количество = 0;
		ТекущаяСтрока.КоличествоУпаковок = 0;
		
	КонецЕсли;
	
	ПересчитатьСуммы(ТекущаяСтрока, Истина);
	ПересчетКоличестваТовара(ТекущаяСтрока);
	ВызватьАвтоматическийРасчетСкидокВРежимеКСО();
	РассчитатьСуммуОплатыБонусами();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьГорячиеКлавиши()
	
	Если РежимКассыСамообслуживания Или НЕ ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменКомандСкидок = МассивКомандДляЗаполнения();
	Итератор = 0;
	Для Каждого Команда Из ТекущаяНастройкаРМК.ГорячиеКлавиши Цикл
		
		КомандаНаФорме = Элементы.Найти(Команда.ИмяКнопки);
		Если НЕ КомандаНаФорме = Неопределено Тогда
			
			СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[Команда.Клавиша],
				Команда.АкселераторAlt,
				Команда.АкселераторCtrl,
				Команда.АкселераторShift);
				
			ТекстСочетания = ВернутьТекстСочетанияКлавиш(СочетаниеКлавиш);
				
			Если Команда.ИмяКнопки = "ПробитьЧек" Тогда
				Элементы.ОсновнаяКомандаРаботыСЧеком.СочетаниеКлавиш = СочетаниеКлавиш;
			ИначеЕсли Команда.ИмяКнопки = "ОплатаКартой" Тогда
				Элементы.КомандаОплатыКартой.СочетаниеКлавиш = СочетаниеКлавиш;
			ИначеЕсли Команда.ИмяКнопки = "ОплатаНаличными" Тогда
				Элементы.КомандаОплатыНаличными.СочетаниеКлавиш = СочетаниеКлавиш;
			ИначеЕсли Команда.ИмяКнопки = "ОплатаБонусами" Тогда
				Элементы.КомандаОплатыБонусами.СочетаниеКлавиш = СочетаниеКлавиш;
			Иначе
				КомандаНаФорме.СочетаниеКлавиш = СочетаниеКлавиш;
			КонецЕсли;
			
			ЗаполнитьПодсказки(Команда, ТекстСочетания);
			
		КонецЕсли;
		
		Если НЕ МассивИменКомандСкидок.Найти(Команда.ИмяКнопки) = Неопределено Тогда
			Итератор = Итератор + 1;
			ЗаполнитьДанныеГорячиеКлавиши(Команда.ЗаголовокКнопки, Итератор, ТекстСочетания);
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьТиповыеГорячиеКлавиши()
	
	СочетаниеКлавишИзСтроки = ЗначениеИзСтрокиВнутр("{""#"",69cf4251-8759-11d5-bf7e-0050bae2bc79,1,{0,27,0}}");
	
	Если НЕ СочетаниеКлавишИзСтроки = Неопределено Тогда
		Команды.ГорячаяКлавишаESC.СочетаниеКлавиш = СочетаниеКлавишИзСтроки;
	КонецЕсли;
	
	СочетаниеКлавишиDel = ЗначениеИзСтрокиВнутр("{""#"",69cf4251-8759-11d5-bf7e-0050bae2bc79,1,{0,46,0}}");
	Если Не СочетаниеКлавишиDel = Неопределено Тогда
		Элементы.ГорячаяКлавишаDel.СочетаниеКлавиш = СочетаниеКлавишиDel;
	КонецЕсли;
	
	СочетаниеКлавишиEnter = ЗначениеИзСтрокиВнутр("{""#"",69cf4251-8759-11d5-bf7e-0050bae2bc79,1,{0,13,0}}");
	Если Не СочетаниеКлавишиEnter = Неопределено Тогда
		Элементы.ГорячаяКлавишаEnter.СочетаниеКлавиш = СочетаниеКлавишиEnter;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСменуКлиент()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаКассККМОрганизаций.Количество() > 1 Тогда
		
		ПереключитьНаСтраницуВыбораКассыККМ();
		Возврат;
		
	ИначеЕсли ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
		
		Если ТаблицаКассККМОрганизаций[0].Открыта Тогда
			ПараметрыЗакрытияСмены = Новый Структура();
			ПараметрыЗакрытияСмены.Вставить("ПредлагатьОткрытьСмену", Ложь);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьСменуЗавершение", ЭтотОбъект, ПараметрыЗакрытияСмены);
			ТекстВопроса = НСтр("ru='Уверены, что хотите закрыть смену?'");
			ЗаголовокВопроса = НСтр("ru='Закрытие смены'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
		Иначе
			ОткрытьСменуКлиент();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СверкаИтоговКлиент()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СверкаИтоговЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Уверены, что хотите выполнить сверку итогов?'");
	ЗаголовокВопроса = НСтр("ru='Сверка итогов'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПечатьЧекаКлиент()
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Выбор чека для повторной печати'"));
	ПараметрыОткрытия.Вставить("РежимПечатиЧека", "ПечатьПробитогоЧека");
	ПараметрыОткрытия.Вставить("ВыводитьКомментарийКЧеку", ВыводитьКомментарийКЧеку);
	
	ОбработчикОповещенияОткрытияФормыВыбора = Новый ОписаниеОповещения(
		"ОповещениеОткрытьФормуВыбораЧекаПриПечатиПробитогоЧека", ЭтотОбъект);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОбработчикОповещенияОткрытияФормыВыбора, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммы(ТекущаяСтрока, ОбнулитьСуммыОплат = Ложь)
	
	ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, ТекущаяСтрока, , ИспользоватьАвтоматическиеСкидки);
	ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, ТекущаяСтрока);
	ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(Объект);
	ПересчитатьИтогиТабличнойЧастиТовары(ОбнулитьСуммыОплат);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьСвойство(Объект, ИмяРеквизита)
	Возврат ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(Объект, ИмяРеквизита);
КонецФункции

&НаСервере
Процедура ОчиститьДанныеПокупателя()
	
	РассчитыватьБонусы = Ложь;
	Объект.ДисконтнаяКарта = Неопределено;
	Если НЕ КонтрагентВыбран Тогда
		Объект.Контрагент = Неопределено;
	КонецЕсли;
	ПараметрыКартыЛояльности = Неопределено;
	ЛитералПустойСтроки = НСтр("ru = ''");
	
	Если НЕ ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		НайденнаяКартаДатаРождения = ЛитералПустойСтроки;
		НайденнаяКартаНомер = ЛитералПустойСтроки;
		НайденнаяКартаПочта = ЛитералПустойСтроки;
		НайденнаяКартаТелефон = ЛитералПустойСтроки;
		НайденнаяКартаФИО = ЛитералПустойСтроки;
		НайденнаяКартаСуммаПродаж = ЛитералПустойСтроки;
		
	КонецЕсли;
	
	ОтправкаЧекаПочта = ЛитералПустойСтроки;
	ОтправкаЧекаТелефон = ЛитералПустойСтроки;
	
	КоличествоБонусов = 0;
	БонусыДоступноКОплате = 0;
	ПроцентОплатыБонусами = 0;
	Элементы.СуммаОплаченоБонусами.МаксимальноеЗначение = 0;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Ложь);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьДоступныхБонусов(Элементы, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ЗакрытьФормуДанныеПокупателя, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборМеню, Истина);
	ПараметрыВводаКодаSMS = Неопределено;
	Элементы.ОплатаБонусами.РасширеннаяПодсказка.Заголовок = "";
	РежимПанелиДанныеПокупателя = 0;
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьСозданияКарты(ЭтотОбъект, Истина, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеКартыСервер()
	
	КартаЛояльности = Объект.ДисконтнаяКарта;
	ИсходныеДанные = Новый Структура();
	ИсходныеДанные.Вставить("НомерКартыДоИзменения", НомерКартыДоИзменения);
	ИсходныеДанные.Вставить("МагнитныйКодКартыЛояльности", НайденнаяКартаНомер);
	ИсходныеДанные.Вставить("НовыйEmailКлиента", НайденнаяКартаПочта);
	ИсходныеДанные.Вставить("НовыйНомерТелефонаКлиента", НайденнаяКартаТелефон);
	ОбщегоНазначенияРМКПереопределяемый.СохранитьДанныеКартыЛояльности(КартаЛояльности, ИсходныеДанные);
	
	ИзменитьДоступностьПолейНайденнойКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьСимволGS1(Штрихкод)
	
	СимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
	Разделитель = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
	
	Штрихкод = СтрЗаменить(Штрихкод, СимволGS1, Разделитель);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьПравильностьНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			ТекущаяСтрока.КодМаркировки = ДополнительныеПараметры.Штрихкод;
			
			КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
			ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, ТекущаяСтрока);
			
			ЗавершитьВводШтрихкодаМаркаВведена(КонтекстПроверкиКонтрольнойМарки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьИнтерфейсРабочегоМестаКассира(ОчищатьДисплейПокупателя = Истина)
	
	Интервал = ?(ОчищатьДисплейПокупателя, 0.5, 15);
	ПодключитьОбработчикОжидания("ОбработкаПростояДисплеяПокупателя", Интервал, Истина);
	ОчиститьДанныеКартыЛояльности();
	СоздатьНовыйНабор(ПараметрыПустойСтраницы);
	НачатьЗавершениеСообщенияОбОплате();
	ПривестиПараметрыПробитияЧекаКЗначениямПоУмолчанию();
	ОбновитьДанныеБыстрыхТоваров();
	ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
	Если НачинатьНовыйЧекВРежимеСкупка Тогда
		ПереключитьРежимНаСкупка();
	Иначе
		СформироватьЗаголовок();
	КонецЕсли;
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	НастроитьЭлементыФормы(Элементы.Страницы.ТекущаяСтраница, Ложь);
	НастроитьВидимостьОплатыQRКодом(Истина);
	ОбработатьИзменениеТаблицыТоваровНаКлиенте();
	
	ПлиткаДомойКлиент();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СистемыНалогообложенияДоступныеВКассеККМ(ИдентификаторУстройства)
	
	СистемыНалогообложения = Новый Массив();
	
	Если ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		
		ПараметрыРегистрацииУстройства =
			ОборудованиеЧекопечатающиеУстройстваВызовСервера.ПараметрыРегистрацииУстройства(ИдентификаторУстройства);
		
		Если ПараметрыРегистрацииУстройства.Свойство("КодыСистемыНалогообложения")
			И ЗначениеЗаполнено(ПараметрыРегистрацииУстройства.КодыСистемыНалогообложения) Тогда
			
			ПрименяемыеКодыНалогообложения = ПараметрыРегистрацииУстройства.КодыСистемыНалогообложения;
			
			МассивКодовСНО = СтрРазделить(ПрименяемыеКодыНалогообложения, ",");
			
			Для Каждого КодСНО Из МассивКодовСНО Цикл
				
				Если КодСНО = "3" Тогда
					Продолжить;
				КонецЕсли;
				
				СНО = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СистемаНалогообложенияККТПоКоду(Число(КодСНО));
				СистемыНалогообложения.Добавить(СНО);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СистемыНалогообложения;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаБНОплатыСПодключеннымЭквайрингом(ЧекККМ)
	
	СуммаОплат = 0;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСуммуБНОплатыЧекаККМ(ЧекККМ, СуммаОплат);
	
	Возврат СуммаОплат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СистемаНалогообложенияЧека(ЧекККМ)
	Возврат ОбщегоНазначенияРМК.СистемаНалогообложенияЧека(ЧекККМ);
КонецФункции

&НаСервере
Процедура СопоставитьСТекущейСтрокой(Отказ)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	ЗаполнитьДанныеРучногоСопоставления(ТекущаяСтрока, ТекущаяСтрока.ОсобенностьУчета, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЗаказаПокупателя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		ОформитьРежимНовогоЧека("Продажа");
		Возврат;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если ЕстьСвойство(Результат, "ПечатьЗаказа") Тогда
			ОформитьРежимНовогоЧека("Продажа");
			Если Результат.ПечатьЗаказа Тогда
				НапечататьЗаказПокупателя(Результат.ДокументЗаказ);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	ЗаполнитьДанныеИзЗаказаПокупателя(Результат, Отказ, ОписаниеОшибки);
	
	Если НЕ Отказ Тогда
		СформироватьЗаголовок();
		ПересчитатьКэшСкидкиНаценки();
		УстановитьАктивностьСтроки();
		ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
		НастроитьФормуВРежимПродажаПоЗаказу();
		Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект) Тогда
			ЗавершитьВводШтрихкодаНайденаКарта(КодВозвратаДиалога.Нет);
		КонецЕсли;
		ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
		Если ЭтоВозврат Тогда
			Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаВозврат;
		КонецЕсли;
		Если СуммаОплаченоВРассрочку > 0 Тогда
			ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
			ПараметрыПересчета.ПоКомандеПредоплата = Истина;
			РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		ИначеЕсли СуммаОплаченоЗачетАванса > 0 Тогда
			РассчитатьСуммыОплаты();
		КонецЕсли;
		ОбщегоНазначенияРМККлиентПереопределяемый.ПослеВыбораЗаказаПокупателя(ЭтотОбъект);
	Иначе
		ОформитьРежимНовогоЧека("Продажа");
		ПоказатьПредупреждение(, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыборДокументаБезналичнойОплаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		ОформитьРежимНовогоЧека("Продажа");
		Возврат;
		
	КонецЕсли;
	
	ЭтоДокументБезналичнойОплаты = Ложь;
	Если ЕстьСвойство(Результат, "ДокументРасчета") Тогда
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьПризнакЭтоДокументБезналичнойОплаты(
			Результат.ДокументРасчета,
			ЭтоДокументБезналичнойОплаты);
	КонецЕсли;
	
	Если ЭтоДокументБезналичнойОплаты Тогда
		
		ЗаполнитьДанныеПоДокументуБезналичнойОплаты(Результат);
		СформироватьЗаголовок();
		УстановитьАктивностьСтроки();
		ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
		РассчитатьСуммыОплаты();
		НастроитьФормуВРежимБанковскогоПлатежа();
		НастроитьДоступностьПробитьЧек();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыборДокументаРасчета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		ОформитьРежимНовогоЧека("Продажа");
		ЭтоЗачетАванса = Ложь;
		ЭтоОплатаРассрочки = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ОбработатьВыборДокументаРасчета(Результат);
	СформироватьЗаголовок();
	УстановитьАктивностьСтроки();
	
	Если РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		ЗакрытьФормуДанныеПокупателяСОтменойПробитияЧека();
	КонецЕсли;
	
	ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
	РассчитатьСуммыОплаты();
	НастроитьФормуВРежимДокументРасчета();
	НастроитьДоступностьПробитьЧек();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборДокументаРасчета(Результат)
	
	ОбщегоНазначенияРМКПереопределяемый.ОбработатьВыборДокументаРасчета(Результат, ЭтотОбъект);
	ДополнитьСведенияОНоменклатуре();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуВРежимБанковскогоПлатежа()
	
	ВыбранБанковскийПлатеж = Истина;
	
	НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРедактированияСтрокиКорзины, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВидовОплат, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуВРежимДокументРасчета()
	
	ТекущаяСтраница = Элементы.СтраницаПустая;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ТекущаяСтраница = Элементы.СтраницаОбщая;
	КонецЕсли;
	
	НастроитьЭлементыФормы(ТекущаяСтраница, Истина);
	
	Если ЭтоЗачетАванса ИЛИ ЭтоОплатаРассрочки Тогда
		
		СуммаОплаченоЗачетАванса = СуммаОстаткаДокументаРасчета;
		ОплатаЗачетАвансаКлиент();
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ЗачетАванса, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыЗачетАванса, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Ложь);
		ЗаполнитьТаблицуОплат();
		
	КонецЕсли;
	
	Если ЭтоОплатаРассрочки И СуммаОплаченоЗачетАванса = 0 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуВРежимПродажаПоЗаказу()
	
	Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаПродажа;
	
	НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ЗачетАванса, Ложь);
	
	Если ЭтоЗачетАванса Или ЭтоОплатаРассрочки Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыЗачетАванса, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Истина);
	КонецЕсли;
	
	Если ЭтоВнесениеПредоплатыПоЗаказу Или ЭтоОплатаРассрочки Тогда
		Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаПредоплата;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиРасчетаСкидок, Ложь);
	ИспользоватьАвтоматическиеСкидки = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеИзЗаказаПокупателя(ЗаказПокупателя, Отказ, ОписаниеОшибки)
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПоЗаказу(ЗаказПокупателя, ЭтотОбъект, Отказ, ОписаниеОшибки);
	ДополнитьСведенияОНоменклатуре();
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект) Тогда
		
		НайденнаяКартаЛояльности = Неопределено;
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(Объект.ДисконтнаяКарта, НайденнаяКартаЛояльности);
		ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(Объект.Контрагент, НайденнаяКартаЛояльности);
		КонецЕсли;
		
		Если НЕ НайденнаяКартаЛояльности = Неопределено Тогда
			ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, НайденнаяКартаЛояльности);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоДокументуБезналичнойОплаты(ДанныеВыбора)
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПоДокументуБезналичнойОплаты(ДанныеВыбора, ЭтотОбъект);
	ДополнитьСведенияОНоменклатуре();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНаОснованииЧекаККМ(ЧекККМ)
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьНаОснованииЧекаККМ(ЭтотОбъект, ЧекККМ);
	ДополнитьСведенияОНоменклатуре();
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		
		ТекущаяСтрока.ОтображаетсяСкидкаПроцентом = ЗначениеЗаполнено(ТекущаяСтрока.ПроцентСкидкиНаценки);
		ТекущаяСтрока.ОтображаетсяСкидкаСуммой =
			НЕ ТекущаяСтрока.ОтображаетсяСкидкаПроцентом И ЗначениеЗаполнено(ТекущаяСтрока.СуммаСкидкиНаценки);
			
	КонецЦикла;
	
	Если Не ЭтоЧекКоррекции И Объект.Товары.Количество() > 0 Тогда
		
		АктуализироватьСНО = Истина;
		СНОНовая = Неопределено;
		ТаблицаТоваровЧекаПродажи = Объект.Товары.Выгрузить();
		
		Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
			
			ОрганизацияВСтрокеЧекаПродажи = ТекущаяСтрока.Организация;
			ТекущаяСтрока.Организация = Неопределено;
			ТекущаяСтрока.СистемаНалогообложения = Неопределено;
			
			МассивТоваров = Новый Массив;
			МассивТоваров.Добавить(ТекущаяСтрока.Номенклатура);
			ТаблицаТовары = Новый ТаблицаЗначений;
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуТовары(МассивТоваров, ТаблицаТовары);
			
			Если ТаблицаТовары.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТаблицаТовары[0]);
			КонецЕсли;
			
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОрганизациюПродажи(ТекущаяСтрока, ЭтотОбъект);
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Организация) Тогда
				ТекущаяСтрока.Организация = ОсновнаяОрганизация;
			КонецЕсли;
			
			Если ОрганизацияВСтрокеЧекаПродажи = ТекущаяСтрока.Организация Тогда
				
				Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СистемаНалогообложения) Тогда
					ТекущаяСтрока.СистемаНалогообложения = ОбщегоНазначенияРМК.СНОККТДляОрганизации(ЭтотОбъект, ТекущаяСтрока);
				КонецЕсли;
				
				Если СНОНовая = Неопределено Тогда
					СНОНовая = ТекущаяСтрока.СистемаНалогообложения;
				Иначе
					Если Не СНОНовая = ТекущаяСтрока.СистемаНалогообложения Тогда
						АктуализироватьСНО = Ложь;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				АктуализироватьСНО = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СНОНовая = Неопределено Тогда
			АктуализироватьСНО = Ложь;
		КонецЕсли;
		
		Объект.Товары.Загрузить(ТаблицаТоваровЧекаПродажи);
		
		Если АктуализироватьСНО Тогда
			ВыбраннаяСистемаНалогообложения = СНОНовая;
			Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
				ТекущаяСтрока.СистемаНалогообложения = СНОНовая;
				СтавкаНДС = ПродажиРМК.АктуальнаяСтавкаНДСДляТовара(Объект, ТекущаяСтрока, ТекущаяСтрока.СистемаНалогообложения);
				Если Не ТекущаяСтрока.СтавкаНДС = СтавкаНДС Тогда
					ТекущаяСтрока.СтавкаНДС = СтавкаНДС;
					ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, ТекущаяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект) Тогда
		
		НайденнаяКартаЛояльности = Неопределено;
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(Объект.ДисконтнаяКарта,
				НайденнаяКартаЛояльности);
		ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(Объект.Контрагент,
				НайденнаяКартаЛояльности);
		Иначе
			НайденнаяКартаЛояльности = ЭтотОбъект.ПараметрыКартыЛояльности;
		КонецЕсли;
		
		Если НЕ НайденнаяКартаЛояльности = Неопределено Тогда
			ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, НайденнаяКартаЛояльности);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СекундыВЧасыИМинуты(Секунды)
	
	Результат = Формат(Дата(1, 1, 1) + Секунды, "ДФ=HH:mm");
	
	Если ПустаяСтрока(Результат) Тогда
		Результат = "0:00";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СтруктураПараметровПересчетаСуммОплаты()
	
	ПараметрыПересчета = Новый Структура;
	ПараметрыПересчета.Вставить("ПоКомандеНал", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеБН", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеБезнал", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеВРассрочку", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеЗачетАванса", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеКредит", Ложь);
	ПараметрыПересчета.Вставить("ПриИзмененииБНОплаты", Ложь);
	ПараметрыПересчета.Вставить("ПересчитыватьОкругление", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеПредоплата", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеПереключитьЧек", "");
	ПараметрыПересчета.Вставить("ПоКомандеОплатитьСертификатом", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОтменитьОплатуСертификатом", Ложь);
	ПараметрыПересчета.Вставить("ПриИзмененииСуммыОплатыСертификатом", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОплатаQRКодом", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОтменитьОплатуQRКодом", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОплатитьСертификатомНСПК", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОтменитьОплатуСертификатомНСПК", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеЗаменаТоваров", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОплатитьВсюСуммуБонусами", Ложь);
	
	Возврат ПараметрыПересчета;
	
КонецФункции

&НаКлиенте
Процедура СписокТоваровВыборКлиент(ДанныеВыбора)
	
	ДанныеДобавляемогоТовара = Новый Структура();
	ДанныеДобавляемогоТовара.Вставить("Номенклатура", ДанныеВыбора.Номенклатура);
	ДанныеДобавляемогоТовара.Вставить("Цена", ДанныеВыбора.Цена);
	ДанныеДобавляемогоТовара.Вставить("ВыборТовараВручную", Истина);
	
	Если ДанныеВыбора.Свойство("Характеристика") Тогда
		ДанныеДобавляемогоТовара.Вставить("Характеристика", ДанныеВыбора.Характеристика);
	КонецЕсли;
	Если ДанныеВыбора.Свойство("Упаковка") Тогда
		ДанныеДобавляемогоТовара.Вставить("Упаковка", ДанныеВыбора.Упаковка);
	КонецЕсли;
	
	Если ДанныеВыбора.Свойство("ОсобенностьУчета") Тогда
		ДанныеДобавляемогоТовара.Вставить("ОсобенностьУчета", ДанныеВыбора.ОсобенностьУчета);
	КонецЕсли;
	
	Если ДанныеВыбора.Свойство("ВидНоменклатуры") Тогда
		ДанныеДобавляемогоТовара.Вставить("ВидНоменклатуры", ДанныеВыбора.ВидНоменклатуры);
	КонецЕсли;
	
	Если ДанныеВыбора.Свойство("Организация") Тогда
		ДанныеДобавляемогоТовара.Вставить("Организация", ДанныеВыбора.Организация);
	КонецЕсли;
	
	ЭтоОбработкаСопоставленияТовара = Ложь;
	Если ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) Тогда
		Если ЕстьСвойство(ВременныйКонтекстПроверкиМарки, "ЭтоОбработкаСопоставленияТовара") 
			И ВременныйКонтекстПроверкиМарки.ЭтоОбработкаСопоставленияТовара Тогда
			ЭтоОбработкаСопоставленияТовара = Истина;
		КонецЕсли;
	Иначе
		Если НЕ ДанныеДляРучногоСопоставления = Неопределено Тогда
			ЭтоОбработкаСопоставленияТовара = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьКакРучнойПодбор = (Не ПоискТоваровОткрытИзСтрокиВвода);
	Если ПоискТоваровОткрытИзСтрокиВвода 
		Или (ИспользоватьНовыйПодборТоваров И (ЗакрыватьПодборПриВыбореТовара ИЛИ ЭтоОбработкаСопоставленияТовара)) Тогда
		
		ЗакрытьПоискТоваровКлиент();
		Если ЭтоОбработкаСопоставленияТовара Тогда
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		КонецЕсли;
		
	КонецЕсли;
	
	СписокТоваровВыборПродолжение(ОбработатьКакРучнойПодбор);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПолеВводаСуммыВРассрочку()
	
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	
	ЗаголовокПредоплаты = НСтр("ru = 'Предоплата'");
	Если ЭтоОперацияПродажи Тогда
		
		Если Элементы.Предоплата.Доступность Тогда
			Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Потом'");
			Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Потом'");
			Элементы.СуммаОплаченоВРассрочку.Доступность = Ложь;
		КонецЕсли;
		
		Если Элементы.ОплатаВРассрочку.Доступность Тогда
			Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Рассрочка'");
			Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Рассрочка'");
			Элементы.СуммаОплаченоВРассрочку.Доступность = Истина;
		КонецЕсли;
		
		Если Элементы.ГруппаОплатаПредоплата.Видимость Тогда
			ЗаголовокПредоплаты = НСтр("ru = 'Потом'");;
		КонецЕсли;
		
	Иначе
		
		Если Элементы.Предоплата.Доступность Тогда
			Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Возврат предоплаты'");
			Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Возврат предоплаты'");
			Элементы.СуммаОплаченоВРассрочку.Доступность = Ложь;
		КонецЕсли;
		
		Если Элементы.ОплатаВРассрочку.Доступность Тогда
			Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Возврат рассрочки'");
			Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Возврат рассрочки'");
			Элементы.СуммаОплаченоВРассрочку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	Элементы.Предоплата.Заголовок = ЗаголовокПредоплаты;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.НастроитьПолеВводаСуммыВРассрочку(ЭтотОбъект, ЭтоОперацияПродажи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуДанныеПокупателяКлиент()
	
	Если ОбщегоНазначенияРМККлиент.ЗапрещенаПредоплатаБезКонтрагента()
		И (ПриемАванса Или ПриемАвансаПоЗаказу) И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Для приема аванса необходимо указать контрагента'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ПредыдущийСлой = Элементы.ОбластьОперативногоУправленияЧеком;
	Если Не ПредыдущийСлойДоДанныхПокупателя = Неопределено Тогда
		ПредыдущийСлой = ПредыдущийСлойДоДанныхПокупателя;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьЭлементовФормыПриПереключенииРежима(ЭтотОбъект,
		ЭтоОперацияПродажи, Ложь);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, ПредыдущийСлой);
	ВернутьОсновнуюКоманднуюПанельЧека();
	УстановитьВидимостьЭлементаФормы(Элементы.ПанельИтоговПоЧекам, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЦифроваяПанель, Ложь);
	РежимЦифровойПанели = РежимыЦифровойПанели.Пустой;
	
	Если ПредыдущийСлой = Элементы.ОбластьОперативногоУправленияЧеком
		И ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект) Тогда
		
		УстановитьФокусНаЭлементеФормыПриВводеОплаты();
		
	КонецЕсли;
	ЭлементВводаДанныхПокупателя = Неопределено;
	НастроитьДоступностьГорячейКлавишиEnter();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаНайденаКарта(Результат, ЗапросДанныхБонусов = Истина) Экспорт
	
	Если НЕ ОжидаетсяОбработкаПослеВыбораВладельца 
		И КонтрагентВыбран Тогда
		ЗапроситьДанныеКарты();
	КонецЕсли;
	
	Если ЗапросДанныхБонусов
		И НЕ ОжидаетсяОбработкаПослеВыбораВладельца Тогда
		ЗапроситьДанныеБонусов();
		ЗапроситьДанныеПродаж();
	КонецЕсли;
	ИзменитьКартинкуВводПокупателя();
	НастроитьЦифровуюПанель();
	УстановитьТекущийЭлементПослеВводаКарты();
	
	ДанныеЗаполнены = ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект);
	ПереключитьНаСтраницуПоискКарты(ДанныеЗаполнены);
	
	ПереключитьНаСтраницуВводаКодаSMS();
	
	Если ЭтоЗачетАванса
		И Объект.Товары.Количество() = 0
		И ОбщегоНазначенияРМККлиент.ЗапрещенаПредоплатаБезКонтрагента() Тогда
		
		ОбщегоНазначенияРМККлиентПереопределяемый.ВыбратьДокументРасчета(ЭтотОбъект);
		
	ИначеЕсли ЭтоОплатаРассрочки
		И Объект.Товары.Количество() = 0
		И ОбщегоНазначенияРМККлиент.ЗапрещенаПредоплатаБезКонтрагента() Тогда
		
		ВыбратьДокументОплатыРассрочки();
		
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ПровестиОпросВладельцаКарты(ЭтотОбъект);
	Если Результат = КодВозвратаДиалога.Да Тогда
		РассчитатьСкидкиКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОпросПоДисконтнойКарте(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	ЗаполнитьФормуПоДисконтнойКарте();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуПоДисконтнойКарте()
	
	НайденнаяКартаЛояльности = Неопределено;
	Если ЗначениеЗаполнено(Объект.Контрагент) И Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(
			Объект.Контрагент, НайденнаяКартаЛояльности);
	Иначе
		ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(
			Объект.ДисконтнаяКарта, НайденнаяКартаЛояльности);
	КонецЕсли;
	
	Если НЕ НайденнаяКартаЛояльности = Неопределено Тогда
		ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, НайденнаяКартаЛояльности);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементПослеВводаКарты()
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека) = Элементы.ГруппаДанныеПокупателя Тогда
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			Если Не КоличествоБонусов = 0 Тогда
				ТекущийЭлемент = Элементы.ОплатитьБонусами;
			Иначе
				ТекущийЭлемент = Элементы.ЗакрытьФормуДанныеПокупателя;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьНезаполненныеДанные(СкрытьОшибкуВеса = Ложь)
	
	ЕстьНезаполненныеДанные = Ложь;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		НеЗаполненаСерия = Ложь;
		НеЗаполненаМарка = Ложь;
		НеЗаполненаПартия = Ложь;
		Если СтрокаТовары.ПроверятьЗаполнениеСерий И Не ЗначениеЗаполнено(СтрокаТовары.Серия) Тогда
			НеЗаполненаСерия = Истина;
			ОткрытьСтраницуСерии(СтрокаТовары);
		КонецЕсли;
		
		Если СтрокаТовары.НеобходимостьВводаКодаМаркировки И Не ЗначениеЗаполнено(СтрокаТовары.КодМаркировки)
			И НЕ ЭтоЧекКоррекции Тогда
			НеЗаполненаМарка = Истина;
		КонецЕсли;
		
		Если СтрокаТовары.ПроверятьЗаполнениеПартий И Не ЗначениеЗаполнено(СтрокаТовары.Партия) Тогда
			НеЗаполненаПартия = Истина;
			ОткрытьСтраницуСерии(СтрокаТовары);
		КонецЕсли;
		
		Если НеЗаполненаМарка Или НеЗаполненаСерия Или НеЗаполненаПартия Тогда
			Элементы.Товары.ТекущаяСтрока = СтрокаТовары.ПолучитьИдентификатор();
			ЕстьНезаполненныеДанные = Истина;
			Прервать;
		КонецЕсли;
		
		Если СтрокаТовары.Количество = 0 Тогда
			
			Если ДобавленаНоваяСтрокаКорзины
				И ТекущийТоварИдентификатор <> СтрокаТовары.ПолучитьИдентификатор() Тогда
					РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
			КонецЕсли;
			
			ЕстьНезаполненныеДанные = Истина;
			Элементы.Товары.ТекущаяСтрока = СтрокаТовары.ПолучитьИдентификатор();
			
			ЭтоВесовойНефасованныйТовар = СтрокаТовары.Весовой И Не СтрокаТовары.Фасованный;
			Если Не (ЭтоВесовойНефасованныйТовар И (СкрытьОшибкуВеса Или ЭлектронныеВесыЗаняты)
					И ТекущийТоварИдентификатор = СтрокаТовары.ПолучитьИдентификатор()) Тогда
					
				ТекстЗаголовка = НСтр("ru = 'Не указан вес.'");
				Если ЭтоВесовойНефасованныйТовар И РежимКассыСамообслуживания Тогда
					ТекстВес = СтрШаблон("%1 ", НСтр("ru = 'В строке не указан вес. Нажмите кнопку'"));
					Если ЗначениеЗаполнено(ТаблицаЭлектронныхВесов) Тогда
						ТекстВесПродолжение = СтрШаблон(" %1", НСтр("ru = 'для получения веса.'"));
					Иначе
						ТекстВесПродолжение = СтрШаблон(" %1", НСтр("ru = 'для ввода веса.'"));
					КонецЕсли;
					ТекстОшибки = Новый ФорматированнаяСтрока(ТекстВес, БиблиотекаКартинок.Scales, ТекстВесПродолжение);
				Иначе
					ТекстОшибки = ?(ЭтоВесовойНефасованныйТовар, НСтр("ru = 'В строке не указан вес.'"),
						НСтр("ru = 'В строке не указано количество.'"));
				КонецЕсли;
				ПараметрыОшибки = Новый Структура;
				ПараметрыОшибки.Вставить("НеВызыватьЗаменуПрав", Истина);
				ПараметрыОшибки.Вставить("ЭтоПредупреждение", Истина);
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПриемАванса И Не ПриемАвансаПоЗаказу Тогда
			
			Если СтрокаТовары.Цена = 0 Тогда
				
				Если ДобавленаНоваяСтрокаКорзины
					И ТекущийТоварИдентификатор <> СтрокаТовары.ПолучитьИдентификатор() Тогда
						РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
				КонецЕсли;
				
				ЕстьНезаполненныеДанные = Истина;
				ТекущийЭлемент = Элементы.ТекущийТоварЦенаИзКарточки;
				Элементы.Товары.ТекущаяСтрока = СтрокаТовары.ПолучитьИдентификатор();
				
				ТекстЗаголовка = НСтр("ru = 'Укажите цену'");
				ТекстОшибки = НСтр("ru = 'В строке не указана цена.'");
				ПараметрыОшибки = Новый Структура;
				ПараметрыОшибки.Вставить("ЭтоПредупреждение", Истина);
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьНезаполненныеДанные Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьНезаполненныеДанные;
	
КонецФункции

&НаСервере
Процедура СоздатьЛокальноКартуЛояльности(СтруктураРезультат)
	ОбщегоНазначенияРМКПереопределяемый.СоздатьЛокальноКартуЛояльности(СтруктураРезультат, ЭтотОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодарочныйСертификатПоГУИД(ГУИД)
	
	ПодарочныйСертификат = Неопределено;
	ОбщегоНазначенияРМКПереопределяемый.ПодарочныйСертификатПоГУИД(ГУИД, ПодарочныйСертификат);
	Возврат ПодарочныйСертификат;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьДанныеПодарочногоСертификата(РазблокироватьСертификат = Ложь)
	
	Если РазблокироватьСертификат Тогда 
		РазблокироватьОбъектСервераЛояльности("giftcard");
	КонецЕсли;
	
	НомерСертификата = "";
	ПодарочныйСертификат = Неопределено;
	ВыбранныйСертификат = Неопределено;
	СуммаОстаткаСертификатов = 0;
	СуммаСертификата = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьОплатыПодарочнымиСертификатами(ОтменитьОплатуСертификатами = Ложь, ОплатитьСертификатом = Ложь)
	
	Если Элементы.НайтиСертификат.Видимость Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Ложь);
		Если ТаблицаПодарочныхСертификатов.Количество() = 0 Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект,
				Элементы.ГруппаДополнительноеУправлениеЧеком);
		КонецЕсли;
		
	Иначе
		
		УстановитьВидимостьЭлементаФормы(Элементы.НайтиСертификат, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияОплатаСертификатами, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.НомерСертификата, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияСуммаСертификата, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатитьСертификатом, Ложь);
		
	КонецЕсли;
	
	Если ОтменитьОплатуСертификатами Тогда
		
		ЕстьСертификаты = (ТаблицаПодарочныхСертификатов.Количество() > 0);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатами, ЕстьСертификаты);
		
	КонецЕсли;
	
	Если ОплатитьСертификатом Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатами, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Ложь);
		
	КонецЕсли; 
	
	Для Каждого СтрокаОплатыПодарочнымСертификатом ИЗ ТаблицаПодарочныхСертификатов Цикл
		
		ПоследнийЭлементСуммы = Неопределено;
		ИмяГруппы = "ГруппаСуммаОплатаСертификатом_" + СтрокаОплатыПодарочнымСертификатом.УникальныйИдентификатор;
		Если НЕ Элементы.Найти(ИмяГруппы) = Неопределено Тогда
			Если СтрокаОплатыПодарочнымСертификатом.Организация = ВыбраннаяОрганизация И
				СтрокаОплатыПодарочнымСертификатом.СистемаНалогообложения = ВыбраннаяСистемаНалогообложения Тогда
				
				Элементы[ИмяГруппы].Видимость = Истина;
				ИмяЭлементаСуммы = "СуммаСертификата_" + СтрокаОплатыПодарочнымСертификатом.УникальныйИдентификатор;
				Если Не Элементы.Найти(ИмяЭлементаСуммы) = Неопределено Тогда
					ПоследнийЭлементСуммы = Элементы[ИмяЭлементаСуммы];
				КонецЕсли;
				
			Иначе
				Элементы[ИмяГруппы].Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если (Не ПоследнийЭлементСуммы = Неопределено) И (Не СенсорныйЭкран) Тогда
			ТекущийЭлемент = ПоследнийЭлементСуммы;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбраннаяОрганизацияИСНО()
	
	СтруктураОрганизацииИСНО = Новый Структура();
	СтруктураОрганизацииИСНО.Вставить("Организация", ВыбраннаяОрганизация);
	СтруктураОрганизацииИСНО.Вставить("СистемаНалогообложения", ВыбраннаяСистемаНалогообложения);
	
	Возврат СтруктураОрганизацииИСНО;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьПриложениеПриОшибке(Результат) Экспорт
	
	РежимОсновногоОкна = КлиентскоеПриложение.ПолучитьРежимОсновногоОкна();
	Если РежимОсновногоОкна = РежимОсновногоОкнаКлиентскогоПриложения.РабочееМесто
		Или РежимОсновногоОкна = РежимОсновногоОкнаКлиентскогоПриложения.Киоск Тогда
		ЗавершитьРаботуСистемы(Не Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершение);
	Иначе
		Если ЗначениеЗаполнено(ТорговыйОбъектДляВхода) Или Не ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
			Если ЭтотОбъект.Открыта() Тогда
				ЭтотОбъект.Закрыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизиты(ТекущийНомерСертификата)
	
	ОтборПоНомеру = Новый Структура("НомерСертификата", ТекущийНомерСертификата);
	СтрокиРаспределенныхСертификатов = ТаблицаПодарочныхСертификатов.НайтиСтроки(ОтборПоНомеру);
	
	Для Каждого СтрокиРаспределенногоСертификата ИЗ СтрокиРаспределенныхСертификатов Цикл
		
		// Добавляем реквизиты на форму
		ДобавляемыеРеквизиты = Новый Массив;
		
		ТипРеквизита  = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2));
		ИмяРеквизита  = "СуммаСертификата_" + СтрокиРаспределенногоСертификата.УникальныйИдентификатор;
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита);
		
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		ИмяГруппы = "ГруппаСуммаОплатаСертификатом_" + СтрокиРаспределенногоСертификата.УникальныйИдентификатор;
		ИмяЭлемента = "СуммаСертификата_" + СтрокиРаспределенногоСертификата.УникальныйИдентификатор;
		ИмяДекорации = "ДекорацияУдалитьСертификат_" + СтрокиРаспределенногоСертификата.УникальныйИдентификатор;
		ИмяДекорацииПодсказки = "ДекорацияПодсказкаСертификат" + СтрокиРаспределенногоСертификата.УникальныйИдентификатор;
		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		ЭтотОбъект[ИмяРеквизита] = СуммаСертификата;
		
		// Добавляем поля ввода для новых реквизитов
		ГруппаЭлементов = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаСуммаОплатаСертификатами);
		ГруппаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементов.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаЭлементов.ОтображатьЗаголовок = Ложь;
		Элементы.Переместить(ГруппаЭлементов, ГруппаЭлементов.Родитель, Элементы.ГруппаДобавитьСертификат);
		
		ПараметрыУвеличенногоИнтерфейса = ИнтерфейсРМКСлужебный.ПараметрыУвеличенногоИнтерфейса(ВидОтображения);
		ШрифтСертификата = ?(ВидОтображения = Перечисления.ВидыОтображения.Увеличенный, ПараметрыУвеличенногоИнтерфейса.ШрифтСуммОплат, ШрифтыСтиля.ШрифтОбычныйПолужирный12РМК);
	
		ДекорацияПодсказка = Элементы.Добавить(ИмяДекорацииПодсказки, Тип("ДекорацияФормы"), Элементы[ИмяГруппы]);
		ДекорацияПодсказка.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияПодсказка.Ширина = 11;
		ДекорацияПодсказка.РастягиватьПоГоризонтали = Истина;
		ДекорацияПодсказка.Шрифт = ШрифтСертификата;
		ДекорацияПодсказка.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
	
		ДекорацияУдалить = Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), Элементы[ИмяГруппы]);
		ДекорацияУдалить.Вид = ВидДекорацииФормы.Картинка;
		ДекорацияУдалить.Картинка = БиблиотекаКартинок.ОформлениеКрест;
		ДекорацияУдалить.УстановитьДействие("Нажатие", "ДекорацияУдалитьСертификатНажатие");
		ДекорацияУдалить.Гиперссылка = Истина;
		ДекорацияУдалить.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		
		ПолеСуммаСертификата = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Элементы[ИмяГруппы]);
		ПолеСуммаСертификата.ПутьКДанным = ИмяРеквизита;
		ПолеСуммаСертификата.Вид = ВидПоляФормы.ПолеВвода;
		ПолеСуммаСертификата.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеСуммаСертификата.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		ПолеСуммаСертификата.КнопкаВыбора = Истина;
		Если ВидОтображения = Перечисления.ВидыОтображения.Увеличенный Тогда
			ПолеСуммаСертификата.Ширина = 8;
		Иначе
			ПолеСуммаСертификата.Ширина = 7;
		КонецЕсли;
		ПолеСуммаСертификата.Шрифт = ШрифтСертификата;
		ПолеСуммаСертификата.РастягиватьПоГоризонтали = Ложь;
		ПолеСуммаСертификата.МаксимальноеЗначение = ЭтотОбъект[ИмяРеквизита];
		ПолеСуммаСертификата.УстановитьДействие("ПриИзменении", "СуммаОплатаСертификатамиПриИзменении");
		ПолеСуммаСертификата.УстановитьДействие("НачалоВыбора", "СуммаОплатаСертификатамиНачалоВыбора");
		ПолеСуммаСертификата.УстановитьДействие("АвтоПодбор", "СуммаОплатаСертификатамиАвтоПодбор");
		
		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Сертификат'") + Символы.ПС, Новый Шрифт("Arial", 10, Истина)));
		
		СтрокаПодсказки = Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru = '*%1, не более %2 р.'"),
			Прав(ТекущийНомерСертификата, 4),
			Формат(ЭтотОбъект[ИмяРеквизита], "ЧЦ=10; ЧДЦ=2; ЧГ=0")), 
			Новый Шрифт("Arial", 8, Ложь, , , , 85));
		
		ЧастиСтроки.Добавить(СтрокаПодсказки);
		ТекстПодсказки = Новый ФорматированнаяСтрока(ЧастиСтроки);
		ДекорацияПодсказка.Заголовок = ТекстПодсказки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементФормы(ИмяЭлемента)
	
	ЭлементФормы = Элементы.Найти(ИмяЭлемента);
	
	Если ЭлементФормы <> Неопределено Тогда 
		Элементы.Удалить(ЭлементФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КонтрольОстатковПройден(ТекстОшибки)
	
	ТребуетсяКонтрольОстатков = Ложь;
	КонтрольОстатковПройден = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьНеобходимостьКонтролироватьОстатки(ТребуетсяКонтрольОстатков);
	Если ТребуетсяКонтрольОстатков Тогда
		ОбщегоНазначенияРМКПереопределяемый.ПроверитьНаличиеТоваров(ЭтотОбъект, КонтрольОстатковПройден, ТекстОшибки);
	КонецЕсли;
	
	Возврат КонтрольОстатковПройден;
	
КонецФункции

&НаСервереБезКонтекста
Процедура АннулироватьЧек(ОтложенныйЧек)
	ОбщегоНазначенияРМКПереопределяемый.АннулироватьЧек(ОтложенныйЧек);
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуПодарочныхСертификатов()
	
	Для Каждого СтрокаТаблицы Из ТаблицаПодарочныхСертификатов Цикл
		УдалитьПодарочныйСертификат(СтрокаТаблицы.УникальныйИдентификатор);
	КонецЦикла;
	
	ТаблицаПодарочныхСертификатов.Очистить();
	УстановитьВидимостьКомандыУдаленияВсехСертификатов(Элементы.ГруппаУдалитьСертификаты, ТаблицаПодарочныхСертификатов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьБонусамиКлиент()
	
	РассчитыватьБонусы = Истина;
	
	ЗакрытьФормуЦифровойПанели();
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Истина);
	Элементы.СтраницыОплатаБонусами.ТекущаяСтраница = Элементы.ГруппаОплатаБонусами;
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	КонецЕсли;
	
	РассчитатьСуммуОплатыБонусами();
	
	Если СуммаОплаченоБонусами > 0 Тогда
	
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		ПараметрыПересчета.ПоКомандеОплатитьВсюСуммуБонусами = Истина;
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
	Иначе
		
		АктуализироватьИзменениеЭтапаРаботыСЧекомПриИзмененииОплаты();
	
	КонецЕсли;
	Если Не СенсорныйЭкран Тогда
		ТекущийЭлемент = Элементы.СуммаОплаченоБонусами;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЛокальногоСозданияКартыЛояльности()
	
	ПараметрыСоздания = СерверЛояльностиПолучательДанныхКлиентСервер.РезультатВыполненияЗапросаПоУмолчанию();
	ПараметрыСоздания.Вставить("ТекстСообщения", НСтр("ru = ''"));
	ПараметрыСоздания.Вставить("КартинкаСообщения");
	ПараметрыСоздания.Вставить("Пояснение", НСтр("ru = ''"));
	
	Возврат ПараметрыСоздания;
	
КонецФункции

&НаКлиенте
Процедура СоздатьКартуКлиент()
	
	СтруктураРезультат = Неопределено;
	ПоказатьТиповоеОповещение = Истина;
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы(Истина);
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаВыдатьКартуКлиенту(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
		СтруктураРезультат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		ОбработатьРезультатСозданияКартыНаКлиенте(СтруктураРезультат, ПоказатьТиповоеОповещение);
	ИначеЕсли ОбщегоНазначенияРМККлиент.СоздаватьЛокальноКартуЛояльности() Тогда
		СтруктураРезультат = ПараметрыЛокальногоСозданияКартыЛояльности();
		СоздатьЛокальноКартуЛояльности(СтруктураРезультат);
		Если СтруктураРезультат.ЕстьОшибки Тогда
			ПоказатьОповещениеПользователя(СтруктураРезультат.ТекстОшибки, , СтруктураРезультат.Пояснение,
				БиблиотекаКартинок.Ошибка32);
		ИначеЕсли ЗначениеЗаполнено(СтруктураРезультат.ТекстСообщения) И ЗначениеЗаполнено(СтруктураРезультат.КартинкаСообщения) Тогда
			ПоказатьОповещениеПользователя(СтруктураРезультат.ТекстСообщения, , СтруктураРезультат.Пояснение,
				СтруктураРезультат.КартинкаСообщения);
			ПоказатьТиповоеОповещение = Ложь;
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru = 'Карта успешно создана'"), , , БиблиотекаКартинок.Успешно32);
		КонецЕсли;
		ИзменитьКартинкуВводПокупателя();
		Если ЗначениеЗаполнено(СтруктураРезультат.ТекстСообщения) Тогда
			ИнтерфейсРМКСлужебныйКлиент.УстановитьТекстДекорацииОПерсональныхДанных(Элементы.ДекорацияТекстОПерсональныхДанных,
				СтруктураРезультат.ТекстСообщения);
		ИначеЕсли ЗначениеЗаполнено(СтруктураРезультат.ТекстОшибки) Тогда
			ИнтерфейсРМКСлужебныйКлиент.УстановитьТекстДекорацииОПерсональныхДанных(Элементы.ДекорацияТекстОПерсональныхДанных,
				СтруктураРезультат.ТекстОшибки);
		КонецЕсли;
	Иначе
		СтруктураРезультат = СерверЛояльностиПолучательДанныхКлиентСервер.РезультатВыполненияЗапросаПоУмолчанию();
		СтруктураРезультат.ТекстОшибки = НСтр("ru = 'Не предусмотрено локальное создание карт лояльности в этой базе.'");
		ОбработатьРезультатСозданияКартыНаКлиенте(СтруктураРезультат, ПоказатьТиповоеОповещение);
	КонецЕсли;
	УстановитьДоступностьГруппыСозданияРеквизитов(СтруктураРезультат.ЕстьОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатСозданияКартыНаКлиенте(СтруктураРезультат, ПоказатьТиповоеОповещение)
	
	Если НЕ СтруктураРезультат.ЕстьОшибки Тогда
		
		Если ЗначениеЗаполнено(СтруктураРезультат.ДанныеОтвета) Тогда
			ДанныеОтвета = Неопределено;
			СтрокаJSON = СтруктураРезультат.ДанныеОтвета;
			СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
		КонецЕсли;
		
		Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("Error") И ДанныеОтвета.Error Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Не удалось создать карту'");
			Если ДанныеОтвета.Свойство("ErrorMessage") Тогда
				ТекстПредупреждения = ДанныеОтвета.ErrorMessage;
			КонецЕсли;
			СтруктураРезультат.ЕстьОшибки = Истина;
			ПоказатьТиповоеОповещение = Ложь;
			
			ИнтерфейсРМКСлужебныйКлиент.УстановитьТекстДекорацииОПерсональныхДанных(Элементы.ДекорацияТекстОПерсональныхДанных, ТекстПредупреждения);
			
		ИначеЕсли ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("ElseClient") И ДанныеОтвета.ElseClient Тогда
			
			ТекстСообщения = НСтр("ru = 'Клиент с таким e-mail, но другим телефоном уже существует'");
			КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
			
			ВывестиДанныеСервераЛояльностиОСуществующейКарте(ДанныеОтвета, ТекстСообщения, Истина);
			ПоказатьТиповоеОповещение = Ложь;
			
		ИначеЕсли ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("ExistingCard")
				И ДанныеОтвета.ExistingCard Тогда
			
			ТекстСообщения = НСтр("ru = 'Карта уже существует'");
			КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
			ВывестиДанныеСервераЛояльностиОСуществующейКарте(ДанныеОтвета, ТекстСообщения);
			ПоказатьТиповоеОповещение = Ложь;
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Карта успешно создана'");
			КартинкаСообщения = БиблиотекаКартинок.Успешно32;
			
			Если ТипЗнч(ДанныеОтвета) = Тип("Структура") Тогда
				ЗаполнитьДанныеСозданнойКартыНаСервереЛояльности(ДанныеОтвета);
			КонецЕсли;
		КонецЕсли;
		
		Если ПоказатьТиповоеОповещение Тогда
			ПоказатьОповещениеПользователя(ТекстСообщения, , , КартинкаСообщения);
		КонецЕсли;
		
	Иначе
		
		ДополнительноеПояснение = НСтр("ru = ''");
		
		Если ЕстьСвойство(СтруктураРезультат, "ТекстОшибки") Тогда
			ДополнительноеПояснение = СтрШаблон(НСтр("ru = 'по причине: %1'"), СтруктураРезультат.ТекстОшибки);
		КонецЕсли;
		
		ТекстПредупреждения = СтрШаблон("%1 %2", НСтр("ru = 'Не удалось создать карту'"), ДополнительноеПояснение);
		ИнтерфейсРМКСлужебныйКлиент.УстановитьТекстДекорацииОПерсональныхДанных(Элементы.ДекорацияТекстОПерсональныхДанных, ТекстПредупреждения);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДанныеПокупателяКлиент(ГруппаОперацийДоступна = Ложь)
	
	Если (РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой)
		И ЕстьНезаполненныеДанные() Тогда
		
		ТоварыПриАктивизацииСтроки(Элементы.Товары);
		Возврат;
		
	КонецЕсли;
	
	СтрокаПоискаКарты = НСтр("ru = ''");
	ИнтерфейсРМКСлужебныйКлиент.ОчиститьПоляВводаНовойКартыПриНеобходимости(ЭтотОбъект);
	ОтправлятьРассылкиПоПочте = Ложь;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, ГруппаОперацийДоступна);
	
	ДанныеЗаполнены = ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект);
	Если РежимПанелиДанныеПокупателя = 1 Или Не ДанныеЗаполнены Тогда
		РежимПанелиДанныеПокупателя = 0;
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьГруппДанныхПокупателя(ЭтотОбъект);
	ПоказатьПанельВводаДанныхПокупателя();
	
	Если РежимПанелиДанныеПокупателя = 0 Тогда
		ПереключитьНаСтраницуПоискКарты(ДанныеЗаполнены);
	Иначе
		ПереключитьНаСтраницуОтправкаЧека();
	КонецЕсли;
	НастроитьДоступностьГорячейКлавишиEnter();
	
КонецПроцедуры

&НаКлиенте
Функция ДополнительныеДанныеДляФискализации(БумажныйЧек = Неопределено)
	
	ИдентификаторУстройстваФР = ПодключаемоеОборудование;
	
	ЕстьПродукцияЕГАИС = Ложь;
	ТранспортныйМодуль = Неопределено;
	Отказ = Ложь;
	ТекстОшибки = НСтр("ru = ''");
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("ЕстьПродукцияЕГАИС", ЕстьПродукцияЕГАИС);
	ДополнительныеДанные.Вставить("Отказ", Отказ);
	ДополнительныеДанные.Вставить("ТекстОшибки", ТекстОшибки);
	ДополнительныеДанные.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	ДополнительныеДанные.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
	ДополнительныеДанные.Вставить("ПечататьБумажныйЧек", ?(БумажныйЧек = Неопределено,
		ПечататьБумажныйЧек,
		БумажныйЧек));
	
	Возврат ДополнительныеДанные;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокСерийИПартий()
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСерий = Новый Массив;
	ВидОперации = Объект.ВидОперации;
	МассивУжеДобавленныхСерий = Объект.Товары.Выгрузить().ВыгрузитьКолонку("Серия");
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСписокВыбораСерийНоменклатуры(
		ТекущаяСтрока.Номенклатура,
		МассивСерий,
		МассивУжеДобавленныхСерий,
		ВидОперации);
	
	Элементы.ВыборСерии.СписокВыбора.ЗагрузитьЗначения(МассивСерий);
	
	Если МассивСерий.Количество() > 0 Тогда
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(ТипЗнч(МассивСерий[0]));
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		Элементы.ВыборСерии.ОграничениеТипа = ОписаниеТипа;
	КонецЕсли;
	
	МассивПартий = Новый Массив;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСписокВыбораПартийНоменклатуры(
		ТекущаяСтрока.Номенклатура,
		МассивПартий);
	
	Элементы.ВыборПартии.СписокВыбора.ЗагрузитьЗначения(МассивПартий);
	
	ОбщегоНазначенияРМКПереопределяемый.ПереопределитьПараметрыЗаполненияСерийИПартий(ТекущаяСтрока, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьСтрокуТовара(Форма, ТекущаяСтрока, ТаблицаТовары)
	
	ИндексПредыдущейСтроки = -1;
	ОбъектТовары = Форма.Объект.Товары;
	
	Если ТекущаяСтрока.ЭтоНабор Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерНабора", ТекущаяСтрока.НомерНабора);
		МассивСтрокНабора = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаМассива Из МассивСтрокНабора Цикл
			ТекущийИндекс = ТаблицаТовары.Индекс(СтрокаМассива);
			Если ТекущийИндекс < ИндексПредыдущейСтроки Или ИндексПредыдущейСтроки = -1 Тогда
				ИндексПредыдущейСтроки = ТекущийИндекс;
			КонецЕсли;
			ТаблицаТовары.Удалить(СтрокаМассива);
		КонецЦикла;
	Иначе
		ИндексПредыдущейСтроки = ТаблицаТовары.Индекс(ТекущаяСтрока);
		ТаблицаТовары.Удалить(ТекущаяСтрока);
	КонецЕсли;
	Если ИндексПредыдущейСтроки > 0 Тогда
		ИндексПредыдущейСтроки = ИндексПредыдущейСтроки - 1;
	КонецЕсли;
	Если ОбъектТовары.Количество() > 0 Тогда
		Форма.Элементы.Товары.ТекущаяСтрока = ОбъектТовары[ИндексПредыдущейСтроки].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧекНаВозвратСкупки()
	
	СформироватьЗаголовок(НСтр("ru='Возврат скупки'"));
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Выбор чека для возврата скупки'"));
	ПараметрыОткрытия.Вставить("ВозвратСкупки", Истина);
	ПараметрыОткрытия.Вставить("ВыводитьКомментарийКЧеку", ВыводитьКомментарийКЧеку);
	
	Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации(Истина, Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЧекаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументОплатыРассрочки()

	СформироватьЗаголовок(НСтр("ru='Оплата рассрочки'"));
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Выбор чека для оплаты рассрочки'"));
	ПараметрыОткрытия.Вставить("ВыборДокументаРассрочки", Истина);
	ПараметрыОткрытия.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыОткрытия.Вставить("ВыводитьКомментарийКЧеку", ВыводитьКомментарийКЧеку);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВыборДокументаРасчета", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияРМКПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьСозданияКодаДоступа()
	
	КодДоступаУказан = КодДоступаПользователяУказан();
	ДоступностьКоманды = Не КодДоступаУказан И ЗначениеЗаполнено(КассирДляВхода);
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьФормуСозданияКодаДоступа, ДоступностьКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьДанныеБонусов()
	
	Если Не ИспользоватьОплатуБонусами Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		Если (ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Или ЗначениеЗаполнено(Объект.Контрагент)
				Или ИнтерфейсРМКСлужебныйКлиентСервер.ПолученИдентификаторКартыЛояльности(ПараметрыКартыЛояльности)) Тогда
				
			ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
			ПараметрыВыполненияЗапроса
				= СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПолучитьБонусыКлиента(ПараметрыПодключенияКСерверуЛояльности,
					ЗначенияПараметровМетода);
			Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
			
			Если Результат.ЕстьОшибки Тогда
				
				ДополнительноеПояснение = НСтр("ru = ''");
				
				Если ЕстьСвойство(Результат, "ТекстОшибки") Тогда
					ДополнительноеПояснение = СтрШаблон(НСтр("ru = ' по причине: %1'"), Результат.ТекстОшибки);
				КонецЕсли;
				
				ТекстПредупреждения = СтрШаблон("%1 %2",
					НСтр("ru = 'Не удалось получить сведения о бонусном балансе клиента'"),
						ДополнительноеПояснение);
				ПоказатьПредупреждение(, ТекстПредупреждения);
			
				Возврат;
				
			КонецЕсли;
			
			СтрокаJSON = Результат.ДанныеОтвета;
			Если НЕ СтрНачинаетсяС(СокрЛ(СтрокаJSON), "{") Тогда
				Элементы.ДекорацияВозможноОплатитьБонусами.Заголовок = СтрокаJSON;
				ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьДоступныхБонусов(Элементы, Истина);
				Возврат;
			КонецЕсли;
			
			ДанныеОтвета = Неопределено;
			СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
			
			Если НЕ ДанныеОтвета = Неопределено И ДанныеОтвета.Свойство("ClientNotFound") 
				И НЕ ДанныеОтвета.ClientNotFound Тогда
				
				ИнтерфейсРМКСлужебныйКлиентСервер.ОтобразитьИнформациюОБонусныхБаллах(ЭтотОбъект, ДанныеОтвета);
				Если (Не ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(ЭтотОбъект))
						И ДанныеОтвета.Свойство("CardRef") И ЗначениеЗаполнено(ДанныеОтвета.CardRef) Тогда
					
					ДополнитьПараметрыКартыКлиента(ДанныеОтвета);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли ОбщегоНазначенияРМККлиент.ИспользоватьЗапросБонусовЛокально() Тогда
		
		ДобавитьЛокальнуюКартуКонтрагентаПриНеобходимости();
		ЗапроситьДанныеБонусовЛокально();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗапроситьДанныеБонусовЛокально()
	
	ОбщегоНазначенияРМКПереопределяемый.НайтиБонусыЛокально(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьБонусыПоТоварам(СтруктураОтложенногоПоказаПредупреждения = Неопределено)
	
	ЕстьТоварЗапрещенныйДляОплатыБонусами = Ложь;
	ЕстьНеНулевойТоварЗапрещенныйДляОплатыБонусами = Ложь;
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивКоэффициентов = Новый Массив;

	Если Объект.Товары.Количество() = 1 Тогда 
		МассивКоэффициентов.Добавить(Объект.Товары.Количество());
	Иначе
		
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			
			ВозможноОплатитьБонусами = СтрокаТовары.СуммаБезСкидки
				- СтрокаТовары.СуммаАвтоматическойСкидки - СтрокаТовары.СуммаСкидкиНаценки;
			Если СтрокаТовары.ЗапретОплатыБонусамиСкидками Тогда
				ЕстьТоварЗапрещенныйДляОплатыБонусами = Истина;
				Если ВозможноОплатитьБонусами > 0 Тогда
					ЕстьНеНулевойТоварЗапрещенныйДляОплатыБонусами = Истина;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			МассивКоэффициентов.Добавить(ВозможноОплатитьБонусами);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РаспределенныеБонусы = 
		ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаОплаченоБонусами,
			МассивКоэффициентов, 2);
	
	БонусыРаспределены = ЗначениеЗаполнено(РаспределенныеБонусы);
	
	Индекс						= 0;
	СуммаБонусов				= 0;
	СуммаРаспределенияБонусов	= 0;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		ВозможноОплатитьБонусами = СтрокаТовары.СуммаБезСкидки
				- СтрокаТовары.СуммаАвтоматическойСкидки - СтрокаТовары.СуммаСкидкиНаценки;
		Если СтрокаТовары.ЗапретОплатыБонусамиСкидками Тогда
			ЕстьТоварЗапрещенныйДляОплатыБонусами = Истина;
			Если ВозможноОплатитьБонусами > 0 Тогда
				ЕстьНеНулевойТоварЗапрещенныйДляОплатыБонусами = Истина;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если БонусыРаспределены Тогда
			
			СуммаРаспределенияБонусов = Мин(ВозможноОплатитьБонусами, РаспределенныеБонусы[Индекс]);
			
			Индекс = Индекс + 1;
			
		КонецЕсли;
		
		СтрокаТовары.СуммаСкидкиОплатыБонусом = СуммаРаспределенияБонусов;
		СуммаБонусов = СуммаБонусов + СуммаРаспределенияБонусов;
		
		ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, СтрокаТовары,, ИспользоватьАвтоматическиеСкидки);
		ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, СтрокаТовары);
		
	КонецЦикла;
	
	СуммаОплаченоБонусами = СуммаБонусов;
	ЭтоОплатаВстречнымПредоставлением = (СуммаИтого = СуммаБонусов);
	
	Если ЕстьНеНулевойТоварЗапрещенныйДляОплатыБонусами И (Не ПредупреждениеОПродукцииБезОплатыБонусамиПоказано) Тогда
		
		Если СтруктураОтложенногоПоказаПредупреждения = Неопределено Или (Не СтруктураОтложенногоПоказаПредупреждения.ОтложенноеПредупреждение) Тогда
			ВывестиПредупреждениеОНевозможностиОплатыБонусами();
		Иначе
			СтруктураОтложенногоПоказаПредупреждения.Вставить("ПредупреждениеНужно", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, ДополнительныеПараметрыДляПечати)
	ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, ДополнительныеПараметрыДляПечати);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПредставлениеТовара(ТекущаяСтрока)
	
	ПредставлениеТовара = "";
	Если ТекущаяСтрока.ЭтоНабор Тогда
		ПредставлениеХарактеристики = "";
		Если ЗначениеЗаполнено(ТекущаяСтрока.ХарактеристикаНабора) Тогда
			ПредставлениеХарактеристики = " (" + Строка(ТекущаяСтрока.ХарактеристикаНабора) + ")";
		КонецЕсли;
		ПредставлениеТовара = СтрШаблон("%1%2", ТекущаяСтрока.НоменклатураНабора, ПредставлениеХарактеристики);
	Иначе
		ПредставлениеТовара = ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика;
	КонецЕсли;
	
	ТекущийТоварНаименование = ПредставлениеТовара;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьТекущуюЦену(ТекущаяСтрока)
	
	РазрешеноРедактироватьЦену = Ложь;
	Если ТекущаяСтрока.ЭтоНабор И ТекущаяСтрока.ЦенаНабораСводно Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("НомерНабора", ТекущаяСтрока.НомерНабора);
		
		ЦенаИтого = 0;
		СтрокиНабора = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
		Для Каждого СтрокаНабора Из СтрокиНабора Цикл
			ЦенаИтого = ЦенаИтого + СтрокаНабора.Цена * СтрокаНабора.Количество / СтрокаНабора.КоличествоНаборов;
		КонецЦикла;
		
		ТекущийТоварЦенаИзКарточки = ЦенаИтого;
	Иначе
		ТекущийТоварЦенаИзКарточки = ТекущаяСтрока.Цена;
		ЭтоОперацияПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		ЭтоОперацияСкупка = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииСкупка(Объект.ВидОперации);
		
		Если (ЭтоОперацияПродажа И НЕ ПриемАванса И НЕ ПриемАвансаПоЗаказу)
				ИЛИ ЭтоОперацияСкупка
				ИЛИ ЭтоЗаменаТоваров Тогда
				
			РазрешеноРедактироватьЦену = НЕ (СписокРолейПользователя.НайтиПоЗначению("ПравоИзменятьЦенуРМК") = Неопределено);
		КонецЕсли;
	КонецЕсли;
	ОбщегоНазначенияРМККлиентПереопределяемый.ПереопределитьРазрешениеРедактироватьЦенуДляТекущейСтроки(ЭтотОбъект,
		ТекущаяСтрока, РазрешеноРедактироватьЦену);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, РазрешеноРедактироватьЦену);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьТекущееКоличество(ТекущаяСтрока)
	
	Если ТекущаяСтрока.ЭтоНабор Тогда
		ТекущийТоварКоличество = ТекущаяСтрока.КоличествоНаборов;
	Иначе
		ТекущийТоварКоличество = ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;
	
	НовыйФормат = ?(ТекущаяСтрока.ЗапретитьВводДробногоКоличества, "ЧДЦ=0", "");
	Если Не Элементы.ТекущийТоварКоличество.ФорматРедактирования = НовыйФормат Тогда
		Элементы.ТекущийТоварКоличество.ФорматРедактирования = НовыйФормат;
		Если РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели)
				И ЭлементВводаСуммы = Элементы.ТекущийТоварКоличество Тогда
				
			ЭтоВводСуммы = ЭтоПолеВводаДробнойСуммы(ЭлементВводаСуммы.ТекстРедактирования);
			СменитьЭлементВводаСуммы(ЭлементВводаСуммы, Не ЭтоВводСуммы);
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПодсказкуДляВыбораСерийИПартий(ТекущаяСтрока)
	
	ТекстПодсказки = "";
	
	Если ТекущаяСтрока.НеобходимостьВводаСерии И ТекущаяСтрока.ИспользоватьПартии Тогда
		ТекстПодсказки = НСтр("ru = 'Указать серию и партию.'");
	ИначеЕсли ТекущаяСтрока.НеобходимостьВводаСерии Тогда
		ТекстПодсказки = НСтр("ru = 'Указать серию.'");
	ИначеЕсли ТекущаяСтрока.ИспользоватьПартии Тогда
		ТекстПодсказки = НСтр("ru = 'Указать партию.'");
	КонецЕсли;
	
	Элементы.УказатьСерии.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьТекущееКоличество(ТекущаяСтрока)
	
	Если ТекущаяСтрока.ПоштучноеВыбытие Тогда
		Если ОбщегоНазначенияРМККлиентСервер.ЭтоПивнаяПродукция(ТекущаяСтрока.ОсобенностьУчета) Тогда
			НовоеКоличество = ТекущийТоварКоличество;
		Иначе
			НовоеКоличество = Окр(ТекущийТоварКоличество);
		КонецЕсли;
		Если Не ТекущаяСтрока.КоличествоВПотребительскойУпаковке = 0
			И ТекущаяСтрока.КоличествоВПотребительскойУпаковке < ТекущийТоварКоличество Тогда
			
			НовоеКоличество = ТекущаяСтрока.КоличествоВПотребительскойУпаковке;
		КонецЕсли;
		ТекущийТоварКоличество = НовоеКоличество;
		ТекущаяСтрока.Количество = НовоеКоличество;
		ТекущаяСтрока.КоличествоУпаковок = НовоеКоличество;
		ТекущаяСтрока.ЧастичноеВыбытиеКоличество = НовоеКоличество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСкладаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьСвойство(Результат, "ДанныеСтроки") И ЗначениеЗаполнено(Результат.ДанныеСтроки) Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Склад = Результат.ДанныеСтроки;
		Если ТекущиеДанные.ЭтоНабор Тогда
			НомерНабора = ТекущиеДанные.НомерНабора;
			ЗаполнитьСкладВНаборе(Склад, НомерНабора);
		Иначе
			ТекущиеДанные.ТорговыйОбъект = Склад;
			ДанныеСтроки = Новый Структура("Номенклатура, Характеристика, ТорговыйОбъект, КоличествоОстаток", 
				ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, ТекущиеДанные.ТорговыйОбъект, ТекущиеДанные.КоличествоОстаток);
			ЗаполнитьОстатокСтрокиНаСервере(ДанныеСтроки);
			ТекущиеДанные.КоличествоОстаток = ДанныеСтроки.КоличествоОстаток;
		КонецЕсли;
		
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаСкладВыбран, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеСклада, Ложь);
		ТекущийСклад = СтрШаблон("%1 %2", НСтр("ru = 'Склад:'"), Склад);
		Если ОтображатьОстаток Тогда
			ТекущийТоварОстаток = СтрШаблон(НСтр("ru = 'Доступно: %1 %2'"),ТекущиеДанные.КоличествоОстаток, ТекущиеДанные.ПредставлениеЕдиницыИзмерения);
		КонецЕсли;
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаСкладВыбран);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстатокСтрокиНаСервере(СтрокаТаблицы)
	Если ОтображатьОстаток Тогда
		ТорговыйОбъектОстатки = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ТорговыйОбъект), Объект.ТорговыйОбъект, СтрокаТаблицы.ТорговыйОбъект);
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьКолонкуОстаток(СтрокаТаблицы, ТорговыйОбъектОстатки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборЯчейкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьСвойство(Результат, "ДанныеСтроки") И ЗначениеЗаполнено(Результат.ДанныеСтроки) Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Ячейка = Результат.ДанныеСтроки;
		Если ТекущиеДанные.ЭтоНабор Тогда
			НомерНабора = ТекущиеДанные.НомерНабора;
			ЗаполнитьЯчейкуВНаборе(Ячейка, НомерНабора);
		Иначе
			ТекущиеДанные.Ячейка = Ячейка;
		КонецЕсли;
		
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаЯчейкаВыбрана, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеЯчейки, Ложь);
		ТекущаяЯчейка = СтрШаблон("%1 %2", НСтр("ru = 'Ячейка:'"), Ячейка);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЯчейкаВыбрана);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборНастройкиРМКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ЗакрытьПриложениеПриОшибке(Истина);
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьНастройкуРМК();
	Иначе
		ЗакрытьПриложениеПриОшибке(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуРМК()
	
	Оповещение = Новый ОписаниеОповещения("СозданиеНастройкиРМКЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.НастройкиРабочегоМестаКассира", ,
		ЭтотОбъект,
		УникальныйИдентификатор, , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеНастройкиРМКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьТекущуюНастройкуРМК();
	Если ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		ПриОткрытииФормыПродолжение();
	Иначе
		ОповеститьПользователяОбОтсутствииНастройкиРМК();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииФормыПродолжение()
	
	НастроитьВспомогательноеПодключаемоеОборудование();
	ПодключитьОбработчикОжидания("ИнициализироватьФормуРабочегоМестаКассира", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВспомогательноеПодключаемоеОборудование()

	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ТипОборудованияЭлектронныеВесы =
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ЭлектронныеВесы");
		
		Для Каждого СтрокаТЧ Из Оборудование Цикл
			
			Если СтрокаТЧ.ТипОборудования = ТипОборудованияЭлектронныеВесы Тогда
				
				НовыеЭлекторнныеВесы = ТаблицаЭлектронныхВесов.Добавить();
				НовыеЭлекторнныеВесы.ЭлектронныеВесы = СтрокаТЧ.Ссылка;
				
			КонецЕсли;
			
			ОповещениеПодключенияОборудования = Новый ОписаниеОповещения(
				"ЗавершитьПодключениеОборудованияПоИдентификатору",
				ЭтотОбъект,
				СтрокаТЧ);
			
			МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(ОповещениеПодключенияОборудования,
				УникальныйИдентификатор,
				СтрокаТЧ.Ссылка);
			
		КонецЦикла;
		
		ОбновитьПараметрыТерминалов();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыТерминалов()
	
	Для Каждого Терминал Из ТаблицаТерминалы Цикл
		
		ОборудованиеТерминала = Терминал.ПодключаемоеОборудование;
		ОбработчикПолученияПараметров = Новый ОписаниеОповещения(
		"ЗавершитьПолучениеПараметровТерминала",
		ЭтотОбъект,
		ОборудованиеТерминала);
		
		МенеджерОборудованияКлиент.НачатьПолучениеПараметровУстройства(ОбработчикПолученияПараметров,
			УникальныйИдентификатор,
			ОборудованиеТерминала);
		
	КонецЦикла;
	
	Элементы.СверкаИтогов.Доступность = (ТаблицаТерминалы.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОбОтсутствииНастройкиРМК()
	
	ТекстЗаголовка = НСтр("ru = 'Настройки РМК'");
	Если ДоступноИзменениеНастройкиРМК Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось определить настройки РМК.
									|Создать настройки?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Создать'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отменить'"));
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось определить настройки РМК.
							|Обратитесь к администратору системы.'");
		Кнопки = РежимДиалогаВопрос.ОК;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВыборНастройкиРМКЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение,
		ТекстСообщения,
		Кнопки, , ,
		ТекстЗаголовка);
	
КонецПроцедуры

&НаСервере
Процедура ПродолжитьЗаполнениеФормы()
	
	НастроитьФормуПоТекущемуПользователю();
	НастроитьТиповыеГорячиеКлавиши();
	НастроитьГорячиеКлавиши();
	НастроитьВидОтображения();
	ЗаполнитьПанельИзбранныхТоваров();
	ОбновитьЦеныПлиточногоИнтерфейса();
	ОбновитьКалендарныеОграниченияПродаж();
	ЗаполнитьКэшДействующихЗапретовПродаж();
	ИнтерфейсРМКСлужебный.УстановитьУсловноеОформление(ЭтотОбъект);
	НастроитьРежимКассыСамообслуживанияПервоначально();
	НастроитьРежимКассыСамообслуживания();
	ИнтерфейсРМКСлужебный.НастроитьИспользованиеКнопокВыбораПолей(ЭтотОбъект);
	
	Если ИспользоватьОплатуПлатежнымиКартами Тогда
		ОбщегоНазначенияРМКПереопределяемый.НастроитьОплатуПлатежнымиКартами(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗапускатьОбменИзИнтерфейсаРМК Тогда
		ЗаполнитьУзлыОбмена();
	КонецЕсли;
	
	СоздатьКнопкиОрганизацийНаФорме();
	НастроитьДоступностьСозданияКодаДоступа();
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеКодаДоступаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПрерватьСозданиеКодаДоступа = Результат = Неопределено
		И ((ДополнительныеПараметры = Неопределено)
		ИЛИ (ЗначениеЗаполнено(ДополнительныеПараметры)
		И НЕ ЕстьСвойство(ДополнительныеПараметры, "КодДоступа")
		ИЛИ НЕ ЗначениеЗаполнено(ДополнительныеПараметры.КодДоступа)));
		
	Если ПрерватьСозданиеКодаДоступа Тогда
		Возврат;
	КонецЕсли;
	
	КодКассира = ?(ЗначениеЗаполнено(Результат), Результат, ДополнительныеПараметры.КодДоступа);
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьФормуСозданияКодаДоступа, НЕ ЗначениеЗаполнено(КодКассира));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуПриСозданииНаСервере()
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДанныеДляРМК(ЭтотОбъект);
	ЗаполнитьТекущуюНастройкуРМК();
	АктуализироватьПереченьГруппыКомандЕще();
	ЗаполнитьТаблицуУправляемыхСкидок();
	ЗаполнитьТаблицуВидовКарт();
	
	Если ЗначениеЗаполнено(Объект.ТорговыйОбъект) Или РежимКассыСамообслуживания Тогда 
		ЕстьОшибкиЗаполненияДанныхРМК = Ложь;
		ПроверитьВозможностьРаботы(ЕстьОшибкиЗаполненияДанныхРМК);
		Если ЕстьОшибкиЗаполненияДанныхРМК Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПродолжитьЗаполнениеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьТорговыйОбъект()
	
	ПараметрыОткрытияФормы = Неопределено;
	
	Объект.ТорговыйОбъект = ТорговыйОбъектДляВхода;
	ЗаполнитьФормуПриСозданииНаСервере();
	
	Если Не ПараметрыОткрытияФормы = Неопределено Тогда
		ПроверитьФормуПриОткрытии();
	Иначе
		ОбновитьПараметрыТерминалов();
	КонецЕсли;
	
	ЗаполнитьКнопкиИзбранныхПозиций();
	ЗаполнитьКнопкиПлиток();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормуПриОткрытии(Отказ = Ложь, ОтложеннаяПроверкаКассовойСмены = Неопределено)
	
	ПриОткрытииФормыПродолжение();
	Если ЕстьСвойство(ПараметрыОткрытияФормы, "ТекстСообщения")
		И ЕстьСвойство(ПараметрыОткрытияФормы, "ТекстЗаголовка") Тогда
		
		Если РежимКассыСамообслуживания Или ПараметрыОткрытияФормы.ОшибкаЗапуска = "НастройкаКСО" Тогда
			
			ИнтерфейсРМКСлужебныйКлиентСервер.ВывестиОшибкуОткрытияРабочегоМеста(Элементы,
				ПараметрыОткрытияФормы.ТекстЗаголовка,
				ПараметрыОткрытияФормы.ТекстСообщения);
			
		Иначе
		
			Если ПараметрыОткрытияФормы.ОшибкаЗапуска = "НастройкаРМК" Тогда
				ОповеститьПользователяОбОтсутствииНастройкиРМК();
			Иначе
				Если ПараметрыОткрытияФормы.ОшибкаЗапуска = "КассаККМ"
					Или ПараметрыОткрытияФормы.ОшибкаЗапуска = "РабочееМесто"
					Или ПараметрыОткрытияФормы.ОшибкаЗапуска = "СНО"
					Или ПараметрыОткрытияФормы.ОшибкаЗапуска = "Валюта" Тогда
					Отказ = Истина;
				КонецЕсли;
				Если ПараметрыОткрытияФормы.ОшибкаЗапуска = "Палитра" Тогда
					Оповещение = Неопределено;
				Иначе
					Оповещение = Новый ОписаниеОповещения("ЗакрытьПриложениеПриОшибке", ЭтотОбъект);
				КонецЕсли;
				ПоказатьПредупреждение(Оповещение,
					ПараметрыОткрытияФормы.ТекстСообщения, ,
					ПараметрыОткрытияФормы.ТекстЗаголовка);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЕстьСвойство(ПараметрыОткрытияФормы, "ПроверитьКассовуюСмену") Тогда
		Если ОтложеннаяПроверкаКассовойСмены = Неопределено Тогда
			ПроверитьКассовуюСменуИНайтиКассира();
		Иначе
			ОтложеннаяПроверкаКассовойСмены = Истина;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьМагазинИлиКассира(СменитьМагазин = Ложь)
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	Объект.Кассир = Неопределено;
	КассирДляВхода = Неопределено;
	КодКассира = НСтр("ru = ''");
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	
	Если Не СменитьМагазин Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборМагазинаДляВхода, Ложь);
		ТекущийЭлемент = Элементы.КодКассира;
	Иначе
		ТекущийЭлемент = Элементы.ТорговыйОбъектДляВхода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРежимВыбораПодарочногоСертификатаКлиент(Номенклатура)
	
	ВыбранныйСертификат = Номенклатура;
	ЭтоСерийныйПодарочныйСертификат = ИспользованиеСерий(ВыбранныйСертификат);
	
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель) = Элементы.ГруппаПоискСертификатов Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаПоискСертификатов);
	КонецЕсли;
	Если ЭтоСерийныйПодарочныйСертификат Тогда
		ОплатаСертификатомНаКлиенте();
	Иначе
		НомерСертификата = Неопределено;
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Истина);
		НайтиСертификатКлиент();
	КонецЕсли;
	
	РежимВыбораПодарочногоСертификата = Ложь;
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	
	СписокТоваров.Отбор.Элементы.Очистить();
	ИзменитьСостояниеЗаголовкаСтраницыПоискаТовара(, Истина);
	Если ЭтоСерийныйПодарочныйСертификат Тогда
		ТекущийЭлемент = Элементы.НомерСертификата;
	Иначе
		ТекущийЭлемент = Элементы.ОтменаПоискаСертификата;
	КонецЕсли;
	ТекущийЭлемент = Элементы.ГруппаОплатаСертификатами;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьИнтерфейсРежимаКассыСамообслуживанияКлиент()
	Если РежимКассыСамообслуживания Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьИнтерфейсРежимаКассыСамообслуживания(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьИнтерфейсРежимаКассыСамообслуживания()
	Если РежимКассыСамообслуживания Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьИнтерфейсРежимаКассыСамообслуживания(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьРазмерыКомандВРежимеКассыСамообслуживания()
	Если РежимКассыСамообслуживания Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьРазмерыКомандВРежимеКассыСамообслуживания(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьРежимКассыСамообслуживания()
	НастроитьИнтерфейсРежимаКассыСамообслуживания();
	НастроитьРазмерыКомандВРежимеКассыСамообслуживания();
КонецПроцедуры

&НаКлиенте
Процедура ВыборКассираЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КассирДляВхода = РезультатВыполнения;
	КассирПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КассирПриИзмененииКлиент()
	
	НастроитьДоступностьСозданияКодаДоступа();
	Если ЗначениеЗаполнено(КассирДляВхода) Тогда
		ТекущийЭлемент = Элементы.КодКассира;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЧекПродолжение()
	
	НеобходимоеПраво = "ПравоУдалитьЧекРМК";
	ПравоНаДействие = ЕстьПравоНаДействие(НеобходимоеПраво);
	ТекущаяОперация = "УдалитьЧекРМК";
	
	ЗакрытьФормуЦифровойПанели();
	Если Объект.Оплата.Количество() > 0 Тогда
		
		Если ПравоНаДействие Тогда
			ВыполнитьОтменуОплатыКлиент();
		Иначе
			
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
			ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		Если Не ТипОплаты = "СБП" Тогда
			Если ПравоНаДействие Тогда
				УдалитьЧекКлиент();
				ОбработатьИзменениеТаблицыТоваровНаКлиенте();
			Иначе
				
				ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
				ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОчиститьДанныеКартыЛояльности();
		СоздатьНовыйНабор();
		ПривестиПараметрыПробитияЧекаКЗначениямПоУмолчанию();
		ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
		ПереключитьВРежимПлитки();
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		ОбработатьИзменениеТаблицыТоваровНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьЗапросаБалансаСертификата()
	
	УстановитьВидимостьЭлементаФормы(Элементы.ЗапроситьБалансСертификата, Ложь);
	
	ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	Если ЭтоПродажа Тогда
		Возврат;
	КонецЕсли;
	
	ЗапрашиватьБаланс = Ложь;
	ОбщегоНазначенияРМККлиентПереопределяемый.ОпределитьНеобходимостьЗапросаБалансаСертификата(ЗапрашиватьБаланс);
	Если Не ЗапрашиватьБаланс Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипНоменклатурыСертификат = ОбщегоНазначенияРМККлиент.ТипНоменклатурыПодарочныйСертификат();
	Если Не ТекущаяСтрока.ТипНоменклатуры = ТипНоменклатурыСертификат Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущаяСтрока.НеобходимостьВводаСерии Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ЗапроситьБалансСертификата, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗапроситьБалансСертификатаСервер()
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСертификата = Новый Структура;
	ПараметрыСертификата.Вставить("БалансСертификата", 0);
	ПараметрыСертификата.Вставить("Сертификат", ТекущаяСтрока.Номенклатура);
	ПараметрыСертификата.Вставить("Серия", ТекущаяСтрока.Серия);
	
	ОбщегоНазначенияРМКПереопределяемый.ЗапроситьБалансСертификата(ПараметрыСертификата);
	
	Если НЕ ПараметрыСертификата.БалансСертификата = 0 Тогда
		ТекущийТоварЦенаИзКарточки = ПараметрыСертификата.БалансСертификата;
		ДобавитьСертификатВТаблицу(ЭтотОбъект, ПараметрыСертификата.БалансСертификата, ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПараметрыПодключенияКСерверуЛояльности()
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		ОбновитьПараметрыПодключенияКСерверуЛояльностиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыПодключенияКСерверуЛояльностиНаКлиенте()
	
	ПараметрыПодключенияКСерверуЛояльности = ОбщегоНазначенияРМКВызовСервера.ЗначенияПараметровСервераЛояльности(ТекущаяНастройкаРМК);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварПоСтрокеКлиент()
	
	Если Не ЗначениеЗаполнено(ВводТовараПоСтроке) Тогда
		Возврат;
	КонецЕсли;
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	
	ТребуетсяПовышениеПрав = Ложь;
	ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав);
	Если Не ТребуетсяПовышениеПрав Тогда
		ДобавитьТоварПоСтрокеКлиентПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварПоСтроке(ЭтоТоварСХарактеристикой)
	
	ЭтоТоварСХарактеристикой = ОбщегоНазначенияРМК.ТребуетсяВводХарактеристикиДляНоменклатуры(ВводТовараПоСтроке);
	Если ЭтоТоварСХарактеристикой Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчетаЦены = ОбщегоНазначенияРМК.ПараметрыРасчетаЦены();
	ПараметрыРасчетаЦены.ВидЦены = РозничныйВидЦены;
	ПараметрыРасчетаЦены.ТорговыйОбъект = Объект.ТорговыйОбъект;
	ПараметрыРасчетаЦены.Организация = Объект.Организация;
	ПараметрыРасчетаЦены.Номенклатура = ВводТовараПоСтроке;
	
	ОбщегоНазначенияРМКПереопределяемый.РассчитатьЦенуВыбранногоТовара(ПараметрыРасчетаЦены);
	
	ПараметрыДобавленияТовара = Новый Структура;
	ПараметрыДобавленияТовара.Вставить("Номенклатура", ВводТовараПоСтроке);
	ПараметрыДобавленияТовара.Вставить("Цена", ПараметрыРасчетаЦены.Цена);
	ПараметрыДобавленияТовара.Вставить("Упаковка");
	
	ОбработатьВыборТовараСервер(ПараметрыДобавленияТовара);
	
	ВводТовараПоСтроке = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьЧекКлиент()
	
	Если ОжидаемоеКоличествоЧеков > 1 И ОтложенныйЧекПолностьюОплачен Тогда
		
		Если ККМПоддерживаетПроверкуКодовМаркировки
			И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
			И ВозможноЗакрытьСессиюРегистрацииМарок(Истина) Тогда
			ЗакрытьСессиюРегистрацииМарок();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЧекККМВОбработке) Тогда
			ОтложенныйЧек = ЧекККМВОбработке;
		КонецЕсли;
		ВыполнитьОтменуОплатыКлиент();
		ОчиститьДанныеПромокодов(Истина);
		РазблокироватьОбъектСервераЛояльности("clientbonuses");
		СписатьРазблокироватьПодарочныеСертификаты();
		
		ОтложитьЧекСервер();
		
		НастроитьВидимостьВводаПромокода(Истина);
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		
		СтрокиНаУдаления = Объект.Товары.НайтиСтроки(Новый Структура("Оплачена", Истина));
		
		Если СтрокиНаУдаления.Количество() > 0 Тогда
			
			Для Каждого СтрокаНаУдаление Из СтрокиНаУдаления Цикл
				Объект.Товары.Удалить(СтрокаНаУдаление);
			КонецЦикла;
			
		КонецЕсли;
		
		Объект.Оплата.Очистить();
		
		ОжидаемоеКоличествоЧеков = ОжидаемоеКоличествоЧеков - 1;
		
		Если ПробитыеЧеки.Количество() > 0 Тогда 
			ПробитыеЧеки.Очистить();
		КонецЕсли;
		
		ЧекККМВОбработке = Неопределено;
		ОтложенныйЧек = Неопределено;
		ОтложенныйЧекПолностьюОплачен = Ложь;
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		ПараметрыПересчета.ПоКомандеПереключитьЧек = "НаСледующий";
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
	Иначе
		
		СтрокиНаУдаления = Объект.Товары.НайтиСтроки(Новый Структура("Оплачена", Истина));
		
		Если СтрокиНаУдаления.Количество() > 0 Тогда
			
			Для Каждого СтрокаНаУдаление Из СтрокиНаУдаления Цикл
				Объект.Товары.Удалить(СтрокаНаУдаление);
			КонецЦикла;
			
		КонецЕсли;
		
		Если Объект.Товары.Количество() = 0 Тогда
			ОбработатьИзменениеТаблицыТоваровНаКлиенте();
			Возврат;
		КонецЕсли;
		
		Если СуммаОплаченоСБП > 0 Или СуммаОплаченоЮКасса > 0 Тогда
			Объект.Оплачивается = Истина;
		Иначе
			Объект.Оплата.Очистить();
		КонецЕсли;
		
		Если ККМПоддерживаетПроверкуКодовМаркировки
			И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
			И ВозможноЗакрытьСессиюРегистрацииМарок(Истина) Тогда
			ЗакрытьСессиюРегистрацииМарок();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЧекККМВОбработке) Тогда
			ОтложенныйЧек = ЧекККМВОбработке;
		КонецЕсли;
		ВыполнитьОтменуОплатыКлиент();
		ОжидаемоеКоличествоЧеков = 1;
		ОчиститьДанныеПромокодов(Истина);
		ТаблицаПодарков.Очистить();
		РазблокироватьОбъектСервераЛояльности("clientbonuses");
		СписатьРазблокироватьПодарочныеСертификаты();
		ПроверитьОчиститьКартуЛояльностиПриОткладыванииЧека();
		
		ОтложитьЧекСервер();
		ОчиститьДанныеКартыЛояльности();
		ТекущаяОперация = "";
		
		ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
		ВывестиИнформациюНаДисплейПокупателя("ОтложитьЧек");
		НастроитьЭлементыФормы(Элементы.СтраницаПустая, Ложь);
		Если НачинатьНовыйЧекВРежимеСкупка Тогда
			ПереключитьРежимНаСкупка();
		Иначе
			СформироватьЗаголовок(НСтр("ru='Продажа'"));
		КонецЕсли;
		
		НастроитьВидимостьВводаПромокода(Истина);
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтменитьОтложитьЧекЗавершение", ЭтотОбъект);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Чек отложен'"), ОписаниеОповещения, "Отменить");
		
	КонецЕсли;
	ОбработатьИзменениеТаблицыТоваровНаКлиенте();
	ПривестиПараметрыПробитияЧекаКЗначениямПоУмолчанию();
	
	ПлиткаДомойКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныеЧекиКлиент()
	
	ТекущаяОперация = "";
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Перед выбором отложенного чека необходимо пробить,
										|удалить или отложить текущий чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Выбор отложенного чека'"));
	ПараметрыОткрытия.Вставить("ВыборОтложенногоЧека", Истина);
	ПараметрыОткрытия.Вставить("ВыводитьКомментарийКЧеку", ВыводитьКомментарийКЧеку);
	
	КоличествоОтложенныхЧеков = КоличествоОтложенныхЧеков(ПараметрыОткрытия, ОтложенныйЧек);
	
	Если КоличествоОтложенныхЧеков = 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Нет отложенных чеков.'"));
		Возврат;
		
	КонецЕсли;
	
	Если КоличествоОтложенныхЧеков = 1 И ЗначениеЗаполнено(ОтложенныйЧек) Тогда
		
		ПродолжитьЧекКлиент();
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборОтложенногоЧекаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьПараметрыПустойСтраницы(СуммаПродаж)
	Если РежимКассыСамообслуживания Тогда
		СуммаПродажСтрокой = ПодготовитьСуммуПродажСтрокой(СуммаПродаж);
		
		ВремяОтображения = 5;
		ПараметрыПустойСтраницы = Новый Структура;
		ПараметрыПустойСтраницы.Вставить("СуммаПродаж", СуммаПродажСтрокой);
		ПараметрыПустойСтраницы.Вставить("ВремяОтображения", ВремяОтображения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьСуммуПродажСтрокой(СуммаПродаж)
	ПодписьЦелаяЧасть = НСтр("ru = 'руб.'");
	ПодписьДробнаяЧасть = НСтр("ru = 'коп.'");
	СуммаЦелая = Цел(СуммаПродаж);
	СуммаПродажСтрокой = СтрШаблон("%1 %2", Формат(СуммаЦелая, "ЧДЦ=0"), ПодписьЦелаяЧасть);
	ДробнаяЧасть = Цел((СуммаПродаж - СуммаЦелая) * 100);
	Если ДробнаяЧасть > 0 Тогда
		СуммаПродажСтрокой = СтрШаблон("%1 %2 %3", СуммаПродажСтрокой, Формат(ДробнаяЧасть, "ЧДЦ=0"), ПодписьДробнаяЧасть);
	КонецЕсли;
	Возврат СуммаПродажСтрокой;
КонецФункции

&НаКлиенте
Функция ПолучитьСуммуПробитыхЧеков()
	
	РезультатФункции = 0;
	Для Каждого СтрокаЧека Из ПробитыеЧеки Цикл
		РезультатФункции = РезультатФункции + СтрокаЧека.СуммаЧека;
	КонецЦикла;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействияПослеПробитияПоследнегоЧека(НужноЗаморозитьФорму)

	ВыполнитьПечатьКопииЧека = (ТекущийЧекЭлектронный И ХочуБумажныйЧек);
	НужноЗаморозитьФорму = (ОставлятьПоследнийЧекНаЭкране И Не РежимКассыСамообслуживания);	
	Если ВыполнитьПечатьКопииЧека Тогда
		ПараметрыПечати = ПодготовитьПараметрыПечатиКопийЧеков(НужноЗаморозитьФорму);
		ВыполнитьПечатьКопииЧекаПоПорядку(ПараметрыПечати);
	ИначеЕсли Не НужноЗаморозитьФорму Тогда
		СуммаПродаж = ПолучитьСуммуПробитыхЧеков();
		ПодготовитьПараметрыПустойСтраницы(СуммаПродаж);
	КонецЕсли;
	ПривестиПараметрыПробитияЧекаКЗначениямПоУмолчанию();
	
	Если Не (НужноЗаморозитьФорму Или ВыполнитьПечатьКопииЧека) Тогда
		ПоказатьПустуюСтраницуПослеПробитияЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивПробитыхЧеков(СуммаПродаж)
	
	МассивЧеков = Новый Массив;

	Для Каждого СтрокаЧека Из ПробитыеЧеки Цикл
		МассивЧеков.Добавить(СтрокаЧека.ЧекККМ);
		СуммаПродаж = СуммаПродаж + СтрокаЧека.СуммаЧека;
	КонецЦикла;
	
	Возврат МассивЧеков;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьПараметрыПечатиКопийЧеков(НужноЗаморозитьФорму)

	СуммаПродаж = 0;
	МассивЧеков = ПолучитьМассивПробитыхЧеков(СуммаПродаж);
	Если Не НужноЗаморозитьФорму Тогда
		ПодготовитьПараметрыПустойСтраницы(СуммаПродаж);
	КонецЕсли;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ПечатьПослеПробития", Истина);
	ПараметрыПечати.Вставить("НужноЗаморозитьФорму", НужноЗаморозитьФорму);
	ПараметрыПечати.Вставить("МассивЧеков", МассивЧеков);
	ПараметрыПечати.Вставить("ИндексЧека", 0);
	
	Возврат ПараметрыПечати;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПечатьКопииЧекаПоПорядку(ПараметрыПечати)
	
	Если ПараметрыПечати.ИндексЧека < ПараметрыПечати.МассивЧеков.Количество() Тогда
		
		ЧекДляПечати = ПараметрыПечати.МассивЧеков[ПараметрыПечати.ИндексЧека];
		НапечататьФискальныйЧекБезФискализации(ЧекДляПечати, ПараметрыПечати);
		
	ИначеЕсли Не ПараметрыПечати.НужноЗаморозитьФорму Тогда
		ПоказатьПустуюСтраницуПослеПробитияЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиПараметрыПробитияЧекаКЗначениямПоУмолчанию()
	
	ПробитиеСоСтраницыОтправкиЧека = Ложь;
	ПараметрыОплатыПлатежнойСистемой = Неопределено;
	УстановитьПризнакХочуБумажныйЧек(ПечататьБумажныйЧек);
	ТекущийЧекЭлектронный = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПустуюСтраницуПослеПробитияЧека()
	
	ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
	
	ОчищатьДисплейПокупателя = Ложь;
	ИнициализироватьИнтерфейсРабочегоМестаКассира(ОчищатьДисплейПокупателя);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости()
	Если ФормаЗамороженаПослеПробитияЧека() Тогда
		РазморозитьФормуПослеПробитияЧека();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ФормаЗамороженаПослеПробитияЧека()
	Возврат РежимРаботыСЧеком = РежимыРаботыСЧеком.ПродолжениеПослеПробития;
КонецФункции

&НаКлиенте
Процедура ПробитьТекущийЧекКлиент()
	Если ПробитыеЧеки.Количество() > 0 Тогда
		ТекущийЧек = ПробитыеЧеки[ПробитыеЧеки.Количество() - 1].ЧекККМ;
		НапечататьФискальныйЧекБезФискализации(ТекущийЧек);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьТекущийТоварныйЧекКлиент()
	Если ПробитыеЧеки.Количество() > 0 Тогда
		ТекущийЧек = ПробитыеЧеки[ПробитыеЧеки.Количество() - 1].ЧекККМ;
		НапечататьТоварныйЧекПоФискальномуЧеку(ТекущийЧек);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьВозвратТекущегоЧекаНаКлиенте(Команда)
	
	Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации(Истина);
	ТекущийЧек = ПолучитьЧекДляВозврата();
	Если ЗначениеЗаполнено(ТекущийЧек) Тогда
		РазморозитьФормуПослеПробитияЧека(Истина);
		ОбнулитьПеременныеСуммОплат();
		Элементы.Предоплата.Заголовок = НСтр("ru = 'Предоплата'");
		НужноОтработатьВыборОрганизации = (ПробитыеЧеки.Количество() > 1);
		ПробитыеЧеки.Очистить();
		Объект.Товары.Очистить();
		Объект.Оплата.Очистить();
		ЗаполнитьНаОснованииЧекаККМ(ТекущийЧек);
		ПроверитьВозможностьВозвратаВПлатежнойСистемеПродажи();
		УстановитьДоступностьЭлементаФормы(Элементы.ПроверитьСертификатНСПК, Истина);
		ПредварительноеОдобрениеНСПКПолучено = Ложь;
		НастроитьЭлементыВРежимеВозврат();
		УстановитьВидимостьЭлементаФормы(Элементы.РаспечататьЗаявлениеНаВозврат, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Истина);
		Панель = Элементы.ПанельИзбранныхТоваров;
		Если Не Панель.Скрыта() Тогда
			Панель.Скрыть();
		КонецЕсли;
		Если НужноОтработатьВыборОрганизации Тогда
			КомандаПереключенияОрганизации = ЭтаФорма.Команды.Найти("ПереключитьЧекОрганизация1");
			Если Не КомандаПереключенияОрганизации = Неопределено Тогда
				ПереключитьЧекПродажи(КомандаПереключенияОрганизации);
			КонецЕсли;
		КонецЕсли;
		ПереключитьВРежимОплатыНаКлиенте(, Ложь);
		УстановитьАктивностьСтроки();
		НастроитьДоступностьПробитьЧек();
		Если СуммаНаличныхКВыдаче <> 0 Тогда
			СуммаНаличныхКВыдаче = 0;
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыдачиНаличных, Ложь);
		КонецЕсли;
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРазделВыдачиНаличных, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРазделДенежныйЯщик, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ВернутьсяВРежимПодбораТовара, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьВозвратаВПлатежнойСистемеПродажи()
	Если Объект.Оплата.Количество()
			И ЗначениеЗаполнено(Объект.Оплата[0].ИдентификаторПлатежнойСистемы) Тогда
					
		ТекстПредупреждения				= "";
		КлючОпределенияПлатежнойСистемы = Новый Структура(
			"ИдентификаторПС", 
			Объект.Оплата[0].ИдентификаторПлатежнойСистемы);
		
		Если ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючОпределенияПлатежнойСистемы).Количество() Тогда
			
			СтрокаОплаты = ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючОпределенияПлатежнойСистемы);
			СтрокаОплаты = ?(СтрокаОплаты.Количество(), СтрокаОплаты[0], Неопределено);
			
			Если Не ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВозвратВозможен(
					СтрокаОплаты.ПлатежнаяСистема, 
					ТекстПредупреждения) Тогда
					
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Объект.Оплата.Очистить();
				
			КонецЕсли;
				
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьПробитиеЧекаНаКлиенте(Команда)

	ОплатаЗаполненаВерно = Истина;
	
	СтруктураОшибки = Новый Структура;
	СтруктураОшибки.Вставить("ТекстЗаголовка", "");
	СтруктураОшибки.Вставить("ТекстОшибки", "");
	
	ПроверитьЗаполнениеОплатПередПробитиемЧека(ОплатаЗаполненаВерно, СтруктураОшибки);
	Если НЕ ОплатаЗаполненаВерно Тогда
		ОткрытьСтраницуИнфоОшибка(СтруктураОшибки.ТекстЗаголовка, СтруктураОшибки.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыбраннаяСистемаНалогообложения) Тогда
		СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка.'");
		СтруктураОшибки.ТекстОшибки = НСтр("ru = 'Не заполнена система налогообложения.'");
		ОткрытьСтраницуИнфоОшибка(СтруктураОшибки.ТекстЗаголовка, СтруктураОшибки.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ЭтоЗаменаТоваров И НЕ КонтрольОстатковПройден(СтруктураОшибки.ТекстОшибки) Тогда
		СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Контроль остатков.
			|Измените количество или удалите товар.'");
		ОткрытьСтраницуИнфоОшибка(СтруктураОшибки.ТекстЗаголовка, СтруктураОшибки.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДанныеЗапрета = НаличиеЗапрещенныхКПродажеТоваровВЧеке();
	ЧекСодержитЗапрещенныеТовары = ДанныеЗапрета.Количество();
	
	Если ЧекСодержитЗапрещенныеТовары И Не ТекущаяОперация = "ПодтвердитьВозвратЗапрещенногоТовара" Тогда
		
		ОткрытьСтраницуЗапретаПродажиПоВремени(ДанныеЗапрета.ВидНоменклатуры,
			ДанныеЗапрета.ВремяНачалаЗапрета, ДанныеЗапрета.ВремяОкончанияЗапрета);
		Возврат;
		
	КонецЕсли;
	
	ПробитоЧеков = ПробитыеЧеки.Количество();
	
	Если ЭтоОплатаВстречнымПредоставлением И НЕ Элементы.ГруппаОплатаНал.Видимость 
		И НЕ Элементы.ГруппаОплатаКартой.Видимость И НЕ Элементы.ГруппаСуммаОплатаСертификатами.Видимость Тогда
		
			ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
			ПараметрыПересчета.ПоКомандеНал = Истина;
			РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
	КонецЕсли;
	
	Если НЕ ЭтоЧекКоррекции Тогда
		
		СистемыНалогообложенияПродажТоваровКорзины = РазличныеСНОВСпискеПокупок();
		
		Если ЭтоЗаменаТоваров Тогда
			
			Если СистемыНалогообложенияПродажТоваровКорзины.Количество() > 1 Тогда
				СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка.'");
				СтруктураОшибки.ТекстОшибки = НСтр("ru = 'Выбранные товары имеют разные системы налогообложения.'");
				ОткрытьСтраницуИнфоОшибка(СтруктураОшибки.ТекстЗаголовка, СтруктураОшибки.ТекстОшибки);
				Возврат;
			КонецЕсли;
			
			СписокОрганизаций = Новый СписокЗначений;
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				Если СписокОрганизаций.НайтиПоЗначению(СтрокаТовара.Организация) = Неопределено Тогда
					СписокОрганизаций.Добавить(СтрокаТовара.Организация);
				КонецЕсли;
			КонецЦикла;
			Если СписокОрганизаций.Количество() > 1 Тогда
				СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка.'");
				СтруктураОшибки.ТекстОшибки = НСтр("ru = 'Выбранные товары относятся к разным организациям.'");
				ОткрытьСтраницуИнфоОшибка(СтруктураОшибки.ТекстЗаголовка, СтруктураОшибки.ТекстОшибки);
				Возврат;
			КонецЕсли;
			
			ОжидаемоеКоличествоЧеков = 2 - ПробитоЧеков;
			
		Иначе
			Если ЭтоОплатаВстречнымПредоставлением Тогда
				
				ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
				Если ЭтоПродажа Тогда
					Для каждого СтрокаТовары  Из Объект.Товары Цикл
						
						СтрокаТовары.Сумма		= 0;
						СтрокаТовары.СуммаНДС	= 0;
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			ОжидаемоеКоличествоЧеков = СистемыНалогообложенияПродажТоваровКорзины.Количество() - ПробитоЧеков;
		КонецЕсли;
		
	Иначе
		
		СистемыНалогообложенияПродажТоваровКорзины = Новый Массив();
		СтруктураОрганизацийИСНО = Новый Структура("Организация, СистемаНалогообложения");
		СтруктураОрганизацийИСНО.Организация = ВыбраннаяОрганизация;
		СтруктураОрганизацийИСНО.СистемаНалогообложения = СистемаНалогообложенияЧекаКоррекции;
		СистемыНалогообложенияПродажТоваровКорзины.Добавить(СтруктураОрганизацийИСНО);
		ОжидаемоеКоличествоЧеков = 2 - ПробитоЧеков;
		
	КонецЕсли;
	
	Если ОжидаемоеКоличествоЧеков > 0 Тогда
		
		Отбор = Новый Структура("КассаККМ", Объект.КассаККМ);
		СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
		Если СтрокаКассы.ИспользоватьБезПодключенияОборудования Тогда
			Если НЕ ЭтоЧекКоррекции Тогда
				ПродолжитьФормированиеЧеков = Истина;
				АвтономнаяККТ = Истина;
			Иначе
				ПродолжитьФормированиеЧеков = Ложь;
				ЗаголовокОшибки = НСтр("ru = 'Ошибка.'");
				ТекстОшибки = НСтр("ru = 'Нельзя пробить чек коррекции на кассе без подключения оборудования.'");
				ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки);
				ПодключитьОбработчикОжидания("ОбработкаВыводаОжиданияОплатыНаДисплейПокупателя", 5, Истина);
				Возврат;
			КонецЕсли;
		Иначе
			РезультатПроверки = КассаПоддерживаетОперацииПоСНОИзСпискаПокупок(
			ПодключаемоеОборудование, СистемыНалогообложенияПродажТоваровКорзины);
			
			ПродолжитьФормированиеЧеков = НЕ РезультатПроверки.Ошибка;
			АвтономнаяККТ = Ложь;
		КонецЕсли;
		
		Если НЕ ПродолжитьФормированиеЧеков Тогда
			
			ЗаголовокОшибки = НСтр("ru = 'Ошибка пробития чека'");
			ТекстОшибки = РезультатПроверки.ТекстОшибки;
			ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки);
			ПодключитьОбработчикОжидания("ОбработкаВыводаОжиданияОплатыНаДисплейПокупателя", 5, Истина);
			Возврат;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если ТипЗнч(Команда) = Тип("ПеречислениеСсылка.ТипыПлатежнойСистемыККТ") Тогда
		НачатьОплатуВозвратПлатежнойСистемой(Команда);
	Иначе
		ПодготовитьКПечатиЧека(АвтономнаяККТ);
	КонецЕсли;
	
	ВывестиСообщения(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеТекущегоСостоянияККТПриЗакрытии(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения = Неопределено И ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если РезультатВыполнения.Свойство("Результат") И РезультатВыполнения.Свойство("СтатусСмены") Тогда
			Если РезультатВыполнения.Результат И РезультатВыполнения.СтатусСмены = 1 Тогда //1-закрыта
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьКассовуюСменуВручную", ЭтотОбъект, РезультатВыполнения);
				ТекстВопроса = НСтр("ru='Актуализировать кассовую смену в программе?
					|Кассовая смена в программе будет закрыта, при этом отчет о закрытии смены не будет распечатан.'");
				ЗаголовокВопроса = НСтр("ru='На ККТ смена уже была закрыта ранее.'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСменуВручную(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РезультатВыполнения = ДополнительныеПараметры;
		
		Отбор = Новый Структура("ИдентификаторУстройства", РезультатВыполнения.ИдентификаторУстройства);
		СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
		
		ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
		Объект.Организация = СтрокаКассы.Организация;
		Объект.КассаККМ = СтрокаКассы.КассаККМ;
		КассоваяСмена = СтрокаКассы.КассоваяСмена;
		ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
		
		Отказ = Ложь;
		ЗакрытьКассовуюСменуВДокументеБезТО(Отказ);
		
		Если Не Отказ Тогда
			Оповестить("ИзменениеСостоянияКассовойСмены", Объект.КассаККМ);
		Иначе
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка закрытия смены'");
			ТекстОшибки = НСтр("ru = 'При закрытии смены произошла ошибка. Смена не закрыта.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьКассовуюСменуВДокументеБезТО(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		ДокументКассоваяСмена = КассоваяСмена.ПолучитьОбъект();
		ДокументКассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Закрыта;
		ДокументКассоваяСмена.ОкончаниеКассовойСмены = ТекущаяДатаСеанса();
		ДокументКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		
		Отказ = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при записи документа ""Кассовая смена"".'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеТекущегоСостоянияККТПриОткрытии(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения = Неопределено И ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если РезультатВыполнения.Свойство("Результат") И РезультатВыполнения.Свойство("СтатусСмены") Тогда
			Если РезультатВыполнения.Результат 
				И (РезультатВыполнения.СтатусСмены = 2 ИЛИ РезультатВыполнения.СтатусСмены = 3) Тогда //2-открыта, 3-просрочена
			
				ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьКассовуюСменуВручную", ЭтотОбъект, РезультатВыполнения);
				ТекстВопроса = НСтр("ru='Актуализировать кассовую смену в программе?
					|Кассовая смена в программе будет открыта, при этом чек об открытии смены не будет распечатан.'");
				ЗаголовокВопроса = НСтр("ru='На ККТ смена уже была открыта ранее.'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКассовуюСменуВручную(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РезультатВыполнения = ДополнительныеПараметры;
		
		Отбор = Новый Структура("ИдентификаторУстройства", РезультатВыполнения.ИдентификаторУстройства);
		СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
		
		ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
		Объект.Организация = СтрокаКассы.Организация;
		Объект.КассаККМ = СтрокаКассы.КассаККМ;
		КассоваяСмена = СтрокаКассы.КассоваяСмена;
		ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
		
		НомерСменыККТ = РезультатВыполнения.НомерСменыККТ;
		Отказ = Ложь;
		СоздатьДокументКассоваяСменаБезТО(НомерСменыККТ, Отказ);
		
		Если Не Отказ Тогда
			Оповестить("ИзменениеСостоянияКассовойСмены", Объект.КассаККМ);
		Иначе
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка открытия смены'");
			ТекстОшибки = НСтр("ru = 'При открытии смены произошла ошибка. Смена не открыта.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументКассоваяСменаБезТО(НомерСменыККТ, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
		РеквизитыКассыККМ = ПродажиРМК.РеквизитыКассыККМ(Объект.КассаККМ, РабочееМесто);
		ЗаполнитьЗначенияСвойств(НоваяКассоваяСмена, РеквизитыКассыККМ);
		
		ДатаОткрытияКассовойСмены = ТекущаяДатаСеанса();
		
		НоваяКассоваяСмена.Дата = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Открыта;
		НоваяКассоваяСмена.НачалоКассовойСмены = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.ОкончаниеКассовойСмены = '00010101';
		
		НоваяКассоваяСмена.НомерСменыККТ = НомерСменыККТ;
		НоваяКассоваяСмена.ФискальноеУстройство = ПодключаемоеОборудование;
		
		Если НоваяКассоваяСмена.ПроверитьЗаполнение() Тогда
			
			НоваяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
			КассоваяСмена = НоваяКассоваяСмена.Ссылка;
			
		КонецЕсли;
		
	Исключение
		
		Отказ = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при записи документа ""Кассовая смена"".'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьНеобходимостьПересчетаАвтоматическихСкидок()
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	Возврат ИспользоватьАвтоматическиеСкидки И ЭтоОперацияПродажи И (РежимКассыСамообслуживания Или Не СкидкиРассчитаны);
КонецФункции

&НаКлиенте
Процедура ВывестиОтчетЗаСменуКлиент()
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	ОжидатьОтветаОтОборудования = Ложь;
	ПодготовитьДанныеДляОтчетаЗаСменуНаКлиенте(ОжидатьОтветаОтОборудования);
	Если (Не ОжидатьОтветаОтОборудования) И ДанныеДляОтчетаЗаСмену.ДанныеОборудования.Количество() > 0 Тогда
		СформироватьОтчетЗаСмену();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатыОкончанияКассовыхСмен(ЗакрытыеКассовыеСмены)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗакрытыеКассовыеСмены, "ОкончаниеКассовойСмены");
КонецФункции	

&НаКлиенте
Функция ОтобратьСтрокиКассДляОтчетаЗаСмену()
	Перем ДатыОкончанияКассовыхСмен;
	
	МассивСтрокТаблицыКассККМ = Новый Массив;
	
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса);
	НачалоПредыдущегоДня = НачалоДня(НачалоТекущегоДня - 1);
	ДатаВремяГраницыЗакрытияСмены = НачалоТекущегоДня;
	Если (ТекущаяДатаСеанса - НачалоТекущегоДня) <= (ВремяНачалаСмены - Дата(1,1,1)) Тогда
		ДатаВремяГраницыЗакрытияСмены = НачалоПредыдущегоДня + (ВремяНачалаСмены - Дата(1,1,1));
	КонецЕсли;
	
	ИсключениеЗакрытыхДоГраницыКасс = Ложь;
	ЗакрытыеКассовыеСмены = Новый Массив;
	СтрокиЗакрытыхКассовыхСмен = ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("Открыта", Ложь));
	Если СтрокиЗакрытыхКассовыхСмен.Количество() > 0 Тогда
		Для Каждого СтрокаКассовойСмены Из СтрокиЗакрытыхКассовыхСмен Цикл
			ЗакрытыеКассовыеСмены.Добавить(СтрокаКассовойСмены.КассоваяСмена);
		КонецЦикла;
		ДатыОкончанияКассовыхСмен = ПолучитьДатыОкончанияКассовыхСмен(ЗакрытыеКассовыеСмены);
	КонецЕсли;
	
	Для Каждого СтрокаКассы Из ТаблицаКассККМОрганизаций Цикл
		Если ИсключениеЗакрытыхДоГраницыКасс Тогда
			Если СтрокаКассы.Открыта
					Или ПолучитьДатуОкончанияКассовойСмены(ДатыОкончанияКассовыхСмен, СтрокаКассы.КассоваяСмена)
						>= ДатаВремяГраницыЗакрытияСмены Тогда
				МассивСтрокТаблицыКассККМ.Добавить(СтрокаКассы);
			КонецЕсли;
		Иначе
			Если СтрокаКассы.Открыта
					Или ПолучитьДатуОкончанияКассовойСмены(ДатыОкончанияКассовыхСмен, СтрокаКассы.КассоваяСмена)
						>= НачалоПредыдущегоДня Тогда
				Если СтрокаКассы.Открыта
						Или ПолучитьДатуОкончанияКассовойСмены(ДатыОкончанияКассовыхСмен, СтрокаКассы.КассоваяСмена)
							>= ДатаВремяГраницыЗакрытияСмены Тогда
					ИсключениеЗакрытыхДоГраницыКасс = Истина;
					Если МассивСтрокТаблицыКассККМ.Количество() > 0 Тогда
						МассивСтрокТаблицыКассККМ.Очистить();
					КонецЕсли;
				КонецЕсли;
				МассивСтрокТаблицыКассККМ.Добавить(СтрокаКассы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСтрокТаблицыКассККМ;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДатуОкончанияКассовойСмены(ДатыОкончанияКассовыхСмен, КассоваяСмена)
	
	ДатаОкончанияКассовойСмены = Дата(1,1,1);
	
	Если ЗначениеЗаполнено(ДатыОкончанияКассовыхСмен[КассоваяСмена]) Тогда
		ДатаОкончанияКассовойСмены = ДатыОкончанияКассовыхСмен[КассоваяСмена];
	КонецЕсли;
	
	Возврат ДатаОкончанияКассовойСмены;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДанныхКассовогоОборудования()
	
	СтруктураДанныхКассовогоОборудования = Новый Структура();
	СтруктураДанныхКассовогоОборудования.Вставить("КоличествоНепереданныхФД", 0);
	СтруктураДанныхКассовогоОборудования.Вставить("НомерПервогоНепереданногоФД", "");
	СтруктураДанныхКассовогоОборудования.Вставить("ДатаПервогоНепереданногоФД", Дата(1,1,1));
	СтруктураДанныхКассовогоОборудования.Вставить("ТекстОшибки", "");
	Возврат СтруктураДанныхКассовогоОборудования;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДанныхЭквайринговогоОборудования()
	
	Возврат Новый Структура();
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСтрокуТерминалаВДанныеЭквайринговыхТерминалов(ДанныеЭквайринговыхТерминалов, КассаТерминала, СтрокаТерминала, ОжидатьОтветаОтОборудования)
	
	ДанныеПоЭквайринговомуТерминалу = Новый Структура();
	ДанныеПоЭквайринговомуТерминалу.Вставить("Терминал", СтрокаТерминала.ЭквайринговыйТерминал);
	ДанныеПоЭквайринговомуТерминалу.Вставить("ИдентификаторУстройства", СтрокаТерминала.ПодключаемоеОборудование);
	ДанныеПоЭквайринговомуТерминалу.Вставить("ДанныеОборудования", ПолучитьСтруктуруДанныхЭквайринговогоОборудования());
	ДанныеПоЭквайринговомуТерминалу.Вставить("ДанныеОборудованияПолучены", Истина);	
	ДанныеЭквайринговыхТерминалов.Добавить(ДанныеПоЭквайринговомуТерминалу);
	Если Не ДанныеПоЭквайринговомуТерминалу.ДанныеОборудованияПолучены Тогда
		ОжидатьОтветаОтОборудования = Истина;
	КонецЕсли;		
	
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьСтрокуКассыВДанныеДляОтчетаЗаСмену(СтрокаКассы, ОжидатьОтветаОтОборудования)
	
	СтруктураДанныхКассы = Новый Структура();
	
	ДанныеПоКассе = Новый Структура();
	ДанныеПоКассе.Вставить("Касса", СтрокаКассы.КассаККМ);
	ДанныеПоКассе.Вставить("КассоваяСмена", СтрокаКассы.КассоваяСмена);
	ДанныеПоКассе.Вставить("СтатусКассовойСмены", ?(СтрокаКассы.Открыта, "Открыта", "Закрыта"));
	ДанныеПоКассе.Вставить("ИдентификаторУстройства", СтрокаКассы.ИдентификаторУстройства);
	ДанныеПоКассе.Вставить("ДанныеОборудования", ПолучитьСтруктуруДанныхКассовогоОборудования());
	ДанныеПоКассе.Вставить("ДанныеОборудованияПолучены", СтрокаКассы.ИспользоватьБезПодключенияОборудования);
	
	ДанныеЭквайринговыхТерминалов = Новый Массив;
	ДанныеТерминалов = ОбщегоНазначенияРМККлиент.ДанныеТекущихЭквайринговыхТерминаловПоОрганизации(ЭтотОбъект, СтрокаКассы.Организация);
	Для Каждого СтрокаТерминала Из ДанныеТерминалов Цикл
		ДобавитьСтрокуТерминалаВДанныеЭквайринговыхТерминалов(ДанныеЭквайринговыхТерминалов, СтрокаКассы.КассаККМ, СтрокаТерминала, ОжидатьОтветаОтОборудования);
	КонецЦикла;
	
    СтруктураДанныхКассы.Вставить("ДанныеПоКассе", ДанныеПоКассе);
	СтруктураДанныхКассы.Вставить("ДанныеЭквайринговыхТерминалов", ДанныеЭквайринговыхТерминалов);
	ДанныеДляОтчетаЗаСмену.ДанныеОборудования.Добавить(СтруктураДанныхКассы);
	
	Если Не ДанныеПоКассе.ДанныеОборудованияПолучены Тогда
		ОжидатьОтветаОтОборудования = Истина;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросыДанныхПоОборудованию()
	
	Для Каждого СтруктураДанныхКассы Из ДанныеДляОтчетаЗаСмену.ДанныеОборудования Цикл
		Если Не СтруктураДанныхКассы.ДанныеПоКассе.ДанныеОборудованияПолучены Тогда
			ДанныеПоКассе = СтруктураДанныхКассы.ДанныеПоКассе;
			Для Каждого ДанныеЭквайринговыхТерминалов Из СтруктураДанныхКассы.ДанныеЭквайринговыхТерминалов Цикл
				Если Не ДанныеЭквайринговыхТерминалов.ДанныеОборудованияПолучены Тогда
					
					ПараметрыСопоставления = Новый Структура("Касса,Терминал", ДанныеПоКассе.Касса, ДанныеЭквайринговыхТерминалов.Терминал);
					ОповещениеОПолученииСостояния = Новый ОписаниеОповещения("ЗапросДанныхЭквайринговогоТерминалаДляОтчетаЗаСменуЗавершение",
						ЭтотОбъект, ПараметрыСопоставления); 
					// Отправить запрос по эквайринговому терминалу	
					
				КонецЕсли;
			КонецЦикла;
			ПараметрыСопоставления = Новый Структура("Касса", ДанныеПоКассе.Касса);
			ОповещениеОПолученииСостояния = Новый ОписаниеОповещения("ЗапросДанныхКассыККМДляОтчетаЗаСменуЗавершение",
				ЭтотОбъект, ПараметрыСопоставления);
			ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОповещениеОПолученииСостояния,
				УникальныйИдентификатор, ДанныеПоКассе.ИдентификаторУстройства);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДанныеДляОтчетаЗаСменуНаКлиенте(ОжидатьОтветаОтОборудования)

	МассивСтрокКассККМ = ОтобратьСтрокиКассДляОтчетаЗаСмену();
	
	ДанныеДляОтчетаЗаСмену = Новый Структура();
	ДанныеДляОтчетаЗаСмену.Вставить("КассирРМК", Объект.Кассир);
	ДанныеДляОтчетаЗаСмену.Вставить("НастройкаРМК", ТекущаяНастройкаРМК);
	ДанныеДляОтчетаЗаСмену.Вставить("ПредставлениеВалюты", ПредставлениеВалюты);
	ДанныеДляОтчетаЗаСмену.Вставить("ДанныеОборудования", Новый Массив());

	Если МассивСтрокКассККМ.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нет ни одной актуальной кассовой смены'"));
	Иначе	
		Для Каждого СтрокаКассы Из МассивСтрокКассККМ Цикл
			ДобавитьСтрокуКассыВДанныеДляОтчетаЗаСмену(СтрокаКассы, ОжидатьОтветаОтОборудования);
		КонецЦикла;
		ОтправитьЗапросыДанныхПоОборудованию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросДанныхКассыККМДляОтчетаЗаСменуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	КоличествоКасс = ДанныеДляОтчетаЗаСмену.ДанныеОборудования.Количество();
	КассаНайдена = Ложь;
	ТребуетсяОжидание = Ложь;
	ИндексКассы = 0;
	Пока ИндексКассы < КоличествоКасс И (Не (КассаНайдена И ТребуетсяОжидание)) Цикл
		СтрокаКассовогоОборудования = ДанныеДляОтчетаЗаСмену.ДанныеОборудования.Получить(ИндексКассы);
		Если СтрокаКассовогоОборудования.ДанныеПоКассе.Касса = ДополнительныеПараметры.Касса Тогда
			КассаНайдена = Истина;
			СтрокаКассовогоОборудования.ДанныеПоКассе.ДанныеОборудованияПолучены = Истина;
			Если Результат.Результат Тогда
				ЗаполнитьЗначенияСвойств(СтрокаКассовогоОборудования.ДанныеПоКассе.ДанныеОборудования, Результат.ФискальныеДанные);
			Иначе
				СтрокаКассовогоОборудования.ДанныеПоКассе.ДанныеОборудования.ТекстОшибки = Результат.ОписаниеОшибки;
			КонецЕсли;	
		Иначе
			Если Не СтрокаКассовогоОборудования.ДанныеПоКассе.ДанныеОборудованияПолучены Тогда
				ТребуетсяОжидание = Истина;
			КонецЕсли;	
		КонецЕсли;
		Если Не ТребуетсяОжидание Тогда
			КоличествоТерминалов = СтрокаКассовогоОборудования.ДанныеЭквайринговыхТерминалов.Количество();
			ИндексТерминала = 0;
			Пока ИндексТерминала < КоличествоТерминалов И Не ТребуетсяОжидание Цикл
				СтрокаЭквайринговогоТерминала = СтрокаКассовогоОборудования.ДанныеЭквайринговыхТерминалов.Получить(ИндексТерминала);
				Если Не СтрокаЭквайринговогоТерминала.ДанныеОборудованияПолучены Тогда
					ТребуетсяОжидание = Истина;
				КонецЕсли;	
				ИндексТерминала = ИндексТерминала + 1;
			КонецЦикла;	
		КонецЕсли;		
		ИндексКассы = ИндексКассы + 1;
	КонецЦикла;
	Если Не ТребуетсяОжидание Тогда
		СформироватьОтчетЗаСмену();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросДанныхЭквайринговогоТерминалаДляОтчетаЗаСменуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КоличествоКасс = ДанныеДляОтчетаЗаСмену.ДанныеОборудования.Количество();
	ТерминалНайден = Ложь;
	ТребуетсяОжидание = Ложь;
	ИндексКассы = 0;
	Пока ИндексКассы < КоличествоКасс И (Не (ТерминалНайден И ТребуетсяОжидание)) Цикл
		СтрокаКассовогоОборудования = ДанныеДляОтчетаЗаСмену.ДанныеОборудования.Получить(ИндексКассы);
		Если Не СтрокаКассовогоОборудования.ДанныеПоКассе.ДанныеОборудованияПолучены Тогда
			ТребуетсяОжидание = Истина;
		КонецЕсли; 
		Если СтрокаКассовогоОборудования.ДанныеПоКассе.Касса = ДополнительныеПараметры.Касса
			Или (Не ТребуетсяОжидание) Тогда
			
			КоличествоТерминалов = СтрокаКассовогоОборудования.ДанныеЭквайринговыхТерминалов.Количество();
			ИндексТерминала = 0;
			Пока ИндексТерминала < КоличествоТерминалов И (Не (ТерминалНайден И ТребуетсяОжидание)) Цикл
				СтрокаЭквайринговогоТерминала = СтрокаКассовогоОборудования.ДанныеЭквайринговыхТерминалов.Получить(ИндексТерминала);
				Если СтрокаКассовогоОборудования.ДанныеПоКассе.Касса = ДополнительныеПараметры.Касса
					И СтрокаЭквайринговогоТерминала.Терминал = ДополнительныеПараметры.Терминал Тогда
					
					ТерминалНайден = Истина;
					СтрокаЭквайринговогоТерминала.ДанныеОборудованияПолучены = Истина;
					// Заполнить данные терминала
					
				Иначе	
					Если Не СтрокаЭквайринговогоТерминала.ДанныеОборудованияПолучены Тогда
						ТребуетсяОжидание = Истина;
					КонецЕсли;
				КонецЕсли;	
				ИндексТерминала = ИндексТерминала + 1;
			КонецЦикла;				
		КонецЕсли;	
		ИндексКассы = ИндексКассы + 1;
	КонецЦикла;
	Если Не ТребуетсяОжидание Тогда
		СформироватьОтчетЗаСмену();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетЗаСмену()
	
	ДанныеМакетаОтчетаЗаСмену = Новый Структура();
	ДанныеМакетаОтчетаЗаСмену.Вставить("ИдентификаторПечатнойФормы", "ОтчетЗаСмену");
	ДанныеМакетаОтчетаЗаСмену.Вставить("СинонимМакета", НСтр("ru = 'Отчет за смену'"));
	ДанныеМакетаОтчетаЗаСмену.Вставить("ПолноеИмяМакета", "ОбщийМакет.ПФ_MXL_ОтчетЗаСменуРМК");
	ДанныеДляОтчетаЗаСмену.Вставить("ДанныеМакета", ДанныеМакетаОтчетаЗаСмену);

	ТабличныйДокументОтчетЗаСмену = СформироватьОтчетЗаСменуСервер(ДанныеДляОтчетаЗаСмену); 

	ДанныеДляОтчетаЗаСмену.ДанныеОборудования.Очистить();
	ДанныеДляОтчетаЗаСмену = Неопределено;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ПереданныйТабличныйДокумент", ТабличныйДокументОтчетЗаСмену);
	ПараметрыОткрытия.Вставить("ПредставлениеОтчета", НСтр("ru = 'Отчет за смену'")); 
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаПечатногоДокумента", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьОтчетЗаСменуСервер(КлиентскиеДанныеОтчетаЗаСмену)
	
	СерверныеДанныеОтчетаЗаСмену = ОбщегоНазначенияРМК.ПолучитьДанныеОтчетаЗаСмену(КлиентскиеДанныеОтчетаЗаСмену);
	Макет = СформироватьМакетОтчетаЗаСмену(КлиентскиеДанныеОтчетаЗаСмену, СерверныеДанныеОтчетаЗаСмену);
	Возврат Макет;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьМакетОтчетаЗаСмену(КлиентскиеДанныеОтчетаЗаСмену, СерверныеДанныеОтчетаЗаСмену)
		
	ОтчетЗаСмену = Новый ТабличныйДокумент;
	ИмяМакета = сред(КлиентскиеДанныеОтчетаЗаСмену.ДанныеМакета.ПолноеИмяМакета, 12);
	Макет = ПолучитьОбщийМакет(ИмяМакета);
	ОбластьОтступ = Макет.ПолучитьОбласть("Отступ");
	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	КоличествоКасс = СерверныеДанныеОтчетаЗаСмену.ТаблицаКасс.Количество();
	ИндексКассы = 0;
	Пока ИндексКассы < КоличествоКасс Цикл
		СтрокаКассы = СерверныеДанныеОтчетаЗаСмену.ТаблицаКасс.Получить(ИндексКассы);	    
		ВывестиРазделПоКассеОтчетаЗаСмену(Макет, ОтчетЗаСмену, КлиентскиеДанныеОтчетаЗаСмену, СерверныеДанныеОтчетаЗаСмену, СтрокаКассы);
		ИндексКассы = ИндексКассы + 1;
		Если ИндексКассы < КоличествоКасс Тогда
			ОтчетЗаСмену.Вывести(ОбластьОтступ);
			ОтчетЗаСмену.Вывести(ОбластьРазделитель);
		КонецЕсли;	
	КонецЦикла;	
	
	ОбластьДатаОтчета = Макет.ПолучитьОбласть("ДатаОтчета");
	ОбластьДатаОтчета.Параметры.ДатаВремяФормирования = ТекущаяДатаСеанса();
	ОтчетЗаСмену.Вывести(ОбластьДатаОтчета);
	
	ОтчетЗаСмену.АвтоМасштаб = Истина;
	ОтчетЗаСмену.Защита = Истина;
	Возврат ОтчетЗаСмену;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВывестиРазделПоКассеОтчетаЗаСмену(Макет, ОтчетЗаСмену, КлиентскиеДанныеОтчетаЗаСмену, СерверныеДанныеОтчетаЗаСмену, СтрокаКассы)
    Перем КлиентскиеДанныеКассы;
		
	Если СерверныеДанныеОтчетаЗаСмену.ТаблицаКасс.Количество() = 1 Тогда
		КлиентскиеДанныеКассы = КлиентскиеДанныеОтчетаЗаСмену.ДанныеОборудования[0];
	Иначе
		КлиентскиеДанныеКассы = ПолучитьКлиентскиеДанныеКассы(КлиентскиеДанныеОтчетаЗаСмену.ДанныеОборудования, СтрокаКассы.Касса);
	КонецЕсли;
	
	ОбластьОтборКасса = Макет.ПолучитьОбласть("ОтборКасса");
	ОбластьОтборКасса.Параметры.ОрганизацияПредставление = СтрокаКассы.ОрганизацияПредставление;
	ОбластьОтборКасса.Параметры.РегистрационныйНомерККТ = СтрокаКассы.РегистрационныйНомерККТ;
	ОбластьОтборКасса.Параметры.НомерСмены = СтрокаКассы.НомерКассовойСмены;
	ОбластьОтборКасса.Параметры.ДатаСмены = Формат(СтрокаКассы.ДатаКассовойСмены, "ДЛФ=ДВ");
	ОбластьОтборКасса.Параметры.СтатусСмены = КлиентскиеДанныеКассы.ДанныеПоКассе.СтатусКассовойСмены;
	ОтчетЗаСмену.Вывести(ОбластьОтборКасса);
	ВывестиВРазделСуммыЗаСмену(Макет, ОтчетЗаСмену, КлиентскиеДанныеОтчетаЗаСмену.ПредставлениеВалюты, СерверныеДанныеОтчетаЗаСмену, СтрокаКассы.Касса);
	ВывестиРазделОшибокИОтложенныхЧековКассыОтчетаЗаСмену(Макет, ОтчетЗаСмену, КлиентскиеДанныеКассы, СерверныеДанныеОтчетаЗаСмену, СтрокаКассы.Касса);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиВРазделСуммыЗаСмену(Макет, ОтчетЗаСмену, ПредставлениеВалюты, СерверныеДанныеОтчетаЗаСмену, ОтборКасса)
	
	СуммаПродаж = 0;
	СуммаВозвратов = 0;
	ТаблицаВидовОплат = СерверныеДанныеОтчетаЗаСмену.ТаблицаСумм.СкопироватьКолонки("ВидОплаты,СуммаПродаж,СуммаВозвратов");
	ТаблицаКассиров = СерверныеДанныеОтчетаЗаСмену.ТаблицаСумм.СкопироватьКолонки("Кассир,ПорядокКассира,СуммаПродаж,СуммаВозвратов");
	
	Для Каждого СтрокаТаблицыСумм Из СерверныеДанныеОтчетаЗаСмену.ТаблицаСумм Цикл
		Если ОтборКасса = СтрокаТаблицыСумм.Касса Тогда
			
			НоваяСтрокаВидаОплаты = ТаблицаВидовОплат.Добавить();
			НоваяСтрокаКассира = ТаблицаКассиров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВидаОплаты, СтрокаТаблицыСумм);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКассира, СтрокаТаблицыСумм);
			СуммаПродаж = СуммаПродаж + СтрокаТаблицыСумм.СуммаПродаж;
			СуммаВозвратов = СуммаВозвратов + СтрокаТаблицыСумм.СуммаВозвратов;
			
		КонецЕсли;
	КонецЦикла;
	ТаблицаВидовОплат.Свернуть("ВидОплаты", "СуммаПродаж,СуммаВозвратов");
	ТаблицаКассиров.Сортировать("ПорядокКассира,Кассир");
	ТаблицаКассиров.Свернуть("Кассир", "СуммаПродаж,СуммаВозвратов");
	
	ОбластьШапкаСумм = Макет.ПолучитьОбласть("ШапкаСумм");
	ОбластьШапкаСумм.Параметры.СуммаПродажЗаСмену = СуммаПродаж;
	ОбластьШапкаСумм.Параметры.СуммаВозвратовЗаСмену = СуммаВозвратов;
	ОбластьШапкаСумм.Параметры.ПредставлениеВалюты = ПредставлениеВалюты;
	ОтчетЗаСмену.Вывести(ОбластьШапкаСумм);
	
	ОбластьГруппировкаСумм = Макет.ПолучитьОбласть("ГруппировкаСумм");
	ОбластьГруппировкаСумм.Параметры.ТекстГруппировки = НСтр("ru='По видам оплаты'");
	ОтчетЗаСмену.Вывести(ОбластьГруппировкаСумм);
	
	ОбластьСтрокаСумм = Макет.ПолучитьОбласть("СтрокаСумм");
	Для Каждого СтрокаВидаОплаты Из ТаблицаВидовОплат Цикл
		ОбластьСтрокаСумм.Параметры.ПредставлениеЭлементаГруппировки = СтрокаВидаОплаты.ВидОплаты;
		ОбластьСтрокаСумм.Параметры.СуммаПродаж = СтрокаВидаОплаты.СуммаПродаж;
		ОбластьСтрокаСумм.Параметры.СуммаВозвратов = СтрокаВидаОплаты.СуммаВозвратов;		
		ОтчетЗаСмену.Вывести(ОбластьСтрокаСумм);
	КонецЦикла;
	
	ОбластьОтступ = Макет.ПолучитьОбласть("Отступ");
	ОтчетЗаСмену.Вывести(ОбластьОтступ);
	ОбластьГруппировкаСумм.Параметры.ТекстГруппировки = НСтр("ru='По кассирам'");
	ОтчетЗаСмену.Вывести(ОбластьГруппировкаСумм);
	Для Каждого СтрокаКассира Из ТаблицаКассиров Цикл
		ОбластьСтрокаСумм.Параметры.ПредставлениеЭлементаГруппировки = СтрокаКассира.Кассир;
		ОбластьСтрокаСумм.Параметры.СуммаПродаж = СтрокаКассира.СуммаПродаж;
		ОбластьСтрокаСумм.Параметры.СуммаВозвратов = СтрокаКассира.СуммаВозвратов;
		ОтчетЗаСмену.Вывести(ОбластьСтрокаСумм);
	КонецЦикла;	
	ВывестиПродавцовВРазделСуммыЗаСмену(Макет, ОтчетЗаСмену, СерверныеДанныеОтчетаЗаСмену, ОтборКасса);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиПродавцовВРазделСуммыЗаСмену(Макет, ОтчетЗаСмену, СерверныеДанныеОтчетаЗаСмену, ОтборКасса)
	Перем КоллекцияСуммПродавцов;

	Если СерверныеДанныеОтчетаЗаСмену.ТаблицаСуммПоПродавцам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СерверныеДанныеОтчетаЗаСмену.ТаблицаКасс.Количество() = 1 Тогда
		КоллекцияСуммПродавцов = СерверныеДанныеОтчетаЗаСмену.ТаблицаСуммПоПродавцам;
	Иначе                                                                                        
		ОтборСтрокКассы = Новый Структура("Касса", ОтборКасса);
		КоллекцияСуммПродавцов = СерверныеДанныеОтчетаЗаСмену.ТаблицаСуммПоПродавцам.НайтиСтроки(ОтборСтрокКассы);
	КонецЕсли;
	Если КоллекцияСуммПродавцов.Количество() > 0 Тогда
		ОбластьОтступ = Макет.ПолучитьОбласть("Отступ");
		ОтчетЗаСмену.Вывести(ОбластьОтступ);
		ОбластьГруппировкаСумм = Макет.ПолучитьОбласть("ГруппировкаСумм");
		ОбластьГруппировкаСумм.Параметры.ТекстГруппировки = НСтр("ru='По продавцам'");
		ОтчетЗаСмену.Вывести(ОбластьГруппировкаСумм);
		ОбластьСтрокаСумм = Макет.ПолучитьОбласть("СтрокаСумм");
		Для Каждого СтрокаПродавца Из КоллекцияСуммПродавцов Цикл
			ОбластьСтрокаСумм.Параметры.ПредставлениеЭлементаГруппировки = СтрокаПродавца.Продавец;
			ОбластьСтрокаСумм.Параметры.СуммаПродаж = СтрокаПродавца.СуммаПродаж;
			ОбластьСтрокаСумм.Параметры.СуммаВозвратов = СтрокаПродавца.СуммаВозвратов;
			ОтчетЗаСмену.Вывести(ОбластьСтрокаСумм);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьКлиентскиеДанныеКассы(МассивДанныхОборудования, ОтборКасса)
	
	ДанныеКассы = Неопределено;
	КоличествоКасс = МассивДанныхОборудования.Количество();
	ИндексКассы = 0;
	Пока ИндексКассы < КоличествоКасс И ДанныеКассы = Неопределено Цикл
		ЭлементМассива = МассивДанныхОборудования[ИндексКассы];
		Если ЭлементМассива.ДанныеПоКассе.Касса = ОтборКасса Тогда
			ДанныеКассы = ЭлементМассива;
		КонецЕсли;	
		ИндексКассы = ИндексКассы + 1;
	КонецЦикла;	
	Возврат ДанныеКассы;
	
КонецФункции	

&НаСервереБезКонтекста
Процедура ВывестиРазделОшибокИОтложенныхЧековКассыОтчетаЗаСмену(Макет, ОтчетЗаСмену, КлиентскиеДанныеКассы, СерверныеДанныеОтчетаЗаСмену, ОтборКасса)
	Перем КоллекцияОшибок, КоллекцияНеПробитых, ОбластьНеОтправленныеЧеки;
	
	КоллекцияОшибок = Неопределено;	
	Если СерверныеДанныеОтчетаЗаСмену.ТаблицаКасс.Количество() = 1 Тогда
		КоллекцияОшибок = СерверныеДанныеОтчетаЗаСмену.ТаблицаОшибочныхЧеков;
		КоллекцияНеПробитых = СерверныеДанныеОтчетаЗаСмену.ТаблицаОтложенныхЧеков;
	Иначе
		ОтборСтрокКассы = Новый Структура("Касса", ОтборКасса);
		КоллекцияОшибок = СерверныеДанныеОтчетаЗаСмену.ТаблицаОшибочныхЧеков.НайтиСтроки(ОтборСтрокКассы);
		КоллекцияНеПробитых = СерверныеДанныеОтчетаЗаСмену.ТаблицаОтложенныхЧеков.НайтиСтроки(ОтборСтрокКассы);
	КонецЕсли;
	
	Если КлиентскиеДанныеКассы.ДанныеПоКассе.ДанныеОборудования.ТекстОшибки = "" Тогда
		ОбластьНеОтправленныеЧеки = Макет.ПолучитьОбласть("НеОтправленныеЧеки");
		ОбластьНеОтправленныеЧеки.Параметры.КоличествоНеОтправленных = КлиентскиеДанныеКассы.ДанныеПоКассе.ДанныеОборудования.КоличествоНепереданныхФД;
		ДатаВремяНеОтправленного = Дата(1,1,1);
		Если КлиентскиеДанныеКассы.ДанныеПоКассе.ДанныеОборудования.КоличествоНепереданныхФД > 0 Тогда
			ДатаВремяНеОтправленного = КлиентскиеДанныеКассы.ДанныеПоКассе.ДанныеОборудования.ДатаПервогоНепереданногоФД;		
		КонецЕсли;	
		ОбластьНеОтправленныеЧеки.Параметры.ДатаВремяНеОтправленного = ДатаВремяНеОтправленного;
		ОбластьНеОтправленныеЧеки.Параметры.НомерНеОтправленного = КлиентскиеДанныеКассы.ДанныеПоКассе.ДанныеОборудования.НомерПервогоНепереданногоФД;
	Иначе
		ОбластьНеОтправленныеЧеки = Макет.ПолучитьОбласть("НеОтправленныеЧекиОшибка");
		ОбластьНеОтправленныеЧеки.Параметры.ТекстОшибки = КлиентскиеДанныеКассы.ДанныеПоКассе.ДанныеОборудования.ТекстОшибки;
	КонецЕсли;	
	ОтчетЗаСмену.Вывести(ОбластьНеОтправленныеЧеки);
	
	Если КоллекцияОшибок.Количество() > 0 Или КоллекцияНеПробитых.Количество() > 0 Тогда
		ОбластьКоличественныеПоказателиШапка = Макет.ПолучитьОбласть("КоличественныеПоказателиШапка");
		ОтчетЗаСмену.Вывести(ОбластьКоличественныеПоказателиШапка);
		ВывестиДанныеОшибочныхИНеПробитыхЧековОтчетаЗаСмену(Макет, ОтчетЗаСмену, КоллекцияОшибок, "Ошибки");
		Если КоллекцияОшибок.Количество() > 0 И КоллекцияНеПробитых.Количество() > 0 Тогда
			ОбластьОтступ = Макет.ПолучитьОбласть("Отступ");
			ОтчетЗаСмену.Вывести(ОбластьОтступ);
		КонецЕсли;
		ВывестиДанныеОшибочныхИНеПробитыхЧековОтчетаЗаСмену(Макет, ОтчетЗаСмену, КоллекцияНеПробитых, "НеПробитыеЧеки");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьРасшифровкуРаздела(ГруппаРаздела, КодРаздела, МассивОшибочныхЧеков)

	ТекстСБП = НСтр("ru='СБП'");
	Если ГруппаРаздела = "НеПробитыеЧеки" И (Не КодРаздела = ТекстСБП) Тогда
		КодРаздела = "";
	КонецЕсли;	
	
	ДанныеРасшифровки = Новый Структура();
	ДанныеРасшифровки.Вставить("ГруппаРаздела", ГруппаРаздела);
	ДанныеРасшифровки.Вставить("ИмяРаздела", КодРаздела);
	ДанныеРасшифровки.Вставить("МассивЧеков", МассивОшибочныхЧеков);
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("ИмяОтчета", "ОтчетЗаСмену");
	РезультатФункции.Вставить("ДанныеРасшифровки", ДанныеРасшифровки);
	Возврат РезультатФункции;
	
КонецФункции	

&НаСервереБезКонтекста
Процедура ДобавитьРазделКоличественныхЧеков(Макет, ЧастьОтчета, КодРаздела, ЧекиПродаж, ЧекиВозвратов, ГруппаРаздела)
		
	ОбластьРаздел = Макет.ПолучитьОбласть("КоличественныеПоказателиРаздел");
	ОбластьРаздел.Параметры.ИмяРаздела = КодРаздела;
	ОбластьРаздел.Параметры.КоличествоПродаж = ЧекиПродаж.Количество();
	ОбластьРаздел.Параметры.КоличествоВозвратов = ЧекиВозвратов.Количество();
	ОбластьРаздел.Параметры.ЧекиПродаж = СформироватьРасшифровкуРаздела(ГруппаРаздела, КодРаздела, ЧекиПродаж);
	ОбластьРаздел.Параметры.ЧекиВозвратов = СформироватьРасшифровкуРаздела(ГруппаРаздела, КодРаздела, ЧекиВозвратов);
	ЧастьОтчета.Вывести(ОбластьРаздел);
	ЧекиПродаж = Новый Массив();
	ЧекиВозвратов = Новый Массив();
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ВывестиДанныеОшибочныхИНеПробитыхЧековОтчетаЗаСмену(Макет, ОтчетЗаСмену, КоллекцияЧеков, ГруппаРаздела)
	
	КоличествоПродаж = 0;
	КоличествоВозвратов = 0;	
	ЧекиПродаж = Новый Массив();
	ЧекиВозвратов = Новый Массив();
	
	ЧастьОтчета = Новый ТабличныйДокумент;	
	
	КодРаздела = "";
	Для Каждого СтрокаЧека Из КоллекцияЧеков Цикл
		Если Не КодРаздела = СтрокаЧека.КодРаздела Тогда
			Если Не КодРаздела = "" Тогда
				ДобавитьРазделКоличественныхЧеков(Макет, ЧастьОтчета, КодРаздела, ЧекиПродаж, ЧекиВозвратов, ГруппаРаздела);
			КонецЕсли;
			КодРаздела = СтрокаЧека.КодРаздела;
		КонецЕсли;	
		
		ДанныеЧекаВРасшифровку = Новый Структура();
		ДанныеЧекаВРасшифровку.Вставить("ИмяРаздела", СтрокаЧека.КодРаздела);
		ДанныеЧекаВРасшифровку.Вставить("Чек", СтрокаЧека.ЧекСсылка);
		Если ГруппаРаздела = "Ошибки" Тогда
			ДанныеЧекаВРасшифровку.Вставить("ТекстОшибки", СтрокаЧека.ТекстОшибки);
		КонецЕсли;	
		
		Если СтрокаЧека.ЭтоПродажа Тогда
			КоличествоПродаж = КоличествоПродаж + 1;
			ЧекиПродаж.Добавить(ДанныеЧекаВРасшифровку);
		Иначе
			КоличествоВозвратов = КоличествоВозвратов + 1;
			ЧекиВозвратов.Добавить(ДанныеЧекаВРасшифровку);
		КонецЕсли;	
	КонецЦикла;
	Если Не КодРаздела = "" Тогда
		ДобавитьРазделКоличественныхЧеков(Макет, ЧастьОтчета, КодРаздела, ЧекиПродаж, ЧекиВозвратов, ГруппаРаздела);		
	КонецЕсли;
	Если КоличествоПродаж + КоличествоВозвратов > 0 Тогда
		ОбластьКоличественныеПоказателиГруппа = Макет.ПолучитьОбласть("КоличественныеПоказателиГруппа");
		ОбластьКоличественныеПоказателиГруппа.Параметры.КоличествоПродаж = КоличествоПродаж;
		ОбластьКоличественныеПоказателиГруппа.Параметры.КоличествоВозвратов = КоличествоВозвратов;
		ОбластьКоличественныеПоказателиГруппа.Параметры.ИмяГруппыРаздела = ?(ГруппаРаздела = "Ошибки", НСтр("ru='Ошибочные чеки'"), НСтр("ru='Отложенные чеки'"));
		ОтчетЗаСмену.Вывести(ОбластьКоличественныеПоказателиГруппа);
		ОтчетЗаСмену.Вывести(ЧастьОтчета);
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьЧекДляВозврата()
	
	ТекущийЧек = Неопределено;
	
	Если ПробитыеЧеки.Количество() = 1 Тогда
		ТекущийЧек = ПробитыеЧеки[0].ЧекККМ;
	ИначеЕсли ПробитыеЧеки.Количество() > 1 Тогда
		СтруктураОрганизацияИСНО = ВыбраннаяОрганизацияИСНО();
		СтрокиПробитыхЧеков = ПробитыеЧеки.НайтиСтроки(СтруктураОрганизацияИСНО);
		Если СтрокиПробитыхЧеков.Количество() > 0 Тогда
			ТекущийЧек = СтрокиПробитыхЧеков[СтрокиПробитыхЧеков.Количество() - 1].ЧекККМ;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ТекущийЧек;
	
КонецФункции	

&НаКлиенте
Процедура НастроитьЦифровуюПанель()
	
	ВидимостьКнопокЦифр = Истина;
	ВидимостьКнопкиСправаВнизу = Ложь;
	
	ДоступностьЦифровойКлавиатуры = (Не РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата);
	ГруппаСлоевДанныхПокупателя = Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть;
	ТекущийСлойДанныхПокупателя
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевДанныхПокупателя);
	Если ТекущийСлойДанныхПокупателя = Элементы.ГруппаПоискКарты
			Или ТекущийСлойДанныхПокупателя = Элементы.ГруппаКартаНеНайдена Тогда
		ВидимостьКнопокЦифр = ДоступностьЦифровойКлавиатуры;
		ВидимостьКнопкиСправаВнизу = Истина;
	ИначеЕсли ТекущийСлойДанныхПокупателя = Элементы.ОсновнаяГруппаКартаНайдена Тогда
		ДополнительнаяОбластьДанныхПокупателя = Элементы.ГруппаСлоевДанныеПокупателяДополнительнаяОбласть;
		ТекущийДополнительныйСлой
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ДополнительнаяОбластьДанныхПокупателя);
		Если Не ТекущийДополнительныйСлой = Элементы.ГруппаПодтверждениеСМС Тогда
			ВидимостьКнопокЦифр = Ложь;
		КонецЕсли;
	ИначеЕсли ТекущийСлойДанныхПокупателя = Элементы.ОсновнаяГруппаСозданиеКарты Тогда
		Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(ЭтотОбъект) Тогда
			ВидимостьКнопокЦифр = Ложь;
		Иначе
			ВидимостьКнопокЦифр = ДоступностьЦифровойКлавиатуры;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ЦифроваяПанельПоиск, ВидимостьКнопкиСправаВнизу);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЦифроваяПанель, ВидимостьКнопокЦифр);
	
	НастроитьКнопкиЦифровойПанели();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыбранногоКонтрагента(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Контрагент = Результат;
	ЗаполнитьФормуПоДисконтнойКарте();
	
	ЗавершитьВводШтрихкодаНайденаКарта(КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеТаблицыТоваровНаКлиенте(ДоступенРежимОплаты = Неопределено)

	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если Объект.Товары.Количество() > 0 Тогда
		ВызватьАвтоматическийРасчетСкидокВРежимеКСО();
	КонецЕсли;
	ОбновитьСостояниеЭлементовПриИзмененииТаблицыТоваров(ДоступенРежимОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеЭлементовПриИзмененииТаблицыТоваров(ДоступенРежимОплаты = Неопределено)
	
	ЧекПустой = Ложь;
	ПереходКОплатеДоступен = Ложь;
	Если ФормаЗамороженаПослеПробитияЧека() Тогда
		ЧекПустой = Истина;
	ИначеЕсли Объект.Товары.Количество() = 0 Тогда
		ЧекПустой = Истина;
		РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой;
	ИначеЕсли Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект) Тогда
		
		Если РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой Тогда
			РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров;
		КонецЕсли;
		ПереходКОплатеДоступен = ДоступенРежимОплаты;
		
	КонецЕсли;
	
	Если Не РежимПлитки Тогда
		УстановитьПодсказкуКнопкиОтложитьЧек(Элементы.ОтложитьЧекРасширеннаяПодсказка, ЧекПустой);
	КонецЕсли;
	УстановитьВидимостьКомандыУдалитьЧек();
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, РежимКассыСамообслуживания Или Не ЧекПустой);
	ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект, ПереходКОплатеДоступен);
	ПереключитьРежимПоказаОстатков(Ложь);
	ПереключитьРежимНаПоказСкидок(Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсказкуКнопкиОтложитьЧек(ЭлементПодсказка, ЧекПустой)
	
	ЭлементПодсказка.Заголовок = ?(ЧекПустой, НСтр("ru='Отложенные чеки'"), НСтр("ru='Отложить чек'"));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивУправляемыхСкидок(ОбластьДействия = Неопределено)
	
	СтрокиПоОтбору = Неопределено;
	Если ЗначениеЗаполнено(ОбластьДействия) Тогда
		СтрокиПоОтбору = ТаблицаУправляемыхСкидок.НайтиСтроки(Новый Структура("ОбластьДействия", ОбластьДействия));
	КонецЕсли;
	КопияТаблицаУправляемыхСкидок = ТаблицаУправляемыхСкидок.Выгрузить(СтрокиПоОтбору);
	МассивУправляемыхСкидок = ОбщегоНазначения.ТаблицаЗначенийВМассив(КопияТаблицаУправляемыхСкидок);
	Возврат МассивУправляемыхСкидок;
	
КонецФункции

&НаКлиенте
Процедура ВывестиСообщениеОбОшибкеАвторизации(ТипОшибки)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипОшибки", ТипОшибки);
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияРМККлиентПереопределяемый.ВывестиСообщениеОбОшибкеАвторизации(
		СтруктураПараметров, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипОшибки = "ПустойМагазин" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не выбран магазин'");
	ИначеЕсли ТипОшибки = "ПустойКод" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не введен код кассира'");
	ИначеЕсли ТипОшибки = "НеУстановленКод" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Выбранному кассиру не установлен код идентификации'");
	ИначеЕсли ТипОшибки = "НеВерныйКод" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Введен неверный код кассира'");
	ИначеЕсли ТипОшибки = "НеОпределенКассир" Тогда
		СообщениеОбОшибке = НСтр("ru = 'По введенному коду не определен кассир'");
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Ошибка авторизации'");
	КонецЕсли;
	
	ПоказатьПредупреждение( ,СообщениеОбОшибке);
	
КонецПроцедуры

&НаСервере
Функция СуществуетКодАвторизацииУКассира(КассирДляПроверки)
	
	КодСуществует = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьСуществованиеКодаУКассира(КассирДляПроверки, КодСуществует);
	
	Возврат КодСуществует;
	
КонецФункции

&НаКлиенте
Процедура НастроитьКнопкиЦифровойПанели()
	
	Если РежимКассыСамообслуживания Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойТекущийСлой = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть);
	ДополнительныйТекущийСлой = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяДополнительнаяОбласть);
	Если Не ДополнительныйТекущийСлой = Элементы.ГруппаПодтверждениеСМС
		И (Не РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели))
		И (ОсновнойТекущийСлой = Элементы.ГруппаПоискКарты Или ОсновнойТекущийСлой = Элементы.ГруппаКартаНеНайдена)
		И СтрокаПоискаКарты = "" Тогда
			Элементы.ЦифроваяПанельОчистить.Заголовок = "*";
			Элементы.ЦифроваяПанельОчистить.ЦветТекста = ЦветаФормы.Авто;
	Иначе
		Элементы.ЦифроваяПанельОчистить.Заголовок = "Х";
		Элементы.ЦифроваяПанельОчистить.ЦветТекста = ЦветаФормы.ОсобыйТекст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПредупреждениеОНевозможностиОплатыБонусами()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();

	ТекстЗаголовка = НСтр("ru='Внимание'");
	ТекстОшибки = НСтр("ru = 'Бонусами нельзя оплатить алкогольную и табачную продукцию, подарочные сертификаты и подарки.'");
	ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
	ПараметрыОшибки.Вставить("НеВызыватьЗаменуПрав", Истина);
	ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
	
	ПредупреждениеОПродукцииБезОплатыБонусамиПоказано = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРежим(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаРежимЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокКомандРежим, Элементы.КомандаРежим);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРежимЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "Продажа" Тогда
		ПереключитьРежимНаПродажа();
	ИначеЕсли Результат.Значение = "Возврат" Тогда
		ПереключитьРежимНаВозврат();
	ИначеЕсли Результат.Значение = "Скупка" Тогда
		ПереключитьРежимНаСкупка();
	ИначеЕсли Результат.Значение = "ВозвратСкупки" Тогда
		ПереключитьРежимНаВозвратСкупки();
	ИначеЕсли Результат.Значение = "Заказ" Тогда
		ПереключитьРежимНаЗаказ();
	ИначеЕсли Результат.Значение = "ЧекКоррекции" Тогда
		ПереключитьРежимНаЧекКоррекции();
	Иначе
		ПодключаемаяКоманда = Команды.Найти(Результат.Значение);
		Если ТипЗнч(ПодключаемаяКоманда) = Тип("КомандаФормы") Тогда
			Подключаемый_ВыполнитьКоманду(ПодключаемаяКоманда);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЕще(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЕщеЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокКомандЕще, Элементы.КомандаЕще);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЕщеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "Внесение" Тогда
		ОткрытьСтраницуВнесенияДенежныхСредств();
	ИначеЕсли Результат.Значение = "Выемка" Тогда
		ОткрытьСтраницуВыемкиДенежныхСредств();
	ИначеЕсли Результат.Значение = "ПовторнаяПечатьЧека" Тогда
		ПовторнаяПечатьЧекаКлиент();
	ИначеЕсли Результат.Значение = "РаспечататьТоварныйЧек" Тогда
		ПечатьТоварногоЧекаКлиент();
	ИначеЕсли Результат.Значение = "ОткрытьПараметрыТарирования" Тогда
		ПерейтиКПараметрамТарирования();
	ИначеЕсли Результат.Значение = "ПродажаПоЗаказу" Тогда
		ПродажаПоЗаказуКлиент();
	ИначеЕсли Результат.Значение = "БезналичныеПлатежи" Тогда
		БезналичныеПлатежиКлиент();
	ИначеЕсли Результат.Значение = "ПриемАванса" Тогда
		ПриемАвансаКлиент();
	ИначеЕсли Результат.Значение = "ДокументРасчета" Тогда
		ДокументРасчетаКлиент();
	ИначеЕсли Результат.Значение = "ОплатаРассрочки" Тогда
		ОплатаРассрочкиКлиент();
	ИначеЕсли Результат.Значение = "РаспечататьЗаявлениеНаВозврат" Тогда
		РаспечататьЗаявлениеНаВозвратКлиент();
	ИначеЕсли Результат.Значение = "НайтиПоШтрихкоду" Тогда
		НайтиПоШтрихкодуКлиент();
	ИначеЕсли Результат.Значение = "СписатьАлкогольнуюПродукцию" Тогда
		СписатьАлкогольнуюПродукциюКлиент();
	ИначеЕсли Результат.Значение = "СменитьКассира" Тогда
		СменитьМагазинИлиКассира();
	ИначеЕсли Результат.Значение = "СменитьМагазин" Тогда
		СменитьМагазинИлиКассира(Истина);
	ИначеЕсли Результат.Значение = "ОтправитьПодтверждениеНСПК" Тогда
		ОтправитьПодтверждениеНСПККлиент();
	ИначеЕсли Результат.Значение = "СписокСертификатовНСПК" Тогда
		СписокСертификатовНСПККлиент();
	ИначеЕсли Результат.Значение = "ОбновитьОграниченияПродаж" Тогда
		ОбновитьОграниченияПродажИнтерактивно();
	ИначеЕсли Результат.Значение = "ОткрытьФормуОбменаДанными" Тогда
		ЗапуститьОбменДаннымиКлиент();
	ИначеЕсли Результат.Значение = "ОткрытьДенежныйЯщик" Тогда
		ДенежныйЯщикКлиент();
	ИначеЕсли Результат.Значение = "ЗакрытьСмену" Тогда
		ЗакрытьСменуКлиент();
	ИначеЕсли Результат.Значение = "СнятьОтчетБезГашения" Тогда
		ОтчетБезГашенияКлиент();
	ИначеЕсли Результат.Значение = "СверкаИтогов" Тогда
		СверкаИтоговКлиент();
	ИначеЕсли Результат.Значение = "ОтчетЗаСмену" Тогда
		ВывестиОтчетЗаСменуКлиент();
	Иначе
		ПодключаемаяКоманда = Команды.Найти(Результат.Значение);
		Если ТипЗнч(ПодключаемаяКоманда) = Тип("КомандаФормы") Тогда
			Подключаемый_ВыполнитьКоманду(ПодключаемаяКоманда);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТоварногоЧекаКлиент()
	
	Если ПечататьТоварныйЧек() Тогда
		РаспечататьТоварныйЧекКлиент();
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'Печать товарного чека.'");
		ТекстСообщения = НСтр("ru = 'Не удалось распечатать товарный чек.'");
		ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПечататьТоварныйЧек()
	
	ПечататьТоварныйЧек = Ложь;
	
	ЭтоПечатьТоварногоЧекаНаКассовомОборудовании = (СпособФормированияТоварногоЧека = 2);
	ЭтоПечатьТоварногоЧекаНаОфисномПринтере = (СпособФормированияТоварногоЧека = 1);
	Если (ЭтоПечатьТоварногоЧекаНаКассовомОборудовании
		И (ЗначениеЗаполнено(ПринтерЧеков) ИЛИ ЗначениеЗаполнено(ПодключаемоеОборудование)))
		Или ЭтоПечатьТоварногоЧекаНаОфисномПринтере Тогда
		ПечататьТоварныйЧек = Истина;
	КонецЕсли;
	
	Возврат ПечататьТоварныйЧек;
	
КонецФункции

&НаКлиенте
Процедура ПродажаПоЗаказуКлиент()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ВыбратьДокументЗаказПокупателя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БезналичныеПлатежиКлиент()
	
	Если РаботаСЧекомЗавершена() Тогда
		ОбщегоНазначенияРМККлиентПереопределяемый.ВыбратьДокументБезналичнойОплаты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемАвансаКлиент()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОперацияСкупка = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииСкупка(Объект.ВидОперации);
	Если ЭтоОперацияСкупка Тогда
		ПереключитьРежимНаПродажа();
	КонецЕсли;
	
	СформироватьЗаголовок(НСтр("ru='Прием аванса'"));
	
	ПриемАванса = Истина;
	Объект.ОперацияСДенежнымиСредствами = Истина;
	
	НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
	
	ИспользуютсяДокументыРасчета = Элементы.ДокументРасчета.Видимость;
	
	Если ИспользуютсяДокументыРасчета Тогда
		РежимПанелиДанныеПокупателя = 0;
		ВвестиДанныеПокупателяКлиент(Истина);
	Иначе
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьПанельИзбранныхТоваров, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРедактированияСтрокиКорзины, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ЗачетАванса, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Истина);
	
	Объект.Товары.Очистить();
	
	НоваяСтрокаТовары = Объект.Товары.Добавить();
	НоваяСтрокаТовары.ПредставлениеНоменклатураХарактеристика = НСтр("ru = 'Аванс'");
	НоваяСтрокаТовары.ПредставлениеЕдиницыИзмерения = НСтр("ru = 'шт'");
	НоваяСтрокаТовары.Количество = 1;
	НоваяСтрокаТовары.КоличествоУпаковок = 1;
	НоваяСтрокаТовары.СистемаНалогообложения = СистемаНалогообложенияОрганизацииПоУмолчанию;
	НоваяСтрокаТовары.Организация = ОсновнаяОрганизация;
	ОбщегоНазначенияРМККлиентСервер.УстановитьНомерКартинкиСтрокиТовара(НоваяСтрокаТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРасчетаКлиент()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
		СоздатьНовыйНабор();
		Возврат;
	Иначе
		ОбщегоНазначенияРМККлиентПереопределяемый.ВыбратьДокументРасчета(ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент)
		И ОбщегоНазначенияРМККлиент.ЗапрещенаПредоплатаБезКонтрагента() Тогда
		
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
		
		ПоказатьПанельВводаДанныхПокупателя();
		РежимПанелиДанныеПокупателя = 0;
		ПереключитьНаСтраницуПоискКарты();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаРассрочкиКлиент()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
		СоздатьНовыйНабор();
		Возврат;
	Иначе
		
		ЭтоОплатаРассрочки = Истина;
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент)
			И ОбщегоНазначенияРМККлиент.ЗапрещенаПредоплатаБезКонтрагента() Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Для оплаты рассрочки необходимо указать контрагента'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
			НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
			
			ПоказатьПанельВводаДанныхПокупателя();
			РежимПанелиДанныеПокупателя = 0;
			ПереключитьНаСтраницуПоискКарты();
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыбратьДокументОплатыРассрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьЗаявлениеНаВозвратКлиент()
	
	Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) Тогда
		ВвестиПерсональныеДанныеЗаявителя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоШтрихкодуКлиент()
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ОткрытаСтраницаЗаменыПрав() Тогда
		Возврат;
	КонецЕсли;
	Если ПрерватьОбработкуОповещения() Тогда
		Возврат;
	КонецЕсли;
	
	ПереключитьРежимПоказаОстатков(Ложь);

	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(Ложь);
	ПредыдущийСлойДоДанныхПокупателя
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	ШтрихкодДляПоиска = НСтр("ru = ''");
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаНайтиПоШтрихкоду);
	ПереключитьЦифровуюПанельДляВводаСумм(Элементы.РучнойШтрихкодДляПоиска, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаНайтиПоШтрихкодуКлиент()
	
	ЗакрытьГруппуНайтиПоШтрихкодуКлиент();
	ВернутьсяНаСтраницуСтартаПродажПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьГруппуНайтиПоШтрихкодуКлиент()
	
	ПредыдущийСлой = Элементы.ОбластьОперативногоУправленияЧеком;
	Если Не (ПредыдущийСлойДоДанныхПокупателя = Неопределено
			Или ПредыдущийСлойДоДанныхПокупателя = Элементы.ГруппаНайтиПоШтрихкоду) Тогда
				
		ПредыдущийСлой = ПредыдущийСлойДоДанныхПокупателя;
			
	КонецЕсли;
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, ПредыдущийСлой);
	ВыполнитьНастройкуЭлементовПослеЗакрытияПоискаПоШтрихкоду();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуНаКлиенте(Знач ДанныеШтрихкода)
	
	Если ДанныеШтрихкода = "" Тогда
		ТекущийЭлемент = Элементы.РучнойШтрихкодДляПоиска;
		Элементы.РучнойШтрихкодДляПоиска.ПодсказкаВвода = НСтр("ru = 'Введите штрихкод'");
		Возврат;
	КонецЕсли;

	ЗакрытьГруппуНайтиПоШтрихкодуКлиент();
	ВыполнитьПоискШтрихкода(ДанныеШтрихкода);
	ВернутьсяНаСтраницуСтартаПродажПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура СписатьАлкогольнуюПродукциюКлиент()
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	ОбщегоНазначенияРМККлиентПереопределяемый.СписатьАлкогольнуюПродукцию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПодтверждениеНСПККлиент()
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьСписокЧековСОшибкамиНСПК(ЭтотОбъект, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСертификатовНСПККлиент()
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	ДополнительныеПараметры = Новый Структура; 
	ДополнительныеПараметры.Вставить("СледующаяОперация", "ПолучениеСпискаСертификатов");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюНСПКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОборудованиеПлатежныеСистемыКлиент.НачатьПолучениеПараметровКарты(ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбменДаннымиКлиент()
	
	Если РаботаСЧекомЗавершена() Тогда
		ОткрытьФормуОбменаДаннымиКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДенежныйЯщикКлиент()
	
	ЗаголовокПредупреждения = НСтр("ru = 'Не удалось открыть денежный ящик.'");
	Если РаботаСЧекомЗавершена(ЗаголовокПредупреждения) Тогда
		ОткрытьДенежныйЯщикКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетБезГашенияКлиент()
	
	Если ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		СнятьОтчетБезГашенияКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТоварЗапрещенКОплатеБонусамиСкидками(СтрокаТовара)
	
	ЗапретОплатыБонусамиСкидками = СтрокаТовара.Подарок
		Или ОбщегоНазначенияРМК.ЭтоТипНоменклатурыПодарочныйСертификат(СтрокаТовара.ТипНоменклатуры)
		Или ОбщегоНазначенияРМК.ЭтоАлкогольнаяПродукция(СтрокаТовара.ОсобенностьУчета)
		Или ОбщегоНазначенияРМК.ЭтоАльтернативныйТабак(СтрокаТовара.ОсобенностьУчета)
		Или ОбщегоНазначенияРМК.ЭтоТабачнаяПродукция(СтрокаТовара.ОсобенностьУчета);
	Возврат ЗапретОплатыБонусамиСкидками;
	
КонецФункции

&НаСервере
Процедура ДополнитьСтрокуТовараВычисляемымиДанными(СтрокаТовара)
	Если Не СтрокаТовара = Неопределено Тогда
		СтрокаТовара.ЗапретОплатыБонусамиСкидками = ТоварЗапрещенКОплатеБонусамиСкидками(СтрокаТовара);
		ОбщегоНазначенияРМККлиентСервер.УстановитьНомерКартинкиСтрокиТовара(СтрокаТовара);
		Если ОтображатьОстаток Тогда
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьКолонкуОстаток(СтрокаТовара, Объект.ТорговыйОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокиТовараВычисляемымиДанными()

	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		ДополнитьСтрокуТовараВычисляемымиДанными(СтрокаТовара);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоНалПриИзмененииНаКлиенте()
	Если Не РежимЦифровойПанели = РежимыЦифровойПанели.ВводСуммОплаты Тогда
		ОбновлятьСуммуАванса = Ложь;
	КонецЕсли;
	ЗачестьОплатуНаличными();
	ОбнулитьСчетчикНажатийКупюр();
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьПанельВводаНаличных(ВидимостьПанелиВводаНаличных)
	
	Если ИспользоватьПанельВводаНаличных Тогда
		
		Если ВертикальнаяОриентация Тогда
			Если ВидимостьПанелиВводаНаличных Тогда
				ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ПанельВводаНаличныхВертикальная);
			ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель) = Элементы.ПанельВводаНаличныхВертикальная Тогда
				ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект,
					Элементы.ГруппаДополнительноеУправлениеЧеком);
			КонецЕсли;
		Иначе
			УстановитьВидимостьЭлементаФормы(Элементы.ПанельВводаНаличных, ВидимостьПанелиВводаНаличных);
		КонецЕсли;
		
		СчетчикНажатийНаКупюры = Новый Структура;
		Если ВидимостьПанелиВводаНаличных Тогда
			ОбновитьОтображениеКоличестваНажатийНаКупюры();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеДекорацииКупюры(ДекорацияКупюры, НоминалКупюры)
	
	КоличествоНажатий = 0;
	Если Не СчетчикНажатийНаКупюры.Свойство("Номинал" + НоминалКупюры, КоличествоНажатий) Тогда
		КоличествоНажатий = 0;
	КонецЕсли;
	УстановитьЗаголовокДекорацииКупюры(ДекорацияКупюры, КоличествоНажатий);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокДекорацииКупюры(ДекорацияКупюры, КоличествоНажатий)
	
	ЗаголовокДекорации = "";
	Если КоличествоНажатий > 0 Тогда
		ЗаголовокДекорации = "x" + Формат(КоличествоНажатий, "ЧГ=");
	КонецЕсли;
	ДекорацияКупюры.Заголовок = ЗаголовокДекорации;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКоличестваНажатийНаКупюры()
	
	Если ВертикальнаяОриентация Тогда
		ОбновитьОтображениеКоличестваНажатийВГруппеКупюр(Элементы.ГруппаКупюрРяд1);
		ОбновитьОтображениеКоличестваНажатийВГруппеКупюр(Элементы.ГруппаКупюрРяд2);
	Иначе
		ОбновитьОтображениеКоличестваНажатийВГруппеКупюр(Элементы.ГруппаКупюр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьСчетчикНажатийКупюр()
	Если ИспользоватьПанельВводаНаличных Тогда
		СчетчикНажатийНаКупюры = Новый Структура;
		ОбновитьОтображениеКоличестваНажатийНаКупюры();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВыбраннуюСуммуВНаличные(ТекущаяСумма, ЭтоНачалоВвода)
	
	Если ЭтоНачалоВвода Тогда
		СуммаОплаченоНал = ТекущаяСумма;
	Иначе
		СуммаОплаченоНал = СуммаОплаченоНал + ТекущаяСумма;
	КонецЕсли;
	ЗачестьОплатуНаличными();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеКупюры(НоминалКупюры)
	
	Если Не ФормаЗамороженаПослеПробитияЧека() Тогда
		ЭтоНачалоВвода = (СчетчикНажатийНаКупюры.Количество() = 0);
		КлючСтруктуры = "Номинал" + НоминалКупюры;
		КоличествоНажатий = 0;
		Если СчетчикНажатийНаКупюры.Свойство(КлючСтруктуры, КоличествоНажатий) Тогда
			КоличествоНажатий = КоличествоНажатий + 1;
		Иначе
			КоличествоНажатий = 1;
		КонецЕсли;
		Если СчетчикНажатийНаКупюры.Количество() = 0 И СуммаБезСкидки = 0 И ПриемАванса Тогда
			ОбновлятьСуммуАванса = Истина;
		КонецЕсли;
		СчетчикНажатийНаКупюры.Вставить(КлючСтруктуры, КоличествоНажатий);
		ДекорацияКупюры = Элементы.Найти("КоличествоНажатийКупюры"+НоминалКупюры);
		Если Не ДекорацияКупюры = Неопределено Тогда
			УстановитьЗаголовокДекорацииКупюры(ДекорацияКупюры, КоличествоНажатий);
		КонецЕсли;
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		ТекущаяСумма = ОписаниеТипа.ПривестиЗначение(НоминалКупюры);
		Если ТекущаяСумма = 0 Тогда
			ЗаписатьОшибкуОбработкиНажатияКупюры(НСтр("ru = 'Не корректный номинал купюры:'") + НоминалКупюры);
		Иначе
			ПеренестиВыбраннуюСуммуВНаличные(ТекущаяСумма, ЭтоНачалоВвода);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуОбработкиНажатияКупюры(ПодробноеПредставлениеОшибки)
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Выбор номинала купюры.Ошибка обработки нажатия купюры'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеПромокодов(РазблокироватьПромокод = Ложь)
	
	Если РазблокироватьПромокод Тогда
		РазблокироватьПромокоды();
	КонецЕсли;
	
	ВведенныйПромокод = "";
	Элементы.ВведенныйПромокод.Подсказка = "";
	ПромокодДоступен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьВводаПромокода(ОтменитьВводПромокода = Ложь, ПрименитьПромокод = Ложь)
	
	СкрытьГруппуВводаПромокода = Ложь;
	Если Элементы.НайтиПромокод.Видимость Тогда
		
		СкрытьГруппуВводаПромокода = Истина;
		
	Иначе
		
		УстановитьВидимостьЭлементаФормы(Элементы.НайтиПромокод, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияВводПромокода, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ВведенныйПромокод, Истина);
		УстановитьТолькоПросмотрЭлементаФормы(Элементы.ВведенныйПромокод, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ПрименитьПромокод, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ОписаниеНайденнойСкидки, Ложь);

		ПромокодДоступен = Истина; // Отключим подсветку истекших промокодов, пока не выполним проверку следующего кода
		
	КонецЕсли;
	
	Если ОтменитьВводПромокода Тогда
		
		ПредъявленныеПромокоды = ТаблицаПримененныхПромокодов.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
		ЕстьПромокоды = (ПредъявленныеПромокоды.Количество() > 0);
		СкрытьГруппуВводаПромокода = Истина;
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПримененныеПромокоды, ЕстьПромокоды);
		
	КонецЕсли;
	
	Если ПрименитьПромокод Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПримененныеПромокоды, Истина);
		СкрытьГруппуВводаПромокода = Истина;
		
	КонецЕсли;
	Если СкрытьГруппуВводаПромокода Тогда
		СкрытьГруппуВводаПромокода();
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыПромокода(ТекущийПромокод)
	
	// Добавляем реквизиты на форму
	ДобавляемыеРеквизиты = Новый Массив;
	
	СтрокиПромокода = ТаблицаПримененныхПромокодов.НайтиСтроки(Новый Структура("Промокод, ЭтоАктивацияПромокода", ТекущийПромокод, Ложь));
	Если СтрокиПромокода.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	СтрокаПромокода = СтрокиПромокода[0];
	ИдентификаторСтроки = СтрокаПромокода.УникальныйИдентификатор;
	ТипРеквизита  = Метаданные.ОпределяемыеТипы.ПромокодРМК.Тип;
	ИмяРеквизита  = "ПримененныйПромокод_" + ИдентификаторСтроки;
	РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита);
	
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	ИмяГруппы = "ГруппаПримененныеПромокоды_"+ИдентификаторСтроки;
	ИмяЭлемента = "ПримененныйПромокод_" + ИдентификаторСтроки;
	ИмяДекорации = "ДекорацияУдалитьПромокод_" + ИдентификаторСтроки;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	ЭтотОбъект[ИмяРеквизита] = ТекущийПромокод;
	
	// Добавляем поля ввода для новых реквизитов
	ГруппаЭлементов = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаПримененныеПромокоды);
	ГруппаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЭлементов.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаЭлементов.ОтображатьЗаголовок = Ложь;
	Элементы.Переместить(ГруппаЭлементов, ГруппаЭлементов.Родитель, Элементы.ГруппаДобавитьПромокод);
	
	ПолеПромокода = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Элементы[ИмяГруппы]);
	ПолеПромокода.ПутьКДанным = ИмяРеквизита;
	ПолеПромокода.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеПромокода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеПромокода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	ПолеПромокода.Шрифт = ШрифтыСтиля.ШрифтОбычный12РМК;
	ПолеПромокода.РастягиватьПоГоризонтали = Истина;
	ПолеПромокода.РасширеннаяПодсказка.Шрифт = ПолеПромокода.Шрифт;
	ПолеПромокода.Ширина = 20;
	ПолеПромокода.РасширеннаяПодсказка.Ширина = 20;
	ПолеПромокода.Подсказка = ОписаниеСкидкиПромокода;
	
	ДекорацияУдалить = Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), Элементы[ИмяГруппы]);
	ДекорацияУдалить.Вид = ВидДекорацииФормы.Картинка;
	ДекорацияУдалить.Картинка = БиблиотекаКартинок.ОформлениеКрест;
	ДекорацияУдалить.УстановитьДействие("Нажатие", "ДекорацияУдалитьПромокодНажатие");
	ДекорацияУдалить.Гиперссылка = Истина;
	ДекорацияУдалить.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуПримененныхПромокодов()
	
	ПредъявленныеПромокоды = ТаблицаПримененныхПромокодов.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
	Для Каждого СтрокаТаблицы Из ПредъявленныеПромокоды Цикл
		УдалитьПромокод(СтрокаТаблицы.УникальныйИдентификатор);
	КонецЦикла;
	
	ТаблицаПримененныхПромокодов.Очистить();
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПримененныеПромокоды, Ложь);
	
КонецПроцедуры

Процедура ДобавитьРеквизитыУправляемойСкидки(СкидкаНаценка, ИдентификаторСтрокиТоваров)
	
	СтрокиСкидок = ТаблицаВыбранныхУправляемыхСкидок.НайтиСтроки(Новый Структура("СкидкаНаценка, ИдентификаторСтроки", СкидкаНаценка, ИдентификаторСтрокиТоваров));
	Если СтрокиСкидок.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	СтрокаСкидок = СтрокиСкидок[0];
	ИдентификаторСтроки = СтрокаСкидок.ПолучитьИдентификатор();
	СтрокиПараметровСкидок = ТаблицаУправляемыхСкидок.НайтиСтроки(Новый Структура("СкидкаНаценка", СкидкаНаценка));
	Если СтрокиПараметровСкидок.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	ПараметрыТекущейСкидки = СтрокиПараметровСкидок[0];

	ИмяГруппы = "ГруппаПримененныеУправляемыеСкидки_"+ИдентификаторСтроки;
	ИмяКоманды = "КомандаУдалитьУправляемуюСкидку_" + ИдентификаторСтроки;
	
	ПредставлениеСкидки = Строка(СкидкаНаценка);
	ДлинаЗаголовка = 10;
	Если СтрДлина(ПредставлениеСкидки ) > ДлинаЗаголовка + 3 Тогда
		ПредставлениеСкидки = Лев(ПредставлениеСкидки, ДлинаЗаголовка) + "...";
	КонецЕсли;
	ПредставлениеСкидки = ПредставлениеСкидки + " ×";
	
	КомандаУдалить = Команды.Добавить(ИмяКоманды);
	КомандаУдалить.Действие = "ДекорацияУдалитьУправляемуюСкидкуНажатие";
	Если ПараметрыТекущейСкидки.ОбластьДействия = "На строку" Тогда
		КомандаУдалить.Картинка = БиблиотекаКартинок.МетаданныеВнешниеИсточникиТаблицы;
	Иначе
		КомандаУдалить.Картинка = БиблиотекаКартинок.Документ;
	КонецЕсли;
	КомандаУдалить.Отображение = ОтображениеКнопки.КартинкаИТекст;	
	КомандаУдалить.Заголовок = ПредставлениеСкидки;
	
	// Добавляем поля ввода для новой кнопки
	ГруппаЭлементов = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаПримененныеУправляемыеСкидки);
	ГруппаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЭлементов.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаЭлементов.ОтображатьЗаголовок = Ложь;
	
	Если ПараметрыТекущейСкидки.ОбластьДействия = "На документ" Тогда
		// На форме присутствует невидимая группа ГруппаПримененныеУправляемыеСкидкиГоризонтально, скидки на документ будут перед ней, на строку - после нее
		// Тогда скидки на документ будут отображены в одном и том же порядке для всех строк, и не будут "скакать" при переключении между строками
		Элементы.Переместить(ГруппаЭлементов, Элементы.ГруппаПримененныеУправляемыеСкидки, Элементы.ГруппаПримененныеУправляемыеСкидкиГоризонтально);
	КонецЕсли;
		

	// Добавляем кнопку, отображающую примененную скидку (при нажатии скидка будет отменена)
	КнопкаУдалитьСкидку = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ИмяГруппы]);
	КнопкаУдалитьСкидку.ИмяКоманды = ИмяКоманды;
	КнопкаУдалитьСкидку.Фигура = ФигураКнопки.Овал;
	КнопкаУдалитьСкидку.ПоложениеКартинки = ПоложениеКартинкиКнопкиФормы.Лево;
	КнопкаУдалитьСкидку.ЦветФона = ЦветаСтиля.ЦветАктивнойКнопкиРМК;
	КнопкаУдалитьСкидку.ЦветРамки = КнопкаУдалитьСкидку.ЦветФона;
	//
	Элементы.ГруппаПримененныеУправляемыеСкидки.Видимость = Истина
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуВыбранныхУправляемыхСкидок()
	
	Для Каждого СтрокаТаблицы Из ТаблицаВыбранныхУправляемыхСкидок Цикл
		УдалитьУправляемуюСкидку(СтрокаТаблицы.ПолучитьИдентификатор());
	КонецЦикла;
	
	ТаблицаВыбранныхУправляемыхСкидок.Очистить();
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПримененныеУправляемыеСкидки, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьПромокоды(ИдентификаторСтроки = Неопределено, Промокод = "")
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		Если ЗначениеЗаполнено(Промокод) Тогда
			ВведенныйПромокод = Промокод;
			РазблокироватьОбъектСервераЛояльности("promocode");
		Иначе
			Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
				Отбор = Новый Структура("УникальныйИдентификатор", ИдентификаторСтроки);
				СписокПромокодов = ТаблицаПримененныхПромокодов.НайтиСтроки(Отбор);
			Иначе
				СписокПромокодов = ТаблицаПримененныхПромокодов;
			КонецЕсли;
			
			Для Каждого СтрокаПромокода Из СписокПромокодов Цикл
				
				Если НЕ СтрокаПромокода.ЭтоАктивацияПромокода Тогда
					
					ВведенныйПромокод = СтрокаПромокода.Промокод;
					РазблокироватьОбъектСервераЛояльности("promocode");
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуЦифровойПанели()
	
	Если РежимЦифровойПанели = РежимыЦифровойПанели.ВводСуммОплаты Тогда
		СкрытьЦифровуюПанельДляВводаСумм();
	ИначеЕсли РежимЦифровойПанели = РежимыЦифровойПанели.ВводСимволов Тогда
		ОтменитьВводНаПанели();
	ИначеЕсли РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		ЗакрытьФормуДанныеПокупателяСОтменойПробитияЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКоличестваНажатийВГруппеКупюр(ЭлементГруппаКупюр)
	
	Для Каждого ГруппаКупюры Из ЭлементГруппаКупюр.ПодчиненныеЭлементы Цикл
		НоминалКупюры = сред(ГруппаКупюры.Имя, 13);
		ГруппаДекорацииКупюры = ГруппаКупюры.ПодчиненныеЭлементы.Найти("ГруппаДекорацийКупюры"+НоминалКупюры);
		ДекорацияКупюры = ГруппаДекорацииКупюры.ПодчиненныеЭлементы.Найти("КоличествоНажатийКупюры"+НоминалКупюры);
		ОбновитьОтображениеДекорацииКупюры(ДекорацияКупюры, НоминалКупюры);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьЮКассаВерНажатие(Элемент)
	
	СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаТоваровНаКлиенте()
	
	Если ЭтоЗаменаТоваров Тогда
		ЗаменаТоваровОтключить();
	Иначе
		ЗаменаТоваровВключить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаТоваровВключить()
	
	МаркированныйТовар = Объект.Товары.НайтиСтроки(Новый Структура("НеобходимостьВводаКодаМаркировки", Истина));
	Если МаркированныйТовар.Количество() > 0 Тогда
		ЗаголовокОшибки = НСтр("ru = 'Замена товара.'");
		ТекстОшибки = НСтр("ru = 'Замена маркированного товара не поддерживается.'");
		ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки, ПараметрыОшибки);
		Возврат;
	КонецЕсли;
	
	Объект.Оплата.Очистить();
	
	НастроитьЭлементыВРежимеЗаменаТоваров();
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеЗаменаТоваров = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаТоваровОтключить()
	
	СформироватьЗаголовок(НСтр("ru='Возврат'"));
	
	СуммаТоваровКЗамене = 0;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаТоваровКЗамене, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, ИспользоватьОплатуПлатежнымиКартами);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeНаличные, ИспользоватьОплатуНаличными);
	УстановитьВидимостьЭлементаФормы(Элементы.ОтложитьЧек, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиРасчетаСкидок, ИспользоватьАвтоматическиеСкидки);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыНСПК, ИспользоватьОплатуСертификатамиНСПК);
	
	Результат = Новый Структура;
	Результат.Вставить("ЧекККМ", ЧекККМПродажа);
	ДополнительныеПараметры = Неопределено;
	ВыборЧекаЗавершение(Результат, ДополнительныеПараметры);
	
	ЭтоЗаменаТоваров = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСуммуПодарочногоСертификата(ИдентификаторСертификата, ИмяЭлементаСуммыСертификата)
	
	Отбор = Новый Структура();
	Отбор.Вставить("УникальныйИдентификатор", ИдентификаторСертификата);
	СтрокиТаблицыПоИдентификатору = ТаблицаПодарочныхСертификатов.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицыПоИдентификатору Из СтрокиТаблицыПоИдентификатору Цикл
			
		МаксимальноВозможнаяСумма = СтрокаТаблицыПоИдентификатору.ЛимитСертификата;
			
		НомерСертификата = СтрокаТаблицыПоИдентификатору.НомерСертификата;
		ОтборПоНомеру = Новый Структура();
		ОтборПоНомеру.Вставить("НомерСертификата", НомерСертификата);
		СтрокиТаблицыПоНомеру = ТаблицаПодарочныхСертификатов.НайтиСтроки(ОтборПоНомеру);
		Для Каждого СтрокаТаблицыПоНомеру Из СтрокиТаблицыПоНомеру Цикл
			Если СтрокаТаблицыПоНомеру.УникальныйИдентификатор = ИдентификаторСертификата Тогда
				Продолжить;
			КонецЕсли;
			МаксимальноВозможнаяСумма = МаксимальноВозможнаяСумма - СтрокаТаблицыПоНомеру.СуммаСертификата;
		КонецЦикла;
			
		СуммаСертификата = Мин(ЭтотОбъект[ИмяЭлементаСуммыСертификата], МаксимальноВозможнаяСумма);
		СтрокаТаблицыПоИдентификатору.СуммаСертификата = СуммаСертификата;
		ЭтотОбъект[ИмяЭлементаСуммыСертификата] = СуммаСертификата;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьВводОплатыВРассрочку()
	
	ТекстПредупреждения = НСтр("ru = 'Для оплаты в рассрочку необходимо указать контрагента'");
	Если Не ПереключитьНаВыборКонтрагента(ТекстПредупреждения) Тогда
		Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция Тогда
			ОплатаВРассрочкуЗавершение(КодВозвратаДиалога.Нет);
		Иначе
			НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
			Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда 
				ЗадатьВопросПоРасчетуСкидок("ОплатаВРассрочкуЗавершение", , Истина);
			Иначе
				ОплатаВРассрочкуЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьВводПредоплаты()
	
	ТекстПредупреждения = НСтр("ru = 'Для предоплаты необходимо указать контрагента'");
	Если Не ПереключитьНаВыборКонтрагента(ТекстПредупреждения) Тогда
		Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция Тогда
			ПредоплатаЗавершение(КодВозвратаДиалога.Нет);
		Иначе
			НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
			Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
				ЗадатьВопросПоРасчетуСкидок("ПредоплатаЗавершение", , Истина);
			Иначе 
				ПредоплатаЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ФункцииПроцедурыВертикальнаяОриентация

#Область ОбработчикиКомандВертикальнаяОриентация

&НаКлиенте
Процедура ВернутьсяВРежимПодбораТовара(Команда)
	
	ПереключитьВРежимВводаТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРежимОплаты(Команда)
	
	ПереключитьВРежимОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЦифровойПанелиПоиск(Команда)
	
	Если РежимЦифровойПанели = РежимыЦифровойПанели.ВводСуммОплаты Тогда
		ПеревестиКурсорНаВводДробнойЧасти();
	ИначеЕсли РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		ОбработатьШтрихкодКлиент(СтрокаПоискаКарты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеСертификаты(Команда)
	
	УдалитьВсеПодарочныеСертификаты();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийВертикальнаяОриентация

&НаКлиенте
Процедура СуммаОплаченоСБППриИзменении(Элемент)

	СуммаОплаченоQRКодомПриИзменении(СуммаОплаченоСБП, Элементы.ГруппаОплатаСБП);

КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоЮКассаПриИзменении(Элемент)

	СуммаОплаченоQRКодомПриИзменении(СуммаОплаченоЮКасса, Элементы.ГруппаОплатаЮКасса);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоНалАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	ВосстановитьПанельВводаНаличных();
	СменитьПереключитьЦифровуюПанель(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплатаСертификатамиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБНАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьПереключитьЦифровуюПанель(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоСБПАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоЮКассаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоПредоплатаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоВРассрочкуАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоЗачетАвансаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоКредитомАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБонусамиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьПереключитьЦифровуюПанель(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаНаличныхКВыдачеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоКредитомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементыДанныхПокупателя

&НаКлиенте
Процедура СтрокаПоискаКартыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаДанныхПокупателя(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПовторныйПоискКартыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаДанныхПокупателя(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаЧекаПочтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЭлементВводаДанныхПокупателя = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаЧекаТелефонАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаДанныхПокупателя(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НоваяКартаНомерАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаДанныхПокупателя(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НоваяКартаТелефонАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаДанныхПокупателя(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НоваяКартаФИОАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЭлементВводаДанныхПокупателя = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура НоваяКартаПочтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЭлементВводаДанныхПокупателя = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура НоваяКартаДатаРожденияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаДанныхПокупателя(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НоваяКартаДатаРожденияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ОписаниеТипаДата = Новый ОписаниеТипов("Дата");
	МассивЦифрДаты = ИнтерфейсРМКСлужебныйКлиентСервер.СформироватьМассивЦифрДаты(Текст);
	Если ИнтерфейсРМКСлужебныйКлиентСервер.МассивЦифрЗаполненПолностью(МассивЦифрДаты) Тогда
		ДатаКаноническаяСтрока = ИнтерфейсРМКСлужебныйКлиентСервер.СформироватьКаноническуюСтрокуДатыИзМассиваЦифр(МассивЦифрДаты);
		ПолученнаяДата = ОписаниеТипаДата.ПривестиЗначение(ДатаКаноническаяСтрока);
		Если Не ЗначениеЗаполнено(ПолученнаяДата) Тогда
			ВернутьПредыдущееЗначениеТекстаДаты(Элемент);
		Иначе
			ТекстДатыРожденияСозданиеКарты = Текст;
		КонецЕсли;
	Иначе
		Если ИнтерфейсРМКСлужебныйКлиент.НекорректноВведеныЦифрыДаты(МассивЦифрДаты) Тогда
			ВернутьПредыдущееЗначениеТекстаДаты(Элемент);
		Иначе
			ТекстДатыРожденияСозданиеКарты = Текст;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоказатьПанельВводаДанныхПокупателя()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя;
	ТекущийСлой = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	Если Не ТекущийСлой = Элементы.ГруппаДанныеПокупателя Тогда
		ПредыдущийСлойДоДанныхПокупателя = ТекущийСлой;
	КонецЕсли;
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть) = Элементы.ОсновнаяГруппаСозданиеКарты Тогда
		ИнтерфейсРМКСлужебныйКлиент.УстановитьТекстДекорацииОПерсональныхДанных(Элементы.ДекорацияТекстОПерсональныхДанных);
	КонецЕсли;
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДанныеПокупателя);
	УстановитьВидимостьЭлементаФормы(Элементы.ПанельИтоговПоЧекам, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЦифроваяПанель, Истина);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандЦифроваяПанель);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗаголовкиКнопокПоискаОтменыКарты(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Элементы.ДекорацияКартаНайденаЗаголовок.Заголовок = НСтр("ru = 'Покупатель найден'");
		Элементы.ОтменитьВводКарты.Заголовок = НСтр("ru = 'Отменить выбор покупателя'");
	Иначе
		
		ЗаголовокДекорацииКартаНайдена = НСтр("ru = 'Карта найдена'");
		Если Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта)
				И ИнтерфейсРМКСлужебныйКлиентСервер.СохраненТолькоНомерКартыЛояльности(Форма.ПараметрыКартыЛояльности) Тогда
				
			ЗаголовокДекорацииКартаНайдена = НСтр("ru = 'Карта не найдена.
				|Номер карты сохранен в чеке'");
				
		КонецЕсли;
		Элементы.ДекорацияКартаНайденаЗаголовок.Заголовок = ЗаголовокДекорацииКартаНайдена;
		Элементы.ОтменитьВводКарты.Заголовок = НСтр("ru = 'Отменить ввод карты'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВыключитьГруппуДанныхПокупателя(ИмяГруппы, ИмяПоля, КоличествоОтображаемыхПолей, СчетчикВключенныхПолей)
	Если СчетчикВключенныхПолей >= КоличествоОтображаемыхПолей Тогда
		УстановитьВидимостьЭлементаФормы(Элементы[ИмяГруппы], Ложь);
	Иначе
		Если ЗначениеЗаполнено(ЭтотОбъект[ИмяПоля]) Тогда
			УстановитьВидимостьЭлементаФормы(Элементы[ИмяГруппы], Истина);
			СчетчикВключенныхПолей = СчетчикВключенныхПолей + 1;
		Иначе
			УстановитьВидимостьЭлементаФормы(Элементы[ИмяГруппы], Ложь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОплатуКартой(Команда, ДополнительныеПараметры = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ТаблицаПлатежныхКарт") Тогда
		
		СписокВидовПлатежныхКарт = Новый СписокЗначений;
		
		Если ЭтотОбъект.ТаблицаПлатежныхКарт.Количество() > 1 И НЕ Элементы.ГруппаОплатаКартой.Видимость Тогда
			
			Итератор = 0;
			
			Для Каждого СтрокаТаблицыТерминалов Из ЭтотОбъект.ТаблицаПлатежныхКарт Цикл
				
				НазваниеКоманды = СтрШаблон("ОплатаКартой_%1", Итератор);
				СписокВидовПлатежныхКарт.Добавить(НазваниеКоманды, СтрокаТаблицыТерминалов.ВидОплаты);
				Итератор = Итератор + 1;
				
			КонецЦикла;
			
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораВидаПлатежнойКарты", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВыборИзМеню(Оповещение, СписокВидовПлатежныхКарт, Элементы.ОплатаКартой);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура("Значение", Команда.Имя);
	ПослеВыбораВидаПлатежнойКарты(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьВРежимОплаты()
	
	ПереключитьРежимНаПоказСкидок(Ложь);
	ПереключитьРежимПоказаОстатков(Ложь);
	Если ИспользоватьСерверЛояльностиПолучательДанных И НЕ ИспользоватьАвтоматическиеСкидки Тогда
		ПроверитьСоединениеССерверомЛояльности();
	КонецЕсли;
	
	НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
	Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ПереключитьВРежимОплатыЗавершение", , Истина);
	Иначе
		КодВозвратаОтвет = ?(НеобходимПересчетАвтоматическихСкидок, КодВозвратаДиалога.Да, КодВозвратаДиалога.Нет);
		ПереключитьВРежимОплатыЗавершение(КодВозвратаОтвет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьВРежимОплатыНаКлиенте(НазначенныйРежим = Неопределено, БлокироватьРедактированиеЧека = Истина)
	
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) И ЭтоОперацияПродажи И Не ЭтоЧекКоррекции Тогда
		ТекстОшибки = "";
		ПроверитьСоответствиеЗаказу(ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстЗаголовка = НСтр("ru = 'Ошибка.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПереключитьРежимПоказаОстатков(Ложь);
	ПереключитьРежимНаПоказСкидок(Ложь);
	
	Если НазначенныйРежим = Неопределено Тогда
		Если БлокироватьРедактированиеЧека Тогда
			РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате;
		Иначе
			РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция;
		КонецЕсли;
	Иначе
		РежимРаботыСЧеком = НазначенныйРежим;
	КонецЕсли;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСлоевПраваяНижняяВспомогательнаяПанель, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ПанельВидовОплат, Истина);
	Если НЕ ЗначениеЗаполнено(ИдентификаторКорзиныНСПК) Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПробитияЧека);
	Иначе
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПробитияЧекаНСПК);
	КонецЕсли;
	
	Если БлокироватьРедактированиеЧека Тогда
		ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьЭлементовФормыПриПереключенииРежима(ЭтотОбъект,
			ЭтоОперацияПродажи);
		ВключитьОтображениеЧекаПоОрганизациям();
		Если ИспользоватьПанельИзбранныхТоваров Тогда
			УстановитьВидимостьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТаблицуОплат();
	НастроитьДоступностьПробитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьВРежимОплатыЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ПереключитьВРежимОплатыНаКлиенте()";
		РассчитатьСкидкиКлиент(, Истина);
	Иначе
		ПереключитьВРежимОплатыНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьВРежимВводаТоваров()
	
	РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров;
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	ВсеСуммыПересчитаны = Ложь;
	ОтменитьВведенныеОплаты(ВсеСуммыПересчитаны);
	УстановитьВидимостьЭлементаФормы(Элементы.ПанельВидовОплат, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСлоевПраваяНижняяВспомогательнаяПанель, Истина);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПереходаКОплате);
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьЭлементовФормыПриПереключенииРежима(ЭтотОбъект,
		ЭтоОперацияПродажи, (Не ВсеСуммыПересчитаны));
	ВыключитьОтображениеЧекаПоОрганизациям();
	Если ИспользоватьПанельИзбранныхТоваров Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура АктивироватьГруппуВводаПромокода()
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаВводПромокода);
	Если Элементы.ПанельВидовОплат.Видимость Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ПанельВидовОплат, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСлоевПраваяНижняяВспомогательнаяПанель, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура СкрытьГруппуВводаПромокода()
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительнаяИнформацияПоЧеку);
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект) Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ПанельВидовОплат, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСлоевПраваяНижняяВспомогательнаяПанель, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтображениеЧекаПоОрганизациям()
	
	ПереключитьНаСледующийЧек("НаСледующий");
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСписокЧековПродажи, Истина);
	Если РазличныеСНОВСпискеПокупок().Количество() > 1 Тогда
		ОплатаБезДеленияПоЧекам = Истина;
	КонецЕсли;
	Элементы.Товары.ОтборСтрок = Неопределено;
	ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
	ПроинформироватьПользователяОКоличествеЧеков();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьОтображениеЧекаПоОрганизациям()
	
	ВыбраннаяОрганизация = Неопределено;
	ВыбраннаяСистемаНалогообложения = Неопределено;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСписокЧековПродажи, Ложь);
	Элементы.Товары.ОтборСтрок = Неопределено;
	ПересчитатьИтогиТабличнойЧастиТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаОплатуСертификатомЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ПереключитьНаОплатуСертификатом()";
		РассчитатьСкидкиКлиент();
	Иначе
		ПереключитьНаОплатуСертификатом();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаОплатуСертификатом()

	ГруппаСлоевВспомогательнаяПанель = Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель;
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевВспомогательнаяПанель)
		= Элементы.ГруппаПоискСертификатов Тогда
		
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаДополнительноеУправлениеЧеком);
		
	Иначе
		Если ТаблицаПодарочныхСертификатов.Количество() = 0 Тогда
			ОткрытьФормуВыбораПодарочногоСертификата();
		Иначе
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаПоискСертификатов);
			ПолеСуммы = ПолучитьПоследнееВидимоеПолеСуммыСертификата();
			Если (Не ПолеСуммы = Неопределено) И Не СенсорныйЭкран Тогда
				ТекущийЭлемент = ПолеСуммы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуПодарочногоСертификата(УникальныйИдентификаторСертификата, УдалитьСтрокуТаблицы = Истина)
	
	ИдентификаторСертификата = УникальныйИдентификаторСертификата;
	
	РазблокироватьСертификат = Ложь;
	Если ЭтоСерийныйПодарочныйСертификат Тогда
		ОтборПоИдентификатору = Новый Структура("УникальныйИдентификатор", ИдентификаторСертификата);
		СтрокиПоИдентификатору = ТаблицаПодарочныхСертификатов.НайтиСтроки(ОтборПоИдентификатору);
		Для Каждого СтрокаПоИдентификатору Из СтрокиПоИдентификатору Цикл
			ОтборПоНомеру = Новый Структура("НомерСертификата", СтрокаПоИдентификатору.НомерСертификата);
			СтрокиПоНомеру = ТаблицаПодарочныхСертификатов.НайтиСтроки(ОтборПоНомеру);
			РазблокироватьСертификат = СтрокиПоНомеру.Количество() = 1;
			НомерСертификата = СтрокаПоИдентификатору.НомерСертификата;
		КонецЦикла;
	КонецЕсли;
	
	УдалитьПодарочныйСертификат(ИдентификаторСертификата, УдалитьСтрокуТаблицы);
	ОчиститьДанныеПодарочногоСертификата(ЭтоСерийныйПодарочныйСертификат И РазблокироватьСертификат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыОплатыПриРедактированииСертификатов()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеОтменитьОплатуСертификатом = (ТаблицаПодарочныхСертификатов.Количество() = 0);
	ПараметрыПересчета.ПриИзмененииСуммыОплатыСертификатом = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеПодарочныеСертификаты(БезПересчетаСумм = Ложь)
	
	КоличествоПодарочныхСертификатов = ТаблицаПодарочныхСертификатов.Количество();
	Итератор = 0;
	Пока Итератор < КоличествоПодарочныхСертификатов Цикл
		ИндексСтроки = КоличествоПодарочныхСертификатов - Итератор - 1; 
		СтрокаСертификата = ТаблицаПодарочныхСертификатов.Получить(ИндексСтроки);
		УдалитьСтрокуПодарочногоСертификата(СтрокаСертификата.УникальныйИдентификатор, Ложь);
		Итератор = Итератор + 1;
	КонецЦикла;
	ТаблицаПодарочныхСертификатов.Очистить();
	Если БезПересчетаСумм Тогда
		СуммаОплаченоСертификатами = 0;
	Иначе
		ПересчитатьСуммыОплатыПриРедактированииСертификатов();
	КонецЕсли;
	УстановитьВидимостьКомандыУдаленияВсехСертификатов(Элементы.ГруппаУдалитьСертификаты, ТаблицаПодарочныхСертификатов);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатами, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Ложь);
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель) = Элементы.ГруппаПоискСертификатов Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаДополнительноеУправлениеЧеком);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМаксимальныеСуммыСертификатов()
	Для Каждого СтрокаПодарочногоСертификата Из ТаблицаПодарочныхСертификатов Цикл
		ИмяРеквизита = "СуммаСертификата_" + СтрокаПодарочногоСертификата.УникальныйИдентификатор;
		РеквизитСуммы = Элементы.Найти(ИмяРеквизита);
		Если НЕ РеквизитСуммы = Неопределено Тогда
			СуммаТекущегоПоля = ЭтаФорма[ИмяРеквизита];
			Если Не РеквизитСуммы = Неопределено Тогда
				РеквизитСуммы.МаксимальноеЗначение = Макс(0, Мин(СуммаКОплате + СуммаТекущегоПоля, СтрокаПодарочногоСертификата.БалансСертификата));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПанельВводаНаличных()
	
	Если ВертикальнаяОриентация И ИспользоватьПанельВводаНаличных Тогда
		Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель) = Элементы.ПанельВводаНаличныхВертикальная Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ПанельВводаНаличныхВертикальная);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПереключитьНаВыборКонтрагента(ТекстПредупреждения)
	
	РезультатФункции = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент)
		И ОбщегоНазначенияРМККлиент.ЗапрещенаПредоплатаБезКонтрагента() Тогда
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
		ПоказатьПанельВводаДанныхПокупателя();
		ПереключитьНаСтраницуПоискКарты();
		РезультатФункции = Истина;
		
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ПоказатьОшибкуУдаленияПредоплатыРассрочки()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	РезультатФункции = Ложь;
	Если ПриемАвансаПоЗаказу Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка удаления вида оплаты.'");
		ТекстОшибки = НСтр("ru = 'По заказ-наряду можно принять только аванс'");
		ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
		
		РезультатФункции = Истина;
		
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

#Область ОбработкаКомандЦифровойПанели

&НаКлиенте
Процедура ПеревестиКурсорНаВводДробнойЧасти()
	
	Если Не ЭлементВводаСуммы = Неопределено Тогда
		ИмяЭлемента = ЭлементВводаСуммы.Имя;
		НачалоВыделения = 0;
		НачалоСтроки = 0;
		КонецВыделения = 0;
		КонецСтроки = 0;
		ЭлементВВодаСуммы.ПолучитьГраницыВыделения(НачалоСтроки, НачалоВыделения, КонецСтроки, КонецВыделения);
		СимволРазделителя = ИнтерфейсРМКСлужебныйКлиентСервер.РазделительДробнойЧасти();
		ПозицияРазделителя = СтрНайти(ЭлементВВодаСуммы.ТекстРедактирования, СимволРазделителя);
		Если АктивироватьЭлементВводаСуммаПриВозможности(ИмяЭлемента) Тогда
			Если ПозицияРазделителя > 0 И ПозицияРазделителя >= НачалоВыделения Тогда
				НоваяПозицияКурсора = ПозицияРазделителя + 1;
				ЭлементВВодаСуммы.УстановитьГраницыВыделения(НоваяПозицияКурсора, НоваяПозицияКурсора);
			Иначе
				ЭлементВВодаСуммы.УстановитьГраницыВыделения(НачалоВыделения, КонецВыделения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьЦифруВПолеСуммыОплаты(СимволЦифры)
	
	Если (Не ЭлементВводаСуммы = Неопределено) И ЭлементВводаСуммы.Доступность Тогда
		
		НачалоВыделения = 0;
		НачалоСтроки = 0;
		КонецВыделения = 0;
		КонецСтроки = 0;
		ВводСЦифровойКлавиатуры = Истина;
		Если РежимЦифровойПанели = РежимыЦифровойПанели.ВводСимволов Тогда
			ЭлементВВодаСуммы.ПолучитьГраницыВыделения(НачалоСтроки, НачалоВыделения, КонецСтроки, КонецВыделения);
			Если ЭтоПолеСтрокиЦифр(ЭлементВВодаСуммы) Тогда
				ЭлементВводаСуммы.УстановитьГраницыВыделения(КонецВыделения, КонецВыделения);
			КонецЕсли;
			ЭлементВводаСуммы.ВыделенныйТекст = СимволЦифры;
			ДлинаТекста = СтрДлина(ЭлементВводаСуммы.ТекстРедактирования);
			ЭлементВводаСуммы.УстановитьГраницыВыделения(ДлинаТекста + 1, ДлинаТекста + 1);
		Иначе
			ИмяЭлемента = ЭлементВводаСуммы.Имя;
			СимволРазделителя = ИнтерфейсРМКСлужебныйКлиентСервер.РазделительДробнойЧасти();
			ПозицияРазделителя = СтрНайти(ЭлементВВодаСуммы.ТекстРедактирования, СимволРазделителя);
			ЭлементВВодаСуммы.ПолучитьГраницыВыделения(НачалоСтроки, НачалоВыделения, КонецСтроки, КонецВыделения);
			ВводДробнойЧасти = (НачалоВыделения > ПозицияРазделителя);
			ЭлементВВодаСуммы.ВыделенныйТекст = СимволЦифры;
			ДлинаТекста = СтрДлина(ЭлементВВодаСуммы.ТекстРедактирования);
			ПозицияРазделителя = СтрНайти(ЭлементВВодаСуммы.ТекстРедактирования, СимволРазделителя);
			Если АктивироватьЭлементВводаСуммаПриВозможности(ИмяЭлемента) Тогда
				Если ВводДробнойЧасти Тогда
					ПозицияВыделения = Мин(ДлинаТекста + 1, НачалоВыделения + 1);
					ЭлементВВодаСуммы.УстановитьГраницыВыделения(ПозицияВыделения, ПозицияВыделения);
				Иначе
					ЭлементВВодаСуммы.УстановитьГраницыВыделения(ПозицияРазделителя, ПозицияРазделителя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ВводСЦифровойКлавиатуры = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоПолеСтрокиЦифр(ЭлементПроверки)
	РезультатФункции = Ложь;
	Если ЭлементПроверки = Элементы.РучнойШтрихкодДляПоиска Или ЭлементПроверки = Элементы.ШтрихкодДляПоиска
			Или ЭлементПроверки = Элементы.НомерСертификата Тогда
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура ОчиститьТекстРедактированияПоляФормы()
	
	Если (Не ЭлементВводаСуммы = Неопределено) И ЭлементВводаСуммы.Доступность Тогда
		ВводСЦифровойКлавиатуры = Истина;
		ИмяЭлемента = ЭлементВводаСуммы.Имя;
		ДлинаТекста = СтрДлина(ЭлементВводаСуммы.ТекстРедактирования);
		ЭлементВводаСуммы.УстановитьГраницыВыделения(1,ДлинаТекста+1);
		ЭлементВводаСуммы.ВыделенныйТекст = "";
		АктивироватьЭлементВводаСуммаПриВозможности(ИмяЭлемента);
		ВводСЦифровойКлавиатуры = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция АктивироватьЭлементВводаСуммаПриВозможности(ИмяЭлемента)
	
	РезультатФункции = Ложь;
	Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		СкрытьЦифровуюПанельДляВводаСумм();
	Иначе
		ТекущийЭлемент = ЭлементВводаСуммы;
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьКомандуЦифровойПанелиПриВводеСуммыОплаты(Команда)
	
	ИмяКоманды = Команда.Имя;
	Если ИмяКоманды = "ЦифроваяПанельОчистить" Тогда
		ОчиститьТекстРедактированияПоляФормы();
	ИначеЕсли Лев(ИмяКоманды, 19) = "ЦифроваяПанельЦифра" Тогда
		Цифра = Прав(ИмяКоманды, 1);
		ВставитьЦифруВПолеСуммыОплаты(Цифра);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуЦифровойПанелиДанныеПокупателя(Команда)
	
	ОбластьДанныхПокупателя = Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть;
	ОсновнойТекущийСлой = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ОбластьДанныхПокупателя);
	ДополнительныйТекущийСлой = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяДополнительнаяОбласть);
	Если ДополнительныйТекущийСлой = Элементы.ГруппаПодтверждениеСМС Тогда
		ТекстВвода = КодПроверкиИзSMS;
	Иначе
		ТекстВвода = ?(ЭлементВводаДанныхПокупателя = Неопределено, "", ЭлементВводаДанныхПокупателя.ТекстРедактирования);
	КонецЕсли;
	
	ИмяКоманды = Команда.Имя;
	Если ИмяКоманды = "ЦифроваяПанельПоиск" Тогда
		ОбработатьШтрихкодКлиент(СтрокаПоискаКарты);
		Возврат;
	ИначеЕсли ИмяКоманды = "ЦифроваяПанельОчистить" Тогда
		Если Не ДополнительныйТекущийСлой = Элементы.ГруппаПодтверждениеСМС
			И (Не РежимКассыСамообслуживания)
			И (ОсновнойТекущийСлой = Элементы.ГруппаПоискКарты Или ОсновнойТекущийСлой = Элементы.ГруппаКартаНеНайдена)
			И ТекстВвода = "" Тогда
			
			ТекстВвода = "*";
			
		Иначе
			
			ТекстВвода = "";
			
		КонецЕсли;
	Иначе
		Цифра = Прав(ИмяКоманды, 1);
		Если (Не ТекстВвода = "") И ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоПолеТелефонаСМаской(ЭлементВводаДанныхПокупателя) Тогда
			ТекстВвода = ТолькоЦифрыТелефонаБезКодаСтраны(ТекстВвода) + Цифра;
		ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоПолеДатыСМаской(ЭлементВводаДанныхПокупателя) Тогда
			ТекстВвода = ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьЦифруКТекстуДаты(ТекстВвода, Цифра);
		Иначе
			ТекстВвода = СокрЛП(ТекстВвода) + Цифра;
		КонецЕсли;
		Если Элементы.ЦифроваяПанельПоиск.Видимость Тогда
			ТекущийЭлемент = Элементы.ЦифроваяПанельПоиск;
		ИначеЕсли ОсновнойТекущийСлой = Элементы.ГруппаОтправкаЧека Тогда
			УстановитьАктивностьНаКнопкеОтправкиПробитияЧека();
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныйТекущийСлой = Элементы.ГруппаПодтверждениеСМС Тогда
		КодПроверкиИзSMS = ТекстВвода;
		Введено4Цифры = СтрДлина(СокрЛП(ТекстВвода)) = 4;
		Если Введено4Цифры Тогда
			ТекущийЭлемент = Элементы.ОтправитьSMSСКодомПроверки;
			ПроверитьВведенныйКодИзSMS();
		КонецЕсли;
	ИначеЕсли Не ЭлементВводаДанныхПокупателя = Неопределено Тогда
		
		ДлинаТекста = СтрДлина(ЭлементВводаДанныхПокупателя.ТекстРедактирования);
		ЭлементВводаДанныхПокупателя.УстановитьГраницыВыделения(1,ДлинаТекста+1);
		ЭлементВводаДанныхПокупателя.ВыделенныйТекст = ТекстВвода;
		Если ТекстВвода = ""  И Не ЭлементВводаДанныхПокупателя = Элементы.ОтправкаЧекаТелефон Тогда
			ТекущийЭлемент = ЭлементВводаДанныхПокупателя;
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьКнопкиЦифровойПанели();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТолькоЦифрыТелефонаБезКодаСтраны(ТекстПоля)
	
	КодСтраны = ИнтерфейсРМКСлужебныйКлиентСервер.ТелефонныйКодСтраны();
	ДлинаКодаСтраны = СтрДлина(КодСтраны);
	ТекстТолькоЦифры = СокрЛП(ТекстПоля);
	Если СтрДлина(ТекстТолькоЦифры) >= ДлинаКодаСтраны И Лев(ТекстТолькоЦифры, ДлинаКодаСтраны) = КодСтраны Тогда
		ТекстТолькоЦифры = Сред(ТекстТолькоЦифры, ДлинаКодаСтраны + 1);
	КонецЕсли;
	Возврат ИнтерфейсРМКСлужебныйКлиентСервер.ТолькоЦифры(ТекстТолькоЦифры);
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКомандыУдаленияВсехСертификатов(ЭлементГруппаУдаления, ТаблицаСертификатов)
	УстановитьВидимостьЭлементаФормы(ЭлементГруппаУдаления, ТаблицаСертификатов.Количество() > 1);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКнопкиЦифровойПанелиДляВводаСумм(ТребуетсяРазделитель)
	Элементы.ЦифроваяПанельПоиск.Отображение = ОтображениеКнопки.Текст;
	Элементы.ЦифроваяПанельПоиск.ЦветФона = Новый Цвет;
	УстановитьВидимостьЭлементаФормы(Элементы.ЦифроваяПанельПоиск, ТребуетсяРазделитель);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКнопкиЦифровойПанелиВРежимеДанныхПокупателя()
	Элементы.ЦифроваяПанельПоиск.Отображение = ОтображениеКнопки.Картинка;
	Элементы.ЦифроваяПанельПоиск.Картинка = БиблиотекаКартинок["Search"];
	Элементы.ЦифроваяПанельПоиск.ЦветФона = Новый Цвет(250, 204, 31);
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьЦифровуюПанельДляВводаСумм(Элемент, ВводСимволов = Ложь)
	
	ПереключениеЦифровойПанели = Истина;
	ВводСЦифровойКлавиатуры = Истина;
	ДлинаТекста = СтрДлина(Элемент.ТекстРедактирования);
	Элемент.УстановитьГраницыВыделения(1,ДлинаТекста+1);
	Элемент.ВыделенныйТекст = Элемент.ТекстРедактирования;
	Элемент.УстановитьГраницыВыделения(1,ДлинаТекста+1);
	ВводСЦифровойКлавиатуры = Ложь;
	
	Если РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели) Тогда
		СкрытьЦифровуюПанельДляВводаСумм();
	Иначе
		ВключитьЦифровуюПанельДляВводаСумм(Элемент, ВводСимволов);
	КонецЕсли;
	ТекущийЭлемент = Элемент;
	ПереключениеЦифровойПанели = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоВводШтрихкода()
	РезультатФункции = (ЭлементВводаСуммы = Элементы.РучнойШтрихкодДляПоиска
			Или ЭлементВводаСуммы = Элементы.ШтрихкодДляПоиска);
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Функция ЭтоУвеличенныйВидВРежимеКассираИГоризонтальнойОриентации()
	РезультатФункции = (ВидОтображения = ПредопределенноеЗначение("Перечисление.ВидыОтображения.Увеличенный")
						И Не (РежимКассыСамообслуживания Или ВертикальнаяОриентация));
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Функция ТребуетсяВсегдаСжатиеИтоговВГоризонтальнойОриентации()
	РезультатФункции = (ЭлементВводаСуммы = Элементы.НомерСертификата 
			Или (ЭтоВводШтрихкода() И ЭтоУвеличенныйВидВРежимеКассираИГоризонтальнойОриентации()));
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура ВключитьЦифровуюПанельДляВводаСумм(Элемент, ВводСимволов)
	
	РежимЦифровойПанели = ?(ВводСимволов, РежимыЦифровойПанели.ВводСимволов, РежимыЦифровойПанели.ВводСуммОплаты);
	ЭлементВводаСуммы = Элемент;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЦифроваяПанель, Истина);
	НастроитьКнопкиЦифровойПанелиДляВводаСумм(Не ВводСимволов);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандЦифроваяПанель);
	НастроитьКнопкиЦифровойПанели();
	УстановитьВидимостьДополнительнойИнформацииВРежимеЦифровойПанели(Ложь);
	ТребуетсяСжатиеВГоризонтальнойОриентации = ТребуетсяВсегдаСжатиеИтоговВГоризонтальнойОриентации();
	СжатьПанельИтоговПоЧекам(ТребуетсяСжатиеВГоризонтальнойОриентации);
	
	ОбновлятьСуммуАванса = (ПриемАванса И СуммаБезСкидки = 0);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьЦифровуюПанельДляВводаСумм()
	
	ОбновитьДоступностьИзмененияКоличества = (ЭлементВводаСуммы = Элементы.ТекущийТоварКоличество);
	РежимЦифровойПанели = РежимыЦифровойПанели.Пустой;
	ОбновлятьСуммуАванса = Ложь;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЦифроваяПанель, Ложь);
	УстановитьВидимостьДополнительнойИнформацииВРежимеЦифровойПанели(Истина);
	ВосстановитьПанельИтоговПоЧекам();
	
	НастроитьКнопкиЦифровойПанелиВРежимеДанныхПокупателя();
	ВернутьОсновнуюКоманднуюПанельЧека();
	Если ОбновитьДоступностьИзмененияКоличества Тогда
		ОбновитьДоступностьИзмененияКоличества();
	КонецЕсли;
	ОбновитьКоличествоВРедактируемойСтроке();
	ЭлементВводаСуммы = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьИзмененияКоличества()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если Не ТекущаяСтрока = Неопределено Тогда
		НастроитьДоступностьКомандИзмененияКоличества(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости()
	
	Если РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели) Тогда
		СкрытьЦифровуюПанельДляВводаСумм();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьЭлементВводаСуммы(Элемент, ВводСимволов = Ложь)
	
	НовыйРежимЦифровойПанели = ?(ВводСимволов, РежимыЦифровойПанели.ВводСимволов, РежимыЦифровойПанели.ВводСуммОплаты);
	Если РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели) 
		И Не (ЭлементВводаСуммы = Элемент И РежимЦифровойПанели = НовыйРежимЦифровойПанели) Тогда
		
		ТребуетсяПовышениеПрав = Ложь;
		ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав);
		Если ТребуетсяПовышениеПрав Тогда
			ТекущийЭлемент = ЭлементВводаСуммы;
		Иначе
			
			Если Не НовыйРежимЦифровойПанели = РежимЦифровойПанели Тогда
				РежимЦифровойПанели = НовыйРежимЦифровойПанели;
				УстановитьВидимостьЭлементаФормы(Элементы.ЦифроваяПанельПоиск, (Не ВводСимволов));
			КонецЕсли;
			ЭлементВводаСуммы = Элемент;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьПереключитьЦифровуюПанель(Элемент, ВводСимволов = Ложь)
	
	Если СенсорныйЭкран И Не РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели) Тогда
		ПереключитьЦифровуюПанельДляВводаСумм(Элемент, ВводСимволов);
	Иначе
		СменитьЭлементВводаСуммы(Элемент, ВводСимволов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьЭлементВводаДанныхПокупателя(Элемент)
	Если Не ЭлементВводаДанныхПокупателя = Элемент Тогда
		ЭлементВводаДанныхПокупателя = Элемент;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВернутьОсновнуюКоманднуюПанельЧека()
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект) Тогда
		
		Если СуммаОплаченоСертификатамиНСПК > 0 Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПробитияЧекаНСПК);
		Иначе
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПробитияЧека);
		КонецЕсли;
		
	ИначеЕсли Не РежимРаботыСЧеком = РежимыРаботыСЧеком.ПродолжениеПослеПробития Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПереходаКОплате);
		ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПеречисленияФормы()
	ИнициализироватьРежимыЦифровойПанели();
	ИнициализироватьРежимыРаботыСЧеком();
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьКлиентскиеПеречисленияФормы()
	ИнтерфейсРМКСлужебныйКлиент.ИнициализироватьТипыПостроенияПлитки(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРежимыЦифровойПанели()

	РежимыЦифровойПанели = Новый Структура;
	РежимыЦифровойПанели.Вставить("Пустой", 0);
	РежимыЦифровойПанели.Вставить("ДанныеПокупателя", 1);
	РежимыЦифровойПанели.Вставить("ВводСуммОплаты", 2);
	РежимыЦифровойПанели.Вставить("ВводСимволов", 3);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели)
	
	РезультатФункции = Ложь;
	Если РежимЦифровойПанели = РежимыЦифровойПанели.ВводСуммОплаты
			Или РежимЦифровойПанели = РежимыЦифровойПанели.ВводСимволов Тогда
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьРежимыРаботыСЧеком()
	
	РежимыРаботыСЧеком = Новый Структура;
	РежимыРаботыСЧеком.Вставить("ЧекПустой", 0);
	РежимыРаботыСЧеком.Вставить("ВводТоваров", 1);
	РежимыРаботыСЧеком.Вставить("ВозвратКоррекция", 2);
	РежимыРаботыСЧеком.Вставить("ПереходКОплате", 3);
	РежимыРаботыСЧеком.Вставить("Оплата", 4);
	РежимыРаботыСЧеком.Вставить("ПродолжениеПослеПробития", 5);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПоследнееВидимоеПолеСуммыСертификата()
	
	РезультатФункции = Неопределено;
	
	ИмяГруппыОплаты = "ГруппаСуммаОплатаСертификатом_";
	Для Каждого ГруппаСуммы Из Элементы.ГруппаСуммаОплатаСертификатами.ПодчиненныеЭлементы Цикл
		Если СтрНайти(ГруппаСуммы.Имя, ИмяГруппыОплаты) = 1 И ГруппаСуммы.Видимость Тогда
			УникальнаяЧастьИмени = Сред(ГруппаСуммы.Имя, СтрДлина(ИмяГруппыОплаты) + 1);
			ИмяПоляСуммы = СтрШаблон("СуммаСертификата_%1", УникальнаяЧастьИмени);
			Если Не Элементы.Найти(ИмяПоляСуммы) = Неопределено Тогда
				РезультатФункции = Элементы[ИмяПоляСуммы];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ОчиститьЛишниеДанныеПриКопированииПродажи()
	
	ПустойРезерв = Метаданные.ОпределяемыеТипы.РезервРМК.Тип.ПривестиЗначение();
	Для каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.КодМаркировки = "";
		СтрокаТовара.Штрихкод = "";
		СтрокаТовара.КонтрольнаяМарка = "";
		СтрокаТовара.КонтрольнаяМаркаОбработана = Ложь;
		СтрокаТовара.Оплачена = Ложь;
		СтрокаТовара.ТоварКЗамене = Ложь;
		СтрокаТовара.Резерв = ПустойРезерв;
		Если СтрокаТовара.УникальностьСерии Тогда
			СтрокаТовара.Серия = Неопределено;
		КонецЕсли;
	КонецЦикла;
	КопированиеПродажи = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦеныПлиточногоИнтерфейса()
	
	Если ОпорныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРМК.ДополнитьОпорныеДанныеПанелиДляПостроенияПлиточногоИнтерфейса(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОшибкуОпределенияНастройкиРМКДЛяРежимаКСО(Отказ, ДанныеПроверки)
	ДанныеПроверки.ОшибкаЗапуска = "НастройкаКСО";
	ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Настройки РМК.'");
	ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Рабочее место кассира не настроено для 
		|запуска в режиме ""Кассы самообслуживания"".
		|Обратитесь к администратору системы.'");
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура НастроитьРежимКассыСамообслуживанияПервоначально()
	Если РежимКассыСамообслуживания Тогда
		ИнтерфейсРМКСлужебный.НастроитьПервоначальныйИнтерфейсРежимаКассыСамообслуживания(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьЧекНаКлиенте()
	
	КопированиеПродажи = Истина;
	РазморозитьФормуПослеПробитияЧека();
	ОтменитьПримененныеБонусы(Ложь);
	ОтменитьСкидки(Истина);
	ОпределитьИспользованиеАвтоматическихСкидок();
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		ОбщегоНазначенияРМККлиентСервер.УстановитьНомерКартинкиСтрокиТовара(СтрокаТовара);
	КонецЦикла;
	ЕстьНеЗаполненныеДанные = ЕстьНезаполненныеДанные();
	ОбработатьИзменениеТаблицыТоваровНаКлиенте(Не ЕстьНеЗаполненныеДанные);
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ВвестиКомментарийКЧеку, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКомандыУдалитьЧек(ЗначениеВРежимеКассира = Неопределено)
	
	Если РежимКассыСамообслуживания Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.УдалитьЧек, Не РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой);
	ИначеЕсли Не ЗначениеВРежимеКассира = Неопределено Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.УдалитьЧек, ЗначениеВРежимеКассира);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьАвтоматическийРасчетСкидокВРежимеКСО()
	
	Если (РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой)
		И РежимКассыСамообслуживания
		И Не РаботаВРежимеМедленногоСоединения Тогда
		
		РассчитатьСкидкиКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьПредыдущийСлойПанелиОплаты(ТекущийАктивныйСлой)
	
	ПредыдущийСлой = Элементы.ОбластьОперативногоУправленияЧеком;
	Если Не (ПредыдущийСлойДоДанныхПокупателя = Неопределено Или ПредыдущийСлойДоДанныхПокупателя = ТекущийАктивныйСлой) Тогда
		ПредыдущийСлой = ПредыдущийСлойДоДанныхПокупателя;
	КонецЕсли;
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, ПредыдущийСлой);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПарольКассираКлиент()

	ВернутьСостояниеДоНачалаОперации();
	ТекущаяОперация = "";
	ВернутьПредыдущийСлойПанелиОплаты(Элементы.ГруппаЗаменаПрав);
	НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(Истина);
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект) Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	КонецЕсли;
	СкрытьКомандуВыходаПриНеобходимости();
	
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект) Тогда
		ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
	КонецЕсли;
	
	ОткрытыСообщенияОбОшибках
		= (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаИнфоОшибка);
	
	Если НЕ ОткрытыСообщенияОбОшибках Тогда
		Если ОжидатьВводМарки Тогда
			УстановитьФокусНаТовареТребующемВводаМарки();
			ТоварыПриАктивизацииСтроки(Элементы.Товары);
		Иначе
			ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
			Если Не ЕстьНезаполненныеДанные() И ОсновнойПодборПлиточный Тогда
				ОткрытьПлиточныйИнтерфейсКаталога(Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуПоискаТовараПоШтрихкоду(ПараметрыШтрихкода)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	ШтрихкодУрезанный = СтрШаблон("%1%2", Лев(ПараметрыШтрихкода.Штрихкод, 25),
		?(СтрДлина(ПараметрыШтрихкода.Штрихкод) > 25, "...", ""));
	ТекстЗаголовка = НСтр("ru = 'Товар с указанным штрихкодом не найден.'");
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найден товар по штрихкоду: %1'"), ШтрихкодУрезанный);
	ПараметрыОшибки = Новый Структура();
	ПараметрыОшибки.Вставить("ЭтоПредупреждение", Истина);
	ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуПолученияКартыКлиента(ТекстОшибки)
	
	УстановитьДоступностьКомандПанелиПокупателя(Ложь);
	ПараметрыОшибки = Новый Структура("НеВызыватьЗаменуПрав", Истина);
	ТекстЗаголовка = НСтр("ru = 'Ошибка получения карт клиента.'");
	ТекстСообщения = ТекстОшибки;
	ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
	
КонецПроцедуры

&НаКлиенте
Функция ДоступнаОтменаОперацииЗаменыПрав()
	
	Возврат (ТекущаяОперация = "УдалитьСтрокуРМК"
			Или ТекущаяОперация = "ЗавершениеРаботыРМК"
			Или ТекущаяОперация = "УдалитьЧекРМК"
			Или ТекущаяОперация = "ОтложитьЧекРМК"
			Или ТекущаяОперация = "ПродолжитьЧекРМК"
			Или ТекущаяОперация = "ВводВесаТовара"
			Или ТекущаяОперация = "ИзменениеКоличестваВМеньшуюСторону"
			Или ТекущаяОперация = "УменьшениеКоличестваНаЕдиницу");
	
КонецФункции

&НаКлиенте
Процедура ВернутьСостояниеДоНачалаОперации()

	Если ТекущаяОперация = "ИзменениеКоличестваВМеньшуюСторону" Тогда
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
		Если Не ТекущаяСтрока = Неопределено Тогда
			ТекущийТоварКоличество = ТекущаяСтрока.Количество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьИзменениеЭтапаРаботыСЧекомПриИзмененииОплаты()
	УстановитьЭтапРаботыСЧеком();
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьМаркетинговыхКомандПоЭтапуРаботыСЧеком(ЭтотОбъект,
		ЭтоОперацияПродажи);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЭтапРаботыСЧеком()
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект) Тогда
		Если (СуммаЗаполненныхОплат - СуммаОплаченоЗачетАванса) > 0
				Или СуммаОплаченоБонусами > 0 Или ПробитыеЧеки.Количество() > 0 Тогда
				
			РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата;
			
		Иначе
			
			РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьПредыдущееЗначениеТекстаДаты(ЭлементВводаДаты)
	ДлинаТекстаДаты = 10;
	ЭлементВводаДаты.УстановитьГраницыВыделения(1,ДлинаТекстаДаты + 1);
	ЭлементВводаДаты.ВыделенныйТекст = ТекстДатыРожденияСозданиеКарты;
КонецПроцедуры

&НаКлиенте
Функция ПараметрыРазмеровКомандУправленияЧеком(ВысотаКоманды, ШиринаКоманды)
	
	ПараметрыРазмеров = Новый Структура;
	ПараметрыРазмеров.Вставить("ВысотаКоманды", ВысотаКоманды);
	ПараметрыРазмеров.Вставить("ШиринаКоманды", ШиринаКоманды);
	ПараметрыРазмеров.Вставить("ВысотаКомандыОперации", ВысотаКоманды);
	ПараметрыРазмеров.Вставить("ШиринаКомандыОперации", ШиринаКоманды);
	
	Возврат ПараметрыРазмеров;
	
КонецФункции

&НаКлиенте
Процедура ЗаблокироватьПробитиеЧека()
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧекНСПК, Ложь);
КонецПроцедуры

&НаСервере
Процедура СерверныйВызов()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыйтиИзРежимаПлитки()
	ПереключатьсяВРежимПлитки = Ложь;
	Если РежимПлитки Тогда
		ПереключитьНаРежимПлиткиИзПалитры();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОткрытаСтраницаИнфоОшибка()
	
	РезультатФункции
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаИнфоОшибка;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ОткрытаСтраницаНайтиПоШтрихкоду()
	
	РезультатФункции
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаНайтиПоШтрихкоду;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ОткрытаСтраницаПоискаТовара()
	Возврат (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара);
КонецФункции

&НаКлиенте
Функция ОткрытаСтраницаПоискаКарты(АктивныйСлойСлужебнойГруппы = Неопределено,
		АктивныйСлойГруппыДанныхПокупателя = Неопределено)
	
	Если АктивныйСлойСлужебнойГруппы = Неопределено Тогда
		АктивныйСлойСлужебнойГруппы
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	КонецЕсли;
	Если АктивныйСлойГруппыДанныхПокупателя = Неопределено Тогда
		АктивныйСлойГруппыДанныхПокупателя
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть);
	КонецЕсли;
	ОткрытаСтраницаПоискаКарты = (АктивныйСлойСлужебнойГруппы = Элементы.ГруппаДанныеПокупателя 
		И (АктивныйСлойГруппыДанныхПокупателя = Элементы.ГруппаПоискКарты
			Или АктивныйСлойГруппыДанныхПокупателя = Элементы.ГруппаКартаНеНайдена));
			
	Возврат ОткрытаСтраницаПоискаКарты;
	
КонецФункции

&НаКлиенте
Функция ОткрытаСтраницаОтправкиЧека()
	
	РезультатФункции =
		(ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаДанныеПокупателя)
		И (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть)
			= Элементы.ГруппаОтправкаЧека);
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ОткрытаСтраницаЗаменыПрав()
	РезультатФункции
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаЗаменаПрав;
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура НайтиТоварРасшифровкеСкидок(Штрихкод)
	
	Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	ФильтрПоискаПоШтрихкоду = Новый Структура;
	ФильтрПоискаПоШтрихкоду.Вставить("Номенклатура");
	
	СтруктураПараметровКлиента = ДанныеПоискаПоШтрихкодуСервер(Штрихкод);
	ИдентификаторСтроки = Неопределено;
	
	Если СтруктураПараметровКлиента.ЗначенияПоиска.Количество() > 0 Тогда
		СтрокаРезультата = СтруктураПараметровКлиента.ЗначенияПоиска[0];
		ЭлементыДерева = ДеревоСкидок.ПолучитьЭлементы();
		Для Каждого Элемент Из ЭлементыДерева Цикл
			Если Элемент.НоменклатураПредставление = СтрокаРезультата.Владелец Тогда
				ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ДеревоСкидок.ТекущаяСтрока = ИдентификаторСтроки;
	ШтрихкодДляПоиска = НСтр("ru = ''");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТоваровСервер()
	
	ИнтерфейсРМКСлужебный.ОбновитьСписокТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьЭлементовГруппыПоискаТовара(ДляДополнительногоСписка = Ложь)
	
	УстановитьВидимостьЭлементаФормы(Элементы.ДополнениеСтрокаПоиска, Не ДляДополнительногоСписка);
	УстановитьВидимостьЭлементаФормы(Элементы.ДополнениеДополнительнаяСтрокаПоиска, ДляДополнительногоСписка);
	ОтображатьКнопкуМирТовары = Не ДляДополнительногоСписка И ИспользоватьОплатуСертификатамиНСПК;
	УстановитьВидимостьКнопкиМирТовары(Элементы, ОтображатьКнопкуМирТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(ЗначениеДоступности)
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельИтоговПоЧекам, ЗначениеДоступности);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКомандПробитияЧека, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКомандПереходаКОплате, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКомандПовторногоДействия, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКомандПробитияЧекаНСПК, ЗначениеДоступности);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуЭлементовПослеЗакрытияПоискаПоШтрихкоду()
	
	ШтрихкодДляПоиска = НСтр("ru = ''");
	НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(Истина);
	Элементы.РучнойШтрихкодДляПоиска.ПодсказкаВвода = НСтр("ru = ''");
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой Тогда
		ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
	КонецЕсли;
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФильтрДляВводаМарки(ФильтрПоискаПоШтрихкоду, ТоварыТекущиеДанные)
	
	Если НЕ ТоварыТекущиеДанные = Неопределено Тогда
		Если ЗначениеЗаполнено(ТоварыТекущиеДанные.Номенклатура) И ОжидатьВводМарки Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("НоменклатураДляВводаМарки", ТоварыТекущиеДанные.Номенклатура);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция БылОткрытСлойОжиданияМаркиДоГруппыВводаШтрихкода(ТекущийСлойСлужебнойИнформацииЧека)
	
	РезультатФункции = Ложь;
	
	Если ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаНайтиПоШтрихкоду
		И (ПредыдущийСлойДоДанныхПокупателя = Элементы.ГруппаОтсканироватьМарку
			ИЛИ ПредыдущийСлойДоДанныхПокупателя = Элементы.ГруппаНеверноОтсканированныйШтрихкод) Тогда
			
		РезультатФункции = Истина;
			
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ОткрытСлойОжиданияМарки()
	
	РезультатФункции = Ложь;
	
	ТекущийСлойСлужебнойИнформацииЧека
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	Если ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаОтсканироватьМарку
		ИЛИ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаНеверноОтсканированныйШтрихкод
		ИЛИ БылОткрытСлойОжиданияМаркиДоГруппыВводаШтрихкода(ТекущийСлойСлужебнойИнформацииЧека) Тогда
		
		РезультатФункции = Истина;
		
	КонецЕсли;
	Возврат РезультатФункции;
		
КонецФункции

&НаКлиенте
Процедура ОтменитьВводНаПанели()
	
	Если ЭлементВводаСуммы = Элементы.РучнойШтрихкодДляПоиска Тогда
		ОтменаНайтиПоШтрихкодуКлиент();
	ИначеЕсли ЭлементВводаСуммы = Элементы.ШтрихкодДляПоиска Тогда
		НайтиВЧекеНажатие();
	Иначе
		СкрытьЦифровуюПанельДляВводаСумм();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРучногоСопоставленияТовараПриВозможности(ПараметрыДляОбработкиШтрихкода)
	
	Если РежимКассыСамообслуживания Тогда
		ПоказатьОшибкуПоискаТовараПоШтрихкоду(ПараметрыДляОбработкиШтрихкода);
	Иначе
		НастроитьФормуДляРучногоСопоставленияТовара(ПараметрыДляОбработкиШтрихкода);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиПоУмолчаниюПриСоздании()
	ВертикальнаяОриентация = Истина;
	ИспользоватьСлои = Истина;
КонецПроцедуры

&НаКлиенте
Функция ДоступноСохранениеКартБезСервераЛояльности(ФильтрПоискаКарты)
	
	Возврат (ЗапоминатьНомерКартыЛояльности И ФильтрПоискаКарты.Свойство("ИнформационныеКарты"));
	
КонецФункции

&НаКлиенте
Функция СохранятьНомерКартыЛояльности(ФильтрПоискаКарты, СерверЛояльностиНеДоступен = Ложь)
	
	РезультатФункции = Ложь;
	
	Если ДоступноСохранениеКартБезСервераЛояльности(ФильтрПоискаКарты)
			И Не (ОтправлятьSMSКодПриПродаже = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиSMSПриПродаже.ПриВыборе")
				И РежимКассыСамообслуживания) Тогда
		
		РезультатФункции = Истина;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьВводКартыЛояльностиПоШтрихкоду(ЗапросКСерверуЛояльности = Истина)
	
	Если ВопросПоРасчетуСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ЗавершитьВводШтрихкодаНайденаКарта", ЗапросКСерверуЛояльности, Истина);
	Иначе
		ЗавершитьВводШтрихкодаНайденаКарта(КодВозвратаДиалога.Да, ЗапросКСерверуЛояльности);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНомерКартыЛокально(Штрихкод)
	
	ОчиститьДанныеПокупателя();
	ПараметрыКартыЛояльности = ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыКартыЛояльности();
	ПараметрыКартыЛояльности.КодКарты = СокрЛП(Штрихкод);
	ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, ПараметрыКартыЛояльности);
	
КонецПроцедуры

&НаКлиенте
Функция ЗапроситьКартыССервераЛояльности(СтруктураПараметровКлиента)
	
	ПустойМассив = Новый Массив;
	РезультатФункции = Новый Структура("ДанныеКарт,ТекстОшибки", ПустойМассив, "");
	
	ЗначенияПараметровМетода = ПараметрыМетодаНайтиКартуКлиента(СтруктураПараметровКлиента);
	ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаНайтиКартуКлиента(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
	Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
	
	ТекстОшибки = "";
	ТекстОшибкиПоУмолчанию = НСтр("ru = 'Не удалось подключиться к серверу лояльности. Обратитесь к администратору'");
	Если Результат.ЕстьОшибки Тогда
		
		Если РежимКассыСамообслуживания Тогда
			ТекстОшибки = ТекстОшибкиПоУмолчанию;
		Иначе
			ДополнительноеПояснение = НСтр("ru = ''");
			Если ЕстьСвойство(Результат, "ТекстОшибки") Тогда
				ДополнительноеПояснение = СтрШаблон(" %1 %2", НСтр("ru = 'по причине:'"), Результат.ТекстОшибки);
			КонецЕсли;
			ТекстОшибки = СтрШаблон("%1 %2",
				НСтр("ru = 'Не удалось получить карты клиента'"),
					ДополнительноеПояснение);
		КонецЕсли;
			
	Иначе
		СтрокаJSON = Результат.ДанныеОтвета;
		Если СтрНачинаетсяС(СокрЛ(СтрокаJSON), "{") Тогда
			
			ДанныеОтвета = Неопределено;
			СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
			РезультатФункции.Вставить("ДанныеКарт", ДанныеОтвета.LoyaltyCardsList);
			
		Иначе
			ТекстОшибки = ТекстОшибкиПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	РезультатФункции.Вставить("ТекстОшибки", ТекстОшибки);
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолучениеКартССервераЛояльности(СтруктураПараметровКлиента)
	
	РезультатЗапросаКарт = ЗапроситьКартыССервераЛояльности(СтруктураПараметровКлиента);
	ШтрихкодОригинал = СтруктураПараметровКлиента.ПараметрыШтрихкода.ШтрихкодОригинал;
	Если РезультатЗапросаКарт.ДанныеКарт.Количество() > 1 Тогда
		ПоказатьВыборКартКлиентаССервераЛояльности(РезультатЗапросаКарт.ДанныеКарт, ШтрихкодОригинал);
	ИначеЕсли РезультатЗапросаКарт.ДанныеКарт.Количество() = 1 Тогда
		ОбработатьВыборКартыКлиентаСервераЛояльности(РезультатЗапросаКарт.ДанныеКарт[0], ШтрихкодОригинал, Ложь);
	Иначе
		ОбработатьПустойРезультатЗапросаКартССервераЛояльности(СтруктураПараметровКлиента, РезультатЗапросаКарт.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьДанныеКартыССервераЛояльности()
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		
		СтруктураПараметров = ПодготовитьСтруктуруПараметровДляДозаполненияКартыЛояльности();
		РезультатЗапросаКарт = ЗапроситьКартыССервераЛояльности(СтруктураПараметров);
		Если РезультатЗапросаКарт.ДанныеКарт.Количество() >= 1 Тогда
			ЗаполнитьДанныеКартыНаФормеВЧеке(РезультатЗапросаКарт.ДанныеКарт[0]);
			Если ЭтоПродажа Тогда
				ЗавершитьВводШтрихкодаНайденаКарта(КодВозвратаДиалога.Нет, РезультатЗапросаКарт.ДанныеКарт.Количество() > 1);
			КонецЕсли;
		ИначеЕсли ЭтоПродажа И ЗначениеЗаполнено(ПараметрыКартыЛояльности.ИдентификаторКарты) Тогда
			ОчиститьДанныеПокупателя();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьСтруктуруПараметровДляДозаполненияКартыЛояльности()
	
	ШтрихкодПоиска = "";
	ФильтрПоиска = Новый Структура();
	Если ЗначениеЗаполнено(ПараметрыКартыЛояльности.ИдентификаторКарты) Тогда
		ШтрихкодПоиска = ПараметрыКартыЛояльности.ИдентификаторКарты;
		ФильтрПоиска.Вставить("УникальныйИдентификаторКарты");
	Иначе
		ШтрихкодПоиска = ПараметрыКартыЛояльности.КодКарты;
		ФильтрПоиска.Вставить("ИнформационныеКарты");
	КонецЕсли;
	
	ПараметрыШтрихкода = Новый Структура();
	ПараметрыШтрихкода.Вставить("ШтрихкодОригинал", ШтрихкодПоиска);
	ПараметрыШтрихкода.Вставить("ФильтрПоискаПоШтрихкоду", ФильтрПоиска);
	
	СтруктураПараметровКлиента = Новый Структура;
	СтруктураПараметровКлиента.Вставить("ПараметрыШтрихкода", ПараметрыШтрихкода);
	
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВыборКартКлиентаССервераЛояльности(ДанныеКарт, ШтрихкодОригинал)
	
	ЗначенияПоиска = Новый Массив;
	Для Каждого ОписаниеКарты Из ДанныеКарт Цикл
		НомерКарты = ?(ЗначениеЗаполнено(ОписаниеКарты.Barcode), ОписаниеКарты.Barcode, ОписаниеКарты.MagneticCode);
		
		ДанныеПоиска = Новый Структура();
		ДанныеПоиска.Вставить("Владелец",
			СтрШаблон("%1(%2), %3", ОписаниеКарты.ClientName, НомерКарты, ОписаниеКарты.Phone));
		ДанныеПоиска.Вставить("ТипОбъекта", НСтр("ru = 'Карта лояльности'"));
		ДанныеПоиска.Вставить("Остаток", ОписаниеКарты.BonusData.BonusCount);
		ДанныеПоиска.Вставить("ДополнительныеДанные", ОписаниеКарты);
		ДанныеПоиска.Вставить("Характеристика", Неопределено);
		ДанныеПоиска.Вставить("Упаковка", Неопределено);
		ДанныеПоиска.Вставить("СерияНоменклатуры", Неопределено);
		
		ЗначенияПоиска.Добавить(ДанныеПоиска);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИспользоватьНовыйАлгоритмПоискаПоШтрихкоду", Истина);
	СтруктураПараметров.Вставить("ДанныеПО", ШтрихкодОригинал);
	СтруктураПараметров.Вставить("ПоказыватьБонусы", Истина);
	СтруктураПараметров.Вставить("ЗначенияПоиска", ЗначенияПоиска);
	
	РаботаСоШтрихкодамиКлиентПереопределяемый.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметров, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКартыКлиентаСервераЛояльности(ВыбранноеОписаниеКарты, ШтрихкодОригинал,
		ЗапросНаБлокировку = Истина) Экспорт
	
	СохранитьДанныеКартыВЧеке(ВыбранноеОписаниеКарты, ШтрихкодОригинал);
	Если ЗапросНаБлокировку И ВыбранноеОписаниеКарты.BonusData.BonusCount <= 0 Тогда
		ЗапросНаБлокировку = Ложь;
	КонецЕсли;
	ЗавершитьВводКартыЛояльностиПоШтрихкоду(ЗапросНаБлокировку);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеКартыВЧеке(ВыбранноеОписаниеКарты, ШтрихкодОригинал)
	
	ОчиститьДанныеПокупателя();
	КонтрагентВыбран = Ложь;
	ЗаполнитьДанныеКартыНаФормеВЧеке(ВыбранноеОписаниеКарты);
	ПодготовитьИЗаполнитьПараметрыВводаКодаSMS(ВыбранноеОписаниеКарты, ШтрихкодОригинал);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКартыНаФормеВЧеке(ВыбранноеОписаниеКарты)
	
	ЭтоПродажа = ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	
	ПараметрыКартыЛояльности = ИнтерфейсРМКСлужебный.ЗаполнитьПараметрыКартыЛояльности(ВыбранноеОписаниеКарты);
	ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, ПараметрыКартыЛояльности);
	Если ЭтоПродажа И ИспользоватьОплатуБонусами Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.ОтобразитьИнформациюОБонусныхБаллах(ЭтотОбъект, ВыбранноеОписаниеКарты.BonusData);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьИЗаполнитьПараметрыВводаКодаSMS(ВыбранноеОписаниеКарты, ШтрихкодОригинал)
	
	ШаблонШтрихкода = ШаблонШтрихкодаПоТипуПоискаСервераЛояльности(ВыбранноеОписаниеКарты.SearchType);
	СтрокаРезультата = Новый Структура();
	СтрокаРезультата.Вставить("Штрихкод", ШтрихкодОригинал);
	СтрокаРезультата.Вставить("ШаблонШтрихкода", ШаблонШтрихкода);
	ЗаполнитьПараметрыВводаКодаSMS(СтрокаРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВводаКодаSMS(СтрокаРезультата)

	ЭтоПродажа = ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		
	Если ДоступнаОтправкаSMS
		И ЗначениеЗаполнено(ОтправлятьSMSКодПриПродаже)
		И ЭтоПродажа
		И НЕ ЭтоЧекКоррекции
		И ((СтрокаРезультата.Свойство("ШаблонШтрихкода")
			И СтрокаРезультата.ШаблонШтрихкода = Перечисления.ШаблоныШтрихкодов.Телефон)
			ИЛИ (РежимКассыСамообслуживания И ЗначениеЗаполнено(НайденнаяКартаТелефон))) Тогда
		
		ПараметрыВводаКодаSMS = ПараметрыПроверкиПоSMSКоду();
		ПараметрыВводаКодаSMS.Вставить("КартаНайденаПоНомеруТелефона", Истина);
			
		Если ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПриВыборе Тогда
			ПараметрыВводаКодаSMS.ВариантПроверки = "ПриВыборе";
		Иначе
			ПараметрыВводаКодаSMS.ВариантПроверки = "ПриОплатеБонусами";
			Элементы.ОплатитьБонусами.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ШаблонШтрихкодаПоТипуПоискаСервераЛояльности(ТипПоиска)
	
	РезультатФункции = Перечисления.ШаблоныШтрихкодов.ПустаяСсылка();
	Если ТипПоиска = "Телефон" Тогда
		РезультатФункции = Перечисления.ШаблоныШтрихкодов.Телефон;
	ИначеЕсли ТипПоиска = "КодКарты" Тогда
		РезультатФункции = Перечисления.ШаблоныШтрихкодов.Карта;
	ИначеЕсли ТипПоиска = "АдресЭП" Тогда
		РезультатФункции = Перечисления.ШаблоныШтрихкодов.АдресЭП;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПустойРезультатЗапросаКартССервераЛояльности(СтруктураПараметровКлиента, ТекстОшибки)
	
	ШтрихкодПоиска = СтруктураПараметровКлиента.ПараметрыШтрихкода.ШтрихкодОригинал;
	ФильтрПоиска = СтруктураПараметровКлиента.ПараметрыШтрихкода.ФильтрПоискаПоШтрихкоду;
	
	Если Не ТекстОшибки = "" И СохранятьНомерКартыЛояльности(ФильтрПоиска) Тогда
		СохранитьНомерКартыЛокально(ШтрихкодПоиска);
		ЗавершитьВводШтрихкодаНайденаКарта(КодВозвратаДиалога.Нет, Ложь);
	Иначе
		ПереключитьНаСтраницуПоискКартыКартаНеНайдена();
	КонецЕсли;
	Если Не ТекстОшибки = "" Тогда
		ПоказатьОшибкуПолученияКартыКлиента(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандПанелиПокупателя(ЗначениеДоступности)
	
	УстановитьДоступностьЭлементаФормы(Элементы.ЗакрытьФормуДанныеПокупателя, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЦифроваяПанель, ЗначениеДоступности);
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяНастройкаКнопокЦифровойПанели(Текст)
	
	РезультатФункции = Ложь;
	Если (Не РежимКассыСамообслуживания) И (СтрокаПоискаКарты = "" И Не Текст = "")
			Или (Не СтрокаПоискаКарты = "" И Текст = "") Тогда
		
		РезультатФункции = Истина;
		
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ДополнитьПараметрыКартыКлиента(ДанныеОтвета)
	
	НомерКартыКлиента = ?(ЗначениеЗаполнено(ДанныеОтвета.Barcode), ДанныеОтвета.Barcode, ДанныеОтвета.MagneticCode);
	Если ПараметрыКартыЛояльности = Неопределено Тогда
		ПараметрыКартыЛояльности = ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыКартыЛояльности();
	КонецЕсли;
	ПараметрыКартыЛояльности.ИдентификаторКарты = ДанныеОтвета.CardRef;
	ПараметрыКартыЛояльности.КодКарты = НомерКартыКлиента;
	
	НайденнаяКартаНомер = НомерКартыКлиента;
	НоваяКартаНомер = НомерКартыКлиента;
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьСозданияКарты(ЭтотОбъект, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЛокальнуюКартуКонтрагента()
	
	ДанныеКартыКлиента = Новый Структура("Карта,НомерКарты", Неопределено, "");
	АдресТаблицыДанныеКлиента = ОписаниеТаблицыДанныеКартыКлиента();
	ОбщегоНазначенияРМКВызовСервера.ПолучитьДанныеЛокальнойКартыКонтрагента(Объект.Контрагент, АдресТаблицыДанныеКлиента);
	
	ЗначенияПоиска = Новый Массив;
	ПолучитьДанныеКартыКлиента(АдресТаблицыДанныеКлиента, ДанныеКартыКлиента, ЗначенияПоиска);
	Если ЗначенияПоиска.Количество() > 0 Тогда
		ОжидаетсяОбработкаПослеВыбораВладельца = Истина;
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ИспользоватьНовыйАлгоритмПоискаПоШтрихкоду", Истина);
		СтруктураПараметров.Вставить("ДанныеПО", Объект.Контрагент);
		СтруктураПараметров.Вставить("ВыборКонтрагента", Истина);
		СтруктураПараметров.Вставить("ЗначенияПоиска", ЗначенияПоиска);
		
		РаботаСоШтрихкодамиКлиентПереопределяемый.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметров, Истина);
	Иначе
		ИнтерфейсРМКСлужебныйКлиент.ДополнитьФормуЛокальнойКартойКлиента(ЭтотОбъект, ДанныеКартыКлиента);
	КонецЕсли;
	КонтрагентВыбран = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДанныеСервераЛояльностиОСуществующейКарте(ДанныеОтвета, ТекстСообщения, ТолькоКлиент = Ложь)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если (Не ТолькоКлиент) И ДанныеОтвета.Свойство("CardID") Тогда
			НоваяКартаНомер = ДанныеОтвета.CardID;
		Иначе
			НоваяКартаНомер = "";
		КонецЕсли;
				
		Если ДанныеОтвета.Свойство("Client") Тогда
			НоваяКартаФИО = ДанныеОтвета.Client;
		Иначе
			НоваяКартаФИО = "";
		КонецЕсли;
				
		Если ДанныеОтвета.Свойство("PhoneNumber") Тогда
			МаскаТелефона = ИнтерфейсРМКСлужебныйКлиентСервер.МаскаВводаТелефона();
			НоваяКартаТелефон = ИнтерфейсРМКСлужебныйКлиентСервер.ПривестиЗначениеКМаскеТелефона(ДанныеОтвета.PhoneNumber,
				МаскаТелефона);
		КонецЕсли;
				
		Если ДанныеОтвета.Свойство("Email") Тогда
			НоваяКартаПочта = ДанныеОтвета.Email;
		Иначе
			НоваяКартаПочта = "";
		КонецЕсли;
		
		СтрокаXMLТолькоЧастьДата = Лев(ДанныеОтвета.DateOfBirth, 10);
		СтрокаДатыДляПреобразования = СтрЗаменить(СтрокаXMLТолькоЧастьДата, "-", "");
		ДатаРожденияКлиента = Дата(СтрокаДатыДляПреобразования);
		Если ДанныеОтвета.Свойство("DateOfBirth") Тогда
			НоваяКартаДатаРождения = ?(ЗначениеЗаполнено(ДатаРожденияКлиента),
				Формат(ДатаРожденияКлиента, "ДЛФ=D"), "");
		Иначе
			НоваяКартаДатаРождения = "";
		КонецЕсли;
	КонецЕсли;
			
	ИнтерфейсРМКСлужебныйКлиент.УстановитьТекстДекорацииОПерсональныхДанных(Элементы.ДекорацияТекстОПерсональныхДанных,
		ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСозданнойКартыНаСервереЛояльности(ДанныеОтвета)
	ИнтерфейсРМКСлужебныйКлиент.ЗаполнитьПараметрыСозданнойКартыНаСервереЛояльности(ЭтотОбъект, ДанныеОтвета);
	ИзменитьКартинкуВводПокупателя();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьГруппыСозданияРеквизитов(ДоступностьГруппы)
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРеквизитовКарты, ДоступностьГруппы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаНоваяКартаТелефон, ДоступностьГруппы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаНоваяКартаФИО, ДоступностьГруппы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаНоваяКартаПочта, ДоступностьГруппы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаНоваяКартаДатаРождения, ДоступностьГруппы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаНоваяКартаВидКарты, ДоступностьГруппы);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьМаскуВводаДатыРожденияНовойКарты(ЭтотОбъект);
КонецПроцедуры

#Область ПлиточныйИнтерфейс

&НаКлиенте
Процедура ПерейтиВОплатуЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ПерейтиВОплатуНаКлиенте()";
		РассчитатьСкидкиКлиент();
	Иначе
		ПерейтиВОплатуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВОплатуНаКлиенте()
	
	ПереключатьсяВРежимПлитки = Ложь;
	ПереключитьНаРежимПлиткиИзПалитры();
	ПереключитьВРежимОплатыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьВРежимПлитки()
	
	Если ПереключатьсяВРежимПлитки Тогда
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
			
			Если Не ОсновнойПодборПлиточный Тогда
				Возврат;
			КонецЕсли;
				
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
			
			Если Не РежимПлитки Тогда
				ПереключитьНаРежимПлиткиИзПалитры();
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Если РежимПлитки Тогда
			ПереключитьНаРежимПлиткиИзПалитры();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаРежимПлитки(НовыйТипПостроенияПлитки)
	Перем ПараметрыРазмеров;
	
	РежимПлитки = Не РежимПлитки;
	ОбычныйРежим = Не РежимПлитки;
	
	Если РежимПлитки Тогда
		Если Не ТипПостроенияПлитки = НовыйТипПостроенияПлитки Тогда
			ТипПостроенияПлитки = НовыйТипПостроенияПлитки;
			ИнтерфейсРМКСлужебныйКлиент.ПодготовитьДанныеДляПлитки(ЭтотОбъект);
			ПлиткаДомойКлиент();
		ИначеЕсли Не ОсновнойПодборПлиточный Тогда
			ПлиткаДомойКлиент();
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыИнтерфейсаПлитки = ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыПлиточногоИнтерфейса();
	ВысотаКнопокПлитки = ПараметрыИнтерфейсаПлитки.ВысотаКоманды;
	ШиринаКнопокПлитки = ПараметрыИнтерфейсаПлитки.ШиринаКоманды;
	ШиринаКнопокПлиткиСНадписью = ПараметрыИнтерфейсаПлитки.ШиринаКомандыСНадписью;
	ШиринаКнопок = ?(ОбычныйРежим, Элементы.СкидкаТекущийТоварПроцент.Ширина, ШиринаКнопокПлитки);
	ВысотаКнопок = ?(ОбычныйРежим, Элементы.СкидкаТекущийТоварПроцент.Высота, ВысотаКнопокПлитки);
	ШиринаКнопокПлиткиОперация = ?(РежимКассыСамообслуживания, ШиринаКнопокПлиткиСНадписью, ШиринаКнопокПлитки);
	
	Если ОбычныйРежим Тогда
		Элементы.ПлиткаГруппаОбщая.Видимость = РежимПлитки;
		Элементы.ГруппаОбщая.Видимость = ОбычныйРежим;
		Элементы.ГруппаУправленияЧекомВер.Видимость = (ОбычныйРежим И ВертикальнаяОриентация);
	КонецЕсли;
	
	Если Не ЗакрыватьПодборПриВыбореТовара Тогда
		
		Если РежимКассыСамообслуживания И ОбычныйРежим Тогда
			ПараметрыРазмеров = ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыРазмеровКомандУправленияЧекомДляКСО();
		Иначе
			ПараметрыРазмеров = ПараметрыРазмеровКомандУправленияЧеком(ВысотаКнопок, ШиринаКнопок);
		КонецЕсли;
		ПараметрыРазмеров.Вставить("ШиринаКомандыСНадписью", ПараметрыИнтерфейсаПлитки.ШиринаКомандыСНадписью);
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьРазмерКомандУправленияСоставомЧека(ЭтотОбъект, ПараметрыРазмеров);
		
		Элементы.КолонкиОбычногоРежима.Видимость = ОбычныйРежим;
		Элементы.КолонкиРежимаПлитки.Видимость = РежимПлитки;
		Элементы.ГруппаИнфо.Видимость = ОбычныйРежим;
		Элементы.ПлиткаГруппаИнфо.Видимость = РежимПлитки;
		
		Элементы.Товары.Ширина = ?(ОбычныйРежим, 0, 26);
		Элементы.ПлиткаГруппаНиз.Видимость = РежимПлитки;
		
		Элементы.ОтложитьЧек.Ширина = ШиринаКнопок;
		Элементы.ОтложитьЧек.Высота = ВысотаКнопок;
		
		Элементы.ПанельИзбранныхТоваров.ОтображатьЗаголовок = ОбычныйРежим;
		Элементы.ГруппаРядовКнопокБыстрыхТоваров.Видимость = ОбычныйРежим
		
	КонецЕсли;
	
	Если РежимПлитки Тогда
		Элементы.ПлиткаГруппаОбщая.Видимость = РежимПлитки;
		Элементы.ГруппаОбщая.Видимость = ОбычныйРежим;
		Элементы.ГруппаУправленияЧекомВер.Видимость = (ОбычныйРежим И ВертикальнаяОриентация);
	КонецЕсли;
	
	Элементы.ПерейтиНазад.Ширина = ШиринаКнопок;
	Элементы.ПерейтиДалее.Ширина = ШиринаКнопок;
	Элементы.ПерейтиНаНачальнуюСтраницу.Ширина = ШиринаКнопок;
	
	Элементы.ОткрытьПлиточныйИнтерфейсКаталога.Ширина
		= ?(ОбычныйРежим И Не РежимКассыСамообслуживания, Элементы.Каталог.Ширина, ШиринаКнопокПлиткиОперация);
	
	Элементы.ПерейтиНазад.Высота = ВысотаКнопок;
	Элементы.ПерейтиДалее.Высота = ВысотаКнопок;
	Элементы.ПерейтиНаНачальнуюСтраницу.Высота = ВысотаКнопок;
	Элементы.ОткрытьПлиточныйИнтерфейсКаталога.Высота
		= ?(ОбычныйРежим И Не РежимКассыСамообслуживания, Элементы.Каталог.Высота, ВысотаКнопокПлитки);
	УстановитьВидимостьКнопкиЗакрытияПлитки();
	
	РежимПлиткиБезЗакрытияПриВыборе = РежимПлитки И Не ЗакрыватьПодборПриВыбореТовара;
	
	Элементы.ПодгруппаОперации1.Видимость = ОбычныйРежим;
	Элементы.ПодгруппаОперации2.Видимость = ОбычныйРежим;
	Элементы.ПодгруппаОперации3.Видимость = ОбычныйРежим;
	Элементы.ПодгруппаОперации0.Видимость = РежимПлитки;
	
	Элементы.ВвестиКомментарийКЧеку.Видимость = ВыводитьКомментарийКЧеку И Не РежимПлитки;
	Элементы.ОтложитьЧек.Видимость = (Не РежимКассыСамообслуживания) И (ОбычныйРежим Или РежимПлиткиБезЗакрытияПриВыборе);
	Элементы.ГруппаЛево.Видимость = ОбычныйРежим Или РежимПлиткиБезЗакрытияПриВыборе;
	УстановитьВидимостьКомандыУдалитьЧек(ОбычныйРежим Или РежимПлиткиБезЗакрытияПриВыборе);
	
	Если Не ЗакрыватьПодборПриВыбореТовара Тогда
		ПереключитьНаРежимПлиткиСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьНаРежимПлиткиСервер()
	
	Если РежимПлитки Тогда
		Элементы.Переместить(Элементы.ТекущийТоварУменьшитьКоличество, Элементы.ПлиткаИнфоТекущейСтроки);
		Элементы.Переместить(Элементы.ТекущийТоварУвеличитьКоличество, Элементы.ПлиткаИнфоТекущейСтроки);
		Элементы.Переместить(Элементы.ПолучитьВес, Элементы.ПлиткаИнфоТекущейСтроки);
		Элементы.Переместить(Элементы.УдалитьТовар, Элементы.ПлиткаИнфоТекущейСтроки);
		Элементы.Переместить(Элементы.ГруппаУправления, Элементы.ПанельУправленияПодбором);
		Элементы.Переместить(Элементы.ГруппаЛево, Элементы.ПлиткаГруппаОбщая);
	Иначе
		Элементы.Переместить(Элементы.ПолучитьВес, Элементы.ГруппаУправлениеТоваром, Элементы.ДекорацияПоштучноеВыбытие);
		Элементы.Переместить(Элементы.ТекущийТоварУменьшитьКоличество, Элементы.ГруппаУправлениеТоваром, Элементы.ТекущийТоварКоличество);
		Элементы.Переместить(Элементы.ТекущийТоварУвеличитьКоличество, Элементы.ГруппаУправлениеТоваром, Элементы.ПолучитьВес);
		Элементы.Переместить(Элементы.УдалитьТовар, Элементы.ГруппаТекущийТовар);
		Элементы.Переместить(Элементы.ГруппаУправления, ЭтотОбъект, Элементы.Страницы);
		Элементы.Переместить(Элементы.ГруппаЛево, Элементы.СтраницаЛевоОбщая, Элементы.ПанельВводаНаличных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоВПлитках()
	
	Если ДанныеДляПлитки.Количество() = 0 Или ДанныеКнопокПлиток.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивИндексовНайденныхПозиций = Новый Массив;
	Если Не ЗакрыватьПодборПриВыбореТовара Тогда
		ТаблицаТовары = Объект.Товары;
		МассивИндексовНайденныхПозиций = Новый Массив;
		Для Каждого СтрокаТовара Из ТаблицаТовары Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			Индекс = 0;
			Для Каждого ДанныеПлитки Из ДанныеКнопокПлиток Цикл
				Если СтрокаТовара.Номенклатура = ДанныеПлитки.Номенклатура
					И СтрокаТовара.Характеристика = ДанныеПлитки.Характеристика Тогда
					МассивИндексовНайденныхПозиций.Добавить(Индекс);
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Индекс = 0;
	Для Каждого ДанныеПлитки Из ДанныеКнопокПлиток Цикл
		Если Не МассивИндексовНайденныхПозиций.Найти(Индекс) = Неопределено ИЛИ ДанныеПлитки.ЭтоТекущаяКатегория Тогда
			СтраницаЛинии = Элементы["Плитка_Элемент05_" + Индекс];
		Иначе
			СтраницаЛинии = Элементы["Плитка_Элемент03_" + Индекс];
		КонецЕсли;
		
		Если Не Элементы["Плитка_Элемент02_" + Индекс].ТекущаяСтраница = СтраницаЛинии Тогда
			Элементы["Плитка_Элемент02_" + Индекс].ТекущаяСтраница = СтраницаЛинии;
		КонецЕсли;
		Если ЗакрыватьПодборПриВыбореТовара Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлиткаВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	Если НЕ ЗначениеЗаполнено(Объект.Кассир) Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
		Возврат;
		
	КонецЕсли;
	
	НомерНажатой = Сред(Элемент.Имя, 18);
	НомерНажатой = Число(НомерНажатой);
	
	СтрокаНажатойКнопки = ДанныеКнопокПлиток.Получить(НомерНажатой);
	
	Если СтрокаНажатойКнопки.ЭтоКатегория ИЛИ 
		(СтрокаНажатойКнопки.ЭтоТекущаяКатегория 
			И СтрокаНажатойКнопки.ИмеетсяВложенность 
			И НЕ СтрокаНажатойКнопки.ЭтоКатегория) Тогда
		ТекущийПервыйИндексПлитки = СтрокаНажатойКнопки.ПервыйИндексПлитки;
		ЗаполнитьКнопкиПлиток();
		ПересчитатьКоличествоВПлитках();
		Возврат;
	КонецЕсли;
	
	СтрокаДанныхДляПлитки = ДанныеДляПлитки[СтрокаНажатойКнопки.ПервыйИндексПлитки];
	СтрокаПозиции = ОпорныеДанные.НайтиПоИдентификатору(СтрокаДанныхДляПлитки.ИндексИзОпорныхДанных);
	
	ТекущийЭлемент = Элементы.ПанельИзбранныхТоваров;
	
	Если СтрокаПозиции.ЭтоКатегория Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗакрыватьПодборПриВыбореТовара Тогда
		ВыйтиИзРежимаПлитки();
	КонецЕсли;
	
	МассивДанных = Новый Массив;
	ОбщегоНазначенияРМККлиентПереопределяемый.ДозаполнитьДанныеРучногоВыбора(СтрокаПозиции,
		МассивДанных, ЭтотОбъект);
	
	Для Каждого СтрокаМассива Из МассивДанных Цикл
		СписокТоваровВыборКлиент(СтрокаМассива);
	КонецЦикла;
	
	Если СтрокаНажатойКнопки.ИмеетсяВложенность И НЕ ЗакрыватьПодборПриВыбореТовара Тогда
		ТекущийПервыйИндексПлитки = СтрокаНажатойКнопки.ПервыйИндексПлитки;
		ЗаполнитьКнопкиПлиток();
		ПересчитатьКоличествоВПлитках();
	КонецЕсли;
	
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления) = Элементы.ПанельУправленияЧеком
		Или Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека) = Элементы.ОбластьОперативногоУправленияЧеком Тогда
		
		ВыйтиИзРежимаПлитки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПлиточныйИнтерфейсПодбора()
	
	ЗагрузитьИсходныеДанные();
	Если ОпорныеДанные.Количество() > 0 Тогда
		Попытка
			ИнтерфейсРМКСлужебный.СформироватьЭлементыПлиток(ЭтотОбъект);
		Исключение
			СохранитьСообщениеОбОшибкеОткрытияПлитки();
			ОткатитьПлиточныйИнтерфейсПодбора();
		КонецПопытки;
	Иначе
		Элементы.ГруппаУведомленияОПустойСтруктуре.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСообщениеОбОшибкеОткрытияПлитки()
	Если ПараметрыОткрытияФормы = Неопределено
			Или (Не ПараметрыОткрытияФормы.Свойство("ТекстСообщения")) Или ПараметрыОткрытияФормы.ТекстСообщения = "" Тогда
		ПредставлениеПлитки = Строка(СтруктураПлиточногоИнтерфейсаПодбора);
		ТекстСообщения
			= СтрШаблон(НСтр("ru = 'Проверьте корректность заполнения плиточного интерфейса ""%1"" и перезапишите его.
		|Рабочее место кассира открыто без использования плиточного интерфейса.'"), ПредставлениеПлитки);
		Если ПараметрыОткрытияФормы = Неопределено Тогда
			ПараметрыОткрытияФормы = Новый Структура();
		КонецЕсли;
		ПараметрыОткрытияФормы.Вставить("ТекстЗаголовка", НСтр("ru = 'Ошибка заполнения палитры товаров.'"));
		ПараметрыОткрытияФормы.Вставить("ТекстСообщения", ТекстСообщения);
		ПараметрыОткрытияФормы.Вставить("ОшибкаЗапуска", "Палитра");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОткатитьПлиточныйИнтерфейсПодбора()
	СтруктураПлиточногоИнтерфейсаПодбора = Неопределено;
	ОсновнойПодборПлиточный = Ложь;
	ОпорныеДанные.Очистить();
	УстановитьВидимостьЭлементаФормы(Элементы.ОткрытьПлиточныйИнтерфейсКаталога, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуВправо()
	
	КоличествоПлиток = КоличествоЭлементовВРяду * КоличествоРядовНаСтранице;
	ТекущийПервыйИндексПлитки = ТекущийПервыйИндексПлитки + КоличествоПлиток;
	ЗаполнитьКнопкиПлиток();
	ПересчитатьКоличествоВПлитках();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуВлево()
	
	КоличествоПлиток = КоличествоЭлементовВРяду * КоличествоРядовНаСтранице;
	ТекущийПервыйИндексПлитки = ТекущийПервыйИндексПлитки - КоличествоПлиток;
	ЗаполнитьКнопкиПлиток();
	ПересчитатьКоличествоВПлитках();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИсходныеДанные()
	
	Если ЗначениеЗаполнено(СтруктураПлиточногоИнтерфейсаПодбора) Тогда
		
		ИнтерфейсРМКСлужебный.ЗаполнитьОпорныеДанныеПанелиПлиточногоИнтерфейса(ЭтотОбъект);
		ОбщегоНазначенияРМК.ДополнитьОпорныеДанныеПанелиДляПостроенияПлиточногоИнтерфейса(ЭтотОбъект);
		
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция СкидкаПоТекущемуВладельцуПодарка()
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(ТекущийВладелецПодарка) Тогда
		
		ОписаниеТипаСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;
		
		СтруктураСкидки = Новый Структура("Ссылка", ТекущийВладелецПодарка);
		Результат = ОбщегоНазначенияРМК.ПолучитьДесериализованноеСсылочноеЗначение(СтруктураСкидки, "Ссылка", ОписаниеТипаСкидкаНаценка);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьКнопкиИзбранныхПозицийСРазморозкой(БылаЗаморожена)
	
	ЗаполнитьКнопкиИзбранныхПозиций();
	Если БылаЗаморожена Тогда
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьРаботуОблачногоАрхива()

	Результат = Новый Структура();
	Результат.Вставить("СозданиеРезервнойКопииДоступно", 		Ложь);
	Результат.Вставить("ПодключениеОблачногоАрхиваВыполнено", 	Ложь);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив20") Тогда

		МодульОблачныйАрхив20 = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив20");
		
		Результат.СозданиеРезервнойКопииДоступно		= МодульОблачныйАрхив20.СозданиеРезервнойКопииДоступно();
		Результат.ПодключениеОблачногоАрхиваВыполнено	= МодульОблачныйАрхив20.ПодключениеОблачногоАрхиваВыполнено();
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВвестиКомментарийКЧекуКлиент()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
		= Элементы.ГруппаВвестиКомментарийКЧеку Тогда
		
		ПодтвердитьВводКомментарияКЧеку(Неопределено);
		
	Иначе
	
		ПредыдущийСлойДоДанныхПокупателя
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаВвестиКомментарийКЧеку);

		ТекущийКомментарийКЧеку = КомментарийКЧеку;
		ТекущийЭлемент = Элементы.КомментарийКЧеку;
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПакетКлиент()
	
		ДанныеДобавляемогоТовара = Новый Структура;
		ДанныеДобавляемогоТовара.Вставить("Номенклатура");
		ДанныеДобавляемогоТовара.Вставить("Характеристика");
		ДанныеДобавляемогоТовара.Вставить("Упаковка");
		ДанныеДобавляемогоТовара.Вставить("Цена");
		ДанныеДобавляемогоТовара.Вставить("ОсобенностьУчета");
		ДанныеДобавляемогоТовара.Вставить("ВидНоменклатуры");
		ДанныеДобавляемогоТовара.Вставить("ВыборТовараВручную");
		
		ЗаполнитьЗначенияСвойств(ДанныеДобавляемогоТовара, ДанныеПакета);
		
		СписокТоваровВыборПродолжение();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИконкуКомментарияКЧеку(Элемент, КомментарийКЧеку)
	
	Если ЗначениеЗаполнено(КомментарийКЧеку) Тогда
		КартинкаКомментария = БиблиотекаКартинок.РМККомментарийЗаполнен;
	Иначе	
		КартинкаКомментария = БиблиотекаКартинок.РМККомментарийПустой;
	КонецЕсли;
	
	Элемент.Картинка = КартинкаКомментария;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьСтруктуруПараметровДляПоискаПоМагнитномуКоду(МагнитныйКод)
	
	ФильтрПоиска = Новый Структура();
	ФильтрПоиска.Вставить("ИнформационныеКарты");
	
	ПараметрыШтрихкода = Новый Структура();
	ПараметрыШтрихкода.Вставить("ШтрихкодОригинал", МагнитныйКод);
	ПараметрыШтрихкода.Вставить("ФильтрПоискаПоШтрихкоду", ФильтрПоиска);
	
	СтруктураПараметровКлиента = Новый Структура;
	СтруктураПараметровКлиента.Вставить("ПараметрыШтрихкода", ПараметрыШтрихкода);
	
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЛокальнуюКартуКонтрагентаПриНеобходимости()

	Если ЗначениеЗаполнено(Объект.Контрагент)
			И Не ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(ЭтотОбъект) Тогда
		
		ДобавитьЛокальнуюКартуКонтрагента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьГруппуПлатежныеСистемы()
	
	ТекущийСлойРазделаПлатежнойСистемы 
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевРазделПлатежнаяСистема);   
		
	Если ТекущийСлойРазделаПлатежнойСистемы = Элементы.ГруппаПодтверждениеОплаты
		ИЛИ ТекущийСлойРазделаПлатежнойСистемы = Элементы.ГруппаВопросОтложитьЧек
		ИЛИ ТекущийСлойРазделаПлатежнойСистемы = Элементы.ГруппаВопросПредупреждение Тогда
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПанельДействий);

		Элементы.ГруппаСБПДополнительнаяПанель.Видимость = Истина;
		
		Если ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусВозвратаПозже Тогда
			ОпределитьСтатусВозврата();
		КонецЕсли;
		
		Если ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусОплатыПозже Тогда
			ОпределитьСтатусОплаты();
		КонецЕсли;
		
	ИначеЕсли ТекущийСлойРазделаПлатежнойСистемы = Элементы.ГруппаПанельДействий Тогда
		
		СлойПлатежнойСистемы = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(
			Элементы.ГруппаСлоевПанелиДействийПлатежнойСистемы);
			
		ГруппаИнструкция 		= Элементы.ГруппаИнструкция;
		ГруппаИнструкцияПовтор  = Элементы.ГруппаИнструкцияПовтор;
			
		Если ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(ГруппаИнструкцияПовтор, СлойПлатежнойСистемы) 
			ИЛИ ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(ГруппаИнструкция, СлойПлатежнойСистемы) Тогда
			
			КомандаИнструкция(Элементы.КомандаПлатежнаяСистема_Инструкция);
			
		Иначе	
			
			ОтменаДействия = Ложь;
			ОповещениеЗавершитьОтмену = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
		
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОбработкаПрерыванияОперацииПлатежнойСистемы(ЭтотОбъект,
				ОтменаДействия, ОповещениеЗавершитьОтмену);
		
			Если НЕ ОтменаДействия Тогда
				СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
			Иначе

				Элементы.ГруппаСБПДополнительнаяПанель.Видимость 		= Ложь;
				Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевРазделПлатежнаяСистема)
					= Элементы.ГруппаВопросПредупреждение Тогда
					ТекущийЭлемент = Элементы.КомандаЗакрытьПринудительно;
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеСуммОплат()
	
	СуммаОплаченоНал = 0;
	СуммаОплаченоБН = 0;
	СуммаОплаченоБезнал = 0;
	СуммаОплаченоВРассрочку = 0;
	СуммаОплаченоСБП = 0;
	СуммаОплаченоЮКасса = 0;
	СуммаОплаченоСертификатамиНСПК = 0;
	СуммаОплаченоКредитом = 0;
	УдалитьВсеПодарочныеСертификаты(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеБыстрыхТоваров()
	
	Если ИспользоватьПанельИзбранныхТоваров Тогда
		ОбновитьДанные = ПерезаполнитьИзбранное();
		Если ОбновитьДанные Тогда
			ЗаполнитьПанельИзбранныхТоваров();
			ЗаполнитьКнопкиИзбранныхПозиций();
		КонецЕсли;
	КонецЕсли;
	
	ФормаПлиточногоИнтерфейсаДоступна = ЗначениеЗаполнено(СтруктураПлиточногоИнтерфейсаПодбора);
	Если ФормаПлиточногоИнтерфейсаДоступна Тогда
		ОбновитьДанные = ПерезаполнитьПлиточныйИнтерфейс();
		Если ОбновитьДанные Тогда
			ОбновитьЦеныПлиточногоИнтерфейса();
			ЗаполнитьКнопкиПлиток();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПерезаполнитьИзбранное()
	Возврат ОбщегоНазначенияРМКПереопределяемый.ПерезаполнитьИзбранное(ОтображатьОстаток);
КонецФункции

&НаСервере
Функция ПерезаполнитьПлиточныйИнтерфейс()
	Возврат ОбщегоНазначенияРМКПереопределяемый.ПерезаполнитьПлиточныйИнтерфейс(ОтображатьОстаток);
КонецФункции

&НаСервере
Процедура ЗаполнитьПодсказки(Команда, ТекстСочетания)
	ЗаголовокДекорации = "ДекорацияПодсказка" + Команда.ИмяКнопки;
	ЭлементДекорации = Элементы.Найти(ЗаголовокДекорации);
	Если ЭлементДекорации <> Неопределено Тогда
		ЭлементДекорации.Заголовок = ТекстСочетания;
	КонецЕсли;
	
	ЭлементВвода = Элементы.Найти(Команда.ИмяКнопки);
	Если ЭлементВвода <> Неопределено И ТипЗнч(ЭлементВвода) = Тип("ПолеФормы") Тогда
		ЭлементВвода.ПодсказкаВвода = ТекстСочетания;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВернутьТекстСочетанияКлавиш(СочетаниеКлавиш)
	СочетаниеКлавишAlt = ?(СочетаниеКлавиш.Alt, "Alt + ", "");
	СочетаниеКлавишCtrl = ?(СочетаниеКлавиш.Ctrl, "Ctrl + ", "");
	СочетаниеКлавишShift = ?(СочетаниеКлавиш.Shift, "Shift + ", "");
	СочетаниеКлавишКлавиша = Строка(СочетаниеКлавиш.Клавиша);
	
	ТекстСочетания = СочетаниеКлавишAlt + СочетаниеКлавишCtrl + СочетаниеКлавишShift + СочетаниеКлавишКлавиша;
	
	Если ТекстСочетания = "Нет" Тогда
		ТекстСочетания = "";
	КонецЕсли;
	
	Возврат ТекстСочетания;
КонецФункции

&НаСервере
Функция СенсорныйЭкран()
	Возврат РежимКассыСамообслуживания;
КонецФункции

&НаКлиенте
Функция ЭтоПолеВводаДробнойСуммы(ШаблонТекста)
	СимволРазделителя = ИнтерфейсРМКСлужебныйКлиентСервер.РазделительДробнойЧасти();
	Возврат (СтрНайти(ШаблонТекста, СимволРазделителя) > 0);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОплатыПлатежнымиСистемами(ГруппаСБП, ГруппаЮКасса, ЗначениеДоступности)
	Если ГруппаСБП.Видимость Тогда
		УстановитьДоступностьЭлементаФормы(ГруппаСБП, ЗначениеДоступности);
	КонецЕсли;
	Если ГруппаЮКасса.Видимость Тогда
		УстановитьДоступностьЭлементаФормы(ГруппаЮКасса, ЗначениеДоступности);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СжатьПанельИтоговПоЧекам(ТребуетсяСжатиеВГоризонтальнойОриентации)
	
	ИнтерфейсРМКСлужебный.СжатьПанельИтоговПоЧекам(ЭтотОбъект, ТребуетсяСжатиеВГоризонтальнойОриентации);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьПанельИтоговПоЧекам()
	
	ИнтерфейсРМКСлужебный.ВосстановитьПанельИтоговПоЧекам(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДополнительнойИнформацииВРежимеЦифровойПанели(ЗначениеВидимости)
	
	Если (РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой)
			И Элементы.ГруппаДополнительнаяИнформацияПоЧеку.Видимость И Не ВертикальнаяОриентация Тогда
			
		Элементы.ГруппаСлоевПраваяНижняяВспомогательнаяПанель.Видимость = ЗначениеВидимости;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьТоварОтдельнойСтрокой(СтрокаТовара)
	
	РезультатФункции = ДобавлятьВсеТоварыОтдельнойСтрокой
		Или (РежимКассыСамообслуживания И СтрокаТовара.Весовой);
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура СкрытьКомандуВыходаПриНеобходимости()
	
	Если РежимКассыСамообслуживания И РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой
		И Элементы.УдалитьЧек.Видимость Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.УдалитьЧек, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствиеЗаказу(ТекстОшибки)
	ОбщегоНазначенияРМКПереопределяемый.ПроверитьСоответствиеЗаказу(ЭтотОбъект, ТекстОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьДанныеПродаж()
	
	Если ИспользоватьСерверЛояльностиПолучательДанных И ИспользоватьЗапросПродажСЛ Тогда
		
		Если (ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Или ЗначениеЗаполнено(Объект.Контрагент)
			Или ИнтерфейсРМКСлужебныйКлиентСервер.ПолученИдентификаторКартыЛояльности(ПараметрыКартыЛояльности)) Тогда
			
			ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
			ПараметрыВыполненияЗапроса
				= СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПолучитьОборотыПродаж(ПараметрыПодключенияКСерверуЛояльности,
						ЗначенияПараметровМетода);
			Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
			
			Если Результат.ЕстьОшибки Тогда
				ДополнительноеПояснение = НСтр("ru = ''");
				
				Если ЕстьСвойство(Результат, "ТекстОшибки") Тогда
					ДополнительноеПояснение = СтрШаблон(НСтр("ru = ' по причине: %1'"), Результат.ТекстОшибки);
				КонецЕсли;
				
				ТекстПредупреждения = СтрШаблон("%1 %2",
					НСтр("ru = 'Не удалось получить сведения о бонусном балансе клиента'"),
						ДополнительноеПояснение);
				ПоказатьПредупреждение(, ТекстПредупреждения);
			
				Возврат;
			КонецЕсли;
			
			СтрокаJSON = Результат.ДанныеОтвета;
			ДанныеОтвета = Неопределено;
			СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
			
			Если НЕ ДанныеОтвета = Неопределено И ДанныеОтвета.Свойство("ClientNotFound")
				И НЕ ДанныеОтвета.ClientNotFound Тогда
				
				ИнтерфейсРМКСлужебныйКлиентСервер.ОтобразитьИнформациюОПродажах(ЭтотОбъект, ДанныеОтвета);
				
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ЗаполнитьДанныеПродажЛокально();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПравоУменьшенияКоличества(ТекущаяСтрока)
	
	НеобходимоеПраво = "ПравоУдалитьСтрокуРМК";
	Возврат (ТекущаяСтрока.РазрешеноУменьшатьКоличество Или РежимКассыСамообслуживания
		Или ЕстьПравоНаДействие(НеобходимоеПраво) Или ЭтоВесовойТоварВРежимеКСО(ТекущаяСтрока));
	
КонецФункции

&НаКлиенте
Функция УменьшениеКоличестваТовараТекущейСтрокиВозможно(ТекущаяСтрока)
	
	Возврат (ТекущийТоварКоличество > 1 Или (ТекущийТоварКоличество > 0 И ТекущаяСтрока.Весовой));
	
КонецФункции

&НаКлиенте
Функция УменьшениеКоличестваТовараВозможно()
	
	РезультатФункции = Ложь;
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Если (Не ТекущаяСтрока = Неопределено) И УменьшениеКоличестваТовараТекущейСтрокиВозможно(ТекущаяСтрока) Тогда
		РезультатФункции = Истина;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура СохранитьРазрешениеНаУменьшениеКоличестваТекущейСтроки(ТекущаяСтрокаРедактирования = Неопределено)
	
	Если ТекущаяСтрокаРедактирования = Неопределено Тогда
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Иначе
		ТекущаяСтрока = ТекущаяСтрокаРедактирования;
	КонецЕсли;
	
	Если Не ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока.РазрешеноУменьшатьКоличество = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПропуститьОбновлениеТаблицыДляОперации()

	ОперацииБезОбновления = Новый Массив;
	ОперацииБезОбновления.Добавить("ВводВесаТовара");
	ОперацииБезОбновления.Добавить("ПоказатьВыход");
	ОперацииБезОбновления.Добавить("ИзменениеКоличестваВМеньшуюСторону");
	ОперацииБезОбновления.Добавить("УменьшениеКоличестваНаЕдиницу");
	
	Пропускать = Ложь;
	Если Не ОперацииБезОбновления.Найти(ТекущаяОперация) = Неопределено Тогда
		Пропускать = Истина;
	КонецЕсли;
	Возврат Пропускать;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПравоИПересчитатьИзменениеКоличества(ДополнительныеПараметры)
	
	ТекущаяСтрока = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.УвеличитьКоличество Или ЕстьПравоУменьшенияКоличества(ТекущаяСтрока) Тогда
		ПересчитатьИзменениеКоличестваСВопросомОСкидках(ДополнительныеПараметры);
	Иначе
		НеобходимоеПраво = "УменьшениеКоличестваНаЕдиницу";
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИзменениеКоличестваСВопросомОСкидках(ДополнительныеПараметры)
	
	Если СкидкиРассчитаны И Не РежимКассыСамообслуживания Тогда
		ЗадатьВопросПоРасчетуСкидок("ПересчитатьДанныеПриИзмененииКоличестваЗавершение", ДополнительныеПараметры);
	Иначе 
		ПересчитатьДанныеПриИзмененииКоличестваЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОбработатьИзменениеКоличестваТовара(ТекущаяСтрокаРедактирования = Неопределено, ТребуетсяПовышениеПрав = Ложь)
	
	Если ТекущаяСтрокаРедактирования = Неопределено Тогда
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Иначе
		ТекущаяСтрока = ТекущаяСтрокаРедактирования;
	КонецЕсли;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоУменьшение = (ТекущийТоварКоличество < ТекущаяСтрока.Количество);
	Если ЭтоУменьшение И Не ЕстьПравоУменьшенияКоличества(ТекущаяСтрока) Тогда
		НеобходимоеПраво = "ИзменениеКоличестваВМеньшуюСторону";
		Если Не НеобходимоеПраво = ТекущаяОперация Тогда
			ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
		КонецЕсли;
		ТребуетсяПовышениеПрав = Истина;
	Иначе
		ОбработатьИзменениеКоличестваТовара(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеКоличестваТовара(ТекущаяСтрокаРедактирования = Неопределено)
	
	Если ТекущаяСтрокаРедактирования = Неопределено Тогда
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Иначе
		ТекущаяСтрока = ТекущаяСтрокаРедактирования;
	КонецЕсли;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПримененыСкидки() Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	Если ТекущаяСтрока.ЭтоНабор Тогда
		УвеличитьКоличествоНабора = Неопределено;
		Если ТекущийТоварКоличество > ТекущаяСтрока.Количество Тогда
			УвеличитьКоличествоНабора = Истина;
		ИначеЕсли ТекущийТоварКоличество < ТекущаяСтрока.Количество Тогда
			УвеличитьКоличествоНабора = Ложь;
		КонецЕсли;
		Если Не УвеличитьКоличествоНабора = Неопределено Тогда
			ИзменитьКоличествоНабора(ТекущаяСтрока, УвеличитьКоличествоНабора, ТекущийТоварКоличество);
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Количество = ТекущийТоварКоличество;
		ТекущаяСтрока.КоличествоУпаковок = ТекущийТоварКоличество;
		СкорректироватьТекущееКоличество(ТекущаяСтрока);
		ПересчитатьСуммы(ТекущаяСтрока, Истина);
	КонецЕсли;
	
	ВызватьАвтоматическийРасчетСкидокВРежимеКСО();
	РассчитатьСуммуОплатыБонусами();
	ОбновитьИнформациюНаДисплееПокупателя("ИзменениеКоличества");
	ЗакрытьСтраницуСОшибкойКоличества();
	ТекущаяСтрокаРедактированияКоличества = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав = Ложь)
	
	Если Не ОбновлениеКоличестваЗапущено Тогда
		ОбновлениеКоличестваЗапущено = Истина;
		Если Не ТекущаяСтрокаРедактированияКоличества = Неопределено Тогда 
			Если (Не ТекущийТоварКоличество = ТекущаяСтрокаРедактированияКоличества.Количество) Тогда
					
				ПроверитьОбработатьИзменениеКоличестваТовара(ТекущаяСтрокаРедактированияКоличества, ТребуетсяПовышениеПрав);
				
			Иначе
				
				ТекущаяСтрокаРедактированияКоличества = Неопределено;
				
			КонецЕсли;
		КонецЕсли;
		ОбновлениеКоличестваЗапущено = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьНеЗавершенныеДействияПоТекущейСтроке()

	РезультатФункции = Ложь;
	ТребуетсяПовышениеПрав = Ложь;
	ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав);
	Если ОбновлениеКоличестваЗапущено Или ТребуетсяПовышениеПрав Тогда
		Если Не ТекущаяСтрокаРедактированияКоличества = Неопределено Тогда
			Элементы.Товары.ТекущаяСтрока = ТекущаяСтрокаРедактированияКоличества.ПолучитьИдентификатор();
		КонецЕсли;
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОтменитьРедактированиеКоличестваТовараПриНеобходимости()

	Если Не ТекущаяСтрокаРедактированияКоличества = Неопределено Тогда
		
		АктивныйСлойСлужебнойИнформацииЧека
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
		Если Не АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаЗаменаПрав Тогда
			ТекущаяСтрокаРедактированияКоличества = Неопределено; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзбранноеВыбор(Команда)
	
	БылаЗаморожена = ФормаЗамороженаПослеПробитияЧека();
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	Если НЕ ЗначениеЗаполнено(Объект.Кассир) Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
		Возврат;
		
	КонецЕсли;
	
	НомерНажатой = Сред(Команда.Имя, 33);
	НомерНажатой = Число(НомерНажатой);
	
	КоррекцияИндекса = ?(ТекущаяСтраницаКнопок = 0, 0, 1);
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("НомерКатегорииРазмещения", ТекущаяСтраницаКнопок);
	ОтборСтрок.Вставить("ИндексПозиции", НомерНажатой+1-КоррекцияИндекса);
	
	СтрокаИзбранного = ИзбранныеПозиции.НайтиСтроки(ОтборСтрок);
	
	ТекущийЭлемент = Элементы.ПанельИзбранныхТоваров;
	
	Если СтрокаИзбранного.Количество() = 0 Тогда
		
		Элементы.ПанельИзбранныхТоваров.Заголовок = ЗаголовокИзбранныхТоваров;
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("НомерКатегории", ТекущаяСтраницаКнопок);
		ПозицияДляВозврата = ИзбранныеПозиции.НайтиСтроки(ОтборСтрок);
		
		Если ПозицияДляВозврата.Количество() = 0 Тогда
			ТекущаяСтраницаКнопок = 0;
		Иначе
			ТекущаяСтраницаКнопок = ПозицияДляВозврата[0].НомерКатегорииРазмещения;
		КонецЕсли;
		
		ЗаполнитьКнопкиИзбранныхПозицийСРазморозкой(БылаЗаморожена);
		Возврат;
	КонецЕсли;
	
	СтрокаНажатой = СтрокаИзбранного[0];
	
	Если СтрокаНажатой.ЭтоКатегория Тогда
		
		ТекущаяСтраницаКнопок = СтрокаНажатой.НомерКатегории;
		ЗаполнитьКнопкиИзбранныхПозицийСРазморозкой(БылаЗаморожена);
		
	Иначе
		
		ПозицияИзбранного = СтрокаНажатой;
		
		ДанныеДобавляемогоТовара = Новый Структура;
		ДанныеДобавляемогоТовара.Вставить("Номенклатура", ПозицияИзбранного.Номенклатура);
		ДанныеДобавляемогоТовара.Вставить("Характеристика", ПозицияИзбранного.Характеристика);
		ДанныеДобавляемогоТовара.Вставить("Упаковка", ПозицияИзбранного.Упаковка);
		ДанныеДобавляемогоТовара.Вставить("Цена", ПозицияИзбранного.Цена);
		ДанныеДобавляемогоТовара.Вставить("ОсобенностьУчета", ПозицияИзбранного.ОсобенностьУчета);
		ДанныеДобавляемогоТовара.Вставить("ВидНоменклатуры", ПозицияИзбранного.ВидНоменклатуры);
		ДанныеДобавляемогоТовара.Вставить("ВыборТовараВручную", Истина);
		
		СписокТоваровВыборПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлиточныйИнтерфейсКаталогаПродолжение(НовыйТипПостроенияПлитки);
	
	ТекущийРежимПлитки = РежимПлитки;
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	Если ТекущийРежимПлитки = РежимПлитки Тогда
		ПереключитьНаРежимПлитки(НовыйТипПостроенияПлитки);
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая И РежимПлитки Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	
	Если РежимПлитки И ОсновнойПодборПлиточный Тогда
		ПереключатьсяВРежимПлитки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварПоСтрокеКлиентПродолжение();
	
	Если СкидкиРассчитаны Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	ЭтоТоварСХарактеристикой = Ложь;
	ДобавитьТоварПоСтроке(ЭтоТоварСХарактеристикой);
	Если ЭтоТоварСХарактеристикой Тогда
		
		ЭлементОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
			СписокТоваров.Отбор.Элементы, "ЗначениеВводаТовараПоСтроке");
			
		Если ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = СписокТоваров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Представление = "ЗначениеВводаТовараПоСтроке";
		КонецЕсли;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВводТовараПоСтроке;
		
		ПоискТоваровОткрытИзСтрокиВвода = Истина;
		ОткрытьКаталогКлиент();
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущаяСтрока.Весовой И Не ТекущаяСтрока.Фасованный Тогда
		ВесТекущегоТовара();
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	КонецЕсли;
	ПересчитатьСуммы(ТекущаяСтрока);
	АктуализироватьКорзинуПоДаннымОграниченийПродаж();
	ЕстьНезаполненныеДанные = ЕстьНезаполненныеДанные();
	ОбработатьИзменениеТаблицыТоваровНаКлиенте(Не ЕстьНезаполненныеДанные);
	ОбновитьИнформациюНаДисплееПокупателя("ДобавлениеТовара");
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогПродолжение();
	
	Если СкидкиРассчитаны И Не РежимКассыСамообслуживания Тогда
		ЗадатьВопросПоРасчетуСкидок("ОткрытьКаталогЗавершение");
	Иначе
		ОткрытьКаталогЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяКартаВидКартыПриИзменении(Элемент)
	Если НоваяКартаВидКарты <> "" Тогда
		ДанныеВидаКарты = ДанныеВидаКарты(НоваяКартаВидКарты);
		Элементы.НоваяКартаФИО.АвтоОтметкаНезаполненного = ДанныеВидаКарты.ЭтоИменнаяКарта;
		Элементы.НоваяКартаТелефон.АвтоОтметкаНезаполненного = ДанныеВидаКарты.ЭтоИменнаяКарта ИЛИ ОтправлятьSMSКодПриЗаведенииКарты;
		Если НЕ ДанныеВидаКарты.ЭтоИменнаяКарта Тогда
			Элементы.НоваяКартаФИО.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		Если НЕ (ДанныеВидаКарты.ЭтоИменнаяКарта ИЛИ ОтправлятьSMSКодПриЗаведенииКарты) Тогда
			Элементы.НоваяКартаТелефон.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ДанныеВидаКарты(ИдентификаторВидаКарты)	Экспорт
	ДанныеВидаКарты = Новый Структура("Идентификатор, Наименование, ЭтоИменнаяКарта",,, Истина);
	ПараметрыПоиска = Новый Структура("Идентификатор", ИдентификаторВидаКарты);
	НайденныеВиды = ТаблицаВидыКарт.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеВиды.Количество() <> 0 Тогда
		ЗаполнитьЗначенияСвойств(ДанныеВидаКарты, НайденныеВиды[0]);
	КонецЕсли;
	
	Возврат ДанныеВидаКарты;
КонецФункции // ДанныеВидаКарты()

&НаКлиенте
Функция ДополнительныеПараметрыОткрытияЗакрытияСмены()
	
	ДополнительныеПараметрыОткрытияЗакрытияСмены = Новый Структура();
	ДополнительныеПараметрыОткрытияЗакрытияСмены.Вставить("Пользователь");
	ДополнительныеПараметрыОткрытияЗакрытияСмены.Вставить("Кассир");
	ДополнительныеПараметрыОткрытияЗакрытияСмены.Вставить("КассаККМ");
	ДополнительныеПараметрыОткрытияЗакрытияСмены.Вставить("ВариантЗаполненияМестаРасчетов");
	
	Возврат ДополнительныеПараметрыОткрытияЗакрытияСмены;
	
КонецФункции

&НаКлиенте
Процедура СоздатьЗаказИРаспечатать(СозданныйЗаказ = Неопределено)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстЗаголовка = НСтр("ru = 'Ошибка создания заказа.'");
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать покупателя.'");
		ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
		Возврат;
	ИначеЕсли Объект.Товары.Количество() = 0 Тогда
		ТекстЗаголовка = НСтр("ru = 'Ошибка создания заказа.'");
		ТекстСообщения = НСтр("ru = 'Список товаров пуст.'");
		ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
		Возврат;
	КонецЕсли;
	
	СоздатьЗаказНаСервере();
	СозданныйЗаказ = Объект.ЗаказПокупателя;
	Если ПечататьЗаказПриСоздании Тогда
		НапечататьЗаказПокупателя(СозданныйЗаказ);
	КонецЕсли;
	УдалитьЧекКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаЗаказ()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	ОформитьРежимНовогоЧека("Заказ");
	
	Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаЗаказ;
	
	Если ЗначениеЗаполнено(ПокупательНовогоЗаказа) Тогда
		Объект.Контрагент = ПокупательНовогоЗаказа;
		ЗаполнитьФормуПоДисконтнойКарте();
		ИзменитьКартинкуВводПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаказНаСервере()
	ОбщегоНазначенияРМКПереопределяемый.СоздатьЗаказПокупателя(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОчиститьКартуЛояльностиПриОткладыванииЧека()
	
	Если ТребуетсяОчисткаКартыЛояльностиПриОткладыванииЧека() Тогда
		ОчиститьКартуЛояльностиПриОткладыванииЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяОчисткаКартыЛояльностиПриОткладыванииЧека()
	
	РезультатФункции = Ложь;
	ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	
	Если ЭтоПродажа И ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(ЭтотОбъект)
			И ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыДоОплаты(ЭтотОбъект)
			И (Не Объект.Оплачивается) 
			И (Не ЗначениеЗаполнено(Объект.ЗаказПокупателя)) Тогда
			
		РезультатФункции = Истина;
			
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьКартуЛояльностиПриОткладыванииЧека()
	
	Если СкидкиРассчитаны Тогда
		ОтменитьСкидки();
	КонецЕсли;
	Объект.ДисконтнаяКарта = Неопределено;
	Объект.Контрагент = Неопределено;
	ПараметрыКартыЛояльности = Неопределено;
	КоличествоБонусов = 0;
	БонусыДоступноКОплате = 0;
	ПроцентОплатыБонусами = 0;
	ПараметрыВводаКодаSMS = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакХочуБумажныйЧек(ЗначениеПризнака)
	
	ХочуБумажныйЧек = ЗначениеПризнака;
	ЭлементФлаг = Элементы.ДекорацияХочуБумажныйЧекФлаг;
	Элементы.ГруппаБерегитеЛес.Доступность = ХочуБумажныйЧек;
	ЭлементФлаг.Картинка = ?(ХочуБумажныйЧек, БиблиотекаКартинок.РМКВыборБелыйФон, БиблиотекаКартинок.РМКБелыйФон);
	
	ИнтерфейсРМКСлужебныйКлиент.НастроитьСвойстваКнопкиПробитьИОтправить(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СразуОтправлятьНаПечатьЧека()
	
	Возврат (ПечататьБумажныйЧек Или ТипЗнч(ПараметрыОплатыПлатежнойСистемой) = Тип("Структура")
			Или ПробитиеСоСтраницыОтправкиЧека Или ((Не РежимКассыСамообслуживания)
				И ИнтерфейсРМКСлужебныйКлиент.ЗаполненаКонтактнаяИнформацияДляОтправкиЧека(ЭтотОбъект)));
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьФормуДанныеПокупателяСОтменойПробитияЧека()
	
	ТипОплаты = "";
	Если ТипЗнч(ПараметрыОплатыПлатежнойСистемой) = Тип("Структура") Тогда
		СброситьОплатуПриОшибке();
		ПараметрыОплатыПлатежнойСистемой = Неопределено;
	КонецЕсли;
	ЗакрытьФормуДанныеПокупателяКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧекКлиент()
	
	ЗакрытьФормуДанныеПокупателяКлиент();
	ПробитиеСоСтраницыОтправкиЧека = Истина;
	Если (Не ТипЗнч(ПараметрыОплатыПлатежнойСистемой) = Тип("Структура"))
		И (Не ЗначениеЗаполнено(ВыбраннаяСистемаНалогообложения) Или Не Элементы.ПробитьЧек.Доступность) Тогда
		
		ОткрытьПанельВводаОплат();
		
	иначе
		
		Если ТипЗнч(ПараметрыОплатыПлатежнойСистемой) = Тип("Структура") Тогда
			ЗапуститьОплатуВозвратПлатежнойСистемой(ПараметрыОплатыПлатежнойСистемой.АвтономнаяККТ);
		Иначе
			ПробитоЧеков = ПробитыеЧеки.Количество();
			Если ЭтоЧекКоррекции ИЛИ ЭтоЗаменаТоваров Тогда
				ОжидаемоеКоличествоЧеков = 2 - ПробитоЧеков;
			Иначе
				СистемыНалогообложенияПродажТоваровКорзины = РазличныеСНОВСпискеПокупок();
				ОжидаемоеКоличествоЧеков = СистемыНалогообложенияПродажТоваровКорзины.Количество() - ПробитоЧеков;
			КонецЕсли;
			
			НачатьПечатьЧека();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПанельВводаОплат()
	
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Тогда
		Если Элементы.ПерейтиКОплате.Доступность Тогда
			ПереключитьВРежимОплаты();
		Иначе
			ЕстьНезаполненныеДанные();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстСообщенияЗавершенияОплаты(СуммаСтрокой)
	
	РезультатФункции = 
	СтрШаблон(НСтр("ru = 'Чек на сумму %1 успешно оплачен.
	|Спасибо за покупку. Будем рады видеть вас снова!'"), СуммаСтрокой);
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Процедура ПоказатьСообщениеЗавершенияОплаты(ПараметрыЗавершения)
	Если ТипЗнч(ПараметрыЗавершения) = Тип("Структура") Тогда
		Элементы.НадписьОкончаниеЧека.Заголовок = ТекстСообщенияЗавершенияОплаты(ПараметрыЗавершения.СуммаПродаж);
		Элементы.СтраницыСтартовогоОкна.ТекущаяСтраница = Элементы.СтраницаОкончанияПродажи;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкрытьСообщениеЗавершенияОплаты()
	Элементы.НадписьОкончаниеЧека.Заголовок = "";
	Элементы.СтраницыСтартовогоОкна.ТекущаяСтраница = Элементы.СтраницаНачалаПродажи;
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗавершениеСообщенияОбОплате();
	Если ТипЗнч(ПараметрыПустойСтраницы) = Тип("Структура") Тогда
		ПодключитьОбработчикОжидания("СкрытьСообщениеЗавершенияОплаты", ПараметрыПустойСтраницы.ВремяОтображения, Истина);
		ПараметрыПустойСтраницы = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеВыбораНоменклатуры(Номенклатура)
	
	ДанныеВыбора = Новый Структура;
	ДанныеВыбора.Вставить("Номенклатура", Номенклатура);
	ДанныеВыбора.Вставить("Характеристика");
	ДанныеВыбора.Вставить("Упаковка");
	ДанныеВыбора.Вставить("Цена");
	ДанныеВыбора.Вставить("ОсобенностьУчета");
	ДанныеВыбора.Вставить("ВидНоменклатуры");
	ДанныеВыбора.Вставить("ВыборТовараВручную");
	
	ОбщегоНазначенияРМКПереопределяемый.ПодготовитьДанныеВыбораНоменклатуры(ЭтотОбъект, ДанныеВыбора);
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиенте
Процедура ВернутьсяНаСтраницуСтартаПродажПриНеобходимости()
	
	ГруппаСлоевСлужебнаяИнформация = Элементы.ГруппаСлоевСлужебнаяИнформацияЧека;
	ОткрытаСлужебнаяСтраница 
		= (Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевСлужебнаяИнформация)
			= Элементы.ОбластьОперативногоУправленияЧеком);
	
	Если Объект.Товары.Количество() = 0 И Не ОткрытаСлужебнаяСтраница Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
		УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, Ложь);
		Если Не РежимКассыСамообслуживания Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РежимДопускаетРедактированиеСписка()
	Возврат Не (ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект)
		Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ПродолжениеПослеПробития);
КонецФункции
	
&НаКлиенте
Функция ГруппаРедактированияСтрокиТовараДоступна()
	Возврат Элементы.ГруппаЛево.Доступность И Элементы.ГруппаРедактированияСтрокиКорзины.Доступность;
КонецФункции

&НаКлиенте
Процедура АктивироватьДоступныйЭлементСтрокиТовараПоПриоритету()
	
	Если Элементы.ТекущийТоварКоличество.Доступность И Элементы.ТекущийТоварКоличество.Видимость Тогда
		ТекущийЭлемент = Элементы.ТекущийТоварКоличество;
	ИначеЕсли Элементы.ТекущийТоварЦенаИзКарточки.Доступность И Элементы.ТекущийТоварЦенаИзКарточки.Видимость Тогда
		ТекущийЭлемент = Элементы.ТекущийТоварЦенаИзКарточки;
	ИначеЕсли Элементы.ПоказатьОстатки.Видимость И Элементы.ПоказатьОстатки.Доступность Тогда
		ТекущийЭлемент = Элементы.ПоказатьОстатки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСписокТоваровНаКлиенте()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая И (Не РежимПоказаСкидок) 
		И (Не РежимПоказаОстатков) И (Не РежимПлитки) И РежимДопускаетРедактированиеСписка() Тогда
			
		Если ТекущийЭлемент = Элементы.Товары Тогда
			Если ГруппаРедактированияСтрокиТовараДоступна() Тогда
				АктивироватьДоступныйЭлементСтрокиТовараПоПриоритету();
			КонецЕсли;
		Иначе
			ТекущийЭлемент = Элементы.Товары;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКнопкиМирТовары(Элементы, ЗначениеВидимости)
	УстановитьВидимостьЭлементаФормы(Элементы.МирТовары, ЗначениеВидимости);
	УстановитьВидимостьЭлементаФормы(Элементы.КомандаМирТовары, ЗначениеВидимости);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРежимаПанелиДанныхПокупателя()
	
	Если РежимПанелиДанныеПокупателя = 0 Тогда
		ДанныеЗаполнены = ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект);
		ПереключитьНаСтраницуПоискКарты(ДанныеЗаполнены);
	ИначеЕсли РежимПанелиДанныеПокупателя = 1 Тогда
		ПереключитьНаСтраницуСозданиеКарты();
	ИначеЕсли РежимПанелиДанныеПокупателя = 2 Тогда
		ПереключитьНаСтраницуОтправкаЧека();
	КонецЕсли;
	НастроитьДоступностьГорячейКлавишиEnter();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНомерСледующейПанелиПокупателя()
	НомерВыбраннойПанели = -1;
	
	НомерСледующейПанели = РежимПанелиДанныеПокупателя + 1;
	СписокПанелей = Элементы.РежимПанелиДанныеПокупателя.СписокВыбора;
	КоличествоПанелей = СписокПанелей.Количество();
	НомерЭлемента = 0;
	Пока НомерЭлемента < КоличествоПанелей И НомерВыбраннойПанели < 0 Цикл
		ПанельПокупателя = СписокПанелей[НомерЭлемента];
		Если ПанельПокупателя.Значение >= НомерСледующейПанели Тогда
			НомерВыбраннойПанели = ПанельПокупателя.Значение;
		КонецЕсли;
		НомерЭлемента = НомерЭлемента + 1;
	КонецЦикла;
	Если НомерВыбраннойПанели = -1 И КоличествоПанелей > 0 Тогда
		НомерВыбраннойПанели = СписокПанелей[0].Значение;
	КонецЕсли;
	
	Возврат НомерВыбраннойПанели;
КонецФункции

&НаКлиенте
Процедура УдалитьТоварНаКлиенте()
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
		
		Возврат;
		
	КонецЕсли;
	
	НеобходимоеПраво = "ПравоУдалитьСтрокуРМК";
	
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		
		Если СкидкиРассчитаны И Не РежимКассыСамообслуживания Тогда
			ЗадатьВопросПоРасчетуСкидок("УдалитьТоварЗавершение");
		Иначе
			УдалитьТоварЗавершение(КодВозвратаДиалога.Да, Неопределено);
		КонецЕсли;
		
	Иначе
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьГорячуюКлавишуDel()
	
	Если РежимДопускаетРедактированиеСписка() И ГруппаРедактированияСтрокиТовараДоступна()
		И Не РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		
		УдалитьТоварНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьГорячуюКлавишуEnter()
	
	МассивКнопокЦифровойПанели = ЭлементыКнопокЦифровойПанели();
	Если РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя И РежимПанелиДанныеПокупателя = 0 Тогда
		Если АктивноПолеВводаПоискаКарты() Тогда
			ОбработатьШтрихкодКлиент(СтрокаПоискаКарты);
		ИначеЕсли ТекущийЭлемент = Элементы.ВыбратьКонтрагента Тогда
			ВыбратьКонтрагентаКлиент();
		ИначеЕсли ТекущийЭлемент = Элементы.ЗакрытьФормуДанныеПокупателя Тогда
			ЗакрытьФормуЦифровойПанели();
		ИначеЕсли ТекущийЭлемент = Элементы.ЦифроваяПанельПоиск Тогда
			КомандаЦифровойПанелиПоиск(Неопределено);
		ИначеЕсли ТекущийЭлемент = Элементы.ОтменитьВводКарты тогда
			ОтменитьВводКартыКлиент();
		ИначеЕсли ТекущийЭлемент = Элементы.ОплатитьБонусами Тогда
			ОплатитьБонусами(Неопределено);
		ИначеЕсли Не МассивКнопокЦифровойПанели.Найти(ТекущийЭлемент) = Неопределено Тогда
			КомандаКнопкиЦифровойПанели(Команды.Найти(ТекущийЭлемент.ИмяКоманды));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭлементыКнопокЦифровойПанели()
	
	РезультатФункции = Новый Массив;
	
	РезультатФункции.Добавить(Элементы.ЦифроваяПанельОчистить);
	РезультатФункции.Добавить(Элементы.ЦифроваяПанельЦифра0);
	Для НомерКнопки = 0 По 9 Цикл
		
		ЭлементКнопка = Элементы[СтрШаблон("ЦифроваяПанельЦифра%1", Формат(НомерКнопки, "ЧН=0"))];
		РезультатФункции.Добавить(ЭлементКнопка);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция КнопкаОплатыБонусамиДоступна()
	Возврат (Элементы.ГруппаВидОплатыБонусы.Видимость И Элементы.ОплатаБонусами.Доступность);
КонецФункции

&НаКлиенте
Функция АктивноПолеВводаПоискаКарты()
	Возврат (ТекущийЭлемент = Элементы.СтрокаПоискаКарты Или ТекущийЭлемент = Элементы.СтрокаПовторныйПоискКарты);
КонецФункции

&НаКлиенте
Функция КнопкаОплатитьБонусамиДоступна()
	Возврат (Элементы.ОплатитьБонусами.Видимость И Элементы.ОплатитьБонусами.Доступность);
КонецФункции

&НаКлиенте
Функция ОткрытаГруппаПроверкиДобавленияСертификата()
	СлоиВспомогательнойПанели = Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель;
	Возврат (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(СлоиВспомогательнойПанели)
		= Элементы.ГруппаПоискСертификатов И Элементы.ГруппаОплатаСертификатами.Видимость);
КонецФункции
	
&НаКлиенте
Процедура НастроитьДоступностьГорячейКлавишиEnter()
	УстановитьВидимостьЭлементаФормы(Элементы.ГорячаяКлавишаEnter,
		(РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя И РежимПанелиДанныеПокупателя = 0));
КонецПроцедуры
	
&НаКлиенте
Процедура ВыбратьКонтрагентаКлиент()
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("УстановитьВыбранногоКонтрагента", ЭтотОбъект);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОписаниеОповещенияОЗакрытии", ОписаниеОповещенияОЗакрытии);
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьФормуВыбораКонтрагента(СтруктураПараметров, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВводКартыКлиент()
	
	РассчитатьСкидкиОтложенно = Ложь;
	Если (РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате И Не ВопросПоРасчетуСкидок)
		Или (РежимКассыСамообслуживания И Не РаботаВРежимеМедленногоСоединения) Тогда
		
		РассчитатьСкидкиОтложенно = Истина;
		
	ИначеЕсли СкидкиРассчитаны Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	СтрокаПоискаКарты = "";
	РазблокироватьОбъектСервераЛояльности("clientbonuses");
	ОтменитьОплатуБонусами();
	ОчиститьДанныеПокупателя();
	ОчиститьДанныеКартыЛояльности();
	ИнтерфейсРМКСлужебныйКлиент.ОчиститьПоляВводаНовойКарты(ЭтотОбъект);
	
	ИзменитьКартинкуВводПокупателя(); 
	
	ПереключитьНаСтраницуПоискКарты();
	
	ТекущийЭлемент = Элементы.СтрокаПоискаКарты;
	Если РассчитатьСкидкиОтложенно Тогда
		РассчитатьСкидкиКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьЧекПроверкаПрав()
	
	НеобходимоеПраво = "ПравоОтложитьЧекРМК";
	ПравоНаДействие = ЕстьПравоНаДействие(НеобходимоеПраво);
	ТекущаяОперация = "ОтложитьЧекРМК";
	ЗакрытьФормуЦифровойПанели();
	
	Если ПравоНаДействие Тогда
		ОтложитьЧекКлиент();
	Иначе
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныеЧекиПроверкаПрав()
	
	НеобходимоеПраво = "ПравоПродолжитьЧекРМК";
	ПравоНаДействие = ЕстьПравоНаДействие(НеобходимоеПраво);
	ТекущаяОперация = "ПродолжитьЧекРМК";
	
	Если ПравоНаДействие Тогда
		ОтложенныеЧекиКлиент();
	Иначе
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьДанныеКарты()
	
	ПустойРезультат = НЕ ЗначениеЗаполнено(Объект.ДисконтнаяКарта) И ЗначениеЗаполнено(Объект.Контрагент);
	
	Если ПустойРезультат И ИспользоватьСерверЛояльностиПолучательДанных Тогда
		Если ФильтрПоискаПоШтрихкоду = Неопределено тогда
			ФильтрПоискаПоШтрихкоду = Новый Структура;
			ФильтрПоискаПоШтрихкоду.Вставить("ИнформационныеКарты");
		КонецЕсли;
		ФильтрПоискаПоШтрихкоду.Вставить("УникальныйИдентификаторВладельцаКарты");
		ШтрихкодПоиска = Строка(Объект.Контрагент.УникальныйИдентификатор());
		ПараметрыДляОбработкиШтрихкода = Новый Структура();
		ПараметрыДляОбработкиШтрихкода.Вставить("Штрихкод", ШтрихкодПоиска);
		
		СтруктураПараметровКлиента = ДанныеПоискаПоШтрихкодуСервер(ШтрихкодПоиска);
		СтруктураПараметровКлиента.Вставить("ПараметрыДляОбработкиШтрихкода", ПараметрыДляОбработкиШтрихкода);
		СтруктураПараметровКлиента.Вставить("ВыборКлиента", Истина);
		
		РезультатЗапросаКарт = ЗапроситьКартыССервераЛояльности(СтруктураПараметровКлиента);
		Если РезультатЗапросаКарт.ДанныеКарт.Количество() > 1 Тогда
			ПустойРезультат = Ложь;
			ПоказатьВыборКартКлиентаССервераЛояльности(РезультатЗапросаКарт.ДанныеКарт, Объект.Контрагент);
			ОжидаетсяОбработкаПослеВыбораВладельца = Истина;
		ИначеЕсли РезультатЗапросаКарт.ДанныеКарт.Количество() = 1 Тогда
			ПустойРезультат = Ложь;
			ОбработатьВыборКартыКлиентаСервераЛояльности(РезультатЗапросаКарт.ДанныеКарт[0], ШтрихкодПоиска, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустойРезультат Тогда
		ДобавитьЛокальнуюКартуКонтрагентаПриНеобходимости();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеКартыКлиента(АдресТаблицы, ДанныеКартыКлиента, ЗначенияПоиска)
	
	ТаблицаДанныеКартыКонтрагента = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Если ТаблицаДанныеКартыКонтрагента = Неопределено Тогда
		
		ДанныеКартыКлиента.Карта = "";
		ДанныеКартыКлиента.НомерКарты = "";
		
	ИначеЕсли ТаблицаДанныеКартыКонтрагента.Количество() > 1 Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДанныеКартыКонтрагента Цикл
			ДанныеКарты = Новый Структура("Карта,НомерКарты", Неопределено, "");
			ДанныеКарты.Карта = СтрокаТаблицы.Карта;
			ДанныеКарты.НомерКарты = СтрокаТаблицы.НомерКарты;
			ДанныеПоиска = Новый Структура();
			ДанныеПоиска.Вставить("Владелец", СтрШаблон("%1(%2), %3", Объект.Контрагент, СтрокаТаблицы.НомерКарты, СтрокаТаблицы.НомерТелефона));
			ДанныеПоиска.Вставить("ТипОбъекта", НСтр("ru = 'Карта лояльности'"));
			ДанныеПоиска.Вставить("Остаток", 0);
			ДанныеПоиска.Вставить("ДополнительныеДанные", ДанныеКарты);
			ДанныеПоиска.Вставить("Характеристика", Неопределено);
			ДанныеПоиска.Вставить("Упаковка", Неопределено);
			ДанныеПоиска.Вставить("СерияНоменклатуры", Неопределено);
			
			ЗначенияПоиска.Добавить(ДанныеПоиска);
		КонецЦикла;
		
	ИначеЕсли ТаблицаДанныеКартыКонтрагента.Количество() > 0 Тогда
		ДанныеКартыКлиента.Карта = ТаблицаДанныеКартыКонтрагента[0].Карта;
		ДанныеКартыКлиента.НомерКарты = ТаблицаДанныеКартыКонтрагента[0].НомерКарты;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОписаниеТаблицыДанныеКартыКлиента()
	
	ОписаниеТипаКартаЛояльности = Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ДисконтнаяКартаРМК.Тип);
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	
	ТаблицаДанныеКартыКлиента = Новый ТаблицаЗначений;
	ТаблицаДанныеКартыКлиента.Колонки.Добавить("Карта", ОписаниеТипаКартаЛояльности);
	ТаблицаДанныеКартыКлиента.Колонки.Добавить("НомерКарты", ОписаниеТипаСтрока);
	ТаблицаДанныеКартыКлиента.Колонки.Добавить("НомерТелефона", ОписаниеТипаСтрока);
	
	АдресТаблицыДанныеКлиента = ПоместитьВоВременноеХранилище(ТаблицаДанныеКартыКлиента);
	Возврат АдресТаблицыДанныеКлиента;
	
КонецФункции

&НаКлиенте
Процедура ПлиткаДомойКлиент()
	
	ТекущийПервыйИндексПлитки = 0;
	ЗаполнитьКнопкиПлиток();
	ПересчитатьКоличествоВПлитках();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПродажЛокально()
	ВладелецШтрихкода = Объект.ДисконтнаяКарта;
	НайденнаяКартаЛояльности = Неопределено;
	ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(ВладелецШтрихкода,НайденнаяКартаЛояльности);
	Если НайденнаяКартаЛояльности.Свойство("СуммаПродаж") Тогда
		НайденнаяКартаСуммаПродаж = Формат(НайденнаяКартаЛояльности.СуммаПродаж, "ЧДЦ=2");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаРежимПлиткиИзПалитры()
	ПереключитьНаРежимПлитки(ТипыПостроенияПлитки.ПоПалитре);
КонецПроцедуры

&НаКлиенте
Функция ЭтоРежимВыбораИзплитки()
	Возврат (ОсновнойПодборПлиточный И Не ЗакрыватьПодборПриВыбореТовара);
КонецФункции

&НаКлиенте
Функция ПостроениеВесовойПлиткиВозможно()
	Возврат (ЕстьВесовойТоварВПалитре И (Не РежимПлитки));
КонецФункции

&НаКлиенте
Процедура ПереключитьНаРежимПлиткиВесовогоТовара()
	
	Если ПостроениеВесовойПлиткиВозможно() И (Не ЭтоРежимВыбораИзплитки()) Тогда
		ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		Если ЭтоПродажа Тогда
			ОткрытьПлиточныйИнтерфейс(ТипыПостроенияПлитки.ВесовойТовар);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопкиЗакрытияПлитки()
	ЗначениеВидимости = (РежимПлитки И ТипПостроенияПлитки = ТипыПостроенияПлитки.ВесовойТовар
			И Не ОсновнойПодборПлиточный);
	УстановитьВидимостьЭлементаФормы(Элементы.ЗакрытьПлиточныйИнтерфейс, ЗначениеВидимости);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФокусВПолеВводаСуммыКартой()
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ОбластьОперативногоУправленияЧеком
			И Элементы.ГруппаОплатаКартой.Видимость И Не СенсорныйЭкран Тогда
		ТекущийЭлемент = Элементы.СуммаОплаченоБН;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлиточныйИнтерфейс(НовыйТипПостроенияПлитки)
	
	Если Не РежимПлитки Тогда
		Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления) = Элементы.ПанельУправленияЧеком
			Или Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека) = Элементы.ОбластьОперативногоУправленияЧеком Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТребуетсяПовышениеПрав = Ложь;
	ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав);
	Если Не ТребуетсяПовышениеПрав Тогда
		ОткрытьПлиточныйИнтерфейсКаталогаПродолжение(НовыйТипПостроенияПлитки);
		Если Не РежимПлитки Тогда
			ВернутьсяНаСтраницуСтартаПродажПриНеобходимости();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеВесаОтЭлектронныхВесов(ВесТовара)
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыДоОплаты(ЭтотОбъект)
			Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция Тогда
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
		Если (Не ТекущаяСтрока = Неопределено) И ТекущаяСтрока.Весовой И ТекущаяСтрока.Количество <= 0 Тогда
			УстановитьВесСЭлектронныхВесов(ТекущаяСтрока, ВесТовара)
		ИначеЕсли Не ЕстьНезаполненныеДанные() Тогда
			ПереключитьНаРежимПлиткиВесовогоТовара();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСветовойСигналОбОшибкеНаДисплей()
	ВывестиСветовойСигналНаДисплей("ОшибкаНаРабочемМесте");
КонецПроцедуры

&НаКлиенте
Процедура ПогаситьСветовойСигналОбОшибкеНаДисплее()
	ВывестиСветовойСигналНаДисплей("НеУстановлен");
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСветовойСигналНаДисплей(ИмяСтатуса)
	
	ПараметрыОперации = ОборудованиеДисплеиПокупателяКлиент.ПараметрыОперацииДисплейПокупателя();
	Если ПараметрыОперации.Свойство("СтатусРабочегоМеста") Тогда
		ПолноеИмяСтатуса = СтрШаблон("Перечисление.СтатусРабочегоМестаНаДисплее.%1", ИмяСтатуса);
		СтатусРабочегоМеста = ПредопределенноеЗначение(ПолноеИмяСтатуса);
		ПараметрыОперации.СтатусРабочегоМеста = СтатусРабочегоМеста;
			
		ОборудованиеДисплеиПокупателяКлиент.НачатьВыводСтатусаРабочегоМестаНаДисплейПокупателя(Неопределено,
			УникальныйИдентификатор, Неопределено, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолеВводаСозданияКартыДоступноИВидимо(ПолеВвода)
	РезультатФункции = (ПолеВвода.Доступность И ПолеВвода.Видимость
		И ПолеВвода.Родитель.Доступность И ПолеВвода.Родитель.Видимость);
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура УстановитьАктивностьНаКнопкеОтправкиПробитияЧека()
	
	ТекущаяСтраницаОтправкиЧека = Элементы.ГруппаСтраницыКнопкиОтправитьЧек.ТекущаяСтраница;
	Если ТекущаяСтраницаОтправкиЧека = Элементы.ГруппаСтраницаКнопкаПробитьЧек Тогда
		ТекущийЭлемент = Элементы.ОтправкаПробитьЧек;
	ИначеЕсли ТекущаяСтраницаОтправкиЧека = Элементы.ГруппаСтраницаКнопкаОтправитьЧек Тогда
		ТекущийЭлемент = Элементы.ОтправкаОтправитьЧек;
	Иначе
		ТекущийЭлемент = Элементы.ОтправитьЧек;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоПолучениеСтабильногоВеса(ИмяСобытия, Параметр)
	Возврат (ИмяСобытия = "Weighting" И Параметр.Вес > 0 И Параметр.Стабилизация = Истина);
КонецФункции

&НаКлиенте
Функция РежимДопускаетВыборПодарка()
	Возврат (ЭтоКассирБезПоказаСкидок() Или ВключенаВыдачаПодарковНаКассеСамообслуживания());
КонецФункции

&НаКлиенте
Функция ЭтоКассирБезПоказаСкидок()
	Возврат (НЕ (РежимПоказаСкидок Или РежимКассыСамообслуживания));
КонецФункции

&НаКлиенте
Функция ВключенаВыдачаПодарковНаКассеСамообслуживания()
	Возврат (ВыдаватьПодарокНаКассе И РежимКассыСамообслуживания);
КонецФункции

#КонецОбласти