
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ИнтернетПоддержкаПользователей.Новости
	ЗаголовокНовости = НСтр("ru='Новости: Прайс-лист'");
	НастройкиЗаполнения = Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере", Истина,
		Истина);
	ОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(ЭтотОбъект, "УНФ.Обработка.ПрайсЛистыОрганизации",
		"ФормаПрайсЛистОрганизации", Неопределено, ЗаголовокНовости, Ложь, НастройкиЗаполнения, "ПриОткрытии");
	// Конец ИнтернетПоддержкаПользователей.Новости
	
	УстановитьКэшЗначений();
	
	ИнициализироватьНастройкиОтбораНоменклатурыСКД();
	
	ОткрыватьПрайсЛистОрганизацииКакСписок = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки(
		"ОткрыватьПрайсЛистОрганизацииКакСписок");
	
	Если НЕ Параметры.Свойство("РабочийПрайсЛистОрганизации", РабочийПрайсЛистОрганизации) Тогда
		
		РабочийПрайсЛистОрганизации = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("РабочийПрайсЛистОрганизации");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РабочийПрайсЛистОрганизации) Тогда
		
		ИзменитьОбъектФормыПоСсылке();
		
		КэшЗначений.НеобходимоОбновитьОформление = Объект.МаксимальнаяЦена Или Объект.МинимальнаяЦена
			Или Объект.УсловнаяЦена;
		ИнициализироватьНастройкиКолонокПрайсЛистаСКД();
		
	Иначе
		
		ЗагрузитьТиповыеНастройкиОтбораНоменклатуры();
		ЗагрузитьТиповоеПредставлениеНоменклатуры();
		
		Объект.Автор = Пользователи.АвторизованныйПользователь();
		Объект.Валюта = Константы.НациональнаяВалюта.Получить();
		Объект.УсловнаяЦенаУсловие = Перечисления.ВидСравненияЗначений.Меньше;
		Объект.УдалитьИндивидуальный = Истина;
		
		КэшЗначений.РазмерШапкиТабличногоДокумента = ?(ЗначениеЗаполнено(Объект.Организация), 15, 4);
		
	КонецЕсли;	
		
	Если Объект.ВыводитьДатуФормирования = Ложь Тогда
		// Не используется дата формирования
		ВыводитьДатуФормирования = 0;
		Объект.ДатаФормирования = Дата(1, 1, 1);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаФормирования) Тогда
		// Используется указанная дата
		ВыводитьДатуФормирования = 2;
		
	Иначе
		// Используется текущая дата	
		ВыводитьДатуФормирования = 1;
		Объект.ДатаФормирования = Дата(1, 1, 1);
		
	КонецЕсли;   
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаФормирования", "Доступность", 
		ВыводитьДатуФормирования = 2);
			
	ИмяМакетаСКД = ?(ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") = Истина, 
		"СКД_НоменклатураИХарактеристики", "СКД_Номенклатура");  
			
	СхемаКомпоновкиДанных = Обработки.ПрайсЛистыОрганизации.ПолучитьМакет(ИмяМакетаСКД); 
	
	АдресСхемыКомпоновкиДанных = ПрайсЛистыСлужебный.ИнициализироватьНастройкиОтбораПрайсЛиста(УникальныйИдентификатор);
		
	АдресНастроек = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.Настройки, УникальныйИдентификатор);
	 	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию); 
	
	ЗаполнитьФильтрыИзПараметровФормы();
	
	ИнициализироватьОсновныеФильтрыФормы(Фильтры);
	 
КонецПроцедуры  

&НаСервере 
Процедура ОпределитьСоставОтбораНоменклатуры() 
	
	ТаблицаПризнаковЭлементовОтбора = Новый ТаблицаЗначений;
	ТаблицаПризнаковЭлементовОтбора.Колонки.Добавить("ЭтоГруппа");
				
	мСтрок = Фильтры.НайтиСтроки(Новый Структура("Имя", "ОтборНоменклатура")); 
	
	Если мСтрок.Количество() > 0 Тогда
		
		ТекущееЗначениеОтбора = мСтрок[0]; 	
		Если ТипЗнч(ТекущееЗначениеОтбора.Значение) = Тип("СписокЗначений") Тогда 	
			Для Каждого ЭлементСписка Из ТекущееЗначениеОтбора.Значение Цикл 
				
				Если ЭлементСписка.Значение.ЭтоГруппа Тогда
					// ТекущееЗначениеОтбора - Элемент
					ДобавитьЗначениеПризнакаВТаблицу(ТаблицаПризнаковЭлементовОтбора, Истина)
				Иначе 
					// ТекущееЗначениеОтбора - Группа
					ДобавитьЗначениеПризнакаВТаблицу(ТаблицаПризнаковЭлементовОтбора, Ложь)
				КонецЕсли;  
				
			КонецЦикла;
			
			ТаблицаПризнаковЭлементовОтбора.Свернуть("ЭтоГруппа"); 
			
			Если ТаблицаПризнаковЭлементовОтбора.Количество() = 1 Тогда
				ЗначениеОтбораНоменклатурыЭлемент = НЕ ТаблицаПризнаковЭлементовОтбора[0].ЭтоГруппа;
			Иначе 
				ЗначениеОтбораНоменклатурыЭлемент = Ложь;
			КонецЕсли;
			
		КонецЕсли;  
		
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ДобавитьЗначениеПризнакаВТаблицу(ТаблицаПризнаковЭлементовОтбора, ЭтоГруппа)
	
	СтрокаКоллекции = ТаблицаПризнаковЭлементовОтбора.Добавить(); 
	СтрокаКоллекции.ЭтоГруппа = ЭтоГруппа;  
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости
	
	УправлениеФормойНаКлиенте();
	ЗаполнитьСписокВыбораЭлементовСравненияЦен(); 
	
	НастроитьВнешнийВидПравойПанелиПоЗначениямОтбора();
	ВосстановитьОтборыПрайсЛистаРасширенныйВариант();
	
	Если НЕ КэшЗначений.ЕстьПравоДобавленияНового Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПраваяПанель",	"Доступность", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ПрайсЛисты") Тогда
		
		ПослеВыбораЭлементаНастроекДляЗаполнения(ВыбранноеЗначение, Неопределено);
		
	КонецЕсли;
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.СохранениеПечатнойФормы") Тогда
		
		ОбработатьПараметрыСохранениеПечатнойФормы(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаЦена" Тогда
		
		АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Объект.УдалитьИндивидуальный Тогда
		
		НачатьСохранениеНастроекПрайсЛиста(Отказ, ЗавершениеРаботы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти    


#Область УправлениеФильтрамиНаФорме

&НаСервереБезКонтекста
Процедура ИнициализироватьОсновныеФильтрыФормы(Фильтры) 

	СтрокаТЧ = Фильтры.Добавить();
	СтрокаТЧ.Имя 				= "ОтборНоменклатура";
	СтрокаТЧ.Тип 				= Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	СтрокаТЧ.ИмяЭлемента 		= "ОтборНоменклатура";
	СтрокаТЧ.Обязательный 		= Ложь;
	СтрокаТЧ.Пользовательский 	= Ложь; 
	СтрокаТЧ.ВыборСписка		= Истина;

	СтрокаТЧ = Фильтры.Добавить();
	СтрокаТЧ.Имя 				= "ОтборСклад";
	СтрокаТЧ.Тип 				= Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
	СтрокаТЧ.ИмяЭлемента 		= "ОтборСклад";
	СтрокаТЧ.Обязательный 		= Ложь;
	СтрокаТЧ.Пользовательский 	= Ложь;
	СтрокаТЧ.ВыборСписка		= Истина;

	СтрокаТЧ = Фильтры.Добавить();
	СтрокаТЧ.Имя 				= "ОтборОрганизация";
	СтрокаТЧ.Тип 				= Новый ОписаниеТипов("СправочникСсылка.Организации");
	СтрокаТЧ.ИмяЭлемента 		= "ОтборОрганизация";
	СтрокаТЧ.Обязательный 		= Ложь;
	СтрокаТЧ.Пользовательский 	= Ложь; 
	СтрокаТЧ.ВыборСписка		= Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатУстановкиФильтровРасширенныйВариант(Отбор)
	
	НоменклатураОтборУдален = Истина; 
	
	Для Каждого ТекЭлемент Из Отбор.Элементы Цикл
		// Текущий элемент отбора Группа
		Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда 
			
			Для Каждого ЭлементГруппыОтбора Из ТекЭлемент.Элементы Цикл		
				ОбработатьМеткиЗначенийОтбора(ЭлементГруппыОтбора, НоменклатураОтборУдален);			
			КонецЦикла;   
			
		Иначе
			
			ОбработатьМеткиЗначенийОтбора(ТекЭлемент, НоменклатураОтборУдален);	
		КонецЕсли;
					
	КонецЦикла; 
	
	Если НоменклатураОтборУдален Тогда
		УстановитьПодсказкуВводаПоУмолчаниюНоменклатура();		
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура ОбработатьМеткиЗначенийОтбора(ТекЭлемент, НоменклатураОтборУдален);  
	
	Если ТекЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура") Тогда	
		ОтобразитьМеткиЗначенийОтбора(ТекЭлемент, "ОтборНоменклатура");
		НоменклатураОтборУдален = Ложь;
	КонецЕсли;
	
	Если ТекЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОстаткиСклада") Тогда	
		ОтобразитьМеткиЗначенийОтбора(ТекЭлемент, "ОтборСклад");
	КонецЕсли;  
	
	Если ТекЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОстаткиОрганизации") Тогда
		ОтобразитьМеткиЗначенийОтбора(ТекЭлемент, "ОтборОрганизация");	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьМеткиЗначенийОтбора(ТекЭлемент, ИмяЭлемента) 
	
	ДополнениеНазвания = "";
	
	ОписаниеФильтра = ОписаниеФильтра(Фильтры, "ИмяЭлемента", ИмяЭлемента);
	Если ОписаниеФильтра = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(ТекЭлемент.ПравоеЗначение) = Тип("СписокЗначений") Тогда
		ЗначениеФильтра = ТекЭлемент.ПравоеЗначение.ВыгрузитьЗначения();
	Иначе
		ЗначениеФильтра = ТекЭлемент.ПравоеЗначение;
	КонецЕсли;
	
	ПриИзмененииФильтра(ОписаниеФильтра, ЗначениеФильтра);
	
	Если ИмяЭлемента = "ОтборОрганизация" ИЛИ ИмяЭлемента = "ОтборСклад" Тогда  
		ДополнениеНазвания = НСтр("ru='остатков'");
	КонецЕсли;
		
	Элементы[ИмяЭлемента].ПодсказкаВвода = СтрЗаменить(ИмяЭлемента + " " + ДополнениеНазвания, "Отбор", "") 
		+ " " + Строка(ТекЭлемент.ВидСравнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьМеткиЗначенийОтбора(ТекЭлемент, ИмяЭлемента) 
	
	ОписаниеФильтра = ОписаниеФильтра(Фильтры, "ИмяЭлемента", ИмяЭлемента);
	Если ОписаниеФильтра = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(ТекЭлемент.Значение) = Тип("СписокЗначений") Тогда
		ЗначениеФильтра = ТекЭлемент.Значение.ВыгрузитьЗначения();
	Иначе
		ЗначениеФильтра = ТекЭлемент.Значение;
	КонецЕсли;
	
	ПриИзмененииФильтра(ОписаниеФильтра, ЗначениеФильтра);
	
	Элементы[ИмяЭлемента].ПодсказкаВвода = СтрЗаменить(ИмяЭлемента, "Отбор", "") + " " + Строка(ТекЭлемент.ВидСравнения);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВосстановитьОтборыПрайсЛистаРасширенныйВариант() 
	
	ТаблицаОтборовПрайсЛиста = Объект.ОтборНоменклатуры;
	
	ОтборНоменклатураУстановлен = Ложь; 
	ОтборСкладУстановлен 		= Ложь;
	ОтборОрганизацияУстановлен 	= Ложь;

	Для Каждого ТекЭлемент Из ТаблицаОтборовПрайсЛиста Цикл
		
		Если ТекЭлемент.Имя = "Номенклатура" И ЗначениеЗаполнено(ТекЭлемент.Значение) Тогда	
			ВосстановитьМеткиЗначенийОтбора(ТекЭлемент, "ОтборНоменклатура");
			ОтборНоменклатураУстановлен = Истина;
		КонецЕсли;
			
		Если ТекЭлемент.Имя = "ОстаткиСклада" И ЗначениеЗаполнено(ТекЭлемент.Значение) Тогда
			 ВосстановитьМеткиЗначенийОтбора(ТекЭлемент, "ОтборСклад");
			 ОтборСкладУстановлен = Истина;
		КонецЕсли;  
		
		Если ТекЭлемент.Имя = "ОстаткиОрганизации" И ЗначениеЗаполнено(ТекЭлемент.Значение) Тогда
			 ВосстановитьМеткиЗначенийОтбора(ТекЭлемент, "ОтборОрганизация");
			 ОтборОрганизацияУстановлен = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаОтборовПрайсЛиста.Количество() > 0 Тогда 
		
		ОпределитьСоставОтбораНоменклатуры(); 
		
		УстановитьПодсказкуВводаПоУмолчаниюНоменклатура();
		УстановитьПодсказкуВводаПоУмолчаниюСклад();
		УстановитьПодсказкуВводаПоУмолчаниюОрганизация();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТиповСостоитИзТипа(ОписаниеТипов, Тип)
	
	Возврат ОписаниеТипов.Типы().Количество()=1 И ОписаниеТипов.Типы().Получить(0)=Тип;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппыРодителяОтбора(ИмяОтбора)
	
	Возврат "Группа" + ИмяЭлементаОтбора(ИмяОтбора);	
	
КонецФункции 

//@skip-warning подключаемая процедура

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
    	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_") + 1); 
	ЗначениеУдаляемойМетки = ДанныеМеток[Число(МеткаИД)].Метка; 
	
	УдалитьМеткуОтбора(МеткаИД, Элемент.Имя);
	
	СинхронизироватьОтборСоСхемойКомпоновки("Номенклатура"		, Фильтры[0].Значение, ЗначениеУдаляемойМетки, "УдалениеМетки"); 
	СинхронизироватьОтборСоСхемойКомпоновки("ОстаткиСклада"		, Фильтры[1].Значение, ЗначениеУдаляемойМетки, "УдалениеМетки"); 
	СинхронизироватьОтборСоСхемойКомпоновки("ОстаткиОрганизации", Фильтры[2].Значение, ЗначениеУдаляемойМетки, "УдалениеМетки"); 
	
	УдалитьПустыеЭлементыГруппировокОтбора();	
	ПослеОбновленияНастроекСКД();  
	ОпределитьСоставОтбораНоменклатуры(); 
	
	УстановитьПодсказкуВводаПоУмолчаниюНоменклатура(); 
	УстановитьПодсказкуВводаПоУмолчаниюСклад();
	УстановитьПодсказкуВводаПоУмолчаниюОрганизация();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		Возврат;
	КонецЕсли;    
	
	СтандартнаяОбработка = Ложь;
	ОписаниеФильтра = ОписаниеФильтра(Фильтры, "ИмяЭлемента", Элемент.Имя);
	Если ОписаниеФильтра = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПриИзмененииФильтра(ОписаниеФильтра, ВыбранноеЗначение); 

КонецПроцедуры

//@skip-warning подключаемая процедура

&НаКлиенте
Процедура ПриИзмененииФильтра(ОписаниеФильтра, Значение)
	
	Если Значение = Неопределено И ОписаниеФильтра.ВыборСписка Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Значение) <> Тип("Массив") Тогда 
		МассивЗначений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Значение);
	Иначе
		МассивЗначений = Значение;
	КонецЕсли;
	
	Для каждого ВыбранноеЗначение Из МассивЗначений Цикл
		
		Если ОписаниеФильтра.ЭтоПараметр Тогда
			ОписаниеФильтра.Значение = ВыбранноеЗначение;
			УстановитьПараметр(ОписаниеФильтра.Имя, ОписаниеФильтра.Значение);
		ИначеЕсли НЕ ОписаниеФильтра.ВыборСписка Тогда
			ОписаниеФильтра.Значение = ?(ЗначениеЗаполнено(ВыбранноеЗначение), ВыбранноеЗначение, Неопределено);
			УстановитьФильтр(ОписаниеФильтра.Имя, ОписаниеФильтра.Значение, ОписаниеФильтра.Пользовательский);
		Иначе
			Если ОписаниеТиповСостоитИзТипа(ОписаниеФильтра.Тип, Тип("Булево")) Тогда
				ОписаниеФильтра.Значение = ОписаниеФильтра.ВыбранноеЗначениеБулево;
			Иначе
				Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
					Продолжить;
				КонецЕсли; 
				
				Если ТипЗнч(ОписаниеФильтра.Значение) <> Тип("СписокЗначений") И ОписаниеФильтра.Значение = ВыбранноеЗначение Тогда
					Продолжить;
				КонецЕсли; 
				
				Если ТипЗнч(ОписаниеФильтра.Значение) <> Тип("СписокЗначений") Тогда
					Список = Новый СписокЗначений;
					Если ЗначениеЗаполнено(ОписаниеФильтра.Значение) Тогда
						Список.Добавить(ОписаниеФильтра.Значение);
					КонецЕсли; 
					Список.Добавить(ВыбранноеЗначение);
					ОписаниеФильтра.Значение = Список;
				ИначеЕсли ОписаниеФильтра.Значение.НайтиПоЗначению(ВыбранноеЗначение)=Неопределено Тогда
					ОписаниеФильтра.Значение.Добавить(ВыбранноеЗначение);	
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(ОписаниеФильтра.ВыбранноеЗначение) Тогда
					ОписаниеФильтра.ВыбранноеЗначение = Неопределено;
				КонецЕсли; 
			КонецЕсли;   
			
			УстановитьМеткуИОтбор(ОписаниеФильтра.Имя, ВыбранноеЗначение);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры  

&НаСервере
Процедура УстановитьМеткуИОтбор(ИмяФильтра, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", ИмяФильтра);
	Если ОписаниеФильтра = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПредставлениеЗначения = "" Тогда
		ПредставлениеЗначения = Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Булево") Тогда
		РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ОписаниеФильтра.Имя, ИмяГруппыРодителяОтбора(ОписаниеФильтра.Имя), 
			ВыбранноеЗначение, ПредставлениеЗначения, , , , , , ИмяФильтра);
	КонецЕсли; 
			
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД, Знач ИмяЭлемента)
	
	СтрокаМеток = ДанныеМеток[Число(МеткаИД)];
	ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", СтрокаМеток.ИмяПоляОтбора);
	Если ОписаниеФильтра = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если СтрокаМеток.Метка = ОписаниеФильтра.Значение
		Или ТипЗнч(СтрокаМеток.Метка) = Тип("СписокЗначений")
		И ТипЗнч(ОписаниеФильтра.Значение) = Тип("СписокЗначений")
		И ОбщегоНазначения.КоллекцииИдентичны(СтрокаМеток.Метка, ОписаниеФильтра.Значение) Тогда
		ОписаниеФильтра.Значение = Неопределено;
		УстановитьФильтр(СтрокаМеток.ИмяПоляОтбора, , ОписаниеФильтра.Пользовательский);
	ИначеЕсли ТипЗнч(ОписаниеФильтра.Значение) = Тип("СписокЗначений") Тогда 
		ЭлементСписка = ОписаниеФильтра.Значение.НайтиПоЗначению(СтрокаМеток.Метка);
		Если ЭлементСписка <> Неопределено Тогда
			ОписаниеФильтра.Значение.Удалить(ЭлементСписка);
		КонецЕсли;
		Если ОписаниеФильтра.Значение.Количество() > 0 Тогда
			УстановитьФильтр(СтрокаМеток.ИмяПоляОтбора, ОписаниеФильтра.Значение, ОписаниеФильтра.Пользовательский);
		Иначе
			ОписаниеФильтра.Значение = Неопределено;
			УстановитьФильтр(СтрокаМеток.ИмяПоляОтбора, , ОписаниеФильтра.Пользовательский);
		КонецЕсли; 
	КонецЕсли; 
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Неопределено, МеткаИД, , , Ложь); 
		
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметр(ИмяФильтра, Знач Значение)
	
	ПараметрКомпоновки = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяФильтра));
	ПараметрКомпоновки.Значение = Значение;
	ПараметрКомпоновки.Использование = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяЭлементаОтбора(ИмяОтбора)
	
	ЗаменяемыеСимволы = ".()[] <>""";
	ИмяЭлемента = ИмяОтбора;
	Для ии = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Символ = Сред(ЗаменяемыеСимволы, ии, 1);
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента, Символ, "_");
	КонецЦикла;  
	
	Возврат ИмяЭлемента;	
	
КонецФункции 

 &НаСервере
Процедура ОбновитьМеткиФильтров()
	
	ДанныеМеток.Очистить();
	Для Каждого СтрокаТаблицы Из Фильтры Цикл  
		
		Если НЕ СтрокаТаблицы.ВыборСписка Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Значение) ИЛИ ТипЗнч(СтрокаТаблицы.Значение) <> Тип("СписокЗначений") Тогда
			Продолжить;
		КонецЕсли;   
		
		Если СтрокаТаблицы.ПоказатьСписокЗначенийОднимОтбором Тогда
			НоваяМетка = ДанныеМеток.Добавить();
			НоваяМетка.Метка = СтрокаТаблицы.Значение;
			НоваяМетка.ИмяПоляОтбора = СтрокаТаблицы.Имя;
			НоваяМетка.ИмяГруппыРодителя = ИмяГруппыРодителяОтбора(СтрокаТаблицы.Имя);
			НоваяМетка.ПредставлениеМетки = СтрШаблон(НСтр("ru='%1 элементов'"), СтрокаТаблицы.Значение.Количество());
		Иначе
			Для Каждого Значение Из СтрокаТаблицы.Значение Цикл
				НоваяМетка = ДанныеМеток.Добавить();
				НоваяМетка.Метка = Значение.Значение;
				НоваяМетка.ИмяПоляОтбора = СтрокаТаблицы.Имя;
				НоваяМетка.ИмяГруппыРодителя = ИмяГруппыРодителяОтбора(СтрокаТаблицы.Имя);
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОписаниеМетки Из ДанныеМеток Цикл 
		
		НавигационнаяСсылкаФС = РаботаСОтборами.ПолучитьНачалоИмениМетки("ДанныеМеток")
			+ ОписаниеМетки.ПолучитьИдентификатор(); 
			
		Если ТипЗнч(ОписаниеМетки.Метка) = Тип("СписокЗначений") И ЗначениеЗаполнено(ЗаголовокПодборкиСпискаНоменклатуры) Тогда
			ПредставлениеМетки = ЗаголовокПодборкиСпискаНоменклатуры;
		Иначе
			ПредставлениеМетки = ФорматированнаяСтрокаПредставленияМетки(Лев(Строка(ОписаниеМетки.Метка), 21),
				НавигационнаяСсылкаФС);
			КонецЕсли;  
			
		ОписаниеМетки.ПредставлениеМетки = ПредставлениеМетки;
		ОписаниеМетки.ИмяГруппыРодителя = ИмяГруппыРодителяОтбора(ОписаниеМетки.ИмяПоляОтбора);
	КонецЦикла;
	
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СброситьЗначенияФильтров()
	
	// Сбросим значения фильтров
	Для Каждого СтрокаФильтр Из Фильтры Цикл 
		СтрокаФильтр.Значение = Неопределено;
	КонецЦикла;	
	
	// Очистим группы "старых" меток на форме
	НомерМетки = 0;
	Пока НомерМетки <= ДанныеМеток.Количество() - 1 Цикл 
		
		ИмяГруппыМетки = РаботаСОтборами.ПолучитьНачалоИмениМетки("ДанныеМеток") + "ВспомогательнаяГруппа_" + НомерМетки; 
		
		ТекущаяГруппаФормыМетка = Элементы[ИмяГруппыМетки];
		Элементы.Удалить(ТекущаяГруппаФормыМетка);
		
		НомерМетки = НомерМетки + 1;
	КонецЦикла;
	
	// Очистим данные меток
	ДанныеМеток.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ФорматированнаяСтрокаПредставленияМетки(НаименованиеМетки, НавигационнаяСсылкаФС)
	
	Цвет = ЦветаСтиля.ТекстВторостепеннойНадписи;
	Шрифт = ШрифтыСтиля.ШрифтПравойПанелиОтборов;
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НаименованиеМетки + " ", Шрифт, Цвет));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.ОчиститьЗначение12х12, , , , НавигационнаяСсылкаФС));
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);	// АПК:1356 Используется локализованное имя метки + картинка
	
КонецФункции

&НаСервере
Процедура ЗаполнитьФильтрыИзПараметровФормы()
	
	// Организация
	Если Параметры.Свойство("Организация") Тогда 
		
		ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", "ОтборОрганизация"); 
		
		Если ОписаниеФильтра <> Неопределено Тогда
			ОписаниеФильтра.Значение = Параметры.Организация;
			ОписаниеФильтра.ВыбранноеЗначение = Параметры.Организация;
			УстановитьФильтр(ОписаниеФильтра.Имя, Параметры.Организация);
		КонецЕсли; 
		
	КонецЕсли;
	
	// Склад
	Если Параметры.Свойство("Склад") Тогда
		ОтборСклад = Параметры.Склад;
	КонецЕсли;
	
	// Номенклатура
	Если Параметры.Свойство("Номенклатура") Тогда 
		
		ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", "ОтборНоменклатура");
		ОписаниеФильтра.ВыборСписка = Истина;
		ОписаниеФильтра.ПоказатьСписокЗначенийОднимОтбором = Истина;
		
		Если ОписаниеФильтра <> Неопределено Тогда   
			
			ОписаниеФильтра.Значение = Параметры.Номенклатура;
			УстановитьФильтр(ОписаниеФильтра.Имя, ОписаниеФильтра.Значение, ОписаниеФильтра.Пользовательский);
			
			ОбновитьМеткиФильтров();
		КонецЕсли;  
		
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеФильтра(Фильтры, КритерийПоиска, Значение)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить(КритерийПоиска, Значение); 
	
	СтрокиФильтры = Фильтры.НайтиСтроки(СтруктураОтбора); 	
	Если СтрокиФильтры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат СтрокиФильтры[0];
	
КонецФункции 

&НаСервере
Процедура УстановитьФильтр(Поле, Знач Значение = Неопределено, Пользовательский = Ложь)
	
	НайденныеЭлементы = Новый Массив;
	
	ПолеКД = Новый ПолеКомпоновкиДанных(Поле);
	ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеКД); 
	
	Если ДоступноеПоле = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	Для Каждого ЭлементОтбор Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если НЕ ТипЗнч(ЭлементОтбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ЭлементОтбор.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЭлементОтбор.ЛевоеЗначение = ПолеКД Тогда
			Продолжить;
		КонецЕсли;
		НайденныеЭлементы.Добавить(ЭлементОтбор);
	КонецЦикла;
	
	Если Значение = Неопределено Тогда
		Для каждого ЭлементОтбор Из НайденныеЭлементы Цикл
			Если Пользовательский Тогда
				КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбор);
			Иначе
				ЭлементОтбор.Использование = Ложь;
				Если ТипЗнч(ЭлементОтбор.ПравоеЗначение) = Тип("СписокЗначений") Тогда
					ЭлементОтбор.ПравоеЗначение = Новый СписокЗначений;
				Иначе
					ЭлементОтбор.ПравоеЗначение = Неопределено;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
	Иначе 
		
		КоличествоЭлементов = НайденныеЭлементы.Количество();
		НовыйВидСравнения = ?(ТипЗнч(Значение) = Тип("СписокЗначений"), ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, 
			ВидСравненияКомпоновкиДанных.ВИерархии);
		Если КоличествоЭлементов=0 Тогда
			НайденныйЭлемент = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Иначе
			// Оставим только первый элемент
			Для ии = 1 По КоличествоЭлементов - 1 Цикл
				КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(НайденныеЭлементы[ии]);
			КонецЦикла;
			НайденныйЭлемент = НайденныеЭлементы[0];
		КонецЕсли;
		НайденныйЭлемент.ЛевоеЗначение 	= ПолеКД;
		НайденныйЭлемент.ВидСравнения 	= НовыйВидСравнения;
		НайденныйЭлемент.ПравоеЗначение = Значение;
		НайденныйЭлемент.Использование 	= Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИзмененияЭлементовОтбораНаФорме

&НаКлиенте
Процедура СинхронизироватьОтборСоСхемойКомпоновки(ИмяПолеОтбор, ЗначениеОтбор, ЗначениеУдаляемойМетки = Неопределено, 
	РежимОтбора = Неопределено)
	
	Если ИмяПолеОтбор = "Номенклатура" И ТипЗнч(ЗначениеУдаляемойМетки) <> Тип("СправочникСсылка.Номенклатура") 
		И РежимОтбора = "УдалениеМетки" Тогда
		Возврат;
	ИначеЕсли ИмяПолеОтбор = "ОстаткиСклада" И ТипЗнч(ЗначениеУдаляемойМетки) <> Тип("СправочникСсылка.СтруктурныеЕдиницы") 
		И РежимОтбора = "УдалениеМетки" Тогда
		Возврат;
	ИначеЕсли ИмяПолеОтбор = "ОстаткиОрганизации" И ТипЗнч(ЗначениеУдаляемойМетки) <> Тип("СправочникСсылка.Организации") 
		И РежимОтбора = "УдалениеМетки" Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыОтбора 			= НастройкиОтбораНоменклатуры.Настройки.Отбор.Элементы; 
	НайденныйОтбор 			= Неопределено;   
	ИмяПолеТекОтбор 		= СтрЗаменить(ИмяПолеОтбор, "_", ".");
	ПолеКомпоновкиДанных 	= Новый ПолеКомпоновкиДанных(ИмяПолеТекОтбор); 
	ЭлементОтборВГруппе  	= Ложь;
	
	// Выполним поиск поля отбора среди элементов
	Для Каждого ТекЭлемент Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(ТекЭлемент) = Тип("ЭлементОтбораКомпоновкиДанных") И ТекЭлемент.ЛевоеЗначение = ПолеКомпоновкиДанных Тогда 
			
			// Текущий элемент отбора - Элемент
			НайденныйОтбор = ТекЭлемент;
			Прервать;
			
		ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			// Текущий элемент отбора - Группа
			ЭлементыГруппыОтбора = ТекЭлемент.Элементы;	
			Для Каждого ТекЭлементГруппы Из ЭлементыГруппыОтбора Цикл  
				
				Если ТипЗнч(ТекЭлементГруппы.ПравоеЗначение) <> Тип("СписокЗначений") Тогда
					// ПравоеЗначение отбора для сравнения - ссылка на элемент справочника 
					
					Если ТипЗнч(ТекЭлементГруппы) = Тип("ЭлементОтбораКомпоновкиДанных") 
						И ТекЭлементГруппы.ЛевоеЗначение = ПолеКомпоновкиДанных 
						И ТекЭлементГруппы.ПравоеЗначение = ЗначениеУдаляемойМетки Тогда 
						
						ЭлементОтборВГруппе = Истина;
											
						НайденныйОтбор = ТекЭлементГруппы;		
						Прервать;
						
					КонецЕсли; 
					
				Иначе   
					
					// ПравоеЗначение отбора для сравнения - список значений
					Для Каждого ЭлементСписка Из ТекЭлементГруппы.ПравоеЗначение Цикл
						Если ЭлементСписка.Значение = ЗначениеУдаляемойМетки Тогда 
							ЭлементОтборВГруппе = Истина;
											
							НайденныйОтбор = ТекЭлементГруппы;	
							Прервать;    
							
						КонецЕсли;
					КонецЦикла;	
					
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ЭлементОтборВГруппе Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла; 
	
	// Если после обхода всех элементов отбора поле - не найдено, добавляем его первым элементом.
	Если НайденныйОтбор = Неопределено Тогда
		НайденныйОтбор = ЭлементыОтбора.Вставить(0, Тип("ЭлементОтбораКомпоновкиДанных")); 
		НайденныйОтбор.ЛевоеЗначение = ПолеКомпоновкиДанных; 
	КонецЕсли; 
	
	Если ЗначениеУдаляемойМетки <> Неопределено И ТипЗнч(НайденныйОтбор.ПравоеЗначение) = Тип("СписокЗначений") 
		И РежимОтбора = "УдалениеМетки" Тогда   
		
		ЭлементСпискаКУдалению = НайденныйОтбор.ПравоеЗначение.НайтиПоЗначению(ЗначениеУдаляемойМетки);
		Если ЭлементСпискаКУдалению <> Неопределено Тогда
			НайденныйОтбор.ПравоеЗначение.Удалить(ЭлементСпискаКУдалению);	
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(НайденныйОтбор.ПравоеЗначение) Тогда		
			УдалитьЭлементОтбораПоУсловию(НайденныйОтбор, ЭлементыОтбора, ЭлементыГруппыОтбора, ЭлементОтборВГруппе) 	
		КонецЕсли;
		
		УстановитьВидСравненияПоУсловию(НайденныйОтбор, ИмяПолеОтбор); 
	
		Возврат;
		
	ИначеЕсли ЗначениеУдаляемойМетки <> Неопределено И ТипЗнч(НайденныйОтбор.ПравоеЗначение) <> Тип("СписокЗначений") 
		И РежимОтбора = "УдалениеМетки" Тогда 
		
			УдалитьЭлементОтбораПоУсловию(НайденныйОтбор, ЭлементыОтбора, ЭлементыГруппыОтбора, ЭлементОтборВГруппе);   
			Возврат; 
			
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеОтбор) = Тип("СписокЗначений") Тогда 
		УстановитьВидСравненияПоУсловию(НайденныйОтбор, ИмяПолеОтбор); 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗначениеОтбор) Тогда	
		Если ИмяПолеОтбор = "Номенклатура" Тогда
			ЗначениеОтбор = Фильтры[0].Значение;   
		ИначеЕсли ИмяПолеОтбор = "ОстаткиСклада" Тогда	
			ЗначениеОтбор = Фильтры[1].Значение; 
		ИначеЕсли ИмяПолеОтбор = "ОстаткиОрганизации" Тогда	
			ЗначениеОтбор = Фильтры[2].Значение; 
		КонецЕсли; 		
	КонецЕсли;
	
	НайденныйОтбор.ПравоеЗначение 	= ЗначениеОтбор;
	НайденныйОтбор.Использование 	= Истина;    
	
	Если НЕ ЗначениеЗаполнено(НайденныйОтбор.ПравоеЗначение) Тогда		
		УдалитьЭлементОтбораПоУсловию(НайденныйОтбор, ЭлементыОтбора, ЭлементыГруппыОтбора, ЭлементОтборВГруппе);	
	КонецЕсли;
		
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьВидСравненияПоУсловию(НайденныйОтбор, ИмяПолеОтбор)
	
	Если НайденныйОтбор.ПравоеЗначение <> Неопределено Тогда
		
		Если ИмяПолеОтбор = "Номенклатура" И ТипЗнч(НайденныйОтбор.ПравоеЗначение) = Тип("СписокЗначений") Тогда
			Если НайденныйОтбор.ПравоеЗначение.Количество() < 2 Тогда 
				НайденныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
			Иначе
				НайденныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;	
			КонецЕсли;
		Иначе  
			Если ТипЗнч(НайденныйОтбор.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				Если НайденныйОтбор.ПравоеЗначение.Количество() < 2 Тогда 
					НайденныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;  
				Иначе
					НайденныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;  
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементОтбораПоУсловию(НайденныйОтбор, ЭлементыОтбора, ЭлементыГруппыОтбора, ЭлементОтборВГруппе)
	
	Если ЭлементОтборВГруппе Тогда 
		ЭлементыГруппыОтбора.Удалить(НайденныйОтбор);  		
	Иначе		
		ЭлементыОтбора.Удалить(НайденныйОтбор); 		
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеЭлементыГруппировокОтбора() 
	
	ЭлементыОтбора = НастройкиОтбораНоменклатуры.Настройки.Отбор.Элементы; 

	Если ЭлементыОтбора.Количество() > 0 Тогда
	
		ТекущийИндекс = ЭлементыОтбора.Количество() - 1;
		Пока ТекущийИндекс >= 0 Цикл    
			
			ТекЭлементОтбора = ЭлементыОтбора.Получить(ТекущийИндекс);	
			Если ТипЗнч(ТекЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
				И ТекЭлементОтбора.Элементы.Количество() = 0 Тогда 
				
				ЭлементыОтбора.Удалить(ТекЭлементОтбора); 			
			КонецЕсли; 
			
			ТекущийИндекс = ТекущийИндекс - 1;  
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	ОбработатьВыборЭлементаОтбора(Элемент, "Номенклатура", ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры   

&НаКлиенте
Процедура ОтборСкладОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) 
	
	ОбработатьВыборЭлементаОтбора(Элемент, "ОстаткиСклада", ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры  

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) 
	
	 ОбработатьВыборЭлементаОтбора(Элемент, "ОстаткиОрганизации", ВыбранноеЗначение, СтандартнаяОбработка);
	 
КонецПроцедуры  

&НаКлиенте
Процедура ОбработатьВыборЭлементаОтбора(Элемент, ИмяПолеОтбор, ВыбранноеЗначение, СтандартнаяОбработка) 
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	ОписаниеФильтра = ОписаниеФильтра(Фильтры, "ИмяЭлемента", Элемент.Имя);
	Если ОписаниеФильтра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииФильтра(ОписаниеФильтра, ВыбранноеЗначение);
	
	СинхронизироватьОтборСоСхемойКомпоновки(ИмяПолеОтбор, ОписаниеФильтра.Значение, Неопределено, Неопределено); 	
	ПослеОбновленияНастроекСКД();   
	
	Если ИмяПолеОтбор = "Номенклатура" Тогда  
		ОпределитьСоставОтбораНоменклатуры();
		УстановитьПодсказкуВводаПоУмолчаниюНоменклатура();
	КонецЕсли;

	Если ИмяПолеОтбор = "ОстаткиСклада" Тогда
		УстановитьПодсказкуВводаПоУмолчаниюСклад();
	КонецЕсли;

	Если ИмяПолеОтбор = "ОстаткиОрганизации" Тогда
		УстановитьПодсказкуВводаПоУмолчаниюОрганизация();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстановитьПодсказкиВвода 

&НаКлиенте
Процедура УстановитьПодсказкуВводаПоУмолчаниюНоменклатура()
	
	Если ЗначениеОтбораНоменклатурыЭлемент = Истина Тогда
		
		Если Фильтры[0].Значение <> Неопределено Тогда
			
			Если Фильтры[0].Значение.Количество() = 1 Тогда 
				Элементы["ОтборНоменклатура"].ПодсказкаВвода = НСтр("ru = 'Номенклатура Равно'");
			ИначеЕсли Фильтры[0].Значение.Количество() > 1 Тогда
				Элементы["ОтборНоменклатура"].ПодсказкаВвода = НСтр("ru = 'Номенклатура В списке'");
			Иначе
				Элементы["ОтборНоменклатура"].ПодсказкаВвода = НСтр("ru = 'Номенклатура В группе'");
			КонецЕсли;
			
			Возврат;

		КонецЕсли;
		
	КонецЕсли;	
	
	Если Фильтры[0].Значение <> Неопределено И Фильтры[0].Значение.Количество() > 1 Тогда
		Элементы["ОтборНоменклатура"].ПодсказкаВвода = НСтр("ru = 'Номенклатура В группе из списка'");
	Иначе	
		Элементы["ОтборНоменклатура"].ПодсказкаВвода = НСтр("ru = 'Номенклатура В группе'");
	КонецЕсли;
		
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьПодсказкуВводаПоУмолчаниюСклад()
		
	Если Фильтры[1].Значение <> Неопределено И Фильтры[1].Значение.Количество() > 1 Тогда
		Элементы["ОтборСклад"].ПодсказкаВвода = НСтр("ru = 'Склад остатков В списке'"); 
	Иначе
		Элементы["ОтборСклад"].ПодсказкаВвода = НСтр("ru = 'Склад остатков Равно'");
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура УстановитьПодсказкуВводаПоУмолчаниюОрганизация()
	
	Если Фильтры[2].Значение <> Неопределено И Фильтры[2].Значение.Количество() > 1 Тогда
		Элементы["ОтборОрганизация"].ПодсказкаВвода = НСтр("ru = 'Организация остатков В списке'"); 
	Иначе
		Элементы["ОтборОрганизация"].ПодсказкаВвода = НСтр("ru = 'Организация остатков Равно'");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УправлениеПравойПанелью

&НаКлиенте
Процедура НастроитьВнешнийВидПравойПанелиПоЗначениямОтбора()
	
	КоличествоУстановленныхФлагов 	= Объект.ИсключитьПустыеВидыЦен + Объект.НоменклатураБезЦен + Объект.ФормироватьПоНаличию;
	КоличествоУстановленныхОтборов 	= Объект.ОтборНоменклатуры.Количество();
	
	Если КоличествоУстановленныхФлагов + КоличествоУстановленныхОтборов > 0 Тогда
		УстановитьВидимостьПравойПанели(Истина); 
	Иначе
		УстановитьВидимостьПравойПанели(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПравойПанели(ИспользоватьВидимостьПоУмолчанию = Неопределено) 
	
	Если ИспользоватьВидимостьПоУмолчанию <> Неопределено Тогда 	
		Элементы.ГруппаСтраницы.Видимость 					= ИспользоватьВидимостьПоУмолчанию;  
		Элементы.ГруппаРазвернуть.Видимость 				= НЕ ИспользоватьВидимостьПоУмолчанию;
		Элементы.ГруппаКнопкаСохранитьНастройки.Видимость 	= ИспользоватьВидимостьПоУмолчанию; 		
	Иначе	
		Элементы.ГруппаСтраницы.Видимость 					= Не Элементы.ГруппаСтраницы.Видимость;  
		Элементы.ГруппаРазвернуть.Видимость 				= Не Элементы.ГруппаСтраницы.Видимость;
		Элементы.ГруппаКнопкаСохранитьНастройки.Видимость 	= Элементы.ГруппаСтраницы.Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьЦеныНажатие(Элемент)
	
	УстановитьВидимостьПравойПанели();

КонецПроцедуры

&НаКлиенте
Процедура СвернутьКолонкиНажатие(Элемент) 
	
	УстановитьВидимостьПравойПанели();
		
КонецПроцедуры

&НаКлиенте
Процедура СвернутьКалендарьНажатие(Элемент) 
	
	УстановитьВидимостьПравойПанели();
	
КонецПроцедуры  

&НаКлиенте
Процедура ДекорацияРазвернутьКалендарьНажатие(Элемент)
	
	УстановитьВидимостьПравойПанели();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПрайсЛистКартинкаШиринаПриИзменении(Элемент)
	
	Если Объект.ИзменятьРазмерПропорционально И Пропорция <> 0 Тогда
		
		Объект.КартинкаВысота = Объект.КартинкаШирина / Пропорция;
		
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ПрайсЛистКартинкаШиринаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПересчитатьПропорцию("КартинкаШирина", "КартинкаВысота");
	
	Объект.КартинкаШирина = Число(Текст);
	
КонецПроцедуры

 &НаКлиенте
Процедура ПересчитатьПропорцию(Делимое, Делитель)
	Если Объект.ИзменятьРазмерПропорционально И Объект[Делитель] <> 0 Тогда
		Пропорция = Объект[Делимое] / Объект[Делитель];
	Иначе
		Пропорция = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистКартинкаВысотаПриИзменении(Элемент)
	
	Если Объект.ИзменятьРазмерПропорционально И Пропорция <> 0 Тогда
		
		Объект.КартинкаШирина = Объект.КартинкаВысота / Пропорция;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистКартинкаВысотаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПересчитатьПропорцию("КартинкаВысота", "КартинкаШирина");
	
	Объект.КартинкаВысота = Число(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаФормированияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДатаФормированияНажатиеЗавершение", ЭтотОбъект);            
	
	ПоказатьВводДаты(ОписаниеОповещения, Объект.ДатаФормирования, НСтр("ru ='Дата формирования прайс-листа'"), ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПериодНадписьНажатиеЗавершение", ЭтотОбъект, Параметры);
	
	ПоказатьВводДаты(Оповещение, Объект.ПериодЦен, НСтр("ru = 'На дату'"), ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНадписьНажатиеЗавершение(НовыйПериод, ДополнительныеПараметры) Экспорт
	
	Если НовыйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПериодЦен = ?(НовыйПериод <> Дата(1, 1, 1), КонецДня(НовыйПериод), Дата(1, 1, 1)); 
	
	ОбновитьПредставлениеПериода(НовыйПериод);
		
КонецПроцедуры 

&НаКлиенте
Процедура ДатаФормированияНажатиеЗавершение(НовыйПериод, ДополнительныеПараметры) Экспорт
	
	Если НовыйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаФормирования = КонецДня(НовыйПериод);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеПериода(ПериодОтчета)
	
	Если НЕ ЗначениеЗаполнено(ПериодОтчета) Тогда
		ПредставлениеПериодаОтбор = НСтр("ru = 'Период: не задан'");
	Иначе 
		
		ПредставлениеПериода = ОтчетыУНФКлиентСервер.ПредставлениеПериодаВЗаголовке("НаДату", Дата(1, 1, 1), 
			ПериодОтчета, Ложь);
			
		ПредставлениеПериодаОтбор = НСтр("ru = 'цены на'") + " " + ПредставлениеПериода;
	КонецЕсли;
	
	ПериодНадпись = ПредставлениеПериодаОтбор;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКолонку(Команда) 
	
	ОткрытьФормуСоставРеквизитов("ГруппаСхема"); 

КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьПредыдущийВариантФормы(Команда)
	
	Закрыть();
	ОткрытьФорму("Обработка.ПрайсЛистыОрганизации.Форма.УдалитьФормаПрайсЛистОрганизации"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиКолонокСЦенамиПриИзменении(Элемент)
	
	Объект.НазваниеЦеныПредставлением = (ЗаголовкиКолонокСЦенами = 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьДатуФормированияПриИзменении(Элемент)
		
	Если ВыводитьДатуФормирования = 1 Тогда	 
		
		Объект.ДатаФормирования = Дата(1, 1, 1); 	
	    Объект.ВыводитьДатуФормирования = Истина;
		
	ИначеЕсли ВыводитьДатуФормирования = 0 Тогда 
		
		Объект.ДатаФормирования = Дата(1, 1, 1); 
		Объект.ВыводитьДатуФормирования = Ложь; 
		
	Иначе
		
		Объект.ДатаФормирования = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса()); 
		Объект.ВыводитьДатуФормирования = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаФормирования", "Доступность", ВыводитьДатуФормирования = 2); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыЦенПриИзменении(Элемент) 
	
	УстановитьСвойстваЭлементовДополнительногоОтбора();
	УстановитьСвойстваЭлементовПоВидуЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныеФильтрыНажатие(Элемент) 
		
	ОткрытьФормуСоставРеквизитов("ГруппаФильтры");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыЦенВидЦенПриИзменении(Элемент) 
	
	ТекущиеДанные = Элементы.ВидыЦен.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ВыполнитьПакетнуюКоманду(СтрокаПоиска) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИскатьСтрокуВТаблице(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочийПрайсЛистОрганизацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(РабочийПрайсЛистОрганизации) Тогда
		
		РабочийПрайсЛистОрганизации = Объект.Ссылка;
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресСхемыКомпоновкиДанныхКолонок) Тогда
		ИнициализироватьНастройкиКолонокПрайсЛистаСКД();
	КонецЕсли;
	
	НовыеДанныеЭлементаСправочника = ОбъектВСтруктуру();
	ИзменитьОбъектФормыПоСсылке(НовыеДанныеЭлементаСправочника);
	
	УправлениеФормойНаКлиенте();
	
	СброситьЗначенияФильтров();
	ВосстановитьОтборыПрайсЛистаРасширенныйВариант();

	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПечатиПрайсЛистаПриИзменении(Элемент)
	
	ПриИзмененииВариантаПечатиПрайсЛиста();
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияСодержимогоПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРасчетаКурсаВалютыПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура МаксимальнаяЦенаПриИзменении(Элемент)
	
	Если Объект.МаксимальнаяЦена Тогда
		
		ВыключитьКонкурирующиеУсловия(Элемент.Имя);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЦенаПоУсловию", "Доступность", Объект.УсловнаяЦена);
	УстановитьСвойстваЭлементовГруппыУсловнойЦены();
	
	УстановитьСвойстваГруппыОформление();
	АктуальностьПрайсЛиста("OUTDATED", Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МинимальнаяЦенаПриИзменении(Элемент)
	
	Если Объект.МинимальнаяЦена Тогда
		
		ВыключитьКонкурирующиеУсловия(Элемент.Имя);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЦенаПоУсловию", "Доступность", Объект.УсловнаяЦена);
	УстановитьСвойстваЭлементовГруппыУсловнойЦены();
	
	УстановитьСвойстваГруппыОформление();
	АктуальностьПрайсЛиста("OUTDATED", Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловнаяЦенаПриИзменении(Элемент)
	
	Если Объект.УсловнаяЦена Тогда
		
		ВыключитьКонкурирующиеУсловия(Элемент.Имя);
		
	Иначе
		
		СравнениеВыключилиУсловнаяЦена();
		
		АктуальностьПрайсЛиста("OUTDATED", Ложь, Истина);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЦенаПоУсловию", "Доступность", Объект.УсловнаяЦена);
	
	УстановитьСвойстваЭлементовГруппыУсловнойЦены();
	
	УстановитьСвойстваГруппыОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловнаяЦенаУсловиеПриИзменении(Элемент)
	
	УсловияСИнтервалами = Новый Массив(2);
	УсловияСИнтервалами[0] = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.ВИнтервале");
	УсловияСИнтервалами[1] = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.ВИнтервалеВключая");
	
	Если УсловияСИнтервалами.Найти(Объект.УсловнаяЦенаУсловие) = Неопределено Тогда
		
		Объект.УсловнаяЦенаЗначениеДо = 0;
		
	КонецЕсли;
	
	УстановитьСвойстваЭлементовГруппыУсловнойЦены();
	
	АктуальностьПрайсЛиста("OUTDATED", Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловнаяЦенаЗначениеПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловнаяЦенаЗначениеДоПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияСоставаРеквизитов(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда	
		Возврат;	
	КонецЕсли;  
		
	СброситьЗначенияФильтров();
	ОбработатьРезультатУстановкиФильтровРасширенныйВариант(РезультатЗакрытия.НастройкиСКД.Отбор);	
	
	Объект.ПредставлениеНоменклатуры.Очистить();
	Для каждого Строка Из РезультатЗакрытия.ПредставлениеНоменклатуры Цикл
		
		ЗаполнитьЗначенияСвойств(Объект.ПредставлениеНоменклатуры.Добавить(), Строка);
		
	КонецЦикла;
	
	РезультатЗакрытия.Свойство("КоличествоКолонок",							Объект.КоличествоКолонок);
	РезультатЗакрытия.Свойство("КартинкаШирина",							Объект.КартинкаШирина);
	РезультатЗакрытия.Свойство("КартинкаВысота",							Объект.КартинкаВысота);
	РезультатЗакрытия.Свойство("ИзменятьРазмерПропорционально",				Объект.ИзменятьРазмерПропорционально);
	РезультатЗакрытия.Свойство("ПредставлениеОстатков",						Объект.ПредставлениеОстатков);
	РезультатЗакрытия.Свойство("ТекстовоеПредставлениеОстатковМало",		Объект.ТекстовоеПредставлениеОстатковМало);
	РезультатЗакрытия.Свойство("ТекстовоеПредставлениеОстатковДостаточно",	Объект.ТекстовоеПредставлениеОстатковДостаточно);
	РезультатЗакрытия.Свойство("ТекстовоеПредставлениеОстатковМного",		Объект.ТекстовоеПредставлениеОстатковМного);
	РезультатЗакрытия.Свойство("ОтборОрганизация",							Объект.ОтборОрганизация);
	РезультатЗакрытия.Свойство("ОтборСклад",								Объект.ОтборСклад); 	
	РезультатЗакрытия.Свойство("ИсключитьПустыеВидыЦен", 					Объект.ИсключитьПустыеВидыЦен);
	РезультатЗакрытия.Свойство("НоменклатураБезЦен"	, 						Объект.НоменклатураБезЦен);
	РезультатЗакрытия.Свойство("ФормироватьПоНаличию", 						Объект.ФормироватьПоНаличию);
	
	Если РезультатЗакрытия.Свойство("НастройкиСКД") Тогда
		
		НастройкиОтбораНоменклатуры.ЗагрузитьНастройки(РезультатЗакрытия.НастройкиСКД);
		
	КонецЕсли;
	
	ПослеОбновленияНастроекСКД();
	
	ЗаполнитьПредставлениеНоменклатуры();
	
	ОбработатьРезультатВыбораВидовЦен(РезультатЗакрытия);
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьПоНаличиюПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	ПослеОбновленияНастроекСКД();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьПустыеВидыЦенПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	ПослеОбновленияНастроекСКД(); 
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураБезЦенПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	ПослеОбновленияНастроекСКД();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьОстаткиПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаТекстПредставлений", "Доступность", 
		(Объект.ПредставлениеОстатков = 2));
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенСравнитьПриИзменении(Элемент)
	
	УстановитьСвойстваЭлементовДополнительногоОтбора();
	
	Если Объект.ВидЦенСравнить = Ложь Тогда
		
		Объект.ВидЦен1			= Неопределено;
		Объект.ВидЦенУсловие	= ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.Равно");
		Объект.ВидЦен2			= Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦен1ПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораЭлементовСравненияЦен();
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенУсловиеПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦен2ПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораЭлементовСравненияЦен();
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Расшифровка.Свойство("ВидЦен")
			И Расшифровка.Свойство("Номенклатура") Тогда
			
			ОткрытьФормуЗаписиРегистра(Расшифровка);
			
		КонецЕсли;
		
		Если Расшифровка.Свойство("ЭтоХарактеристика")
			И ЗначениеЗаполнено(Расшифровка.Характеристика) Тогда
			
			ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаОбъекта", Новый Структура("Ключ", Расшифровка.Характеристика), ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрыватьПрайсЛистОрганизацииКакОбработкуПриИзменении(Элемент)
	
	ПерсональныеНастройкиВызовСервера.Установить(ОткрыватьПрайсЛистОрганизацииКакСписок,
		"ОткрыватьПрайсЛистОрганизацииКакСписок");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если КэшЗначений.ПрайсЛистЗаполнен = Истина
		И КэшЗначений.НеобходимоОбновитьДанные = Ложь
		И КэшЗначений.НеобходимоОбновитьОформление = Истина
		Тогда
		
		ОформлениеПрайсЛиста();
		АктуальностьПрайсЛиста("OK", Ложь, Ложь);
		
		Возврат;
		
	КонецЕсли;
	
	СформироватьПрайсЛистНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОтправить(Команда)
	
	ОбработчикРезультата = Новый ОписаниеОповещения("ОтправитьПечатныеФормыПоПочтеПродолжение", ЭтотОбъект);
	РаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОбработчикРезультата);
	
КонецПроцедуры

&НаКлиенте
Функция СтандартноеИмяСохраняемогоФайла()
	
	Возврат СтрШаблон("PRC_%1", Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ=yyyyMMddhhmm"));
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПечатныеФормыПоПочтеПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяФайла = СтандартноеИмяСохраняемогоФайла();
	
	Вложение = Новый Структура;
	Вложение.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(ТабличныйДокумент, УникальныйИдентификатор));
	Вложение.Вставить("Представление", ИмяФайла);
	
	ПараметрыОтправки = РаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма();
	ПараметрыОтправки.Тема		= ИмяФайла;
	ПараметрыОтправки.Вложения	= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Вложение);
	
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлСохранить(Команда)
	
	СохранитьПечатныеФормы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИскатьНазад(Команда)
	
	ИскатьСтрокуВТаблице(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИскатьВперед(Команда)
	
	ИскатьСтрокуВТаблице(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистВыбрать(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Ложь);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораЭлементаНастроекДляЗаполнения", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ПрайсЛисты.ФормаВыбора", ПараметрыОткрытия, , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлементаНастроекДляЗаполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		
		РабочийПрайсЛистОрганизации = Результат[0];
		
	ИначеЕсли ТипЗнч(Результат) = Тип("СправочникСсылка.ПрайсЛисты") Тогда
		
		РабочийПрайсЛистОрганизации = Результат;
		
	КонецЕсли;
	
	ИзменитьОбъектФормыПоСсылке();
	УправлениеФормойНаКлиенте();
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистСоздать(Команда)
	
	ЗаписатьЭлементСправочникаПрайсЛисты("Новый");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистСкопировать(Команда)
	
	ЗаписатьЭлементСправочникаПрайсЛисты("Скопировать");
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеВыбораВидовЦен(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбработатьРезультатВыбораВидовЦен(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатВыбораВидовЦен(Результат)
	Перем СтруктураВидаЦен;
	Перем НоваяСтрока;
	Перем КоличествоСтрок;
	
	Результат.Свойство("НазваниеЦеныПредставлением",	Объект.НазваниеЦеныПредставлением);
	Результат.Свойство("ВыводитьЦенуСЕдиницейИзмерения", Объект.ВыводитьЦенуСЕдиницейИзмерения);
	
	Объект.ВидыЦен.Очистить();
	Элементы.ВидЦен1.СписокВыбора.Очистить();
	Элементы.ВидЦен2.СписокВыбора.Очистить();
	
	Для каждого СтруктураВидаЦен Из Результат.МассивВидовЦен Цикл
		
		НоваяСтрока 		= Объект.ВидыЦен.Добавить();
		НоваяСтрока.ВидЦен	= СтруктураВидаЦен.ВидЦен;
		НоваяСтрока.Использование	= СтруктураВидаЦен.Использование;
		
		Элементы.ВидЦен1.СписокВыбора.Добавить(СтруктураВидаЦен.ВидЦен);
		Элементы.ВидЦен2.СписокВыбора.Добавить(СтруктураВидаЦен.ВидЦен);
		
	КонецЦикла;
	
	КоличествоСтрок = Объект.ВидыЦен.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Объект.МаксимальнаяЦена = Ложь;
		Объект.МинимальнаяЦена = Ложь;
		Объект.УсловнаяЦена = Ложь;
		
		СравнениеВыключилиУсловнаяЦена()
		
	КонецЕсли;
	
	УстановитьСвойстваЭлементовПоВидуЦен();
	УстановитьСвойстваЭлементовВыделенияПоУсловию();
	УстановитьСвойстваГруппыОформление();
	УстановитьСвойстваЭлементовГруппыУсловнойЦены();
	УстановитьСвойстваЭлементовДополнительногоОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОтбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Результат.Свойство("НастройкиСКД") Тогда
		
		НастройкиОтбораНоменклатуры.ЗагрузитьНастройки(Результат.НастройкиСКД);
		
	КонецЕсли;
	
	ПослеОбновленияНастроекСКД();
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияСведенийОДокументе(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Результат.Свойство("Автор",							Объект.Автор);
	Результат.Свойство("ВариантыСортировки",			Объект.ВариантыСортировки);
	Результат.Свойство("ВыводитьДатуФормирования",		Объект.ВыводитьДатуФормирования);
	Результат.Свойство("ДатаФормирования",				Объект.ДатаФормирования);
	Результат.Свойство("НаименованиеПрайсЛиста",		Объект.Наименование);
	Результат.Свойство("Организация",					Объект.Организация);
	Результат.Свойство("Описание",						Объект.Описание);
	Результат.Свойство("УказатьКонтактыОтветственного", Объект.УказатьКонтактыОтветственного);
	
	КэшЗначений.РазмерШапкиТабличногоДокумента = ?(ЗначениеЗаполнено(Объект.Организация), 15, 4);
	
	Заголовок = Объект.Наименование;
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетИсключенныеПозиции(Команда)
	
	ОткрытьФорму("Обработка.ПрайсЛистыОрганизации.Форма.ФормаНеИспользуемаяНоменклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьНастройкиОбщегоПрайсЛиста(Команда)
	
	КэшЗначений.ЗапретитьОбновлениеПрайсЛистаПриЗакрытии = Ложь;
	
	НачатьСохранениеНастроекПрайсЛиста(Ложь, Ложь);
	
	КэшЗначений.ЗапретитьОбновлениеПрайсЛистаПриЗакрытии = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс  

&НаКлиенте
Процедура ПриИзмененииВариантаПечатиПрайсЛиста()
	
	ДополнительныеПараметры = Новый Структура;
	
	ЦенообразованиеКлиент.ИзменитьВариантПечатиПрайсЛистаОрганизация(Объект, ДополнительныеПараметры);
	
	ЗаполнитьПредставлениеНоменклатуры();
	УстановитьСвойстваЭлементовПоВидуЦен();
	УстановитьСвойстваЭлементовВыделенияПоУсловию();
	УстановитьСвойстваГруппыОформление();
	УстановитьСвойстваЭлементовГруппыУсловнойЦены();
	УстановитьСвойстваЭлементовДополнительногоОтбора();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьКэшЗначений()
	
	ПараметрыДлительнойОперации = Новый Структура;
	ПараметрыДлительнойОперации.Вставить("ФоновоеЗаданиеРезультат", 	Неопределено);
	ПараметрыДлительнойОперации.Вставить("ФоновоеЗаданиеИдентификатор", Неопределено);
	ПараметрыДлительнойОперации.Вставить("СохранитьВФайл",				Ложь);
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("АвторизованныйПользователь", 		Пользователи.АвторизованныйПользователь());
	КэшЗначений.Вставить("ВопросСозданияПервогоПрайсЛиста",	УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ВыводитьВопросСозданииПервогоПрайсЛистаОрганизации"));
	КэшЗначений.Вставить("ЕстьСохраненныеПрайсЛисты",		ЕстьСохраненныеПрайсЛисты());
	КэшЗначений.Вставить("НациональнаяВалюта",				Константы.НациональнаяВалюта.Получить());
	КэшЗначений.Вставить("ПараметрыДлительнойОперации",		ПараметрыДлительнойОперации);
	КэшЗначений.Вставить("ЕстьПравоДобавленияНового", 		ПравоДоступа("Добавление", Метаданные.Справочники.ПрайсЛисты));
	
	// Служебные поля
	КэшЗначений.Вставить("ПрайсЛистЗаполнен",							Ложь);
	КэшЗначений.Вставить("НеобходимоОбновитьДанные",					Истина);
	КэшЗначений.Вставить("НеобходимоОбновитьОформление",				Ложь);
	
	КэшЗначений.Вставить("ПоследняяКолонкаЗаголовка",					0);
	КэшЗначений.Вставить("ПоследняяКолонкаПрайсЛиста",					0);
	КэшЗначений.Вставить("ИменаКолонок",								Неопределено);
	КэшЗначений.Вставить("РазмерШапкиТабличногоДокумента",				4);				// в строках.
	КэшЗначений.Вставить("ОформлениеПредельноеЗначениеПорции",			5000);
	КэшЗначений.Вставить("ОформлениеГраницаПоследнейПорции",			0);
	КэшЗначений.Вставить("ПредельноДопустимыРазмерКартинокМб",			500);
	КэшЗначений.Вставить("УИДЗамера",									Неопределено);
	КэшЗначений.Вставить("ЭтоПрограммноеСохранениеБольшогоПрайсЛиста",	Ложь);
	КэшЗначений.Вставить("ЗапретитьОбновлениеПрайсЛистаПриЗакрытии", 	Ложь);
	
	ДоступныеПоляНоменклатуры = Неопределено;
	Справочники.ПрайсЛисты.ДоступныеПоляНоменклатуры(ДоступныеПоляНоменклатуры);
	КэшЗначений.Вставить("ДоступныеПоляНоменклатуры", ПоместитьВоВременноеХранилище(ДоступныеПоляНоменклатуры,
		УникальныйИдентификатор));
	
КонецПроцедуры

&НаКлиенте
Процедура ИскатьСтрокуВТаблице(ИскатьВперед)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не задана строка поиска'"));
		ТекущийЭлемент = Элементы.СтрокаПоиска;
		
		Возврат;
		
	КонецЕсли;
	
	НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(СокрЛП(СтрокаПоиска), Элементы.ТабличныйДокумент.ТекущаяОбласть, , , , ИскатьВперед, Истина);
	Если НайденнаяОбласть = Неопределено Тогда
		
		НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(СокрЛП(СтрокаПоиска), , , , , , Истина);
		Если НайденнаяОбласть = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'В прайс-листе искомый текст не найден...'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "СтрокаПоиска");
			ТекущийЭлемент = Элементы.СтрокаПоиска;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	
	МассивОбластей = Новый Массив;
	МассивОбластей.Добавить(НайденнаяОбласть);
	Элементы.ТабличныйДокумент.УстановитьВыделенныеОбласти(МассивОбластей);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормойНаКлиенте()
	
	Заголовок = ?(ПустаяСтрока(Объект.Наименование), НСтр("ru ='Прайс-лист'"), Объект.Наименование);
	
	ЗаполнитьПредставлениеНоменклатуры();
	
	ПослеОбновленияНастроекСКД();
	 
	ОбновитьПредставлениеПериода(Объект.ПериодЦен); 
	УстановитьСвойстваЭлементовПоВидуЦен();
	УстановитьСвойстваЭлементовВыделенияПоУсловию();
	УстановитьСвойстваГруппыОформление();
	УстановитьСвойстваЭлементовГруппыУсловнойЦены();
	УстановитьСвойстваЭлементовДополнительногоОтбора();
	УстановитьСвойстваЭлементовПоПризнакуИндивидуальный();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваЭлементовПоВидуЦен()
	
	Отбор = Новый Структура("Использование", Истина);
	ВыбранныеВидыЦен = Объект.ВидыЦен.НайтиСтроки(Отбор);
	
	КоличествоСтрок = ВыбранныеВидыЦен.Количество();
	Если КоличествоСтрок = 0 Тогда

		ТекстЗаголовкаЦены	= НСтр("ru ='Виды цен (не указаны)'");

	Иначе

		ТекстЗаголовкаЦены	= СтрШаблон(НСтр("ru ='Виды цен (%1)'"), КоличествоСтрок);
	КонецЕсли;  
	
	Если КоличествоСтрок < 2 Тогда
		Объект.ВидЦенСравнить = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницаЦены", "Заголовок",
		ТекстЗаголовкаЦены);
			
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваЭлементовВыделенияПоУсловию()
	
	Отбор = Новый Структура("Использование", Истина);
	ВыбранныеВидыЦен = Объект.ВидыЦен.НайтиСтроки(Отбор);

	БолееОдногоВидаЦен	= (ВыбранныеВидыЦен.Количество() > 1);
	ЕстьВидыЦен			= (ВыбранныеВидыЦен.Количество() > 0);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "МинимальнаяЦена", "Доступность",
		БолееОдногоВидаЦен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "МаксимальнаяЦена", "Доступность",
		БолееОдногоВидаЦен);

	Если Объект.ПечатьПрайсЛиста = ПредопределенноеЗначение("Перечисление.ВариантыПечатиПрайсЛиста.Диафильм") Тогда

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УсловнаяЦена", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЦенаПоУсловию", "Доступность",
			Ложь);

	Иначе

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УсловнаяЦена", "Доступность",
			ЕстьВидыЦен);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЦенаПоУсловию", "Доступность",
			Объект.УсловнаяЦена);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваГруппыОформление()
	
	ТекстЗаголовка = ?(Объект.МаксимальнаяЦена Или Объект.МинимальнаяЦена Или Объект.УсловнаяЦена, НСтр(
		"ru ='Оформление (*)'"), НСтр("ru ='Оформление'"));

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОперацииСравнения", "Заголовок",
		ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваЭлементовГруппыУсловнойЦены()
	
	УсловияСИнтервалами = Новый Массив(2);
	УсловияСИнтервалами[0] = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.ВИнтервале");
	УсловияСИнтервалами[1] = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.ВИнтервалеВключая");

	ЭтоУсловиеСИнтервалом = (УсловияСИнтервалами.Найти(Объект.УсловнаяЦенаУсловие) <> Неопределено);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УсловнаяЦенаЗначениеДо", "Видимость",
		ЭтоУсловиеСИнтервалом);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваЭлементовДополнительногоОтбора()
	
	Отбор = Новый Структура("Использование", Истина);
	ВыбранныеВидыЦен = Объект.ВидыЦен.НайтиСтроки(Отбор);
	
	СравнениеДоступно = (ВыбранныеВидыЦен.Количество() > 1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидЦенСравнить", "Доступность",
		СравнениеДоступно);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаУсловиеСравнения", "Доступность",
		СравнениеДоступно);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваЭлементовПоПризнакуИндивидуальный()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Автор", "Видимость", Объект.УдалитьИндивидуальный);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапомнитьНастройкиОбщегоПрайсЛиста",
		"Видимость", Не Объект.УдалитьИндивидуальный);
	
КонецПроцедуры

&НаКлиенте
Функция ОбъектВСтруктуру()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Автор", 						Объект.Автор);
	СтруктураДанных.Вставить("Валюта",						Объект.Валюта);
	СтруктураДанных.Вставить("ВариантыСортировки",			Объект.ВариантыСортировки);
	СтруктураДанных.Вставить("ВыводитьДатуФормирования",	Объект.ВыводитьДатуФормирования);
	СтруктураДанных.Вставить("ДатаРасчетаКурсаВалюты",		Объект.ДатаРасчетаКурсаВалюты);
	СтруктураДанных.Вставить("ДатаФормирования",			Объект.ДатаФормирования);
	СтруктураДанных.Вставить("ИерархияСодержимого",			Объект.ИерархияСодержимого);
	СтруктураДанных.Вставить("Индивидуальный", 				Объект.УдалитьИндивидуальный);
	СтруктураДанных.Вставить("НазваниеЦеныПредставлением",	Объект.НазваниеЦеныПредставлением);
	СтруктураДанных.Вставить("НаименованиеПрайсЛиста",		Объект.Наименование);
	СтруктураДанных.Вставить("НоменклатураБезЦен", 			Объект.НоменклатураБезЦен);
	СтруктураДанных.Вставить("Описание",					Объект.Описание);
	СтруктураДанных.Вставить("Организация",					Объект.Организация);
	СтруктураДанных.Вставить("ПечатьПрайсЛиста",			Объект.ПечатьПрайсЛиста);
	СтруктураДанных.Вставить("ПериодЦен", 					Объект.ПериодЦен);
	СтруктураДанных.Вставить("УказатьКонтактыОтветственного", Объект.УказатьКонтактыОтветственного);
	СтруктураДанных.Вставить("ФормироватьПоНаличию",		Объект.ФормироватьПоНаличию);
	
	СтруктураДанных.Вставить("ПредставлениеОстатков",  		Объект.ПредставлениеОстатков);
	СтруктураДанных.Вставить("ТекстовоеПредставлениеОстатковМало", Объект.ТекстовоеПредставлениеОстатковМало);
	СтруктураДанных.Вставить("ТекстовоеПредставлениеОстатковДостаточно", Объект.ТекстовоеПредставлениеОстатковДостаточно);
	СтруктураДанных.Вставить("ТекстовоеПредставлениеОстатковМного", Объект.ТекстовоеПредставлениеОстатковМного);
	СтруктураДанных.Вставить("ОтборОрганизация",			Объект.ОтборОрганизация);
	СтруктураДанных.Вставить("ОтборСклад",					Объект.ОтборСклад);
	
	СтруктураДанных.Вставить("МаксимальнаяЦена", 			Объект.МаксимальнаяЦена);
	СтруктураДанных.Вставить("МинимальнаяЦена", 			Объект.МинимальнаяЦена);
	СтруктураДанных.Вставить("УсловнаяЦена", 				Объект.УсловнаяЦена);
	СтруктураДанных.Вставить("УсловнаяЦенаУсловие", 		Объект.УсловнаяЦенаУсловие);
	СтруктураДанных.Вставить("УсловнаяЦенаЗначение", 		Объект.УсловнаяЦенаЗначение);
	СтруктураДанных.Вставить("УсловнаяЦенаЗначениеДо", 		Объект.УсловнаяЦенаЗначениеДо);
	
	СтруктураДанных.Вставить("ВидЦенСравнить", 				Объект.ВидЦенСравнить);
	СтруктураДанных.Вставить("ВидЦен1",						Объект.ВидЦен1);
	СтруктураДанных.Вставить("ВидЦенУсловие",				Объект.ВидЦенУсловие);
	СтруктураДанных.Вставить("ВидЦен2", 					Объект.ВидЦен2);
	
	СтруктураДанных.Вставить("ПредставлениеНоменклатуры",	Новый Массив);
	СтруктураДанных.Вставить("ВидыЦен", 					Новый Массив);
	СтруктураДанных.Вставить("ИсключитьПустыеВидыЦен",		Объект.ИсключитьПустыеВидыЦен);
	СтруктураДанных.Вставить("ОтборНоменклатуры", 			НастройкиОтбораНоменклатуры.Настройки.Отбор);
	
	СтруктураДанных.Вставить("КоличествоКолонок",			Объект.КоличествоКолонок);
	СтруктураДанных.Вставить("КартинкаВысота", 				Объект.КартинкаВысота);
	СтруктураДанных.Вставить("КартинкаШирина", 				Объект.КартинкаШирина);
	СтруктураДанных.Вставить("ИзменятьРазмерПропорционально", Объект.ИзменятьРазмерПропорционально);
	СтруктураДанных.Вставить("ВыводитьЦенуСЕдиницейИзмерения", Объект.ВыводитьЦенуСЕдиницейИзмерения);
	
	Для каждого СтрокаПредставленияНоменклатуры Из Объект.ПредставлениеНоменклатуры Цикл
		
		ОписаниеСтроки = Новый Структура;
		ОписаниеСтроки.Вставить("Использование");
		ОписаниеСтроки.Вставить("РеквизитНоменклатуры");
		ОписаниеСтроки.Вставить("РеквизитПредставление");
		ОписаниеСтроки.Вставить("ПараметрРасшифровки");
		ОписаниеСтроки.Вставить("Ширина");
		ОписаниеСтроки.Вставить("СлужебныйУправлениеВидимостью");
		ОписаниеСтроки.Вставить("СлужебныйПолеКомпоновкиПуть");
		ЗаполнитьЗначенияСвойств(ОписаниеСтроки, СтрокаПредставленияНоменклатуры);
		
		СтруктураДанных.ПредставлениеНоменклатуры.Добавить(ОписаниеСтроки);
		
	КонецЦикла;
	
	Для Каждого СтрокаВидовЦен Из Объект.ВидыЦен Цикл
		СтруктураВидовЦен = Новый Структура("Использование, ВидЦен", СтрокаВидовЦен.Использование,
			СтрокаВидовЦен.ВидЦен);

		СтруктураДанных.ВидыЦен.Добавить(СтруктураВидовЦен);
		
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПредставлениеНоменклатуры()
	Перем ПараметрыКартинки;
	
	Если Объект.ПечатьПрайсЛиста = ПредопределенноеЗначение("Перечисление.ВариантыПечатиПрайсЛиста.Диафильм") Тогда
		
		ПараметрыКартинки = Новый Структура;
		ПараметрыКартинки.Вставить("КоличествоКолонок", 	Объект.КоличествоКолонок);
		ПараметрыКартинки.Вставить("КартинкаШирина", 		Объект.КартинкаШирина);
		ПараметрыКартинки.Вставить("КартинкаВысота", 		Объект.КартинкаВысота);
		
	КонецЕсли;
	
	
	Если Объект.ПечатьПрайсЛиста = ПредопределенноеЗначение("Перечисление.ВариантыПечатиПрайсЛиста.ДвеКолонки")
		Или Объект.ПечатьПрайсЛиста = ПредопределенноеЗначение("Перечисление.ВариантыПечатиПрайсЛиста.Диафильм") Тогда
			
			ЗаполнитьОбязательныеПоляПредставленийНоменклатуры();

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбязательныеПоляПредставленийНоменклатуры()
	
	ОбязательныеПоля = Новый Массив;
	ОбязательныеПоля.Добавить("Артикул");
	ОбязательныеПоля.Добавить("Код");
	ОбязательныеПоля.Добавить("ШтрихкодНоменклатуры");
	ОбязательныеПоля.Добавить("Наименование");
	ОбязательныеПоля.Добавить("НаименованиеПолное");
	ОбязательныеПоля.Добавить("Комментарий");
	ОбязательныеПоля.Добавить("Характеристика");
	ОбязательныеПоля.Добавить("ПризнакНовинка");
	ДоступныеПоляНоменклатуры = ПолучитьИзВременногоХранилища(КэшЗначений.ДоступныеПоляНоменклатуры);

	Для Каждого ИмяРеквизита Из ОбязательныеПоля Цикл
		Отбор = Новый Структура("РеквизитНоменклатуры", ИмяРеквизита);
		Строки = Объект.ПредставлениеНоменклатуры.НайтиСтроки(Отбор);
		Если Строки.Количество() = 0 Тогда

			Найдено = ДоступныеПоляНоменклатуры.НайтиСтроки(Отбор);
			ЗаполнитьЗначенияСвойств(Объект.ПредставлениеНоменклатуры.Добавить(), Найдено[0]);

		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбновленияНастроекСКД()
	
	КоличествоФлагов 	= Объект.ФормироватьПоНаличию + Объект.ИсключитьПустыеВидыЦен + Объект.НоменклатураБезЦен; 
	КоличествоОтборов 	= 0;
	Для Каждого Элемент Из НастройкиОтбораНоменклатуры.Настройки.Отбор.Элементы Цикл
		Если Элемент.Использование Тогда
			КоличествоОтборов = КоличествоОтборов + 1;
		КонецЕсли;
	КонецЦикла;
	
	ВсегоОтборов = КоличествоОтборов + КоличествоФлагов;
	КоличествоСтрокой = ?(ВсегоОтборов = 0, "", "(" + Строка(ВсегоОтборов) + ")");
	
	ТекстЗаголовкаГруппы = СокрЛП(СтрШаблон(НСтр("ru ='Фильтры %1'"), ?(КоличествоОтборов = 0, "", "(*)")));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОтборы", "Заголовок", ТекстЗаголовкаГруппы);
	
	ТекстЗаголовка = СокрЛП(СтрШаблон(НСтр("ru ='Все фильтры %1'"), КоличествоСтрокой));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасширенныеФильтры", 
		"Заголовок", ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСоветПользователю(ЗаголовокФормы, ТекстСообщения, ОписаниеОповещения, ВидимостьБольшеНеПоказывать)
	
	ПараметрыСовета = Новый Структура;
	ПараметрыСовета.Вставить("Заголовок", ЗаголовокФормы);
	ПараметрыСовета.Вставить("ТекстСообщения", ТекстСообщения);
	ПараметрыСовета.Вставить("ВидимостьБольшеНеПоказывать", ВидимостьБольшеНеПоказывать);
	ПараметрыСовета.Вставить("ИмяПользовательскойНастройки", ОписаниеОповещения.ДополнительныеПараметры.ИмяПользовательскойНастройки);
	ПараметрыСовета.Вставить("ТекстЗаголовкаКнопкиОК", ОписаниеОповещения.ДополнительныеПараметры.ТекстЗаголовкаКнопкиОК);
	ПараметрыСовета.Вставить("ТекстЗаголовкаКнопкиОтмена", ОписаниеОповещения.ДополнительныеПараметры.ТекстЗаголовкаКнопкиОтмена);
	
	ОткрытьФорму("Обработка.ПрайсЛистыОрганизации.Форма.ФормаСообщения", ПараметрыСовета, ЭтаФорма, Истина, , , 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьКонкурирующиеУсловия(ИмяЭлемента)
	
	Если ИмяЭлемента <> Элементы.МинимальнаяЦена.Имя Тогда
		
		Объект.МинимальнаяЦена = Ложь;
		
	КонецЕсли;
	
	Если ИмяЭлемента <> Элементы.МаксимальнаяЦена.Имя Тогда
		
		Объект.МаксимальнаяЦена = Ложь;
		
	КонецЕсли;
	
	Если ИмяЭлемента <> Элементы.УсловнаяЦена.Имя Тогда
		
		Объект.УсловнаяЦена = Ложь;
		СравнениеВыключилиУсловнаяЦена();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнениеВыключилиУсловнаяЦена()
	
	Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.Меньше");
	Объект.УсловнаяЦенаЗначение = 0;
	Объект.УсловнаяЦенаЗначениеДо = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораЭлементовСравненияЦен()
	
	Элементы.ВидЦен1.СписокВыбора.Очистить();
	Элементы.ВидЦен2.СписокВыбора.Очистить();
	
	Для каждого СтрокаТаблицы Из Объект.ВидыЦен Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидЦен)
			И СтрокаТаблицы.ВидЦен <> Объект.ВидЦен2 Тогда
			
			Элементы.ВидЦен1.СписокВыбора.Добавить(СтрокаТаблицы.ВидЦен);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидЦен)
			И СтрокаТаблицы.ВидЦен <> Объект.ВидЦен1 Тогда
			
			Элементы.ВидЦен2.СписокВыбора.Добавить(СтрокаТаблицы.ВидЦен);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаписиРегистра(Расшифровка)
	
	КлючЗаписи = ЗаписьОЦенеСуществует(Расшифровка, Объект.ПериодЦен);
	
	Если КлючЗаписи.ЗаписьСуществует Тогда
		
		КлючЗаписи.Удалить("ЗаписьСуществует");
		
		ПараметрыМассив = Новый Массив;
		ПараметрыМассив.Добавить(КлючЗаписи);
		
		КлючЗаписиРегистра = Новый("РегистрСведенийКлючЗаписи.ЦеныНоменклатуры", ПараметрыМассив);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", КлючЗаписиРегистра);
		
	Иначе
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", КлючЗаписи);
		
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.ЦеныНоменклатуры.ФормаЗаписи", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АктуальностьПрайсЛиста(Состояние, НеобходимоОбновитьДанные, НеобходимоОбновитьОформление, КраткоеПредставлениеОшибки = "")
	
	Если Состояние = "OK" Тогда
		
		ОтображениеСостояния = Элементы.ТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		ОтображениеСостояния.Видимость = Ложь;
		
	ИначеЕсли Состояние = "SAVE" Тогда
		
		ОтображениеСостояния = Элементы.ТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		ОтображениеСостояния.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника_32;
		ОтображениеСостояния.Текст = НСтр("ru = 'Данные прайс-листа слишком велики (вероятно, из-за использования картинок).
			|Документ был сохранен локально или присоединен к карточке прайс-листа.'");
		
	ИначеЕсли Состояние = "ERROR" Тогда
		
		ОтображениеСостояния = Элементы.ТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		ОтображениеСостояния.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника_32;
		ОтображениеСостояния.Текст = СтрШаблон(НСтр("ru ='Ошибка формирования:
			|%1
			|Подробности см. в журнале регистрации.'"), КраткоеПредставлениеОшибки);
		
	ИначеЕсли Состояние = "OUTDATED"
		И КэшЗначений.ПрайсЛистЗаполнен = Истина
		И
			(НеобходимоОбновитьДанные = Истина
				ИЛИ НеобходимоОбновитьОформление = Истина)
		Тогда
		
		ОтображениеСостояния = Элементы.ТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника_32;
		ОтображениеСостояния.Текст = НСтр("ru = 'Возможно, изменились параметры отчета.
			|Рекомендуется повторно сформировать прайс-лист.'");
		
	Иначе
		
		// Оставляем как есть, т.к. непонятно что это может быть...
		
	КонецЕсли;
	
	КэшЗначений.НеобходимоОбновитьДанные = НеобходимоОбновитьДанные;
	КэшЗначений.НеобходимоОбновитьОформление = НеобходимоОбновитьОформление;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяВариантаИерархии(Объект)
	
	Если Объект.ИерархияСодержимого = ПредопределенноеЗначение(
		"Перечисление.ИерархияПрайсЛистов.ИерархияКатегорийНоменклатуры") Тогда
		ИмяВариантаСКД = "ИерархияКатегорий";
	ИначеЕсли Объект.ИерархияСодержимого = ПредопределенноеЗначение(
		"Перечисление.ИерархияПрайсЛистов.ИерархияЦеновыхГрупп") Тогда
		ИмяВариантаСКД = "ИерархияЦеновыхГрупп";
	Иначе
		ИмяВариантаСКД = "ИерархияНоменклатуры";
	КонецЕсли;
	Возврат ИмяВариантаСКД;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьПакетнуюКоманду(ТекстКоманды)
	
	ЭтоПакетнаяКоманда = Ложь;
	
	Если ВРег(СтрокаПоиска) = ВРег("##reread")
		ИЛИ ВРег(СтрокаПоиска) = ВРег("##перечитать") Тогда
		
		ЭтотОбъект.Прочитать();
		ЭтоПакетнаяКоманда = Истина;
		
	КонецЕсли;
	
	Если ВРег(СтрокаПоиска) = ВРег("##createnew")
		ИЛИ ВРег(СтрокаПоиска) = ВРег("##СоздатьНовый") Тогда
		
		ЗаписатьЭлементСправочникаПрайсЛисты("Новый");
		ЭтоПакетнаяКоманда = Истина;
		
	КонецЕсли;
	
	Если ВРег(СтрокаПоиска) = ВРег("##copythis")
		ИЛИ ВРег(СтрокаПоиска) = ВРег("##копировать") Тогда
		
		ЗаписатьЭлементСправочникаПрайсЛисты("Скопировать");
		ЭтоПакетнаяКоманда = Истина;
		
	КонецЕсли;
	
	Если ВРег(СтрокаПоиска) = ВРег("##savethis")
		ИЛИ ВРег(СтрокаПоиска) = ВРег("##сохранить") Тогда
		
		ЗаписатьЭлементСправочникаПрайсЛисты("Сохранить");
		ЭтоПакетнаяКоманда = Истина;
		
	КонецЕсли;
	
	Если ВРег(СтрокаПоиска) = ВРег("##closeform")
		ИЛИ ВРег(СтрокаПоиска) = ВРег("##ЗакрытьФорму") Тогда
		
		Закрыть();
		ЭтоПакетнаяКоманда = Истина;
		
	КонецЕсли;
	
	Возврат ЭтоПакетнаяКоманда;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦветаСтиляВыделенияСтрок() 
	
	СтруктураЦветовСтиля = Новый Структура;  
	СтруктураЦветовСтиля.Вставить("ЦветСтиляМаксимальнаяЦена"	, ЦветаСтиля.РозоваяПодсветкаВажныхСтрок);
	СтруктураЦветовСтиля.Вставить("ЦветСтиляМинимальнаяЦена"	, ЦветаСтиля.ЦветФонаРежимаСкупкиРМК);
    СтруктураЦветовСтиля.Вставить("ЦветСтиляТекущаяЦена"		, ЦветаСтиля.БазовыйЦветФонаЭтапаОтправки);
	СтруктураЦветовСтиля.Вставить("ЦветСтиляУсловнаяЦена"		, ЦветаСтиля.ВысокийПриоритетДокумента);

	Возврат СтруктураЦветовСтиля; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписьОЦенеСуществует(Знач Расшифровка, ПериодЦен)
	
	КлючЗаписи = Новый Структура("Период, ВидЦен, Номенклатура, Характеристика");
	
	Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		
		Расшифровка = Новый Структура;
		
	КонецЕсли;
	
	Если НЕ Расшифровка.Свойство("Период", КлючЗаписи.Период) Тогда
		
		КлючЗаписи.Период = ?(ЗначениеЗаполнено(ПериодЦен), ПериодЦен, НачалоДня(ТекущаяДатаСеанса()));
		
	КонецЕсли;
	
	Расшифровка.Свойство("ВидЦен",				КлючЗаписи.ВидЦен);
	Расшифровка.Свойство("Номенклатура",		КлючЗаписи.Номенклатура);
	Расшифровка.Свойство("Характеристика",		КлючЗаписи.Характеристика);
	
	Если КлючЗаписи.Характеристика = Неопределено Тогда
		
		КлючЗаписи.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат ЦенообразованиеСервер.ЗаписьОЦенеСуществует(КлючЗаписи);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьОшибкуЖурналаРегистрации(ПодробноеОписаниеОшибки)
	
	ИмяСобытия = НСтр("ru = 'Прайс-лист'");
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеОписаниеОшибки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьСохраненныеПрайсЛисты()
	
	Возврат Справочники.ПрайсЛисты.КоличествоПрайсЛистовПользователя() <> 0;
	
КонецФункции

&НаСервере
Процедура ИзменитьОбъектФормыПоСсылке(НовыеДанныеЭлементаСправочника = Неопределено)
	
	Если НовыеДанныеЭлементаСправочника <> Неопределено
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОбновитьСуществующийПрайсЛист(Объект.Ссылка, НовыеДанныеЭлементаСправочника)
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РабочийПрайсЛистОрганизации) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НовыйОбъект = РабочийПрайсЛистОрганизации.ПолучитьОбъект();
	Если НовыйОбъект = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(НовыйОбъект, "Объект");
	
	УстановитьЗначенияОтбораНоменклатуры();
	
	ЭтотОбъект.Прочитать();
	
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиПользователей) Тогда
		
		РегистрыСведений.НастройкиПользователей.Установить(Объект.Ссылка, "РабочийПрайсЛистОрганизации");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТиповоеПредставлениеНоменклатуры()
	Перем ТаблицаПредставлений;
	
	Справочники.ПрайсЛисты.ДоступныеПоляНоменклатуры(ТаблицаПредставлений);
	Объект.ПредставлениеНоменклатуры.Загрузить(ТаблицаПредставлений);
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФормуСоставРеквизитов(АктивнаяЗакладка)
	Перем ИмяФормыРедактированияПредставления;
	Перем ОписаниеОповещения;
	Перем ПараметрыОткрытияФормы;
	
	Если Не ЗначениеЗаполнено(РабочийПрайсЛистОрганизации) Тогда
		
		ТекстСообщения = НСтр("ru='Для настроек выберите рабочий прайс-лист'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытияФормы = ПараметрыОткрытияФормыСоставаПолей(АктивнаяЗакладка, ПараметрыОткрытияФормы); 
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеРедактированияСоставаРеквизитов", ЭтотОбъект);
	
	ИмяФормыРедактированияПредставления = "Справочник.ПрайсЛисты.Форма.ФормаСоставРеквизитов";
	ОткрытьФорму(ИмяФормыРедактированияПредставления, ПараметрыОткрытияФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОткрытияФормыСоставаПолей(АктивнаяЗакладка, ПараметрыОткрытияФормы)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ПредставлениеНоменклатуры", Объект.ПредставлениеНоменклатуры);
	ПараметрыОткрытияФормы.Вставить("ПечатьПрайсЛиста", Объект.ПечатьПрайсЛиста);
	
	ПараметрыОткрытияФормы.Вставить("КоличествоКолонок", Объект.КоличествоКолонок);
	ПараметрыОткрытияФормы.Вставить("КартинкаШирина", Объект.КартинкаШирина);
	ПараметрыОткрытияФормы.Вставить("КартинкаВысота", Объект.КартинкаВысота);
	ПараметрыОткрытияФормы.Вставить("ИзменятьРазмерПропорционально", Объект.ИзменятьРазмерПропорционально);
	
	ПараметрыОткрытияФормы.Вставить("ПредставлениеОстатков", Объект.ПредставлениеОстатков);
	ПараметрыОткрытияФормы.Вставить("ТекстовоеПредставлениеОстатковМало", Объект.ТекстовоеПредставлениеОстатковМало);
	ПараметрыОткрытияФормы.Вставить("ТекстовоеПредставлениеОстатковДостаточно",
		Объект.ТекстовоеПредставлениеОстатковДостаточно);
	ПараметрыОткрытияФормы.Вставить("ТекстовоеПредставлениеОстатковМного", Объект.ТекстовоеПредставлениеОстатковМного);
	
	ПараметрыОткрытияФормы.Вставить("ОтборОрганизация", Объект.ОтборОрганизация);
	ПараметрыОткрытияФормы.Вставить("ОтборСклад", Объект.ОтборСклад);
	
	ПараметрыОткрытияФормы.Вставить("НазваниеЦеныПредставлением", Объект.НазваниеЦеныПредставлением);
	ПараметрыОткрытияФормы.Вставить("ВариантПечатиПрайсЛиста", Объект.ПечатьПрайсЛиста);
	ПараметрыОткрытияФормы.Вставить("ВыводитьЦенуСЕдиницейИзмерения", Объект.ВыводитьЦенуСЕдиницейИзмерения);
	
	ПараметрыОткрытияФормы.Вставить("АктивнаяЗакладка", АктивнаяЗакладка);
	
	ПараметрыОткрытияФормы.Вставить("ВидыЦен", ВидыЦенОбъекта(Объект.ВидыЦен));
	
	ПараметрыОткрытияФормы.Вставить("НастройкиКомпоновкиДанных", НастройкиОтбораНоменклатуры.Настройки);
	
	ИмяВариантаСКД = ИмяВариантаИерархии(Объект);
	ПараметрыОткрытияФормы.Вставить("ИмяВариантаСКД", ИмяВариантаСКД);
	
	ПараметрыОткрытияФормы.Вставить("АдресСхемыКомпоновкиДанныхКолонок", АдресСхемыКомпоновкиДанныхКолонок);
	  
	ПараметрыОткрытияФормы.Вставить("ИсключитьПустыеВидыЦен"	, Объект.ИсключитьПустыеВидыЦен);
	ПараметрыОткрытияФормы.Вставить("ФормироватьПоНаличию"		, Объект.ФормироватьПоНаличию);
	ПараметрыОткрытияФормы.Вставить("НоменклатураБезЦен"		, Объект.НоменклатураБезЦен);  
		
	Возврат ПараметрыОткрытияФормы
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидыЦенОбъекта(Знач ВидыЦен)
	
	Результат = Новый Массив;
	Для Каждого СтрокаВидЦены Из ВидыЦен Цикл
		
		Структура = Новый Структура("Использование, ВидЦен", СтрокаВидЦены.Использование, СтрокаВидЦены.ВидЦен);
		Результат.Добавить(Структура);
		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

#Область СохранениеПрайсЛистов

&НаКлиенте
Процедура НачатьСохранениеНастроекПрайсЛиста(Отказ, ЗавершениеРаботы)
	
	Если ЗавершениеРаботы
		ИЛИ КэшЗначений.ЗапретитьОбновлениеПрайсЛистаПриЗакрытии = Истина
		ИЛИ НЕ КэшЗначений.ЕстьПравоДобавленияНового Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(НСтр("ru ='Сохранение варианта прайс-листа....'"),,, БиблиотекаКартинок.ДлительнаяОперация16);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОбновитьСуществующийПрайсЛист(Объект.Ссылка, ОбъектВСтруктуру());
		
	ИначеЕсли КэшЗначений.ВопросСозданияПервогоПрайсЛиста <> Ложь
		И НЕ КэшЗначений.ЕстьСохраненныеПрайсЛисты Тогда
		
		ЗаголовокФормы = НСтр("ru = 'Уточнение'");
		
		МассивСтрок = Новый Массив(3);
		МассивСтрок[0] = НСтр("ru ='У текущего пользователя нет еще сохраненных прайс-листов.'");
		МассивСтрок[1] = НСтр("ru ='Создать первый прайс-лист и сохранить в него текущие параметры?'");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяПользовательскойНастройки", "ВыводитьВопросСозданииПервогоПрайсЛистаОрганизации");
		ДополнительныеПараметры.Вставить("ТекстЗаголовкаКнопкиОК", НСтр("ru ='Создать и закрыть'"));
		ДополнительныеПараметры.Вставить("ТекстЗаголовкаКнопкиОтмена", НСтр("ru ='Закрыть'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОСохраненииНастроекПервогоПрайсЛиста", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьСоветПользователю(ЗаголовокФормы, СтрСоединить(МассивСтрок, " "), ОписаниеОповещения, Истина);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОСохраненииНастроекПервогоПрайсЛиста(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		КэшЗначений.ВопросСозданияПервогоПрайсЛиста = Ложь;
		ПерсональныеНастройкиВызовСервера.Установить(НЕ РезультатЗакрытия.БольшеНеПоказывать,
			ДополнительныеПараметры.ИмяПользовательскойНастройки);
		
		Если РезультатЗакрытия.НажатаКнопкаОК Тогда
			
			ЗаписатьЭлементСправочникаПрайсЛисты("Сохранить");
			ПерсональныеНастройкиВызовСервера.Установить(Объект.Ссылка, "РабочийПрайсЛистОрганизации");
			
			КэшЗначений.ЗапретитьОбновлениеПрайсЛистаПриЗакрытии = Истина;
			
		КонецЕсли;
		
	ИначеЕсли РезультатЗакрытия = Неопределено Тогда // Esc
		
		КэшЗначений.ВопросСозданияПервогоПрайсЛиста = Ложь;
		
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЭлементСправочникаПрайсЛисты(Действие)
	
	Если Действие = "Сохранить" Тогда
		
		// Используется когда нет текущей ссылки.
		// Т.е. когда мы не можем использовать ОбновитьСуществующийПрайсЛист(СсылкаОбновляемого, НовыеДанныеЭлементаСправочника)
		// из-за проблемы заполнения 1 параметра
		//
		Записать();
		
	ИначеЕсли Действие = "Новый" Тогда
		
		ТекстВопроса = НСтр("ru ='Создать новый прайс-лист (без настроек) и продолжить работу?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОСозданииНовогоПрайсЛиста", ЭтотОбъект, );
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Действие = "Скопировать" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Основание", ОбъектВСтруктуру());
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		ПараметрыОткрытия.Основание.Автор = КэшЗначений.АвторизованныйПользователь;
		
		ОткрытьФорму("Справочник.ПрайсЛисты.Форма.ФормаЭлемента", ПараметрыОткрытия, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОСозданииНовогоПрайсЛиста(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Записать();
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.ПрайсЛисты.Форма.ФормаЭлемента", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуществующийПрайсЛист(СсылкаОбновляемого, НовыеДанныеЭлементаСправочника)
	
	Если НЕ ЗначениеЗаполнено(СсылкаОбновляемого)
		ИЛИ СсылкаОбновляемого.Недействителен Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		РегистрыСведений.НастройкиПользователей.Установить(СсылкаОбновляемого, "РабочийПрайсЛистОрганизации");
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ПрайсЛисты");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаОбновляемого);
		Блокировка.Заблокировать();
		
		ПрайсЛистОбъект = СсылкаОбновляемого.ПолучитьОбъект();
		Если НЕ ПрайсЛистОбъект = Неопределено Тогда // открыли обработку, а потом удалили ПЛ
			
			ЗаблокироватьДанныеДляРедактирования(СсылкаОбновляемого);
			
			ПрайсЛистОбъект.Заполнить(НовыеДанныеЭлементаСправочника);
			ПрайсЛистОбъект.Записать();
			
			Модифицированность = Ложь;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФайлами

&НаКлиенте
Процедура СохранитьПечатныеФормы(ЭтоПрограммноеСохранениеБольшогоПрайсЛиста)
	
	КэшЗначений.ЭтоПрограммноеСохранениеБольшогоПрайсЛиста = ЭтоПрограммноеСохранениеБольшогоПрайсЛиста;
	
	Оповещение = Новый ОписаниеОповещения("ПриПодключенииРасширения", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключенииРасширения(РасширениеПодключено, ДополнительныеПараметры) Экспорт
	
	РасширениеДляРаботыСФайламиПодключено = РасширениеПодключено;
	
	ПараметрыСохранения = Новый Структура;  	
	ПараметрыСохранения.Вставить("РасширениеДляРаботыСФайламиПодключено", РасширениеПодключено);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОбъектыПечати = Новый СписокЗначений;
		ОбъектыПечати.Добавить(Объект.Ссылка);
		
		ПараметрыСохранения.Вставить("ОбъектыПечати", ОбъектыПечати);
		
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.СохранениеПечатнойФормы", ПараметрыСохранения, ЭтотОбъект);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьПараметрыСохранениеПечатнойФормы(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение <> Неопределено 
		И ВыбранноеЗначение <> КодВозвратаДиалога.Отмена Тогда
		
		ИмяПрайсЛиста = СтандартноеИмяСохраняемогоФайла();
		
		ФайлыВоВременномХранилище = ПоместитьТабличныеДокументыВоВременноеХранилище(ВыбранноеЗначение, ИмяПрайсЛиста);
		Если ВыбранноеЗначение.ВариантСохранения = "СохранитьВПапку" Тогда
			
			СохранитьПечатныеФормыВПапку(ФайлыВоВременномХранилище, ВыбранноеЗначение.ПапкаДляСохранения);
			
		ИначеЕсли ВыбранноеЗначение.ВариантСохранения = "Присоединить" Тогда
			
			ЗаписанныеОбъекты = ПрисоединитьПечатныеФормыКОбъекту(ФайлыВоВременномХранилище, ВыбранноеЗначение.ОбъектДляПрикрепления);
			Если ЗаписанныеОбъекты.Количество() > 0 Тогда
				
				ОповеститьОбИзменении(ТипЗнч(ЗаписанныеОбъекты[0]));
				
			КонецЕсли;
			
			Для Каждого ЗаписанныйОбъект Из ЗаписанныеОбъекты Цикл
				
				Оповестить("Запись_Файл", Новый Структура, ЗаписанныйОбъект);
				
				ТекстСообщения = НСтр("ru='Присоединен файл %1'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ОбсужденияУНФКлиент.HTMLСсылка(ЗаписанныйОбъект));
				ОбсужденияУНФКлиент.ДобавитьСистемноеСообщение(ТекстСообщения, ВыбранноеЗначение.ОбъектДляПрикрепления);
			КонецЦикла;
			
			ПоказатьОповещениеПользователя(, , НСтр("ru = 'Сохранение завершено'"), БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПечатныеФормыВПапку(СписокФайловВоВременномХранилище, Знач Папка = "")
	
	#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Для Каждого ФайлДляЗаписи Из СписокФайловВоВременномХранилище Цикл
			ПолучитьФайл(ФайлДляЗаписи.АдресВоВременномХранилище, ФайлДляЗаписи.ИмяБезРасширения + "." + ФайлДляЗаписи.РасширениеБезТочки);
		КонецЦикла;
		Возврат;
	#КонецЕсли
	
	Папка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Папка);
	Для Каждого ФайлДляЗаписи Из СписокФайловВоВременномХранилище Цикл
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлДляЗаписи.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(УникальноеИмяФайла(Папка + ФайлДляЗаписи.ИмяБезРасширения + "." + ФайлДляЗаписи.РасширениеБезТочки));
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Сохранение успешно завершено'"), , НСтр("ru = 'в папку:'") + " " + Папка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УникальноеИмяФайла(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	Расширение = Файл.Расширение;
	Папка = Файл.Путь;
	
	Счетчик = 1;
	Пока Файл.Существует() Цикл
		Счетчик = Счетчик + 1;
		Файл = Новый Файл(Папка + ИмяБезРасширения + " (" + Счетчик + ")" + Расширение);
	КонецЦикла;
	
	Возврат Файл.ПолноеИмя;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличныеДокументыВоВременноеХранилище(НастройкиСохранения, ИмяПрайсЛиста)
	Перем ЗаписьZipФайла, ИмяАрхива;
	
	Результат = Новый Массив;
	
	// подготовка архива
	Если НастройкиСохранения.УпаковатьВАрхив Тогда
		
		ИмяАрхива = ПолучитьИмяВременногоФайла();
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
		
	КонецЕсли;
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	
	ВыбранныеФорматыСохранения = НастройкиСохранения.ФорматыСохранения;
	ПереводитьИменаФайловВТранслит = НастройкиСохранения.ПереводитьИменаФайловВТранслит;
	ТаблицаФорматов = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	
	// сохранение печатных форм
	Если КэшЗначений.ЭтоПрограммноеСохранениеБольшогоПрайсЛиста 
		И ЗначениеЗаполнено(АдресТабличногоДокументаДляСохранения) Тогда
	
		ПечатнаяФорма = ПолучитьИзВременногоХранилища(АдресТабличногоДокументаДляСохранения);
		ПечатнаяФорма.АвтоМасштаб = Истина;
		
		// Отображение большого прайс-листа на клиенте занимает много времени.
		// Пользователь естественно не дожидается и закрывает клиент (вкладку браузера).
		// При этом сеанс, а следовательно и его сеансовые данные не удалятся.
		// Из-за этого получаем огромный массив данных сеанса, которые мешают платформе провести "самоочистку".
		// Это приводит к тому, что в разделе с сеансовыми данным заканчивается свободное место и база падает.
		УдалитьИзВременногоХранилища(КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат.АдресРезультата);
		
		КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат = Неопределено;
		
	Иначе
		
		ПечатнаяФорма = ТабличныйДокумент;
		
	КонецЕсли;
	
	Если ПечатнаяФорма.Защита Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПечатнаяФорма.ВысотаТаблицы = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПереводитьИменаФайловВТранслит Тогда
		
		ИмяПрайсЛиста = СтроковыеФункции.СтрокаЛатиницей(ИмяПрайсЛиста);
		
	КонецЕсли;
	
	Для Каждого ТипФайла Из ВыбранныеФорматыСохранения Цикл
		
		Если ТипЗнч(ТипФайла) = Тип("Строка") Тогда
			
			ТипФайла = ТипФайлаТабличногоДокумента[ТипФайла];
			
		КонецЕсли;
		
		НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла))[0];
		
		ИмяФайла = ИмяПрайсЛиста + "." + НастройкиФормата.Расширение;
		ПолноеИмяФайла = УникальноеИмяФайла(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла);
		ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла);
		
		Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
			ВставитьКартинкиВHTML(ПолноеИмяФайла);
		КонецЕсли;
		
		Если ЗаписьZipФайла <> Неопределено Тогда
			
			ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
			
		Иначе
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
			
			ОписаниеФайла = Новый Структура;
			ОписаниеФайла.Вставить("Представление", 			ИмяПрайсЛиста);
			ОписаниеФайла.Вставить("ИмяБезРасширения",			ИмяПрайсЛиста);
			ОписаниеФайла.Вставить("РасширениеБезТочки",		НастройкиФормата.Расширение);
			ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
			
			Если ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT Тогда
				ОписаниеФайла.Вставить("Кодировка", "windows-1251");
			КонецЕсли;
			Результат.Добавить(ОписаниеФайла);
			
		КонецЕсли;
	КонецЦикла;
	
	// если архив подготовлен, записываем и помещаем его во временное хранилище
	Если ЗаписьZipФайла <> Неопределено Тогда
		
		ЗаписьZipФайла.Записать();
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
		
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Представление", 			ИмяПрайсЛиста);
		ОписаниеФайла.Вставить("ИмяБезРасширения",			ИмяПрайсЛиста);
		ОписаниеФайла.Вставить("РасширениеБезТочки",		"zip");
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
		
		Результат.Добавить(ОписаниеФайла);
		
		УдалитьФайлы(ИмяАрхива);
		
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПрисоединитьПечатныеФормыКОбъекту(ФайлыВоВременномХранилище, ОбъектДляПрисоединения)
	
	Результат = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		
		Для Каждого Файл Из ФайлыВоВременномХранилище Цикл
			
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор", 						Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", 				ОбъектДляПрисоединения);
			ПараметрыФайла.Вставить("ИмяБезРасширения", 			Файл.ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки", 			Файл.РасширениеБезТочки);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное",	ТекущаяДатаСеанса());
			
			Результат.Добавить(РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Файл.АдресВоВременномХранилище));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = ФайлHTML.ИмяБезРасширения + "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	// ожидается, что в папке будут только картинки
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ИмяПапкиКартинок + "\" + ФайлКартинки.Имя, КартинкаТекстом);
	КонецЦикла;
		
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры

#КонецОбласти

#Область ДлительнаяОперация

&НаКлиенте
Процедура СформироватьПрайсЛистНаКлиенте()
	
	ПараметрыПроцедуры = ОбъектВСтруктуру();
	
	СформироватьПрайсЛистНаСервере(ПараметрыПроцедуры);
	ПослеНачалаФормированияПрайсЛиста();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеНачалаФормированияПрайсЛиста()
	
	Если КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Если КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат.Статус <> "Выполняется" Тогда 
		
		ОбработатьРезультатФормированияПрайсЛиста(КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатФормированияПрайсЛиста", ЭтотОбъект, Неопределено);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания	= Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат, Обработчик, ПараметрыОжидания);
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатФормированияПрайсЛиста(ФоновоеЗаданиеРезультат, ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗаданиеРезультат = Неопределено Тогда // Нажали Отмена в длительной операции
		
		Возврат;
		
	КонецЕсли;
	
	Если ФоновоеЗаданиеРезультат.Статус = "Ошибка" Тогда
		
		АктуальностьПрайсЛиста("ERROR", Ложь, Ложь, ФоновоеЗаданиеРезультат.КраткоеПредставлениеОшибки);
		
		ДобавитьОшибкуЖурналаРегистрации(ФоновоеЗаданиеРезультат.ПодробноеПредставлениеОшибки);
		ВызватьИсключение ФоновоеЗаданиеРезультат.КраткоеПредставлениеОшибки;
		
	КонецЕсли;
	
	РезультатДлительнойОперацииВТабличныйДокументФормы(ФоновоеЗаданиеРезультат);
	
	КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеИдентификатор = Неопределено;
	
	Если КэшЗначений.ПараметрыДлительнойОперации.СохранитьВФайл Тогда
		
		АктуальностьПрайсЛиста("SAVE", Ложь, Ложь);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияПредупрежденияОРазмереПрайсЛиста", ЭтотОбъект);
		ОткрытьФорму("Обработка.ПрайсЛистыОрганизации.Форма.ФормаПредупреждения", Неопределено, ЭтаФорма, , , , ОписаниеОповещения);
		
	Иначе
		
		АктуальностьПрайсЛиста("OK", Ложь, Ложь);
		
		ТекстОповещения = НСтр("ru ='Прайс-лист сформирован.'");
		ПоказатьОповещениеПользователя(ТекстОповещения, , Заголовок);
		
		КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредупрежденияОРазмереПрайсЛиста(Результат, ДополнительныеПараметры) Экспорт
	
	СохранитьПечатныеФормы(Истина);
	
КонецПроцедуры

&НаСервере
Процедура РезультатДлительнойОперацииВТабличныйДокументФормы(ФоновоеЗаданиеРезультат)
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеРезультат.АдресРезультата);
	
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения.Свойство("ПоследняяКолонкаЗаголовка",	КэшЗначений.ПоследняяКолонкаЗаголовка);
	РезультатВыполнения.Свойство("ПоследняяКолонкаПрайсЛиста",	КэшЗначений.ПоследняяКолонкаПрайсЛиста);
	РезультатВыполнения.Свойство("ИменаКолонок", 				КэшЗначений.ИменаКолонок);
	
	РазмерКартинокMb = Окр(РезультатВыполнения.РазмерКартинокБайт/1048576, 0);
	Если РазмерКартинокMb >= КэшЗначений.ПредельноДопустимыРазмерКартинокМб Тогда
		
		КэшЗначений.ПараметрыДлительнойОперации.СохранитьВФайл = Истина;
		АдресТабличногоДокументаДляСохранения 
			= ПоместитьВоВременноеХранилище(РезультатВыполнения.ТабличныйДокумент, УникальныйИдентификатор);
		
	Иначе
		
		АдресТабличногоДокументаДляСохранения = "";
		ТабличныйДокумент = РезультатВыполнения.ТабличныйДокумент;
		КэшЗначений.ПрайсЛистЗаполнен = Истина;
		
		// Отображение большого прайс-листа на клиенте занимает много времени.
		// Пользователь естественно не дожидается и закрывает клиент (вкладку браузера).
		// При этом сеанс, а следовательно и его сеансовые данные не удалятся.
		// Из-за этого получаем огромный массив данных сеанса, которые мешают платформе провести "самоочистку".
		// Это приводит к тому, что в разделе с сеансовыми данным заканчивается свободное место и база падает.
		УдалитьИзВременногоХранилища(ФоновоеЗаданиеРезультат.АдресРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПрайсЛистНаСервере(ПараметрыПроцедуры)
	
	Если ЗначениеЗаполнено(КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеИдентификатор) Тогда
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеИдентификатор);
		КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеИдентификатор = Неопределено;
		
	КонецЕсли;
	
	ПараметрыПроцедуры.Вставить("Ошибки", Неопределено);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Прайс-лист организации, формирование'");
	ПараметрыВыполнения.ЗапуститьВФоне				= Истина;
	
	ИмяМетода = "Обработки.ПрайсЛистыОрганизации.СформироватьПрайсЛистОрганизации";
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат = РезультатФоновогоЗадания;
	КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеИдентификатор = РезультатФоновогоЗадания.ИдентификаторЗадания;
	
КонецПроцедуры

#КонецОбласти

#Область СКД

&НаСервере
Процедура ИнициализироватьНастройкиОтбораНоменклатурыСКД()
	
	СсылкаВоВременномХранилище = ПрайсЛистыСлужебный.ИнициализироватьНастройкиОтбораПрайсЛиста(УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СсылкаВоВременномХранилище);
	НастройкиОтбораНоменклатуры.Инициализировать(ИсточникНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНастройкиКолонокПрайсЛистаСКД()
	
	ИмяСхемыКД = ?(ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") = Истина, 
		"СКД_НоменклатураИХарактеристики", "СКД_Номенклатура");
	
	СхемаКомпоновкиДанных = Обработки.ПрайсЛистыОрганизации.ПолучитьМакет(ИмяСхемыКД);
	
	АдресСхемыКомпоновкиДанныхКолонок = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияОтбораНоменклатуры()
	
	НастройкиОтбораНоменклатуры.Настройки.Отбор.Элементы.Очистить();
	
	ПрайсЛистыСлужебный.СКДОтборНоменклатурыИзТабличнойЧасти(НастройкиОтбораНоменклатуры, Объект.ОтборНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТиповыеНастройкиОтбораНоменклатуры()
	
	ЭлементОтбора = НастройкиОтбораНоменклатуры.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Номенклатура.Недействителен");
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементОтбора = НастройкиОтбораНоменклатуры.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Номенклатура.ИсключитьИзПрайсЛистов");
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеТабличногоДокумента

&НаКлиенте
Функция ПроверитьУсловиеФильтраНаКлиенте(Знач ПроверяемоеЗначение)
	
	Если Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.Равно") Тогда
		
		Возврат ПроверяемоеЗначение = Объект.УсловнаяЦенаЗначение;
		
	ИначеЕсли Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.НеРавно") Тогда
		
		Возврат ПроверяемоеЗначение <> Объект.УсловнаяЦенаЗначение;
		
	ИначеЕсли Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.Больше") Тогда
		
		Возврат ПроверяемоеЗначение > Объект.УсловнаяЦенаЗначение;
		
	ИначеЕсли Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.БольшеИлиРавно") Тогда
		
		Возврат ПроверяемоеЗначение >= Объект.УсловнаяЦенаЗначение;
		
	ИначеЕсли Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.Меньше") Тогда
		
		Возврат ПроверяемоеЗначение < Объект.УсловнаяЦенаЗначение;
		
	ИначеЕсли Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.МеньшеИлиРавно") Тогда
		
		Возврат ПроверяемоеЗначение <= Объект.УсловнаяЦенаЗначение;
		
	ИначеЕсли Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.ВИнтервале") Тогда
		
		Возврат ПроверяемоеЗначение > Объект.УсловнаяЦенаЗначение И ПроверяемоеЗначение < Объект.УсловнаяЦенаЗначениеДо;
		
	ИначеЕсли Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.ВИнтервалеВключая") Тогда
		
		Возврат ПроверяемоеЗначение >= Объект.УсловнаяЦенаЗначение И ПроверяемоеЗначение <= Объект.УсловнаяЦенаЗначениеДо;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОформлениеСтрокиТабличногоДокумента(МассивВыделяемыхОбластей, СтруктураЦветовСтиля)
	
	Если МассивВыделяемыхОбластей.Количество() < 1 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.МаксимальнаяЦена = Истина Тогда
		 	
		НовыйЦветФона =  СтруктураЦветовСтиля.ЦветСтиляМаксимальнаяЦена;
		
	ИначеЕсли Объект.МинимальнаяЦена = Истина Тогда
		
		НовыйЦветФона = СтруктураЦветовСтиля.ЦветСтиляМинимальнаяЦена; 
		
	КонецЕсли;
	
	Для каждого ИмяОбласти Из МассивВыделяемыхОбластей Цикл
		
		ТабличныйДокумент.Область(ИмяОбласти).ЦветФона = НовыйЦветФона;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьЦенуПоУсловиюВПрайсЛистеДвеКолонки(ОбластьЯчейкиДокумента, СтруктураЦветовСтиля)
	Перем ТекущаяЦена;
	
	Если ОбластьЯчейкиДокумента = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураРасшифровки = ОбластьЯчейкиДокумента.Расшифровка;
	Если НЕ Объект.УсловнаяЦена 
		ИЛИ ТипЗнч(СтруктураРасшифровки) <> Тип("Структура") Тогда
		
		ОбластьЯчейкиДокумента.ЦветФона = СтруктураЦветовСтиля.ЦветСтиляТекущаяЦена;   
				
	Иначе
		
		СтруктураРасшифровки.Свойство("Цена", ТекущаяЦена);
		Если ТекущаяЦена = Неопределено Тогда
			
			ТекущаяЦена = 0;
			
		КонецЕсли;
		
		Если ТекущаяЦена = 0
			ИЛИ ПроверитьУсловиеФильтраНаКлиенте(ТекущаяЦена) <> Истина Тогда
			
			ОбластьЯчейкиДокумента.ЦветФона = СтруктураЦветовСтиля.ЦветСтиляТекущаяЦена; 			
		Иначе
			
			ОбластьЯчейкиДокумента.ЦветФона = СтруктураЦветовСтиля.ЦветСтиляУсловнаяЦена;			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеПрайсЛистаПолотно()
	
	МассивВыделяемыхОбластей = Новый Массив;
	
	// R3C2 - 3 строка, 2 колонка
	
	НомерПервойСтроки = ?(КэшЗначений.ОформлениеГраницаПоследнейПорции = 0, КэшЗначений.РазмерШапкиТабличногоДокумента, КэшЗначений.ОформлениеГраницаПоследнейПорции);
	
	Шаг = Мин(КэшЗначений.ОформлениеПредельноеЗначениеПорции, ТабличныйДокумент.ВысотаТаблицы - КэшЗначений.ОформлениеГраницаПоследнейПорции);
	КэшЗначений.ОформлениеГраницаПоследнейПорции = КэшЗначений.ОформлениеГраницаПоследнейПорции + Шаг;
	
	СтруктураЦветовСтиля = ПолучитьЦветаСтиляВыделенияСтрок();

	Для НомерСтроки = НомерПервойСтроки По КэшЗначений.ОформлениеГраницаПоследнейПорции Цикл
		
		МассивВыделяемыхОбластей.Очистить();
		
		МаксимальнаяЦена = Неопределено;
		МинимальнаяЦена = Неопределено;
		
		НомерКолонки = КэшЗначений.ПоследняяКолонкаЗаголовка;
		Для каждого ОписаниеКолонки Из КэшЗначений.ИменаКолонок Цикл
			
			НомерКолонки = НомерКолонки + 2;
			ИмяОбласти = СтрШаблон("R%1C%2:R%1C%3", Формат(НомерСтроки, "ЧГ="), Формат(НомерКолонки - 1, "ЧГ="), Формат(НомерКолонки, "ЧГ="));
			ТекущаяЦена		= 0;
			
			ТекущаяОбласть = ТабличныйДокумент.Область(ИмяОбласти);
			Если ТипЗнч(ТекущаяОбласть.Расшифровка) = Тип("Структура") Тогда
				
				ТекущаяОбласть.ЦветФона = СтруктураЦветовСтиля.ЦветСтиляТекущаяЦена; 
				ТекущаяОбласть.Расшифровка.Свойство("Цена", ТекущаяЦена);
				
				Если ТекущаяЦена = Неопределено Тогда
					
					ТекущаяЦена = 0;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущаяЦена = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если Объект.МаксимальнаяЦена = Истина Тогда
				
				Если МаксимальнаяЦена = Неопределено Тогда
					
					МаксимальнаяЦена = ТекущаяЦена;
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				ИначеЕсли ТекущаяЦена > МаксимальнаяЦена Тогда
					
					МаксимальнаяЦена = ТекущаяЦена;
					
					МассивВыделяемыхОбластей.Очистить();
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				ИначеЕсли ТекущаяЦена = МаксимальнаяЦена Тогда
					
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Объект.МинимальнаяЦена = Истина Тогда
				
				Если МинимальнаяЦена = Неопределено Тогда
					
					МинимальнаяЦена = ТекущаяЦена;
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				ИначеЕсли ТекущаяЦена < МинимальнаяЦена Тогда
					
					МинимальнаяЦена = ТекущаяЦена;
					
					МассивВыделяемыхОбластей.Очистить();
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				ИначеЕсли ТекущаяЦена = МинимальнаяЦена Тогда
					
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				КонецЕсли;
				
			КонецЕсли;
		
			Если Объект.УсловнаяЦена = Истина Тогда
				
				РезультатПроверки = ПроверитьУсловиеФильтраНаКлиенте(ТекущаяЦена);
				Если РезультатПроверки = Истина Тогда
					
					ТекущаяОбласть.ЦветФона = СтруктураЦветовСтиля.ЦветСтиляУсловнаяЦена;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОформлениеСтрокиТабличногоДокумента(МассивВыделяемыхОбластей, СтруктураЦветовСтиля);
		
	КонецЦикла;
	
	Если КэшЗначений.ОформлениеГраницаПоследнейПорции >= ТабличныйДокумент.ВысотаТаблицы Тогда
		
		КэшЗначений.ОформлениеГраницаПоследнейПорции = 0;
		
	Иначе
		
		ПодключитьОбработчикОжидания("ОформлениеПрайсЛистаПолотно", 0.5, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеПрайсЛистаДвеКолонки()
	
	МассивВыделяемыхОбластей = Новый Массив;
	
	// R3C2 - 3 строка, 2 колонка
	
	НомерПервойСтроки = ?(КэшЗначений.ОформлениеГраницаПоследнейПорции = 0, КэшЗначений.РазмерШапкиТабличногоДокумента, КэшЗначений.ОформлениеГраницаПоследнейПорции);
	
	Шаг = Мин(КэшЗначений.ОформлениеПредельноеЗначениеПорции, ТабличныйДокумент.ВысотаТаблицы - КэшЗначений.ОформлениеГраницаПоследнейПорции);
	КэшЗначений.ОформлениеГраницаПоследнейПорции = КэшЗначений.ОформлениеГраницаПоследнейПорции + Шаг;
	
	СтруктураЦветовСтиля = ПолучитьЦветаСтиляВыделенияСтрок();
	
	ЦенаПерваяКолонкаНомер = 0;
	ЦенаВтораяКолонкаНомер = 0;
	
	Для НомерСтроки = НомерПервойСтроки По КэшЗначений.ОформлениеГраницаПоследнейПорции Цикл
		
		МассивВыделяемыхОбластей.Очистить();
		
		ОбластьЦенаПерваяКолонка = Неопределено;
		ОбластьЦенаВтораяКолонка = Неопределено;
		
		Если ЦенаПерваяКолонкаНомер = 0
			ИЛИ ЦенаВтораяКолонкаНомер = 0 Тогда
			
			Для НомерКолонки = 2 По 20 Цикл
				
				ОбластьЦена = ТабличныйДокумент.Область(СтрШаблон("R%1C%2", Формат(НомерСтроки, "ЧГ="), НомерКолонки));
				Если ТипЗнч(ОбластьЦена.Расшифровка) <> Тип("Структура") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ЦенаПерваяКолонкаНомер = 0 Тогда
					
					ЦенаПерваяКолонкаНомер = НомерКолонки;
					ОбластьЦенаПерваяКолонка = ОбластьЦена;
					
				ИначеЕсли ЦенаВтораяКолонкаНомер = 0 Тогда
					
					ЦенаВтораяКолонкаНомер = НомерКолонки;
					ОбластьЦенаВтораяКолонка = ОбластьЦена;
					
				Иначе
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ОбластьЦенаПерваяКолонка = ТабличныйДокумент.Область(СтрШаблон("R%1C%2", Формат(НомерСтроки, "ЧГ="), ЦенаПерваяКолонкаНомер));
			ОбластьЦенаВтораяКолонка = ТабличныйДокумент.Область(СтрШаблон("R%1C%2", Формат(НомерСтроки, "ЧГ="), ЦенаВтораяКолонкаНомер));
			
		КонецЕсли;
		
		ВыделитьЦенуПоУсловиюВПрайсЛистеДвеКолонки(ОбластьЦенаПерваяКолонка, СтруктураЦветовСтиля);
		ВыделитьЦенуПоУсловиюВПрайсЛистеДвеКолонки(ОбластьЦенаВтораяКолонка, СтруктураЦветовСтиля);
		
	КонецЦикла;
	
	Если КэшЗначений.ОформлениеГраницаПоследнейПорции >= ТабличныйДокумент.ВысотаТаблицы Тогда
		
		КэшЗначений.ОформлениеГраницаПоследнейПорции = 0;
		
	Иначе
		
		ПодключитьОбработчикОжидания("ОформлениеПрайсЛистаДвеКолонки", 0.5, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеПрайсЛиста()
	
	Если Объект.ПечатьПрайсЛиста = ПредопределенноеЗначение("Перечисление.ВариантыПечатиПрайсЛиста.Полотно") Тогда
		
		ПодключитьОбработчикОжидания("ОформлениеПрайсЛистаПолотно", 0.5, Истина);
		
	ИначеЕсли Объект.ПечатьПрайсЛиста = ПредопределенноеЗначение("Перечисление.ВариантыПечатиПрайсЛиста.ДвеКолонки") Тогда
		
		ПодключитьОбработчикОжидания("ОформлениеПрайсЛистаДвеКолонки", 0.5, Истина);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтернетПоддержкаПользователей_Новости

//ИнтернетПоддержкаПользователей.Новости
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, "ПриОткрытии");
	
КонецПроцедуры


// Конец ИнтернетПоддержкаПользователей.Новости

#КонецОбласти

#КонецОбласти

