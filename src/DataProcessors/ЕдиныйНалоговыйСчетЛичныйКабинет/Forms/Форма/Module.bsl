#Область ОписаниеПеременных

&НаСервере
Перем КонтекстЭДОСервер;

&НаКлиенте
Перем ШагПрогрессора;

&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

&НаКлиенте
Перем МенеджерКриптографии Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка справочников
	ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ЗаполнитьПоставляемыеДанныеСправочников();
	
	ПоследовательностьМетодов = ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ПоследовательностьМетодов();
	СписокСправочников        = ЕдиныйНалоговыйСчетИнтеграцияВнутренний.СписокСправочников();
	
	Объект.Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	ЭтоМедленныйРежимРаботы = ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ЭтоМедленныйРежимРаботы();
	ИнтервалИсполненияМетодов = ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ИнтервалИсполненияМетодов();
	
	МестоХраненияКлюча = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ОпределитьМестоХраненияКлюча();
	
	ТекущаяОрганизация = РегламентированнаяОтчетность.ГоловнаяОрганизация(Параметры.Организация);
	
	// Определяем организацию по-умолчанию
	Если НЕ ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		ТекущаяОрганизация = ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ОсновнаяОрганизация();
	Иначе
		Объект.Организация = РегламентированнаяОтчетность.ГоловнаяОрганизация(ТекущаяОрганизация);
	КонецЕсли;
	
	// ЛК предоставляет данные тоько в целом по головной организации
	Если ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		Объект.Организация = РегламентированнаяОтчетность.ГоловнаяОрганизация(ТекущаяОрганизация);
		СохранитьПервичнуюНастройкуПодключения();
	КонецЕсли;
	
	Элементы.Баннер.Видимость = Ложь;
	
	ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	
	СобратьВсеДанныеЕдиногоНалоговогоСчета();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
	УчетнаяЗаписьОрганизации();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ПереключитьСтраницыПередПолучениемДанных();
	СобратьВсеДанныеЕдиногоНалоговогоСчета();
	УчетнаяЗаписьОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстИнформацияДанныеОтсутствуютОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстИнформацияНеподключеннаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(
		Объект.Организация, ЭтотОбъект, , , , , Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ТекстДекорацияНесогласиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПодключенДокументооборотСКонтролирующимОрганом И ЕстьДоступКЭДО Тогда
		Письмо = ПодготовитьПисьмоВФНС();
		Если Письмо <> Неопределено Тогда
			СтруктураПараметров = Новый Структура("Ключ", Письмо);
			ОткрытьФорму("Справочник.ПерепискаСКонтролирующимиОрганами.ФормаОбъекта", СтруктураПараметров);
		КонецЕсли;
	Иначе
		ПерейтиПоНавигационнойСсылке("https://www.nalog.gov.ru/rn77/service/unblock/");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДекорацияДанныеНеконсистентныОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимСверкиПриИзменении(Элемент)
	
	РежимСверкиОбработатьИзменение();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	ОткрытьНастройкиИнтеграции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПополнитьКошелек(Команда)
	
	Если ПоддерживаетсяВводПлатежныхДокументов Тогда
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиентПереопределяемый.СоздатьПлатежныйДокумент(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияБаннерОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "СогласиеНаРаскрытиеНалоговойТайны" Тогда
		СоздатьСогласиеНаРаскрытиеНалоговойТайны();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "НастройкиЛичногоКабинетаЕНС" Тогда
		ОткрытьНастройкиИнтеграции();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеЗаявленияИЗапросы(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Сверки"));
	
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность",
		ПараметрыФормы,
		ЭтотОбъект,
		"1С-Отчетность");
	
	Оповестить("Открытие формы 1С-Отчетность", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеУведомления(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Уведомления"));
	
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность",
		ПараметрыФормы,
		ЭтотОбъект,
		"1С-Отчетность");
	
	Оповестить("Открытие формы 1С-Отчетность", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	ЗакрытьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаОтмену(Команда)
	
	СоздатьУведомлениеОСпецрежимахНалогообложения("ОтменаЗачетаНалога");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСправкуОСальдоЕНС(Команда)
	СоздатьЗапросИОН("СправкаОНаличииСальдо");
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСправкуОбИсполненииОбязанностей(Команда)
	СоздатьЗапросИОН("ПредставлениеСправкиОбИсполненииОбязанностейПоУплате");
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСправкуОПринадлежностиСуммЕНП(Команда)
	СоздатьЗапросИОН("СправкаОПринадлежностиСумм");
КонецПроцедуры

&НаКлиенте
Процедура СформироватьУведомлениеОбИсчисленныхСУммах(Команда)
	СоздатьУведомлениеОСпецрежимахНалогообложения("ИсчисленныеСуммыНалогов");
КонецПроцедуры

&НаКлиенте
Процедура ЗапросАктаСверки(Команда)
	СоздатьЗапросИОН("ПредставлениеАктовСверкиРасчетов");
КонецПроцедуры

&НаКлиенте
Процедура КнВсеОбязательства(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ВсеОбязательства");
КонецПроцедуры

&НаКлиенте
Процедура КнЗадолженность(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("Задолженность");
КонецПроцедуры

&НаКлиенте
Процедура КнПредстоящиеПлатежи(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ПредстоящиеПлатежи");
КонецПроцедуры

&НаКлиенте
Процедура КнЗарезервировано(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("Зарезервировано");
КонецПроцедуры

&НаКлиенте
Процедура КнОперацииЕНП(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ОперацииЕНП");
КонецПроцедуры

&НаКлиенте
Процедура КнИсторияЕНС(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ИсторияЕНС");
КонецПроцедуры

&НаКлиенте
Процедура КнПроцедурыВзыскания(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ПроцедурыВзыскания");
КонецПроцедуры

&НаКлиенте
Процедура КнПлатежи(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("Платежи");
КонецПроцедуры

&НаКлиенте
Процедура КнОтчеты(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("Отчеты");
КонецПроцедуры

&НаКлиенте
Процедура КнНепроведенныеПлатежи(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("НепроведенныеПлатежи");
КонецПроцедуры

&НаКлиенте
Процедура РаспорядитьсяСальдо(Команда)
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("ВозвратЕдиногоНалоговогоПлатежа", НСтр("ru = 'Заявление о распоряжении путем возврата'"));
	СписокКоманд.Добавить("ЗаявлениеОЗачетеНалога", НСтр("ru = 'Заявление о распорядении путем зачета в счет предстоящей обязанности'"));
	
	Обработчик = Новый ОписаниеОповещения("РаспорядитьсяСальдоЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Обработчик, СписокКоманд, Элементы.РаспорядитьсяСальдо);
	
КонецПроцедуры

#Область КомандыРежимСверки

&НаКлиенте
Процедура ПлатежиВсеОперации(Команда)
	
	ЕдиныйНалоговыйСчетЛичныйКабинетКлиентСерверПереопределяемый.ПереключениеКомандПлатежиРасхождение(
		ЭтотОбъект, "Платежи", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиТолькоРасхождения(Команда)
	
	ЕдиныйНалоговыйСчетЛичныйКабинетКлиентСерверПереопределяемый.ПереключениеКомандПлатежиРасхождение(
		ЭтотОбъект, "Платежи", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыВсеОперации(Команда)
	
	ПереключениеКомандОтчетыРасхождение(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыТолькоРасхождения(Команда)
	
	ПереключениеКомандОтчетыРасхождение(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НепроведенныеПлатежиВсеОперации(Команда)
	
	ПереключениеКомандНепроведенныеПлатежиРасхождение(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НепроведенныеПлатежиТолькоРасхождения(Команда)
	
	ПереключениеКомандНепроведенныеПлатежиРасхождение(Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиТаблицаПлатежи

&НаКлиенте
Процедура ТаблицаПлатежиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЕдиныйНалоговыйСчетЛичныйКабинетКлиентПереопределяемый.ТаблицаПлатежиВыбор(
		ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицаОтчеты

&НаКлиенте
Процедура ТаблицаОтчетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЕдиныйНалоговыйСчетЛичныйКабинетКлиентПереопределяемый.ТаблицаОтчетыВыбор(
		ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицаНепроведенныеПлатежи

&НаКлиенте
Процедура ТаблицаНепроведенныеПлатежиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЕдиныйНалоговыйСчетЛичныйКабинетКлиентПереопределяемый.ТаблицаНепроведенныеПлатежиВыбор(
		ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Заголовок = НСтр("ru = 'Единый налоговый счет'");
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Единый налоговый счет (%1)'"),
			Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформационнуюПанельБРО()
	
	ПараметрыОтображения = ДокументооборотСКО.ПараметрыИнформационнойПанелиБРО();
	ПараметрыОтображения.Организация = Объект.Организация;
	ПараметрыОтображения.Группа = Элементы.ИнформационнаяПанельБРО;
	ПараметрыОтображения.Форма = ЭтотОбъект;
	ДокументооборотСКО.ОбновитьИнформационнуюПанельБРО(
		ПараметрыОтображения, 
		Перечисления.ТарифыОператораЭДО.ПромоЕНС);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнформационнаяПанельБРООбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ДокументооборотСКОКлиент.ИнформационнаяПанельБРОНажатие(
		ЭтотОбъект, 
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка);
	
КонецПроцедуры 

&НаСервере
Функция ПараметрыСбораДанных()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация",          Объект.Организация);
	ПараметрыЗаполнения.Вставить("Период",               Объект.Период);
	ПараметрыЗаполнения.Вставить("БлижайшийСрокУплаты",  БлижайшийСрокУплаты);
	ПараметрыЗаполнения.Вставить("РежимСверкиДоступен",  РежимСверкиДоступен);
	ПараметрыЗаполнения.Вставить("СтруктураТаблиц",      СформироватьСтруктуруТаблиц());
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервере
Функция ВыполнитьСборДанныхНаСервере()
	
	ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.УстановитьПараметрыСписков(ЭтотОбъект);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Единый налоговый счет: сбор данных'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыЗаполнения = ПараметрыСбораДанных();
	
	НаименованиеЗадания = НСтр("ru = 'Единый налоговый счет: сбор данных'");
	Результат = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ПодготовитьДанные",
		ПараметрыЗаполнения);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруТаблиц()
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТаблицаСальдо", ТаблицаСальдо.Выгрузить());
	СтруктураТаблиц.Вставить("ТаблицаСальдоКНО", ДанныеФормыВЗначение(ТаблицаСальдоКНО, Тип("ДеревоЗначений")));
	СтруктураТаблиц.Вставить("ТаблицаОперацииЕНП", ТаблицаОперацииЕНП.Выгрузить());
	СтруктураТаблиц.Вставить("ТаблицаПлатежи", ТаблицаПлатежи.Выгрузить());
	СтруктураТаблиц.Вставить("ТаблицаОтчеты", ТаблицаОтчеты.Выгрузить());
	СтруктураТаблиц.Вставить("ТаблицаНепроведенныеПлатежи", ТаблицаНепроведенныеПлатежи.Выгрузить());
	
	Возврат СтруктураТаблиц;
	
КонецФункции

&НаКлиенте
Процедура СобратьВсеДанныеЕдиногоНалоговогоСчета() Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоМедленныйРежимРаботы ИЛИ ЭтоВебКлиент Тогда
		Интервал = ?(ЭтоВебКлиент, 1, 0.5);
		ПодключитьОбработчикОжидания("Подключаемый_СобратьДанныеЕдиногоНалоговогоСчета", Интервал, Истина);
	Иначе
		СобратьДанныеЕдиногоНалоговогоСчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СобратьДанныеЕдиногоНалоговогоСчета()
	
	СобратьДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанныеЕдиногоНалоговогоСчета()
	
	ПараметрыЗаданияОпросаСервера = "";
	
	Результат = ВыполнитьСборДанныхНаСервере();
	
	Если Результат.Статус <> "Ошибка" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СобратьДанныеЕдиногоНалоговогоСчетаЗавершение", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОписаниеОповещения, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанныеЕдиногоНалоговогоСчетаЗавершение(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		АдресХранилища = ДлительнаяОперация.АдресРезультата;
		ЗагрузитьРезультат();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатНаСервере()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СброситьДаные();
		
		ЗагрузитьДаные(Результат.СтруктураТаблиц);
		
		ПолучитьИтоговыеДанныеПоЕдиномуНалоговомуСчету();
		
		ПолучитьДатуПоследнегоОбновления();
		
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультат()
	
	ЗагрузитьРезультатНаСервере();
	ОтрисоватьДерево();
	Если ПоказатьОповещение Тогда
		Пояснение = "";
		Если ДанныеДляЗагрузкиОтсутствуют Тогда
			Пояснение = НСтр("ru = 'Данные для загрузки отсутствуют'");
		КонецЕсли;
		ПоказатьОповещениеПользователя(НСтр("ru = 'Обновление данных ЕНС завершено'"),
			"e1cib/app/Обработка.ЕдиныйНалоговыйСчетЛичныйКабинет",
			Пояснение);
		ЕдиныйНалоговыйСчетИнтеграцияКлиент.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
			, СтрШаблон(НСтр("ru = 'Обновление данных ЕНС завершено. Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
		ПоказатьОповещение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтрисоватьДерево()
	
	КоллекцияЭлементовДерева = ТаблицаСальдоКНО.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Если Строка.Развернуть Тогда
			Элементы.ТаблицаСальдоКНОЗадолженность.Развернуть(ИдентификаторСтроки);
			Элементы.ТаблицаСальдоКНО.Развернуть(ИдентификаторСтроки);
		Иначе
			Элементы.ТаблицаСальдоКНОЗадолженность.Свернуть(ИдентификаторСтроки);
			Элементы.ТаблицаСальдоКНО.Свернуть(ИдентификаторСтроки);
			ПодчиненнаяКоллекцияЭлементовДерева = Строка.ПолучитьЭлементы();
			Для Каждого ПодчиненнаяСтрока Из ПодчиненнаяКоллекцияЭлементовДерева Цикл
				ИдентификаторПодчиненнойСтроки = ПодчиненнаяСтрока.ПолучитьИдентификатор();
				Элементы.ТаблицаСальдоКНОЗадолженность.Свернуть(ИдентификаторПодчиненнойСтроки);
				Элементы.ТаблицаСальдоКНО.Свернуть(ИдентификаторПодчиненнойСтроки);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	ПередПодготовкойДанныхНаСервере();
	Если ТребуетсяОбновлениеДанныхФормы Тогда
		СобратьВсеДанныеЕдиногоНалоговогоСчета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеДокументооротаСФНС()
	
	ПодключенДокументооборотСКонтролирующимОрганом =
		ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
							Объект.Организация, Перечисления.ТипыКонтролирующихОрганов.ФНС, Истина);
							
	ПодключенДокументооборотСКонтролирующимОрганомДляПользователя =
		ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
							Объект.Организация, Перечисления.ТипыКонтролирующихОрганов.ФНС, Истина, Истина);
							
	ЕстьДоступКЭДО = ПодключенДокументооборотСКонтролирующимОрганомДляПользователя
		И ИнтерфейсыВзаимодействияБРО.УТекущегоПользователяЕстьДоступКЭДО();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСостояниеИнтеграции()
	
	СостояниеПодключения = РегистрыСведений.СостоянияПодключенияЕНС.ПолучитьСостяниеПодключения(Объект.Организация);
	ИнтеграцияПодключена  = СостояниеПодключения.ИнтеграцияПодключена;
	ФоновыйРежимПодключен = СостояниеПодключения.ИспользоватьФоновыйРежим;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьОрганизации()
	
	УчетнаяЗапись                             = "";
	ОтпечатокСертификата                      = "";
	ИспользуетсяДоверенностьНаПолучениеДанных = Ложь;
	НомерМашиночитаемойДоверенности           = "";
	ЛицензияПросрочена                        = Ложь;

	Если ПодключенДокументооборотСКонтролирующимОрганом И ЕстьДоступКЭДО Тогда
		УчетнаяЗапись = КонтекстЭДОКлиент.УчетнаяЗаписьОрганизации(Объект.Организация);
		ОтпечатокСертификата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтпечатокСертификата()
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	Если КонтекстЭДОСервер = Неопределено Тогда 
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонецЕсли;
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СертификатПользователя = Мультирежим.СертификатПользователя(УчетнаяЗапись);
	Если СертификатПользователя <> Неопределено Тогда
		ОтпечатокСертификата = СертификатПользователя.Отпечаток;
	КонецЕсли;
	
	ЛицензияПросрочена =
		КонтекстЭДОСервер.ЛицензияПросрочена(УчетнаяЗапись);
		
КонецПроцедуры

#Область ВспомогательныеОбработчикиСобытий

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОшибкаРаботыСервиса = Ложь;
	
	ПереключитьСтраницыПередОбработкойДанных();
	
	СохранитьПервичнуюНастройкуПодключения();
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьОбновлениеДанныхФормы()
	
	ТребуетсяОбновлениеДанныхФормы = ДатаПоследнегоОбновления <>
		ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ПолучитьДатуПоследнегоОбновления(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ПередПодготовкойДанныхНаСервере()
	
	ПроверитьНеобходимостьОбновлениеДанныхФормы();
	Если ТребуетсяОбновлениеДанныхФормы Тогда
		ПереключитьСтраницыПередОбработкойДанных();
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрекратитьОбновлениеДанных()
	
	ПереключитьСтраницыПередОбработкойДанных();
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ЭтоЮридическоеЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Объект.Организация);
	РегистрацияВНалоговомОргане = ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ОсновнаяРегистрацияВНалоговомОргане(Объект.Организация);
	
	ЕдиныйНалоговыйСчетИнтеграцияФормыПереопределяемый.ПоддерживаетсяВводПлатежныхДокументов(
		ПоддерживаетсяВводПлатежныхДокументов, Объект.Организация);
	
	ДанныеОтсутствуют = Истина;
	
	ПроверитьПодключениеДокументооротаСФНС();
	ПроверитьСостояниеИнтеграции();
	ОбновитьИнформационнуюПанельБРО();
	ЗаполнитьСписокДоступныхОрганизаций();
	
	Если ПодключенДокументооборотСКонтролирующимОрганом Тогда
		ПолучитьДатуПоследнегоОбновления();
		ОформитьБаннер();
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
	ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ПодготовитьФормуНаСервере(ЭтотОбъект);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПервичнуюНастройкуПодключения()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СостоянияПодключенияЕНС.СохранитьПервичнуюНастройкуПодключения(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхОрганизаций()
	
	СписокВыбора = Элементы.Организация.СписокВыбора;
	СписокВыбора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Значение,
	|	Организации.Представление КАК Представление
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = Организации.ГоловнаяОрганизация";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеБлижайшегоПлатежа()
	
	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("Организация", Объект.Организация);
	ПараметрыПоиска.Вставить("Период",      Объект.Период);
	ДанныеБлижайшегоПлатежа = ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ДанныеБлижайшегоПлатежа(ПараметрыПоиска);
	
	БлижайшийСрокУплаты = ДанныеБлижайшегоПлатежа.БлижайшийСрокУплаты;
	БлижайшийПлатеж     = ДанныеБлижайшегоПлатежа.БлижайшийПлатеж;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДатуПоследнегоОбновления()
	
	ДатаПоследнегоОбновления =
		ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ПолучитьДатуПоследнегоОбновления(Объект.Организация);
	
	ДанныеКонсистенты =
		ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ДанныеКонсистенты(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИтоговыеДанныеПоЕдиномуНалоговомуСчету()
	
	ДанныеОтсутствуют = Не ЗначениеЗаполнено(ТаблицаСальдо);
	
	Если Не ДанныеОтсутствуют Тогда
		
		ОсновнаяЗапись = ТаблицаСальдо[0];
		
		ЕстьПениШтрафы           = ОсновнаяЗапись.ПениШтрафы > 0;
		ЕстьПредстоящиеПлатежи   = ОсновнаяЗапись.ПредстоящиеПлатежи > 0;
		ЕстьМерыВзыскания        = ОсновнаяЗапись.ЕстьМерыВзыскания;
		ЕстьЗадолженность        = ОсновнаяЗапись.СальдоЕНС < 0;
		ЕстьРезервы              = ОсновнаяЗапись.Зарезервировано > 0;
		
	КонецЕсли;
	
	ПолучитьДанныеБлижайшегоПлатежа();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДаные(СтруктураТаблиц)
	
	ТаблицаСальдо.Загрузить(СтруктураТаблиц.ТаблицаСальдо);
	ЗначениеВДанныеФормы(СтруктураТаблиц.ТаблицаСальдоКНО, ТаблицаСальдоКНО);
	ТаблицаОперацииЕНП.Загрузить(СтруктураТаблиц.ТаблицаОперацииЕНП);
	ТаблицаОперацииЕНП.Сортировать("ДатаОперации Убыв, Порядок Возр");
	ТаблицаПлатежи.Загрузить(СтруктураТаблиц.ТаблицаПлатежи);
	ТаблицаПлатежи.Сортировать("ДатаОперации Убыв");
	ТаблицаОтчеты.Загрузить(СтруктураТаблиц.ТаблицаОтчеты);
	ТаблицаОтчеты.Сортировать("ДатаОперации Убыв");
	ТаблицаНепроведенныеПлатежи.Загрузить(СтруктураТаблиц.ТаблицаНепроведенныеПлатежи);
	ТаблицаНепроведенныеПлатежи.Сортировать("СрокУплаты Возр");
	
КонецПроцедуры

&НаСервере
Процедура СброситьДаные()
	
	ДанныеОтсутствуют         = Истина;
	ЕстьПредстоящиеПлатежи    = Ложь;
	ЕстьМерыВзыскания         = Ложь;
	ЕстьПениШтрафы            = Ложь;
	ЕстьЗадолженность         = Ложь;
	ЕстьРезервы               = Ложь;
	
	ОчиститьТаблицыДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицыДанных()
	
	ТаблицаСальдо.Очистить();
	ТаблицаСальдоКНО.ПолучитьЭлементы().Очистить();
	ТаблицаОперацииЕНП.Очистить();
	ТаблицаПлатежи.Очистить();
	ТаблицаОтчеты.Очистить();
	ТаблицаНепроведенныеПлатежи.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьСтраницыПередОбработкойДанных()
	
	Элементы.ГруппаДанныеСтраницы.ТекущаяСтраница = Элементы.СтраницаОжидание;
	Элементы.ГруппаДатаАктуальности.Видимость     = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьСтраницыПередПолучениемДанных()
	
	Элементы.ГруппаДанныеСтраницы.ТекущаяСтраница = Элементы.СтраницаПромежуточная;
	Элементы.ГруппаДатаАктуальности.Видимость     = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьОтображениеПоказателей(ИмяРаздела)
	
	ТекущаяСтраницаРасшифровки  = Элементы["СтраницаРасшифровка" + ИмяРаздела];
	Элементы.ГруппаРасшифровкаДанных.ТекущаяСтраница = ТекущаяСтраницаРасшифровки;
	
	ЕдиныйНалоговыйСчетЛичныйКабинетКлиентСерверПереопределяемый.ПереключениеКомандПлатежиРасхождение(
		ЭтотОбъект, ИмяРаздела, Ложь);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УправлениеФормой()
	
	ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#Область АвторизацияИПолучениеДанных

&НаКлиенте
Процедура ОбновитьДанныеЕдиногоНалоговогоСчета()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ПередОбновлениемДанныхЕдиногоНалоговогоСчета(ЭтотОбъект);
	
	ПоказатьОповещение = Истина;
	ПереключитьСтраницыПередОбработкойДанных();
	
	ШагПрогрессора = 0;
	УстановитьПрогрессор();
	
	ОповещениеПослеПолученияСертификата = Новый ОписаниеОповещения(
		"ПослеПолученияСертификата", ЭтотОбъект);
	ДополнительныеПараметры = Новый Структура("ОповещениеПослеПолученияСертификата", ОповещениеПослеПолученияСертификата);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеСозданияМенеджераКриптографии", ЭтотОбъект, ДополнительныеПараметры);
	КриптографияЭДКОКлиент.СоздатьМенеджерКриптографии(Оповещение, Ложь,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		МенеджерКриптографии = Результат.МенеджерКриптографии;
		Если ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
			СертификатНачалоВыбораЗавершение(
				Новый Структура("Выполнено, ВыбранноеЗначение", Истина, ОтпечатокСертификата),
				ВходящийКонтекст);
		Иначе
			ВыбратьСертификатПодписанта(ВходящийКонтекст);
		КонецЕсли;
		
	Иначе
		ОшибкаРаботыСервиса = Истина;
		ПараметрыЗаданияОпросаСервера = "";
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСертификатПодписанта(ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"СертификатНачалоВыбораЗавершение", ЭтотОбъект, ВходящийКонтекст);

	КриптографияЭДКОКлиент.ВыбратьСертификат(
		Оповещение, МестоХраненияКлюча, Сертификат, "MY",,,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатНачалоВыбораЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		Если ТипЗнч(Результат.ВыбранноеЗначение) = Тип("Структура") Тогда
			Сертификат = Результат.ВыбранноеЗначение.Отпечаток;
		ИначеЕсли ТипЗнч(Результат.ВыбранноеЗначение) = Тип("Строка") Тогда
			Сертификат = Результат.ВыбранноеЗначение;
		Иначе
			Для Каждого Стр Из Результат.ВыбранноеЗначение Цикл
				Сертификат = Стр.Отпечаток;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Сертификат",
			Сертификат);
		ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияСертификата",
			ВходящийКонтекст.ОповещениеПослеПолученияСертификата);
		
		Оповещение = Новый ОписаниеОповещения("НайтиСертификатПоОтпечаткуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		КриптографияЭДКОКлиент.НайтиСертификатПоОтпечатку(Оповещение, Сертификат, "MY", Ложь, Ложь, МенеджерКриптографии);
		
	Иначе
		ОшибкаРаботыСервиса = Истина;
		ПараметрыЗаданияОпросаСервера = "";
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСертификатПоОтпечаткуЗавершение(Результат, ВходящийКонтекст) Экспорт 
	
	Если Результат.Выполнено
		И Результат.СертификатНайден Тогда
		
		УстановитьПрогрессор();
		
		СертификатПодписанта = Результат.СвойстваСертификата;
		
		СвойстваВладельца = КонтекстЭДОКлиент.РазобратьСтрокуСубъекта(СертификатПодписанта.Владелец);
		ИспользуетсяДоверенностьНаПолучениеДанных =
			СвойстваВладельца.Получить("OID1_2_643_100_5") = Неопределено И СвойстваВладельца.Получить("OID1_2_643_100_1") = Неопределено
			И СвойстваВладельца.Получить("OGRN") = Неопределено И СвойстваВладельца.Получить("OGRNIP") = Неопределено;
			
		ВладелецЭЦПСНИЛС = СвойстваВладельца.Получить("OID1_2_643_100_3");
		Если Не ЗначениеЗаполнено(ВладелецЭЦПСНИЛС) Тогда
			ВладелецЭЦПСНИЛС = СвойстваВладельца.Получить("SNILS");
		КонецЕсли;
		ПолучитьНомерМашиночитаемойДоверенности(ВладелецЭЦПСНИЛС);
		
		Если ИспользуетсяДоверенностьНаПолучениеДанных И Не ЗначениеЗаполнено(НомерМашиночитаемойДоверенности) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Отсутствуют данные о машиночитаемой доверенности'"));
			ЕдиныйНалоговыйСчетИнтеграцияКлиент.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
				, СтрШаблон(НСтр("ru = 'Отсутствуют данные о машиночитаемой доверенности. Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
			УправлениеФормой();
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ИзвлечьИнформациюСертификата", ЭтотОбъект, ВходящийКонтекст);
		КриптографияЭДКОКлиент.ЭкспортироватьСертификатВBase64(Оповещение,
			СертификатПодписанта,
			Ложь,
			МенеджерКриптографии);
		
	ИначеЕсли Не Результат.СертификатНайден Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не найдены данные о сертификате подписи'"));
		ЕдиныйНалоговыйСчетИнтеграцияКлиент.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
			, СтрШаблон(НСтр("ru = 'Не найдены данные о сертификате подписи. Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНомерМашиночитаемойДоверенности(ВладелецЭЦПСНИЛС)
	
	НомерМашиночитаемойДоверенности = "";
	Если Не ИспользуетсяДоверенностьНаПолучениеДанных Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	НомерМашиночитаемойДоверенности =
		ЕдиныйНалоговыйСчетИнтеграцияВнутренний.НомерМашиночитаемойДоверенности(Объект.Организация, ВладелецЭЦПСНИЛС);
	
КонецПроцедуры

&НаКлиенте
Функция ИзвлечьИнформациюСертификата(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		СертификатПодписантаВрем = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СертификатПодписанта);
		СертификатПодписантаВрем.Вставить("Сертификат", Результат.СтрокаBase64);
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(УчетнаяЗапись);
		КриптографияЭДКОКлиентСервер.ЗаполнитьМестоХраненияКлюча(МестоХраненияКлюча, СертификатПодписантаВрем);
		
		СертификатПодписанта = Новый ФиксированнаяСтруктура(СертификатПодписантаВрем);
		
		ПредставлениеСертификата = ТегНачалоСертификата() + Символы.ВК + Результат.СтрокаBase64 + Символы.ВК + ТегКонецСертификата();
		СертификатВФорматеURL_encoded(ПредставлениеСертификата);
		
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеПослеПолученияСертификата, Результат);
		
	Иначе
		ОшибкаРаботыСервиса = Истина;
		ПараметрыЗаданияОпросаСервера = "";
		УправлениеФормой();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СертификатВФорматеURL_encoded(ПредставлениеСертификата)
	
	СертификатПодписи = КодироватьСтроку(ПредставлениеСертификата, СпособКодированияСтроки.КодировкаURL);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТегНачалоСертификата() Экспорт
	
	Возврат "-----BEGIN CERTIFICATE-----";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТегКонецСертификата() Экспорт
	
	Возврат "-----END CERTIFICATE-----";
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияСертификата(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		Оповещение = Новый ОписаниеОповещения("ПослеАвторизацииНаСервисеEnsIntegration", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.АвторизоватьсяНаСервисеEnsIntegration(Оповещение, ЭтотОбъект);
		
	Иначе
		ОшибкаРаботыСервиса = Истина;
		ПараметрыЗаданияОпросаСервера = "";
		УправлениеФормой();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеАвторизацииНаСервисеEnsIntegration(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		ТребуетсяПодтверждениеУчетнойЗаписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ТребуетсяПодтверждениеУчетнойЗаписи", Ложь);
		Если ТребуетсяПодтверждениеУчетнойЗаписи Тогда
			
			ПослеПолученияТребованияРегистрации(Результат, ВходящийКонтекст);
			
		Иначе
			
			РезультатАвторизации = Результат.РезультатАвторизации;
			
			УстановитьПрогрессор();
			
			ИспользуетсяАвторизацияСервиса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатАвторизации, "ТокенПолучен", Ложь);
			Если ИспользуетсяАвторизацияСервиса Тогда
				ПослеПолученияТокенаАвторизацииНаСервисе(Результат, ВходящийКонтекст);
			Иначе
				ПослеПолученияКлючаАвторизацииНаСервисе(Результат, ВходящийКонтекст);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ОшибкаРаботыСервиса = Истина;
		ПараметрыЗаданияОпросаСервера = "";
		УправлениеФормой();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияТребованияРегистрации(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		РезультатАвторизации = Результат.РезультатАвторизации;
		
		ДвоичныеДанныеКлюча = ДвоичныеДанныеКлюча(РезультатАвторизации.КлючДоступа);
		
		АдресДанных       = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКлюча, Новый УникальныйИдентификатор);
		АдресРезультата   = ПоместитьВоВременноеХранилище(, Новый УникальныйИдентификатор);
		
		ДополнительныеПараметры = Новый Структура("АдресРезультата, АдресДанных, КлючДоступа", АдресРезультата, АдресДанных, РезультатАвторизации.КлючДоступа);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПодписанияИдентификаторЗапросаПодтверждения", ЭтотОбъект, ДополнительныеПараметры);
		КриптографияЭДКОКлиент.ПодписатьPKCS7(Оповещение,
			СертификатПодписанта,
			АдресДанных,
			Истина,
			АдресРезультата,
			Истина,
			МенеджерКриптографии,
			,
			"GOST R 34.10-2012-256");
		
	Иначе
		ОшибкаРаботыСервиса = Истина;
		ПараметрыЗаданияОпросаСервера = "";
		УправлениеФормой();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеПодписанияИдентификаторЗапросаПодтверждения(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		КлючДоступа     = ВходящийКонтекст.КлючДоступа;
		ПодписанныйКлюч = ПолучитьИзВременногоХранилища(ВходящийКонтекст.АдресРезультата);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияРегистрацииНаСервисе", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ЗапроситьПодтверждениеРегистрацииEnsIntegration(Оповещение, ЭтотОбъект, КлючДоступа, ПодписанныйКлюч);
		
	Иначе
		ОшибкаРаботыСервиса = Истина;
		ПараметрыЗаданияОпросаСервера = "";
		УправлениеФормой();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияРегистрацииНаСервисе(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеАвторизацииНаСервисеEnsIntegration", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.АвторизоватьсяНаСервисеEnsIntegration(Оповещение, ЭтотОбъект);
		
	Иначе
		ОшибкаРаботыСервиса = Истина;
		ПараметрыЗаданияОпросаСервера = "";
		УправлениеФормой();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияКлючаАвторизацииНаСервисе(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		РезультатАвторизации = Результат.РезультатАвторизации;
		
		ДвоичныеДанныеКлюча = ДвоичныеДанныеКлюча(РезультатАвторизации.КлючДоступа);
		
		АдресДанных       = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКлюча, Новый УникальныйИдентификатор);
		АдресРезультата   = ПоместитьВоВременноеХранилище(, Новый УникальныйИдентификатор);
		
		ДополнительныеПараметры = Новый Структура("АдресРезультата, АдресДанных, КлючДоступа", АдресРезультата, АдресДанных, РезультатАвторизации.КлючДоступа);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПодписанияКлючаАвторизации", ЭтотОбъект, ДополнительныеПараметры);
		КриптографияЭДКОКлиент.ПодписатьPKCS7(Оповещение,
			СертификатПодписанта,
			АдресДанных,
			Истина,
			АдресРезультата,
			Истина,
			МенеджерКриптографии,
			,
			"GOST R 34.10-2012-256");
		
	Иначе
		ОшибкаРаботыСервиса = Истина;
		ПараметрыЗаданияОпросаСервера = "";
		УправлениеФормой();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеПодписанияКлючаАвторизации(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		КлючДоступа     = ВходящийКонтекст.КлючДоступа;
		ПодписанныйКлюч = ПолучитьИзВременногоХранилища(ВходящийКонтекст.АдресРезультата);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияТокенаАвторизацииНаСервисе", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ПолучитьТокенАвторизацииНаСервисеФНС(Оповещение, ЭтотОбъект, РезультатАвторизации, КлючДоступа, ПодписанныйКлюч);
		
	Иначе
		ОшибкаРаботыСервиса = Истина;
		ПараметрыЗаданияОпросаСервера = "";
		УправлениеФормой();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияТокенаАвторизацииНаСервисе(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		РезультатАвторизации = Результат.РезультатАвторизации;
		
		Если РезультатАвторизации.ТокенПолучен Тогда
			НачатьПолучениеДанныхЕдиногоНалоговогоСчета();
		КонецЕсли;
	
	Иначе
		ОшибкаРаботыСервиса = Истина;
		ПараметрыЗаданияОпросаСервера = "";
		УправлениеФормой();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДвоичныеДанныеКлюча(КлючДоступа)
	
	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти, "UTF-8", , Символы.ПС);
	Текст.Записать(КлючДоступа);
	Текст.Закрыть();
	ДвоичныеДанныеКлюча = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат ДвоичныеДанныеКлюча;
	
КонецФункции

&НаКлиенте
Функция НачатьПолучениеДанныхЕдиногоНалоговогоСчета()
	
	ПолучитьДанныеЕдиногоНалоговогоСчета();
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеЕдиногоНалоговогоСчета()
	
	АдресХранилища = ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор);
	
	ПараметрыЗаданияОпросаСервера = "";
	
	ИмяМетода = "";
	Для Каждого Метод Из ПоследовательностьМетодов Цикл
		Если Не Метод.Пометка Тогда
			ИмяМетода = Метод.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПрогрессор();
	Если Не ПустаяСтрока(ИмяМетода) Тогда
		ОповещениеПослеВыполненияЗадания = Новый ОписаниеОповещения("ПослеПолученияДанных", ЭтотОбъект);
		ОповещениеПрерывания             = Новый ОписаниеОповещения("ПрерываниеПослеОтправкиЗапросаКДанным", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ПолучитьДанныеЕдиногоНалоговогоСчета(ОповещениеПослеВыполненияЗадания, ОповещениеПрерывания, ИмяМетода, ЭтотОбъект);
	Иначе
		Если Не ОбновитьСправочники Тогда
			ОбновитьСправочники = СправочникиТребуютОбновления();
		КонецЕсли;
		Если ОбновитьСправочники Тогда
			НачатьПолучениеСправочников();
		Иначе
			СобратьВсеДанныеЕдиногоНалоговогоСчета();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПрерываниеПослеОтправкиЗапросаКДанным(Результат, ВходящийКонтекст) Экспорт
	
	ПараметрыЗаданияОпросаСервера = Результат;
	ПодключитьОбработчикОжидания("Подключаемый_ПрерываниеПослеОтправкиЗапросаКДанным", 0.1, Истина);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПрерываниеПослеОтправкиЗапросаКДанным() Экспорт
	
	ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ОтправитьЗапросНаПолучениеСтатусаЗаданияНаСервисеЕНС(ПараметрыЗаданияОпросаСервера);
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияДанных(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		Если Результат.ТребуетсяАвторизацияПоКЭП Тогда
			// Потребовалась отдельная авторизация
			ИспользуетсяАвторизацияСервиса = Ложь;
			ПослеПолученияКлючаАвторизацииНаСервисе(Результат, ВходящийКонтекст);
		Иначе
			УстановитьПрогрессор();
			
			РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ИмяМетода", РезультатВыполнения.ИмяМетода);
			
			Если Результат.ФайлПолучен Тогда
				
				Если ИспользуетсяАвторизацияСервиса Тогда
					Результат.Вставить("РасшифрованныйФайл", АдресХранилища);
					ПослеРасшифровкиФайлаОтвета(Результат, ДополнительныеПараметры);
				Иначе
					Оповещение = Новый ОписаниеОповещения("ПослеРасшифровкиФайлаОтвета", ЭтотОбъект, ДополнительныеПараметры);
					КриптографияЭДКОКлиент.РасшифроватьPKCS7(Оповещение,
						АдресХранилища,
						,
						СертификатПодписанта,
						Ложь,
						МенеджерКриптографии);
				КонецЕсли;
			Иначе
				ПослеЗагрузкиФайлаОтвета(Результат, ДополнительныеПараметры)
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОшибкаРаботыСервиса = Истина;
		ПараметрыЗаданияОпросаСервера = "";
		УправлениеФормой();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеРасшифровкиФайлаОтвета(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
	
		УстановитьПрогрессор();
		
		ИмяМетода = ВходящийКонтекст.ИмяМетода;
		
		ДанныеФайла = ПолучитьИзВременногоХранилища(Результат.РасшифрованныйФайл);
		АдресХранилищаДвоичныхДанных = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ИмяМетода",          ИмяМетода);
		ДополнительныеПараметры.Вставить("РасшифрованныйФайл", АдресХранилищаДвоичныхДанных);
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаОтвета", ЭтотОбъект, ДополнительныеПараметры);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ЗагрузитьДанныеЕдиногоНалоговогоСчета(Оповещение, ИмяМетода, ЭтотОбъект);
		
	Иначе
		ОшибкаРаботыСервиса = Истина;
		ПараметрыЗаданияОпросаСервера = "";
		УправлениеФормой();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеЗагрузкиФайлаОтвета(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		ДанныеДляЗагрузкиОтсутствуют = Результат.ПрекратитьОбновление;
		
		Если ДанныеДляЗагрузкиОтсутствуют Тогда
			
			ПараметрыЗаданияОпросаСервера = "";
			ПрекратитьОбновлениеДанных();
			СобратьВсеДанныеЕдиногоНалоговогоСчета();
			
		Иначе
		
			Если Результат.ОбновитьСправочники Тогда
				ОбновитьСправочники = Истина;
			КонецЕсли;
			
			ИмяМетода = ВходящийКонтекст.ИмяМетода;
		
			УстановитьПрогрессор();
			
			Для Каждого Метод Из ПоследовательностьМетодов Цикл
				Если Метод.Значение = ИмяМетода Тогда
					Метод.Пометка = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ПодключитьОбработчикОжидания("ПолучитьДанныеЕдиногоНалоговогоСчета",
				ИнтервалИсполненияМетодов,
				Истина);
			
		КонецЕсли;
	Иначе
		ОшибкаРаботыСервиса = Истина;
		ПараметрыЗаданияОпросаСервера = "";
		УправлениеФормой();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция НачатьПолучениеСправочников()
	
	Для Каждого Метод Из СписокСправочников Цикл
		Метод.Пометка = Ложь;
	КонецЦикла;
	
	ПолучитьСправочники();
	
КонецФункции

&НаКлиенте
Функция ПолучитьСправочники()
	
	АдресХранилища = ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор);
	
	ИмяМетода = "";
	Для Каждого Метод Из СписокСправочников Цикл
		Если Не Метод.Пометка Тогда
			ИмяМетода = Метод.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПрогрессор();
	Если Не ПустаяСтрока(ИмяМетода) Тогда
		ОповещениеПослеВыполненияЗадания = Новый ОписаниеОповещения("ПослеПолученияСправочников", ЭтотОбъект);
		ОповещениеПрерывания             = Новый ОписаниеОповещения("ПрерываниеПослеОтправкиЗапросаКСправочникам", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ПолучитьДанныеСправочников(ОповещениеПослеВыполненияЗадания, ОповещениеПрерывания, ИмяМетода, ЭтотОбъект);
	Иначе
		ОбновитьСправочники = Ложь;
		ПараметрыЗаданияОпросаСервера = "";
		СобратьВсеДанныеЕдиногоНалоговогоСчета();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПрерываниеПослеОтправкиЗапросаКСправочникам(Результат, ВходящийКонтекст) Экспорт
	
	ПараметрыЗаданияОпросаСервера = Результат;
	ПодключитьОбработчикОжидания("Подключаемый_ПрерываниеПослеОтправкиЗапросаКСправочникам", 0.1, Истина);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПрерываниеПослеОтправкиЗапросаКСправочникам() Экспорт
	
	ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ОтправитьЗапросНаПолучениеСтатусаЗаданияНаСервисеЕНС(ПараметрыЗаданияОпросаСервера);
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияСправочников(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		ИмяМетода = РезультатВыполнения.ИмяМетода;
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ИмяМетода", ИмяМетода);
		ДополнительныеПараметры.Вставить("СправочникТребуетОбновления", Истина);
		
		Если Результат.ФайлПолучен Тогда
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(АдресХранилища);
			АдресХранилищаДвоичныхДанных = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
			
			ДополнительныеПараметры.Вставить("РасшифрованныйФайл", АдресХранилищаДвоичныхДанных);
			
			Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаСправочника", ЭтотОбъект, ДополнительныеПараметры);
			ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ЗагрузитьДанныеСправочников(Оповещение, ИмяМетода, ЭтотОбъект);
			
		Иначе
			ПараметрыЗаданияОпросаСервера = "";
			ПослеЗагрузкиФайлаСправочника(Результат, ДополнительныеПараметры)
		КонецЕсли;
	Иначе
		ОшибкаРаботыСервиса = Истина;
		ПараметрыЗаданияОпросаСервера = "";
		УправлениеФормой();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСправочникиПоОтбору()
	
	АдресХранилища = ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор);
	
	ИмяМетода = "";
	Для Каждого Метод Из СписокСправочников Цикл
		Если Не Метод.Пометка Тогда
			ИмяМетода = Метод.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПрогрессор();
	Если Не ПустаяСтрока(ИмяМетода) Тогда
		ОповещениеПослеВыполненияЗадания = Новый ОписаниеОповещения("ПослеПолученияСправочниковПоОтбору", ЭтотОбъект);
		ОповещениеПрерывания             = Новый ОписаниеОповещения("ПрерываниеПослеОтправкиЗапросаКСправочникамПоОтбору", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ПолучитьДанныеСправочниковПоОтбору(ОповещениеПослеВыполненияЗадания, ОповещениеПрерывания, ИмяМетода, ЭтотОбъект);
	Иначе
		ОбновитьСправочники = Ложь;
		ПараметрыЗаданияОпросаСервера = "";
		СобратьВсеДанныеЕдиногоНалоговогоСчета();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПрерываниеПослеОтправкиЗапросаКСправочникамПоОтбору(Результат, ВходящийКонтекст) Экспорт
	
	ПараметрыЗаданияОпросаСервера = Результат;
	ПодключитьОбработчикОжидания("Подключаемый_ПрерываниеПослеОтправкиЗапросаКСправочникамПоОтбору", 0.1, Истина);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПрерываниеПослеОтправкиЗапросаКСправочникамПоОтбору() Экспорт
	
	ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ОтправитьЗапросНаПолучениеСтатусаЗаданияНаСервисеЕНС(ПараметрыЗаданияОпросаСервера);
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияСправочниковПоОтбору(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		ИмяМетода = РезультатВыполнения.ИмяМетода;
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ИмяМетода", ИмяМетода);
		
		Если Результат.ФайлПолучен Тогда
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(АдресХранилища);
			АдресХранилищаДвоичныхДанных = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
			
			ДополнительныеПараметры.Вставить("РасшифрованныйФайл", АдресХранилищаДвоичныхДанных);
			ДополнительныеПараметры.Вставить("СправочникТребуетОбновления", Истина);
			
			Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаСправочника", ЭтотОбъект, ДополнительныеПараметры);
			ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ЗагрузитьДанныеСправочников(Оповещение, ИмяМетода, ЭтотОбъект);
			
		Иначе
			ДополнительныеПараметры.Вставить("СправочникТребуетОбновления", Ложь);
			ПослеЗагрузкиФайлаСправочника(Результат, ДополнительныеПараметры)
		КонецЕсли;
	Иначе
		ОшибкаРаботыСервиса = Истина;
		ПараметрыЗаданияОпросаСервера = "";
		УправлениеФормой();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеЗагрузкиФайлаСправочника(Результат, ВходящийКонтекст) Экспорт
	
	ПараметрыЗаданияОпросаСервера = "";
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		ИмяМетода = ВходящийКонтекст.ИмяМетода;
		
		ОписаниеМетода = ЕдиныйНалоговыйСчетИнтеграцияВызовСервера.МетодыAPI(ИмяМетода);
		СправочникТребуетОбновления =
			ОписаниеМетода.Отбор
			И СправочникТребуетОбновления(ИмяМетода)
			И ВходящийКонтекст.СправочникТребуетОбновления;
		
		Если СправочникТребуетОбновления Тогда
			ПодключитьОбработчикОжидания("ПолучитьСправочникиПоОтбору",
				ИнтервалИсполненияМетодов,
				Истина);
		Иначе
			Для Каждого Метод Из СписокСправочников Цикл
				Если Метод.Значение = ИмяМетода Тогда
					Метод.Пометка = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ПодключитьОбработчикОжидания("ПолучитьСправочники",
				ИнтервалИсполненияМетодов,
				Истина);
		КонецЕсли;
		
	Иначе
		ОшибкаРаботыСервиса = Истина;
		УправлениеФормой();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СправочникиТребуютОбновления()
	
	Возврат ЕдиныйНалоговыйСчетИнтеграцияВнутренний.СправочникиТребуютОбновления();
	
КонецФункции

&НаСервереБезКонтекста
Функция СправочникТребуетОбновления(ИмяСправочника)
	
	Возврат ЕдиныйНалоговыйСчетИнтеграцияВнутренний.СправочникТребуетОбновления(ИмяСправочника);
	
КонецФункции

&НаКлиенте
Процедура УстановитьПрогрессор()
	
	// Прогрессор неравномерный.
	// 0:   начало
	// 1-9: операции авторизации, выделим под них 5%
	// 10 + количество методов * количество шагов: операции получения данных, выделим под них
	// х: отрисовка, выделим под нее 3%
	
	КоличествоМетодов = ПоследовательностьМетодов.Количество() + СписокСправочников.Количество();
	
	Если ШагПрогрессора = 0 Тогда
		Прогрессор = 0;
	ИначеЕсли ШагПрогрессора > 0 И ШагПрогрессора <= 9 Тогда
		ВыделенныйРазмер = 5;
		КоличествоШагов  = 9;
		РазмерШага = Окр(ВыделенныйРазмер/КоличествоШагов, 0, РежимОкругления.Окр15как20);
		Прогрессор = Прогрессор + РазмерШага;
	ИначеЕсли ШагПрогрессора > 9 И ШагПрогрессора <= 9 + КоличествоМетодов * 4 Тогда
		ВыделенныйРазмер = 90;
		КоличествоШагов  = КоличествоМетодов * 4;
		РазмерШага = Окр(ВыделенныйРазмер/КоличествоШагов, 2, РежимОкругления.Окр15как20);
		Прогрессор = Прогрессор + РазмерШага;
	Иначе
		ВыделенныйРазмер = 5;
		КоличествоШагов  = 2;
		РазмерШага = Окр(ВыделенныйРазмер/КоличествоШагов, 0, РежимОкругления.Окр15как20);
		Прогрессор = Прогрессор + РазмерШага;
	КонецЕсли;
	
	ШагПрогрессора = ШагПрогрессора + 1;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПодготовитьПисьмоВФНС()
	
	ДатаСообщения = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация,
		ДатаСообщения,
		"ТипНП,ИННЮЛ,ИННИО,ИННФЛ,ПризнакНПЛКрупнейший,КодНО,КодНОКрупнейший,НаимЮЛСокр,НаимИОПол,ФИО,ТелОрганизации");
	
	Телефон = СведенияОбОрганизации.ТелОрганизации;
	
	Если СведенияОбОрганизации.ТипНП = 5 Тогда
		ИНН = СведенияОбОрганизации.ИННИО;
		Наименование = СведенияОбОрганизации.НаимИОПол;
	ИначеЕсли СведенияОбОрганизации.ТипНП = 3 Тогда
		ИНН = СведенияОбОрганизации.ИННФЛ;
		Наименование = СведенияОбОрганизации.ФИО;
	Иначе
		ИНН = СведенияОбОрганизации.ИННЮЛ;
		Наименование = СведенияОбОрганизации.НаимЮЛСокр;
	КонецЕсли;
	
	Если СведенияОбОрганизации.ПризнакНПЛКрупнейший = Истина И Не ПустаяСтрока(СведенияОбОрганизации.КодНОКрупнейший) Тогда
		КодНО = СведенияОбОрганизации.КодНОКрупнейший;
	Иначе
		КодНО = СведенияОбОрганизации.КодНО;
	КонецЕсли;
	
	Содержание = СтрШаблон(НСтр("ru = 'Организация: %1
			|ИНН: %2
			|Контактный телефон: %3
			|
			|Обнаружено расхождение данных в личном кабинете ЕНС по состоянию на %4
			|Просим провести актуализацию данных ЕНС
			|Подтверждающие документы прилагаем
			|
			|=======================================================
			|Если Вы заметили проблему
			|  - укажите раздел, по которому возникли вопросы:
			|       Сальдо ЕНС
			|       Зарезервировано
			|       Предстоящие платежи
			|       Отсутствует платеж
			|       Непонятна информация по ЕНС
			|       и т.п.
			|  - подробно опишите суть проблемы
			|  - приложите подтверждающие документы.
			|=======================================================
			|'"),
		Наименование, ИНН, Телефон, Формат(ДатаСообщения, "ДЛФ=DD"));
	
	Письмо = Справочники.ПерепискаСКонтролирующимиОрганами.СоздатьЭлемент();
	Письмо.Наименование   = НСтр("ru = 'Расхождение данных в личном кабинете ЕНС'");
	Письмо.Тип           = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС;
	Письмо.Статус        = Перечисления.СтатусыПисем.Исходящее;
	Письмо.Организация   = Объект.Организация;
	Письмо.Отправитель   = Объект.Организация;
	Письмо.Получатель    = Справочники.НалоговыеОрганы.НайтиПоКоду(КодНО);
	Письмо.Содержание    = Содержание;
	Письмо.ДатаСообщения = ДатаСообщения;
	Письмо.ДатаОтправки  = ДатаСообщения;
	Письмо.Идентификатор = Новый УникальныйИдентификатор;
	
	Попытка
		Письмо.Записать();
		ПисьмоСсылка = Письмо.Ссылка;
	Исключение
		ПисьмоСсылка = Неопределено;
	КонецПопытки;
		
	Возврат ПисьмоСсылка;

КонецФункции

&НаКлиенте
Процедура СоздатьУведомлениеОСпецрежимахНалогообложения(ВидУведомления)
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация", Объект.Организация);
	
	ПараметрыУведомления.Вставить("ВидУведомления", ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения." + ВидУведомления));
		ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.ФормаОбъекта",
			ПараметрыУведомления,
			ЭтотОбъект,
			УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗапросИОН(ВидУслугиПриИОН)
	
	ЗапросИОН = СоздатьЗапросИОННаСервере(Объект.Организация, РегистрацияВНалоговомОргане, ВидУслугиПриИОН);
	ПоказатьЗначение(, ЗапросИОН);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьЗапросИОННаСервере(Организация, РегистрацияВНалоговомОргане, ВидУслугиПриИОН)

	ЗапросИОН = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.СоздатьДокумент();
	
	ЗапросИОН.Дата          = ТекущаяДатаСеанса();
	ЗапросИОН.Организация   = Организация;
	ЗапросИОН.Получатель    = РегистрацияВНалоговомОргане;
	ЗапросИОН.ВидУслуги     = Перечисления.ВидыУслугПриИОН[ВидУслугиПриИОН];
	ЗапросИОН.ФорматОтвета  = Перечисления.ФорматОтветаНаЗапросИОН.XML;
	ЗапросИОН.ФорматЗапроса = Перечисления.ФорматыДокументооборотаСФНС.Приказ534;

	Если ВидУслугиПриИОН = "ПредставлениеАктовСверкиРасчетов" Или ВидУслугиПриИОН = "СправкаОПринадлежностиСумм" Тогда
		ЗапросИОН.ДатаНачалаПериода = НачалоГода(ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ДатаНачалаПримененияЕНС());
		Если Год(ТекущаяДатаСеанса()) <> Год(ЗапросИОН.ДатаНачалаПериода) Тогда
			ЗапросИОН.ДатаОкончанияПериода = НачалоДня(КонецГода(ЗапросИОН.ДатаНачалаПериода));
		Иначе
			ЗапросИОН.ДатаОкончанияПериода = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
	Иначе
		ЗапросИОН.ДатаНачалаПериода    = НачалоГода(ЗапросИОН.Дата);
		ЗапросИОН.ДатаОкончанияПериода = НачалоДня(ЗапросИОН.Дата);
	КонецЕсли;
	
	Если ВидУслугиПриИОН = "ПредставлениеАктовСверкиРасчетов" Тогда
		ЗапросИОН.КоличествоНалогов = Перечисления.КоличествоНалоговДляСверкиИОН.Все;
	КонецЕсли;
	
	ЗапросИОН.Записать();
	
	Возврат ЗапросИОН.Ссылка;

КонецФункции

&НаКлиенте
Процедура СоздатьСогласиеНаРаскрытиеНалоговойТайны()
	
	ЕдиныйНалоговыйСчетИнтеграцияКлиент.СоздатьСогласиеНаРаскрытиеНалоговойТайны(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиИнтеграции()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияНастройки", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ОткрытьФорму("Обработка.ЕдиныйНалоговыйСчетЛичныйКабинет.Форма.ФормаНастройкиЛичногоКабинета",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОформитьБаннер()
	
	Если ФоновыйРежимПодключен Или Не ИнтеграцияПодключена Тогда
		БаннерПогашен = Истина
	Иначе
		ОтключенныеПредупреждения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОтображенияЛичногоКабинетаЕНС",
			"ВключениеФоновогоРежимаЛичногоКабинетаЕНС",
			Новый Массив);
			
		БаннерПогашен = ОтключенныеПредупреждения.Найти(Объект.Организация) <> Неопределено;
	КонецЕсли;
	
	Элементы.Баннер.Видимость = Не БаннерПогашен;
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьБаннер()
	
	// Закроем баннер на форме.
	Элементы.Баннер.Видимость = Ложь;
	
	ОтключенныеПредупреждения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОтображенияЛичногоКабинетаЕНС",
		"ВключениеФоновогоРежимаЛичногоКабинетаЕНС",
		Новый Массив);
		
	Если ОтключенныеПредупреждения.Найти(Объект.Организация) = Неопределено Тогда
		
		ОтключенныеПредупреждения.Добавить(Объект.Организация);
	
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
				"НастройкиОтображенияЛичногоКабинетаЕНС",
				"ВключениеФоновогоРежимаЛичногоКабинетаЕНС",
				ОтключенныеПредупреждения);
	
		БаннерПогашен = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеПометкойКоманды(ИмяКоманды)
	
	МассивКоманд = Новый Массив;
	МассивКоманд.Добавить("КнВсеОбязательства");
	МассивКоманд.Добавить("КнЗадолженность");
	МассивКоманд.Добавить("КнПредстоящиеПлатежи");
	МассивКоманд.Добавить("КнЗарезервировано");
	МассивКоманд.Добавить("КнОперацииЕНП");
	МассивКоманд.Добавить("КнИсторияЕНС");
	МассивКоманд.Добавить("КнПроцедурыВзыскания");
	МассивКоманд.Добавить("КнПлатежи");
	МассивКоманд.Добавить("КнОтчеты");
	МассивКоманд.Добавить("КнНепроведенныеПлатежи");
	
	Для Каждого ИмяКнопки Из МассивКоманд Цикл
		Элементы[ИмяКнопки].Пометка = Ложь;
	КонецЦикла;
	
	Элементы[ИмяКоманды].Пометка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспорядитьсяСальдоЗавершение(ВыбранныйВариант, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйВариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Действие = ВыбранныйВариант.Значение;
	
	СоздатьУведомлениеОСпецрежимахНалогообложения(Действие);
	
КонецПроцедуры

#Область РежимСверки

&НаКлиенте
Процедура РежимСверкиОбработатьИзменение()
	
	Если РежимСверки Тогда
		ИмяРаздела = "Платежи";
	Иначе
		ИмяРаздела = "ВсеОбязательства";
	КонецЕсли;
	
	УправлениеПометкойКоманды("кн" + ИмяРаздела);
	ПереключитьОтображениеПоказателей(ИмяРаздела);
	
	УправлениеФормой();
	
	ЕдиныйНалоговыйСчетЛичныйКабинетКлиентСерверПереопределяемый.ПереключениеКомандПлатежиРасхождение(
		ЭтотОбъект, ИмяРаздела, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПереключениеКомандОтчетыРасхождение(ТолькоРасхождения)
	
	Элементы.ТаблицаОтчетыВсеОперации.Пометка       = Не ТолькоРасхождения;
	Элементы.ТаблицаОтчетыТолькоРасхождения.Пометка = ТолькоРасхождения;
	
	ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ПереключениеКомандОтчетыРасхождение(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПереключениеКомандНепроведенныеПлатежиРасхождение(ТолькоРасхождения)
	
	Элементы.ТаблицаНепроведенныеПлатежиВсеОперации.Пометка       = Не ТолькоРасхождения;
	Элементы.ТаблицаНепроведенныеПлатежиТолькоРасхождения.Пометка = ТолькоРасхождения;
	
	ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ПереключениеКомандНепроведенныеПлатежиРасхождение(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
