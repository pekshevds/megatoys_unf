#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

Перем БылиОшибки Экспорт;
Перем ВерсияDTO Экспорт;
Перем ТипОбъектаПолеКлюча Экспорт;
Перем ТипОбъектаТипКлюча Экспорт;
Перем ПравилаКонвертацииОбъектов Экспорт;
Перем ТипОбъектаИмяВОбъектеВсеИзменения Экспорт;

Перем Приложение;
Перем ИменаСобытийЖР;
Перем КэшСсылкаИдентификатор;
Перем КэшИдентификаторСсылка;
Перем ПравилаКонвертацииЗначений;
Перем ЗарегистрированныеОшибкиНетПравила;
Перем ТипОбъектаИмяПКО;
Перем ТаблицаИдентификаторыБезСсылок;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Инициализация

Процедура Инициализировать(ПриложениеДляОбмена) Экспорт
	
	БылиОшибки 	= Ложь;
	Приложение 	= ПриложениеДляОбмена;
	ВерсияDTO 	= "";
	
	ИменаСобытийЖР = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение);
	
	НастройкиПодключения = ИнтеграцияУправлениеПерсоналом.НастройкиПодключения(Приложение);
	ВерсияDTO = НастройкиПодключения.ВерсияDTO;
	
	КэшСсылкаИдентификатор = Новый Соответствие;
	КэшИдентификаторСсылка = Новый Соответствие;
	Для каждого ТипОбъекта Из Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом Цикл
		КэшСсылкаИдентификатор.Вставить(ТипОбъекта, Новый Соответствие);
		КэшИдентификаторСсылка.Вставить(ТипОбъекта, Новый Соответствие);
	КонецЦикла;
	
	ОбновитьИнициализациюПриСмениВерсииDTO();
	
КонецПроцедуры

Процедура ОбновитьИнициализациюПриСмениВерсииDTO() Экспорт
	
	ЗаполнитьТипОбъектаИмяВОбъектеВсеИзменения();
	ЗаполнитьТипОбъектаПолеКлюча();
	ЗаполнитьТипОбъектаТипКлюча();
	ЗаполнитьПравилаКонвертацииЗначений();
	ЗаполнитьПравилаКонвертацииОбъектов();

КонецПроцедуры

Процедура ЗаполнитьТипОбъектаПолеКлюча()
	
	МенеджерТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом;
	
	ТипОбъектаПолеКлюча = Новый Соответствие;
	ТипОбъектаПолеКлюча.Вставить(МенеджерТипОбъекта.ФизическоеЛицо, 	"ID");
	ТипОбъектаПолеКлюча.Вставить(МенеджерТипОбъекта.Организация, 		"ID");
	ТипОбъектаПолеКлюча.Вставить(МенеджерТипОбъекта.Подразделение, 		"ID");
	ТипОбъектаПолеКлюча.Вставить(МенеджерТипОбъекта.Должность, 			"ID");
	ТипОбъектаПолеКлюча.Вставить(МенеджерТипОбъекта.Сотрудник, 			"ID");
	ТипОбъектаПолеКлюча.Вставить(МенеджерТипОбъекта.ДолжностьПоШтатномуРасписанию, "ID");
	ТипОбъектаПолеКлюча.Вставить(МенеджерТипОбъекта.ГрафикРаботы, 			"ID");
	
КонецПроцедуры

Процедура ЗаполнитьТипОбъектаТипКлюча()
	
	МенеджерТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом;
	
	ТипОбъектаТипКлюча = Новый Соответствие;
	ТипОбъектаТипКлюча.Вставить(МенеджерТипОбъекта.ФизическоеЛицо, 	МенеджерТипОбъекта.ФизическоеЛицо);
	ТипОбъектаТипКлюча.Вставить(МенеджерТипОбъекта.Организация, 		МенеджерТипОбъекта.Организация);
	ТипОбъектаТипКлюча.Вставить(МенеджерТипОбъекта.Подразделение, 		МенеджерТипОбъекта.Подразделение);
	ТипОбъектаТипКлюча.Вставить(МенеджерТипОбъекта.Должность, 			МенеджерТипОбъекта.Должность);
	ТипОбъектаТипКлюча.Вставить(МенеджерТипОбъекта.ДолжностьПоШтатномуРасписанию, МенеджерТипОбъекта.ДолжностьПоШтатномуРасписанию);
	ТипОбъектаТипКлюча.Вставить(МенеджерТипОбъекта.Сотрудник, 			МенеджерТипОбъекта.Сотрудник);
	ТипОбъектаТипКлюча.Вставить(МенеджерТипОбъекта.ГрафикРаботы, 		МенеджерТипОбъекта.ГрафикРаботы);
	
КонецПроцедуры

Функция НоваяТаблицаИдентификаторыБезСсылок()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Объект");
	Таблица.Колонки.Добавить("ИмяСвойства", 	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТипОбъекта", 		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектовИнтеграцияУпралениеПерсоналом"));
	Таблица.Колонки.Добавить("Идентификатор", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область РегистрацияВЖурналеРегистрации

Процедура ЗаписатьОшибкуКонвертацииОбъекта(ИмяПКО, ОписаниеОбъекта, ОписаниеОшибки)
	
	ПКО = ПравилаКонвертацииОбъектов[ИмяПКО];
	
	ИмяКлючевогоСвойства = ПКО.ИмяКлючевогоСвойства;
	ПредставлениеОбъекта = "";
	Если ЗначениеЗаполнено(ИмяКлючевогоСвойства) Тогда
		Объект = Неопределено;
		ОписаниеОбъекта.Свойство(ИмяКлючевогоСвойства, Объект);
		ПредставлениеОбъекта = "";
		Если ЗначениеЗаполнено(Объект) Тогда
			Если ТипЗнч(Объект) = Тип("Строка") Тогда
				ПредставлениеОбъекта = Объект;
			Иначе
				ПредставлениеОбъекта = СтрШаблон("%1: %2", ТипЗнч(Объект), Строка(Объект));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ШаблонОписания = НСтр(
	"ru = 'Ошибка конвертации в DTO. ИмяПКО: %1, объект: %2
	|Описание ошибки:
	|%3'");
	Комментарий  = СтрШаблон(ШаблонОписания, ИмяПКО, ПредставлениеОбъекта, ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Конвертация, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

Процедура ЗаписатьОшибкуНеНайденоПКО(ИмяПКО)
	
	Если ЗарегистрированныеОшибкиНетПравила[ИмяПКО] <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	ШаблонОписания = НСтр("ru = 'Ошибка конвертации. Не найдено правило конвертации объекта: %1'");
	Комментарий = СтрШаблон(ШаблонОписания, ИмяПКО);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Конвертация, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	
	ЗарегистрированныеОшибкиНетПравила.Вставить(ИмяПКО, Истина);

КонецПроцедуры

Процедура ЗаписатьОшибкуНеНайденоПКЗ(ИмяПКЗ)
	
	Если ЗарегистрированныеОшибкиНетПравила[ИмяПКЗ] <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонОписания = НСтр("ru = 'Ошибка конвертации. Не найдено правило конвертации значений: %1'");
	Комментарий = СтрШаблон(ШаблонОписания, ИмяПКЗ);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Конвертация, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	
	ЗарегистрированныеОшибкиНетПравила.Вставить(ИмяПКЗ, Истина);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуНеНайденоЗначениеПКЗ(ИмяПКЗ, ЗначениеСвойства)
	
	Если ЗарегистрированныеОшибкиНетПравила[ЗначениеСвойства] <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонОписания = НСтр("ru = 'Ошибка конвертации. Не найдено значение правила: %1 - %2'");
	Комментарий = СтрШаблон(ШаблонОписания, ИмяПКЗ, Строка(ЗначениеСвойства));
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Конвертация, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	
	ЗарегистрированныеОшибкиНетПравила.Вставить(ИмяПКЗ, Истина);
	
КонецПроцедуры

Процедура ЗарегистрироватьОшибкуЗаполненияОбъекта(ОписаниеОшибки, ЭтоОбъектDTO = Ложь)

	ШаблонОписания = НСтр("ru = 'Ошибка проверки заполнения Объекта%1.
	|: %2'");
	Комментарий = СтрШаблон(ШаблонОписания, ?(ЭтоОбъектDTO,"DTO",""),СформироватьJSON(ОписаниеОшибки));
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Конвертация, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

#КонецОбласти

#Область ОписаниеФормата

// Добавляем функцию ПКО_ХХХХ()
// Добавляем в МассивПКО()
// При необходимости добавляем в ЗаполнитьПравилаКонвертацииЗначений()
// Если есть загрузка по идентификатору, добавляем в ЗаполнитьТипОбъектаИмяВОбъектеВсеИзменения.

#Область ИнициализацияПравил

Функция МассивПКО()

	Правила = Новый Массив;
	Правила.Добавить(ПКО_ФизическиеЛица());
	Правила.Добавить(ПКО_Организации());
	Правила.Добавить(ПКО_Должности());
	Правила.Добавить(ПКО_Подразделения());
	Правила.Добавить(ПКО_ДолжностиПоШтатномуРасписанию());
	Правила.Добавить(ПКО_Сотрудники());
	Правила.Добавить(ПКО_ТарифныеСтавки());
	Правила.Добавить(ПКО_СклоненияФИО());
	Правила.Добавить(ПКО_Файлы());
	Правила.Добавить(ПКО_ДокументыУдостоверяющиеЛичность());
	Правила.Добавить(ПКО_ГрафикиРаботы());
	Правила.Добавить(ПКО_ГрафикиОтпусковПодразделений());
	Правила.Добавить(ПКО_ПериодыГрафикаОтпусковПодразделения());
	Правила.Добавить(ПКО_ВерсииФормата());
	Правила.Добавить(ПКО_ВсеИзменения());
	Правила.Добавить(ПКО_ГрафикиОтпусковПредприятия());

	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Правила.Добавить(ПКО_ЗапросыСправок2НДФЛ());
		Правила.Добавить(ПКО_ЭлектронныеДокументы());
		Правила.Добавить(ПКО_ЗапросыСправокСМестаРаботы());
		Правила.Добавить(ПКО_ВидыПредоставляемыхСотрудникамСправок());
		Правила.Добавить(ПКО_ОграниченияДоступаКРабочимКонтактам());
		Правила.Добавить(ПКО_ДоступныеФункцииФизическогоЛица());
	Иначе
		Правила.Добавить(ПКО_Офферы());
	КонецЕсли;
	
	Возврат Правила;

КонецФункции

Процедура ЗаполнитьПравилаКонвертацииОбъектов()
	
	Правила = МассивПКО();
	
	ПравилаКонвертацииОбъектов 	= Новый Соответствие;
	ТипОбъектаИмяПКО 			= Новый Соответствие;
	Для каждого Правило Из Правила Цикл
		ПравилаКонвертацииОбъектов.Вставить(Правило.ИмяПКО, Правило);
		ТипОбъектаИмяПКО.Вставить(Правило.ТипОбъекта, Правило.ИмяПКО);
	КонецЦикла; 

КонецПроцедуры

Функция НовоеПКЗ(ПубличныйИдентификатор = Ложь, ТипОбъекта = Неопределено, КонвертацияЗначений = Неопределено)

	Правило = Новый Структура;
	Правило.Вставить("ТипОбъекта", 				ТипОбъекта);
	Правило.Вставить("ПубличныйИдентификатор", 	ПубличныйИдентификатор);
	Правило.Вставить("КонвертацияЗначений", 	КонвертацияЗначений);
	
	Возврат Правило;

КонецФункции

Процедура ЗаполнитьПравилаКонвертацииЗначений()
	
	МенеджерПеречисления = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом;
	
	Правила = Новый Соответствие;
	
	// ПКЗ:
	// ПубличныйИдентификатор - Булево,
	// ТипОбъекта - Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом,
	// КонвертацияЗначений - Структура - НовоеОписаниеКонвертацияЗначений.
	
	ПКЗ = НовоеПКЗ(Истина, МенеджерПеречисления.ФизическоеЛицо);
	ПравилаКонвертацииЗначений = Новый Структура("Выгрузка,Загрузка",ПКЗ,ПКЗ); 
	Правила.Вставить("ФизическоеЛицо", ПравилаКонвертацииЗначений);
	
	ПравилаКонвертацииЗначений = Новый Структура("Выгрузка,Загрузка",ПКЗ,НовоеПКЗ());
	Правила.Вставить("ФизическоеЛицоСсылка", ПравилаКонвертацииЗначений);
	
	ПКЗ = НовоеПКЗ(Истина, МенеджерПеречисления.Организация);
	ПравилаКонвертацииЗначений = Новый Структура("Выгрузка,Загрузка",ПКЗ,ПКЗ);
	Правила.Вставить("Организация", ПравилаКонвертацииЗначений);
	
	ПКЗ = НовоеПКЗ(Истина, МенеджерПеречисления.Должность);
	ПравилаКонвертацииЗначений = Новый Структура("Выгрузка,Загрузка",ПКЗ,ПКЗ);
	Правила.Вставить("Должность", ПравилаКонвертацииЗначений);
	
	ПКЗ = НовоеПКЗ(Истина, МенеджерПеречисления.Подразделение);
	ПравилаКонвертацииЗначений = Новый Структура("Выгрузка,Загрузка",ПКЗ,ПКЗ);
	Правила.Вставить("Подразделение", ПравилаКонвертацииЗначений);
	
	ПКЗ = НовоеПКЗ(Истина, МенеджерПеречисления.ДолжностьПоШтатномуРасписанию);
	ПравилаКонвертацииЗначений = Новый Структура("Выгрузка,Загрузка",ПКЗ,ПКЗ);
	Правила.Вставить("ДолжностьПоШтатномуРасписанию", ПравилаКонвертацииЗначений);
	
	ПКЗ = НовоеПКЗ(Истина, МенеджерПеречисления.Сотрудник);
	ПравилаКонвертацииЗначений = Новый Структура("Выгрузка,Загрузка",ПКЗ,ПКЗ);
	Правила.Вставить("Сотрудник", ПравилаКонвертацииЗначений);
	
	ПКЗ = НовоеПКЗ(Истина, МенеджерПеречисления.ГрафикРаботы);
	ПравилаКонвертацииЗначений = Новый Структура("Выгрузка,Загрузка",ПКЗ,ПКЗ);
	Правила.Вставить("ГрафикРаботы", ПравилаКонвертацииЗначений);
	
	ПКЗ = НовоеПКЗ(Истина, МенеджерПеречисления.ВидПредоставляемойСотрудникамСправки);
	ПравилаКонвертацииЗначений = Новый Структура("Выгрузка,Загрузка",ПКЗ,ПКЗ);
	Правила.Вставить("ВидПредоставляемойСотрудникамСправки", ПравилаКонвертацииЗначений); 
	
	Правила.Вставить("Пол", 									КонвертацияЗначений_Пол());
	Правила.Вставить("ВидДокументаУЛ", 							КонвертацияЗначений_ВидДокументаУЛ());
	Правила.Вставить("ВидЗанятости", 							КонвертацияЗначений_ВидЗанятости());
	Правила.Вставить("СостояниеСбораГрафиковОтпусков", 			КонвертацияЗначений_СостояниеСбораГрафиковОтпусков());
	Правила.Вставить("ВариантПолученияДокументаРезультата", 	КонвертацияЗначений_ВариантПолученияДокументаРезультата());
	Правила.Вставить("НазначениеСправки2НДФЛ", 					КонвертацияЗначений_НазначениеСправки2НДФЛ());
	Правила.Вставить("УровеньДоступаКИнформацииОСотрудниках", 	КонвертацияЗначений_УровниДоступаКИнформацииОСотрудниках());
	
	ПравилаКонвертацииЗначений = Правила;
	
КонецПроцедуры 

Процедура ЗаполнитьТипОбъектаИмяВОбъектеВсеИзменения()
	
	МенеджерТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом;
	ТипОбъектаИмяВОбъектеВсеИзменения = Новый Соответствие;
	
	Описание = Новый Соответствие;
	Описание.Вставить(МенеджерТипОбъекта.ГрафикОтпусковПодразделения, 	"ГрафикиОтпусковПодразделений");
	Описание.Вставить(МенеджерТипОбъекта.ГрафикОтпусковПредприятия, 	"ГрафикиОтпусковПредприятия");
	Описание.Вставить(МенеджерТипОбъекта.ЗапросСправки2НДФЛ, 			"ЗапросыСправок2НДФЛ");
	Описание.Вставить(МенеджерТипОбъекта.ЗапросСправкиСМестаРаботы, 	"ЗапросыСправокСМестаРаботы");
	Описание.Вставить(МенеджерТипОбъекта.ФизическоеЛицо, 				"ФизическиеЛица");
	Описание.Вставить(МенеджерТипОбъекта.Оффер, 						"Офферы");
	
	ТипОбъектаИмяВОбъектеВсеИзменения = Описание;

КонецПроцедуры

#КонецОбласти

#Область ПравилаКонвертацииОбъектов

Функция НовоеПКС(ИмяСвойстваDTO, ИмяСвойстваКонфигурации, ИмяПКО = "", ИмяПКЗ = "")
	
	Правило = Новый Структура;
	Правило.Вставить("ИмяСвойстваDTO", 				ИмяСвойстваDTO);
	Правило.Вставить("ИмяСвойстваКонфигурации", 	ИмяСвойстваКонфигурации);
	Правило.Вставить("ИмяПКО", 						ИмяПКО);
	Правило.Вставить("ИмяПКЗ", 						ИмяПКЗ);
	
	Возврат Правило;
	
КонецФункции

Функция НовоеОписаниеПКО()
	
	НеЗаполнятьСвойства = Новый Соответствие;
	НеЗаполнятьСвойства.Вставить(Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника, Новый Соответствие);
	НеЗаполнятьСвойства.Вставить(Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом, Новый Соответствие);
	
	Описание = Новый Структура;
	
	Описание.Вставить("ИмяПКО", 					"");
	Описание.Вставить("ИмяОбъектаDTO", 				"");
	Описание.Вставить("ИмяКлючевогоСвойства", 		"");
	Описание.Вставить("ТипОбъекта", 				"");
	Описание.Вставить("ОбязательныеСвойства", 		Новый Соответствие);
	Описание.Вставить("НеЗаполнятьСвойства", 		НеЗаполнятьСвойства);
	Описание.Вставить("ПравилаКонвертацииСвойств", 	Новый Массив);
	
	Возврат Описание;

КонецФункции

// person
Функция ПКО_ФизическиеЛица()
	
	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "ФизическиеЛица";
	ПКО.ИмяОбъектаDTO 			= "person";
	ПКО.ИмяКлючевогоСвойства 	= "ФизическоеЛицо";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ФизическоеЛицо;
	
	ПКО.ОбязательныеСвойства.Вставить("ID", 		"ФизическоеЛицо");
	ПКО.ОбязательныеСвойства.Вставить("lastName", 	"Фамилия");
	ПКО.ОбязательныеСвойства.Вставить("gender", 	"Пол");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("ID",					"ФизическоеЛицо",,"ФизическоеЛицоСсылка"));
	ПравилаКС.Добавить(НовоеПКС("lastName",				"Фамилия"));
	ПравилаКС.Добавить(НовоеПКС("firstName",			"Имя"));
	ПравилаКС.Добавить(НовоеПКС("patronymic",			"Отчество"));
	ПравилаКС.Добавить(НовоеПКС("initials",				"Инициалы"));
	ПравилаКС.Добавить(НовоеПКС("gender",				"Пол",,"Пол"));
	ПравилаКС.Добавить(НовоеПКС("birthDate",			"ДатаРождения"));
	ПравилаКС.Добавить(НовоеПКС("taxID",				"ИНН"));
	ПравилаКС.Добавить(НовоеПКС("insuranceNumber",		"СтраховойНомерПФР"));
	ПравилаКС.Добавить(НовоеПКС("birthPlace",			"МестоРожденияПредставление"));
	ПравилаКС.Добавить(НовоеПКС("phoneNumber",			"ТелефонРабочийПредставление"));
	ПравилаКС.Добавить(НовоеПКС("mobilePhoneNumber",	"ТелефонМобильныйПредставление"));
	ПравилаКС.Добавить(НовоеПКС("eMail",				"EMailПредставление"));
	ПравилаКС.Добавить(НовоеПКС("identityDocument",		"ДокументУдостоверяющийЛичность", "ДокументыУдостоверяющиеЛичность"));
	ПравилаКС.Добавить(НовоеПКС("registrationAddress", 	"АдресПоПропискеПредставление"));
	ПравилаКС.Добавить(НовоеПКС("residentialAddress", 	"АдресМестаПроживанияПредставление"));
	ПравилаКС.Добавить(НовоеПКС("picture", 				"Фотография", "Файлы"));
	ПравилаКС.Добавить(НовоеПКС("presentationForms", 	"СклоненияФИО", "СклоненияФИО"));
	ПравилаКС.Добавить(НовоеПКС("version", 				"ВерсияИзменений"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;
	
	
КонецФункции

// employer
Функция ПКО_Организации() 
	
	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "Организации";
	ПКО.ИмяОбъектаDTO 			= "employer";
	ПКО.ИмяКлючевогоСвойства 	= "Организация";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Организация;
	
	ПКО.ОбязательныеСвойства.Вставить("ID", 	"Организация");
	ПКО.ОбязательныеСвойства.Вставить("name", 	"Наименование");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("ID",								"Организация",,"Организация"));
	ПравилаКС.Добавить(НовоеПКС("name",								"Наименование"));
	ПравилаКС.Добавить(НовоеПКС("taxID",							"ИНН"));
	ПравилаКС.Добавить(НовоеПКС("isBranch",							"ОбособленноеПодразделение"));
	ПравилаКС.Добавить(НовоеПКС("parentOrganizationID",				"ГоловнаяОрганизация",,"Организация"));
	ПравилаКС.Добавить(НовоеПКС("principalID",						"Руководитель",,"ФизическоеЛицо"));
	ПравилаКС.Добавить(НовоеПКС("positionOfprincipalID",			"ДолжностьРуководителя",,"Должность"));
	ПравилаКС.Добавить(НовоеПКС("fullName",							"НаименованиеПолное"));
	ПравилаКС.Добавить(НовоеПКС("primaryStateRegistrationNumber", 	"ОГРН"));
	ПравилаКС.Добавить(НовоеПКС("taxRegistrationReasonCode", 		"КПП"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;
	
КонецФункции

// position
Функция ПКО_Должности()
	
	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "Должности";
	ПКО.ИмяОбъектаDTO 			= "position";
	ПКО.ИмяКлючевогоСвойства 	= "Должность";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Должность;
	
	ПКО.ОбязательныеСвойства.Вставить("ID",		"Должность");
	ПКО.ОбязательныеСвойства.Вставить("name",	"Наименование");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("ID", 					"Должность",,"Должность"));
	ПравилаКС.Добавить(НовоеПКС("name", 				"Наименование"));
	ПравилаКС.Добавить(НовоеПКС("presentationForms", 	"СклоненияФИО", "СклоненияФИО"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;
	
КонецФункции

// division
Функция ПКО_Подразделения()
	
	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "Подразделения";
	ПКО.ИмяОбъектаDTO 			= "division";
	ПКО.ИмяКлючевогоСвойства 	= "Подразделение";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Подразделение;
	
	ПКО.ОбязательныеСвойства.Вставить("ID", 	"Подразделение");
	ПКО.ОбязательныеСвойства.Вставить("code", 	"Код");
	ПКО.ОбязательныеСвойства.Вставить("name", 	"Наименование");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("ID",				"Подразделение",,"Подразделение"));
	ПравилаКС.Добавить(НовоеПКС("name",				"Наименование"));
	ПравилаКС.Добавить(НовоеПКС("code",				"Код"));
	ПравилаКС.Добавить(НовоеПКС("parentDivisionID",	"Родитель",,"Подразделение"));
	ПравилаКС.Добавить(НовоеПКС("headID",			"Руководитель",,"ФизическоеЛицо"));
	ПравилаКС.Добавить(НовоеПКС("priority",			"Порядок"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;
	
КонецФункции

// staffListPosition
Функция ПКО_ДолжностиПоШтатномуРасписанию()
	
	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "ДолжностиПоШтатномуРасписанию";
	ПКО.ИмяОбъектаDTO 			= "staffListPosition";
	ПКО.ИмяКлючевогоСвойства 	= "ДолжностьПоШтатномуРасписанию";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДолжностьПоШтатномуРасписанию;
	
	ПКО.ОбязательныеСвойства.Вставить("employerID",	"Организация");
	ПКО.ОбязательныеСвойства.Вставить("divisionID",	"Подразделение");
	ПКО.ОбязательныеСвойства.Вставить("positionID",	"Должность");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("ID",			"ДолжностьПоШтатномуРасписанию",,"ДолжностьПоШтатномуРасписанию"));
	ПравилаКС.Добавить(НовоеПКС("name",			"Наименование"));
	ПравилаКС.Добавить(НовоеПКС("employerID",	"Организация",,"Организация"));
	ПравилаКС.Добавить(НовоеПКС("divisionID",	"Подразделение",,"Подразделение"));
	ПравилаКС.Добавить(НовоеПКС("positionID",	"Должность",,"Должность"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;
	
КонецФункции 

// employee
Функция ПКО_Сотрудники()
	
	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "Сотрудники";
	ПКО.ИмяОбъектаDTO 			= "employee";
	ПКО.ИмяКлючевогоСвойства 	= "Сотрудник";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Сотрудник;
	
	ПКО.ОбязательныеСвойства.Вставить("ID", 			"Сотрудник");
	ПКО.ОбязательныеСвойства.Вставить("personID", 		"ФизическоеЛицо");
	ПКО.ОбязательныеСвойства.Вставить("employerID", 	"Организация");
	ПКО.ОбязательныеСвойства.Вставить("divisionID", 	"Подразделение");
	ПКО.ОбязательныеСвойства.Вставить("employmentType", "ВидЗанятости");
	
	ПриложениеУправлениеПерсоналом = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом;
	ПКО.НеЗаполнятьСвойства[ПриложениеУправлениеПерсоналом].Вставить("wageRate", Истина);
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("ID",					"Сотрудник",,"Сотрудник"));
	ПравилаКС.Добавить(НовоеПКС("personID",				"ФизическоеЛицо",,"ФизическоеЛицо"));
	ПравилаКС.Добавить(НовоеПКС("employmentDate",		"ДатаПриема"));
	ПравилаКС.Добавить(НовоеПКС("staffListPositionID", 	"ДолжностьПоШтатномуРасписанию",,"ДолжностьПоШтатномуРасписанию"));
	ПравилаКС.Добавить(НовоеПКС("employerID",			"Организация",,"Организация"));
	ПравилаКС.Добавить(НовоеПКС("divisionID",			"Подразделение",,"Подразделение"));
	ПравилаКС.Добавить(НовоеПКС("positionID",			"Должность",,"Должность"));
	ПравилаКС.Добавить(НовоеПКС("transferDate",			"РабочееМестоПериодРегистрации"));
	ПравилаКС.Добавить(НовоеПКС("employmentType",		"ВидЗанятости",,"ВидЗанятости"));
	ПравилаКС.Добавить(НовоеПКС("wageRate",				"ТарифнаяСтавка", "ТарифныеСтавки"));
	ПравилаКС.Добавить(НовоеПКС("workScheduleID", 		"ГрафикРаботы",,"ГрафикРаботы"));
	ПравилаКС.Добавить(НовоеПКС("dismissed", 			"Уволен"));
	ПравилаКС.Добавить(НовоеПКС("hidden", 				"СкрыватьВСписках"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС; 
	
	Возврат ПКО;
	
КонецФункции

// wageRate
Функция ПКО_ТарифныеСтавки()
	
	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "ТарифныеСтавки";
	ПКО.ИмяОбъектаDTO 			= "wageRate";
	ПКО.ИмяКлючевогоСвойства 	= "";
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("presentation",	"ПоказательТарифнойСтавки"));
	ПравилаКС.Добавить(НовоеПКС("value",		"Сумма"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;
	
КонецФункции

// presentationForms
Функция ПКО_СклоненияФИО()
	
	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "СклоненияФИО";
	ПКО.ИмяОбъектаDTO 			= "presentationForms";
	ПКО.ИмяКлючевогоСвойства 	= ""; 
	
	ПКО.ОбязательныеСвойства.Вставить("nominative", 	"Именительный");
	ПКО.ОбязательныеСвойства.Вставить("genitive",		"Родительный");
	ПКО.ОбязательныеСвойства.Вставить("dative",			"Дательный");
	ПКО.ОбязательныеСвойства.Вставить("accusative",		"Винительный");
	ПКО.ОбязательныеСвойства.Вставить("instrumental", 	"Творительный");
	ПКО.ОбязательныеСвойства.Вставить("prepositional", 	"Предложный");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("nominative", 		"Именительный"));
	ПравилаКС.Добавить(НовоеПКС("genitive",			"Родительный"));
	ПравилаКС.Добавить(НовоеПКС("dative",			"Дательный"));
	ПравилаКС.Добавить(НовоеПКС("accusative",		"Винительный"));
	ПравилаКС.Добавить(НовоеПКС("instrumental", 	"Творительный"));
	ПравилаКС.Добавить(НовоеПКС("prepositional", 	"Предложный"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;
	
КонецФункции

// file
Функция ПКО_Файлы()
	
	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "Файлы";
	ПКО.ИмяОбъектаDTO 			= "file";
	ПКО.ИмяКлючевогоСвойства 	= "";
	
	ПКО.ОбязательныеСвойства.Вставить("name", "ИмяФайла");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("name", 		"ИмяФайла"));
	ПравилаКС.Добавить(НовоеПКС("extension", 	"Расширение"));
	ПравилаКС.Добавить(НовоеПКС("size", 		"Размер"));
	ПравилаКС.Добавить(НовоеПКС("ID", 			"ИдентификаторФайла"));
	ПравилаКС.Добавить(НовоеПКС("hash", 		"ХешСумма"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;
	
КонецФункции

// identityDocument
Функция ПКО_ДокументыУдостоверяющиеЛичность()
	
	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "ДокументыУдостоверяющиеЛичность";
	ПКО.ИмяОбъектаDTO 			= "identityDocument";
	ПКО.ИмяКлючевогоСвойства 	= "ВидДокумента";
	
	ПКО.ОбязательныеСвойства.Вставить("identityDocumentType", "ВидДокумента");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("identityDocumentType",	"ВидДокумента",,"ВидДокументаУЛ"));
	ПравилаКС.Добавить(НовоеПКС("serias",				"Серия"));
	ПравилаКС.Добавить(НовоеПКС("number",				"Номер"));
	ПравилаКС.Добавить(НовоеПКС("issueDate",			"ДатаВыдачи"));
	ПравилаКС.Добавить(НовоеПКС("issuingAuthority",		"КемВыдан"));
	ПравилаКС.Добавить(НовоеПКС("issuingAuthorityID",	"КодПодразделения"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;
	
КонецФункции

// workSchedule
Функция ПКО_ГрафикиРаботы()
	
	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "ГрафикиРаботы";
	ПКО.ИмяОбъектаDTO 			= "workSchedule";
	ПКО.ИмяКлючевогоСвойства 	= "ГрафикРаботы";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ГрафикРаботы;
	
	ПКО.ОбязательныеСвойства.Вставить("ID", 	"ГрафикРаботы");
	ПКО.ОбязательныеСвойства.Вставить("name", 	"Наименование");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("ID", 	"ГрафикРаботы",,"ГрафикРаботы"));
	ПравилаКС.Добавить(НовоеПКС("name", "Наименование"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;
	
КонецФункции 

// divisionVacationsSchedule
Функция ПКО_ГрафикиОтпусковПодразделений()
	
	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "ГрафикиОтпусковПодразделений";
	ПКО.ИмяОбъектаDTO 			= "divisionVacationsSchedule";
	ПКО.ИмяКлючевогоСвойства 	= "ИдентификаторДокумента";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ГрафикОтпусковПодразделения;
	
	ПКО.ОбязательныеСвойства.Вставить("ID", 						"ИдентификаторДокумента");
	ПКО.ОбязательныеСвойства.Вставить("divisionID", 				"Подразделение");
	ПКО.ОбязательныеСвойства.Вставить("periods", 					"Периоды");
	ПКО.ОбязательныеСвойства.Вставить("enterpriseVacationsSchedule", "ИдентификаторГрафикаПредприятия");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("ID", 				"ИдентификаторДокумента"));
	ПравилаКС.Добавить(НовоеПКС("version", 			"ВерсияИзменений"));
	ПравилаКС.Добавить(НовоеПКС("year", 			"Год"));
	ПравилаКС.Добавить(НовоеПКС("divisionID", 		"Подразделение",,"Подразделение"));
	ПравилаКС.Добавить(НовоеПКС("status", 			"Состояние",,"СостояниеСбораГрафиковОтпусков"));
	ПравилаКС.Добавить(НовоеПКС("periods",			"Периоды", "ПериодыГрафикаОтпусковПодразделения"));
	ПравилаКС.Добавить(НовоеПКС("responsibleID", 	"Ответственный",,"ФизическоеЛицо"));
	ПравилаКС.Добавить(НовоеПКС("enterpriseVacationsSchedule", 	"ИдентификаторГрафикаПредприятия"));
	
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;
	
КонецФункции 

// enterpriseVacationsSchedule
Функция ПКО_ГрафикиОтпусковПредприятия()
	
	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "ГрафикиОтпусковПредприятия";
	ПКО.ИмяОбъектаDTO 			= "enterpriseVacationsSchedule";
	ПКО.ИмяКлючевогоСвойства 	= "ИдентификаторДокумента";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ГрафикОтпусковПредприятия;
	
	ПКО.ОбязательныеСвойства.Вставить("ID", 			"ИдентификаторДокумента");
	ПКО.ОбязательныеСвойства.Вставить("year", 			"Год");
	ПКО.ОбязательныеСвойства.Вставить("status", 		"Состояние");
	ПКО.ОбязательныеСвойства.Вставить("initiatorID", 	"ИнициаторСбора");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("ID", 				"ИдентификаторДокумента")); 
	ПравилаКС.Добавить(НовоеПКС("year", 			"Год")); 
	ПравилаКС.Добавить(НовоеПКС("status", 			"Состояние",,"СостояниеСбораГрафиковОтпусков"));
	ПравилаКС.Добавить(НовоеПКС("initiatorID", 		"ИнициаторСбора",,"ФизическоеЛицо"));
	ПравилаКС.Добавить(НовоеПКС("version", 			"ВерсияИзменений"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;
	
КонецФункции 

// vacationsSchedulePeriod
Функция ПКО_ПериодыГрафикаОтпусковПодразделения()
	
	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 			= "ПериодыГрафикаОтпусковПодразделения";
	ПКО.ИмяОбъектаDTO 	= "vacationsSchedulePeriod";
	
	ПКО.ОбязательныеСвойства.Вставить("personID", 	"ФизическоеЛицо");
	ПКО.ОбязательныеСвойства.Вставить("startDate", 	"ДатаНачала");
	ПКО.ОбязательныеСвойства.Вставить("endDate", 	"ДатаОкончания");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("personID",		"ФизическоеЛицо",,"ФизическоеЛицо"));
	ПравилаКС.Добавить(НовоеПКС("startDate",	"ДатаНачала"));
	ПравилаКС.Добавить(НовоеПКС("endDate",		"ДатаОкончания"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;
	
КонецФункции

// apiVersion
Функция ПКО_ВерсииФормата()
	
	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "ВерсииФормата";
	ПКО.ИмяОбъектаDTO 			= "apiVersion";
	ПКО.ИмяКлючевогоСвойства 	= "";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ВерсииФормата;
	
	ПКО.ОбязательныеСвойства.Вставить("apiVersion", 	"ВерсияAPI");
	ПКО.ОбязательныеСвойства.Вставить("formatVersion", 	"ВерсияDTO");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("apiVersion", 		"ВерсияAPI"));
	ПравилаКС.Добавить(НовоеПКС("formatVersion", 	"ВерсияDTO"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;

КонецФункции

// allChanges
Функция ПКО_ВсеИзменения()
	
	МенеджерТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом;
	
	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "ВсеИзменения";
	ПКО.ИмяОбъектаDTO 			= "allChanges";
	ПКО.ИмяКлючевогоСвойства 	= "";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ВсеИзменения;
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	
	ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[МенеджерТипОбъекта.ГрафикОтпусковПодразделения];
	ПравилаКС.Добавить(НовоеПКС("divisionVacationsScheduleRequests", ИмяКоллекции, "ГрафикиОтпусковПодразделений"));
	
	ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[МенеджерТипОбъекта.ГрафикОтпусковПредприятия];
	ПравилаКС.Добавить(НовоеПКС("enterpriseVacationsSchedules", ИмяКоллекции, "ГрафикиОтпусковПредприятия"));
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		
		ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[МенеджерТипОбъекта.Оффер];
		ПравилаКС.Добавить(НовоеПКС("offers", ИмяКоллекции, "Офферы"));
		
		ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[МенеджерТипОбъекта.ФизическоеЛицо];
		ПравилаКС.Добавить(НовоеПКС("persons", ИмяКоллекции, "ФизическиеЛица"));
		
	КонецЕсли;
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		
		ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[МенеджерТипОбъекта.ЗапросСправки2НДФЛ];
		ПравилаКС.Добавить(НовоеПКС("forms2NDFLRequests", ИмяКоллекции, "ЗапросыСправок2НДФЛ"));
		
		ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[МенеджерТипОбъекта.ЗапросСправкиСМестаРаботы];
		ПравилаКС.Добавить(НовоеПКС("certificatesFromEmployerRequests", ИмяКоллекции, "ЗапросыСправокСМестаРаботы"));
		
	КонецЕсли;
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО; 

КонецФункции

// form2NDFLRequest
Функция ПКО_ЗапросыСправок2НДФЛ()

	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "ЗапросыСправок2НДФЛ";
	ПКО.ИмяОбъектаDTO 			= "form2NDFLRequest";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ЗапросСправки2НДФЛ;
	
	ПКО.ОбязательныеСвойства.Вставить("ID",			"ИдентификаторЗаявки");
	ПКО.ОбязательныеСвойства.Вставить("version", 	"ВерсияИзменений");
	ПКО.ОбязательныеСвойства.Вставить("personID", 	"ФизическоеЛицо");
	ПКО.ОбязательныеСвойства.Вставить("employerID",	"Организация");
	ПКО.ОбязательныеСвойства.Вставить("purpose", 	"Назначение2НДФЛ");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("ID",					"ИдентификаторЗаявки"));
	ПравилаКС.Добавить(НовоеПКС("version", 				"ВерсияИзменений"));
	ПравилаКС.Добавить(НовоеПКС("dateCreated", 			"ДатаСоздания"));
	ПравилаКС.Добавить(НовоеПКС("employerID",			"Организация",, "Организация"));
	ПравилаКС.Добавить(НовоеПКС("personID", 	 		"ФизическоеЛицо",, "ФизическоеЛицо"));
	ПравилаКС.Добавить(НовоеПКС("purpose", 				"Назначение2НДФЛ",, "НазначениеСправки2НДФЛ"));
	ПравилаКС.Добавить(НовоеПКС("taxYear", 				"НалоговыйПериод"));
	ПравилаКС.Добавить(НовоеПКС("proofPeriod",			"КоличествоМесяцев"));
	ПравилаКС.Добавить(НовоеПКС("incomePeriodStartDate","НачалоПериода"));
	ПравилаКС.Добавить(НовоеПКС("incomePeriodEndDate", 	"ОкончаниеПериода"));
	ПравилаКС.Добавить(НовоеПКС("obtainingMode",		"ВариантПолученияДокументаРезультата",,"ВариантПолученияДокументаРезультата"));
	ПравилаКС.Добавить(НовоеПКС("copiesNumber",			"КоличествоЭкземпляров"));
	ПравилаКС.Добавить(НовоеПКС("sendEmail",			"ОтправлятьEmail"));
	ПравилаКС.Добавить(НовоеПКС("addressEmail",			"АдресEmail"));
	ПравилаКС.Добавить(НовоеПКС("note",					"Комментарий"));
	ПравилаКС.Добавить(НовоеПКС("document", 			"ЭлектронныйДокумент", "ЭлектронныйДокумент"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;

КонецФункции

// electronicDocument
Функция ПКО_ЭлектронныеДокументы()

	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 			= "ЭлектронныеДокументы";
	ПКО.ИмяОбъектаDTO 	= "electronicDocument";
	
	ПКО.ОбязательныеСвойства.Вставить("originalDocument", "ИсходныйДокумент");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("originalDocument", 		"ИсходныйДокумент", "Файлы"));
	ПравилаКС.Добавить(НовоеПКС("additionalPresentations", 	"ПредставленияДокумента", "Файлы"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;  
	
	Возврат ПКО;

КонецФункции

// certificateFromEmployerRequest
Функция ПКО_ЗапросыСправокСМестаРаботы()

	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "ЗапросыСправокСМестаРаботы";
	ПКО.ИмяОбъектаDTO 			= "certificateFromEmployerRequest";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ЗапросСправкиСМестаРаботы;
	
	ПКО.ОбязательныеСвойства.Вставить("ID",			"ИдентификаторЗаявки");
	ПКО.ОбязательныеСвойства.Вставить("version", 	"ВерсияИзменений");
	ПКО.ОбязательныеСвойства.Вставить("personID", 	"ФизическоеЛицо");
	ПКО.ОбязательныеСвойства.Вставить("employerID",	"Организация");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("ID",					"ИдентификаторЗаявки"));
	ПравилаКС.Добавить(НовоеПКС("version", 				"ВерсияИзменений"));
	ПравилаКС.Добавить(НовоеПКС("dateCreated", 			"ДатаСоздания"));
	ПравилаКС.Добавить(НовоеПКС("employerID",			"Организация",, "Организация"));
	ПравилаКС.Добавить(НовоеПКС("personID", 			"ФизическоеЛицо",, "ФизическоеЛицо"));
	ПравилаКС.Добавить(НовоеПКС("purpose", 				"НазначениеСправкиСРаботыСтрока"));
	ПравилаКС.Добавить(НовоеПКС("attachments", 			"Вложения", "Файлы")); 
	ПравилаКС.Добавить(НовоеПКС("note",					"Комментарий"));
	ПравилаКС.Добавить(НовоеПКС("obtainingMode",		"ВариантПолученияДокументаРезультата",,"ВариантПолученияДокументаРезультата"));
	ПравилаКС.Добавить(НовоеПКС("copiesNumber",			"КоличествоЭкземпляров"));
	ПравилаКС.Добавить(НовоеПКС("sendEmail",			"ОтправлятьEmail"));
	ПравилаКС.Добавить(НовоеПКС("addressEmail",			"АдресEmail"));
	ПравилаКС.Добавить(НовоеПКС("document", 			"ЭлектронныйДокумент", "ЭлектронныеДокументы"));
	ПравилаКС.Добавить(НовоеПКС("certificateTypeID", 	"ВидСправки",,"ВидПредоставляемойСотрудникамСправки"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;

КонецФункции

// certificateFromEmployerType
Функция ПКО_ВидыПредоставляемыхСотрудникамСправок()

	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "ВидыПредоставляемыхСотрудникамСправок";
	ПКО.ИмяОбъектаDTO 			= "certificateFromEmployerType"; 
	ПКО.ИмяКлючевогоСвойства 	= "ВидСправки";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ВидПредоставляемойСотрудникамСправки; 
	
	ПКО.ОбязательныеСвойства.Вставить("ID",				"ВидСправки");
	ПКО.ОбязательныеСвойства.Вставить("presentation", 	"Представление");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("ID",			"ВидСправки",,"ВидПредоставляемойСотрудникамСправки"));
	ПравилаКС.Добавить(НовоеПКС("presentation", "Представление"));
	ПравилаКС.Добавить(НовоеПКС("description", 	"Описание"));
	ПравилаКС.Добавить(НовоеПКС("inUse", 		"Используется"));
	ПравилаКС.Добавить(НовоеПКС("order", 		"РеквизитДопУпорядочивания"));
	ПравилаКС.Добавить(НовоеПКС("sample", 		"Образец", "Файлы"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;

КонецФункции 

// offer
Функция ПКО_Офферы()

	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "Офферы";
	ПКО.ИмяОбъектаDTO 			= "offer";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Оффер;
	
	ПКО.ОбязательныеСвойства.Вставить("ID",			"ИдентификаторДокумента");
	ПКО.ОбязательныеСвойства.Вставить("division", 	"Подразделение");
	ПКО.ОбязательныеСвойства.Вставить("position", 	"Подразделение");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("ID",					"ИдентификаторДокумента"));
	ПравилаКС.Добавить(НовоеПКС("person", 				"Кандидат",,"ФизическоеЛицоСсылка"));
	ПравилаКС.Добавить(НовоеПКС("division", 			"Подразделение",,"Подразделение"));
	ПравилаКС.Добавить(НовоеПКС("position", 			"Должность",,"Должность"));
	ПравилаКС.Добавить(НовоеПКС("staffListPosition", 	"ДолжностьПоШтатномуРасписанию",,"ДолжностьПоШтатномуРасписанию"));
	ПравилаКС.Добавить(НовоеПКС("startDate",			"ДатаВыходаНаРаботу"));
	ПравилаКС.Добавить(НовоеПКС("acceptancePeriod",		"СрокПринятия")); 
	ПравилаКС.Добавить(НовоеПКС("version", 				"ВерсияИзменений"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;

КонецФункции

// workContactsAccess
Функция ПКО_ОграниченияДоступаКРабочимКонтактам()

	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "ОграниченияДоступаКРабочимКонтактам";
	ПКО.ИмяОбъектаDTO 			= "workContactsAccess";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ОграничениеДоступаКРабочимКонтактам;
	
	ПКО.ОбязательныеСвойства.Вставить("personID",	"ФизическоеЛицо");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("personID",	"ФизическоеЛицо",,"ФизическоеЛицо"));
	ПравилаКС.Добавить(НовоеПКС("access", 	"УровеньДоступа",,"УровеньДоступаКИнформацииОСотрудниках"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;

КонецФункции

// personOptions
Функция ПКО_ДоступныеФункцииФизическогоЛица()

	// ПКО: ИмяПКО,ИмяОбъектаDTO,ИмяКлючевогоСвойства,ТипОбъекта,ОбязательныеСвойства,НеЗаполнятьСвойства,ПравилаКонвертацииСвойств.
	ПКО = НовоеОписаниеПКО();
	
	ПКО.ИмяПКО 					= "ДоступныеФункцииФизическогоЛица";
	ПКО.ИмяОбъектаDTO 			= "personOptions";
	ПКО.ТипОбъекта 				= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДоступныеФункцииФизическогоЛица;
	
	ПКО.ОбязательныеСвойства.Вставить("personID",	"ФизическоеЛицо");
	
	// ПКС: ИмяСвойстваDTO,ИмяСвойстваКонфигурации,ИмяПКО,ИмяПКЗ.
	ПравилаКС = Новый Массив;
	ПравилаКС.Добавить(НовоеПКС("personID",			"ФизическоеЛицо",,"ФизическоеЛицо"));
	ПравилаКС.Добавить(НовоеПКС("personnelEdmUse", 	"ИспользуетКЭДО"));
	
	ПКО.ПравилаКонвертацииСвойств = ПравилаКС;
	
	Возврат ПКО;

КонецФункции


#КонецОбласти 

#Область ПравилаКонвертацияЗначенийПеречисленийФормата

// gender
Функция КонвертацияЗначений_Пол()
	
	ИмяПеречисления = "gender";
	
	МенеджерПеречисления = Перечисления.ПолФизическогоЛица;
	Выгрузка = Новый Соответствие;
	Загрузка = Новый Соответствие;
	
	Выгрузка.Вставить(МенеджерПеречисления.Мужской, "male");
	Загрузка.Вставить("male", МенеджерПеречисления.Мужской);
	
	Выгрузка.Вставить(МенеджерПеречисления.Женский, "female");
	Загрузка.Вставить("female", МенеджерПеречисления.Женский); 
	
	Возврат Новый Структура("Выгрузка,Загрузка",НовоеПКЗ(,,Выгрузка),НовоеПКЗ(,,Загрузка));
	
КонецФункции

// identityDocumentType
Функция КонвертацияЗначений_ВидДокументаУЛ()
	
	ИмяПеречисления = "identityDocumentType";
	
	Выгрузка = Новый Соответствие;
	Загрузка = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыДокументов.Ссылка КАК Ссылка,
	|	ВидыДокументов.КодМВД КАК КодМВД
	|ИЗ
	|	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументов";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.КодМВД = "21" Тогда
			Выгрузка.Вставить(Выборка.Ссылка, "passport");
			Загрузка.Вставить("passport", Выборка.Ссылка);
		ИначеЕсли Выборка.КодМВД = "10" Тогда
			Выгрузка.Вставить(Выборка.Ссылка, "foreignPassport");
			Загрузка.Вставить("foreignPassport", Выборка.Ссылка);
		ИначеЕсли Выборка.КодМВД = "12" Тогда
			Выгрузка.Вставить(Выборка.Ссылка, "residenceCard");
			Загрузка.Вставить("residenceCard", Выборка.Ссылка);
		ИначеЕсли Выборка.КодМВД = "14" Тогда
			Выгрузка.Вставить(Выборка.Ссылка, "identityCard");
			Загрузка.Вставить("identityCard", Выборка.Ссылка);
		ИначеЕсли Выборка.КодМВД = "04" Тогда
			Выгрузка.Вставить(Выборка.Ссылка, "militaryIdentityCard");
			Загрузка.Вставить("militaryIdentityCard", Выборка.Ссылка);
		ИначеЕсли Выборка.КодМВД = "15" Тогда
			Выгрузка.Вставить(Выборка.Ссылка, "residencePermission");
			Загрузка.Вставить("residencePermission", Выборка.Ссылка);
		ИначеЕсли Выборка.КодМВД = "91" Тогда
			Загрузка.Вставить("other", Выборка.Ссылка);
		Иначе
			Выгрузка.Вставить(Выборка.Ссылка, "other");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Выгрузка,Загрузка",НовоеПКЗ(,,Выгрузка),НовоеПКЗ(,,Загрузка));
	
КонецФункции

// employmentType
Функция КонвертацияЗначений_ВидЗанятости()
	
	ИмяПеречисления = "identityDocumentType";
	
	МенеджерПеречисления = Перечисления.ВидыЗанятости;
	Выгрузка = Новый Соответствие;
	Загрузка = Новый Соответствие;
	
	Выгрузка.Вставить(МенеджерПеречисления.ОсновноеМестоРаботы, "mainWork");
	Загрузка.Вставить("mainWork", МенеджерПеречисления.ОсновноеМестоРаботы);
	
	Выгрузка.Вставить(МенеджерПеречисления.Совместительство, "extraWorkExternal");
	Загрузка.Вставить("extraWorkExternal", МенеджерПеречисления.Совместительство);
	
	Выгрузка.Вставить(МенеджерПеречисления.ВнутреннееСовместительство, "extraWorkInternal");
	Загрузка.Вставить("extraWorkInternal", МенеджерПеречисления.ВнутреннееСовместительство);
	
	Выгрузка.Вставить(МенеджерПеречисления.Подработка, "extraWorkTemporary");
	Загрузка.Вставить("extraWorkTemporary", МенеджерПеречисления.Подработка);
	
	Возврат Новый Структура("Выгрузка,Загрузка",НовоеПКЗ(,,Выгрузка),НовоеПКЗ(,,Загрузка));
	
КонецФункции

// vacationsScheduleStatus
Функция КонвертацияЗначений_СостояниеСбораГрафиковОтпусков()
	
	ИмяПеречисления = "vacationsScheduleStatus";  
	
	Выгрузка = Новый Соответствие;
	Загрузка = Новый Соответствие;
	
	МенеджерПеречисления = ИнтеграцияУправлениеПерсоналом.МенеджерПеречисленияСостоянияСбораГрафиковОтпусков();
	Если ЗначениеЗаполнено(МенеджерПеречисления) Тогда
		
		Выгрузка.Вставить(МенеджерПеречисления.Черновик, "draft");
		Загрузка.Вставить("draft", МенеджерПеречисления.Черновик);
		
		Выгрузка.Вставить(МенеджерПеречисления.Отказано, "denied");
		Загрузка.Вставить("denied", МенеджерПеречисления.Отказано);
		
		Выгрузка.Вставить(МенеджерПеречисления.Утверждено, "approved");
		Загрузка.Вставить("approved", МенеджерПеречисления.Утверждено);
		
		Выгрузка.Вставить(МенеджерПеречисления.ВРаботе, "inProgress");
		Загрузка.Вставить("inProgress", МенеджерПеречисления.ВРаботе);
		
	КонецЕсли;
	
	Возврат Новый Структура("Выгрузка,Загрузка",НовоеПКЗ(,,Выгрузка),НовоеПКЗ(,,Загрузка));
	
КонецФункции

// obtainingMode
Функция КонвертацияЗначений_ВариантПолученияДокументаРезультата()
	
	ИмяПеречисления = "obtainingMode";
	
	МенеджерПеречисления = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника;
	Выгрузка = Новый Соответствие;
	Загрузка = Новый Соответствие;
	
	Выгрузка.Вставить(МенеджерПеречисления.ФайлДляВыводаНаПринтер, "fileForPrinterOutput");
	Загрузка.Вставить("fileForPrinterOutput", МенеджерПеречисления.ФайлДляВыводаНаПринтер);
	
	Выгрузка.Вставить(МенеджерПеречисления.СканСПодписьюИПечатью, "scanWithSignatureAndStamp");
	Загрузка.Вставить("scanWithSignatureAndStamp", МенеджерПеречисления.СканСПодписьюИПечатью);
	
	Выгрузка.Вставить(МенеджерПеречисления.ВБумажномВиде, "paperForm");
	Загрузка.Вставить("paperForm", МенеджерПеречисления.ВБумажномВиде);
	
	Выгрузка.Вставить(МенеджерПеречисления.ФайлСЭП, "fileWithElectronicSignature");
	Загрузка.Вставить("fileWithElectronicSignature", МенеджерПеречисления.ФайлСЭП);
	
	Возврат Новый Структура("Выгрузка,Загрузка",НовоеПКЗ(,,Выгрузка),НовоеПКЗ(,,Загрузка));
	
КонецФункции

// form2NDFLRequestPurpose
Функция КонвертацияЗначений_НазначениеСправки2НДФЛ()

	ИмяПеречисления = "form2NDFLRequestPurpose";
	
	Выгрузка = Новый Соответствие;
	Загрузка = Новый Соответствие;
	
	Загрузка.Вставить("incomeProof", 	"ПодтверждениеДоходов");
	Загрузка.Вставить("declare", 		"ДекларированиеДоходов");
	
	Возврат Новый Структура("Выгрузка,Загрузка",НовоеПКЗ(),НовоеПКЗ(,,Загрузка));

КонецФункции

// employeeInfoAccess
Функция КонвертацияЗначений_УровниДоступаКИнформацииОСотрудниках()
	
	ИмяПеречисления = "employeeInfoAccess";
	
	МенеджерПеречисления = Перечисления.УровниДоступаКИнформацииОСотрудниках;
	Выгрузка = Новый Соответствие;
	Загрузка = Новый Соответствие;
	
	Выгрузка.Вставить(МенеджерПеречисления.НетОграничений, "grantEveryone");
	Загрузка.Вставить("grantEveryone", МенеджерПеречисления.НетОграничений);
	
	Выгрузка.Вставить(МенеджерПеречисления.Руководители, "grantDivisionHeads");
	Загрузка.Вставить("grantDivisionHeads", МенеджерПеречисления.Руководители);
	
	Выгрузка.Вставить(МенеджерПеречисления.СотрудникиПодразделения, "grantPeers");
	Загрузка.Вставить("grantPeers", МенеджерПеречисления.СотрудникиПодразделения);
	
	Возврат Новый Структура("Выгрузка,Загрузка",НовоеПКЗ(,,Выгрузка),НовоеПКЗ(,,Загрузка));
	
КонецФункции


#КонецОбласти

Функция ИменаСвойствСоЗначениямиДата() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("dateCreated");
	Результат.Добавить("issueDate");
	Результат.Добавить("startDate");
	Результат.Добавить("endDate");
	Результат.Добавить("applyMonth");
	Результат.Добавить("incomePeriodStartDate");
	Результат.Добавить("incomePeriodEndDate");
	Результат.Добавить("time");
	Результат.Добавить("birthDate");
	Результат.Добавить("employmentDate");
	Результат.Добавить("issueDate");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область МетодыКонвертацииВОбъектыDTO

// Выполняет конвертацию строк таблицы значений в объекты DTO.
//
// Параметры:
// 		ТаблицаДанных - ТаблицаЗначений.
// 		ИмяПКО - Строка.
// Возвращаемое значение:
// 		Структура:
// 			* ОбъектыDTO - Массив - элемент массива - структура. 
// 			* ОшибкиЗаполнения - Массив - элемент массива - структура НовоеОписаниеОшибкиЗаполненияОбъектаDTO().
//
Функция ТаблицаВОбъектыDTO(ТаблицаДанных, ИмяПКО)
	
	РезультатКонвертации = Новый Структура("ОбъектыDTO,ОшибкиЗаполнения");
	
	ОбъектыDTO = Новый Массив;
	ОшибкиЗаполнения = Новый Массив;
	
	Для каждого СтрокаДанных Из ТаблицаДанных Цикл
		Попытка
			ОбъектКонфигурации = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаДанных);
			РезультатКонвертацииОбъекта = ОбъектКонфигурацииВОбъектDTO(ОбъектКонфигурации, ИмяПКО);
			Если ЗначениеЗаполнено(РезультатКонвертацииОбъекта.ОбъектDTO) Тогда
				ОбъектыDTO.Добавить(РезультатКонвертацииОбъекта.ОбъектDTO);
			КонецЕсли;
			Если ЗначениеЗаполнено(РезультатКонвертацииОбъекта.ОписаниеОшибки) Тогда
				ОшибкиЗаполнения.Добавить(РезультатКонвертацииОбъекта.ОписаниеОшибки);
			КонецЕсли;
		Исключение
			// Ошибка конвертации объекта.
			БылиОшибки = Истина;
			ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьОшибкуКонвертацииОбъекта(ИмяПКО, ОбъектКонфигурации, ОписаниеОшибки);
		КонецПопытки
	КонецЦикла;
	
	РезультатКонвертации.ОбъектыDTO 		= ОбъектыDTO;
	РезультатКонвертации.ОшибкиЗаполнения 	= ОшибкиЗаполнения;
	
	Возврат РезультатКонвертации;

КонецФункции

// Возвращает результат конвертации объекта в объектDTO
//
// Парметры:
// 		ОбъектКонфигурации - Структура, ТаблицаЗначений, Массив.
// 		ИмяПКО - Структура.
//
// Возвращаемое значение:
// 		Структура
// 			* ОбъектDTO - Структра, Массив - если массив, то это коллекция объектов DTO
// 			* ОписаниеОшибки - Структура, Массив структур НовоеОписаниеОшибкиЗаполненияОбъектаDTO().
//
Функция ОбъектКонфигурацииВОбъектDTO(ОбъектКонфигурации, ИмяПКО)
	
	РезультатКонвертацииОбъекта = Новый Структура("ОбъектDTO,ОписаниеОшибки");
	
	Если ТипЗнч(ОбъектКонфигурации) = Тип("ТаблицаЗначений") Или ТипЗнч(ОбъектКонфигурации) = Тип("Массив") Тогда
		
		// Исполняется при рекурсивном вызове, когда для свойства указано ПКО.
		
		ОбъектКонфигурацииТипТаблица = (ТипЗнч(ОбъектКонфигурации) = Тип("ТаблицаЗначений"));
		
		МассивОшибок 	= Новый Массив;
		МассивОбъектов 	= Новый Массив;
		
		Для каждого Объект Из ОбъектКонфигурации Цикл
			Если ОбъектКонфигурацииТипТаблица Тогда
				ОбъектДляКонвертации =ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Объект); 
			Иначе
				ОбъектДляКонвертации = Объект;
			КонецЕсли;
			Результат = ОбъектКонфигурацииВОбъектDTO(ОбъектДляКонвертации, ИмяПКО);
			Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
				МассивОшибок.Добавить(Результат.ОписаниеОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Результат.ОбъектDTO) Тогда
				МассивОбъектов.Добавить(Результат.ОбъектDTO);
			КонецЕсли;
		КонецЦикла;
		
		РезультатКонвертацииОбъекта.ОбъектDTO 		= МассивОбъектов;
		РезультатКонвертацииОбъекта.ОписаниеОшибки 	= МассивОшибок;
		
		Возврат РезультатКонвертацииОбъекта;
		
	Иначе
		
		ПКО = ПравилоКонвертацииОбъекта(ИмяПКО);
		Если Не ЗначениеЗаполнено(ПКО) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИмяОбъектаDTO 			= ПКО.ИмяОбъектаDTO;
		ИмяКлючевогоСвойства 	= ПКО.ИмяКлючевогоСвойства;
		ОбязательныеСвойства 	= ПКО.ОбязательныеСвойства;
		
		// Имена свойств DTO, которые не заполняются при выгрузке в конкретное приложение.
		НеЗаполнятьСвойство = ПКО.НеЗаполнятьСвойства[Приложение];
		
		ОшибкиЗаполненияСвойств = Новый Массив;
		
		ОбъектКонфигурацииТипСтруктура = (ТипЗнч(ОбъектКонфигурации) = Тип("Структура"));
		
		ОбъектDTO = Новый Структура;
		Для каждого ПКС Из ПКО.ПравилаКонвертацииСвойств Цикл
			
			ИмяСвойстваDTO 				= ПКС.ИмяСвойстваDTO;
			ИмяСвойстваКонфигурации 	= ПКС.ИмяСвойстваКонфигурации;
			ИмяПКОСвойства 				= ПКС.ИмяПКО;
			ИмяПКЗСвойства 				= ПКС.ИмяПКЗ;
			
			Если НеЗаполнятьСвойство[ИмяСвойстваDTO] = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ПроверятьЗаполнение = ЗначениеЗаполнено(ОбязательныеСвойства[ИмяСвойстваDTO]);
			
			ЗначениеСвойства = Неопределено;
			Если ОбъектКонфигурацииТипСтруктура Тогда
				ОбъектКонфигурации.Свойство(ИмяСвойстваКонфигурации, ЗначениеСвойства);
			Иначе
				ЗначениеСвойства = ОбъектКонфигурации[ИмяСвойстваКонфигурации];
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
				Если ПроверятьЗаполнение Тогда
					ОписаниеОшибки = НовоеОписаниеОшибкиЗаполненияСвойства();
					ОписаниеОшибки.ИмяСвойстваDTO 			= ИмяСвойстваDTO;
					ОписаниеОшибки.ИмяСвойстваКонфигурации 	= ИмяСвойстваКонфигурации;
					ОшибкиЗаполненияСвойств.Добавить(ОписаниеОшибки);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			ОшибкиОбъекта = Неопределено;
			ЗначениеDTO = Неопределено;
			Если ЗначениеЗаполнено(ИмяПКОСвойства) Тогда
				Результат = ОбъектКонфигурацииВОбъектDTO(ЗначениеСвойства, ИмяПКОСвойства);
				ЗначениеDTO 	= Результат.ОбъектDTO;
				ОшибкиОбъекта 	= Результат.ОписаниеОшибки;
			Иначе
				ЗначениеDTO = ЗначениеСвойстваВСвойствоDTO(ЗначениеСвойства, ИмяСвойстваКонфигурации, ИмяПКЗСвойства);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеDTO) Тогда
				ОбъектDTO.Вставить(ИмяСвойстваDTO, ЗначениеDTO);
			ИначеЕсли ПроверятьЗаполнение Тогда
				// не найдено значение при конвертации
				ОписаниеОшибки = НовоеОписаниеОшибкиЗаполненияСвойства();
				ОписаниеОшибки.ИмяСвойстваDTO 			= ИмяСвойстваDTO;
				ОписаниеОшибки.ИмяСвойстваКонфигурации 	= ИмяСвойстваКонфигурации;
				ОписаниеОшибки.ЗначениеСвойства 		= ЗначениеСвойства;
				ОписаниеОшибки.ОшибкиОбъекта 			= ОшибкиОбъекта;
				ОшибкиЗаполненияСвойств.Добавить(ОписаниеОшибки);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОшибкиЗаполненияСвойств) Тогда 
			
			ЗначениеКлючевогоСвойства = Неопределено;
			Если ОбъектКонфигурацииТипСтруктура Тогда
				ОбъектКонфигурации.Свойство(ИмяКлючевогоСвойства, ЗначениеКлючевогоСвойства);
			Иначе
				ЗначениеКлючевогоСвойства = ОбъектКонфигурации[ИмяКлючевогоСвойства];
			КонецЕсли;
			
			ОписаниеОшибки = НовоеОписаниеОшибкиЗаполненияОбъектаDTO();
			Если ЗначениеЗаполнено(ЗначениеКлючевогоСвойства) Тогда
				ОписаниеОшибки.Объект 	= ЗначениеКлючевогоСвойства;
				ОписаниеОшибки.Тип 		= Строка(ТипЗнч(ЗначениеКлючевогоСвойства));
			КонецЕсли;
			ОписаниеОшибки.ИмяПКО 			= ИмяПКО;
			ОписаниеОшибки.ИмяОбъектаDTO 	= ИмяОбъектаDTO;
			ОписаниеОшибки.Ошибки 			= ОшибкиЗаполненияСвойств;
			РезультатКонвертацииОбъекта.ОписаниеОшибки = ОписаниеОшибки;
			
			БылиОшибки = Истина;
			ЗарегистрироватьОшибкуЗаполненияОбъекта(ОписаниеОшибки);
			
		Иначе
			РезультатКонвертацииОбъекта.ОбъектDTO = ОбъектDTO;
		КонецЕсли;
		
		Возврат РезультатКонвертацииОбъекта;
		
	КонецЕсли;
	
КонецФункции

Функция ЗначениеСвойстваВСвойствоDTO(ЗначениеСвойства, ИмяСвойстваКонфигурации, ИмяПКЗ)
	
	ЗначениеСвойстваDTO = Неопределено;
	
	Если Не ЗначениеЗаполнено(ИмяПКЗ) Тогда
		ЗначениеСвойстваDTO = ЗначениеСвойства;
	Иначе
		ПКЗ = ПравилоКонвертацииЗначения(ИмяПКЗ);
		Если ЗначениеЗаполнено(ПКЗ) Тогда
			Если ПКЗ.Выгрузка.ПубличныйИдентификатор Тогда
				ТипОбъекта = ПКЗ.Выгрузка.ТипОбъекта;
				ЗначениеСвойстваDTO = ПубличныйИдентификаторСсылки(ТипОбъекта, ЗначениеСвойства);
			ИначеЕсли ЗначениеЗаполнено(ПКЗ.Выгрузка.КонвертацияЗначений) Тогда
				ЗначениеСвойстваDTO = ПКЗ.Выгрузка.КонвертацияЗначений[ЗначениеСвойства];
				Если Не ЗначениеЗаполнено(ЗначениеСвойстваDTO) Тогда
					БылиОшибки = Истина;
					ЗаписатьОшибкуНеНайденоЗначениеПКЗ(ИмяПКЗ, ЗначениеСвойства);
				КонецЕсли;
			Иначе
				ЗначениеСвойстваDTO = ЗначениеСвойства;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеСвойстваDTO;
	
КонецФункции

Функция НовоеОписаниеОшибкиЗаполненияОбъектаDTO()

	Описание = Новый Структура();
	Описание.Вставить("Объект"); 		// Строка,Ссылка на объект конфигурации.
	Описание.Вставить("Тип"); 			// Строка, тип объекта.
	Описание.Вставить("ИмяПКО");		// Строка, имя ПКО.
	Описание.Вставить("ИмяОбъектаDTO");	// Строка, имя объекта DTO, указанное в ПКО.
	Описание.Вставить("Ошибки"); 		// Массив структур НовоеОписаниеОшибкиЗаполненияСвойства().
	
	Возврат Описание;

КонецФункции

Функция НовоеОписаниеОшибкиЗаполненияСвойства()

	Описание = Новый Структура();
	
	// Имя свойства объекта DTO, указанное в ПКО.
	Описание.Вставить("ИмяСвойстваDTO");
	// Имя свойства конфигурации, указанное в ПКО.
	Описание.Вставить("ИмяСвойстваКонфигурации");
	// Значение свойства объекта DTO, заполняется при конвертации из объект DTO.
	Описание.Вставить("ЗначениеСвойстваDTO");
	// Значение свойства конфигурации, заполняется при конвертации в объект DTO.
	Описание.Вставить("ЗначениеСвойства");
	// Структра - НовоеОписаниеОшибкиЗаполненияОбъектаDTO(),
	// заполняется, когда Свойство является объектом и есть ошибки заполнения объекта.
	Описание.Вставить("ОшибкиОбъекта");
	
	Возврат Описание;

КонецФункции

#КонецОбласти 

#Область МетодыКонвертациВОбъектыКонфигурации

Функция ОбъектDTOВОбъектКонфигурации(ОбъектДляКонвертации, ИмяПКО)
	
	РезультатКонвертацииОбъекта = Новый Структура("ОбъектКонфигурации,ОписаниеОшибки");
	
	Если ТипЗнч(ОбъектДляКонвертации) = Тип("Массив") Тогда
		
		МассивОбъектов 	= Новый Массив;
		МассивОшибок 	= Новый Массив;
		
		Для каждого ОбъектDTO Из ОбъектДляКонвертации Цикл
			
			Результат = ОбъектDTOВОбъектКонфигурации(ОбъектDTO, ИмяПКО);
			Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
				МассивОшибок.Добавить(Результат.ОписаниеОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Результат.ОбъектКонфигурации) Тогда
				МассивОбъектов.Добавить(Результат.ОбъектКонфигурации);
			КонецЕсли;
			
		КонецЦикла;
		
		РезультатКонвертацииОбъекта.ОбъектКонфигурации 	= МассивОбъектов;
		РезультатКонвертацииОбъекта.ОписаниеОшибки 		= МассивОшибок;
		
		Возврат РезультатКонвертацииОбъекта;
		
	Иначе
		
		ПКО = ПравилоКонвертацииОбъекта(ИмяПКО);
		Если Не ЗначениеЗаполнено(ПКО) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИмяОбъектаDTO 			= ПКО.ИмяОбъектаDTO;
		ИмяКлючевогоСвойства 	= ПКО.ИмяКлючевогоСвойства;
		ОбязательныеСвойства 	= ПКО.ОбязательныеСвойства;
		ТипОбъекта 				= ПКО.ТипОбъекта;
		
		ОшибкиЗаполненияСвойств = Новый Массив;
		
		Объект = Новый Структура;
		Для каждого ПКС Из ПКО.ПравилаКонвертацииСвойств Цикл
			
			ИмяСвойстваDTO 				= ПКС.ИмяСвойстваDTO;
			ИмяСвойстваКонфигурации 	= ПКС.ИмяСвойстваКонфигурации;
			ИмяПКОСвойства 				= ПКС.ИмяПКО;
			ИмяПКЗСвойства 				= ПКС.ИмяПКЗ;
			
			ПроверятьЗаполнение = ЗначениеЗаполнено(ОбязательныеСвойства[ИмяСвойстваDTO]);
			
			ЗначениеDTO = ОбъектДляКонвертации[ИмяСвойстваDTO];
			Если Не ЗначениеЗаполнено(ЗначениеDTO) Тогда
				Если ПроверятьЗаполнение Тогда
					ОписаниеОшибки = НовоеОписаниеОшибкиЗаполненияСвойства();
					ОписаниеОшибки.ИмяСвойстваDTO 			= ИмяСвойстваDTO;
					ОписаниеОшибки.ИмяСвойстваКонфигурации 	= ИмяСвойстваКонфигурации;
					ОшибкиЗаполненияСвойств.Добавить(ОписаниеОшибки);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			ОшибкиОбъекта = Неопределено;
			ЗначениеСвойства = Неопределено;
			Если ЗначениеЗаполнено(ИмяПКОСвойства) Тогда
				Результат = ОбъектDTOВОбъектКонфигурации(ЗначениеDTO, ИмяПКОСвойства);
				ЗначениеСвойства 	= Результат.ОбъектКонфигурации;
				ОшибкиОбъекта 		= Результат.ОписаниеОшибки;
			Иначе
				ЗначениеСвойства = ЗначениеDTOВЗначениеСвойства(ЗначениеDTO, ИмяПКЗСвойства, Объект, ИмяСвойстваКонфигурации);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
				Объект.Вставить(ИмяСвойстваКонфигурации, ЗначениеСвойства);
			ИначеЕсли ПроверятьЗаполнение Тогда
				// не найдено значение при конвертации
				ОписаниеОшибки = НовоеОписаниеОшибкиЗаполненияСвойства();
				ОписаниеОшибки.ИмяСвойстваDTO 			= ИмяСвойстваDTO;
				ОписаниеОшибки.ИмяСвойстваКонфигурации 	= ИмяСвойстваКонфигурации;
				ОписаниеОшибки.ЗначениеСвойстваDTO 		= ЗначениеDTO;
				ОписаниеОшибки.ОшибкиОбъекта 			= ОшибкиОбъекта;
				ОшибкиЗаполненияСвойств.Добавить(ОписаниеОшибки);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОшибкиЗаполненияСвойств) Тогда 
			
			ЗначениеКлючевогоСвойства = Объект[ИмяКлючевогоСвойства];
			
			ОписаниеОшибки = НовоеОписаниеОшибкиЗаполненияОбъектаDTO();
			ОписаниеОшибки.Объект 			= ЗначениеКлючевогоСвойства;
			ОписаниеОшибки.ИмяПКО 			= ИмяПКО;
			ОписаниеОшибки.Тип 				= Строка(ТипОбъекта);
			ОписаниеОшибки.ИмяОбъектаDTO 	= ИмяОбъектаDTO;
			ОписаниеОшибки.Ошибки 			= ОшибкиЗаполненияСвойств;
			
			РезультатКонвертацииОбъекта.ОписаниеОшибки = ОписаниеОшибки;
			
			Объект.Вставить("ОшибкиЗаполнения", ОписаниеОшибки);
			
			БылиОшибки = Истина;
			ЗарегистрироватьОшибкуЗаполненияОбъекта(ОписаниеОшибки, Истина);
			
		КонецЕсли;
		
		РезультатКонвертацииОбъекта.ОбъектКонфигурации = Объект;
		
		Возврат РезультатКонвертацииОбъекта;
		
	КонецЕсли;
	
КонецФункции

Функция ЗначениеDTOВЗначениеСвойства(ЗначениеDTO, ИмяПКЗ, Объект, ИмяСвойстваКонфигурации)
	
	ЗначениеСвойства = Неопределено;
	
	Если Не ЗначениеЗаполнено(ИмяПКЗ) Тогда
		ЗначениеСвойства = ЗначениеDTO;
	Иначе
		ПКЗ = ПравилоКонвертацииЗначения(ИмяПКЗ);
		Если ЗначениеЗаполнено(ПКЗ) Тогда
			Если ПКЗ.Загрузка.ПубличныйИдентификатор Тогда
				ТипОбъекта 		= ПКЗ.Загрузка.ТипОбъекта;
				ЗначениеСвойства = КэшИдентификаторСсылка[ТипОбъекта][ЗначениеDTO];
				Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
					// Не нашли ссылку по идентификатору в кэше, в значение вписываем идентификатор.
					ЗначениеСвойства = ЗначениеDTO;
					// Запомним объект и идентификатор, для последующего дозаполнения.
					НоваяСтрока = ТаблицаИдентификаторыБезСсылок.Добавить();
					НоваяСтрока.Объект 			= Объект;
					НоваяСтрока.ИмяСвойства 	= ИмяСвойстваКонфигурации;
					НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
					НоваяСтрока.Идентификатор 	= ЗначениеDTO;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(ПКЗ.Загрузка.КонвертацияЗначений) Тогда
				ЗначениеСвойства = ПКЗ.Загрузка.КонвертацияЗначений[ЗначениеDTO];
				Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
					БылиОшибки = Истина;
					ЗаписатьОшибкуНеНайденоЗначениеПКЗ(ИмяПКЗ, ЗначениеDTO);
				КонецЕсли;
			Иначе
				ЗначениеСвойства = ЗначениеDTO;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеСвойства;

КонецФункции

Процедура ДополнитьОбъектыСсылками(ТаблицаИдентификаторыБезСсылок)

	Если Не ЗначениеЗаполнено(ТаблицаИдентификаторыБезСсылок) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаИдентификаторов = ТаблицаИдентификаторыБезСсылок.Скопировать(,"ТипОбъекта,Идентификатор");
	ТаблицаИдентификаторов.Свернуть("ТипОбъекта,Идентификатор");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ТипОбъекта КАК ТипОбъекта,
	|	Таблица.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ТипОбъекта КАК ТипОбъекта,
	|	Таблица.Идентификатор КАК Идентификатор,
	|	ПубличныеИдентификаторы.Ссылка КАК Ссылка
	|ИЗ
	|	ВТТаблицаИдентификаторов КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом КАК ПубличныеИдентификаторы
	|		ПО Таблица.ТипОбъекта = ПубличныеИдентификаторы.ТипОбъекта
	|			И Таблица.Идентификатор = ПубличныеИдентификаторы.Идентификатор";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		КэшИдентификаторСсылка[Выборка.ТипОбъекта].Вставить(Выборка.Идентификатор, Выборка.Ссылка);
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из ТаблицаИдентификаторыБезСсылок Цикл
		Ссылка = КэшИдентификаторСсылка[СтрокаТЗ.ТипОбъекта][СтрокаТЗ.Идентификатор];
		Если ЗначениеЗаполнено(Ссылка) Тогда
			СтрокаТЗ.Объект.Вставить(СтрокаТЗ.ИмяСвойства, Ссылка);
		Иначе
			// Разбор ошибки будет произведен при обработке результатов обмена.
			ОшибкиКонвертацииСсылки = Неопределено;
			СтрокаТЗ.Объект.Свойство("ОшибкиКонвертацииСсылки", ОшибкиКонвертацииСсылки);
			Если ОшибкиКонвертацииСсылки = Неопределено Тогда
				ОшибкиКонвертацииСсылки = Новый Структура();
			КонецЕсли;
			ОшибкиКонвертацииСсылки.Вставить("ИмяСвойства", 	СтрокаТЗ.ИмяСвойства);
			ОшибкиКонвертацииСсылки.Вставить("Идентификатор", 	СтрокаТЗ.Идентификатор);
			СтрокаТЗ.Объект.Вставить("ОшибкиКонвертацииСсылки", ОшибкиКонвертацииСсылки);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ФормированиеJSON

Функция СформироватьJSON(Значение)
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON( ,Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Значение, НастройкиСериализацииJSON, "ПреобразованиеJSON", ЭтотОбъект);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразованиеJSON(Знач Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Результат = Неопределено;
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
		Результат = Строка(Значение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочие

Функция ПравилоКонвертацииОбъекта(ИмяПКО)

	ПКО = ПравилаКонвертацииОбъектов[ИмяПКО];
	Если Не ЗначениеЗаполнено(ПКО) Тогда
		БылиОшибки = Истина;
		ЗаписатьОшибкуНеНайденоПКО(ИмяПКО);
	КонецЕсли;
	
	Возврат ПКО;

КонецФункции

Функция ПравилоКонвертацииЗначения(ИмяПКЗ)

	ПКЗ = ПравилаКонвертацииЗначений[ИмяПКЗ];
	Если Не ЗначениеЗаполнено(ПКЗ) Тогда
		БылиОшибки = Истина;
		ЗаписатьОшибкуНеНайденоПКЗ(ИмяПКЗ);
	КонецЕсли;
	
	Возврат ПКЗ;

КонецФункции

Функция СвойстваПКЗПубличнаяСсылкаВыгрузка(ИмяПКО)
	
	СвойстваПубличнаяСсылка = Новый Соответствие;
	
	ПКО = ПравилоКонвертацииОбъекта(ИмяПКО);
	Если Не ЗначениеЗаполнено(ПКО) Тогда
		Возврат СвойстваПубличнаяСсылка;
	КонецЕсли;
	
	НеЗаполнятьСвойства = ПКО.НеЗаполнятьСвойства[Приложение];
	Для каждого ПКС Из ПКО.ПравилаКонвертацииСвойств Цикл
		Если НеЗаполнятьСвойства[ПКС.ИмяСвойстваDTO] = Истина Тогда
			Продолжить;
		КонецЕсли;
		ИмяПКЗ = ПКС.ИмяПКЗ;
		Если ЗначениеЗаполнено(ИмяПКЗ) Тогда
			ПКЗ = ПравилоКонвертацииЗначения(ИмяПКЗ);
			Если Не ЗначениеЗаполнено(ПКЗ) Тогда
				Продолжить;
			КонецЕсли;
			Если ПКЗ.Выгрузка.ПубличныйИдентификатор Тогда
				СвойстваПубличнаяСсылка.Вставить(ПКС.ИмяСвойстваКонфигурации, ПКЗ.Выгрузка.ТипОбъекта);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СвойстваПубличнаяСсылка;
	
КонецФункции

Функция НовыйРезультатКонвертацииВDTO()
	
	Результат = Новый Структура;
	Результат.Вставить("Данные");
	Результат.Вставить("ОтменитьРегистрацию", 	Новый Массив);
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьИдентификаторыОбъектовИзТаблицы(ТаблицаОбъектов, ОписаниеКолонок)
	
	Если ТипЗнч(ОписаниеКолонок) = Тип("Структура") Тогда
		МассивОписаний = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеКолонок);
	Иначе
		МассивОписаний = ОписаниеКолонок;
	КонецЕсли;
	
	Для каждого ОписаниеКолонки Из МассивОписаний Цикл
		Ссылки = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаОбъектов, ОписаниеКолонки.ИмяКолонки, Истина);
		// Будет заполнен кэш КэшСсылкаИдентификатор.
		ЗаполнитьКэшСсылкаИдентификатор(Ссылки, ОписаниеКолонки.ТипОбъекта);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКэшСсылкаИдентификатор(МассивСсылок, ТипОбъекта) Экспорт

	КэшИдентификаторов = КэшСсылкаИдентификатор[ТипОбъекта];
	
	СсылкиБезИдентификаторов = Новый Массив;
	Для каждого Ссылка Из МассивСсылок Цикл
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(КэшИдентификаторов[Ссылка]) Тогда
			СсылкиБезИдентификаторов.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если СсылкиБезИдентификаторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаИдентификатор = ИнтеграцияУправлениеПерсоналомОбмен.СсылкаПубличныйИдентификатор(СсылкиБезИдентификаторов, ТипОбъекта);
	Для каждого Ссылка Из СсылкиБезИдентификаторов Цикл
		КэшИдентификаторов.Вставить(Ссылка, СсылкаИдентификатор[Ссылка]);
	КонецЦикла;
	
КонецПроцедуры

Функция ПубличныйИдентификаторСсылки(ТипОбъекта, Ссылка)

	Возврат КэшСсылкаИдентификатор[ТипОбъекта][Ссылка];

КонецФункции

#КонецОбласти

// Выполняет конвертацию объектов конфигрурации в объекты DTO.
//
// Параметры:
// 		ТаблицаОбъектов - ТаблицаЗначений - объекты для конвертации.
// 		ТипОбъекта - ПеречислениеСсылка.ТипыОбъектовИнтеграцияУпралениеПерсоналом
//
// Возвращаемое значение:
// 		Структура
// 			* Данные - Массив - элементы массива Структура - объекты DTO
// 			* ОтменитьРегистрацию - Массив - ссылки на объекты.
//
Функция ВыполнитьКонвертациюВОбъектыDTO(ТаблицаОбъектов, ТипОбъекта) Экспорт

	Результат = НовыйРезультатКонвертацииВDTO();
	
	Если Не ЗначениеЗаполнено(ТаблицаОбъектов) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИмяПКО = ТипОбъектаИмяПКО[ТипОбъекта];
	
	СвойстваПубличнаяСсылка = СвойстваПКЗПубличнаяСсылкаВыгрузка(ИмяПКО);
	МассивОписаний = Новый Массив;
	Для каждого КлючИЗначение Из СвойстваПубличнаяСсылка Цикл
		МассивОписаний.Добавить(Новый Структура("ИмяКолонки,ТипОбъекта",КлючИЗначение.Ключ, КлючИЗначение.Значение));
	КонецЦикла;
	ЗаполнитьИдентификаторыОбъектовИзТаблицы(ТаблицаОбъектов, МассивОписаний);
	
	РезультатКонвертации = ТаблицаВОбъектыDTO(ТаблицаОбъектов, ИмяПКО);
	Результат.Данные = РезультатКонвертации.ОбъектыDTO;
	
	Возврат Результат;
	
КонецФункции

// Выполняет конвертацию объектов DTO в объекты конфигрурации.
//
// Параметры:
// 		ОбъектыDTO - Массив,Соответсвте - массив объектов для конвертации или один объект.
// 		ТипОбъекта - ПеречислениеСсылка.ТипыОбъектовИнтеграцияУпралениеПерсоналом
//
// Возвращаемое значение:
// 		Массив, Структура - один объект или массив объектов.
//
Функция ВыполнитьКонвертациюИзОбъектовDTO(ОбъектыDTO, ТипОбъекта) Экспорт
	
	ТаблицаИдентификаторыБезСсылок = НоваяТаблицаИдентификаторыБезСсылок();
	
	ИмяПКО = ТипОбъектаИмяПКО[ТипОбъекта]; 
	РезультатКонвертации = ОбъектDTOВОбъектКонфигурации(ОбъектыDTO, ИмяПКО);
	ОбъектыКонфигурации = РезультатКонвертации.ОбъектКонфигурации;
	
	ДополнитьОбъектыСсылками(ТаблицаИдентификаторыБезСсылок);
	
	Возврат ОбъектыКонфигурации;

КонецФункции 

#КонецОбласти 

#Область Инициализация

КэшСсылкаИдентификатор 				= Новый Соответствие;
КэшИдентификаторСсылка 				= Новый Соответствие;
ПравилаКонвертацииЗначений 			= Новый Соответствие;
ПравилаКонвертацииОбъектов 			= Новый Соответствие;
ЗарегистрированныеОшибкиНетПравила 	= Новый Соответствие;
ТипОбъектаИмяПКО 					= Новый Соответствие;
ТаблицаИдентификаторыБезСсылок 		= НоваяТаблицаИдентификаторыБезСсылок();

#КонецОбласти

#КонецЕсли




