#Область ОбработчикиКомандФормы

// Процедура - обработчик команды УстановитьФлагДействует формы.
//
&НаКлиенте
Процедура УстановитьФлагДействует(Команда)
	
	Если ЗначениеЗаполнено(Элементы.ПравилаНачисленияБонусов.ВыделенныеСтроки) Тогда
		ИзменитьФлагДействуетСервер(Истина, Элементы.ПравилаНачисленияБонусов.ВыделенныеСтроки);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик команды СброситьФлагДействует формы.
//
&НаКлиенте
Процедура СброситьФлагДействует(Команда)
	
	Если ЗначениеЗаполнено(Элементы.ПравилаНачисленияБонусов.ВыделенныеСтроки) Тогда
		ИзменитьФлагДействуетСервер(Ложь, Элементы.ПравилаНачисленияБонусов.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// В процедуре можно установить или сбросить флаг "Действует".
//
// Параметры:
//  НовоеЗначение  - Булево - Новое значение флага "Действует".
//  МассивВыделенныхСтрок  - Массив - Массив строк, которые выделены в списке автоматических скидок.
//
&НаСервере
Процедура ИзменитьФлагДействуетСервер(НовоеЗначение, Знач МассивВыделенныхСтрок)

	НужноОбновлятьСписок = Ложь;
	Для Каждого СтрокаАвтоСкидок Из МассивВыделенныхСтрок Цикл
		Если СтрокаАвтоСкидок.Действует <> НовоеЗначение Тогда
			Если СтрокаАвтоСкидок.Ссылка.Пустая() Или СтрокаАвтоСкидок.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			ОбъектАвтоСкидка = СтрокаАвтоСкидок.Ссылка.ПолучитьОбъект();
			ОбъектАвтоСкидка.Действует = НовоеЗначение;
			Попытка
				ОбъектАвтоСкидка.Записать();
				НужноОбновлятьСписок = Истина;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон(НСтр(
					"ru = 'Не удалось изменить флажок ""Действует"" для автоматической скидки, наценки ""%1"".'"),
					СтрокаАвтоСкидок.Ссылка);
				Сообщение.Поле = "Действует";
				Сообщение.УстановитьДанные(СтрокаАвтоСкидок.Ссылка);
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НужноОбновлятьСписок Тогда
		Элементы.ПравилаНачисленияБонусов.Обновить();
	КонецЕсли;

КонецПроцедуры // ИзменитьФлагДействуетСервер()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ПравилаНачисленияБонусовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЭтоПравилоНачисленияБонусов", Истина);
	СтруктураРеквизитов.Вставить("СпособПредоставления", ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов"));
	
	ОткрытьФорму("Справочник.АвтоматическиеСкидки.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", СтруктураРеквизитов));
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаНачисленияБонусовПриИзменении(Элемент)
	
	Элемент.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппуПравилНачисления(Команда)
	
	ПараметрыДляФормыГруппы = Новый Структура("ЭтоГруппа, ЭтоПравилоНачисленияБонусов", Истина, Истина);
	ОткрытьФорму("Справочник.АвтоматическиеСкидки.ФормаГруппы", ПараметрыДляФормыГруппы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ВариантСовместногоПримененияСкидок.
//
&НаКлиенте
Процедура ВариантСовместногоПримененияБонусовПриИзменении(Элемент)
	
	ВариантСовместногоПримененияБонусовПриИзмененииНаСервере(ВариантСовместногоПримененияБонусов);
	Если ВариантСовместногоПримененияБонусов = ПредопределенноеЗначение("Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение")
		ИЛИ ВариантСовместногоПримененияБонусов = ПредопределенноеЗначение("Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Умножение") Тогда
		ПроверитьСортировкуСписка();
	КонецЕсли;
	Элементы.ПравилаНачисленияБонусов.Обновить();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ВариантСовместногоПримененияСкидок (серверная часть).
//
&НаСервереБезКонтекста
Процедура ВариантСовместногоПримененияБонусовПриИзмененииНаСервере(ВариантСовместногоПримененияСкидок)
	
	Константы.ВариантыСовместногоПримененияНачисленийБонусов.Установить(ВариантСовместногоПримененияСкидок);
	
КонецПроцедуры

#КонецОбласти

#Область СортировкаСписка

// Процедура проверяет установленную сортировку по реквизиту "РеквизитДопУпорядочивания" и предлагает
// установить такую сортировку.
//
&НаКлиенте
Процедура ПроверитьСортировкуСписка()
	
	ПараметрыУстановкиСортировки = Новый Структура;
	ПараметрыУстановкиСортировки.Вставить("СписокРеквизит", ПравилаНачисленияБонусов);
	ПараметрыУстановкиСортировки.Вставить("СписокЭлемент", Элементы.ПравилаНачисленияБонусов);
	
	Если Не СортировкаВСпискеУстановленаПравильно(ПравилаНачисленияБонусов) Тогда
		ТекстВопроса = НСтр("ru = 'Сортировку списка рекомендуется установить
								|по полю ""Порядок"". Настроить необходимую сортировку?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьСписокПередОперациейОтветПоСортировкеПолучен", ЭтотОбъект, ПараметрыУстановкиСортировки);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Настроить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не настраивать'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет, что в списке установлена сортировка по реквизиту РеквизитДопУпорядочивания.
//
&НаКлиенте
Функция СортировкаВСпискеУстановленаПравильно(Список)
	
	ПользовательскиеНастройкиПорядка = Неопределено;
	Для Каждого Элемент Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПорядокКомпоновкиДанных") Тогда
			ПользовательскиеНастройкиПорядка = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПользовательскиеНастройкиПорядка = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭлементыПорядка = ПользовательскиеНастройкиПорядка.Элементы;
	
	// Найдем первый используемый элемент порядка
	Элемент = Неопределено;
	Для Каждого ЭлементПорядка Из ЭлементыПорядка Цикл
		Если ЭлементПорядка.Использование Тогда
			Элемент = ЭлементПорядка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Элемент = Неопределено Тогда
		// Не установлена никакая сортировка
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Элемент) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
		Если Элемент.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
			ПолеРеквизита = Новый ПолеКомпоновкиДанных("РеквизитДопУпорядочивания");
			Если Элемент.Поле = ПолеРеквизита Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Процедура обрабатывает ответ пользователя на вопрос об установке сортировки по реквизиту РеквизитДопУпорядочивания.
//
&НаКлиенте
Процедура ПроверитьСписокПередОперациейОтветПоСортировкеПолучен(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСортировкуСпискаПоПолюПорядок();
	
КонецПроцедуры

// Процедура устанавливает сортировку по полю РеквизитДопУпорядочивания.
//
&НаКлиенте
Процедура УстановитьСортировкуСпискаПоПолюПорядок()
	
	СписокРеквизит = ПравилаНачисленияБонусов;
	
	ПользовательскиеНастройкиПорядка = Неопределено;
	Для Каждого Элемент Из СписокРеквизит.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПорядокКомпоновкиДанных") Тогда
			ПользовательскиеНастройкиПорядка = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.Проверить(ПользовательскиеНастройкиПорядка <> Неопределено, НСтр("ru = 'Пользовательская настройка порядка не найдена.'"));
	
	ПользовательскиеНастройкиПорядка.Элементы.Очистить();
	Элемент = ПользовательскиеНастройкиПорядка.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	Элемент.Использование = Истина;
	Элемент.Поле = Новый ПолеКомпоновкиДанных("РеквизитДопУпорядочивания");
	Элемент.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВариантСовместногоПримененияБонусов = Константы.ВариантыСовместногоПримененияНачисленийБонусов.Получить();
	Если ВариантСовместногоПримененияБонусов.Пустая() Тогда
		ВариантСовместногоПримененияБонусов = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум;
		Константы.ВариантыСовместногоПримененияСкидокНаценок.Установить(ВариантСовместногоПримененияБонусов);
	КонецЕсли;
	
	// Открытие из вида дисконтных карт для настройки бонусов по ДК
	Если Параметры.Свойство("ДисконтныеКарты") И Параметры.ДисконтныеКарты Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПравилаНачисления;
		Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаБонусныеПрограммы.Видимость = Ложь;
		Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаНачисленияИСписания.Видимость = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПравилаНачисленияБонусов,
			"ЕстьУсловияПоДК", Истина,,,,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		Если Параметры.Свойство("БонуснаяПрограмма") И ЗначениеЗаполнено(Параметры.БонуснаяПрограмма) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПравилаНачисленияБонусов,
				"БонуснаяПрограмма", Параметры.БонуснаяПрограмма,,,,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти