
#Область ОписаниеПеременных

&НаКлиенте
Перем ИзмененПризнакВРаботе;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПустойСправочникЗадач = Не ЕстьЗадачиСправочника();
	РазрешеноИзменятьЗадачи = Обработки.АссистентУправления.РазрешеноИзменятьЗадачи();
	
	Элементы.ДобавитьДействие.Видимость = РазрешеноИзменятьЗадачи;
	Элементы.ДействияАссистента.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	Элементы.ВРаботе.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	ЭтотОбъект.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	
	ЗаполнитьСпособыОповещения();
	ОбновитьБлокиНастроекАссистента();
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
	
	ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	КлючСохраненияПоложенияОкна = Новый УникальныйИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИзмененПризнакВРаботе = Ложь;
	УстановитьВидимостьПериодичностиОтправления();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененныеЗадачи = НастройкиЗадач.НайтиСтроки(Новый Структура("Модифицированность", Истина));
	ЗадачиИзменены = ИзмененныеЗадачи.Количество() <> 0;
	
	Если НЕ ЗадачиИзменены Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазрешеноИзменятьЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВРаботе Тогда
		
		СоздатьИзменитьЗадачиАссистента();
		ЗакрытьФормуЗадач();
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	СоздатьИзменитьЗадачиАссистента();
	ЗакрытьФормуЗадач();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЕстьОшибки = Ложь;
	Для каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		Если СтрокаНастроек.Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ТипОповещения) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если СтрокаНастроек.ТипОповещения = "Обсуждение" 
			И НЕ ЗначениеЗаполнено(СтрокаНастроек.ТипОбсуждения) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если СтрокаНастроек.ТипОповещения = "Обсуждение" И СтрокаНастроек.ТипОбсуждения <> "Групповое"
			И НЕ ЗначениеЗаполнено(СтрокаНастроек.СпособОповещения) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если СтрокаНастроек.ТипОповещения <> "Обсуждение" 
			И НЕ ЗначениеЗаполнено(СтрокаНастроек.ПользовательДляПисем) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если СтрокаНастроек.ТипОповещения = "Обсуждение" И СтрокаНастроек.ТипОбсуждения = "Групповое"
			И НЕ ЗначениеЗаполнено(СтрокаНастроек.Обсуждение) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.Показатель) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если СтрокаНастроек.ТипОповещения = "Email" 
			И НЕ ЗначениеЗаполнено(СтрокаНастроек.УчетнаяЗапись) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ПериодичностьОтправки) Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ПериодичностьОтправки = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежедневно И НЕ ЗначениеЗаполнено(ВремяОтправления) Тогда
		ЕстьОшибки = Истина;
	ИначеЕсли ПериодичностьОтправки = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Еженедельно И НЕ ЗначениеЗаполнено(ДеньОтправления) Тогда	
		ЕстьОшибки = Истина;
	ИначеЕсли ПериодичностьОтправки = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежемесячно И НЕ ЗначениеЗаполнено(ДатаОтправления) Тогда	
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнены обязательные данные'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиЭлементовНаФорме

&НаКлиенте
Процедура Декорация_0УдалитьНажатие(Элемент)
	УдалитьБлокНастроек(Элемент.Имя);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВРаботеПриИзменении(Элемент)
	
	ИзмененПризнакВРаботе = Истина;
	УстановитьМодифицированностьЗадач();
	
	Если НЕ ВРаботе Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиОбсуждениеНажатие(Элемент)
	НачатьПодключениеОбсуждений();
КонецПроцедуры

&НаКлиенте
Процедура ВремяОтправленияПриИзменении(Элемент)
	УстановитьМодифицированностьЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ДеньОтправленияПриИзменении(Элемент)
	УстановитьМодифицированностьЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтправленияПриИзменении(Элемент)
	УстановитьМодифицированностьЗадач();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьДействие(Команда)
	
	ДобавитьДействиеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоказатель(Команда)
	Индекс = Число(ИндексБлока(Команда.Имя));
	Показатель = НастройкиЗадач[Индекс].Показатель;
	ПараметрыФормы = Новый Структура("МножественныйВыбор", Истина);
	ОткрытьФорму("Справочник.ПоказателиБизнеса.ФормаВыбора", ПараметрыФормы, Элементы.Найти("Показатель_" + Индекс));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодключаемыеОбработчикиСобытий

&НаКлиенте
Процедура Подключаемый_УдалитьБлокНастроек(Элемент)
	УдалитьБлокНастроек(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПользовательДляПисемПриИзменении(Элемент)
	УстановитьМодифицированностьПриИзмененииПоля(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТипОбсужденияПриИзменении(Элемент)
	УстановитьМодифицированностьПриИзмененииПоля(Элемент.Имя);
	Индекс = ИндексБлока(Элемент.Имя);
	ТипОповещенияИзменениеНаСервере(Индекс);
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособОповещенияПриИзменении(Элемент)
	
	УстановитьМодифицированностьПриИзмененииПоля(Элемент.Имя);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбсуждениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Индекс = ИндексБлока(Элемент.Имя);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборОбсуждения", ЭтотОбъект,Индекс);
	ОткрытьФорму("Обработка.АссистентУправления.Форма.ВыборОбсуждения",,,,,, ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбсуждениеПриИзменении(Элемент)
	УстановитьМодифицированностьПриИзмененииПоля(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособОповещенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Индекс = ИндексБлока(Элемент.Имя);
	ЗаполнитьДанныеВыбора(ДанныеВыбора, Индекс);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособОповещенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УстановитьМодифицированностьПриИзмененииПоля(Элемент.Имя);
	Индекс = ИндексБлока(Элемент.Имя);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Элементы["СпособОповещения_" + Индекс].ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		НастройкиЗадач[Число(Индекс)].СпособОповещения = ВыбранноеЗначение;
		НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = ВыбранноеЗначение;
		
		Возврат;
		
	КонецЕсли;
	
	НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = Неопределено;
	ЗначениеСпособаОповещения = СпособыОповещения.НайтиСтроки(Новый Структура("Представление", ВыбранноеЗначение));

	Если ЗначениеСпособаОповещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеСпособаОповещения[0].Значение <> ПредопределенноеЗначение("Перечисление.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю")
		И ЗначениеСпособаОповещения[0].Значение <> ПредопределенноеЗначение("Перечисление.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияПользователю") Тогда
	
		Элементы["СпособОповещения_" + Индекс].ОграничениеТипа = Новый ОписаниеТипов("Строка");
		НастройкиЗадач[Число(Индекс)].СпособОповещения = ВыбранноеЗначение;
		НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Индекс", Индекс);
	
	Оповещение = Новый ОписаниеОповещения("ВыборПользователя", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы,,,,, Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособОповещенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Индекс = ИндексБлока(Элемент.Имя);
	ЗаполнитьДанныеВыбора(ДанныеВыбора, Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТипОповещенияПриИзменении(Элемент)
	
	УстановитьМодифицированностьПриИзмененииПоля(Элемент.Имя);
	Индекс = ИндексБлока(Элемент.Имя);
	ТипОповещенияИзменениеНаСервере(Индекс);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказательПриИзменении(Элемент)
	УстановитьМодифицированностьПриИзмененииПоля(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УчетнаяЗаписьПриИзменении(Элемент)
	УстановитьМодифицированностьПриИзмененииПоля(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УстановитьМодифицированностьПриИзмененииПоля(Элемент.Имя);
	Индекс = ИндексБлока(Элемент.Имя);
	
	Для каждого Показатель Из ВыбранноеЗначение Цикл
		НастройкиЗадач[Число(Индекс)].Показатель.Добавить(Показатель);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УдалитьБлокНастроек(ИмяЭлемента)
	
	Индекс = ИндексБлока(ИмяЭлемента);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	СтрокаНастроек.Удалена = Истина;
	
	ОбновитьЭлементыДействийИЗаполнитьСписокВыбора();

КонецПроцедуры

&НаСервере
Процедура ТипОповещенияИзменениеНаСервере(Индекс)
	
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	Если СтрокаНастроек.ТипОповещения <> "Обсуждение" Тогда
		СтрокаНастроек.Обсуждение = "";
		СтрокаНастроек.ОбсуждениеИдентификатор = "";
		СтрокаНастроек.СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	СтрокаНастроек.Обсуждение = "";
	СтрокаНастроек.ОбсуждениеИдентификатор = "";
	СтрокаНастроек.УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	
	Личное = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияПользователю;
	Общее = Перечисления.СпособОповещенияАссистентаУправления.СообщениеОбщегоОбсуждения;
	Если СтрокаНастроек.ТипОповещения = "Личное" Тогда
		ЗаполнитьСпособОповещенияПоЗначению(СтрокаНастроек, Справочники.Пользователи.ПустаяСсылка(), Личное);
	Иначе
		ЗаполнитьСпособОповещенияПоЗначению(СтрокаНастроек, Справочники.Пользователи.ПустаяСсылка(), Общее);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПользователя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = ДополнительныеПараметры.Индекс;
	Элементы["СпособОповещения_" + Индекс].ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	НастройкиЗадач[Число(Индекс)].СпособОповещения = Результат;
	НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = Результат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВыбора(ДанныеВыбора, Индекс)
	
	Если ДанныеВыбора = Неопределено Тогда
		ДанныеВыбора = Новый СписокЗначений;
	КонецЕсли;

	ОповеститьПользователя = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю;
	
	Индекс = Число(Индекс);
	ДобавитьПунктОповеститьТекущего(Индекс, ДанныеВыбора, ОповеститьПользователя);
	ДобавитьПунктОповеститьВыбранного(Индекс, ДанныеВыбора);
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьПунктОповеститьТекущего(Индекс, ДанныеВыбора, ОповеститьПользователя)
	
	Если НастройкиЗадач[Индекс].ТипОповещения = "Обсуждение" Тогда
		ДанныеВыбора.Добавить(Пользователи.АвторизованныйПользователь(),,, БиблиотекаКартинок.СпособОповещенияОповеститьВыбранного);
	Иначе
		ДанныеВыбора.Добавить(Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПунктОповеститьВыбранного(Индекс, ДанныеВыбора)
	
	Если НастройкиЗадач[Индекс].ТипОповещения = "Обсуждение" И НастройкиЗадач[Индекс].ТипОбсуждения = "Личное" Тогда
		ОповеститьПользователя = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияПользователю;
		СпособОповестиПользователя = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", ОповеститьПользователя));
		Если СпособОповестиПользователя.Количество() > 0 Тогда
			ДанныеВыбора.Добавить(СпособОповестиПользователя[0].Представление,,, БиблиотекаКартинок.СпособОповещенияОповеститьВыбранного);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОповеститьПользователя = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияПользователю;
	СпособОповестиПользователя = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", ОповеститьПользователя));
	Если СпособОповестиПользователя.Количество() > 0 Тогда
		ДанныеВыбора.Добавить(СпособОповестиПользователя[0].Представление);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДействийИЗаполнитьСписокВыбора()
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексБлока(ЭлементИмя)
	
	Возврат Прав(ЭлементИмя, СтрДлина(ЭлементИмя) - СтрНайти(ЭлементИмя, "_"));
	
КонецФункции

&НаСервере
Процедура ДобавитьДействиеСервер()
	
	ДобавитьПустыеНастройкиЗадачи();
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеОбсуждений()
	
	Продолжение = Новый ОписаниеОповещения("ЗавершитьПодключениеОбсуждений", ЭтотОбъект);
	ОбсужденияКлиент.ПоказатьПодключение(Продолжение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодключениеОбсуждений(Результат, ДополнительныеПараметры) Экспорт
	
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированностьЗадач()
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		СтрокаНастроек.Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЗадачиСправочника()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиАссистентаПоРаботеСПоказателямиБизнеса.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗадачиАссистентаПоРаботеСПоказателямиБизнеса КАК ЗадачиАссистентаПоРаботеСПоказателямиБизнеса
	|ГДЕ
	|	ЗадачиАссистентаПоРаботеСПоказателямиБизнеса.ВидОповещения = ЗНАЧЕНИЕ(Перечисление.ВидОповещенияПоПоказателям.Регулярный)";
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьПериодичностиОтправления()

	Если ПериодичностьОтправки = ПредопределенноеЗначение("Перечисление.ПериодичностиРасписанийРассылокОтчетов.Еженедельно") Тогда
		Элементы.ВремяОтправления.Видимость = Ложь;
		Элементы.ДеньОтправления.Видимость = Истина;
		Элементы.ГруппаДатаОтправления.Видимость = Ложь;
	ИначеЕсли ПериодичностьОтправки = ПредопределенноеЗначение("Перечисление.ПериодичностиРасписанийРассылокОтчетов.Ежемесячно") Тогда
		Элементы.ВремяОтправления.Видимость = Ложь;
		Элементы.ДеньОтправления.Видимость = Ложь;
		Элементы.ГруппаДатаОтправления.Видимость = Истина;
	Иначе
		Элементы.ВремяОтправления.Видимость = Истина;
		Элементы.ДеньОтправления.Видимость = Ложь;
		Элементы.ГруппаДатаОтправления.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура ЗаполнитьСписокВыбораЭлементовФормы()

	Для Итератор = 0 По НастройкиЗадач.Количество() - 1 Цикл
		
		Если НастройкиЗадач[Итератор].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы["ТипОповещения_" + Итератор].СписокВыбора.Очистить();
		Элементы["ТипОповещения_" + Итератор].СписокВыбора.Добавить("Обсуждение", НСтр("ru='в обсуждение'"));
		Элементы["ТипОповещения_" + Итератор].СписокВыбора.Добавить("Email", НСтр("ru='на почту'"));
		
		Элементы["ТипОбсуждения_" + Итератор].СписокВыбора.Очистить();
		Элементы["ТипОбсуждения_" + Итератор].СписокВыбора.Добавить("Личное", НСтр("ru='личное с пользователем'"));
		Элементы["ТипОбсуждения_" + Итератор].СписокВыбора.Добавить("Групповое", НСтр("ru='групповое с несколькими пользователями'"));
						
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДействийАссистента()
	
	Элементы.Переместить(Элементы.ДобавитьДействие, Элементы.Действие_0);
	УдаляемыеЭлементы = Новый Массив;
	// Группа первой задачи создана в конфигураторе
	Для Каждого ГруппаДействия Из Элементы.ДействияАссистента.ПодчиненныеЭлементы Цикл
		Индекс = ИндексБлока(ГруппаДействия.Имя);
		Если Число(Индекс) = 0 Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(ГруппаДействия);
		Команды.Удалить(Команды.Найти("ДобавитьПоказатель_" + Индекс));
	КонецЦикла;

	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		ИндексНастройки = НастройкиЗадач.Индекс(СтрокаНастроек);
		
		Если НастройкиЗадач[ИндексНастройки].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексНастройки > 0 Тогда
			
			ОбщаяГруппаДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки, Тип("ГруппаФормы"), Элементы.ДействияАссистента);
			УстановитьОформлениеГруппы(ОбщаяГруппаДействия, Элементы.ГруппаДействие_0);
			
			ГруппаДействия = Элементы.Добавить("Действие_" + ИндексНастройки, Тип("ГруппаФормы"), ОбщаяГруппаДействия);
			УстановитьОформлениеГруппы(ГруппаДействия, Элементы.Действие_0);
			
			ГруппаСтроки = Элементы.Добавить("Строки_" + ИндексНастройки, Тип("ГруппаФормы"), ГруппаДействия);
			УстановитьОформлениеГруппы(ГруппаСтроки, Элементы.Строки_0);
			
			ГруппаПервойСтрокиДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки + "_Строка_1", Тип("ГруппаФормы"), ГруппаСтроки);
			УстановитьОформлениеГруппы(ГруппаПервойСтрокиДействия, Элементы.ГруппаДействие_0_Строка_1);		
			
			ПолеТипОповещения = Элементы.Добавить("ТипОповещения_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеТипОповещения.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ТипОповещения";
			УстановитьОформлениеПоля(ПолеТипОповещения, Элементы.ТипОповещения_0);
			ПолеТипОповещения.УстановитьДействие("ПриИзменении", "Подключаемый_ТипОповещенияПриИзменении");
			
			ПолеТипОбсуждения = Элементы.Добавить("ТипОбсуждения_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеТипОбсуждения.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ТипОбсуждения";
			УстановитьОформлениеПоля(ПолеТипОбсуждения, Элементы.ТипОбсуждения_0);
			ПолеТипОбсуждения.УстановитьДействие("ПриИзменении", "Подключаемый_ТипОбсужденияПриИзменении");
			
			ПолеСпособОповещения = Элементы.Добавить("СпособОповещения_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеСпособОповещения.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].СпособОповещения";
			УстановитьОформлениеПоля(ПолеСпособОповещения, Элементы.СпособОповещения_0);
			ПолеСпособОповещения.УстановитьДействие("ПриИзменении", "Подключаемый_СпособОповещенияПриИзменении");
			ПолеСпособОповещения.УстановитьДействие("АвтоПодбор", "Подключаемый_СпособОповещенияАвтоПодбор");
			ПолеСпособОповещения.УстановитьДействие("НачалоВыбора", "Подключаемый_СпособОповещенияНачалоВыбора");
			ПолеСпособОповещения.УстановитьДействие("ОбработкаВыбора", "Подключаемый_СпособОповещенияОбработкаВыбора");
			
			ПолеПользовательДляПисем = Элементы.Добавить("ПользовательДляПисем_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеПользовательДляПисем.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ПользовательДляПисем";
			УстановитьОформлениеПоля(ПолеПользовательДляПисем, Элементы.ПользовательДляПисем_0);
			ПолеПользовательДляПисем.УстановитьДействие("ПриИзменении", "Подключаемый_ПользовательДляПисемПриИзменении");
			
			ПолеОбсуждение = Элементы.Добавить("Обсуждение_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеОбсуждение.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].Обсуждение";
			УстановитьОформлениеПоля(ПолеОбсуждение, Элементы.Обсуждение_0);
			ПолеОбсуждение.УстановитьДействие("ПриИзменении", "Подключаемый_ОбсуждениеПриИзменении");
			ПолеОбсуждение.УстановитьДействие("НачалоВыбора", "Подключаемый_ОбсуждениеНачалоВыбора");
			
			ПолеУчетнаяЗапись = Элементы.Добавить("УчетнаяЗапись_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеУчетнаяЗапись.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].УчетнаяЗапись";
			УстановитьОформлениеПоля(ПолеУчетнаяЗапись, Элементы.УчетнаяЗапись_0);
			ПолеУчетнаяЗапись.УстановитьДействие("ПриИзменении", "Подключаемый_УчетнаяЗаписьПриИзменении");
			
			ДекорацияУдалить = Элементы.Добавить("ДекорацияУдалить_" + ИндексНастройки, Тип("ДекорацияФормы"), ОбщаяГруппаДействия);
			ДекорацияУдалить.Вид = Элементы.ДекорацияУдалить_0.Вид;
			ДекорацияУдалить.Заголовок = Элементы.ДекорацияУдалить_0.Заголовок;
			ДекорацияУдалить.Ширина = Элементы.ДекорацияУдалить_0.Ширина;
			ДекорацияУдалить.Высота = Элементы.ДекорацияУдалить_0.Высота;
			ДекорацияУдалить.Картинка = Элементы.ДекорацияУдалить_0.Картинка;
			ДекорацияУдалить.РазмерКартинки = Элементы.ДекорацияУдалить_0.РазмерКартинки;
			ДекорацияУдалить.Гиперссылка = Элементы.ДекорацияУдалить_0.Гиперссылка;
			ДекорацияУдалить.УстановитьДействие("Нажатие", "Подключаемый_УдалитьБлокНастроек");
			
			ГруппаВторойСтрокиДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки + "_Строка_2", Тип("ГруппаФормы"), ГруппаСтроки);
			УстановитьОформлениеГруппы(ГруппаВторойСтрокиДействия, Элементы.ГруппаДействие_0_Строка_2);
			Элементы.Переместить(Элементы.ДобавитьДействие, Элементы["Действие_" + ИндексНастройки]);
			
			ДекорацияНадписьСостояние = Элементы.Добавить("НадписьСостояние_" + ИндексНастройки, Тип("ДекорацияФормы"), ГруппаВторойСтрокиДействия);
			ДекорацияНадписьСостояние.Вид = Элементы.НадписьСостояние_0.Вид;
			ДекорацияНадписьСостояние.Заголовок = Элементы.НадписьСостояние_0.Заголовок;
			ДекорацияНадписьСостояние.Ширина = Элементы.НадписьСостояние_0.Ширина;
			
			ПолеПоказатель = Элементы.Добавить("Показатель_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеПоказатель.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].Показатель";
			УстановитьОформлениеПоля(ПолеПоказатель, Элементы.Показатель_0);
			ПолеПоказатель.КнопкаОчистки = Элементы.Показатель_0.КнопкаОчистки;
			ПолеПоказатель.УстановитьДействие("ПриИзменении", "Подключаемый_ПоказательПриИзменении");
			ПолеПоказатель.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ПоказательОбработкаВыбора");
			
			ИмяДляКоманды = "ДобавитьПоказатель_" + ИндексНастройки;
			КомандаДобавитьПоказатель = Команды.Добавить(ИмяДляКоманды);
			КомандаДобавитьПоказатель.Действие = "ДобавитьПоказатель";
			КнопкаДобавитьПоказатель = Элементы.Добавить(ИмяДляКоманды, Тип("КнопкаФормы"), ГруппаВторойСтрокиДействия);
			КнопкаДобавитьПоказатель.ИмяКоманды = ИмяДляКоманды;
			КнопкаДобавитьПоказатель.Заголовок = Элементы.ДобавитьПоказатель_0.Заголовок;
			КнопкаДобавитьПоказатель.Вид = Элементы.ДобавитьПоказатель_0.Вид;
			КнопкаДобавитьПоказатель.Отображение = Элементы.ДобавитьПоказатель_0.Отображение;
			КнопкаДобавитьПоказатель.ЦветТекста = Элементы.ДобавитьПоказатель_0.ЦветТекста;
			КнопкаДобавитьПоказатель.ОтображениеФигуры = Элементы.ДобавитьПоказатель_0.ОтображениеФигуры;
			
		КонецЕсли;
		
	КонецЦикла;
		
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированностьПриИзмененииПоля(ИмяЭлемента)
	Индекс = ИндексБлока(ИмяЭлемента);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	
	Отбор = Новый Структура;
	Отбор.Вставить("Удалена", Ложь);
	
	ЕстьОшибкиПодключенияБазы = НЕ ИнформационнаяБазаЗарегистрирована;		
	Элементы.ПанельОшибки.Видимость = ЕстьОшибкиПодключенияБазы И ВРаботе;
	Элементы.ОшибкаНеПодключеныОбсуждения.Видимость = ЕстьОшибкиПодключенияБазы И ВРаботе;
	
	ВРаботе = НЕ ЕстьОшибкиПодключенияБазы И ВРаботе;
	ДопустимыеЗначение = Новый Массив;
	ДопустимыеЗначение.Добавить(Тип("СправочникСсылка.ПоказателиБизнеса"));
	ТипЗначения = Новый ОписаниеТипов(ДопустимыеЗначение);
		
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		ИндексНастройки = НастройкиЗадач.Индекс(СтрокаНастроек);
		Если СтрокаНастроек.Удалена Тогда 
			Продолжить;
		КонецЕсли;
		
		ПолеУчетнаяЗапись			= Элементы["УчетнаяЗапись_" + ИндексНастройки];
		ПолеТипОповещения			= Элементы["ТипОповещения_" + ИндексНастройки];
		ПолеТипОбсуждения			= Элементы["ТипОбсуждения_" + ИндексНастройки];
		ПолеСпособОповещения		= Элементы["СпособОповещения_" + ИндексНастройки];
		ПолеОбсуждение				= Элементы["Обсуждение_" + ИндексНастройки];
		ПолеПользовательДляПисем	= Элементы["ПользовательДляПисем_" + ИндексНастройки];
		
		Если СтрокаНастроек.ТипОповещения = "Обсуждение" Тогда	
			Если СтрокаНастроек.ТипОбсуждения = "Личное" Тогда
				ПолеСпособОповещения.Заголовок = НСтр("ru = '(кому)'");
			Иначе
				ПолеСпособОповещения.Заголовок = НСтр("ru = 'и (кого оповестить)'");
			КонецЕсли;	
		Иначе
			ПолеСпособОповещения.Заголовок = НСтр("ru = '(кому)'");
		КонецЕсли;
		
		ПолеТипОбсуждения.Видимость = СтрокаНастроек.ТипОповещения = "Обсуждение";
		ПолеОбсуждение.Видимость	=  СтрокаНастроек.ТипОповещения = "Обсуждение"
			И СтрокаНастроек.ТипОбсуждения = "Групповое";
		ПолеСпособОповещения.Видимость = НЕ СтрокаНастроек.ТипОбсуждения = "Групповое"
			И НЕ СтрокаНастроек.ТипОповещения = "Email";
			
		ПолеУчетнаяЗапись.Видимость			= СтрокаНастроек.ТипОповещения = "Email";
		ПолеПользовательДляПисем.Видимость	= СтрокаНастроек.ТипОповещения = "Email";
		НастройкиЗадач[ИндексНастройки].Показатель.ТипЗначения = ТипЗначения;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗадачиАссистента

&НаСервере
Процедура УдалитьОдинаковыеДействияИзНастроек()
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
			
		ОтборПоУсловиям = Новый Структура;
		ОтборПоУсловиям.Вставить("Удалена", Ложь);
		ОтборПоУсловиям.Вставить("ТипОповещения",	СтрокаНастроек.ТипОповещения);
		ОтборПоУсловиям.Вставить("Показатель",	СтрокаНастроек.Показатель);
		
		Если СтрокаНастроек.ТипОповещения = "Обсуждение" Тогда 
			ОтборПоУсловиям.Вставить("ТипОбсуждения", СтрокаНастроек.ТипОбсуждения);
			ОтборПоУсловиям.Вставить("СпособОповещения", СтрокаНастроек.СпособОповещения);
			ОтборПоУсловиям.Вставить("ПользовательДляОповещения", СтрокаНастроек.ПользовательДляОповещения);
			ОтборПоУсловиям.Вставить("Обсуждение", СтрокаНастроек.Обсуждение);
		ИначеЕсли СтрокаНастроек.ТипОповещения = "Email" Тогда
			ОтборПоУсловиям.Вставить("ПользовательДляПисем", СтрокаНастроек.СпособОповещения);
			ОтборПоУсловиям.Вставить("УчетнаяЗапись", СтрокаНастроек.УчетнаяЗапись);	
		Иначе
			ОтборПоУсловиям.Вставить("ПользовательДляПисем", СтрокаНастроек.ПользовательДляПисем);
		КонецЕсли;
				
		ЕстьЗадачиСОдинаковымиУсловиями = НастройкиЗадач.НайтиСтроки(ОтборПоУсловиям).Количество() > 1;
		
		Если ЕстьЗадачиСОдинаковымиУсловиями Тогда
			СтрокаНастроек.Удалена = Истина;
			СтрокаНастроек.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗадачиПоВидуОповещения()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиАссистентаПоРаботеСПоказателямиБизнеса.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗадачиАссистентаПоРаботеСПоказателямиБизнеса КАК ЗадачиАссистентаПоРаботеСПоказателямиБизнеса
	|ГДЕ
	|	ЗадачиАссистентаПоРаботеСПоказателямиБизнеса.ВидОповещения = ЗНАЧЕНИЕ(Перечисление.ВидОповещенияПоПоказателям.Регулярный)
	|	И НЕ ЗадачиАссистентаПоРаботеСПоказателямиБизнеса.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура ОбновитьБлокиНастроекАссистента()
	
	СписокЗадач = ЗадачиПоВидуОповещения();
	
	Если СписокЗадач.Количество() = 0 Тогда
		ДобавитьПустыеНастройкиЗадачи();
		ВремяОтправления = 8;
		Возврат;
	КонецЕсли;
	
	НастройкиЗадач.Очистить();
	
	Для каждого Задача Из СписокЗадач Цикл
		
		ДанныеЗадачи = Задача.ПолучитьОбъект();
		
		СтрокаНастроек = НастройкиЗадач.Добавить();
		СтрокаНастроек.Задача					 = Задача;
		СтрокаНастроек.Удалена					 = Ложь;
		СтрокаНастроек.Модифицированность		 = Ложь;
		СтрокаНастроек.ПользовательДляОповещения = ДанныеЗадачи.ПользовательДляОповещения;
		ПериодичностьОтправки = ДанныеЗадачи.ПериодичностьОтправки;
		Для каждого Строка Из ДанныеЗадачи.Показатели Цикл
			СтрокаНастроек.Показатель.Добавить(Строка.Показатель);
		КонецЦикла;
		
		ЗначенияЗадачиПоИдентификатору(СтрокаНастроек, ДанныеЗадачи);
		ЗаполнитьСпособОповещенияПоЗначению(
			СтрокаНастроек,
			СтрокаНастроек.ПользовательДляОповещения,
			ДанныеЗадачи.СпособОповещения);
			
		ВРаботе = ДанныеЗадачи.Используется;
		ВремяОтправления = ДанныеЗадачи.ВремяОтправления;
		ДеньОтправления = ДанныеЗадачи.ДеньОтправления;
		ДатаОтправления = ДанныеЗадачи.ДатаОтправления;
		ПериодичностьОтправки = ДанныеЗадачи.ПериодичностьОтправки;
	КонецЦикла;
	
	Если НастройкиЗадач.Количество() = 0 Тогда
		ДобавитьПустыеНастройкиЗадачи();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПустыеНастройкиЗадачи()
	
	ЛичноеСообщение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияПользователю;
	
	ОбщиеНастройки = Новый Структура;
	ОбщиеНастройки.Вставить("Модифицированность", Истина);

	ОбщиеНастройки.Вставить("ТипОповещения",			 "Обсуждение");
	ОбщиеНастройки.Вставить("ТипОбсуждения",			 "Личное");
	ОбщиеНастройки.Вставить("ПользовательДляОповещения", Пользователи.АвторизованныйПользователь());
	ОбщиеНастройки.Вставить("ПериодичностьОтправки", ПредопределенноеЗначение("Перечисление.ПериодичностиРасписанийРассылокОтчетов.Ежедневно"));
	
	НоваяНастройка = НастройкиЗадач.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяНастройка, ОбщиеНастройки);
	
	ЗаполнитьСпособОповещенияПоЗначению(НоваяНастройка, 
		НоваяНастройка.ПользовательДляОповещения,
		ЛичноеСообщение);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособОповещенияПоЗначению(СтрокаНастроек, ПользовательДляОповещения, СпособОповещения)
	
	Если НЕ ЗначениеЗаполнено(ПользовательДляОповещения) 
			И СтрокаНастроек.ТипОбсуждения <> "Групповое" Тогда
		
		ПредставлениеСпособаОповещения = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", СпособОповещения));
		Если ПредставлениеСпособаОповещения.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаНастроек.СпособОповещения = ПредставлениеСпособаОповещения[0].Представление;
		СтрокаНастроек.ПользовательДляОповещения = ПользовательДляОповещения;
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаНастроек.СпособОповещения 		 = ПользовательДляОповещения;
	СтрокаНастроек.ПользовательДляОповещения = ПользовательДляОповещения;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособыОповещения()
	
	СпособыОповещения.Очистить();
	
	СпособОповестиПользователя = СпособыОповещения.Добавить();
	СпособОповестиПользователя.Значение = 
		Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияПользователю;
	СпособОповестиПользователя.Представление = НСтр("ru = 'Другому пользователю'");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособОповещенияПоПредставлению(СтрокаНастроек, ЗадачаОбъект)
	
	Таблица = СпособыОповещения;
	
	ЗадачаОбъект.УчетнаяЗапись = СтрокаНастроек.УчетнаяЗапись;
	Если СтрокаНастроек.ТипОповещения = "Email" Тогда
		ЗадачаОбъект.СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.ПустаяСсылка();
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтрокаНастроек.ПользовательДляОповещения) И СтрокаНастроек.ТипОбсуждения = "Личное" Тогда
		ЗадачаОбъект.СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияПользователю;
	Иначе
		ЗадачаОбъект.СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеОбщегоОбсуждения;
	КонецЕсли;
	
	ЗначениеСпособаОповещения = Таблица.НайтиСтроки(Новый Структура("Представление", ЗадачаОбъект.СпособОповещения));
	
	Если ЗначениеСпособаОповещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачаОбъект.СпособОповещения = ЗначениеСпособаОповещения[0].Значение;
			
КонецПроцедуры

&НаСервере
Процедура СоздатьИзменитьЗадачиАссистента()
	
	УдалитьОдинаковыеДействияИзНастроек();
	ЗадачиСПриветствием = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		Для каждого СтрокаНастроек Из НастройкиЗадач Цикл
			
			ЗадачаИзменена = СтрокаНастроек.Модифицированность;
			
			Если НЕ ЗадачаИзменена Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаНастроек.Задача) Тогда
				ЗадачаОбъект = СтрокаНастроек.Задача.ПолучитьОбъект();
				ЗадачаОбъект.Заблокировать();
			Иначе
				ЗадачаОбъект = Справочники.ЗадачиАссистентаПоРаботеСПоказателямиБизнеса.СоздатьЭлемент();
				Если ПустойСправочникЗадач Тогда
					ЗадачаОбъект.НеобходимоПоприветствовать = Истина;
				КонецЕсли;
				АвторИзменений = Пользователи.АвторизованныйПользователь();
				ЕстьЗадачиПользователя = АссистентУправления.ЕстьЗадачиПользователя(АвторИзменений);
			КонецЕсли;
			
			Если СтрокаНастроек.Удалена И ЗначениеЗаполнено(ЗадачаОбъект.Ссылка) Тогда
				ЗадачаОбъект.Удалить();
			КонецЕсли;
			
			Если СтрокаНастроек.Удалена Тогда
				СтрокаНастроек.Модифицированность = Ложь;
				Продолжить;
			КонецЕсли;
			
			ЗадачаОбъект.Наименование		= НаименованиеПоТипуОповещения(СтрокаНастроек.ТипОповещения);
			ЗадачаОбъект.Идентификатор		= ИдентификаторПоТипуОповещения(СтрокаНастроек.ТипОповещения);
			ЗадачаОбъект.ВидОповещения		= Перечисления.ВидОповещенияПоПоказателям.Регулярный;
			
			ЗаполнитьСпособОповещенияПоПредставлению(СтрокаНастроек, ЗадачаОбъект);
			ЗадачаОбъект.Используется		= ЭтотОбъект.ВРаботе;
			ЗадачаОбъект.Показатели.Очистить();
			Для каждого СтрокаПоказателей Из СтрокаНастроек.Показатель Цикл
				СтрокаТЧ = ЗадачаОбъект.Показатели.Добавить();
				СтрокаТЧ.Показатель = СтрокаПоказателей.Значение;
			КонецЦикла;
			
			ЗадачаОбъект.ПериодичностьОтправки = ЭтотОбъект.ПериодичностьОтправки;
			ЗадачаОбъект.ВремяОтправления	= ЭтотОбъект.ВремяОтправления;
			ЗадачаОбъект.ДеньОтправления	= ЭтотОбъект.ДеньОтправления;
			ЗадачаОбъект.ДатаОтправления	= ЭтотОбъект.ДатаОтправления;
			
			ЗаполнитьЗначенияЗадачиПоИдентификатору(ЗадачаОбъект, СтрокаНастроек);
			ЗадачаОбъект.Записать();
			
			ЗадачаОбъект.Разблокировать();
			Если ЗадачаОбъект.НеобходимоПоприветствовать Тогда
				ЗадачиСПриветствием.Добавить(ЗадачаОбъект.Ссылка);
			КонецЕсли;
			
			СтрокаНастроек.Модифицированность = Ложь;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Если ЗадачиСПриветствием.Количество() <> 0 Тогда
		Справочники.ЗадачиАссистентаПоРаботеСПоказателямиБизнеса.ПоприветствоватьПользователяПриЗаписиПервыхЗадач(ЗадачиСПриветствием);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияЗадачиПоИдентификатору(ЗадачаОбъект, СтрокаНастроек)
	
	Если СтрНайти(ЗадачаОбъект.Идентификатор, "Обсуждении") > 0 Тогда
		ЗадачаОбъект.ПользовательДляОповещения 		= СтрокаНастроек.ПользовательДляОповещения;
		ЗадачаОбъект.ИдентификаторОбщегоОбсуждения	= СтрокаНастроек.ОбсуждениеИдентификатор;
	КонецЕсли;
	
	Если СтрНайти(ЗадачаОбъект.Идентификатор, "Email") > 0 Тогда
		ЗадачаОбъект.ПользовательДляОповещения	= СтрокаНастроек.ПользовательДляПисем;
		ЗадачаОбъект.УчетнаяЗапись				= СтрокаНастроек.УчетнаяЗапись;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуЗадач()
	
	Результат = Новый Структура();
	
	Результат.Вставить("ИзмененПризнакВРаботе", ИзмененПризнакВРаботе);
	Результат.Вставить("АвторИзменений", АвторИзменений);
	Результат.Вставить("ГруппаЗадач", "ОповещениеПользователяОПоказателе");
	Результат.Вставить("НужноДобавитьВОбсуждение", НЕ ЕстьЗадачиПользователя);
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторПоТипуОповещения(ТипОповещения)
	
	Если ТипОповещения = "Обсуждение" Тогда
		Возврат "ОповеститьСотрудникаОПоказателеБизнесаВОбсуждении";
	КонецЕсли;
	
	Если ТипОповещения = "Email" Тогда
		Возврат "ОповеститьСотрудникаОПоказателеБизнесаПоEmail";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗначенияЗадачиПоИдентификатору(СтрокаНастроек, ДанныеЗадачи)
	
	Если СтрНайти(ДанныеЗадачи.Идентификатор, "Обсуждении") Тогда
		
		СтрокаНастроек.ТипОповещения = "Обсуждение";
		СообщениеОтветственному = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияОтветственному;
		СообщениеПользователю = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияПользователю;
		ОбщееСообщение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеОбщегоОбсуждения;
		
		Если ДанныеЗадачи.СпособОповещения = ОбщееСообщение Тогда
			СтрокаНастроек.ТипОбсуждения = "Групповое";
		Иначе
			СтрокаНастроек.ТипОбсуждения = "Личное";
		КонецЕсли;
		
		СтрокаНастроек.ОбсуждениеИдентификатор = ДанныеЗадачи.ИдентификаторОбщегоОбсуждения;
		
		Если ЗначениеЗаполнено(СтрокаНастроек.ОбсуждениеИдентификатор) Тогда
			ОбщееОбсуждение = ОбсужденияУНФ.ПолучитьОбсуждениеБезопасно(
				Новый ИдентификаторОбсужденияСистемыВзаимодействия(СтрокаНастроек.ОбсуждениеИдентификатор));
			Если ОбщееОбсуждение <> Неопределено И ТекущийПользовательУчаствуетВОбсуждении(ОбщееОбсуждение) Тогда
				СтрокаНастроек.Обсуждение = ОбщееОбсуждение.Заголовок;
			Иначе
				СтрокаНастроек.Обсуждение = НСтр("ru='<Объект не найден>'");
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
			
	Если СтрНайти(ДанныеЗадачи.Идентификатор, "Email") Тогда
		СтрокаНастроек.ТипОповещения		= "Email";
		СтрокаНастроек.УчетнаяЗапись		= ДанныеЗадачи.УчетнаяЗапись;
		СтрокаНастроек.ПользовательДляПисем	= ДанныеЗадачи.ПользовательДляОповещения;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ТекущийПользовательУчаствуетВОбсуждении(Обсуждение)
	ИдентификаторТекущегоПользователя = СистемаВзаимодействия.ИдентификаторТекущегоПользователя();
	Возврат Обсуждение.Участники.Содержит(ИдентификаторТекущегоПользователя);
КонецФункции

&НаСервере
Функция НаименованиеПоТипуОповещения(ТипОповещения)
	
	Если ТипОповещения = "Обсуждение" Тогда
		Возврат НСтр("ru = 'Оповещение пользователя в обсуждение о показателе бизнеса'");
	КонецЕсли;
	
	Если ТипОповещения = "Email" Тогда
		Возврат НСтр("ru = 'Оповещение пользователя по почте о показателе бизнеса'");
	КонецЕсли;
		
КонецФункции

&НаСервере
Процедура УстановитьОформлениеПоля(ДобавляемыйЭлемент, ЭлементФормы)
	
	ДобавляемыйЭлемент.Вид = ЭлементФормы.Вид;
	ДобавляемыйЭлемент.ПоложениеЗаголовка = ЭлементФормы.ПоложениеЗаголовка;
	ДобавляемыйЭлемент.Заголовок = ЭлементФормы.Заголовок;
	ДобавляемыйЭлемент.АвтоМаксимальнаяШирина = ЭлементФормы.АвтоМаксимальнаяШирина;
	ДобавляемыйЭлемент.МаксимальнаяШирина = ЭлементФормы.МаксимальнаяШирина;
	ДобавляемыйЭлемент.РежимВыбораИзСписка = ЭлементФормы.РежимВыбораИзСписка;
	ДобавляемыйЭлемент.КнопкаВыпадающегоСписка = ЭлементФормы.КнопкаВыпадающегоСписка;
	ДобавляемыйЭлемент.КнопкаОткрытия = ЭлементФормы.КнопкаОткрытия;
	ДобавляемыйЭлемент.КнопкаВыбора = ЭлементФормы.КнопкаВыбора;
	ДобавляемыйЭлемент.АвтоОтметкаНезаполненного = ЭлементФормы.АвтоОтметкаНезаполненного;
	ДобавляемыйЭлемент.ОтображениеПодсказки = ЭлементФормы.ОтображениеПодсказки;
	ДобавляемыйЭлемент.Подсказка = ЭлементФормы.Подсказка;
	ДобавляемыйЭлемент.ИсторияВыбораПриВводе = ЭлементФормы.ИсторияВыбораПриВводе;
	ДобавляемыйЭлемент.БыстрыйВыбор = ЭлементФормы.БыстрыйВыбор;
	ДобавляемыйЭлемент.КнопкаСоздания = ЭлементФормы.КнопкаСоздания;
	ДобавляемыйЭлемент.КнопкаОткрытия = ЭлементФормы.КнопкаОткрытия;
	ДобавляемыйЭлемент.ПодсказкаВвода = ЭлементФормы.ПодсказкаВвода;
	ДобавляемыйЭлемент.Доступность = ЭлементФормы.Доступность;

КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеГруппы(ДобавляемаяГруппа, ГруппаФормы)
	
	ДобавляемаяГруппа.Вид = ГруппаФормы.Вид;
	ДобавляемаяГруппа.Отображение = ГруппаФормы.Отображение;
	ДобавляемаяГруппа.Группировка = ГруппаФормы.Группировка;
	ДобавляемаяГруппа.ОтображатьЗаголовок = ГруппаФормы.ОтображатьЗаголовок;
	ДобавляемаяГруппа.ЦветФона = ГруппаФормы.ЦветФона;
	ДобавляемаяГруппа.СквозноеВыравнивание = ГруппаФормы.СквозноеВыравнивание;
	ДобавляемаяГруппа.ГоризонтальныйИнтервал = ГруппаФормы.ГоризонтальныйИнтервал;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбсуждения(Команда)
	ОткрытьФорму("Обработка.АссистентУправления.Форма.ВыборОбсуждения");
КонецПроцедуры

&НаКлиенте
Процедура ВыборОбсуждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ВыборОбсужденияНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ВыборОбсужденияНаСервере(Результат, ДополнительныеПараметры)
	
	Индекс = Число(ДополнительныеПараметры);
	НастройкиЗадач[Индекс].Обсуждение = Результат.Тема;
	НастройкиЗадач[Индекс].ОбсуждениеИдентификатор = Результат.Идентификатор;
	НастройкиЗадач[Индекс].Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьОтправкиПриИзменении(Элемент)
	УстановитьМодифицированностьЗадач();
	УстановитьВидимостьПериодичностиОтправления();
КонецПроцедуры

#КонецОбласти
