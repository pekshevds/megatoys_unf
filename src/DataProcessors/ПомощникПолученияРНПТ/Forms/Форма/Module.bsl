
#Область ОписаниеПеременных

&НаКлиенте
// Переменная инициализируется по первому запросу
Перем КонтекстЭДОКлиент, КонтекстУжеПодключался;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Организация",      Объект.Организация);
	Параметры.Свойство("ПериодСобытия",    Объект.Период);
	
	ДатаНачалаУчетаПрослеживаемыхТоваров = ПрослеживаемостьБРУ.ДатаНачалаУчетаПрослеживаемыхТоваров();
	ИспользуетсяНесколькоОрганизаций = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	
	Если Параметры.КонтекстныйВызов Тогда
		ПредставлениеПериода = ПрослеживаемостьПереопределяемый.ПолучитьПредставлениеПериода(
			НачалоМесяца(Объект.Период), КонецМесяца(Объект.Период), Истина);
		Заголовок = СтрШаблон(НСтр("ru = 'Помощник получения РНПТ за %1'"), ПредставлениеПериода);
		Элементы.ПредставлениеПериода.Видимость = Ложь;
		// Скрываем поле ввода, оставляем гиперссылку
		Элементы.Организация.Видимость = Ложь;
		Элементы.ОрганизацияПредставление.Видимость = ИспользуетсяНесколькоОрганизаций;
		ТекущийШаг = "СоздатьУведомления";
	Иначе
		Заголовок = НСтр("ru = 'Помощник получения РНПТ'");
		Элементы.ПредставлениеПериода.Видимость = Истина;
		Если Не ЗначениеЗаполнено(Объект.Период) Тогда
			Объект.Период = ?(ДатаНачалаУчетаПрослеживаемыхТоваров < НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя()), 
			НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя()), ДатаНачалаУчетаПрослеживаемыхТоваров);
			
			ПредставлениеПериода = ПрослеживаемостьПереопределяемый.ПолучитьПредставлениеПериода(
				НачалоМесяца(Объект.Период), КонецМесяца(Объект.Период), Истина);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ПрослеживаемостьПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			Если Объект.Организация.Пустая() И Не ИспользуетсяНесколькоОрганизаций Тогда
				Объект.Организация = Справочники.Организации.ОсновнаяОрганизация;
			КонецЕсли;
		КонецЕсли;
		// Скрываем гиперссылку в зависимости от ФО
		Элементы.ОрганизацияПредставление.Видимость = Не ИспользуетсяНесколькоОрганизаций;
		Элементы.Организация.Видимость = ИспользуетсяНесколькоОрганизаций;
	КонецЕсли;
	
	Объект.Период = НачалоМесяца(Объект.Период);
	
	Элементы.КомандаПолучитьОтветОтФНС.Видимость =
		ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(Объект.Организация,
		Перечисления.ТипыКонтролирующихОрганов.ФНС, Ложь);
	
	// Инициализируем цвета
	Желтый	= Новый Цвет(251, 225, 81);
	Серый	= Новый Цвет(242, 242, 242);
	
	УстановитьПараметрыРазделов();
	
	ПодготовитьФормуНаСервере();
	
	УстановитьТекущуюСтраницу(ЭтотОбъект);

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КонтекстУжеПодключался = Ложь;
	
	Элементы.СтраницыПомощник.ТекущаяСтраница = Элементы.СтраницаПустая;
	ПолучитьДанныеДляЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		ОбновитьСчетчикОтправкиУведомлений(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Завершение обновления" Тогда
		
		Элементы.Уведомления.Обновить();
		ОбновитьНавигациюПоРазделамНаСервере(Истина);
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "Завершение отправки в контролирующий орган"
		ИЛИ ИмяСобытия = "Завершение отправки"
		ИЛИ ИмяСобытия = "Получены новые сообщения 1С-Отчетности без смены страницы" Тогда
		
		Если (ИмяСобытия = "Завершение отправки в контролирующий орган" ИЛИ ИмяСобытия = "Завершение отправки")
			И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Ссылка")
			И ЭтоОтправленныйОтчет(Параметр.Ссылка)
			И УведомленияДляОтправкиВФНС.Количество() > 1
			И УведомленияДляОтправкиВФНС.НайтиПоЗначению(Параметр.Ссылка) <> Неопределено
			И УведомленияДляОтправкиВФНС.Индекс(УведомленияДляОтправкиВФНС.НайтиПоЗначению(Параметр.Ссылка)) 
				< (УведомленияДляОтправкиВФНС.Количество()-1) Тогда
				
			Если (ТекущийИндексДокументаДляОтправкиВФНС + 1) < УведомленияДляОтправкиВФНС.Количество() Тогда
				
				ТекущийИндексДокументаДляОтправкиВФНС = ТекущийИндексДокументаДляОтправкиВФНС + 1;
				СледующийЭлементСписка = УведомленияДляОтправкиВФНС.Получить(ТекущийИндексДокументаДляОтправкиВФНС);
			
				ОбновитьСчетчикОтправкиУведомлений(,ТекущийИндексДокументаДляОтправкиВФНС);
				РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС", ,
					Истина, СледующийЭлементСписка.Значение, Объект.Организация);
					
			КонецЕсли;
			
		Иначе
				
			ОбновитьСчетчикОтправкиУведомлений(Истина);
			Элементы.Уведомления.Обновить();
			ОбновитьНавигациюПоРазделамНаСервере(Истина, Истина);
			ПерейтиНаСледующийАктуальныйШаг();
			
		КонецЕсли;
		
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "Запись_УведомлениеОбОстаткахПрослеживаемыхТоваров"
		ИЛИ ИмяСобытия = "Запись_УведомлениеОВвозеПрослеживаемыхТоваров" Тогда
		
		Элементы.Уведомления.Обновить();
		ОбновитьНавигациюПоРазделамНаСервере(Истина);
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ИзменениеСоставаТоваровПоОС" Тогда
		
		ОбновитьТекущуюСтрокуОсновныеСредства(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьДанныеПомощника(Истина);
	ОбновитьСпискиНаСервере();
	ПерейтиНаСледующийАктуальныйШаг();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("НачалоПериода", НачалоМесяца(Объект.Период));
	ПараметрыВыбора.Вставить("КонецПериода",  КонецМесяца(Объект.Период));
	ПараметрыВыбора.Вставить("ВидПериода",    ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"));
	ПараметрыВыбора.Вставить("ОграничениеСнизу", ЭтотОбъект.ДатаНачалаУчетаПрослеживаемыхТоваров);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", 
		ПараметрыВыбора, Элементы.Представлениепериода, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗавершениеВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		Объект.Период = НачалоМесяца(РезультатВыбора.НачалоПериода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		НачалоПериода = ВыбранноеЗначение.НачалоПериода;
		КонецПериода = ВыбранноеЗначение.КонецПериода;
	Иначе
		НачалоПериода = ВыбранноеЗначение;
		КонецПериода = ВыбранноеЗначение;
	КонецЕсли;
	
	ПрослеживаемостьФормыКлиентПереопределяемый.ПериодОбработкаВыбора(
		Элемент,
		НачалоПериода,
		СтандартнаяОбработка,
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"),
		ПредставлениеПериода,
		Объект.Период,
		КонецПериода);
		
	ОбновитьСпискиНаСервере();
	
	ОбновитьДанныеПомощника(Истина);
	ПерейтиНаСледующийАктуальныйШаг();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнвентаризацииТоваров(Команда)
	
	НачатьСозданиеИнвентаризаций();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнвентаризацииОС(Команда)
	
	НачатьСозданиеИнвентаризацийОС();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьУведомленияПоОС(Команда)
	
	НачатьСозданиеУведомленийПоОС();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьУведомленияПоТоварам(Команда)
	
	НачатьСозданиеУведомленийПоТоварам();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировочныеУведомления(Команда)
	
	НачатьСозданиеКорректировочныхУведомлений();

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВФНС(Команда)
	
	НачатьОтправкуУведомленийВФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОтветОтФНС(Команда)
	
	ИнтерфейсыВзаимодействияБРОКлиент.ОсуществитьОбменПоОрганизациям(, Объект.Организация,, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРНПТ(Команда)
	
	НачатьЗаписьПолученныхРНПТ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналУведомлений(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
	ПараметрыФормы.Вставить("ДатаБольшеИлиРавно", НачалоМесяца(Объект.Период));
	ПараметрыФормы.Вставить("ДатаменьшеИлиРавно", КонецМесяца(Объект.Период));
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	
	ПараметрыФормы.Вставить("ОтобратьУведомленияСРНПТ", ?(ТекущийШаг = "ЗаписатьПолученныеРНПТ", Истина, Ложь) );
	
	ОткрытьФорму("ЖурналДокументов.ПрослеживаемостьУведомления.Форма.ФормаСпискаРНПТ",
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНажатие(Элемент)
	
	НовыйШаг = Элемент.Имя;
	Если НовыйШаг <> ТекущийШаг Тогда
		
		ПредыдущаяГиперссылка = ТекущийРазделФормы(ЭтаФорма);
		ТекущаяГиперссылка    = Элемент;
	
		ПриПереключенииРазделаСервер(ПредыдущаяГиперссылка.Имя, ТекущаяГиперссылка.Имя);
		
		ПриИзмененииРаздела(НовыйШаг);
		
		Если ТекущийШаг = "ОжиданиеОтветаОтФНС" Тогда
			
			ПросмотренШагОжиданиеОтветаОтФНС = Истина;
			
			ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеОтветаОтФНС", 0.3, Истина);

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачальныеДанныеПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПриИзмененииРаздела(ТекущийШаг);
	ПоказатьКомандыРаздела(ТекущийШаг);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачальныеДанные

&НаКлиенте
Процедура НачальныеДанныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	ПараметрыФормы = Новый Структура();
	
	Если Поле.Имя = "НачальныеДанныеТоваровПредставлениеОснование" Тогда
		
		ИмяДокументаОснования = ПрослеживаемостьФормыВызовСервера.ИмяДокумента(ДанныеСтроки.Основание);

		ПараметрыФормы.Вставить("Ключ", ДанныеСтроки.Основание);
		ОткрытьФорму("Документ."+ ИмяДокументаОснования +".ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачальныеДанныеОСЕстьСоставПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НачальныеДанныеОС.ТекущиеДанные;
	
	ОбновитьТекущуюСтрокуПоОС(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НачальныеДанныеОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	ПараметрыФормы = Новый Структура();
	
	Если Поле.Имя = "НачальныеДанныеОССостав" Тогда
	
		ОткрытьСписокПрослеживаемыхТоваровПоЭтомуОС(
			ДанныеСтроки.ОсновноеСредство,
			ДанныеСтроки.Основание,
			ДанныеСтроки.ОстаточнаяСтоимостьОС);
		
	ИначеЕсли Поле.Имя = "НачальныеДанныеОСПредставлениеОснование" Тогда
		
		ИмяДокументаОснования = ПрослеживаемостьФормыВызовСервера.ИмяДокумента(ДанныеСтроки.Основание);

		ПараметрыФормы.Вставить("Ключ", ДанныеСтроки.Основание);
		ОткрытьФорму("Документ."+ ИмяДокументаОснования +".ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУведомления

&НаКлиенте
Процедура УведомленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	ПараметрыФормы = Новый Структура();
	
	Если Поле.Имя = "УведомленияПредставлениеОснование" Тогда
		
		ИмяДокументаОснования = ПрослеживаемостьФормыВызовСервера.ИмяДокумента(ДанныеСтроки.Основание);
		
		ПараметрыФормы.Вставить("Ключ", ДанныеСтроки.Основание);
		ОткрытьФорму("Документ."+ ИмяДокументаОснования +".ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	ИначеЕсли Поле.Имя = "УведомленияПредставлениеУведомление" Тогда
		
		ПараметрыФормы.Вставить("Ключ", ДанныеСтроки.Уведомление);
		Если ТипЗнч(ДанныеСтроки.Уведомление) = Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров") Тогда
			ОткрытьФорму("Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		Иначе
			 ОткрытьФорму("Документ.УведомлениеОВвозеПрослеживаемыхТоваров.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "УведомленияСтатус" Тогда
		
		ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УведомленияПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Для Каждого ТекущаяСтрока Из Строки Цикл
		
		Данные = ТекущаяСтрока.Значение.Данные;
		
		Данные.ПредставлениеОснование = ТекстДокументаДляПредставления(Данные.Основание, Истина);
		Данные.ПредставлениеУведомление = ТекстДокументаДляПредставления(Данные.Уведомление);
		
		Если ЗначениеЗаполнено(Данные.ДокументыРеализацииПолномочийНО_РНПТ) Тогда
			
			Если СтрНайти(Данные.ПредставлениеУведомление, "Корректировочное") > 0 Тогда
				
				Данные.ПредставлениеРНПТ = СтрШаблон(НСтр("ru = '%1'"), Данные.ДокументыРеализацииПолномочийНО_РНПТ);
				
			Иначе
				
				Данные.ПредставлениеРНПТ = СтрШаблон(НСтр("ru = '%1(!)'"), Данные.ДокументыРеализацииПолномочийНО_РНПТ);
				
			КонецЕсли;
			
		Иначе
			
			Данные.ПредставлениеРНПТ = "";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыПоУведомлениям

&НаКлиенте
Процедура УведомленияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Уведомления.ТекущиеДанные;
	
	ОбновитьТаблицуТоварыПоУведомлениям();
	
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ДекорацияТНВЭДНаименование.Заголовок = "";
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияТНВЭДНаименование.Заголовок = ОписаниеТНВЭД(ТекущиеДанные.ТНВЭД);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеТНВЭД(ТНВЭД)
	
	ОписаниеТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТНВЭД, "Наименование");

	ТекстТНВЭД = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ТН ВЭД: %1 %2'"), ТНВЭД, ОписаниеТНВЭД);
	
	Возврат ТекстТНВЭД;
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеПомощника(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция СтруктураОписанияШага()
	
	Возврат Новый Структура("Подсказка, ВысотаПодсказки",,1);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеШагаСтруктурой(МассивСтрок, Высота)
	
	ОписаниеШага = СтруктураОписанияШага();
	
	ОписаниеШага.Подсказка = Новый ФорматированнаяСтрока(МассивСтрок);
	ОписаниеШага.ВысотаПодсказки = 2;
	
	Возврат ОписаниеШага;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеШага(Раздел)
	
	РазделОписаниеРаздела = Новый Соответствие();
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru='Наименования товаров, основных средств и малоценного имущества подлежащие прослеживаемости'"));
	МассивСтрок.Добавить(Символы.ПС);
	МассивСтрок.Добавить(НСтр("ru='Проверьте содержание табличной части и нажмите на кнопку Провести инвентаризацию'"));
	РазделОписаниеРаздела.Вставить("ПровестиИнвентаризацию", ПолучитьОписаниеШагаСтруктурой(МассивСтрок, 2));
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru='Основания для получения РНПТ, на прослеживаемые товары, основные средства и малоценное имущество. Если в составе ОС есть прослеживаемые комплектующие, включите флаг и затем укажите состав'"));
	МассивСтрок.Добавить(Символы.ПС);
	МассивСтрок.Добавить(НСтр("ru='Для создания уведомлений нажмите на кнопку ""Создать уведомления""'"));
	РазделОписаниеРаздела.Вставить("СоздатьУведомления", ПолучитьОписаниеШагаСтруктурой(МассивСтрок, 1));
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(
		НСтр(
			"ru='Прослеживаемые товары, по которым необходимо создать корректировочные уведомления. Для создания корректировочных уведомлений нажмите на кнопку ""Создать корректировочные уведомления""'")
			);
	
	РазделОписаниеРаздела.Вставить("СоздатьКорректировочныеУведомления", ПолучитьОписаниеШагаСтруктурой(МассивСтрок, 1));

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru='Проверьте содержание уведомлений и ТН ВЭД, после этого нажмите Отправить в ФНС (через 1С-Отчетность)'"));
	РазделОписаниеРаздела.Вставить("ОтправитьУведомлениявФНС", ПолучитьОписаниеШагаСтруктурой(МассивСтрок, 1));
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru='Список уведомлений, по которым еще не получен ответ от ФНС. Ответ поступит не позднее следующего дня с даты получения уведомления'"));
	МассивСтрок.Добавить(Символы.ПС);
	МассивСтрок.Добавить(НСтр("ru='Если долго нет ответа, нажмите на кнопку Получить ответ от ФНС'"));
	РазделОписаниеРаздела.Вставить("ОжиданиеОтветаОтФНС", ПолучитьОписаниеШагаСтруктурой(МассивСтрок, 1));
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru='Список полученных РНПТ. Чтобы записать РНПТ в программу, необходимо нажать на кнопку Записать РНПТ'"));
	РазделОписаниеРаздела.Вставить("ЗаписатьПолученныеРНПТ", ПолучитьОписаниеШагаСтруктурой(МассивСтрок, 1));
	
	Возврат РазделОписаниеРаздела[Раздел];
	
КонецФункции

&НаКлиенте
Процедура ПоказатьФормуСтатусовОтправкиИзСписка(Элемент)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		Оповещение = Новый ОписаниеОповещения(
			"ПоказатьФормуСтатусовОтправкиИзСпискаПредварительное", 
			ЭтотОбъект, 
			ПараметрыОповещения
		);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуСтатусовОтправкиИзСпискаПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ПоказатьФормуСтатусовОтправкиИзСписка(ПараметрыОповещения.Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьКонтекстЭДО(ОповещениеЗавершения = Неопределено) Экспорт
	Перем ДополнительныеПараметры;
	
	Если ОповещениеЗавершения <> Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИнициализироватьКонтекстЭДОЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьКонтекстЭДОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО = Результат.ТекстОшибки;
	КонтекстУжеПодключался = Истина;
	Если ДополнительныеПараметры <> Неопределено Тогда 
		Если ДополнительныеПараметры.Свойство("ОповещениеЗавершения") Тогда 
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьПолученныхРНПТ()
	
	ЗапущеноЗаписываниеПолученныхРНПТ = Истина;
	ОбновитьТекстОжиданияВыполненияДействия();
	ПоказатьКомандыРаздела(ТекущийШаг);
	
	ДлительнаяОперация = ЗаписьРНПТНаСервереВФоне();
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеЗаписиРНПТ", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуСозданияУведомленийОбОстатках(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжиданиеОтветаОтФНС()
	
	Элементы.Уведомления.Обновить();
	ОбновитьНавигациюПоРазделамНаСервере(Истина);
	ОбновитьТекстОжиданияВыполненияДействия();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпискиНаСервере()
	
	УстановитьПараметрыРазделов();
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьПараметрыРазделов()

	Список = ЭтотОбъект["Уведомления"];
	
	ТекстЗапроса = "";
	ПрослеживаемостьПереопределяемый.ТекстЗапросаДинамическогоСпискаУведомления(ТекстЗапроса);
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Уведомления, СвойстваСписка);
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоМесяца(Объект.Период));
	Список.Параметры.УстановитьЗначениеПараметра("КонецПериода", КонецМесяца(Объект.Период));
	Список.Параметры.УстановитьЗначениеПараметра("Организация", Объект.Организация);
	Список.Параметры.УстановитьЗначениеПараметра("ПустоеЗначениеРНПТ", ПрослеживаемостьПереопределяемый.ПустоеЗначениеРНПТ());
	
	ТекстЗапроса = "";
	ПрослеживаемостьПереопределяемый.ТекстЗапросаДинамическогоСпискаТоварыПоУведомлениям(ТекстЗапроса);
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ТоварыПоУведомлениям, СвойстваСписка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеИнвентаризаций()
	
	ЗапущеноСозданиеИнвентаризацийТоваров = Истина;
	ОбновитьТекстОжиданияВыполненияДействия();
	ПоказатьКомандыРаздела(ТекущийШаг);
	
	ДлительнаяОперация = СоздатьИнвентаризацииНаСервереВФоне();
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеСозданияИнвентаризацийТоваровПоОстаткам", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуСозданияИнвентаризацийОбОстатках(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеИнвентаризацийОС()
	
	ЗапущеноСозданиеИнвентаризацийОС = Истина;
	ОбновитьТекстОжиданияВыполненияДействия();
	ПоказатьКомандыРаздела(ТекущийШаг);
	
	ДлительнаяОперация = СоздатьИнвентаризацииОСНаСервереВФоне();
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеСозданияИнвентаризацийОСПоОстаткам", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуСозданияИнвентаризацийОбОстатках(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеУведомленийПоОС()
	
	ЗапущеноСозданиеУведомленийПоОС = Истина;
	ОбновитьТекстОжиданияВыполненияДействия();
	ПоказатьКомандыРаздела(ТекущийШаг);
	
	ДлительнаяОперация = СоздатьУведомленияПоОСНаСервереВФоне();
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеСозданияУведомленийПоОС", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуСозданияУведомленийОбОстатках(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеУведомленийПоТоварам()
	
	ЗапущеноСозданиеУведомленийПоТоварам = Истина;
	ОбновитьТекстОжиданияВыполненияДействия();
	ПоказатьКомандыРаздела(ТекущийШаг);
	
	ДлительнаяОперация = СоздатьУведомленияПоТоварамНаСервереВФоне();
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеСозданияУведомленийПоТоварам", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуСозданияУведомленийОбОстатках(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеКорректировочныхУведомлений()
	
	ЗапущеноСозданиеКорректировочныхУведомлений = Истина;
	ОбновитьТекстОжиданияВыполненияДействия();
	ПоказатьКомандыРаздела(ТекущийШаг);
	
	ДлительнаяОперация = СоздатьКорректировочныеУведомленияНаСервереВФоне();
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеСозданияКорректировочныхУведомлений", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуСозданияКорректировочныхУведомленийОбОстатках(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуУведомленийВФНС()
	
	УведомленияСОшибками = ЗаполнитьСписокУведомленийДляОтправкиВФНС(); 
	
	ВывестиОшибкиОтправкиУведомлений(УведомленияСОшибками);
	
	Если УведомленияСОшибками.Количество() = 0 Тогда
		
		Обработчик = Новый ОписаниеОповещения("ПослеПодтвержденияОтправки", ЭтотОбъект);
	
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Продолжить'"));
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		ПоказатьВопрос(
			Обработчик,
			НСтр("ru = 'Сейчас начнется отправка отчетов.
					   |В процессе отправки могут быть запрошены пароли от закрытых ключей.'"),
			КнопкиВопроса);
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияОтправки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если УведомленияДляОтправкиВФНС.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийИндексДокументаДляОтправкиВФНС = 0;
	ТекущийЭлементСписка = УведомленияДляОтправкиВФНС[ТекущийИндексДокументаДляОтправкиВФНС];
	
	ОбновитьСчетчикОтправкиУведомлений(,ТекущийИндексДокументаДляОтправкиВФНС);
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС", ,
		Истина, ТекущийЭлементСписка.Значение, Объект.Организация);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСписокУведомленийДляОтправкиВФНС()
	
	Схема = Элементы.Уведомления.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.Уведомления.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = 
		КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	// выгружаем ссылки в массив для передачи клиенту
	МассивСсылок = ТаблицаРезультат.ВыгрузитьКолонку("Уведомление"); 

	УведомленияСОшибками = ПроверитьУведомленияНаОшибки(МассивСсылок);

	УведомленияДляОтправкиВФНС.Очистить();
	
	Для Каждого ТекущeeЗначение Из МассивСсылок Цикл
		
		Если УведомленияСОшибками.Найти(ТекущeeЗначение) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
			
		УведомленияДляОтправкиВФНС.Добавить(ТекущeeЗначение);
		
	КонецЦикла;
	
	Возврат УведомленияСОшибками;

КонецФункции

&НаКлиенте
Процедура ВывестиОшибкиОтправкиУведомлений(УведомленияСОшибками)
	
	Если УведомленияСОшибками.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущееЗначение Из УведомленияСОшибками Цикл
		
		МассивИзДвухСтрок = Новый Массив;
		МассивИзДвухСтрок.Добавить(НСтр("ru = 'В документе:'"));
		МассивИзДвухСтрок.Добавить(ТекстДокументаДляПредставления(ТекущееЗначение));
		МассивИзДвухСтрок.Добавить(НСтр("ru = 'не указана страна происхождения. Отправка документа запрещена!'"));
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрСоединить(МассивИзДвухСтрок, " "));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьУведомленияНаОшибки(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Товары КАК УведомлениеОбОстаткахПрослеживаемыхТоваровТовары
	|ГДЕ
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Ссылка В(&МассивДокументов)
	|	И УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Ссылка
	|ИЗ
	|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров.Товары КАК УведомлениеОВвозеПрослеживаемыхТоваровТовары
	|ГДЕ
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Ссылка В(&МассивДокументов)
	|	И УведомлениеОВвозеПрослеживаемыхТоваровТовары.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)";
	
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивСсылок);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		
		Возврат Результат.ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСчетчикОтправкиУведомлений(ЭтоОчистка = Ложь, ТекущийНомерОтправки = Неопределено)
	
	Если ЭтоОчистка Тогда
		ДлительнаяОтправкаКлиент.КонтекстДлительнойОперации("БРО.ПодтверждатьОтправку");
		ДлительнаяОтправкаКлиент.КонтекстДлительнойОперации("БРО.ПодтверждатьЗавершениеОтправки");
		ДлительнаяОтправкаКлиент.КонтекстДлительнойОперации("БРО.ХарактеристикаОтправляемогоОтчета");
		Возврат;
	КонецЕсли;
	
	НомерИКоличество = "";
	
	Если ТекущийНомерОтправки <> Неопределено Тогда
		НомерСтроки = ТекущийНомерОтправки + 1;
		Если НомерСтроки > 0 Тогда
			КоличествоСтрок = УведомленияДляОтправкиВФНС.Количество();
			Если КоличествоСтрок > 1 Тогда
				НомерИКоличество = СтрШаблон(
					НСтр("ru = '%1 из %2'"),
					Строка(НомерСтроки),
					Строка(КоличествоСтрок));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДлительнаяОтправкаКлиент.ЗапомнитьКонтекстДлительнойОперации(Ложь,
		"БРО.ПодтверждатьОтправку");
	ДлительнаяОтправкаКлиент.ЗапомнитьКонтекстДлительнойОперации(Ложь,
		"БРО.ПодтверждатьЗавершениеОтправки");
	ДлительнаяОтправкаКлиент.ЗапомнитьКонтекстДлительнойОперации(НомерИКоличество,
		"БРО.ХарактеристикаОтправляемогоОтчета");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоОтправленныйОтчет(Ссылка)
	
	Возврат ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(Ссылка).Отправлено;
	
КонецФункции

&НаКлиенте
Процедура ПослеСозданияИнвентаризацийТоваровПоОстаткам(ДлительнаяОперация, ДополнительныеПараметры) Экспорт

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		СозданныеПервичныеДокументы.ЗагрузитьЗначения(ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата));
		
		ЗапущеноСозданиеИнвентаризацийТоваров = Ложь;
		
		ОбновитьДанныеПомощника(Ложь, Истина);
		
		ПерейтиНаСледующийАктуальныйШаг();
		
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		ПоказатьОшибкуПолученияДанных(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияИнвентаризацийОСПоОстаткам(ДлительнаяОперация, ДополнительныеПараметры) Экспорт

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		СозданныеПервичныеДокументы.ЗагрузитьЗначения(ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата));
		
		ЗапущеноСозданиеИнвентаризацийОС = Ложь;
		
		ОбновитьДанныеПомощника(Ложь, Истина);
		
		ПерейтиНаСледующийАктуальныйШаг();
		
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		ПоказатьОшибкуПолученияДанных(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиРНПТ(ДлительнаяОперация, ДополнительныеПараметры) Экспорт

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ЗапущеноЗаписываниеПолученныхРНПТ = Ложь;
		
		ОбновитьДанныеПомощника(Ложь, Истина);
		
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		ПоказатьОшибкуПолученияДанных(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьИнвентаризацииНаСервереВФоне()
	
	ПараметрыОбработчика = ПараметрыСозданияИнвентаризацийОбОстатках();
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Создание инвентаризаций об остатках'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникПолученияРНПТ.СоздатьИнвентаризациюОбОстаткахВФоне",
		ПараметрыОбработчика,
		НастройкиЗапуска);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаСервере
Функция СоздатьИнвентаризацииОСНаСервереВФоне()
	
	ПараметрыОбработчика = ПараметрыСозданияИнвентаризацийОСПоОстакам();
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Создание инвентаризаций об остатках ОС'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникПолученияРНПТ.СоздатьИнвентаризациюОСОбОстаткахВФоне",
		ПараметрыОбработчика,
		НастройкиЗапуска);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаСервере
Функция СоздатьУведомленияПоОСНаСервереВФоне()
	
	ПараметрыОбработчика = ПараметрыСозданияУведомленийПоОС();
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Создание уведомлений'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникПолученияРНПТ.СоздатьУведомленияПоОСВФоне",
		ПараметрыОбработчика,
		НастройкиЗапуска);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаСервере
Функция СоздатьУведомленияПоТоварамНаСервереВФоне()
	
	ПараметрыОбработчика = ПараметрыСозданияУведомленийПоТоварам();
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Создание уведомлений'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникПолученияРНПТ.СоздатьУведомленияПоТоварамВФоне",
		ПараметрыОбработчика,
		НастройкиЗапуска);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаСервере
Функция СоздатьКорректировочныеУведомленияНаСервереВФоне()
	
	ПараметрыОбработчика = ПараметрыСозданияКорректировочныхУведомлений();
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Создание корректировочных уведомлений'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникПолученияРНПТ.СоздатьКорректировочныеУведомленияВФоне",
		ПараметрыОбработчика,
		НастройкиЗапуска);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаСервере
Функция ЗаписьРНПТНаСервереВФоне()
	
	ПараметрыОбработчика = ПараметрыЗаписиРНПТ();
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Запись РНПТ'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникПолученияРНПТ.ЗаписьПолученныхРНПТВФоне",
		ПараметрыОбработчика,
		НастройкиЗапуска);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаСервере
Функция ПараметрыЗаписиРНПТ()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПериодСобытия",   Объект.Период);
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);

	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПараметрыСозданияИнвентаризацийОСПоОстакам()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПериодСобытия",     Объект.Период);
	СтруктураПараметров.Вставить("Дата",              Объект.Период);
	СтруктураПараметров.Вставить("Организация",       Объект.Организация);
	СтруктураПараметров.Вставить("ТаблицаОстатковОС", Объект.НачальныеДанные.Выгрузить(
					Новый Структура("ЕстьПервичныйДокумент,ЭтоОС", Ложь, Истина)));

	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПараметрыСозданияИнвентаризацийОбОстатках()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПериодСобытия",   Объект.Период);
	СтруктураПараметров.Вставить("Дата",             Объект.Период);
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("ТаблицаОстатков",  
		Объект.НачальныеДанные.Выгрузить(Новый Структура("ЕстьПервичныйДокумент,ЭтоОС", Ложь, Ложь)));

	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПараметрыСозданияУведомленийПоТоварам()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПериодСобытия",   Объект.Период);
	СтруктураПараметров.Вставить("Дата",            ОбщегоНазначения.ТекущаяДатаПользователя());
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("ТаблицаОстатков",  
		Объект.НачальныеДанные.Выгрузить(Новый Структура("ЕстьПервичныйДокумент, ИмпортИзЕАЭС,ЭтоОС", Истина, Ложь, Ложь)));
	СтруктураПараметров.Вставить("ТаблицаВвоза",  
		Объект.НачальныеДанные.Выгрузить(Новый Структура("ЕстьПервичныйДокумент, ИмпортИзЕАЭС, ЭтоОС", Истина, Истина, Ложь)));
		
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПараметрыСозданияУведомленийПоОС()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПериодСобытия",   Объект.Период);
	СтруктураПараметров.Вставить("Дата",            ОбщегоНазначения.ТекущаяДатаПользователя());
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("ТаблицаОстатковОС",  
		Объект.НачальныеДанные.Выгрузить(Новый Структура("ЕстьПервичныйДокумент,ЭтоОС", Истина,Истина)));
		
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПараметрыСозданияКорректировочныхУведомлений()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПериодСобытия",   Объект.Период);
	СтруктураПараметров.Вставить("Дата",            ОбщегоНазначения.ТекущаяДатаПользователя());
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("ТаблицаКорректировкиУведомленийОВвозе",  
		Объект.НачальныеДанные.Выгрузить(Новый Структура("ЕстьПервичныйДокумент,ИмпортИзЕАЭС,ЕстьРНПТ", Истина, Истина,Истина)));
		
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОшибкуСозданияИнвентаризацийОбОстатках(ДлительнаяОперация)
	
	МассивИзДвухСтрок = Новый Массив;
	МассивИзДвухСтрок.Добавить(НСтр("ru = 'Ошибка при создании инвентаризаций..'"));
	МассивИзДвухСтрок.Добавить(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	
	ВызватьИсключение СтрСоединить(МассивИзДвухСтрок, Символы.ПС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуСозданияУведомленийОбОстатках(ДлительнаяОперация)
	
	МассивИзДвухСтрок = Новый Массив;
	МассивИзДвухСтрок.Добавить(НСтр("ru = 'Ошибка при создании уведомлений..'"));
	МассивИзДвухСтрок.Добавить(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	
	ВызватьИсключение СтрСоединить(МассивИзДвухСтрок, Символы.ПС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуСозданияКорректировочныхУведомленийОбОстатках(ДлительнаяОперация)
	
	МассивИзДвухСтрок = Новый Массив;
	МассивИзДвухСтрок.Добавить(НСтр("ru = 'Ошибка при создании корректировочных уведомлений..'"));
	МассивИзДвухСтрок.Добавить(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	
	ВызватьИсключение СтрСоединить(МассивИзДвухСтрок, Символы.ПС);
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьСтатусФоновогоЗадания()

	ЧастиТекста = Новый Массив;
	
	ЧастиТекста.Добавить(НСтр("ru = 'Выполняется получение данных...'"));
	
	СтатусФоновогоЗадания =  Новый ФорматированнаяСтрока(ЧастиТекста);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеДляЗаполнения()
	
	ОбновитьДанныеПомощника();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ПрослеживаемостьПереопределяемый.ДобавитьДополнительныеРеквизитыНаФорму(ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	Элементы.ПанельСписков.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	ИнициализироватьРазделы();
	
	НастроитьСпискиРазделов();
	
	ВестиСкладскойУчетБУ = Прослеживаемостьпереопределяемый.ВедетсяУчетПоСкладам();
	
	ОбновитьНавигациюПоРазделамНаСервере(Истина);

КонецПроцедуры

&НаСервере
Процедура НастроитьСпискиРазделов()
	
	СоздатьОтборПоРазделамВСпискахРазделов();

КонецПроцедуры

&НаСервере 
Процедура СоздатьОтборПоРазделамВСпискахРазделов()
	
	Список = Уведомления;
	
	ГруппаОтборПоРазделам = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.Отбор.Элементы, "ОтборПоРазделам", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	Разделы = Новый Массив;
	Разделы.Добавить("ОтправитьУведомлениявФНС");
	Разделы.Добавить("ОжиданиеОтветаОтФНС");
	Разделы.Добавить("ЗаписатьПолученныеРНПТ");
		
	Для Каждого Раздел Из Разделы Цикл
		
		ГруппаРаздел = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаОтборПоРазделам, "Раздел" + Раздел, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
		СоздатьОтборПоРазделу(Раздел, ГруппаРаздел);
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста 
Процедура СоздатьОтборПоРазделу(Знач Раздел, ГруппаОтбора)

	Если Раздел = "ОтправитьУведомлениявФНС" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"Статус", Перечисления.СтатусыОтправки.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
	ИначеЕсли Раздел = "ОжиданиеОтветаОтФНС" Тогда
		
		СписокСтатусов = Новый СписокЗначений;
		СписокСтатусов.Добавить(Перечисления.СтатусыОтправки.Отправлен);
		СписокСтатусов.Добавить(Перечисления.СтатусыОтправки.Доставлен);
		СписокСтатусов.Добавить(Перечисления.СтатусыОтправки.Сдан);
		СписокСтатусов.Добавить(Перечисления.СтатусыОтправки.НеПринят);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"Статус", СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ДокументыРеализацииПолномочийНО_РНПТЗаполнен", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
	ИначеЕсли Раздел = "ЗаписатьПолученныеРНПТ" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"Статус", Перечисления.СтатусыОтправки.Сдан, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ДокументыРеализацииПолномочийНО_РНПТЗаполнен", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницу(Форма)
	
	Элементы = Форма.Элементы;

	Если Форма.ЗапущенноОбновлениеДанных Тогда
		
		Элементы.СтраницыПомощник.ТекущаяСтраница = Элементы.СтраницаПустая;
		
	ИначеЕсли Форма.ДанныеПолучены Тогда
		
		Элементы.СтраницыПомощник.ТекущаяСтраница = Элементы.СтраницаРабочая;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// НачальныеДанныеСклад
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачальныеДанныеТоваровСклад");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВестиСкладскойУчетБУ", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// НачальныеДанныеНоменклатура
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачальныеДанныеТоваровНоменклатура");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НачальныеДанные.ЭтоНовыйДокумент", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);

	// ТоварыПоУведомлениямЕдиницаИзмерения, ТоварыПоУведомлениямЕдиницаПрослеживаемости
	// , ТоварыПоУведомлениямКоличествоПрослеживаемости
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПоУведомлениямЕдиницаИзмерения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПоУведомлениямЕдиницаПрослеживаемости");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПоУведомлениямКоличествоПрослеживаемости");
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТоварыПоУведомлениям.ЕдиницыИзмеренияОдинаковы", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// УведомленияСтатус
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УведомленияСтатус");
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Уведомления.Статус", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыОтправки.НеПринят);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	// НачальныеДанныеОССостав
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачальныеДанныеОССостав");
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НачальныеДанные.ЕстьСостав", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НачальныеДанные.КоличествоСоставныхОбъектовВОС", ВидСравненияКомпоновкиДанных.Равно, 0);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьНавигациюПоРазделамНаСервере(Знач ПересчитатьКоличество = Истина, Знач ПроверитьШагОжиданияОтвета = Ложь)
	
	РассчитатьКоличествоЭлементовВРазделах(ПересчитатьКоличество);
	
	Если ПроверитьШагОжиданияОтвета Тогда
	
		НайденныеСтроки = ОписаниеРазделов.НайтиСтроки(Новый Структура("Имя", "ОжиданиеОтветаОтФНС"));
		Если НайденныеСтроки[0].Количество > 0 Тогда
			ПросмотренШагОжиданиеОтветаОтФНС = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьМенюНавигации();
	
	ОбновитьДоступностьКоманд();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоличествоЭлементовВРазделах(Знач ПересчитатьКоличество = Истина)
	
	Если Не (ПересчитатьКоличество) Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ЭтотОбъект;
	
	ДанныеДляРасчета = Новый Массив;
	
	Для Каждого Раздел Из ОписаниеРазделов Цикл
		
		Если Не (Раздел.РассчитыватьКоличество И Раздел.Видимость) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПересчитатьКоличество Тогда
			ЭлементРасчета = 
				Новый Структура("Раздел,Подраздел,УчитыватьОтбор,Количество", Раздел.Имя, Раздел.ИмяПодраздела, Ложь, 0);
			ДанныеДляРасчета.Добавить(ЭлементРасчета);
		КонецЕсли;
		
	КонецЦикла;
	
	ВыполнитьРасчетКоличестваЭлементовВРазделах(ДанныеДляРасчета);
	
	Для Каждого ЭлементРасчета Из ДанныеДляРасчета Цикл
		
		ОтборРаздела = Новый Структура("Имя,ИмяПодраздела", ЭлементРасчета.Раздел,ЭлементРасчета.Подраздел);
		ВсеСтрокиРаздела = ОписаниеРазделов.НайтиСтроки(ОтборРаздела);
		
		Для Каждого СтрокаРаздела Из ВсеСтрокиРаздела Цикл
			
			Если ЭлементРасчета.УчитыватьОтбор Тогда
				СтрокаРаздела.КоличествоОтбор = ЭлементРасчета.Количество;
			Иначе
				СтрокаРаздела.Количество = ЭлементРасчета.Количество;
				СтрокаРаздела.КоличествоОтбор = ЭлементРасчета.Количество;
			КонецЕсли;
			
			СтрокаРаздела.КоличествоРассчитано = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьМенюНавигации() 
	
	КОбработке = 0;
	
	Для Каждого Раздел Из ОписаниеРазделов Цикл
		
		Если Не Раздел.ЭтоПодраздел Тогда
			
			Элементы[Раздел.Имя].Заголовок = Раздел.Представление;
			Элементы[Раздел.Имя].Шрифт = Новый Шрифт(); 
			
			Если Раздел.Видимость Тогда
				КОбработке = КОбработке + Раздел.Количество;
				
				ВыделятьПолужирнымШрифтом = (Раздел.Количество > 0);
				
				Если ВыделятьПолужирнымШрифтом  Тогда
					
					Если (Раздел.Имя = "ОжиданиеОтветаОтФНС" И Не ПросмотренШагОжиданиеОтветаОтФНС)
						ИЛИ Раздел.Имя <> "ОжиданиеОтветаОтФНС" Тогда
						
						Элементы[Раздел.Имя].Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина, Ложь, Ложь, Ложь, );
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Раздел.РассчитыватьКоличество И Раздел.КоличествоРассчитано И Раздел.Количество > 0 Тогда
				
				Представление= Раздел.Представление;
				КоличествоОтборСтрокой = ?(Раздел.КоличествоОтбор >= 1000, "999+", Формат(Раздел.КоличествоОтбор, "ЧН=0; ЧГ=0"));
				Представление = Представление + " (" + КоличествоОтборСтрокой;
				
				Если Раздел.Количество <> Раздел.КоличествоОтбор Тогда
					
					КоличествоСтрокой = ?(Раздел.Количество >= 1000, "999+", Формат(Раздел.Количество, "ЧН=0; ЧГ=0"));
					Представление = Представление + "/" + КоличествоСтрокой;
					
				КонецЕсли;
				
				Представление = Представление + ")";
				
				Элементы[Раздел.Имя].Заголовок = Представление;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КОбработке;
	
КонецФункции

&НаСервере
Процедура ОбновитьДоступностьКоманд()
	
	КомандыРазделов = ПолучитьКомандыРазделов();
	
	НедоступныеКоманды.Очистить();
	
	Для Каждого ТекущаяСтрока Из ОписаниеРазделов Цикл
		
		СтрКоманды = КомандыРазделов.Получить(ТекущаяСтрока.Имя + ТекущаяСтрока.ИмяПодраздела);
		МассивКоманд = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрКоманды, ",");
		КоличествоСтрокВТекущемШаге = ТекущаяСтрока.Количество;
		
		Если КоличествоСтрокВТекущемШаге <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущаяКоманда Из МассивКоманд Цикл
			Если ТекущаяКоманда = "Обновить"
				ИЛИ ТекущаяКоманда = "ОткрытьЖурналУведомлений"
				ИЛИ ТекущаяКоманда = "ПоискУведомления"
				ИЛИ ТекущаяКоманда = "ОтменитьПоискУведомления"
				ИЛИ ТекущаяКоманда = "ПоискНачальныеДанные"
				ИЛИ ТекущаяКоманда = "ОтменитьПоискНачальныеДанные" Тогда 
				Продолжить;
			КонецЕсли;
			
			НедоступныеКоманды.Добавить(ТекущаяКоманда);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРасчетКоличестваЭлементовВРазделах(ДанныеДляРасчета)
	
	Если Не ЗначениеЗаполнено(ДанныеДляРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементРасчета Из ДанныеДляРасчета Цикл
		
		НазваниеТаблицы = СписокРаздела(ЭлементРасчета.Раздел);
		
		Если НазваниеТаблицы = "НачальныеДанные" Тогда
			
			ТаблицаДанных = Объект[НазваниеТаблицы];
			
			Если ЗначениеЗаполнено(ЭлементРасчета.Подраздел) Тогда
				
				Фильтр = Новый Структура("ЕстьПервичныйДокумент,ЕстьРНПТ,ЭтоОС", 
					ЭлементРасчета.Раздел = "СоздатьУведомления" ИЛИ ЭлементРасчета.Раздел = "СоздатьКорректировочныеУведомления",
					ЭлементРасчета.Раздел = "СоздатьКорректировочныеУведомления", ЭлементРасчета.Подраздел = "ОС");
				
			Иначе
				Фильтр = Новый Структура("ЕстьПервичныйДокумент,ЕстьРНПТ", 
					ЭлементРасчета.Раздел = "СоздатьУведомления" ИЛИ ЭлементРасчета.Раздел = "СоздатьКорректировочныеУведомления",
					ЭлементРасчета.Раздел = "СоздатьКорректировочныеУведомления");
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Фильтр);
			ЭлементРасчета.Количество = НайденныеСтроки.Количество();
			
		ИначеЕсли НазваниеТаблицы = "Уведомления" Тогда
			
			ТекстЗапросаУведомлениеОбОСтатках = ИнтерфейсыВзаимодействияБРОВызовСервера.ТекстыДляЗапросаДокументовРеализацииПолномочийНО(
				"УведомлениеОбОстаткахПрослеживаемыхТоваров", Истина);
			ТекстЗапросаУведомлениеОВвозе = ИнтерфейсыВзаимодействияБРОВызовСервера.ТекстыДляЗапросаДокументовРеализацииПолномочийНО(
				"УведомлениеОВвозеПрослеживаемыхТоваров", Истина);
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка) КАК Количество,
			|	ЕСТЬNULL(СтатусыОтправки.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ПустаяСсылка)) КАК Статус,
			|	" + ТекстЗапросаУведомлениеОбОСтатках.ПеречислениеКолонок + "
			|ПОМЕСТИТЬ ВТ_КоличествоУведомлений
			|ИЗ
			|	Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров КАК УведомлениеОбОстаткахПрослеживаемыхТоваров
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
			|		ПО УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка = СтатусыОтправки.Объект
			|	" + ТекстЗапросаУведомлениеОбОСтатках.СоединениеСДокументом + "
			|ГДЕ
			|	УведомлениеОбОстаткахПрослеживаемыхТоваров.Организация = &Организация
			|	И НАЧАЛОПЕРИОДА(УведомлениеОбОстаткахПрослеживаемыхТоваров.Дата, МЕСЯЦ) = &Период
			|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.Проведен
			|	И ЕСТЬNULL(СтатусыОтправки.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ПустаяСсылка)) В (&Статусы)
			|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.РНПТ = &ПустоеЗначениеРНПТ
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСТЬNULL(СтатусыОтправки.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ПустаяСсылка)),
			|	(ДокументыРеализацииПолномочийНалоговыхОрганов.РНПТ <> """"
			|	И ДокументыРеализацииПолномочийНалоговыхОрганов.РНПТ ЕСТЬ НЕ NULL)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			// Выбор корректировочных уведомлений об остатках 
			|	ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка),
			|	ЕСТЬNULL(СтатусыОтправки.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ПустаяСсылка)),
			|	ВЫБОР
			|		КОГДА СтатусыОтправки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.Сдан)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ
			|			ЛОЖЬ 
			|	КОНЕЦ КАК ДокументыРеализацииПолномочийНО_РНПТЗаполнен
			|ИЗ
			|	Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров КАК УведомлениеОбОстаткахПрослеживаемыхТоваров
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
			|		ПО УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка = СтатусыОтправки.Объект
			|	" + ТекстЗапросаУведомлениеОбОСтатках.СоединениеСДокументом + "
			|ГДЕ
			|	УведомлениеОбОстаткахПрослеживаемыхТоваров.Организация = &Организация
			|	И (НАЧАЛОПЕРИОДА(УведомлениеОбОстаткахПрослеживаемыхТоваров.ДатаСоздания, МЕСЯЦ) = &Период
			|		ИЛИ НАЧАЛОПЕРИОДА(УведомлениеОбОстаткахПрослеживаемыхТоваров.Дата, МЕСЯЦ) = &Период)
			|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.Проведен
			|	И ЕСТЬNULL(СтатусыОтправки.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ПустаяСсылка)) В (&СтатусыКоррУведомлений)
			|	И НЕ УведомлениеОбОстаткахПрослеживаемыхТоваров.ПолученоПодтверждениеИзФНС
			|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.РНПТ <> &ПустоеЗначениеРНПТ
			|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.НомерКорректировки > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСТЬNULL(СтатусыОтправки.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ПустаяСсылка)),
			|	ВЫБОР
			|		КОГДА СтатусыОтправки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.Сдан)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ
			|			ЛОЖЬ 
			|	КОНЕЦ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка),
			|	ЕСТЬNULL(СтатусыОтправки.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ПустаяСсылка)),
			|	(ДокументыРеализацииПолномочийНалоговыхОрганов.РНПТ <> """"
			|	И ДокументыРеализацииПолномочийНалоговыхОрганов.РНПТ ЕСТЬ НЕ NULL) КАК ДокументыРеализацииПолномочийНО_РНПТЗаполнен
			|ИЗ
			|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров КАК УведомлениеОВвозеПрослеживаемыхТоваров
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
			|		ПО УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка = СтатусыОтправки.Объект
			|	" + ТекстЗапросаУведомлениеОВвозе.СоединениеСДокументом + "
			|ГДЕ
			|	УведомлениеОВвозеПрослеживаемыхТоваров.Организация = &Организация
			|	И НАЧАЛОПЕРИОДА(УведомлениеОВвозеПрослеживаемыхТоваров.Дата, МЕСЯЦ) = &Период
			|	И УведомлениеОВвозеПрослеживаемыхТоваров.Проведен
			|	И ЕСТЬNULL(СтатусыОтправки.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ПустаяСсылка)) В (&Статусы)
			|	И УведомлениеОВвозеПрослеживаемыхТоваров.РНПТ = &ПустоеЗначениеРНПТ
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСТЬNULL(СтатусыОтправки.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ПустаяСсылка)),
			|	(ДокументыРеализацииПолномочийНалоговыхОрганов.РНПТ <> """"
			|	И ДокументыРеализацииПолномочийНалоговыхОрганов.РНПТ ЕСТЬ НЕ NULL)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			// Выбор корректировочных уведомлений о ввозе 
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка),
			|	ЕСТЬNULL(СтатусыОтправки.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ПустаяСсылка)),
			|	ВЫБОР
			|		КОГДА СтатусыОтправки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.Сдан)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ
			|			ЛОЖЬ 
			|	КОНЕЦ КАК ДокументыРеализацииПолномочийНО_РНПТЗаполнен
			|ИЗ
			|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров КАК УведомлениеОВвозеПрослеживаемыхТоваров
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
			|		ПО УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка = СтатусыОтправки.Объект
			|	" + ТекстЗапросаУведомлениеОВвозе.СоединениеСДокументом + "
			|ГДЕ
			|	УведомлениеОВвозеПрослеживаемыхТоваров.Организация = &Организация
			|	И НАЧАЛОПЕРИОДА(УведомлениеОВвозеПрослеживаемыхТоваров.Дата, МЕСЯЦ) = &Период
			|	И УведомлениеОВвозеПрослеживаемыхТоваров.Проведен
			|	И ЕСТЬNULL(СтатусыОтправки.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ПустаяСсылка)) В (&СтатусыКоррУведомлений)
			|	И УведомлениеОВвозеПрослеживаемыхТоваров.РНПТ <> &ПустоеЗначениеРНПТ
			|	И НЕ УведомлениеОВвозеПрослеживаемыхТоваров.ПолученоПодтверждениеИзФНС
			|	И УведомлениеОВвозеПрослеживаемыхТоваров.НомерКорректировки > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСТЬNULL(СтатусыОтправки.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ПустаяСсылка)),
			|	ВЫБОР
			|		КОГДА СтатусыОтправки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.Сдан)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ
			|			ЛОЖЬ 
			|	КОНЕЦ
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(ВТ_КоличествоУведомлений.Количество) КАК Количество,
			|	ВТ_КоличествоУведомлений.Статус КАК Статус
			|ИЗ
			|	ВТ_КоличествоУведомлений КАК ВТ_КоличествоУведомлений
			|
			|ГДЕ
			|	ВТ_КоличествоУведомлений.ДокументыРеализацииПолномочийНО_РНПТЗаполнен = &ОпределитьНаличиеРНПТ
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_КоличествоУведомлений.Статус";
			
			Запрос.УстановитьПараметр("Организация", Объект.Организация);
			Запрос.УстановитьПараметр("Период", Объект.Период);
			Запрос.УстановитьПараметр("ПустоеЗначениеРНПТ", ПрослеживаемостьПереопределяемый.ПустоеЗначениеРНПТ());
			Запрос.УстановитьПараметр("Статусы", ОпределитьСтатус(ЭлементРасчета.Раздел));
			Запрос.УстановитьПараметр("СтатусыКоррУведомлений", ОпределитьСтатусКоррУведомлений(ЭлементРасчета.Раздел));
			Запрос.УстановитьПараметр("ОпределитьНаличиеРНПТ", ОпределитьНаличиеРНПТ(ЭлементРасчета.Раздел));
			ТаблицаДанных = Запрос.Выполнить().Выгрузить();
			
			ЭлементРасчета.Количество = 0;
			Если ТаблицаДанных.Количество() > 0 Тогда
				ЭлементРасчета.Количество = ТаблицаДанных[0].Количество;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьНаличиеРНПТ(Раздел)
	
	Если Раздел = "ЗаписатьПолученныеРНПТ" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ОпределитьСтатус(Раздел)
	
	МассивСтатусов = Новый Массив;
	
	Если Раздел = "ОтправитьУведомлениявФНС" Тогда
		
		МассивСтатусов.Добавить(Перечисления.СтатусыОтправки.ПустаяСсылка());
		
	ИначеЕсли Раздел = "ОжиданиеОтветаОтФНС" Тогда
		
		МассивСтатусов.Добавить(Перечисления.СтатусыОтправки.Доставлен);
		МассивСтатусов.Добавить(Перечисления.СтатусыОтправки.Отправлен);
		МассивСтатусов.Добавить(Перечисления.СтатусыОтправки.Сдан);
		
	ИначеЕсли Раздел = "ЗаписатьПолученныеРНПТ" Тогда
		
		МассивСтатусов.Добавить(Перечисления.СтатусыОтправки.Сдан);
		
	Иначе
		
		МассивСтатусов.Добавить(Перечисления.СтатусыОтправки.ПустаяСсылка());
		
	КонецЕсли;
	
	Возврат МассивСтатусов;
	
КонецФункции

&НаСервере
Функция ОпределитьСтатусКоррУведомлений(Раздел)
	
	МассивСтатусов = Новый Массив;
	
	Если Раздел = "ОтправитьУведомлениявФНС" Тогда
		
		МассивСтатусов.Добавить(Перечисления.СтатусыОтправки.ПустаяСсылка());
		
	ИначеЕсли Раздел = "ОжиданиеОтветаОтФНС" Тогда
		
		МассивСтатусов.Добавить(Перечисления.СтатусыОтправки.Доставлен);
		МассивСтатусов.Добавить(Перечисления.СтатусыОтправки.Отправлен);
		
	ИначеЕсли Раздел = "ЗаписатьПолученныеРНПТ" Тогда
		
		МассивСтатусов.Добавить(Перечисления.СтатусыОтправки.Сдан);
		
	Иначе
		
		МассивСтатусов.Добавить(Перечисления.СтатусыОтправки.ПустаяСсылка());
		
	КонецЕсли;
	
	Возврат МассивСтатусов;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеПомощника(ВыводитьОкноОжидания = Ложь, ОбновитьНачальныеДанные = Истина)
	
	Элементы.Уведомления.Обновить();
	Элементы.ТоварыПоУведомлениям.Обновить();
	
	Если Не ОбновитьНачальныеДанные Тогда
		Возврат;
	КонецЕсли;
	
	ЗапущенноОбновлениеДанных = Истина;
	Если Не ВыводитьОкноОжидания Тогда
		
		ОбновитьТекстОжиданияВыполненияДействия();
		
	Иначе
		
		ОбновитьСтатусФоновогоЗадания();
		
	КонецЕсли;
	
	ДлительнаяОперация = ВыполнитьПолучениеДанныхНаСервере();
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
		НастройкиОжидания.ТекстСообщения = НСтр("ru='Выполняется получение данных'");
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияДанных", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	Иначе
		
		ПоказатьОшибкуПолученияДанных(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияДанных(ДлительнаяОперация, ДополнительныеПараметры) Экспорт

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ЗапущенноОбновлениеДанных = Ложь;
		ДанныеПолучены = Истина;
		
		ЗагрузитьДанныеВПомощник(ДлительнаяОперация.АдресРезультата);
		
		УстановитьТекущуюСтраницу(ЭтотОбъект);
		
		ОбновитьНавигациюПоРазделамНаСервере(Истина);
		
		ПоказатьКомандыРаздела(ТекущийШаг);
		
		ПерейтиНаСледующийАктуальныйШаг();
		
	Иначе
		ПоказатьОшибкуПолученияДанных(ДлительнаяОперация);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеВПомощник(АдресРезультата)
	
	ТаблицаНачальныеДанные = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Объект.НачальныеДанные.Очистить();
	
	Если НЕ ЗначениеЗаполнено(ТаблицаНачальныеДанные) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ТаблицаНачальныеДанные Цикл
		НоваяСтрока = Объект.НачальныеДанные.Добавить();
		ЗаполнитьЗначениЯСвойств(НоваяСтрока, ТекущаяСтрока);
		
		НоваяСтрока.Состав = ?(НЕ ТекущаяСтрока.ЕстьСостав, "",
			ПрослеживаемостьВызовСервера.ТекстСоставаТоваровВСоставеОС(ТекущаяСтрока.КоличествоСоставныхОбъектовВОС));
			
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Основание) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.ПредставлениеОснование = ТекстДокументаДляПредставления(НоваяСтрока.Основание);
		НоваяСтрока.ЭтоНовыйДокумент = СозданныеПервичныеДокументы.НайтиПоЗначению(НоваяСтрока.Основание) <> Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстДокументаДляПредставления(Документ, ЭтоДокументОснования = Ложь)
	
	Возврат ПрослеживаемостьПереопределяемый.ПредставлениеДокумента(Документ, ЭтоДокументОснования);
	
КонецФункции
	
&НаСервере
Функция ВыполнитьПолучениеДанныхНаСервере()
	
	ПараметрыОбработчика = ПараметрыПолученияДанных();
	НастройкаЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкаЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение начальных данных из помощника получения РНПТ'");
	НастройкаЗапуска.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Обработки.ПомощникПолученияРНПТ.ДанныеЗаполненияПомощникаПолученияРНПТ",
		ПараметрыОбработчика,
		НастройкаЗапуска);

	Возврат ДлительнаяОперация;
		
КонецФункции

&НаСервере
Функция ПараметрыПолученияДанных()
	
	ПараметрыПолучения = Новый Структура();
	ПараметрыПолучения.Вставить("Период", Объект.Период);
	ПараметрыПолучения.Вставить("Организация", Объект.Организация);
	
	Возврат ПараметрыПолучения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСледующийАктуальныйШаг()
	
	ОбновлятьШагВсегда = Ложь;
	
	Если ТекущийШаг = "" Тогда
		
		ТекущийШаг = "ПровестиИнвентаризацию";
		ОбновлятьШагВсегда = Истина;
		
	КонецЕсли;
	
	НайденныеСтроки = ОписаниеРазделов.НайтиСтроки(Новый Структура("Имя", ТекущийШаг));
	НаТекущемШагеЕстьДанные = Ложь;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		НаТекущемШагеЕстьДанные = НайденныеСтроки[0].Количество > 0 И НайденныеСтроки[0].Видимость;
		ТекущаяСтрока = НайденныеСтроки[0].НомерСтроки;
		
		// На последнем шаге не переключаем на другие шаги
		Если ЭтоПоследнийШаг(ТекущаяСтрока, ОписаниеРазделов) Тогда
			НаТекущемШагеЕстьДанные = Истина;
		КонецЕсли;
	Иначе
		ТекущаяСтрока = 0;
	КонецЕсли;
	
	Если Не НаТекущемШагеЕстьДанные Тогда
		
		НомерТекущейСтроки = НомерШагаСЗаполненнымиДанными(ОписаниеРазделов, ТекущаяСтрока);
		
		// Если с текущего номера шага не нашли шаг с данными, то попробуем поискать с начала самого
		Если НомерТекущейСтроки = Неопределено Тогда
			НомерТекущейСтроки = НомерШагаСЗаполненнымиДанными(ОписаниеРазделов, 0);
			Если НомерТекущейСтроки = Неопределено Тогда
				НомерТекущейСтроки = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если НомерТекущейСтроки <> Неопределено Тогда
			НайденныеСтроки = ОписаниеРазделов.НайтиСтроки(Новый Структура("НомерСтроки", НомерТекущейСтроки));
			
			НовыйШаг = НайденныеСтроки[0].Имя;
			Если НовыйШаг <> ТекущийШаг 
				ИЛИ ОбновлятьШагВсегда Тогда
				
				ПредыдущаяГиперссылка = ТекущийРазделФормы(ЭтотОбъект);
				ТекущаяГиперссылка    = Элементы[НовыйШаг];
				
				ПриПереключенииРазделаСервер(ПредыдущаяГиперссылка.Имя, ТекущаяГиперссылка.Имя);
				
				ПриИзмененииРаздела(НовыйШаг);
				
				Если ТекущийШаг = "ОжиданиеОтветаОтФНС" Тогда
					ПросмотренШагОжиданиеОтветаОтФНС = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ПредыдущаяГиперссылка = ТекущийРазделФормы(ЭтотОбъект);
		ТекущаяГиперссылка    = Элементы[ТекущийШаг];
		ПриПереключенииРазделаСервер(ПредыдущаяГиперссылка.Имя, ТекущаяГиперссылка.Имя);
		ПриИзмененииРаздела(ТекущийШаг);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПоследнийШаг(ТекущаяСтрока, ОписаниеРазделов)
	
	Количество = ОписаниеРазделов.Количество();
	
	НомерПоследнегоШага = ОписаниеРазделов[Количество-1].НомерСтроки;
	
	Возврат ТекущаяСтрока = НомерПоследнегоШага;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерШагаСЗаполненнымиДанными(ОписаниеРазделов, ТекущаяСтрока)

	ТекущиеДанные = ОписаниеРазделов[ТекущаяСтрока];
	Если ТекущиеДанные.Количество = 0 ИЛИ Не ТекущиеДанные.Видимость Тогда
		
		КоличествоРазделов = ОписаниеРазделов.Количество()-1;
		Если КоличествоРазделов = ТекущаяСтрока Тогда 
			Возврат Неопределено;
		Иначе
			ТекущаяСтрока = ТекущаяСтрока + 1;
			ТекущаяСтрока = НомерШагаСЗаполненнымиДанными(ОписаниеРазделов, ТекущаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекущаяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОшибкуПолученияДанных(ДлительнаяОперация)
	
	МассивИзДвухСтрок = Новый Массив;
	МассивИзДвухСтрок.Добавить(НСтр("ru = 'Ошибка при получении данных:'"));
	МассивИзДвухСтрок.Добавить(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	
	ВызватьИсключение СтрСоединить(МассивИзДвухСтрок, Символы.ПС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьПодразделы(Раздел)
	
	СписокРазделовСПодразделами = Новый СписокЗначений;
	СписокРазделовСПодразделами.Добавить("ПровестиИнвентаризацию");
	СписокРазделовСПодразделами.Добавить("СоздатьУведомления");
	СписокРазделовСПодразделами.Добавить("СоздатьКорректировочныеУведомления");
	
	Возврат СписокРазделовСПодразделами.НайтиПоЗначению(Раздел) <> Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПодразделаПоТекущейСтранице(ТекущаяСтраница)

	СоответствиеПодразделов  = Новый Соответствие;
	СоответствиеПодразделов.Вставить("СтраницаТовары", "Товары");
	СоответствиеПодразделов.Вставить("СтраницаОС", "ОсновныеСредства");
	
	Возврат СоответствиеПодразделов[ТекущаяСтраница];
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииРаздела(Знач НовыйРаздел)
	
	ЕстьПодраздел = ЕстьПодразделы(НовыйРаздел);
	
	Если ЕстьПодраздел Тогда
		Подраздел = ИмяПодразделаПоТекущейСтранице(Элементы.НачальныеДанные.ТекущаяСтраница.Имя);
	Иначе
		Подраздел = "";
	КонецЕсли;
	
	ПоказатьРаздел(НовыйРаздел, Подраздел);
	ОбновитьТаблицуТоварыПоУведомлениям();
	
	Для Каждого Раздел Из ОписаниеРазделов Цикл
		Если НовыйРаздел <> Раздел.Имя Тогда
			Продолжить;
		КонецЕсли;
			
		Если Не Раздел.ЭтоПодраздел Тогда 
				Продолжить; 
		КонецЕсли;
		
		ФильтрПоПодразделам = Новый Структура("Имя,ИмяПодраздела");
		ФильтрПоПодразделам.Имя = Раздел.Имя;
		ФильтрПоПодразделам.ИмяПодраздела = Раздел.ИмяПодраздела;
		
		СтрокиПоПодразделам = ОписаниеРазделов.НайтиСтроки(ФильтрПоПодразделам);
		
		Если СтрокиПоПодразделам.Количество() > 0 Тогда
			
			Для Каждого Подраздел Из СтрокиПоПодразделам Цикл
				
				Если Подраздел.Количество = 0 Тогда
					ПредставлениеПодраздела = Подраздел.ПредставлениеПодраздела;
				Иначе
					ПредставлениеПодраздела = Подраздел.ПредставлениеПодраздела + " (" + Подраздел.Количество + ")";
				КонецЕсли;
				
				Элементы["Страница" + Подраздел.ИмяПодраздела].Заголовок = ПредставлениеПодраздела;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьРаздел(Знач Раздел, Знач Подраздел = "")
	
	ТекущийШаг = Раздел;
	ТекущийПодраздел = Подраздел;
	
	ПоказатьКомандыРаздела(Раздел);
	ПоказатьСписокРаздела(Раздел, ТекущийПодраздел);
	ПоказатьОписаниеРаздела(Раздел);
	
КонецПроцедуры

&НаСервере 
Процедура ПоказатьОписаниеРаздела(Раздел)
	
	ОписаниеШага = ПолучитьОписаниеШага(Раздел);
	
	ОписаниеПодсказкиШага = ОписаниеШага.Подсказка;
	Элементы.ОписаниеПодсказкиШага.МаксимальнаяВысота = ОписаниеШага.ВысотаПодсказки;
	
КонецПроцедуры 

&НаСервере
Процедура ПоказатьСписокРаздела(Знач Раздел, Знач Подраздел = "")
	
	ПоказатьСтраницуРаздела(Раздел);
	
	ПоказатьПоляРаздела(Раздел, Подраздел);
	
	ПрименитьОтборыКРазделу(Раздел, Подраздел);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьОтборыКРазделу(Знач Раздел, Знач Подраздел = "")
	
	ИмяСписка = СписокРаздела(Раздел);
	
	Если ИмяСписка = "НачальныеДанные" Тогда
		
		ИмяТекущейСтраницы = Элементы[ИмяСписка].ТекущаяСтраница.Имя;
		
		СписокЭлемент = ЭтотОбъект.Элементы[ИмяСпискаПоТекущейСтраницеНачальныеДанные(ИмяТекущейСтраницы)];
		
		СписокОбъект = Неопределено;
		
	Иначе
	
		СписокЭлемент = ЭтотОбъект.Элементы[ИмяСписка];
		
		СписокОбъект = ЭтотОбъект[ИмяСписка];
		
	КонецЕсли;
	
	ПрименитьОтборыКСпискуРаздела(Раздел, СписокЭлемент, СписокОбъект, Подраздел);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяСпискаПоТекущейСтраницеНачальныеДанные(ИмяСписка)
	
	СтраницыГруппыНачальныеДанные = Новый Соответствие;
	СтраницыГруппыНачальныеДанные.Вставить("СтраницаТовары", "НачальныеДанныеТоваров");
	СтраницыГруппыНачальныеДанные.Вставить("СтраницаОС", "НачальныеДанныеОС");

	Возврат СтраницыГруппыНачальныеДанные.Получить(ИмяСписка);
	
КонецФункции

&НаСервере
Процедура ПрименитьОтборыКСпискуРаздела(Знач Раздел, Список, СписокОбъект = Неопределено, Подраздел)
	
	УстановитьОтборПоРазделу(Раздел, Список, СписокОбъект, Подраздел);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьОтборПоРазделу(Знач Раздел, Список, СписокОбъект = Неопределено, Подраздел = "")
	
	Если Раздел = "ПровестиИнвентаризацию" И Подраздел = "Товары" Тогда
		Список.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьПервичныйДокумент,ЭтоОС", Ложь, Ложь);
	ИначеЕсли Раздел = "ПровестиИнвентаризацию" И Подраздел = "ОсновныеСредства" Тогда
		Список.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьПервичныйДокумент,ЭтоОС", Ложь, Истина);
	ИначеЕсли Раздел = "СоздатьУведомления" И Подраздел = "Товары" Тогда
		Список.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьПервичныйДокумент,ЕстьРНПТ,ЭтоОС", Истина, Ложь, Ложь);
	ИначеЕсли Раздел = "СоздатьУведомления" И Подраздел = "ОсновныеСредства" Тогда
		Список.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьПервичныйДокумент,ЕстьРНПТ,ЭтоОС", Истина, Ложь, Истина);
	ИначеЕсли Раздел = "СоздатьКорректировочныеУведомления" Тогда
		Список.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьПервичныйДокумент,ЕстьРНПТ", Истина,Истина);
		
	Иначе
		
		ГруппаОтборПоРазделам = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(СписокОбъект.Отбор.Элементы, "ОтборПоРазделам");
		Если ГруппаОтборПоРазделам = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Включаем использование группы отбора, соответствующей разделу.
		РазделНайден = Ложь;
		Для Каждого ГруппаРаздела Из ГруппаОтборПоРазделам.Элементы Цикл
			
			Если ГруппаРаздела.Представление = "Раздел" + Раздел Тогда
				ГруппаРаздела.Использование = Истина;
				РазделНайден = Истина;
			Иначе
				ГруппаРаздела.Использование = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		// Если не удалось найти группу раздела, то включаем все разделы.
		Если Не РазделНайден Тогда
			Для Каждого ГруппаРаздела Из ГруппаОтборПоРазделам.Элементы Цикл
				ГруппаРаздела.Использование = Истина;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭлементыОтбора(Знач Отбор)
	
	НайденныеЭлементы = Новый Массив;
	
	Если Отбор = Неопределено Тогда
		Возврат НайденныеЭлементы;
	КонецЕсли;
	
	Для Каждого Элемент Из Отбор.Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			НайденныеЭлементыГруппы = ЭлементыОтбора(Элемент);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НайденныеЭлементы, НайденныеЭлементыГруппы);
			
		Иначе
			
			НайденныеЭлементы.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныеЭлементы;
	
КонецФункции

&НаСервере 
Процедура ПоказатьПоляРаздела(Знач Раздел, Знач Подраздел = "")
	
	ИмяТаблицы = ТаблицаРаздела(Раздел) + ПрефиксПодраздела(Подраздел);
	
	Если Не ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	ПоляТаблицы = ПоляРаздела(Раздел, Подраздел);
	
	Для Каждого Поле Из ПоляТаблицы Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, ИмяТаблицы + Поле.Ключ, "Видимость", Поле.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоляРаздела(Знач Раздел, Знач Подраздел = "")
	
	ПоляТаблицы = "";
	ПоляРаздела = "";
	
	Если Раздел = "ПровестиИнвентаризацию" И Подраздел = "Товары" Тогда
		
		ПоляТаблицы = "ПредставлениеОснование,Склад,Номенклатура,ОсновноеСредство,ТНВЭД,ЕдиницаИзмерения,Количество,Сумма,КоличествоУменьшение,СуммаУменьшение,КоличествоУвеличение,СуммаУвеличение,РНПТ,ПервичноеУведомление";
		ПоляРаздела = "Склад,Номенклатура,ТНВЭД,ЕдиницаИзмерения,Количество";

	ИначеЕсли Раздел = "ПровестиИнвентаризацию" И Подраздел = "ОсновныеСредства" Тогда
		
		ПоляТаблицы = "ПредставлениеОснование,ОсновноеСредство,Сумма,ЕстьСостав,Состав";
		ПоляРаздела = "ОсновноеСредство,ЕстьСостав,Состав,Сумма";
		
	ИначеЕсли Раздел = "СоздатьУведомления" Тогда
		
		ПоляТаблицы = "ПредставлениеОснование,Склад,Номенклатура,ТНВЭД,ЕдиницаИзмерения,Количество,Сумма,КоличествоУменьшение,СуммаУменьшение,КоличествоУвеличение,СуммаУвеличение,РНПТ,ПервичноеУведомление";
		ПоляРаздела = "ПредставлениеОснование,Номенклатура,ТНВЭД,ЕдиницаИзмерения,Количество,Сумма";
		
	ИначеЕсли Раздел = "СоздатьКорректировочныеУведомления" Тогда
		
		ПоляТаблицы = "ПредставлениеОснование,Склад,Номенклатура,ТНВЭД,ЕдиницаИзмерения,Количество,Сумма,КоличествоУменьшение,КоличествоУвеличение,СуммаУменьшение,СуммаУвеличение,РНПТ,ПервичноеУведомление";
		ПоляРаздела = "ПредставлениеОснование,Номенклатура,ТНВЭД,ЕдиницаИзмерения,КоличествоУменьшение,КоличествоУвеличение,СуммаУменьшение,СуммаУвеличение,,РНПТ";
		
	ИначеЕсли Раздел = "ОтправитьУведомлениявФНС" 
		ИЛИ Раздел = "ОтправитьУведомлениявФНС" Тогда
		
		ПоляТаблицы = "Статус,ДатаОтправки,ПредставлениеОснование,ПредставлениеУведомление,ТНВЭД,ПредставлениеРНПТ,ЕдиницаИзмерения";
		ПоляРаздела = "ПредставлениеОснование,ПредставлениеУведомление,ТНВЭД, ЕдиницаИзмерения";
		
	ИначеЕсли Раздел = "ОжиданиеОтветаОтФНС" Тогда
		
		ПоляТаблицы = "Статус,ДатаОтправки,ПредставлениеОснование,ПредставлениеУведомление,ТНВЭД,ПредставлениеРНПТ,ЕдиницаИзмерения";
		ПоляРаздела = "Статус,ДатаОтправки,ПредставлениеУведомление,ТНВЭД, ЕдиницаИзмерения";
		
	ИначеЕсли Раздел = "ЗаписатьПолученныеРНПТ" Тогда
		
		ПоляТаблицы = "Статус,ДатаОтправки,ПредставлениеОснование,ПредставлениеУведомление,ТНВЭД,ПредставлениеРНПТ,ЕдиницаИзмерения";
		ПоляРаздела = "ПредставлениеОснование,ПредставлениеУведомление,ТНВЭД,ПредставлениеРНПТ";
		
	КонецЕсли;
	
	ПоляТаблицы = СтрЗаменить(ПоляТаблицы, " ", "");
	ПоляРаздела = СтрЗаменить(ПоляРаздела, " ", "");
	
	МассивПолеТаблицы = СтрРазделить(ПоляТаблицы, ",", Ложь);
	МассивПолейРаздела = СтрРазделить(ПоляРаздела, ",", Ложь);
	
	ВидимостьПолей = Новый Соответствие;
	Для Каждого Поле Из МассивПолеТаблицы Цикл
		
		Видимость = (МассивПолейРаздела.Найти(Поле) <> Неопределено);
		ВидимостьПолей.Вставить(Поле, Видимость);
		
	КонецЦикла;
	
	Возврат ВидимостьПолей;
	
КонецФункции

&НаСервере 
Процедура ПоказатьСтраницуРаздела(Знач Раздел) 
	
	ИмяСтраницы = СтраницаРаздела(Раздел);
	
	Если ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Элементы.ПанельСписков.ТекущаяСтраница = Элементы[ИмяСтраницы];
		
		Если Раздел = "СоздатьКорректировочныеУведомления" Тогда
			Элементы.НачальныеДанные.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			Элементы.НачальныеДанные.ТекущаяСтраница = Элементы.СтраницаТовары;
		Иначе
			
			ПрослеживаемостьПереопределяемый.ОтображениеСтраницФормыПомощникаРНПТ(Элементы.НачальныеДанные.ОтображениеСтраниц);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтраницаРаздела(Знач Раздел)
	
	Страница = Неопределено;
	
	СтраницыРазделов = Новый Соответствие;
	СтраницыРазделов.Вставить("ПровестиИнвентаризацию", "НачальныеДанные");
	СтраницыРазделов.Вставить("СоздатьУведомления", "НачальныеДанные");
	СтраницыРазделов.Вставить("СоздатьКорректировочныеУведомления", "НачальныеДанные");
	СтраницыРазделов.Вставить("ОтправитьУведомлениявФНС", "Уведомления");
	СтраницыРазделов.Вставить("ОжиданиеОтветаОтФНС", "Уведомления");
	СтраницыРазделов.Вставить("ЗаписатьПолученныеРНПТ", "Уведомления");

	Страница = СтраницыРазделов.Получить(Раздел);

	Если ЗначениеЗаполнено(Страница) Тогда
		Страница = "Страница" + СтраницыРазделов.Получить(Раздел);
	КонецЕсли;
	
	Возврат Страница;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицаРаздела(Знач Раздел)
	
	ТаблицыРазделов = Новый Соответствие;
	ТаблицыРазделов.Вставить("ПровестиИнвентаризацию", "НачальныеДанные");
	ТаблицыРазделов.Вставить("СоздатьУведомления", "НачальныеДанные");
	ТаблицыРазделов.Вставить("СоздатьКорректировочныеУведомления", "НачальныеДанные");
	ТаблицыРазделов.Вставить("ОтправитьУведомлениявФНС", "Уведомления");
	ТаблицыРазделов.Вставить("ОжиданиеОтветаОтФНС", "Уведомления");
	ТаблицыРазделов.Вставить("ЗаписатьПолученныеРНПТ", "Уведомления");
	
	Таблица = ТаблицыРазделов.Получить(Раздел);
	
	Возврат Таблица;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрефиксПодраздела(Знач Подраздел)
	
	Если НЕ ЗначениеЗаполнено(Подраздел) Тогда
		Возврат "";
	КонецЕсли;
	
	ПрефиксыПодразделов = Новый Соответствие;
	ПрефиксыПодразделов.Вставить("Товары", "Товаров");
	ПрефиксыПодразделов.Вставить("ОсновныеСредства", "ОС");
	
	Префикс = ПрефиксыПодразделов.Получить(Подраздел);
	
	Возврат Префикс;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокРаздела(Знач Раздел)
	
	СпискиРазделов = Новый Соответствие;
	СпискиРазделов.Вставить("ПровестиИнвентаризацию", "НачальныеДанные");
	СпискиРазделов.Вставить("СоздатьУведомления", "НачальныеДанные");
	СпискиРазделов.Вставить("СоздатьКорректировочныеУведомления", "НачальныеДанные");
	СпискиРазделов.Вставить("ОтправитьУведомлениявФНС", "Уведомления");
	СпискиРазделов.Вставить("ОжиданиеОтветаОтФНС", "Уведомления");
	СпискиРазделов.Вставить("ЗаписатьПолученныеРНПТ", "Уведомления");
	
	Список = СпискиРазделов.Получить(Раздел);
	
	Возврат Список;
	
КонецФункции

Функция ПолучитьКомандыРазделов()
	
	КомандыРазделов = Новый Соответствие;
	КомандыРазделов.Вставить("ПровестиИнвентаризациюТовары", "Обновить,СоздатьИнвентаризацииТоваров,ПоискНачальныеДанные,ОтменитьПоискНачальныеДанные");
	КомандыРазделов.Вставить("ПровестиИнвентаризациюОС", "Обновить,СоздатьИнвентаризацииОС,ПоискНачальныеДанные,ОтменитьПоискНачальныеДанные");
	КомандыРазделов.Вставить("СоздатьУведомленияТовары", "Обновить,СоздатьУведомленияПоТоварам,ПоискНачальныеДанные,ОтменитьПоискНачальныеДанные");
	КомандыРазделов.Вставить("СоздатьУведомленияОС", "Обновить,СоздатьУведомленияПоОС,ПоискНачальныеДанные,ОтменитьПоискНачальныеДанные");
	КомандыРазделов.Вставить("СоздатьКорректировочныеУведомления", "Обновить,СоздатьКорректировочныеУведомления,ПоискНачальныеДанные,ОтменитьПоискНачальныеДанные");
	КомандыРазделов.Вставить("ОтправитьУведомлениявФНС", "Обновить,ОтправитьВФНС,ПоискУведомления,ОтменитьПоискУведомления");
	КомандыРазделов.Вставить("ОжиданиеОтветаОтФНС", "Обновить,ПолучитьОтветОтФНС,ПоискУведомления,ОтменитьПоискУведомления");
	КомандыРазделов.Вставить("ЗаписатьПолученныеРНПТ", "Обновить,ЗаписатьРНПТ,ОткрытьЖурналУведомлений,ПоискУведомления,ОтменитьПоискУведомления");
	
	Возврат КомандыРазделов;
	
КонецФункции

&НаСервере
Процедура ПоказатьКомандыРаздела(Знач Раздел)
	
	КомандыРазделов = ПолучитьКомандыРазделов();
		
	ЭлементыКоманд = Новый Соответствие;
	ЭлементыКоманд.Вставить("Обновить", Элементы.КомандаОбновить);
	ЭлементыКоманд.Вставить("СоздатьУведомленияПоТоварам", Элементы.КомандаСоздатьУведомленияПоТоварам);
	ЭлементыКоманд.Вставить("СоздатьУведомленияПоОС", Элементы.КомандаСоздатьУведомленияПоОС);
	ЭлементыКоманд.Вставить("СоздатьКорректировочныеУведомления", Элементы.КомандаСоздатьКорректировочныеУведомления);
	ЭлементыКоманд.Вставить("ОтправитьВФНС", Элементы.КомандаОтправитьВФНС);
	ЭлементыКоманд.Вставить("ПолучитьОтветОтФНС", Элементы.КомандаПолучитьОтветОтФНС);
	ЭлементыКоманд.Вставить("ЗаписатьРНПТ", Элементы.КомандаЗаписатьРНПТ);
	ЭлементыКоманд.Вставить("ОткрытьЖурналУведомлений", Элементы.КомандаОткрытьЖурналУведомлений);
	ЭлементыКоманд.Вставить("СоздатьИнвентаризацииТоваров", Элементы.КомандаСоздатьИнвентаризацииТоваров);
	ЭлементыКоманд.Вставить("СоздатьИнвентаризацииОС", Элементы.КомандаСоздатьИнвентаризацииОС);
	ЭлементыКоманд.Вставить("ПоискУведомления", Элементы.ПоискУведомления);
	ЭлементыКоманд.Вставить("ОтменитьПоискУведомления", Элементы.ОтменитьПоискУведомления);
	ЭлементыКоманд.Вставить("ПоискНачальныеДанные", Элементы.ПоискНачальныеДанные);
	ЭлементыКоманд.Вставить("ОтменитьПоискНачальныеДанные", Элементы.ОтменитьПоискНачальныеДанные);
	
	КомандыСОжиданиемДействия = Новый Соответствие;
	КомандыСОжиданиемДействия.Вставить("СоздатьУведомленияПоТоварам",    "ЗапущеноСозданиеУведомленийПоТоварам");
	КомандыСОжиданиемДействия.Вставить("СоздатьУведомленияПоОС",    "ЗапущеноСозданиеУведомленийПоОС");
	КомандыСОжиданиемДействия.Вставить("СоздатьКорректировочныеУведомления",    "ЗапущеноСозданиеКорректировочныхУведомлений");
	КомандыСОжиданиемДействия.Вставить("ОтправитьВФНС",         "ЗапущеноОтправлениеУведомленийВФНС");
	КомандыСОжиданиемДействия.Вставить("ЗаписатьРНПТ",          "ЗапущеноЗаписываниеПолученныхРНПТ");
	КомандыСОжиданиемДействия.Вставить("СоздатьИнвентаризацииТоваров", "ЗапущеноСозданиеИнвентаризацийТоваров");
	КомандыСОжиданиемДействия.Вставить("СоздатьИнвентаризацииОС", "ЗапущеноСозданиеИнвентаризацийОС");
	
	КомандыПоУмолчанию = Новый Соответствие;
	КомандыПоУмолчанию.Вставить("СоздатьУведомленияПоТоварам",        "СоздатьУведомленияПоТоварам");
	КомандыПоУмолчанию.Вставить("СоздатьУведомленияПоОС",             "СоздатьУведомленияПоОС");
	КомандыПоУмолчанию.Вставить("СоздатьКорректировочныеУведомления", "СоздатьКорректировочныеУведомления");
	КомандыПоУмолчанию.Вставить("ОтправитьВФНС",                      "ОтправитьВФНС");
	КомандыПоУмолчанию.Вставить("ПолучитьОтветОтФНС",                 "ПолучитьОтветОтФНС");
	КомандыПоУмолчанию.Вставить("ЗаписатьРНПТ",                       "ЗаписатьРНПТ");
	КомандыПоУмолчанию.Вставить("СоздатьИнвентаризацииТоваров",       "СоздатьИнвентаризацииТоваров");
	КомандыПоУмолчанию.Вставить("СоздатьИнвентаризацииОС",            "СоздатьИнвентаризацииОС");
	
	СвязанныеКоманды = Новый Соответствие();
	СвязанныеКоманды.Вставить("КомандаЗаписатьРНПТ", "КомандаОткрытьЖурналУведомлений");
	
	Если Раздел = "ПровестиИнвентаризацию" 
		ИЛИ Раздел = "СоздатьУведомления" Тогда
		
		Раздел = СтрЗаменить(Элементы.НачальныеДанные.ТекущаяСтраница.Имя,"Страница", Раздел);
		
		НазваниеГруппаОжиданиеВыполненияДействия = "ГруппаОжиданиеВыполненияДействия" 
			+ ?(Элементы.НачальныеДанные.ТекущаяСтраница.Имя = "СтраницаОС", "ОС", "Товары");
		
	Иначе
		
		НазваниеГруппаОжиданиеВыполненияДействия = "ГруппаОжиданиеВыполненияДействия";
		
	КонецЕсли;
	
	КомандыРаздела = КомандыРазделов.Получить(Раздел);
	
	Элементы[НазваниеГруппаОжиданиеВыполненияДействия].Видимость = Ложь;
	
	Для Каждого КлючЗначение Из ЭлементыКоманд Цикл
		
		ИмяКоманды = КлючЗначение.Ключ;
		ЭлементФормы = КлючЗначение.Значение;
		
		ЕстьКоманда = (СтрНайти(КомандыРаздела, ИмяКоманды) > 0);
		КомандаДоступна = (НедоступныеКоманды.НайтиПоЗначению(ИмяКоманды) = Неопределено);
		
		КомандаПоУмолчанию = КомандыПоУмолчанию.Получить(ИмяКоманды) <> Неопределено;
		
		ЗапущеноОжиданиеДействия = Ложь;
		
		Если ЕстьКоманда И КомандаДоступна Тогда
			
			ИмяПризнакаОжиданияДействия = КомандыСОжиданиемДействия.Получить(ИмяКоманды);
			
			Если ИмяПризнакаОжиданияДействия <> Неопределено Тогда
				
				ЗапущеноОжиданиеДействия = ЭтотОбъект[ИмяПризнакаОжиданияДействия];
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗапущеноОжиданиеДействия Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, НазваниеГруппаОжиданиеВыполненияДействия, "Видимость", ЕстьКоманда);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			ОбновитьТекстОжиданияВыполненияДействия();
			УстановитьРежимВидимостиСвязанныхКоманд(ЭлементФормы.Имя, СвязанныеКоманды, Ложь);
			
			Если ИмяКоманды = "ПолучитьОтветОтФНС" Тогда
				
				Элементы.ДекорацияОжиданияВыполненияДействияТовары.Видимость = Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, ЭлементФормы.Имя, "Видимость", ЕстьКоманда);
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, ЭлементФормы.Имя, "Доступность", КомандаДоступна);
				
			Если ТипЗНЧ(Элементы[ЭлементФормы.Имя]) = Тип("КнопкаФормы")
					И КомандаПоУмолчанию Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, ЭлементФормы.Имя, "КнопкаПоУмолчанию", ЕстьКоманда И КомандаДоступна);
			КонецЕсли;
				
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимВидимостиСвязанныхКоманд(ИмяЭлемента, СвязанныеКоманды, ВидимостьКоманды);
		
	СвязанныеКомандыСтрока = СвязанныеКоманды.Получить(ИмяЭлемента);
	МассивСвязанныхКоманд = СтрРазделить(СвязанныеКомандыСтрока, ",", Ложь);
			
	Для Каждого ИмяСвязаннойКоманды Из МассивСвязанныхКоманд Цикл
				
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, ИмяСвязаннойКоманды, "Видимость", ВидимостьКоманды);
				
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстОжиданияВыполненияДействия()
	
	ЧастиТекста = Новый Массив;
	
	ЧастиТекста.Добавить(НСтр("ru = 'Выполняется'"));
	
	Если ЗапущеноСозданиеИнвентаризацийТоваров Тогда
		
		ЧастиТекста.Добавить(НСтр("ru = ' создание инвентаризации товаров'"));
		
	ИначеЕсли ЗапущеноСозданиеИнвентаризацийОС Тогда
		
		ЧастиТекста.Добавить(НСтр("ru = ' создание инвентаризации ОС'"));
		
	ИначеЕсли ЗапущеноСозданиеУведомленийПоТоварам Тогда
		
		ЧастиТекста.Добавить(НСтр("ru = ' создание уведомлений'"));
		
	ИначеЕсли ЗапущеноОтправлениеУведомленийВФНС Тогда
		
		ЧастиТекста.Добавить(НСтр("ru = ' отправление в ФНС'"));
		
	ИначеЕсли ЗапущеноОжиданиеОтветаОтФНС Тогда
		
		ЧастиТекста.Добавить(НСтр("ru = ' ожидание ответа от ФНС'"));
		
	ИначеЕсли ЗапущеноЗаписываниеПолученныхРНПТ Тогда
		
		ЧастиТекста.Добавить(НСтр("ru = ' запись полученных РНПТ'"));
		
	ИначеЕсли ЗапущенноОбновлениеДанных Тогда
		
		ЧастиТекста.Добавить(НСтр("ru = ' обновление данных'"));
		
	КонецЕсли;
	
	ТекстОжиданияВыполненияДействия =  Новый ФорматированнаяСтрока(ЧастиТекста);
	
КонецПроцедуры

&НаСервере 
Процедура ИнициализироватьРазделы()
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ПровестиИнвентаризацию", НСтр("ru = 'Инвентаризация'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "СоздатьУведомления", НСтр("ru = 'Уведомления'"));
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ПровестиИнвентаризацию", НСтр("ru = 'Инвентаризация'"),
		"Товары", "Товары и малоценные объекты");
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ПровестиИнвентаризацию", НСтр("ru = 'Инвентаризация'"),
		"ОС", "Основные средства");
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "СоздатьУведомления", НСтр("ru = 'Уведомления'"),
		"ОС", "Основные средства");
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "СоздатьУведомления", НСтр("ru = 'Уведомления'"),
		"Товары", "Товары и малоценные объекты");
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "СоздатьКорректировочныеУведомления", 
		НСтр("ru = 'Корректировочные уведомления'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ОтправитьУведомлениявФНС", НСтр("ru = 'Отправка'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ОжиданиеОтветаОтФНС", НСтр("ru = 'Ожидание ответа'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ЗаписатьПолученныеРНПТ", НСтр("ru = 'Запись РНПТ/подтверждения'"));

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьОписаниеРаздела(ОписаниеРазделов, Знач Имя, Знач Представление, Знач ИмяПодраздела = "", Знач ПредставлениеПодраздела = "") 
	
	Количество = ОписаниеРазделов.Количество();
	
	НовыйРаздел = ОписаниеРазделов.Добавить();
	НовыйРаздел.Имя = Имя;
	НовыйРаздел.Представление = Представление;
	НовыйРаздел.ИмяПодраздела = ИмяПодраздела;
	НовыйРаздел.ЭтоПодраздел = ЗначениеЗаполнено(ИмяПодраздела);
	НовыйРаздел.ПредставлениеПодраздела = ПредставлениеПодраздела;
	НовыйРаздел.Видимость = Истина;
	НовыйРаздел.РассчитыватьКоличество = Истина;
	НовыйРаздел.КоличествоРассчитано = Ложь;
	НовыйРаздел.НомерСтроки = Количество;
	
	Возврат НовыйРаздел;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьЗначениеРеквизитаДерева(Дерево, ИмяДействия, ИмяРеквизита, Значение, Установлено = Ложь)

	Для Каждого ПодчиненнаяСтрока Из Дерево.ПолучитьЭлементы() Цикл
		Если ПодчиненнаяСтрока.Значение = ИмяДействия Тогда
			ПодчиненнаяСтрока[ИмяРеквизита] = Значение;
			Установлено = Ложь;
		Иначе
			УстановитьЗначениеРеквизитаДерева(ПодчиненнаяСтрока, ИмяДействия, ИмяРеквизита, Значение, Установлено);
		КонецЕсли;
		
		Если Установлено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуТоварыПоУведомлениям()

	Если ТекущийШаг = "ПровестиИнвентаризацию" 
		ИЛИ ТекущийШаг = "СоздатьУведомления" 
		ИЛИ ТекущийШаг = "СоздатьКорректировочныеУведомления" Тогда
		Возврат;
	КонецЕсли;
		
	ТекущиеДанные = Элементы.Уведомления.ТекущиеДанные;
	
	Уведомление = ?(ТекущиеДанные <> Неопределено, ТекущиеДанные.Уведомление,
			ПредопределенноеЗначение("Перечисление.СтатусыОтправки.ПустаяСсылка"));
			
	ТекущаяСтраница = Элементы.СтраницыДетализацииУведомлений.ТекущаяСтраница;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ТоварыПоУведомлениям, "Уведомление", 
		Уведомление, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		Возврат;
		
	КонецЕсли;
	
	ДетальнаяТаблицаПоУведомлениям = 
		УстановитьТекущуюСтраницуИПолучитьТекущуюТаблицуОбъектов(ТекущиеДанные.ВидОперации, ТекущаяСтраница);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДетальнаяТаблицаПоУведомлениям, "Уведомление", 
		Уведомление, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	
КонецПроцедуры 

&НаКлиенте
Функция УстановитьТекущуюСтраницуИПолучитьТекущуюТаблицуОбъектов(ВидОперации, ТекущаяСтраница)
	
	ЭтоУведомлениеПоОС = 
		ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийУведомленияОбОстаткахПрослеживаемыхОбъектов.ОсновныеСредства");
	ЭтоУведомлениеПоКомплектующимВСоставеОС = 
		ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийУведомленияОбОстаткахПрослеживаемыхОбъектов.КомплектующиеОС");
		
	ТекущаяДетальнаяТаблица = ТоварыПоУведомлениям;
	
	Если ЭтоУведомлениеПоОС Тогда
		
		Если ТекущаяСтраница <> Элементы.ГруппаДетализацияУведомленийПоОС Тогда
			
			Элементы.СтраницыДетализацииУведомлений.ТекущаяСтраница = Элементы.ГруппаДетализацияУведомленийПоОС;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоУведомлениеПоКомплектующимВСоставеОС Тогда
		
		Если ТекущаяСтраница <> Элементы.ГруппаДетализацияУведомленийПоКомплектующимОС Тогда
			
			Элементы.СтраницыДетализацииУведомлений.ТекущаяСтраница = Элементы.ГруппаДетализацияУведомленийПоКомплектующимОС;
			
		КонецЕсли;
		
	Иначе
		
		Если ТекущаяСтраница <> Элементы.ГруппаДетализацияУведомленийПоТоварам Тогда
			
			Элементы.СтраницыДетализацииУведомлений.ТекущаяСтраница = Элементы.ГруппаДетализацияУведомленийПоТоварам;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекущаяДетальнаяТаблица;
	
КонецФункции

&НаСервере
Процедура ПриПереключенииРазделаСервер(ПредыдущаяГиперссылкаИмя, ТекущаяГиперссылкаИмя)
	
	ПредыдущаяГиперссылка 	= Элементы[ПредыдущаяГиперссылкаИмя];
	ТекущаяГиперссылка 		= Элементы[ТекущаяГиперссылкаИмя];
	
	// Делаем серой предыдущую гиперссылку.
	ПредыдущаяГиперссылка.ЦветФона		= Серый;
	ПредыдущаяГиперссылка.Гиперссылка	= Истина;

	// Делаем желтой текущую гиперссылку.
	ТекущаяГиперссылка.ЦветФона		= Желтый;
	ТекущаяГиперссылка.Гиперссылка	= Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийРазделФормы(Форма)
	
	Результат = Неопределено;
	
	Для Каждого Раздел Из Форма.ОписаниеРазделов Цикл
		
		Гиперссылка = Форма.Элементы[Раздел.Имя];
		
		Если Гиперссылка.ЦветФона = Форма.Желтый Тогда
			Результат = Гиперссылка;
		КонецЕсли;
	
	КонецЦикла; 
	
	Если Результат = Неопределено Тогда 
		Возврат Форма.Элементы["ПровестиИнвентаризацию"];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПослеСозданияУведомленийПоТоварам(ДлительнаяОперация, ДополнительныеПараметры) Экспорт

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ЗапущеноСозданиеУведомленийПоТоварам = Ложь;
		
		ОбновитьДанныеПомощника(Ложь, Истина);
		
		Оповестить("СозданыУведомленияВПомощникеПолученияРНПТ");
		
		ПерейтиНаСледующийАктуальныйШаг();
		
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		ПоказатьОшибкуПолученияДанных(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияУведомленийПоОС(ДлительнаяОперация, ДополнительныеПараметры) Экспорт

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ЗапущеноСозданиеУведомленийПоОС = Ложь;
		
		ОбновитьДанныеПомощника(Ложь, Истина);
		
		Оповестить("СозданыУведомленияВПомощникеПолученияРНПТ");
		
		ПерейтиНаСледующийАктуальныйШаг();
		
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		ПоказатьОшибкуПолученияДанных(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияКорректировочныхУведомлений(ДлительнаяОперация, ДополнительныеПараметры) Экспорт

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ЗапущеноСозданиеКорректировочныхУведомлений = Ложь;
		
		ОбновитьДанныеПомощника(Ложь, Истина);
		
		Оповестить("СозданыКорректировочныеУведомленияВПомощникеПолученияРНПТ");
		
		ПерейтиНаСледующийАктуальныйШаг();
		
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		ПоказатьОшибкуПолученияДанных(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущуюСтрокуПоОС(ТекущиеДанные)
	
	Если ТекущиеДанные.ЕстьСостав Тогда
		
		ТекущиеДанные.Состав = "Указать состав"
		
	Иначе
		
		ТекущиеДанные.Состав = ""
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПрослеживаемыхТоваровПоЭтомуОС(ОсновноеСредство, Основание, ОстаточнаяСтоимостьОС)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Период", НачалоМесяца(Объект.Период));
	ПараметрыФормы.Вставить("ОсновноеСредство", ОсновноеСредство);
	ПараметрыФормы.Вставить("Основание", Основание);
	ПараметрыФормы.Вставить("ОстаточнаяСтоимостьОС", ОстаточнаяСтоимостьОС);
	
	ОткрытьФорму("РегистрСведений.РегистрацияПрослеживаемыхТоваров.Форма.ФормаСпискаКомплектующиеВСоставеОС",
	ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекущуюСтрокуОсновныеСредства(Форма)

	Элементы = Форма.Элементы;
	Объект =  Форма.Объект;
	
	ТекущиеДанные = Элементы.НачальныеДанныеОС.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыТоваров = Новый Структура("Организация,Период,ОсновноеСредство", 
		Объект.Организация, Объект.Период, ТекущиеДанные.ОсновноеСредство);

	ЗаполнитьЗначенияСвойств(ТекущиеДанные,ПрослеживаемостьВызовСервера.ОбновитьТекстПоТекущейСтрокеОС(ПараметрыТоваров));
	
КонецПроцедуры

#КонецОбласти
