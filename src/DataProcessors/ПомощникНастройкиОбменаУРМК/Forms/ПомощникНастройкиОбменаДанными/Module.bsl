
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьРеквизитыФормы();
	
	ИнициализироватьСвойстваФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьФорму();
	
	УстановитьПорядковыйНомерПерехода(1);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьОтборДинамическихСписков", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы
		И ЗначениеЗаполнено(АдресРезультата) Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными")
			И ИспользоватьСинхронизациюДанных Тогда                
			ОткрытьФорму("ОбщаяФорма.НастройкиСинхронизацииДанных");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КаталогОбменаНачалоВыбораЗавершение", ЭтотОбъект);
	ФайловаяСистемаКлиент.ВыбратьКаталог(ОписаниеОповещения, НСтр("ru = 'Выберите каталог'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбменаНачалоВыбораЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = "" Тогда
		Возврат;
	КонецЕсли;
	
	КаталогОбмена = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура КаналыСвязиВидКаналаПриИзменении(Элемент)
	
	НастроитьФорму();

КонецПроцедуры

&НаКлиенте
Процедура КаталогНастроекПодключенияДляВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КаталогНастроекПодключенияДляВыгрузкиЗавершение", ЭтотОбъект);
	ФайловаяСистемаКлиент.ВыбратьКаталог(ОписаниеОповещения, НСтр("ru = 'Выберите каталог'"));

КонецПроцедуры

&НаКлиенте
Процедура КаталогНастроекПодключенияДляВыгрузкиЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = "" Тогда
		Возврат;
	КонецЕсли;
	
	КаталогНастроекПодключенияДляВыгрузки = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговыйОбъектПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ТорговыйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборДинамическихСписков("ТорговыйОбъект");
	
	ЗаполнитьНастройкиПоОбщимПараметрам("ТорговыйОбъект");

КонецПроцедуры

&НаКлиенте
Процедура УРМКПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ИспользоватьРасширенныйРежимНастройкиУРМК Тогда
		
		Отказ 				= Истина;
		СтруктураПараметров = Новый Структура;
		
		Если Копирование Тогда
			СтруктураПараметров.Вставить("ОбъектКопирования", Элемент.ТекущаяСтрока);
		КонецЕсли;
		
		ЗначенияЗаполнения = ПараметрыЗаполненияУРМКНаСервере(СтруктураПараметров);
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);


		ОткрытьФорму(ИмяМенеджераКассаККМНаСервере() + ".ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИмяМенеджераКассаККМНаСервере()
	
	Возврат ИнтеграцияУРМКСлужебный.МетаданныеПоОпределяемомуТипу("КассаККМУРМК").ПолноеИмя();
	
КонецФункции

&НаСервере
Функция ПараметрыЗаполненияУРМКНаСервере(СтруктураПараметров)
	
	Возврат ИнтеграцияУРМКПереопределяемый.ПараметрыЗаполненияПередНачаломДобавленияУРМК(ЭтотОбъект, СтруктураПараметров);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	ИзменитьПорядковыйНомерПерехода(+1);
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Оповестить("ЗакрытаФормаПомощникаСозданияОбменаДанными");
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПереходов

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов.

&НаКлиенте
Функция Подключаемый_СтраницаСпособНастройкиПодключения_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если МодельСервиса Тогда
		ВидПодключения = "ПассивныйРежим";
		ПропуститьСтраницу = Истина;
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаСпособНастройкиПодключения_ПриПереходеДалее(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ВидПодключения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Выберите вариант настройки подключения УРМК'"), ,
			"ВидПодключения", ,
			Отказ);
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПараметрыПодключенияОбычныеКаналыСвязи_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если ВидПодключения = "ПассивныйРежим" Тогда
		ПропуститьСтраницу = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПараметрыПодключенияОбычныеКаналыСвязи_ПриПереходеДалее(Отказ)
	
	Если ВидПодключения = "ПассивныйРежим" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если АрхивироватьФайлы
		И ИспользоватьПарольАрхива
		И ПустаяСтрока(ПарольАрхива) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Укажите пароль для архивации файлов.'"),,
			"ПарольАрхива",, Отказ);
	КонецЕсли;
	
	Если КаналыСвязиВидКанала = "ЛокальныйСетевойКаталог" Тогда
		
		Если НЕ ЗначениеЗаполнено(КаталогОбмена) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не заполнен ""Каталог обмена""'"),,
				"КаталогОбмена",, Отказ);
		Иначе
			КаталогОбменаИспользуется(Отказ);
			
			Если Отказ Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Каталог обмена уже используется'"),,
				"КаталогОбмена",, Отказ);
			КонецЕсли;	
				
		КонецЕсли;
	
	КонецЕсли;
	
	Если КаналыСвязиВидКанала = "КаталогFTP" Тогда
		
		Если ПустаяСтрока(FTPКаталог) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Укажите адрес каталога для передачи файлов с данными.'"),,
				"FTPКаталог",, Отказ);
		КонецЕсли;
		
		Если ПустаяСтрока(КаталогНастроекПодключенияДляВыгрузки) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не заполнен ""Каталог сохранения настроек обмена""'"),
				, "КаталогНастроекПодключенияДляВыгрузки",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжидание_ДлительнаяОперация(Отказ, ПерейтиДалее)
	
	ПерейтиДалее = Ложь;
	
	ПодготовитьНастройкиОбмена();
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаСписокНастроекОтправки_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	УстановитьОтборДинамическихСписков("ТорговыйОбъект");
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаСписокНастроекОтправки_ПриПереходеДалее(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ТорговыйОбъект) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнен ""Торговый объект""'"), ,
			"ТорговыйОбъект", ,
			Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнен ""Вид цен""'"), ,
			"ВидЦен", ,
			Отказ);
	КонецЕсли;
	
	Результат = ПроверитьИспользованиеНДССверху();
	Если ЗначениеЗаполнено(Результат) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			Результат, ,
			"ВидЦен", ,
			Отказ);
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаДанных

&НаКлиенте
Процедура ПодготовитьНастройкиОбмена()
	
	Элементы.ДекорацияОжиданиеНадпись.Заголовок = НСтр("ru = 'Подготовка данных.
		|Пожалуйста, подождите...'");
	
	ДлительнаяОперация = НачатьПодготовкуНастроекОбменаНаСервере();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодготовитьНастройкиОбменаЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция СтруктураДанныеНастроекОбмена()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ТорговыйОбъект", ТорговыйОбъект);
	СтруктураНастроек.Вставить("ВидЦен", ВидЦен);
	СтруктураНастроек.Вставить("ХранитьКартыЛояльностиВРМК", ХранитьКартыЛояльностиВРМК);
	СтруктураНастроек.Вставить("ВыгружатьОстаткиНоменклатуры", ВыгружатьОстаткиНоменклатуры);
	СтруктураНастроек.Вставить("ВыгружатьЗаказы", ВыгружатьЗаказы);

	СтруктураНастроек.Вставить("ИмяПланаОбмена", ИмяПланаОбмена);
	СтруктураНастроек.Вставить("ИмяПланаОбменаКорреспондента", ИмяПланаОбмена);
	СтруктураНастроек.Вставить("ВариантНастройкиОбмена", ИдентификаторВариантаНастройкиОбмена);
	СтруктураНастроек.Вставить("ФорматОбмена", ИмяПланаОбмена);
	СтруктураНастроек.Вставить("ВариантРаботыМастера", "НастроитьНовыйОбменДанными");
	СтруктураНастроек.Вставить("СсылкаНового", Неопределено);
	
	Если МодельСервиса Тогда
		СформироватьНаименованиеПредопределенногоУзла();
	Иначе
		// Представление этой информационной базы.
		НаименованиеЭтойБазы = ИнтеграцияУРМКСлужебный.НаименованиеПредопределенногоУзлаПланаОбмена(ИмяПланаОбмена);
		Если ПустаяСтрока(НаименованиеЭтойБазы) Тогда
			НаименованиеЭтойБазы = ИмяЭтойИнформационнойБазы();
		КонецЕсли;
	КонецЕсли;
	
	Префикс = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	Если ПустаяСтрока(Префикс) Тогда
		ОбменДаннымиПереопределяемый.ПриОпределенииПрефиксаИнформационнойБазыПоУмолчанию(Префикс);
	КонецЕсли;

	СтруктураНастроек.Вставить("КодПредопределенногоУзла", Префикс);
	СтруктураНастроек.Вставить("НаименованиеЭтойБазы",   НаименованиеЭтойБазы);
	СтруктураНастроек.Вставить("ПрефиксИнформационнойБазыИсточника", Префикс);
	СтруктураНастроек.Вставить("УзелИнформационнойБазы", УзелОбмена);
	СтруктураНастроек.Вставить("ИспользоватьПрефиксыДляНастройкиОбмена", Истина);
	СтруктураНастроек.Вставить("ИспользоватьПрефиксыДляНастройкиОбменаКорреспондента", Истина);
	СтруктураНастроек.Вставить("ИдентификаторИнформационнойБазыИсточника", Префикс);
	СтруктураНастроек.Вставить("ВерсияФорматаФайлаНастроекОбменаДанными",
		ИнтеграцияУРМКСлужебный.МодульПомощникСозданияОбменаДанными().ВерсияФорматаНастроекОбменаДанными());
	СтруктураНастроек.Вставить("ВерсияФорматаОбмена", "1.10");
	СтруктураНастроек.Вставить("ПоддерживаемыеОбъектыФормата", Неопределено);
	
	СтруктураНастроек.Вставить("ИспользоватьПараметрыТранспортаCOM",   Ложь);
	СтруктураНастроек.Вставить("ИспользоватьПараметрыТранспортаEMAIL", Ложь);
	СтруктураНастроек.Вставить("ИспользоватьПараметрыТранспортаFILE",  Ложь);
	СтруктураНастроек.Вставить("ИспользоватьПараметрыТранспортаFTP",   Ложь);
	
	СтруктураНастроек.Вставить("FILEКаталогОбменаИнформацией",	КаталогОбмена);
	СтруктураНастроек.Вставить("FILEСжиматьФайлИсходящегоСообщения", АрхивироватьФайлы);
	СтруктураНастроек.Вставить("FILEТранслитерироватьИменаФайловСообщенийОбмена", ТранслитерироватьИменаФайлов);
	
	СтруктураНастроек.Вставить("FTPСжиматьФайлИсходящегоСообщения", АрхивироватьФайлы);
	СтруктураНастроек.Вставить("FTPСоединениеМаксимальныйДопустимыйРазмерСообщения", ОграничениеРазмераФайлаFTP);
	СтруктураНастроек.Вставить("FTPСоединениеПароль", FTPПароль);
	СтруктураНастроек.Вставить("FTPСоединениеПассивноеСоединение", FTPПассивныйРежим);
	СтруктураНастроек.Вставить("FTPСоединениеПользователь", FTPПользователь);
	СтруктураНастроек.Вставить("FTPСоединениеПорт", FTPПорт);
	СтруктураНастроек.Вставить("FTPСоединениеПуть", FTPКаталог);
	СтруктураНастроек.Вставить("FTPТранслитерироватьИменаФайловСообщенийОбмена", ТранслитерироватьИменаФайлов);
		
	Если ВидПодключения = "ПассивныйРежим" Тогда
		СтруктураНастроек.Вставить("ВидТранспортаСообщенийОбмена", Перечисления.ВидыТранспортаСообщенийОбмена.WSПассивныйРежим);
	ИначеЕсли ВидПодключения = "ОбычныеКаналыСвязи" Тогда
		Если КаналыСвязиВидКанала = "ЛокальныйСетевойКаталог" Тогда
			СтруктураНастроек.Вставить("ИспользоватьПараметрыТранспортаFILE",  Истина);
			СтруктураНастроек.Вставить("ВидТранспортаСообщенийОбмена", Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
		ИначеЕсли КаналыСвязиВидКанала = "КаталогFTP" Тогда
			СтруктураНастроек.Вставить("ИспользоватьПараметрыТранспортаFTP",   Истина);
			СтруктураНастроек.Вставить("ВидТранспортаСообщенийОбмена", Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
			СтруктураНастроек.Вставить("КаталогНастроекПодключенияДляВыгрузки", КаталогНастроекПодключенияДляВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураНастроек.Вставить("ПарольАрхиваСообщенияОбмена", ПарольАрхива);
	
	СтруктураНастроек.Вставить("ИсправитьДублированиеНастроекСинхронизации",	Ложь);
	СтруктураНастроек.Вставить("УзелКорреспондентаЕстьВЭтойБазе",				Ложь);
	СтруктураНастроек.Вставить("ЭтотУзелЕстьВКорреспонденте",					Ложь);
	СтруктураНастроек.Вставить("ВосстановлениеНастроекОбмена", 					  "");

	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
Функция НачатьПодготовкуНастроекОбменаНаСервере()
	
	ПараметрыПроцедуры = СтруктураДанныеНастроекОбмена();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.ПомощникНастройкиОбменаУРМК.ПодготовитьДанныеНастроекОбмена", 
		ПараметрыПроцедуры, ПараметрыВыполнения);
		
КонецФункции

&НаКлиенте
Процедура ПодготовитьНастройкиОбменаЗавершение(РезультатФоновогоЗадания, ДополнительныеПараметры) Экспорт
	
	Если РезультатФоновогоЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		АдресРезультата = РезультатФоновогоЗадания.АдресРезультата;
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если Результат.НастройкиПодготовлены Тогда
			ПриНачалеСохраненияНастроекПодключения();
		Иначе
			
			Если Результат.Свойство("НумерацияЗакончилась") Тогда
				ИзменитьПорядковыйНомерПерехода(-1);
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Закончился диапазон префиксов узлов УРМК'"));
			ИначеЕсли Результат.Свойство("ОшибкаСозданияКаталога") Тогда
				ИзменитьПорядковыйНомерПерехода(-1);
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Ошибка создания подкаталога по префиксу в каталоге обмена.'"));
					
			Иначе
				ИзменитьПорядковыйНомерПерехода(+1);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ИзменитьПорядковыйНомерПерехода(-1);
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатФоновогоЗадания.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьНаименованиеПредопределенногоУзла()
	
	ИмяПриложенияПоУмолчанию = НСтр("ru = 'Приложение в Интернете'");
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса") Тогда
		Возврат ИмяПриложенияПоУмолчанию;
	КонецЕсли;
		
	МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
	
	ИмяПриложения = МодульРаботаВМоделиСервиса.ПолучитьИмяПриложения();
	
	Возврат ?(ПустаяСтрока(ИмяПриложения), ИмяПриложенияПоУмолчанию, ИмяПриложения);
КонецФункции

&НаСервере
Функция ИмяЭтойИнформационнойБазы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Константы.ЗаголовокСистемы.Получить();
	
	Если ПустаяСтрока(Результат) Тогда
		
		Результат = Метаданные.Синоним;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СохранениеНастройкиПодключения

&НаКлиенте
Процедура ПриНачалеСохраненияНастроекПодключения()
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Настройки = Результат.НастройкиОбмена;
	
	ПродолжитьОжидание = Истина;
	ПриНачалеСохраненияНастроекПодключенияНаСервере(Настройки, ПродолжитьОжидание);
	
	Если ПродолжитьОжидание Тогда
		ИнициализироватьПараметрыОбработчикаОжидания(
			ПараметрыОбработчикаОжиданияСохраненияНастроекПодключения);
			
		ПодключитьОбработчикОжидания("ПриОжиданииСохраненияНастроекПодключения",
			ПараметрыОбработчикаОжиданияСохраненияНастроекПодключения.ТекущийИнтервал, Истина);
	Иначе
		ПриЗавершенииСохраненияНастроекПодключения();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриНачалеСохраненияНастроекПодключенияНаСервере(НастройкиПодключения, ПродолжитьОжидание)
	
	МодульПомощникНастройки = ИнтеграцияУРМКСлужебный.МодульПомощникСозданияОбменаДанными();
			
	ПараметрыОбработчикаСохраненияНастроекПодключения = Неопределено;
	МодульПомощникНастройки.ПриНачалеСохраненияНастроекПодключения(НастройкиПодключения,
		ПараметрыОбработчикаСохраненияНастроекПодключения, ПродолжитьОжидание);

КонецПроцедуры

&НаКлиенте
Процедура ПриОжиданииСохраненияНастроекПодключения()
	
	ПродолжитьОжидание = Ложь;
	ПриОжиданииСохраненияНастроекПодключенияНаСервере(ПараметрыОбработчикаСохраненияНастроекПодключения, ПродолжитьОжидание);
	
	Если ПродолжитьОжидание Тогда
		ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияСохраненияНастроекПодключения);
		
		ПодключитьОбработчикОжидания("ПриОжиданииСохраненияНастроекПодключения",
			ПараметрыОбработчикаОжиданияСохраненияНастроекПодключения.ТекущийИнтервал, Истина);
	Иначе
		ПриЗавершенииСохраненияНастроекПодключения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриОжиданииСохраненияНастроекПодключенияНаСервере(ПараметрыОбработчика, ПродолжитьОжидание)
	
	МодульПомощникНастройки = ИнтеграцияУРМКСлужебный.МодульПомощникСозданияОбменаДанными();
	МодульПомощникНастройки.ПриОжиданииСохраненияНастроекПодключения(ПараметрыОбработчика, ПродолжитьОжидание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииСохраненияНастроекПодключения()
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Настройки = Результат.НастройкиОбмена;

	НастройкиПодключенияСохранены = Ложь;
	АдресВХранилищеНастройкиПодключения = "";
	ПриЗавершенииСохраненияНастроекПодключенияНаСервере(НастройкиПодключенияСохранены, АдресВХранилищеНастройкиПодключения);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СохранениеНастроекПодключенияЗавершение", ЭтотОбъект);

	Результат = Новый Структура;
	Результат.Вставить("Отказ", Не НастройкиПодключенияСохранены);
	
	Если НастройкиПодключенияСохранены
		И ВидПодключения = "ОбычныеКаналыСвязи"
		И ЗначениеЗаполнено(АдресВХранилищеНастройкиПодключения) Тогда
			
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
		
		ОповещениеПолученияФайла = Новый ОписаниеОповещения("ПолучениеФайлаНастроекПодключенияЗавершение",
			ЭтотОбъект, ДополнительныеПараметры);
			
		ИмяФайлаНастроекПриемника = НСтр("ru = 'Настройки синхронизации данных'");
		
		Если КаналыСвязиВидКанала = "ЛокальныйСетевойКаталог" Тогда
			КаталогНастроекПодключения = Настройки.FILEКаталогОбменаИнформацией;
		ИначеЕсли КаналыСвязиВидКанала = "КаталогFTP" Тогда
			КаталогНастроекПодключения = Настройки.КаталогНастроекПодключенияДляВыгрузки;
		КонецЕсли;
			
		КаталогНастроекПодключенияДляВыгрузки = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			КаталогНастроекПодключения, ИмяФайлаНастроекПриемника + ".xml");

		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(
			Новый ОписаниеПередаваемогоФайла(КаталогНастроекПодключенияДляВыгрузки, АдресВХранилищеНастройкиПодключения));
			
		ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
		ПараметрыСохранения.Интерактивно = Ложь;
		
		ФайловаяСистемаКлиент.СохранитьФайлы(ОповещениеПолученияФайла, ПолучаемыеФайлы, ПараметрыСохранения);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗавершенииСохраненияНастроекПодключенияНаСервере(НастройкиПодключенияСохранены, АдресВХранилищеНастройкиПодключения)
	
	СтатусЗавершения = Неопределено;
	
	МодульПомощникНастройки = ИнтеграцияУРМКСлужебный.МодульПомощникСозданияОбменаДанными();
	
	МодульПомощникНастройки.ПриЗавершенииСохраненияНастроекПодключения(
		ПараметрыОбработчикаСохраненияНастроекПодключения, СтатусЗавершения);
	ПараметрыОбработчикаСохраненияНастроекПодключения = Неопределено;
		
	Если СтатусЗавершения.Отказ Тогда
		НастройкиПодключенияСохранены = Ложь;
		СообщениеОбОшибке = СтатусЗавершения.СообщениеОбОшибке;
		Возврат;
	Иначе
		НастройкиПодключенияСохранены = СтатусЗавершения.Результат.НастройкиПодключенияСохранены;
		
		Если Не НастройкиПодключенияСохранены Тогда
			СообщениеОбОшибке = СтатусЗавершения.Результат.СообщениеОбОшибке;
			Возврат;
		КонецЕсли;
		
		УзелОбмена = СтатусЗавершения.Результат.УзелОбмена;
		
		Если ВидПодключения = "ОбычныеКаналыСвязи" Тогда

			ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
			
			Запись = Новый ЗаписьТекста;
			Запись.Открыть(ВременныйФайл, "UTF-8");
			Запись.Записать(СтатусЗавершения.Результат.СтрокаНастроекПодключенияXML);
			Запись.Закрыть();
			
			АдресВХранилищеНастройкиПодключения = ПоместитьВоВременноеХранилище(
				Новый ДвоичныеДанные(ВременныйФайл), УникальныйИдентификатор);
				
			УдалитьФайлы(ВременныйФайл);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучениеФайлаНастроекПодключенияЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ",             Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	
	Если ПолученныеФайлы = Неопределено Тогда
		Результат.Отказ = Истина;
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не удалось сохранить настройки подключения в файл.'");
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранениеНастроекПодключенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Отказ Тогда
		ИзменитьПорядковыйНомерПерехода(-1);
	Иначе
		
		Оповестить("Запись_УзелПланаОбмена");
		
		ПриНачалеСохраненияНастройки();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания)
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = Мин(ПараметрыОбработчикаОжидания.МаксимальныйИнтервал,
		Окр(ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала, 1));
		
КонецПроцедуры

#КонецОбласти

#Область СохранениеНастройкиСинхронизации

&НаКлиенте
Процедура ПриНачалеСохраненияНастройки()
	
	ПродолжитьОжидание = Истина;
	ПриНачалеСохраненияНастройкиСинхронизацииНаСервере(ПродолжитьОжидание);
	
	Если ПродолжитьОжидание Тогда
		ИнициализироватьПараметрыОбработчикаОжидания(
			ПараметрыОбработчикаОжиданияСохраненияНастроек);
			
		ПодключитьОбработчикОжидания("ПриОжиданииСохраненияНастройки",
			ПараметрыОбработчикаОжиданияСохраненияНастроек.ТекущийИнтервал, Истина);
	Иначе
		ПриЗавершенииСохраненияНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриНачалеСохраненияНастройкиСинхронизацииНаСервере(ПродолжитьОжидание)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Настройки = Результат.НастройкиОбмена;

	НастройкиСинхронизации = Новый Структура;
	НастройкиСинхронизации.Вставить("УзелОбмена",       УзелОбмена);
	НастройкиСинхронизации.Вставить("ДанныеЗаполнения", Новый Структура);
	
	
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("ДатаНачалаВыгрузкиДокументов", ДатаНачалаВыгрузкиДокументов);
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("ИспользоватьОтборПоОрганизациям", Истина);
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("ТорговыйОбъект", Настройки.ТорговыйОбъект);
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("ВидЦен", Настройки.ВидЦен);
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("ХранитьКартыЛояльностиВРМК", Настройки.ХранитьКартыЛояльностиВРМК);
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("ВыгружатьОстаткиНоменклатуры", Настройки.ВыгружатьОстаткиНоменклатуры);
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("ВыгружатьЗаказы", Настройки.ВыгружатьЗаказы);
	
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("УРМК", Настройки.УРМК);
	
	тчКассыККМ = Настройки.УРМК.КассыККМ;
	
	ТаблицаКассыККМ = ПланыОбмена.ОбменСУРМК.ПустаяСсылка().КассыККМ.Выгрузить();
	ТаблицаОрганизации = ПланыОбмена.ОбменСУРМК.ПустаяСсылка().Организации.Выгрузить();
	
	Если ИспользоватьРасширенныйРежимНастройкиУРМК Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(тчКассыККМ, ТаблицаКассыККМ);
		ТаблицаОрганизации = ИнтеграцияУРМКСлужебный.ОрганизацииУРМК(ТаблицаКассыККМ);
	Иначе
		СтрокаКассыККМ = ТаблицаКассыККМ.Добавить();
		СтрокаКассыККМ.КассаККМ = Настройки.КассаККМ;
		
		СтрокаОрганизации = ТаблицаОрганизации.Добавить();
		СтрокаОрганизации.Организация = Настройки.Организация;
	КонецЕсли;
		
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("КассыККМ", ТаблицаКассыККМ);
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("Организации", ТаблицаОрганизации);

	ПараметрыОбработчикаСохраненияНастроек = Неопределено;
	ОбменДаннымиСервер.ПриНачалеСохраненияНастроекСинхронизации(
		НастройкиСинхронизации, ПараметрыОбработчикаСохраненияНастроек, ПродолжитьОжидание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОжиданииСохраненияНастройки()
	
	ПродолжитьОжидание = Ложь;
	ПриОжиданииСохраненияНастройкиНаСервере(ПараметрыОбработчикаСохраненияНастроек, ПродолжитьОжидание);
	
	Если ПродолжитьОжидание Тогда
		ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияСохраненияНастроек);
		
		ПодключитьОбработчикОжидания("ПриОжиданииСохраненияНастройки",
			ПараметрыОбработчикаОжиданияСохраненияНастроек.ТекущийИнтервал, Истина);
	Иначе
		ПриЗавершенииСохраненияНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриОжиданииСохраненияНастройкиНаСервере(ПараметрыОбработчика, ПродолжитьОжидание)
	
	ОбменДаннымиСервер.ПриОжиданииСохраненияНастроекСинхронизации(
		ПараметрыОбработчика, ПродолжитьОжидание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииСохраненияНастройки()
	
	ПараметрыОбработчикаОжиданияСохраненияНастроек = Неопределено;
	
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	ПриЗавершенииСохраненияНастройкиНаСервере(Отказ, СообщениеОбОшибке);
	
	Если Отказ Тогда
		ИзменитьПорядковыйНомерПерехода(-1);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
	Иначе
		
		Если Не ВидПодключения = "ОбычныеКаналыСвязи" Тогда
			УдалитьИзВременногоХранилища(АдресРезультата);
		КонецЕсли;

		ЗарегистрироватьДанныеКВыгрузке();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗавершенииСохраненияНастройкиНаСервере(Отказ, СообщениеОбОшибке)
	
	СтатусЗавершения = Неопределено;
	ОбменДаннымиСервер.ПриЗавершенииСохраненияНастроекСинхронизации(
		ПараметрыОбработчикаСохраненияНастроек, СтатусЗавершения);
	ПараметрыОбработчикаСохраненияНастроек = Неопределено;
		
	Если СтатусЗавершения.Отказ Тогда
		Отказ = Истина;
		СообщениеОбОшибке = СтатусЗавершения.СообщениеОбОшибке;
		Возврат;
	Иначе
		
		Если Не СтатусЗавершения.Результат.НастройкиСохранены Тогда
			Отказ = Истина;
			СообщениеОбОшибке = СтатусЗавершения.Результат.СообщениеОбОшибке;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания)
	
	ПараметрыОбработчикаОжидания = Новый Структура;
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияИзменений

&НаКлиенте
Процедура ЗарегистрироватьДанныеКВыгрузке()
	
	Элементы.ДекорацияОжиданиеНадпись.Заголовок = НСтр("ru = 'Выполняется регистрация данных.
		|Пожалуйста, подождите...'");
	
	ДлительнаяОперация = НачатьРегистрациюДанныхКВыгрузкеНаСервере();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗарегистрироватьДанныеКВыгрузкеЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьРегистрациюДанныхКВыгрузкеНаСервере()
	
	КодУзла  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "Код");
	Магазины = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТорговыйОбъект);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("УзелОбмена",                   УзелОбмена);
	ПараметрыПроцедуры.Вставить("КодУзла",                      КодУзла);
	ПараметрыПроцедуры.Вставить("ДатаНачалаВыгрузкиДокументов", ДатаНачалаВыгрузкиДокументов);
	ПараметрыПроцедуры.Вставить("Магазины",                     Магазины);
	ПараметрыПроцедуры.Вставить("Комментарий",                  "");
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.ПомощникНастройкиОбменаУРМК.ЗарегистрироватьДанныеДляНачальнойВыгрузки", 
		ПараметрыПроцедуры, ПараметрыВыполнения);
		
КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьДанныеКВыгрузкеЗавершение(РезультатФоновогоЗадания, ДополнительныеПараметры) Экспорт
	
	Если РезультатФоновогоЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		
		ПодготовитьНастройкиОбмена();
		
	Иначе
		ИзменитьПорядковыйНомерПерехода(-1);
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатФоновогоЗадания.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаДанных

&НаКлиенте
Процедура Подключаемый_ВыгрузитьДанные()
	Элементы.ДекорацияОжиданиеНадпись.Заголовок = НСтр("ru = 'Выполняется выгрузка данных.
		|Пожалуйста, подождите...'");
	
	ДлительнаяОперация = НачатьВыгрузкуДанныхНаСервере();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыгрузитьДанныеЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаСервере
Функция НачатьВыгрузкуДанныхНаСервере()
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Настройки = Результат.НастройкиОбмена;

	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("УзелОбмена", УзелОбмена);
	ПараметрыПроцедуры.Вставить("КаталогОбмена", Настройки.FILEКаталогОбменаИнформацией);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.ПомощникНастройкиОбменаУРМК.ВыгрузитьДанные", 
		ПараметрыПроцедуры, ПараметрыВыполнения);
		
КонецФункции

&НаКлиенте
Процедура ВыгрузитьДанныеЗавершение(РезультатФоновогоЗадания, ДополнительныеПараметры) Экспорт
	
	Если РезультатФоновогоЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		
		УдалитьИзВременногоХранилища(АдресРезультата);

		ПодготовитьНастройкиОбмена();
		
	Иначе
		ИзменитьПорядковыйНомерПерехода(-1);
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатФоновогоЗадания.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияФормыПриСоздании

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	ИспользоватьСинхронизациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");

	МодельСервиса = ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
		
	Если Не ИнтеграцияУРМКПереопределяемый.РазрешенРасширенныйРежимНастройкиОбменаУРМК() Тогда
		ИспользоватьРасширенныйРежимНастройкиУРМК = Ложь;
		Константы.ИспользоватьРасширенныйРежимНастройкиУРМК.Установить(ИспользоватьРасширенныйРежимНастройкиУРМК);
	КонецЕсли;
	
	ИспользоватьРасширенныйРежимНастройкиУРМК = ИнтеграцияУРМКСлужебный.ИспользоватьРасширенныйРежимНастройкиУРМК();
	
	Если Не ИспользоватьРасширенныйРежимНастройкиУРМК Тогда
		НастроитьДинамическийСписок(Элементы.УРМК);
		ИнтеграцияУРМКПереопределяемый.УстановитьОтборПоТипуКассыККМ(УРМКСписок);
	КонецЕсли;
	
	ВидПодключения = Элементы.ВидПодключенияИнтернет.СписокВыбора[0].Значение;
	КаналыСвязиВидКанала = Элементы.КаналыСвязиВидКанала.СписокВыбора[0].Значение;
	
	ИнтеграцияУРМКПереопределяемый.УстановитьПараметрыВыбораТорговыйОбъект(ЭтотОбъект, "ТорговыйОбъект");
	ИнтеграцияУРМКПереопределяемый.ТорговыйОбъектУРМКПоУмолчанию(ТорговыйОбъект);

	ЗаполнитьНастройкиПоОбщимПараметрам("ТорговыйОбъект");
	
	ИмяПланаОбмена = "ОбменСУРМК";
	ИдентификаторВариантаНастройкиОбмена = "ОбменУРМК";
	ИдентификаторКорреспондента = Строка(Новый УникальныйИдентификатор);
	ДатаНачалаВыгрузкиДокументов = ТекущаяДатаСеанса();

	ЗаполнитьТаблицуПереходов();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвойстваФормы()
	
	Заголовок = НСтр("ru = 'Помощник настройки обмена данными с 1С:РМК'");
	
КонецПроцедуры

#КонецОбласти

#Область СценарииРаботыПомощника

&НаСервере
Функция ДобавитьСтрокуТаблицыПереходов(ИмяОсновнойСтраницы, ИмяСтраницыНавигации, ИмяСтраницыДекорации = "")
	
	СтрокаПереходов = ТаблицаПереходов.Добавить();
	СтрокаПереходов.ПорядковыйНомерПерехода = ТаблицаПереходов.Количество();
	СтрокаПереходов.ИмяОсновнойСтраницы = ИмяОсновнойСтраницы;
	СтрокаПереходов.ИмяСтраницыНавигации = ИмяСтраницыНавигации;
	СтрокаПереходов.ИмяСтраницыДекорации = ИмяСтраницыДекорации;
	
	Возврат СтрокаПереходов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПереходов()
	
	ТаблицаПереходов.Очистить();
	
	Если МодельСервиса Тогда
		
		НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаСписокНастроекОтправки", "СтраницаНавигацияНачало");
		НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаСписокНастроекОтправки_ПриОткрытии";
		НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаСписокНастроекОтправки_ПриПереходеДалее";
		
	ИначеЕсли ИспользоватьСинхронизациюДанных Тогда
		
		НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаСпособНастройкиПодключения", "СтраницаНавигацияНачало");
		НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаСпособНастройкиПодключения_ПриОткрытии";
		НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаСпособНастройкиПодключения_ПриПереходеДалее";

		НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаПараметрыПодключенияОбычныеКаналыСвязи", "СтраницаНавигацияПродолжение");
		НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаПараметрыПодключенияОбычныеКаналыСвязи_ПриОткрытии";
		НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаПараметрыПодключенияОбычныеКаналыСвязи_ПриПереходеДалее";
		
		НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаСписокНастроекОтправки", "СтраницаНавигацияПродолжение");
		НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаСписокНастроекОтправки_ПриОткрытии";
		НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаСписокНастроекОтправки_ПриПереходеДалее";
		
	Иначе
		НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаОбменЗапрещен", "СтраницаНавигацияОкончание");
	КонецЕсли;
	
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаОжидание", "СтраницаНавигацияПродолжение");
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаОжидание_ДлительнаяОперация";
	
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаЗавершение", "СтраницаНавигацияОкончание");
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеОбработчикиПереходов

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	Элементы.ПанельНавигации.ТекущаяСтраница.Доступность = Не (ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация);
	
	// Устанавливаем текущую кнопку по умолчанию.
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеДалее.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				
				Отказ = Ложь;
				
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеНазад.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				
				Отказ = Ложь;
				
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					ПорядковыйНомерПерехода = ПорядковыйНомерПерехода + 1;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьНастройкиПоОбщимПараметрам(ИмяПараметра = "")
	
	Если Не ПустаяСтрока(ИмяПараметра) Тогда
		ОбщиеПараметры = ОбщиеПараметры();
		
		ИнтеграцияУРМКПереопределяемый.ПриИзмененииОбщихПараметров(ОбщиеПараметры, ИмяПараметра);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбщиеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбщиеПараметры()
	
	Результат = ИнтеграцияУРМКСлужебный.СтруктураОбщихПараметров();
	ЗаполнитьЗначенияСвойств(Результат, ЭтотОбъект);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НастроитьДинамическийСписок(Список)
	
	МетаданныеКассыККМ = ИнтеграцияУРМКСлужебный.МетаданныеПоОпределяемомуТипу("КассаККМУРМК");
	
	ПустаяСсылкаКассаККМ = Метаданные.ОпределяемыеТипы.КассаККМУРМК.Тип.ПривестиЗначение();
	ПустаяСсылкаТорговыйОбъект = Метаданные.ОпределяемыеТипы.ТорговыйОбъектУРМК.Тип.ПривестиЗначение();
	ПустаяСсылкаОрганизация = Метаданные.ОпределяемыеТипы.ОрганизацияУРМК.Тип.ПривестиЗначение();
	
	ТорговыйОбъектТипРеквизитаСтрокой = ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипЗнч(ПустаяСсылкаТорговыйОбъект));
	ИмяРеквизитаТорговыйОбъект = ИнтеграцияУРМКСлужебный.ИменаРеквизитовПоТипу(ПустаяСсылкаКассаККМ, Тип(ТорговыйОбъектТипРеквизитаСтрокой), "Подразделение");
	
	ОрганизацияТипРеквизитаСтрокой = ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипЗнч(ПустаяСсылкаОрганизация));
	ИмяРеквизитаОрганизация = ИнтеграцияУРМКСлужебный.ИменаРеквизитовПоТипу(ПустаяСсылкаКассаККМ, Тип(ОрганизацияТипРеквизитаСтрокой));
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КассыККМ.Ссылка КАК Ссылка,
		|	КассыККМ.Наименование КАК Наименование,
		|	[ТорговыйОбъект]
		|	[Организация]
		|	ВЫБОР
		|		КОГДА УзлыНастроены.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК УзелНастроен
		|ИЗ
		|	[КассаККМУРМК] КАК КассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.ОбменСУРМК.КассыККМ  КАК УзлыНастроены
		|		ПО КассыККМ.Ссылка = УзлыНастроены.КассаККМ
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[КассаККМУРМК]", МетаданныеКассыККМ.ПолноеИмя());
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ТорговыйОбъект]",
		?(ИмяРеквизитаТорговыйОбъект = "","", "КассыККМ." +ИмяРеквизитаТорговыйОбъект+ " КАК ТорговыйОбъект,"));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Организация]",
		?(ИмяРеквизитаОрганизация = "","", "КассыККМ." +ИмяРеквизитаОрганизация+ " КАК Организация,"));

	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица              = МетаданныеКассыККМ.ПолноеИмя();
	СвойстваСписка.ТекстЗапроса                 = ТекстЗапроса;
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Список, СвойстваСписка);

КонецПроцедуры
	
&НаСервере
Процедура НастроитьФорму()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаСинхронизацияЧерезКаталог",
		"Видимость",
		КаналыСвязиВидКанала = "ЛокальныйСетевойКаталог");

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаСинхронизацияЧерезFTP",
		"Видимость",
		КаналыСвязиВидКанала = "КаталогFTP");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаФайлНастроекПодключенияДляКорреспондента",
		"Видимость",
		КаналыСвязиВидКанала = "КаталогFTP");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаВидПодключенияОбычныеКаналыСвязиРеквизиты",
		"Доступность",
		ВидПодключения = "ОбычныеКаналыСвязи");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаКодыПодключения",
		"Видимость",
		ВидПодключения = "ПассивныйРежим");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаФайлыНастроек",
		"Видимость",
		ВидПодключения = "ОбычныеКаналыСвязи");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ПарольАрхива", "Доступность", ИспользоватьПарольАрхива);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаПарольАрхива", "Доступность", АрхивироватьФайлы);
	
	Если ИспользоватьРасширенныйРежимНастройкиУРМК Тогда      
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"УРМКНаименование", "Заголовок", "РМК");
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"УРМКОрганизация", "Видимость", Ложь);
		
	КонецЕсли;																
	
КонецПроцедуры

&НаСервере
Процедура КаталогОбменаИспользуется(Отказ)
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	НастройкиТранспорта.Корреспондент КАК Корреспондент
		|ИЗ
		|	РегистрСведений.НастройкиТранспортаОбменаДанными КАК НастройкиТранспорта
		|ГДЕ
		|	НастройкиТранспорта.FILEКаталогОбменаИнформацией ПОДОБНО &КаталогОбмена
		|";

	Запрос = Новый Запрос(ТекстЗапроса);

	Запрос.УстановитьПараметр("КаталогОбмена", КаталогОбмена);

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПодключенияПриИзменении(Элемент)
	НастроитьФорму();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписков(ИмяРеквизита)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		УРМКСписок,
		ИмяРеквизита,
		ЭтотОбъект[ИмяРеквизита],,,
		ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]));
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКодыПодключения(Команда)
	
	АдресФайла = ПолучитьФайлКодовПодключения();
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьКодыПодключенияЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("АдресФайла", АдресФайла);
	
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохранения.Диалог.Заголовок = НСтр("ru = 'Сохранить коды подключения 1С:РМК'");
	ПараметрыСохранения.Диалог.Фильтр = "Документ PDF (*.pdf)|*.pdf";
	
	ФайловаяСистемаКлиент.СохранитьФайл(Оповещение, АдресФайла, НСтр("ru = 'Коды подключения.pdf'"), ПараметрыСохранения);

КонецПроцедуры

&НаСервере
Функция ПолучитьФайлКодовПодключения()
	
	ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
	
	КодыПодключения = Обработки.ПомощникНастройкиОбменаУРМК.СформироватьПечатнуюФормуКодыПодключения(НастройкиПечати());
	КодыПодключения.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), УникальныйИдентификатор);
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось удалить файл:" + ИмяФайла+ "'"));
	КонецПопытки;
	
	Возврат АдресФайла;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьКодыПодключенияЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	УдалитьИзВременногоХранилища(ДополнительныеПараметры.АдресФайла);
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОткрытияФайла = Новый ОписаниеОповещения(
		"ФайлКодыПодключенияСохраненЗавершение",
		ЭтотОбъект,
		Новый Структура("ПутьКФайлу",  ПолученныеФайлы[0].ПолноеИмя));
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Файл успешно сохранен'"),
		ОповещениеОткрытияФайла,
		ПолученныеФайлы[0].ПолноеИмя,
		БиблиотекаКартинок["Информация32"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлКодыПодключенияСохраненЗавершение(ДополнительныеПараметры) Экспорт
	
	ФайловаяСистемаКлиент.ОткрытьФайл(ДополнительныеПараметры.ПутьКФайлу);
	
КонецПроцедуры

&НаСервере
Функция НастройкиПечати()
	
	ТаблицаНастройкиПечати = Новый ТаблицаЗначений;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ОбменСУРМК.УРМК КАК УРМК,
		|	ОбменСУРМК.Код КАК КодУзла
		|ИЗ
		|	ПланОбмена.ОбменСУРМК КАК ОбменСУРМК
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиТранспортаОбменаДанными КАК НастройкиТранспорта
		|		ПО (ОбменСУРМК.Ссылка = НастройкиТранспорта.Корреспондент)
		|ГДЕ
		|	НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию = &ВидТранспорта
		|	И ОбменСУРМК.НомерОтправленного = 0
		|	И НЕ ОбменСУРМК.ЭтотУзел
		|";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидТранспорта",
		ПредопределенноеЗначение("Перечисление.ВидыТранспортаСообщенийОбмена.WSПассивныйРежим"));

	ТаблицаНастройкиПечати = Запрос.Выполнить().Выгрузить();

	АдресПубликации = Константы.АдресПубликацииИнформационнойБазыВИнтернете.Получить();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		СеансЗапущенБезРазделителей = МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей();
		Если НЕ СеансЗапущенБезРазделителей Тогда
			ТекущаяОбласть = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
			Попытка
				МодульПрограммныйИнтерфейсСервиса = ОбщегоНазначения.ОбщийМодуль("ПрограммныйИнтерфейсСервиса");
				СвойстваПриложения = МодульПрограммныйИнтерфейсСервиса.СвойстваПриложения(ТекущаяОбласть);
				АдресПубликации = СвойстваПриложения.АдресПриложения;
			Исключение
				АдресПубликации = "";
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаНастройкиПечати.Колонки.Добавить("АдресПубликации");
	ТаблицаНастройкиПечати.ЗаполнитьЗначения(АдресПубликации, "АдресПубликации");

	Возврат ТаблицаНастройкиПечати;

КонецФункции

&НаКлиенте
Процедура АрхивироватьФайлыПриИзменении(Элемент)
	
	НастроитьФорму();

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПарольАрхиваПриИзменении(Элемент)
	
	НастроитьФорму();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_УстановитьОтборДинамическихСписков()
	
	УстановитьОтборДинамическихСписков("ТорговыйОбъект");

КонецПроцедуры

&НаСервере
Функция ПроверитьИспользованиеНДССверху()
	
	Результат = Неопределено;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	УниверсальныеРабочиеМестаКассировКассыККМ.КассаККМ.Владелец КАК Организация
	|ИЗ
	|	Справочник.УниверсальныеРабочиеМестаКассиров.КассыККМ КАК УниверсальныеРабочиеМестаКассировКассыККМ
	|ГДЕ
	|	НЕ УниверсальныеРабочиеМестаКассировКассыККМ.КассаККМ.ПометкаУдаления
	|	И НЕ УниверсальныеРабочиеМестаКассировКассыККМ.Ссылка.ПометкаУдаления
	|	И УниверсальныеРабочиеМестаКассировКассыККМ.Ссылка.ТорговыйОбъект = &ТорговыйОбъект
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры.КассаККМ.Владелец
	|ИЗ
	|	Справочник.УниверсальныеРабочиеМестаКассиров.РаспределениеНоменклатуры КАК УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры
	|ГДЕ
	|	НЕ УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры.КассаККМ.ПометкаУдаления
	|	И НЕ УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры.Ссылка.ПометкаУдаления
	|	И УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры.Ссылка.ТорговыйОбъект = &ТорговыйОбъект";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Выборка.Организация);
		ОрганизацияПлательщикНДС = НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
		Если ОрганизацияПлательщикНДС И НЕ ВидЦен.ЦенаВключаетНДС Тогда
			
			Результат = СтрШаблон(НСтр("ru = 'Организация ""%1"" является плательщиком НДС.
				|В выбранном виде цен ""%2"" установлен признак учета НДС ""Сверх цены""
				|Измените или укажите вид цен с признаком учета НДС ""Включен в цену"".'"), Выборка.Организация, ВидЦен);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

