
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("Отбор") Тогда
		ВызватьИсключение НСтр("ru = 'Обработка не предназначена для непосредственного использования.'");
	КонецЕсли;
	
	ОтборыДокументов = Новый ФиксированноеСоответствие(Обработки.ДокументыПоКритериюОтбора.ОтборыДокументов());
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	УстановитьКлючНастроек();
	
	ИмяКритерияОтбора = ИмяКритерияОтбора(Параметры);
	
	НастроитьЭлементыФормы(ИмяКритерияОтбора, Параметры);
	
	ЗаполнитьТаблицуЗапросов(ОбработкаОбъект, ИмяКритерияОтбора);
	
	ОбновитьСписокВидовДокументов();
	
	Параметры.Отбор.Свойство("Контрагент", Контрагент);
	Параметры.Отбор.Свойство("Договор", Договор);
	Параметры.Отбор.Свойство("Номенклатура", Номенклатура);
	Параметры.Отбор.Свойство("Проект", Проект);
	
	ВосстановитьНастройки();

	ПоказыватьЭлементыКонтрагентДоговор = НЕ (ЗначениеЗаполнено(Контрагент) ИЛИ ЗначениеЗаполнено(Договор));
	Элементы.ОтборКонтрагент.Видимость = ПоказыватьЭлементыКонтрагентДоговор;
	Элементы.ТаблицаДокументовКонтрагент.Видимость = ПоказыватьЭлементыКонтрагентДоговор;
	УстановитьВидимостьОтбораПоДоговорам();	
	НастроитьПравуюПанель();
	
	ОбновитьТекстЗапроса();
	
	Если Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии Тогда
		
		ОбновитьТаблицуДокументовНаСервере();
		
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьРМК();
	
	// МобильныйКлиент
	РаботаСОтборами.НастроитьПанельОтборовМобильныйКлиент(ЭтотОбъект, , , , , Истина); 
	// Конец МобильныйКлиент	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыполнитьОбработкуИзмененияДанных();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СоздатьДокументВыбранногоТипа(ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборЗаказыИСчетаПриИзменении(Элемент)
	
	УстановитьОтборПоГруппе();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНакладныеПриИзменении(Элемент)
	
	УстановитьОтборПоГруппе();

КонецПроцедуры

&НаКлиенте
Процедура ОтборОплатыПриИзменении(Элемент)
	
	УстановитьОтборПоГруппе();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРозницаПриИзменении(Элемент)
	
	УстановитьОтборПоГруппе();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСобытияПриИзменении(Элемент)
	
	УстановитьОтборПоГруппе();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныйОтборПриИзменении(Элемент)
	
	Если ПроизвольныйОтбор Тогда
		ОтборЗаказыИСчета = Ложь;
		ОтборНакладные = Ложь;
		ОтборОплаты = Ложь;
		ОтборРозница = Ложь;
		ОтборСобытия = Ложь;
	Иначе
		УстановитьОтборПоГруппе();
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьКоличествоДокументовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДополнитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаНажатиеЗавершение", ЭтотОбъект);
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = ОтборПериод;
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатиеЗавершение(НовыйПериод, ДополнительныеПараметры) Экспорт
	
	Если НовыйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НовыйПериод)=Тип("СтандартныйПериод") Тогда
		ОтборПериод = НовыйПериод;
	ИначеЕсли ТипЗнч(НовыйПериод)=Тип("Дата") Тогда
		ОтборПериод.ДатаОкончания = НовыйПериод;
	КонецЕсли;
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	
	ОбновитьТаблицуДокументовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УстановитьФильтрДокументов(Элемент.Родитель.Имя, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УстановитьФильтрДокументов(Элемент.Родитель.Имя, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УстановитьПараметрыВыбораДоговора();
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УстановитьФильтрДокументов(Элемент.Родитель.Имя, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборовНажатие(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДокументов

&НаКлиенте
Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Копирование Тогда
		СкопироватьДокумент();
	Иначе
		СоздатьДокумент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ИзменитьДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ПометитьНаУдалениеДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьСоставДокументов(Команда)
	
	РедактироватьСоставДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура SMS(Команда)
	
	СоздатьСобытиеПоКонтрагенту("СообщениеSMS");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛичнаяВстреча(Команда)
	
	СоздатьСобытиеПоКонтрагенту("ЛичнаяВстреча");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьСобытие(Команда)
	СоздатьСобытиеПоКонтрагенту("Запись");
КонецПроцедуры

&НаКлиенте
Процедура Прочее(Команда)
	
	СоздатьСобытиеПоКонтрагенту("Прочее");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонныйЗвонок(Команда)
	
	СоздатьСобытиеПоКонтрагенту("ТелефонныйЗвонок");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронноеПисьмо(Команда)
	
	СоздатьСобытиеПоКонтрагенту("ЭлектронноеПисьмо");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ОбновитьТаблицуДокументовНаСервере(ВсеСтрокиОтображены);
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	ВыполнитьГрупповоеПроведение(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведения(Команда)
	
	ВыполнитьГрупповоеПроведение(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеОтборы(Команда)
	РаботаСОтборамиКлиент.СброситьОтборПоПериоду(ЭтотОбъект, "ТаблицаДокументов", "Дата", , Ложь);
	СброситьВсеМеткиОтбораНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ИмяКритерияОтбора(Знач Параметры)
	
	Если Параметры.Отбор.Свойство("Договор") Тогда
		
		Возврат ДокументыПоДоговору();
		
	ИначеЕсли Параметры.Отбор.Свойство("Контрагент") Тогда
		
		Возврат ДокументыПоКонтрагенту();
		
	ИначеЕсли Параметры.Отбор.Свойство("Номенклатура") Тогда
		
		Возврат ДокументыПоНоменклатуре();
		
	ИначеЕсли Параметры.Отбор.Свойство("Проект") Тогда
		
		Возврат ДокументыПоПроекту();
		
	Иначе
		
		ВызватьИсключение
		НСтр("ru = 'Параметр отбора установлен не верно: ожидается ""Контрагент"", ""Договор"" или ""Номенклатура"".'");
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыФормы(Знач ИмяКритерияОтбора, Знач Параметры)
	
	Если ИмяКритерияОтбора = ДокументыПоДоговору() Тогда
		
		Заголовок = НСтр("ru = 'Документы по договору'");
		ВключитьВидимостьГруппыИОтключитьВидимостьОстальных("ПродатьКупитьПоДоговору");
		
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВидДоговора");
		Если ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтотОбъект.Элементы,
			"ПодменюКупитьПоДоговору",
			"Видимость",
			Ложь);
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоров.СПоставщиком Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтотОбъект.Элементы,
			"ПодменюПродатьПоДоговору",
			"Видимость",
			Ложь);
		КонецЕсли;
		
	ИначеЕсли ИмяКритерияОтбора = ДокументыПоКонтрагенту() Тогда
		
		Заголовок = НСтр("ru = 'Документы по контрагенту'");
		ВключитьВидимостьГруппыИОтключитьВидимостьОстальных("ПродатьКупитьПоКонтрагенту");
		
	ИначеЕсли ИмяКритерияОтбора = ДокументыПоНоменклатуре() Тогда
		
		Заголовок = НСтр("ru = 'Документы по номенклатуре'");
		ВключитьВидимостьГруппыИОтключитьВидимостьОстальных("ПродатьКупитьПоНоменклатуре");
		
	ИначеЕсли ИмяКритерияОтбора = ДокументыПоПроекту() Тогда
		
		Заголовок = НСтр("ru = 'Документы по проекту'");
		ВключитьВидимостьГруппыИОтключитьВидимостьОстальных("ПродатьКупитьПоПроекту");
		
	Иначе
		ВызватьИсключение
		НСтр("ru = 'Имя критерия отбора указано не верно.
		|Ожидается ""ДокументыПоДоговору"", ""ДокументыПоКонтрагенту"", ""ДокументыПоНоменклатуре"" или ""ДокументыПоПроекту"".'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьВидимостьГруппыИОтключитьВидимостьОстальных(Знач ВключитьВидимостьЭтойГруппы)
	
	ГруппыКоманд = Новый Массив;
	ГруппыКоманд.Добавить("ПродатьКупитьПоДоговору");
	ГруппыКоманд.Добавить("ПродатьКупитьПоКонтрагенту");
	ГруппыКоманд.Добавить("ПродатьКупитьПоНоменклатуре");
	
	Для Каждого ТекГруппаКоманд Из ГруппыКоманд Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтотОбъект.Элементы, ТекГруппаКоманд, "Видимость", ТекГруппаКоманд = ВключитьВидимостьЭтойГруппы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("СписокДокументовДляСозданияНового", ПолучитьСписокДокументовДляСозданияНового());
	Если Элементы.ТаблицаДокументов.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТипТекущегоДокумента", ТипЗнч(Элементы.ТаблицаДокументов.ТекущиеДанные.Документ));
	КонецЕсли;
	ОткрытьФорму("Обработка.ДокументыПоКритериюОтбора.Форма.СписокДокументовДляСозданияНового", ПараметрыФормы,
		ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДокумент()
	
	ДокументСсылка = Элементы.ТаблицаДокументов.ТекущиеДанные.Документ;
	ФормаОбъекта = "Документ." + ИмяОбъектаПоСсылке(ДокументСсылка) + ".ФормаОбъекта";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначениеКопирования", ДокументСсылка);
	
	ОткрытьФорму(ФормаОбъекта, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументВыбранногоТипа(ВыбранныйЭлемент)
	
	Если ТипЗнч(ВыбранныйЭлемент) <> Тип("ДанныеФормыСтруктура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВыбранныйЭлемент.Свойство("Значение") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		НоменклатураВДокументахКлиент.СоздатьИзНоменклатуры(ЭтотОбъект, ВыбранныйЭлемент.Значение);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "";
	
	Если ЗначениеЗаполнено(Договор) И Не ПроверитьКорректностьДоговора(ТекстВопроса, ВыбранныйЭлемент.Значение) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьЗавершение", ЭтотОбъект, ВыбранныйЭлемент);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	СоздатьЗавершение(КодВозвратаДиалога.Да, ВыбранныйЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗавершение(Ответ, ВыбранныйЭлемент) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыФормыСоздаваемогоДокумента(ВыбранныйЭлемент.Значение);
	
	ФормаОбъекта = "Документ." + ИмяМетаданныхПоВидуДокумента(ВыбранныйЭлемент.Значение) + ".ФормаОбъекта";
	ОткрытьФорму(ФормаОбъекта, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКорректностьДоговора(ТекстСообщения, ВидДокумента)
	Отказ = Ложь;
	Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
		ТекстСообщения, 
		Договор,
		Документы[ИмяМетаданныхПоВидуДокумента(ВидДокумента)].ПустаяСсылка(), 
		Договор.Организация, 
		Договор.Владелец, 
		Отказ);
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		ТекстСообщения = ТекстСообщения + "
		| Хотите продолжить?";
	КонецЕсли;
	
	Возврат Не Отказ;
КонецФункции

&НаКлиенте
Процедура ИзменитьДокумент()
	
	ТекущиеДанные = Элементы.ТаблицаДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, ТекущиеДанные.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеДокумент()
	
	ТекущиеДанные = Элементы.ТаблицаДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ТекущиеДанные.Документ;
	
	ПометкаУдаленияУстановлена = ТекущиеДанные.ПометкаУдаления;
	
	Если ПометкаУдаленияУстановлена Тогда
		ТекстВопроса = НСтр("ru='Снять с ""%1"" пометку на удаление?'");
	Иначе
		ТекстВопроса = НСтр("ru='Пометить ""%1"" на удаление?'");
	КонецЕсли;
	
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", Строка(ТекущаяСсылка)); 
	
	ПараметрыВопроса = Новый Структура("ТекущаяСсылка, ПометкаУдаленияУстановлена", ТекущаяСсылка, ПометкаУдаленияУстановлена);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПометкуУдаленияПослеВопроса", ЭтотОбъект, ПараметрыВопроса);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияПослеВопроса(Результат, ПараметрыВопроса) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ПараметрыВопроса.ТекущаяСсылка;
	
	УстановитьСнятьПометкуУдаления(ТекущаяСсылка, ПараметрыВопроса.ПометкаУдаленияУстановлена);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьПометкуУдаления(СсылкаНаОбъект, ПометкаУдаления)
	
	Попытка
		ДокументОбъект = СсылкаНаОбъект.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(НЕ ПометкаУдаления);
		СтрокаДанных = ТаблицаДокументов.НайтиПоИдентификатору(Элементы.ТаблицаДокументов.ТекущаяСтрока);
		СтрокаДанных.ИдентификаторКартинки = ?(ПометкаУдаления, 2, 1);
		СтрокаДанных.ПометкаУдаления = НЕ ПометкаУдаления; 
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось %Операция пометку удаления документа ""%1""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Строка(СсылкаНаОбъект));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Операция", ?(ПометкаУдаления, "снять", "установить"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СброситьВсеМеткиОтбораНаСервере()
	
	Пока ДанныеМеток.Количество() <> 0 Цикл
		УдалитьМеткуОтбора("0", Ложь);
	КонецЦикла;
	
	ОбновитьТекстЗапроса();
	ОбновитьТаблицуДокументовНаСервере();
	УстановитьВидимостьОтбораПоДоговорам();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтрДокументов(ИмяЭлемента, ВыбранноеЗначение)

	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка(ИмяЭлемента, ИмяЭлемента, ВыбранноеЗначение, , Истина);
    УстановитьВидимостьОтбораПоДоговорам();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение,
		ПредставлениеЗначения="", ВывестиДанные = Истина)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение,
		ПредставлениеЗначения);

	Если ВывестиДанные Тогда
		ОбновитьТекстЗапроса();
		ОбновитьТаблицуДокументовНаСервере();
	КонецЕсли;		

	ВыбранноеЗначение = Неопределено;
		
КонецПроцедуры

&НаСервере
Процедура ДополнитьТекстЗапросаФильтрами(ЗапросТекст, СписокФильтров)
	
	ВозможныеФильтрыДокумента = СтрРазделить(СписокФильтров, ",");
	
	ЕстьНеприменимыеФильтры = Ложь;
	Для Каждого СтрокаДанных Из ДанныеМеток Цикл
		ИмяПоля = СтрЗаменить(СтрокаДанных.ИмяОтбора, "Отбор","");
		Если ВозможныеФильтрыДокумента.Найти(ИмяПоля) = Неопределено Тогда
			ЕстьНеприменимыеФильтры = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНеприменимыеФильтры Тогда
		ТекстУсловийБезФильтров = "1 = 0";
		ТекстЗапроса = СтрЗаменить(ЗапросТекст , "%ТекстФильтров%", ТекстУсловийБезФильтров);
		ЗапросТекст = ТекстЗапроса;
		Возврат;
	КонецЕсли;
	
	ПримененныеФильтры = Новый Массив;
	
	Для Каждого ИмяФильтра Из ВозможныеФильтрыДокумента Цикл
		ИмяРеквизита = "Отбор" + ИмяФильтра;		
		ЗначениеРеквизита = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяОтбора", ИмяРеквизита));
		
		Если ЗначениеРеквизита.Количество() <> 0 Тогда
			ПримененныеФильтры.Добавить("ТаблицаШапки.Ссылка."+ ИмяФильтра + " В (&" + ИмяРеквизита + ")");
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПримененныеФильтры.Количество() <> 0 Тогда
		ТекстЗапроса = СтрЗаменить(ЗапросТекст , "%ТекстФильтров%", СтрСоединить(ПримененныеФильтры, " И "));
	Иначе
		Если ДанныеМеток.Количество() = 0 Тогда
			ТекстУсловийБезФильтров = "1 = 1";
		Иначе
			ТекстУсловийБезФильтров = "1 = 0";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ЗапросТекст , "%ТекстФильтров%", ТекстУсловийБезФильтров);
	КонецЕсли;
	
	ЗапросТекст = ТекстЗапроса;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыЗапросаПоФильтрам(Запрос)
	
	ПараметрыЗапроса = Новый Структура();
	
	Для Каждого СтрокаТЧ  Из ДанныеМеток Цикл
		Если ПараметрыЗапроса.Свойство(СтрокаТЧ.ИмяОтбора) Тогда
			ЗначенияОтбора = ПараметрыЗапроса[СтрокаТЧ.ИмяОтбора]
		Иначе
			ЗначенияОтбора = Новый Массив;
		КонецЕсли;
		ЗначенияОтбора.Добавить(СтрокаТЧ.Метка);
		ПараметрыЗапроса.Вставить(СтрокаТЧ.ИмяОтбора, ЗначенияОтбора);
	КонецЦикла;
	
	Для Каждого Элемент Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьОтборыПоДоговорам(КонтрагентМетки)
	
	ДанныеМетокПоДоговорам = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяОтбора", "ОтборДоговор"));
	Для Каждого СтрокаТЧ Из ДанныеМетокПоДоговорам Цикл
		Если СтрокаТЧ.Метка.Владелец = КонтрагентМетки Тогда
			Идентификатор = Строка(ДанныеМеток.Индекс(СтрокаТЧ)); 
			УдалитьМеткуОтбора(Идентификатор, Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтбораПоДоговорам()
	
	ПоказыватьОтборПоДоговорам = Ложь;
	СписокКонтрагентовВФильтре = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяОтбора","ОтборКонтрагент"));
	ПоказыватьОтборПоДоговорам = СписокКонтрагентовВФильтре.Количество() > 0;
	
	ВидимостьОтбораПоДоговорам = ПоказыватьОтборПоДоговорам ИЛИ ЗначениеЗаполнено(Контрагент);
	Элементы.ОтборДоговор.Видимость = ВидимостьОтбораПоДоговорам;

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДоговора()
	
	Если НЕ Контрагент.Пустая() Тогда
		КонтрагентДляДоговора = Контрагент
	Иначе
		КонтрагентДляДоговора  = Справочники.Контрагенты.ПустаяСсылка();
		СписокКонтрагентовВФильтре = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяОтбора","ОтборКонтрагент"));
		Если СписокКонтрагентовВФильтре.Количество() > 0 Тогда
			КонтрагентДляДоговора = СписокКонтрагентовВФильтре[СписокКонтрагентовВФильтре.Количество() - 1].Метка;
		КонецЕсли;
	КонецЕсли;
	
	Организации = Новый Массив();
	Для Каждого ДанныеМетки Из ДанныеМеток Цикл
		Метка = ДанныеМетки.Метка;
		Если ДанныеМетки.ИмяОтбора = "ОтборОрганизация" И НЕ Метка.Пустая() Тогда
			Организации.Добавить(Метка);
		КонецЕсли;
	КонецЦикла;
	СписокОрганизаций = Новый ФиксированныйМассив(Организации);
	
	ПараметрыКонтрагенты = Новый ПараметрВыбора("Отбор.Владелец", КонтрагентДляДоговора);
	ПараметрыОрганизации = Новый ПараметрВыбора("Отбор.Организация", СписокОрганизаций);
	
	ВсеПараметры = Новый Массив();
	Если НЕ КонтрагентДляДоговора.Пустая() Тогда
		ВсеПараметры.Добавить(ПараметрыКонтрагенты);
	КонецЕсли;
	Если СписокОрганизаций.Количество() <> 0 Тогда
		ВсеПараметры.Добавить(ПараметрыОрганизации);
	КонецЕсли;
	Элементы.ОтборДоговор.ПараметрыВыбора = Новый ФиксированныйМассив(ВсеПараметры);
	
КонецПроцедуры

#Область Константы

&НаКлиентеНаСервереБезКонтекста
Функция ДокументыПоДоговору()
	
	Возврат "ДокументыПоДоговору";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДокументыПоКонтрагенту()
	
	Возврат "ДокументыПоКонтрагенту";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДокументыПоНоменклатуре()
	
	Возврат "ДокументыПоНоменклатуре";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДокументыПоПроекту()
	
	Возврат "ДокументыПоПроекту";
	
КонецФункции

#КонецОбласти

#Область Настройки

&НаСервере
Процедура ВосстановитьНастройки()
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ДокументыПоКритериюОтбора",
		КлючНастроек);
	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда
		
		ЗначениеИзНастройки = ЗначениеНастроек["СписокВидовДокументов"];
		Если ТипЗнч(ЗначениеИзНастройки) = Тип("СписокЗначений") Тогда
			ПрименитьНастройкиКСпискуВидовДокументов(ЗначениеИзНастройки);
		КонецЕсли;
		
		ОтборЗаказыИСчета = ЗначениеНастроек["ОтборЗаказыИСчета"];
		ОтборНакладные = ЗначениеНастроек["ОтборНакладные"];
		ОтборОплаты = ЗначениеНастроек["ОтборОплаты"];
		ОтборСобытия = ЗначениеНастроек["ОтборСобытия"];
		ОтборРозница = ЗначениеНастроек["ОтборРозница"];
		ПроизвольныйОтбор = ЗначениеНастроек["ПроизвольныйОтбор"];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Настройки = Новый Соответствие;
	Настройки.Вставить("СписокВидовДокументов", СписокВидовДокументов);
	Настройки.Вставить("ОтборЗаказыИСчета", ОтборЗаказыИСчета);
	Настройки.Вставить("ОтборНакладные", ОтборНакладные);
	Настройки.Вставить("ОтборОплаты", ОтборОплаты);
	Настройки.Вставить("ОтборСобытия", ОтборСобытия);
	Настройки.Вставить("ОтборРозница", ОтборРозница);
	Настройки.Вставить("ПроизвольныйОтбор", ПроизвольныйОтбор);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ДокументыПоКритериюОтбора", КлючНастроек, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКлючНастроек()
	
	Если Параметры.Свойство("КлючНастроек") И Не ПустаяСтрока(Параметры.КлючНастроек) Тогда
		
		КлючНастроек = Параметры.КлючНастроек;
		
	Иначе
		
		КлючНастроек = "БезОтбора";
		
	КонецЕсли;
	
	КлючНастроек = КлючНастроек + "_" + Пользователи.ТекущийПользователь().УникальныйИдентификатор();
	
	// Проектное решение: для контрагентов и договоров настройки храним в разрезе элементов справочников,
	// для номенклатуры настройки храним без разреза по всему справочнику.
	Если Параметры.Свойство("Отбор") Тогда
		Если Параметры.Отбор.Свойство("Контрагент") Тогда
			КлючНастроек = КлючНастроек + "_" + Параметры.Отбор.Контрагент.УникальныйИдентификатор();
		ИначеЕсли Параметры.Отбор.Свойство("Договор") Тогда
			КлючНастроек = КлючНастроек + "_" + Параметры.Отбор.Договор.УникальныйИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьВЗначениеНастройки(СписокТиповПоГруппам)
	
	Результат = СписокВидовДокументов.Скопировать();
	
	Для Каждого СтрокаВида Из Результат Цикл
		Если СписокТиповПоГруппам.НайтиПоЗначению(СтрокаВида.Значение) <> Неопределено Тогда
			СтрокаВида.Пометка = Истина;
		Иначе
			СтрокаВида.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Поиск

&НаКлиенте
Функция ИнвертироватьСтроку(Строка)
	
	// АПК:163-выкл
	// АПК:1036-выкл
	СтрокаКириллица = "йцукенгшщзхъфывапролджэячсмитьбю.ё";
	СтрокаЛатиница = "qwertyuiop[]asdfghjkl;'zxcvbnm,./`";
	// АПК:163-вкл
	// АПК:1036-вкл
	Результат = "";
	Строка = НРег(Строка);
	Для Сч = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Сч, 1);
		Позиция = Найти(СтрокаЛатиница, Символ);
		Если Позиция <> 0 Тогда
			Результат = Результат + Сред(СтрокаКириллица, Позиция, 1);
		Иначе
			Позиция = Найти(СтрокаКириллица, Символ);
			Если Позиция <> 0 Тогда
				Результат = Результат + Сред(СтрокаЛатиница, Позиция, 1);
			Иначе
				Результат = Результат + Символ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивПоиска(Знач ИскомоеЗначение)
	
	Результат = Новый Массив;
	
	Если ИскомоеЗначение <> Неопределено Тогда
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"%"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"["," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"]"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"_"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,""""," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"¶"," ");
		ИскомоеЗначение = СокрЛП(ИскомоеЗначение);
		
		ИскомоеЗначение = ИскомоеЗначение + " ";
		Пока Найти(ИскомоеЗначение,"  ") <> 0 Цикл
			ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"  "," ");
		КонецЦикла;
		
		Позиция = Найти(ИскомоеЗначение," ");
		
		Пока Позиция <> 0 Цикл
			
			ИсходноеЗначение = Лев(ИскомоеЗначение,Позиция - 1);
			ИнвертированноеЗначение = ИнвертироватьСтроку(ИсходноеЗначение);
			
			Результат.Добавить(Новый Структура("ИсходноеЗначение,ИнвертированноеЗначение", ВРег(ИсходноеЗначение), ВРег(ИнвертированноеЗначение)));
			
			ИскомоеЗначение = Сред(ИскомоеЗначение, Позиция + 1);
			Позиция = Найти(ИскомоеЗначение," ");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если Не ВсеСтрокиОтображены Тогда
		ДополнитьСписок();
	КонецЕсли;
	
	ИскомоеЗначение = "" + СтрокаПоиска;
	
	Если ПустаяСтрока(ИскомоеЗначение) Тогда
		Элементы.ТаблицаДокументов.ОтборСтрок = Неопределено;
	Иначе
		МассивПоиска =  ПолучитьМассивПоиска(СтрЗаменить(ИскомоеЗначение, ".", ","));
		Если МассивПоиска.Количество() = 0 Тогда
			Элементы.Товары.ОтборСтрок = Неопределено;
		Иначе
			Для Каждого ДанныеСтроки Из ТаблицаДокументов Цикл
				ТекстПоиска = СтрШаблон("%1 %2 %3 %4 %5 %6 %7 %8",
				ДанныеСтроки.Автор, // 1
				ДанныеСтроки.Номер, // 2
				ДанныеСтроки.Дата, // 3
				ДанныеСтроки.Ответственный, // 4
				ДанныеСтроки.Комментарий, // 5
				ДанныеСтроки.ТипДокумента, // 6
				ДанныеСтроки.ВидОперации, // 7
				Формат(ДанныеСтроки.СуммаДокумента, "ЧДЦ=2; ЧРД=,; ЧГ=")); // 8
				ТекстПоиска = СтрЗаменить(ВРег(ТекстПоиска), ".", ",");
				
				ДанныеСтроки.Отбор = Истина;
				Для Каждого ПараПоиска Из МассивПоиска Цикл
					Если Найти(ТекстПоиска, ПараПоиска.ИсходноеЗначение) + Найти(ТекстПоиска, ПараПоиска.ИнвертированноеЗначение) = 0 Тогда
						ДанныеСтроки.Отбор = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Элементы.ТаблицаДокументов.ОтборСтрок = Новый ФиксированнаяСтруктура("Отбор", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ДополнитьСписок()
	ЗаполнитьСтрокиИзВременногоХранилища();
	ВыполнитьОбработкуИзмененияДанных();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяОбъектаПоСсылке(Ссылка)
	Возврат Ссылка.Метаданные().Имя;
КонецФункции

&НаКлиенте
Процедура СоздатьСобытиеПоКонтрагенту(ИмяТипаСобытия)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий." + ИмяТипаСобытия));
	ЗначенияЗаполнения.Вставить("Контрагент", Контрагент);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СписокТипов()
	
	Результат = Новый СписокЗначений;
	
	Если ВключитьВсеТипыДокументов() Тогда
		Для Каждого ТекДокумент Из ТаблицаЗапросов Цикл
			Результат.Добавить(ТекДокумент.ИмяДокумента);
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
	
	Если ОтборЗаказыИСчета Тогда
		ДополнитьСписокТиповДокументамиИзГруппы(Результат, "ОтборЗаказыИСчета");
	КонецЕсли;
	
	Если ОтборНакладные Тогда
		ДополнитьСписокТиповДокументамиИзГруппы(Результат, "ОтборНакладные");
	КонецЕсли;

	Если ОтборОплаты Тогда
		ДополнитьСписокТиповДокументамиИзГруппы(Результат, "ОтборОплаты");
	КонецЕсли;
	
	Если ОтборРозница Тогда
		ДополнитьСписокТиповДокументамиИзГруппы(Результат, "ОтборРозница");
	КонецЕсли;
	
	Если ОтборСобытия Тогда
		ДополнитьСписокТиповДокументамиИзГруппы(Результат, "ОтборСобытия");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДополнитьСписокТиповДокументамиИзГруппы(СписокТипов, ГруппаОтбора)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ГруппаОтбора", ГруппаОтбора);
	
	Для Каждого ТекСтрока Из ТаблицаЗапросов.НайтиСтроки(ПараметрыОтбора) Цикл
		СписокТипов.Добавить(ТекСтрока.ИмяДокумента);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВключитьВсеТипыДокументов()
	
	Возврат Не Макс(ОтборЗаказыИСчета, ОтборНакладные, ОтборОплаты, ОтборРозница, ОтборСобытия);
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборПоГруппе()
	
	ЗначениеНастройки = ПреобразоватьВЗначениеНастройки(СписокТипов());
	ПрименитьНастройкиКСпискуВидовДокументов(ЗначениеНастройки);
	
	ВыполнитьОбработкуИзмененияДанных();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЗапросов(ОбработкаОбъект, ИмяКритерияОтбора)

	ДополнительныеДокументы = Новый Массив;
	// В массив помещаются дополнительные документы, которых нет в критерии отбора
	// ДополнительныеДокументы.Добавить(Метаданные.Документы.РасходныйОрдер);

	ПоляШапки = Новый Массив;
	ПоляШапки.Добавить("СуммаДокумента");
	ПоляШапки.Добавить("Валюта");
	ПоляШапки.Добавить("ВидОперации");
	ПоляШапки.Добавить("Автор");
	ПоляШапки.Добавить("Ответственный");
	ПоляШапки.Добавить("Организация");
	ПоляШапки.Добавить("Контрагент");
	ПоляШапки.Добавить("Комментарий");
	
	ОбработкаОбъект.ЗаполнитьТаблицуЗапросов(ТаблицаЗапросов, ИмяКритерияОтбора, ДополнительныеДокументы, ПоляШапки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстЗапроса()
	
	ТекстыЗапросовВТ = ТекстыЗапросовВТ();
	
	ТекстЗапросаФильтр = "ВЫБРАТЬ ПЕРВЫЕ 100 Документ, Дата ПОМЕСТИТЬ ВтТаблицаОтбора ИЗ ("
	+ ТекстыЗапросовВТ.ВремТекстЗапросаВт
	+ ") КАК ВЗ УПОРЯДОЧИТЬ ПО Дата УБЫВ";

	ТекстЗапросаФильтр = СтрЗаменить(
	ТекстЗапросаФильтр,
	"ВЫБРАТЬ ПЕРВЫЕ 100",
	СтрШаблон("ВЫБРАТЬ ПЕРВЫЕ %1", Формат(ПорцияДанных(), "ЧГ=")));
	
	ТекстЗапросаФильтрПолный = ТекстыЗапросовВТ.ВремТекстЗапросаПолный;
	
	ТекстЗапросаПоДокументам = ТекстыЗапросовВТ.ВремТекстЗапросаДанные;
	
КонецПроцедуры

&НаСервере
Функция ТекстыЗапросовВТ()
	
	ВремТекстЗапросаВт = Новый Массив;
	ВремТекстЗапросаДанные = Новый Массив;
	
	Для Каждого ТекСтрокаТаблицы Из ТаблицаЗапросов.НайтиСтроки(Новый Структура("Использовать", Истина)) Цикл
		
		ТекстЗапроса = ТекСтрокаТаблицы.ТекстЗапроса;
		ДополнитьТекстЗапросаФильтрами(ТекстЗапроса, ТекСтрокаТаблицы.ДоступныеФильтры);
		ВремТекстЗапросаВт.Добавить(ТекстЗапроса);
		ВремТекстЗапросаДанные.Добавить(ТекСтрокаТаблицы.ТекстЗапросаВыборка);
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ВремТекстЗапросаВт", СтрСоединить(ВремТекстЗапросаВт, " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС));
	Результат.Вставить("ВремТекстЗапросаПолный", Результат.ВремТекстЗапросаВт);
	
	ПозицияПоместить = СтрНайти(ВРег(Результат.ВремТекстЗапросаПолный), ВРег("//%ПОМЕСТИТЬ%"));
	Если ПозицияПоместить > 0 Тогда
		Результат.ВремТекстЗапросаПолный = Лев(Результат.ВремТекстЗапросаПолный, ПозицияПоместить - 1)
		+ " ПОМЕСТИТЬ ВтТаблицаОтбора "
		+ Сред(Результат.ВремТекстЗапросаПолный, ПозицияПоместить + СтрДлина("//%ПОМЕСТИТЬ%"));
	КонецЕсли;
	
	Результат.Вставить("ВремТекстЗапросаДанные", СтрСоединить(ВремТекстЗапросаДанные, " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС));
	
	ПозицияВыбрать = СтрНайти(ВРег(Результат.ВремТекстЗапросаДанные), ВРег("ВЫБРАТЬ"));
	Если ПозицияВыбрать > 0 Тогда
		Результат.ВремТекстЗапросаДанные = "ВЫБРАТЬ РАЗРЕШЕННЫЕ "
		+ Сред(Результат.ВремТекстЗапросаДанные, ПозицияВыбрать + СтрДлина("ВЫБРАТЬ"))
		+ "УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Документ
		|";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьПризнакИспользованияВидаДокумента()

	Для Каждого СтрокаТаб Из ТаблицаЗапросов Цикл

		ЭлементСписка = СписокВидовДокументов.НайтиПоЗначению(СтрокаТаб.ИмяДокумента);
		Если ЭлементСписка <> Неопределено Тогда
			СтрокаТаб.Использовать = ЭлементСписка.Пометка;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВидовДокументов()

	СписокВидовДокументов.Очистить();
	Для Каждого Строка Из ТаблицаЗапросов Цикл
		СписокВидовДокументов.Добавить(Строка.ИмяДокумента, Строка.СинонимДокумента, Строка.Использовать);
	КонецЦикла;

	СписокВидовДокументов.СортироватьПоЗначению(НаправлениеСортировки.Возр);

КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиКСпискуВидовДокументов(ЗначениеНастройки)
	
	ПереформироватьЗапрос = Ложь;
	Для Каждого Элемент Из ЗначениеНастройки Цикл
		
		ЭлементСписка = СписокВидовДокументов.НайтиПоЗначению(Элемент.Значение);
		Если ЭлементСписка <> Неопределено И ЭлементСписка.Пометка <> Элемент.Пометка Тогда
			
			ЭлементСписка.Пометка = Элемент.Пометка;
			ПереформироватьЗапрос = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПереформироватьЗапрос Тогда
		
		УстановитьПризнакИспользованияВидаДокумента();
		
		ОбновитьТекстЗапроса();
		
		СохранитьНастройки();
		
		ОбновитьТаблицуДокументовНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСоставДокументов()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокВидовДокументов", СписокВидовДокументов);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьСоставДокументовЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
	"Обработка.ДокументыПоКритериюОтбора.Форма.НастройкаСоставаВидовДокументов",
	ПараметрыФормы,
	ЭтотОбъект,,,,
	ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСоставДокументовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		ПрименитьНастройкиКСпискуВидовДокументов(Результат);
	КонецЕсли;
	
	ВыполнитьОбработкуИзмененияДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуДокументовНаСервере(ВсеСтроки = Ложь)
	
	Если ПустаяСтрока(ТекстЗапросаПоДокументам) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Необходимо настроить состав документов'"));
		Возврат;
	КонецЕсли;
	
	ВсеСтрокиОтображены = Ложь;

	Запрос = Новый Запрос(ТекстЗапросаФильтр);
	Если ЗначениеЗаполнено(Договор) Тогда
		Запрос.УстановитьПараметр("Параметр", Договор);
	ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда
		Запрос.УстановитьПараметр("Параметр", Контрагент);
	ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда
		Запрос.УстановитьПараметр("Параметр", Номенклатура);
	ИначеЕсли ЗначениеЗаполнено(Проект) Тогда
		Запрос.УстановитьПараметр("Параметр", Проект);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не указан параметр для отбора по документам.'");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ОтборПериод.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ОтборПериод.ДатаОкончания <> '00010101', ОтборПериод.ДатаОкончания, '39991231'));
		
	Запрос.МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	
	УстановитьОграниченияПоВидамОпераций(Запрос);
	
	Если ВсеСтроки Тогда
		Запрос.Текст = ТекстЗапросаФильтрПолный;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаполнитьПараметрыЗапросаПоФильтрам(Запрос);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Запрос.Текст = ТекстЗапросаПоДокументам;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДокументов.Загрузить(Результат);
	
	ПараметрыЗапроса = Запрос.Параметры;

КонецПроцедуры

&НаСервере
Процедура УстановитьОграниченияПоВидамОпераций(Запрос)
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеВидыОпераций = ДоступныеВидыОпераций();
	Для Каждого ПараметрЗапроса Из ДоступныеВидыОпераций Цикл 
		Запрос.УстановитьПараметр("МассивДопустимыхВидовОпераций" + ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДоступныеВидыОпераций()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("РасходнаяНакладная", Новый Массив);
	Если ПравоДоступа("Добавление", Метаданные.Документы.РасходнаяНакладная) Тогда
		Для Каждого ВидОперацииРН Из Перечисления.ВидыОперацийРасходнаяНакладная Цикл
			Результат["РасходнаяНакладная"].Добавить(ВидОперацииРН);
		КонецЦикла;
	КонецЕсли;
	
	Результат.Вставить("ПриходнаяНакладная", Новый Массив);
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПриходнаяНакладная) Тогда
		Для Каждого ВидОперацииПН Из Перечисления.ВидыОперацийПриходнаяНакладная Цикл
			Результат["ПриходнаяНакладная"].Добавить(ВидОперацииПН);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьЗадание(ПараметрыЗадания, ИмяПроцедуры)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
	ИмяПроцедуры,
	ПараметрыЗадания,
	ПараметрыВыполнения);

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание(ПараметрыЗадания)
	
	Задание = ПолучитьЗадание(ПараметрыЗадания, "Обработки.ДокументыПоКритериюОтбора.ЗапуститьФормированиеСпискаДокументовПоКонтрагенту");
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
	Задание,
	Новый ОписаниеОповещения("ЗаполнитьАдресВременногоХранилища", ЭтотОбъект),
	ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАдресВременногоХранилища(Результат, Параметры) Экспорт
	
	АдресВременногоХранилища = "";
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = Результат.АдресРезультата;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиИзВременногоХранилища()
	
	Если ЗначениеЗаполнено(АдресВременногоХранилища) Тогда
		ВременноеХранилище = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		Если ВременноеХранилище.Количество() = 0 Тогда
			ОбновитьТаблицуДокументовНаСервере(Истина);
			Возврат;
		КонецЕсли;
	Иначе
		ОбновитьТаблицуДокументовНаСервере(Истина);
		Возврат;
	КонецЕсли;

	ТаблицаДокументов.Загрузить(ВременноеХранилище);
	
	ВсеСтрокиОтображены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуИзмененияДанных()
	
	Если НЕ ВсеСтрокиОтображены Тогда
		ВсеСтрокиОтображены = ТаблицаДокументов.Количество() < ПорцияДанных();
	КонецЕсли;
	
	Если НЕ ВсеСтрокиОтображены Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ТекстЗапросаФильтрПолный", ТекстЗапросаФильтрПолный);
		ПараметрыЗадания.Вставить("ТекстЗапросаПоДокументам", ТекстЗапросаПоДокументам);
		ПараметрыЗадания.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
		ПараметрыЗадания.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
		ЗапуститьФоновоеЗадание(ПараметрыЗадания);
	КонецЕсли;
	
	НастроитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	Если ПроизвольныйОтбор Тогда
		Элементы.НастроитьСоставДокументов.Доступность = Истина;
		Элементы.ОтборЗаказыИСчета.Доступность = Ложь;
		Элементы.ОтборНакладные.Доступность = Ложь;
		Элементы.ОтборОплаты.Доступность = Ложь;
		Элементы.ОтборРозница.Доступность = Ложь;
		Элементы.ОтборСобытия.Доступность = Ложь;
	Иначе
		Элементы.НастроитьСоставДокументов.Доступность = Ложь;
		Элементы.ОтборЗаказыИСчета.Доступность = Истина;
		Элементы.ОтборНакладные.Доступность = Истина;
		Элементы.ОтборОплаты.Доступность = Истина;
		Элементы.ОтборРозница.Доступность = Истина;
		Элементы.ОтборСобытия.Доступность = Истина;
	КонецЕсли;
	
	СоответствиеРезультат = Новый Соответствие;
	
	Для Каждого Строка Из ТаблицаЗапросов Цикл
		ИмяЭлементаФормы = ОтборыДокументов.Получить(Строка.ИмяДокумента);
		Если ИмяЭлементаФормы <> Неопределено
			И СоответствиеРезультат[ИмяЭлементаФормы] = Неопределено Тогда
			СоответствиеРезультат.Вставить(ИмяЭлементаФормы, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыФормы = Новый Массив;
	ЭлементыФормы.Добавить("ОтборЗаказыИСчета");
	ЭлементыФормы.Добавить("ОтборНакладные");
	ЭлементыФормы.Добавить("ОтборОплаты");
	
	Для Каждого ЭлементФормы Из ЭлементыФормы Цикл
		Элементы[ЭлементФормы].Видимость = СоответствиеРезультат[ЭлементФормы] <> Неопределено;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	ЭтотОбъект.Элементы,
	"ОтборРозница",
	"Видимость",
	ЗначениеЗаполнено(Номенклатура));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	ЭтотОбъект.Элементы,
	"ОтборСобытия",
	"Видимость",
	ЗначениеЗаполнено(Контрагент));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПорцияДанных()
	Возврат 100;
КонецФункции

&НаКлиенте
Процедура НастроитьВидимостьЭлементов()
	
	Если ВсеСтрокиОтображены Тогда
		Элементы.НадписьКоличествоДокументов.Видимость = Ложь;
	Иначе
		Элементы.НадписьКоличествоДокументов.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьРМК()
	
	Если УправлениеДоступомУНФ.ЕстьПрофильРабочееМестоКассира() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюСобытия", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыСоздаваемогоДокумента(ВидДокумента)
	
	ПараметрыФормы = Новый Структура;
	
	УточняемыеТипыДокументов = Обработки.ДокументыПоКритериюОтбора.УточняемыеТипыДокументов();
	
	Если УточняемыеТипыДокументов[ВидДокумента] = Тип("ДокументСсылка.РасходнаяНакладная") И Не РазрешеныПродажи() Тогда
		ПараметрыФормы.Вставить("ВидОперацииВозврат", Истина);
	ИначеЕсли УточняемыеТипыДокументов[ВидДокумента] = Тип("ДокументСсылка.ПриходнаяНакладная") И Не РазрешеныЗакупки() Тогда
		ПараметрыФормы.Вставить("ВидОперацииВозврат", Истина);
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Контрагент", Контрагент);
	Если ЗначениеЗаполнено(Проект) Тогда
		ЗначенияЗаполнения.Вставить("Проект", Проект);
	КонецЕсли;
	Если ЗначениеЗаполнено(Договор) Тогда
		ЗначенияЗаполнения.Вставить("Договор", Договор);
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Владелец, Организация");
		ЗначенияЗаполнения.Вставить("Контрагент", РеквизитыДоговора.Владелец);
		ЗначенияЗаполнения.Вставить("Организация", РеквизитыДоговора.Организация);
	КонецЕсли;
	Если ВидДокумента = "ЗаказНаряд" Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция РазрешеныПродажи()
	
	Возврат ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.СчетНаОплату)
		И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказПокупателя)
		И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.РасходнаяНакладная)
		И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.АктВыполненныхРабот);
	
КонецФункции

&НаСервере
Функция РазрешеныЗакупки()
	
	Возврат ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказПоставщику)
		И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ПриходнаяНакладная);
	
КонецФункции

&НаКлиенте
Функция ПолучитьСписокДокументовДляСозданияНового()
	
	ДокументыИсключение = Новый Массив;
	ДокументыИсключение.Добавить("Событие");
	ДокументыИсключение.Добавить("ЧекККМВозврат");
	
	СписокРезультат = Новый СписокЗначений;
	Для каждого ЭлементСписка Из СписокВидовДокументов Цикл
		Если ДокументыИсключение.Найти(ЭлементСписка.Значение) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СписокРезультат.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Проект) Тогда
		СписокРезультатПроект = Новый СписокЗначений;
		СписокРезультатПроект.Добавить("ЗаказПокупателя", НСтр("ru='Заказ покупателя'"));
		СписокРезультатПроект.Добавить("ПоступлениеВКассу", НСтр("ru='Поступление в кассу'"));
		СписокРезультатПроект.Добавить("ПоступлениеНаСчет", НСтр("ru='Поступление на счет'"));
		СписокРезультатПроект.Добавить("ПрочиеРасходы", НСтр("ru='Прочие затраты (расходы)'"));
		СписокРезультатПроект.Добавить("РасходИзКассы", НСтр("ru='Расход из кассы'"));
		СписокРезультатПроект.Добавить("РасходСоСчета", НСтр("ru='Расход со счета'"));
		СписокРезультатПроект.СортироватьПоЗначению();
	КонецЕсли;
	
	СписокРезультат.Добавить("ЗаказНаряд", НСтр("ru='Заказ-наряд'"));
	СписокРезультат.СортироватьПоЗначению();
	
	Если ЗначениеЗаполнено(Проект) Тогда
		Возврат СписокРезультатПроект;
	КонецЕсли;
	
	Возврат СписокРезультат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетаданныхПоВидуДокумента(ВидДокумента)
	
	Если ВидДокумента = "ЗаказНаряд" Тогда
		Возврат "ЗаказПокупателя";
	Иначе
		Возврат ВидДокумента;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьГрупповоеПроведение(РежимЗаписи)
	
	ОчиститьСообщения();
	
	ВыбранныеДокументы = Новый Массив;
	Для каждого Эл Из Элементы.ТаблицаДокументов.ВыделенныеСтроки Цикл
		ВыбранныеДокументы.Добавить(ТаблицаДокументов.НайтиПоИдентификатору(Эл).Документ);
	КонецЦикла;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ВыбранныеДокументы", ВыбранныеДокументы);
	ПараметрыЗадания.Вставить("РежимЗаписи", РежимЗаписи);
	
	Задание = ПолучитьЗадание(ПараметрыЗадания, "Обработки.ДокументыПоКритериюОтбора.ГрупповоеПроведениеДокументов");
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
	Задание,
	Новый ОписаниеОповещения("ВыполнитьГрупповоеПроведениеЗавершение", ЭтотОбъект),
	ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьГрупповоеПроведениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.АдресРезультата) Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ПоказатьОповещениеПользователя(
		СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru=';Изменен %1 документ;;Изменено %1 документа;Изменено %1 документов;Изменено %1 документа'"),
		РезультатВыполнения.ИзмененоДокументов));
		
		Для Каждого Тип Из РезультатВыполнения.ИзмененныеТипы Цикл
			ОповеститьОбИзменении(Тип);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьТаблицуДокументовНаСервере(ВсеСтрокиОтображены);
	
КонецПроцедуры

#КонецОбласти

#Область ПраваяПанель

&НаСервере
Процедура НастроитьПравуюПанель()
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	РаботаСОтборамиКлиентСервер.УстановитьОтображениеКомандыСброситьВсеОтборы(ЭтотОбъект);

КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_") + 1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД, ОбновитьДанные = Истина)
	
	ЧисловойИдентификаторМетки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(МеткаИД);
	СтрокаМеток = ДанныеМеток.НайтиПоИдентификатору(ЧисловойИдентификаторМетки);
	
	СтрокаМассива = ДанныеМеток[ЧисловойИдентификаторМетки];
	ЭтоОтборПоКонтрагенту = СтрокаМассива.ИмяОтбора = "ОтборКонтрагент";
	Метка = СтрокаМассива.Метка;
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, ТаблицаДокументов, МеткаИД, , , Ложь);
	
	Если ОбновитьДанные Тогда
		Если ЭтоОтборПоКонтрагенту Тогда
			ОчиститьОтборыПоДоговорам(Метка);
		КонецЕсли;
		УстановитьВидимостьОтбораПоДоговорам();
		ОбновитьТекстЗапроса();
		ОбновитьТаблицуДокументовНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
#КонецОбласти
