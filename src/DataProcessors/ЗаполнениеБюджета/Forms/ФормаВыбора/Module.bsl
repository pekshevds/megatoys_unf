
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	
	ЗаполнитьРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СкрытьПоля();
	
	УстановитьВидимостьПоБюджету();
	
	ПересчитатьКоэффициентСдвигаПериода();
	
	УстановитьДопустимыеПериодичности();
	
	ПереключитьСтраницу(Элементы, ВидыОтчетов, "ДекорацияДоходыРасходы");
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНадписьНетДанных;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КоэффициентПриИзменении(Элемент)
	
	ПересчетКоэффициента(Ложь);
	
	ПересчитатьСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентПриИзменении(Элемент)
	
	ПересчетКоэффициента(Истина);
	
	ПересчитатьСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхПланаПродажНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("МножественныйВыбор", Истина);
	ОткрытьФорму("Документ.ПланПродаж.ФормаВыбора",ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхБюджетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("МножественныйВыбор", Истина);
	ОткрытьФорму("Документ.Бюджет.ФормаВыбора",ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаНажатиеЗавершение", ЭтотОбъект);
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = ОтборПериод;
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатиеЗавершение(НовыйПериод, Параметры) Экспорт

	Если ТипЗнч(НовыйПериод)=Тип("СтандартныйПериод") Тогда
		ОтборПериод = НовыйПериод;
	КонецЕсли;
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДанные;
	
	ОбновитьТаблицу();

КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияБюджетаПриИзменении(Элемент)
	
	УдалитьВсеМетки();
	
	СкрытьПоля();
	
	Если СпособЗаполненияБюджета = ПредопределенноеЗначение("Перечисление.СпособЗаполненияБюджета.Бюджет") Тогда
		УстановитьВидимостьПоБюджету();
	ИначеЕсли СпособЗаполненияБюджета = ПредопределенноеЗначение("Перечисление.СпособЗаполненияБюджета.ПланПродаж") Тогда
		УстановитьВидимостьПоПлануПродаж();
	ИначеЕсли СпособЗаполненияБюджета = ПредопределенноеЗначение("Перечисление.СпособЗаполненияБюджета.ПлатежныйКалендарь") Тогда
		УстановитьВидимостьПоПлатежномуКалендарю();
	ИначеЕсли СпособЗаполненияБюджета = ПредопределенноеЗначение("Перечисление.СпособЗаполненияБюджета.Факт") Тогда
		УстановитьВидимостьПоФакту();
	КонецЕсли;
	
	ДанныеИсточника.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхБюджетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ОтборСценарийПланирования.ТолькоПросмотр = Истина;
	Элементы.ОтборСценарийПланирования.ПодсказкаВвода = НСтр("ru='Сценарий будет выбран из бюджета'");
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		УстановитьМеткуИОтбор("Бюджет", Элемент.Родитель.Имя, ВыбранноеЗначение);
	Иначе
		Для Каждого Бюджет Из ВыбранноеЗначение Цикл
			УстановитьМеткуИОтбор("Бюджет", Элемент.Родитель.Имя, Бюджет);
		КонецЦикла;
	КонецЕсли;
		
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхПланаПродажОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ОтборСценарийПланирования.ТолькоПросмотр = Истина;
	Элементы.ОтборСценарийПланирования.ПодсказкаВвода = НСтр("ru='Сценарий будет выбран из плана продаж'");

	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		УстановитьМеткуИОтбор("ПланПродаж", Элемент.Родитель.Имя, ВыбранноеЗначение);
	Иначе
		Для Каждого ПланПродаж Из ВыбранноеЗначение Цикл
			УстановитьМеткуИОтбор("ПланПродаж", Элемент.Родитель.Имя, ПланПродаж);
		КонецЦикла;
	КонецЕсли;
		
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтбор("Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ОбновитьТаблицу();
	
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатьяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтбор("Статья", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ОбновитьТаблицу();
	
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипДенежныхСредствОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтбор("ТипДенежныхСредств", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ОбновитьТаблицу();
	
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборБанковскийСчетКассаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("Тип")Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтбор("БанковскийСчетКасса", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ОбновитьТаблицу();
	
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСценарийПланированияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособЗаполненияБюджета = ПредопределенноеЗначение("Перечисление.СпособЗаполненияБюджета.Бюджет") Тогда
		Элементы.ИсточникДанныхБюджета.ТолькоПросмотр = Истина;
		Элементы.ИсточникДанныхБюджета.ПодсказкаВвода = НСтр("ru='Бюджет будет выбран по сценарию'");
	ИначеЕсли СпособЗаполненияБюджета = ПредопределенноеЗначение("Перечисление.СпособЗаполненияБюджета.ПланПродаж") Тогда
		Элементы.ИсточникДанныхПланаПродаж.ТолькоПросмотр = Истина;
		Элементы.ИсточникДанныхПланаПродаж.ПодсказкаВвода = НСтр("ru='План продаж будет выбран по сценарию'");
	КонецЕсли;
	
	УстановитьМеткуИОтбор("СценарийПланирования", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ОбновитьТаблицу();
	
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтбор("Контрагент", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ОбновитьТаблицу();
	
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтбор("Подразделение", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ОбновитьТаблицу();
	
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПроектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтбор("Проект", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ОбновитьТаблицу();
	
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВидОтчетаНажатие(Элемент)
	
	Если Элемент.Имя = "ДекорацияДоходыРасходы" Тогда
		ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы");
	Иначе
		ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток");
	КонецЕсли;
	
	ПереключитьСтраницу(Элементы, ВидыОтчетов, Элемент.Имя);
	
	ОтфильтроватьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура СдвигДатПериодичностьПриИзменении(Элемент)
	
	ПересчитатьКоэффициентСдвигаПериода();
	
	СдвинутьДатыВДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура СдвигДатПриИзменении(Элемент)
	
	СдвинутьДатыВДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланОстаткиПриИзменении(Элемент)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДанные;
	
	ОбновитьТаблицу();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеИсточникаПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеИсточникаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеИсточникаПоказательОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДанные;
	
	ОбновитьТаблицу();
	
	Элементы.СнятьФлажки.Видимость = Истина;
	Элементы.УстановитьФлажки.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Перенести(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыОтбора = Новый Структура("Использовать", Истина);
	ФактическиеДанные = ДанныеИсточника.НайтиСтроки(ПараметрыОтбора);
	
	ПараметрыФормы.Вставить("ДанныеТЗ", ФактическиеДанные);
	ПараметрыФормы.Вставить("ВидОтчета", ВыбранныйОтчет);
	ПараметрыФормы.Вставить("СдвигМесяцев", Объект.СдвигДат * КоэффициентСдвигаДат);
	ПараметрыФормы.Вставить("Коэффициент", Объект.Коэффициент);
	
	ОповеститьОВыборе(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьПометку(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьПометку(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеИсточникаПериодПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ДанныеИсточника.ТекущиеДанные;
	ВыровнятьДатуПланированияПоПериодуПланирования(ТекСтрока.Период, ПериодичностьБюджета, Объект.ДатаНачала, Объект.ДатаОкончания);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьРеквизиты()

	Объект.СдвигДат = 1;
	Объект.СдвигДатПериодичность = Перечисления.Периодичность.Месяц;
	Объект.Коэффициент = 1;
	Объект.Процент = 100;
	Объект.ПланОстатки = Перечисления.ПланОстатки.Остатки;
	СпособЗаполненияБюджета = Перечисления.СпособЗаполненияБюджета.Бюджет;
	ВыбранныйОтчет = Перечисления.ВидыФинансовыхОтчетов.ДоходыРасходы;
	УстановитьОформление(УсловноеОформление);
	
	ВидыОтчетов.Добавить(Перечисления.ВидыФинансовыхОтчетов.ДоходыРасходы, "ДоходыРасходы");
	ВидыОтчетов.Добавить(Перечисления.ВидыФинансовыхОтчетов.ДенежныйПоток, "ДенежныйПоток");
	
	КартинкиДоходРасход = Новый ФиксированнаяСтруктура("Доход, Расход", БиблиотекаКартинок.ПоказательДоход, БиблиотекаКартинок.ПоказательРасход);
	ДоступныеПериодичности.Добавить(Перечисления.Периодичность.Месяц);
	ДоступныеПериодичности.Добавить(Перечисления.Периодичность.Квартал);
	ДоступныеПериодичности.Добавить(Перечисления.Периодичность.Полугодие);
	ДоступныеПериодичности.Добавить(Перечисления.Периодичность.Год);
	
	Если Параметры.Свойство("БюджетСсылка") Тогда
		Параметры.Свойство("ПериодичностьБюджета", Объект.СдвигДатПериодичность);
		Параметры.Свойство("ПериодичностьБюджета", ПериодичностьБюджета);
		Параметры.Свойство("ПериодБюджета", ПериодБюджета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоля()

	Элементы.ОтборСтатья.Видимость = Ложь;
	Элементы.ОтборПроект.Видимость = Ложь;
	Элементы.ОтборБанковскийСчетКасса.Видимость = Ложь;
	Элементы.ОтборТипДенежныхСредств.Видимость = Ложь;
	Элементы.ОтборПодразделение.Видимость = Ложь;
	Элементы.ОтборКонтрагент.Видимость = Ложь;
	Элементы.ОтборСценарийПланирования.Видимость = Ложь;
	Элементы.ДанныеИсточникаСценарийПланирования.Видимость = Ложь;
	Элементы.ГруппаДекорацииВидовОтчета.Видимость = Ложь;
	Элементы.ПланОстатки.Видимость = Ложь;
	Элементы.ПредставлениеПериода.Видимость = Ложь;
	Элементы.ГруппаИсточникиДанных.Видимость = Ложь;
	Элементы.ИсточникДанныхБюджета.Видимость = Ложь;
	Элементы.ИсточникДанныхПланаПродаж.Видимость = Ложь;
	
	Элементы.ОтборСценарийПланирования.ТолькоПросмотр = Ложь;
	Элементы.ОтборСценарийПланирования.ПодсказкаВвода = НСтр("ru='Сценарий планирования'");

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоБюджету()

	Элементы.ГруппаИсточникиДанных.Видимость = Истина;
	Элементы.ИсточникДанныхБюджета.Видимость = Истина;
	Элементы.ОтборПроект.Видимость = Истина;
	Элементы.ОтборПодразделение.Видимость = Истина;
	Элементы.ОтборСценарийПланирования.Видимость = Истина;
	Элементы.ДанныеИсточникаСценарийПланирования.Видимость = Истина;
	Элементы.ГруппаДекорацииВидовОтчета.Видимость = Истина;
	
	ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы");
	ПереключитьСтраницу(Элементы, ВидыОтчетов, "ДекорацияДоходыРасходы");

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоПлануПродаж()

	Элементы.ГруппаИсточникиДанных.Видимость = Истина;
	Элементы.ОтборПодразделение.Видимость = Истина;
	Элементы.ИсточникДанныхПланаПродаж.Видимость = Истина;
	Элементы.ОтборСценарийПланирования.Видимость = Истина;
	Элементы.ДанныеИсточникаСценарийПланирования.Видимость = Истина;
	Элементы.ГруппаДекорацииВидовОтчета.Видимость = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоПлатежномуКалендарю()

	Элементы.ГруппаИсточникиДанных.Видимость = Ложь;
	Элементы.ОтборСтатья.Видимость = Истина;
	Элементы.ОтборБанковскийСчетКасса.Видимость = Истина;
	Элементы.ОтборТипДенежныхСредств.Видимость = Истина;
	Элементы.ОтборКонтрагент.Видимость = Истина;
	Элементы.ПланОстатки.Видимость = Истина;
	Элементы.ПредставлениеПериода.Видимость = Истина;
	
	ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток");

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоФакту()

	Элементы.ОтборПроект.Видимость = Истина;
	Элементы.ОтборПодразделение.Видимость = Истина;
	Элементы.ГруппаДекорацииВидовОтчета.Видимость = Истина;
	Элементы.ПредставлениеПериода.Видимость = Истина;

КонецПроцедуры

&НаСервере
Процедура ПересчетКоэффициента(ЭтоПроцент)

	Если ЭтоПроцент Тогда
		Объект.Коэффициент = Объект.Процент / 100;
	Иначе
		Объект.Процент = Объект.Коэффициент * 100;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьОформление(УсловноеОформление)
	
	ИмяЭлемента = "ДанныеИсточника";
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяЭлемента + ".ТипПоказателя", Перечисления.ТипыПоказателейБизнеса.Доход, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяЭлемента);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", Новый Цвет(238,255,240));
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяЭлемента + ".ТипПоказателя", Перечисления.ТипыПоказателейБизнеса.Расход, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяЭлемента);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", Новый Цвет(255,238,240));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМеткуИОтбор(ИмяПоляОтбора, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли;
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбора, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Неопределено, МеткаИД,,, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	
	УдалитьМеткуОтбора(МеткаИД);
	
	ОбновитьТаблицу();
	
	ОбновитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВсеМетки()
	
	КоличествоМеток = ДанныеМеток.Количество();
	
	Для Сч = 0 По КоличествоМеток - 1 Цикл
		УдалитьМеткуОтбора("0");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьСтраницу(Элементы, ВидыОтчетов, АктивнаяСтраница)
	
	Для каждого ВидОтчета Из ВидыОтчетов Цикл
		
		ИмяДекорации = "Декорация" + ВидОтчета.Представление;
		
		Если ИмяДекорации = АктивнаяСтраница Тогда
			Элементы[ИмяДекорации].Шрифт = Новый Шрифт(Элементы[ИмяДекорации].Шрифт,,,Истина);
		Иначе
			Элементы[ИмяДекорации].Шрифт = Новый Шрифт(Элементы[ИмяДекорации].Шрифт,,,Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоэффициентСдвигаПериода()

	Если Объект.СдвигДатПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		КоэффициентСдвигаДат = 1;
	ИначеЕсли Объект.СдвигДатПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		КоэффициентСдвигаДат = 3;
	ИначеЕсли Объект.СдвигДатПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		КоэффициентСдвигаДат = 6;
	ИначеЕсли Объект.СдвигДатПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		КоэффициентСдвигаДат = 12;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСумму()
	
	Для каждого Строка Из ДанныеИсточника Цикл
		
		Если Строка.Использовать Тогда
			Строка.Сумма = Строка.ИсходнаяСумма * Объект.Коэффициент;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДопустимыеПериодичности()
	
	Элементы.СдвигДатПериодичность.СписокВыбора.Очистить();
	
	ТекущаяПериодичность = ДоступныеПериодичности.НайтиПоЗначению(Объект.СдвигДатПериодичность);
	
	Для Сч = ДоступныеПериодичности.Индекс(ТекущаяПериодичность) По ДоступныеПериодичности.Количество() - 1 Цикл
	
		Элементы.СдвигДатПериодичность.СписокВыбора.Добавить(ДоступныеПериодичности[Сч].Значение);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицу()
	
	Запрос = Новый Запрос();
	Запрос.Текст = СформироватьТекстЗапроса(СпособЗаполненияБюджета);
	ДобавитьПараметрыМетокВЗапрос(Запрос);
	
	Если СпособЗаполненияБюджета = Перечисления.СпособЗаполненияБюджета.ПлатежныйКалендарь 
		ИЛИ СпособЗаполненияБюджета = Перечисления.СпособЗаполненияБюджета.Факт Тогда
		Запрос.УстановитьПараметр("НачалоПериода", ОтборПериод.ДатаНачала);
		Запрос.УстановитьПараметр("КонецПериода", ОтборПериод.ДатаОкончания);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗначений = РезультатЗапроса.Выгрузить();
	
	ПересчитатьСдвигПериода();
	ЗаполнитьТаблицуИзТЗ(ТаблицаЗначений);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуИзТЗ(ТаблицаЗначений)

	ДанныеИсточника.Очистить();
	
	Для Каждого СтрокаТЗ Из ТаблицаЗначений Цикл
		Если Объект.ПланОстатки = Перечисления.ПланОстатки.План 
			И СпособЗаполненияБюджета = Перечисления.СпособЗаполненияБюджета.ПлатежныйКалендарь Тогда
			Сумма = СтрокаТЗ.СуммаПлан;
		Иначе
			Сумма = СтрокаТЗ.Сумма;
		КонецЕсли;
		Если Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		ТекСтрока = ДанныеИсточника.Добавить();
		ЗаполнитьЗначенияСвойств(ТекСтрока, СтрокаТЗ);
		ТекСтрока.ИсходнаяСумма = Сумма;
		ТекСтрока.Сумма = ТекСтрока.ИсходнаяСумма * Объект.Коэффициент;
		ТекСтрока.Период = ДобавитьМесяц(СтрокаТЗ.ИсходныйПериод, Объект.СдвигДат * КоэффициентСдвигаДат);
		ВыровнятьДатуПланированияПоПериодуПланирования(ТекСтрока.Период, ПериодичностьБюджета, Объект.ДатаНачала, Объект.ДатаОкончания);
		ТекСтрока.Картинка = КартинкиДоходРасход[Строка(ТекСтрока.ТипПоказателя)];
		ТекСтрока.Использовать = Истина;
	КонецЦикла;
	
	ОтфильтроватьДанные();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрыМетокВЗапрос(Запрос, ВидОтчета = Неопределено)
	
	ПараметрыЗапроса = Новый Структура;
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	НомерПакета = СхемаЗапроса.ПакетЗапросов.Количество() - 1;
	ИндексПериодичности = 2;
	КоличествоПараметровРегистра = 4;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	ПакетЗапроса = СхемаЗапроса.ПакетЗапросов[НомерПакета];
	
	Если СпособЗаполненияБюджета = Перечисления.СпособЗаполненияБюджета.ПланПродаж Тогда
		Для Каждого ОператорыЗапроса Из ПакетЗапроса.Операторы Цикл
		
			Отбор = ОператорыЗапроса.Отбор;
			МассивОтборов = Новый Массив;
			
			ИсточникДанных = ОператорыЗапроса.Источники[1].Источник;
			
			ИмяТаблицы = ИсточникДанных.Псевдоним;
			
			Для каждого СтрокаМетки Из ДанныеМеток Цикл
			
				ИмяИзмерения = СтрокаМетки.ИмяПоляОтбора;
				
				Если СтрокаМетки.ИмяПоляОтбора = "Подразделение" Тогда // Не локализуется
					ИмяИзмерения = "СтруктурнаяЕдиница";
				ИначеЕсли СтрокаМетки.ИмяПоляОтбора = "ПланПродаж" Тогда
					ИмяИзмерения = "Регистратор";
				КонецЕсли;
				
				
				СтрокаОтбора = СтрШаблон("%1.%2 В (&%3)", ИмяТаблицы, ИмяИзмерения, СтрокаМетки.ИмяПоляОтбора);
				
				
				Если МассивОтборов.Найти(СтрокаОтбора) = Неопределено Тогда
					МассивОтборов.Добавить(СтрокаОтбора);
				КонецЕсли;
				
				
				Если НЕ ПараметрыЗапроса.Свойство(СтрокаМетки.ИмяПоляОтбора) Тогда
					ПараметрыЗапроса.Вставить(СтрокаМетки.ИмяПоляОтбора, Новый Массив);
				КонецЕсли;
				
				ПараметрыЗапроса[СтрокаМетки.ИмяПоляОтбора].Добавить(СтрокаМетки.Метка);
			
			КонецЦикла;
		
			Для каждого СтрокаОтбора Из МассивОтборов Цикл
				Отбор.Добавить(СтрокаОтбора);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли СпособЗаполненияБюджета = Перечисления.СпособЗаполненияБюджета.Факт Тогда
	
		Для каждого ОператорыЗапроса Из ПакетЗапроса.Операторы Цикл
			
			ИсточникДанных = Неопределено;
			Отбор = ОператорыЗапроса.Отбор;
			
			Для каждого Элемент Из ОператорыЗапроса.Источники Цикл
				
				Если СтрНайти(Элемент.Источник.ИмяТаблицы, "РегистрНакопления") <> 0 
					ИЛИ СтрНайти(Элемент.Источник.ИмяТаблицы, "Управленческий") <> 0 Тогда // Не локализуется
					ИсточникДанных = Элемент.Источник;
					Прервать;
				КонецЕсли; 
				
			КонецЦикла;
			
			Если ИсточникДанных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяТаблицы = ИсточникДанных.Псевдоним;
			
			ЭтоУправленческий = СтрНайти(ИсточникДанных.ИмяТаблицы, "Управленческий") <> 0;
			
			Если ЭтоУправленческий Тогда
				КоличествоПараметровРегистра = 6;
			КонецЕсли;
			
			Если ИсточникДанных.Параметры.Количество() = КоличествоПараметровРегистра Тогда
				// Устанавливаем периодичность из бюджета
				Выражение = Новый ВыражениеСхемыЗапроса(Строка(Объект.СдвигДатПериодичность));
				ИсточникДанных.Параметры[ИндексПериодичности].Выражение = Выражение;
			КонецЕсли;
			
			МассивОтборов = Новый Массив;
			
			Для каждого СтрокаМетки Из ДанныеМеток Цикл
				
				ИмяИзмерения = СтрокаМетки.ИмяПоляОтбора;
				
				Если СтрокаМетки.ИмяПоляОтбора = "Подразделение" Тогда // Не локализуется
					Если СтрНайти(ИсточникДанных.ИмяТаблицы, "Финансовый") <> 0 Тогда
						ИмяИзмерения = "СтруктурнаяЕдиница";
					ИначеЕсли ЭтоУправленческий Тогда
						СтрокаОтбора = "ЛОЖЬ";
						Отбор.Добавить(СтрокаОтбора);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаМетки.ИмяПоляОтбора = "Проект" И ЭтоУправленческий Тогда
				
					СтрокаОтбора = "ЛОЖЬ";
					Отбор.Добавить(СтрокаОтбора);
					Продолжить;
				
				КонецЕсли;
				
				СтрокаОтбора = СтрШаблон("%1.%2 В (&%3)", ИмяТаблицы, ИмяИзмерения, СтрокаМетки.ИмяПоляОтбора);
				
				Если МассивОтборов.Найти(СтрокаОтбора) = Неопределено Тогда
					МассивОтборов.Добавить(СтрокаОтбора);
				КонецЕсли;
				
				
				Если НЕ ПараметрыЗапроса.Свойство(СтрокаМетки.ИмяПоляОтбора) Тогда
					ПараметрыЗапроса.Вставить(СтрокаМетки.ИмяПоляОтбора, Новый Массив);
				КонецЕсли;
				
				ПараметрыЗапроса[СтрокаМетки.ИмяПоляОтбора].Добавить(СтрокаМетки.Метка);
			КонецЦикла;
			
			Для каждого СтрокаОтбора Из МассивОтборов Цикл
				Отбор.Добавить(СтрокаОтбора);
			КонецЦикла;
			
		КонецЦикла;
	ИначеЕсли СпособЗаполненияБюджета = Перечисления.СпособЗаполненияБюджета.Бюджет Тогда
		Для Каждого ОператорыЗапроса Из ПакетЗапроса.Операторы Цикл
			
			Отбор = ОператорыЗапроса.Отбор;
			МассивОтборов = Новый Массив;
			
			ИсточникДанных = ОператорыЗапроса.Источники[1].Источник;
			
			ИмяТаблицы = ИсточникДанных.Псевдоним;
			
			Для каждого СтрокаМетки Из ДанныеМеток Цикл
			
				Если СтрокаМетки.ИмяПоляОтбора = "Подразделение" И ИмяТаблицы = "ДоходыИРасходыПрогноз" Тогда // Не локализуется
					ИмяИзмерения = "СтруктурнаяЕдиница";
				ИначеЕсли СтрокаМетки.ИмяПоляОтбора = "Бюджет" Тогда
					ИмяИзмерения = "Регистратор";
				Иначе
					ИмяИзмерения = СтрокаМетки.ИмяПоляОтбора;
				КонецЕсли;
				
				Если ИмяИзмерения = "Контрагент" Тогда
					СтрокаОтбора = СтрШаблон("%1.%2.%3 В (&%4)", ИмяТаблицы, "СчетНаОплату", ИмяИзмерения, СтрокаМетки.ИмяПоляОтбора);
				Иначе
					СтрокаОтбора = СтрШаблон("%1.%2 В (&%3)", ИмяТаблицы, ИмяИзмерения, СтрокаМетки.ИмяПоляОтбора);
				КонецЕсли;
				
				Если МассивОтборов.Найти(СтрокаОтбора) = Неопределено Тогда
					МассивОтборов.Добавить(СтрокаОтбора);
				КонецЕсли;
				
				
				Если НЕ ПараметрыЗапроса.Свойство(СтрокаМетки.ИмяПоляОтбора) Тогда
					ПараметрыЗапроса.Вставить(СтрокаМетки.ИмяПоляОтбора, Новый Массив);
				КонецЕсли;
				
				ПараметрыЗапроса[СтрокаМетки.ИмяПоляОтбора].Добавить(СтрокаМетки.Метка);
			
			КонецЦикла;
		
			Для каждого СтрокаОтбора Из МассивОтборов Цикл
				Отбор.Добавить(СтрокаОтбора);
			КонецЦикла;
			
		КонецЦикла;
	Иначе
		Для Каждого ОператорыЗапроса Из ПакетЗапроса.Операторы Цикл
			
			Отбор = ПакетЗапроса.Операторы[0].Отбор;
			МассивОтборов = Новый Массив;
			
			ИсточникДанных = Неопределено;
			
			Для каждого Элемент Из ОператорыЗапроса.Источники Цикл
				
				Если СтрНайти(Элемент.Источник.ИмяТаблицы, "РегистрНакопления") <> 0 
					ИЛИ СтрНайти(Элемент.Источник.ИмяТаблицы, "Управленческий") <> 0 Тогда // Не локализуется
					ИсточникДанных = Элемент.Источник;
					Прервать;
				КонецЕсли; 
				
			КонецЦикла;
			
			Если ИсточникДанных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяТаблицы = ИсточникДанных.Псевдоним;
			
			Если ИсточникДанных.Параметры.Количество() = КоличествоПараметровРегистра Тогда
				// Устанавливаем периодичность из бюджета
				Выражение = Новый ВыражениеСхемыЗапроса(Строка(Объект.СдвигДатПериодичность));
				ИсточникДанных.Параметры[ИндексПериодичности].Выражение = Выражение;
			КонецЕсли;
			
			Для каждого СтрокаМетки Из ДанныеМеток Цикл
			
				Если СтрокаМетки.ИмяПоляОтбора = "Подразделение" Тогда // Не локализуется
					ИмяИзмерения = "СтруктурнаяЕдиница";
				Иначе
					ИмяИзмерения = СтрокаМетки.ИмяПоляОтбора;
				КонецЕсли;
				
				Если ИмяИзмерения = "Контрагент" Тогда
					
					СтрокаОтбора = СтрШаблон("%1.%2.%3 В (&%4)", ИмяТаблицы, "СчетНаОплату", ИмяИзмерения, СтрокаМетки.ИмяПоляОтбора);
					
				Иначе
					
					СтрокаОтбора = СтрШаблон("%1.%2 В (&%3)", ИмяТаблицы, ИмяИзмерения, СтрокаМетки.ИмяПоляОтбора);
					
				КонецЕсли;
				
				Если МассивОтборов.Найти(СтрокаОтбора) = Неопределено Тогда
					МассивОтборов.Добавить(СтрокаОтбора);
				КонецЕсли;
				
				
				Если НЕ ПараметрыЗапроса.Свойство(СтрокаМетки.ИмяПоляОтбора) Тогда
					ПараметрыЗапроса.Вставить(СтрокаМетки.ИмяПоляОтбора, Новый Массив);
				КонецЕсли;
				
				ПараметрыЗапроса[СтрокаМетки.ИмяПоляОтбора].Добавить(СтрокаМетки.Метка);
			
			КонецЦикла;
		
			Для каждого СтрокаОтбора Из МассивОтборов Цикл
				Отбор.Добавить(СтрокаОтбора);
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Для каждого КлючЗначение Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьТекстЗапроса(СпособЗаполненияБюджета)

	Если СпособЗаполненияБюджета = Перечисления.СпособЗаполненияБюджета.ПлатежныйКалендарь Тогда
		Возврат ЗапросКПлатежномуКалендарю();
	ИначеЕсли СпособЗаполненияБюджета = Перечисления.СпособЗаполненияБюджета.Бюджет Тогда
		Возврат ЗапросКБюджету();
	ИначеЕсли СпособЗаполненияБюджета = Перечисления.СпособЗаполненияБюджета.ПланПродаж Тогда
		Возврат ЗапросКПлануПродаж();
	Иначе
		Возврат ЗапросКФакту();
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ЗапросКПлатежномуКалендарю()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоказателиБизнеса.Ссылка КАК Ссылка,
	|	ПоказателиБизнеса.ИсточникДанных КАК ИсточникДанных,
	|	ПоказателиБизнеса.СпособПолученияДанныхИсточника КАК СпособПолученияДанныхИсточника,
	|	ПоказателиБизнеса.ТипПоказателя КАК ТипПоказателя,
	|	ПоказателиБизнеса.Порядок КАК Порядок
	|ПОМЕСТИТЬ ПоказателиВТ
	|ИЗ
	|	Справочник.ПоказателиБизнеса КАК ПоказателиБизнеса
	|ГДЕ
	|	НЕ ПоказателиБизнеса.ПометкаУдаления
	|	И (ПоказателиБизнеса.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейБизнеса.Доход)
	|			ИЛИ ПоказателиБизнеса.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейБизнеса.Расход))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежныйКалендарьОбороты.Статья КАК Статья,
	|	ПоказателиВТ.Ссылка КАК Показатель,
	|	ПлатежныйКалендарьОбороты.Период КАК ИсходныйПериод,
	|	ВЫБОР
	|		КОГДА ПоказателиВТ.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.ДтОборот)
	|			ТОГДА ВЫБОР
	|					КОГДА ПлатежныйКалендарьОбороты.СуммаОборот - ПлатежныйКалендарьОбороты.СуммаОплатыОборот > 0
	|						ТОГДА ПлатежныйКалендарьОбороты.СуммаОборот - ПлатежныйКалендарьОбороты.СуммаОплатыОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ПоказателиВТ.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.КтОборот)
	|			ТОГДА ВЫБОР
	|					КОГДА ПлатежныйКалендарьОбороты.СуммаОборот - ПлатежныйКалендарьОбороты.СуммаОплатыОборот < 0
	|						ТОГДА ПлатежныйКалендарьОбороты.СуммаОборот - ПлатежныйКалендарьОбороты.СуммаОплатыОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ПоказателиВТ.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.ДтМинусКтОборот)
	|			ТОГДА ПлатежныйКалендарьОбороты.СуммаОборот - ПлатежныйКалендарьОбороты.СуммаОплатыОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ПоказателиВТ.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.ДтОборот)
	|			ТОГДА ВЫБОР
	|					КОГДА ПлатежныйКалендарьОбороты.СуммаОборот > 0
	|						ТОГДА ПлатежныйКалендарьОбороты.СуммаОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ПоказателиВТ.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.КтОборот)
	|			ТОГДА ВЫБОР
	|					КОГДА ПлатежныйКалендарьОбороты.СуммаОборот < 0
	|						ТОГДА ПлатежныйКалендарьОбороты.СуммаОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ПоказателиВТ.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.ДтМинусКтОборот)
	|			ТОГДА ПлатежныйКалендарьОбороты.СуммаОборот - ПлатежныйКалендарьОбороты.СуммаОплатыОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаПлан,
	|	ВЫБОР
	|		КОГДА ПоказателиВТ.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.ДтОборот)
	|			ТОГДА ВЫБОР
	|					КОГДА ПлатежныйКалендарьОбороты.СуммаОплатыОборот > 0
	|						ТОГДА ПлатежныйКалендарьОбороты.СуммаОплатыОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ПоказателиВТ.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.КтОборот)
	|			ТОГДА ВЫБОР
	|					КОГДА ПлатежныйКалендарьОбороты.СуммаОплатыОборот < 0
	|						ТОГДА ПлатежныйКалендарьОбороты.СуммаОплатыОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ПоказателиВТ.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.ДтМинусКтОборот)
	|			ТОГДА ПлатежныйКалендарьОбороты.СуммаОборот - ПлатежныйКалендарьОбороты.СуммаОплатыОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОплаты,
	|	ПоказателиВТ.ТипПоказателя КАК ТипПоказателя,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток) КАК ВидОтчета,
	|	ПоказателиВТ.Порядок КАК Порядок
	|ИЗ
	|	ПоказателиВТ КАК ПоказателиВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПлатежныйКалендарь.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Месяц,
	|				СчетНаОплату <> НЕОПРЕДЕЛЕНО
	|					И СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка)
	|					И СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|					И СчетНаОплату <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					И СчетНаОплату <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) КАК ПлатежныйКалендарьОбороты
	|		ПО ПоказателиВТ.ИсточникДанных = ПлатежныйКалендарьОбороты.Статья
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсходныйПериод,
	|	Порядок,
	|	ТипПоказателя УБЫВ";
	
	Возврат ТекстЗапроса;

КонецФункции

&НаСервереБезКонтекста
Функция ЗапросКПлануПродаж()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоказателиБизнеса.Ссылка КАК Ссылка,
	|	ПоказателиБизнеса.ИсточникДанных КАК ИсточникДанных,
	|	ПоказателиБизнеса.Порядок КАК Порядок
	|ПОМЕСТИТЬ ПоказателиВТ
	|ИЗ
	|	Справочник.ПоказателиБизнеса КАК ПоказателиБизнеса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоказателиВТ.Ссылка КАК Показатель,
	|	ПланыПродаж.Период КАК ИсходныйПериод,
	|	ПланыПродаж.СценарийПланирования КАК СценарийПланирования,
	|	СУММА(ПланыПродаж.Сумма) КАК Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейБизнеса.Доход) КАК ТипПоказателя,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы) КАК ВидОтчета,
	|	ПоказателиВТ.Порядок КАК Порядок
	|ИЗ
	|	ПоказателиВТ КАК ПоказателиВТ,
	|	РегистрНакопления.ПланыПродаж КАК ПланыПродаж
	|ГДЕ
	|	ПоказателиВТ.ИсточникДанных = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВыручкаОтПродаж)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыПродаж.Период,
	|	ПоказателиВТ.Ссылка,
	|	ПланыПродаж.СценарийПланирования,
	|	ПоказателиВТ.Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоказателиВТ.Ссылка,
	|	ПланыПродаж.Период,
	|	ПланыПродаж.СценарийПланирования,
	|	СУММА(ПланыПродаж.Сумма),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейБизнеса.Доход),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток),
	|	ПоказателиВТ.Порядок
	|ИЗ
	|	ПоказателиВТ КАК ПоказателиВТ,
	|	РегистрНакопления.ПланыПродаж КАК ПланыПродаж
	|ГДЕ
	|	ПоказателиВТ.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыПродаж.Период,
	|	ПоказателиВТ.Ссылка,
	|	ПланыПродаж.СценарийПланирования,
	|	ПоказателиВТ.Порядок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсходныйПериод,
	|	Порядок,
	|	ТипПоказателя УБЫВ";
	
	Возврат ТекстЗапроса;

КонецФункции

&НаСервереБезКонтекста
Функция ЗапросКБюджету()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоказателиБизнеса.Ссылка КАК Ссылка,
	|	ПоказателиБизнеса.ТипПоказателя КАК ТипПоказателя,
	|	ПоказателиБизнеса.ИсточникДанных КАК ИсточникДанных,
	|	ПоказателиБизнеса.СпособПолученияДанныхИсточника КАК СпособПолученияДанныхИсточника,
	|	ПоказателиБизнеса.Порядок КАК Порядок
	|ПОМЕСТИТЬ ПоказателиВТ
	|ИЗ
	|	Справочник.ПоказателиБизнеса КАК ПоказателиБизнеса
	|ГДЕ
	|	(ПоказателиБизнеса.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейБизнеса.Доход)
	|			ИЛИ ПоказателиБизнеса.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейБизнеса.Расход))
	|	И НЕ ПоказателиБизнеса.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыИРасходыПрогноз.СуммаДоходов КАК СуммаДоходов,
	|	ДоходыИРасходыПрогноз.Регистратор КАК Регистратор,
	|	ДоходыИРасходыПрогноз.Период КАК ИсходныйПериод,
	|	ПоказателиВТ.ТипПоказателя КАК ТипПоказателя,
	|	СУММА(ВЫБОР
	|			КОГДА ПоказателиВТ.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейБизнеса.Доход)
	|				ТОГДА ВЫБОР
	|						КОГДА ДоходыИРасходыПрогноз.СуммаДоходов > 0
	|							ТОГДА ДоходыИРасходыПрогноз.СуммаДоходов
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОГДА ПоказателиВТ.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейБизнеса.Расход)
	|				ТОГДА ВЫБОР
	|						КОГДА ДоходыИРасходыПрогноз.СуммаРасходов > 0
	|							ТОГДА -ДоходыИРасходыПрогноз.СуммаРасходов
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма,
	|	ДоходыИРасходыПрогноз.СценарийПланирования КАК СценарийПланирования,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы) КАК ВидОтчета,
	|	ПоказателиВТ.Ссылка КАК Показатель,
	|	ПоказателиВТ.Порядок КАК Порядок
	|ИЗ
	|	ПоказателиВТ КАК ПоказателиВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДоходыИРасходыПрогноз КАК ДоходыИРасходыПрогноз
	|		ПО ПоказателиВТ.ИсточникДанных = ДоходыИРасходыПрогноз.СчетУчета
	|ГДЕ
	|	ДоходыИРасходыПрогноз.СценарийПланирования <> ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыИРасходыПрогноз.Период,
	|	ПоказателиВТ.Ссылка,
	|	ДоходыИРасходыПрогноз.СценарийПланирования,
	|	ПоказателиВТ.Порядок,
	|	ДоходыИРасходыПрогноз.СуммаДоходов,
	|	ДоходыИРасходыПрогноз.Регистратор,
	|	ПоказателиВТ.ТипПоказателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияДенежныхСредств.СуммаПриход,
	|	ДвиженияДенежныхСредств.Регистратор,
	|	ДвиженияДенежныхСредств.Период,
	|	ПоказателиВТ.ТипПоказателя,
	|	СУММА(ВЫБОР
	|			КОГДА ПоказателиВТ.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.ДтОборот)
	|				ТОГДА ВЫБОР
	|						КОГДА ДвиженияДенежныхСредств.СуммаПриход > 0
	|							ТОГДА ДвиженияДенежныхСредств.СуммаПриход
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОГДА ПоказателиВТ.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.КтОборот)
	|				ТОГДА ВЫБОР
	|						КОГДА ДвиженияДенежныхСредств.СуммаРасход > 0
	|							ТОГДА -ДвиженияДенежныхСредств.СуммаРасход
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	ДвиженияДенежныхСредств.СценарийПланирования,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток),
	|	ПоказателиВТ.Ссылка,
	|	ПоказателиВТ.Порядок
	|ИЗ
	|	ПоказателиВТ КАК ПоказателиВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныхСредств КАК ДвиженияДенежныхСредств
	|		ПО ПоказателиВТ.ИсточникДанных = ДвиженияДенежныхСредств.Статья
	|ГДЕ
	|	ДвиженияДенежныхСредств.СценарийПланирования <> ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДенежныхСредств.Период,
	|	ДвиженияДенежныхСредств.СценарийПланирования,
	|	ПоказателиВТ.Ссылка,
	|	ПоказателиВТ.Порядок,
	|	ДвиженияДенежныхСредств.СуммаПриход,
	|	ДвиженияДенежныхСредств.Регистратор,
	|	ПоказателиВТ.ТипПоказателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсходныйПериод,
	|	Порядок,
	|	ТипПоказателя УБЫВ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапросКФакту()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоказателиБизнеса.Ссылка КАК Показатель,
	|	ПоказателиБизнеса.Родитель КАК Родитель,
	|	ПоказателиБизнеса.Порядок КАК Порядок,
	|	ПоказателиБизнеса.ТипПоказателя КАК ТипПоказателя,
	|	ПоказателиБизнеса.ИсточникДанных КАК ИсточникДанных,
	|	ПоказателиБизнеса.СпособПолученияДанныхИсточника КАК СпособПолученияДанныхИсточника,
	|	ПоказателиБизнеса.ИдентификаторПоказателя КАК ИдентификаторПоказателя,
	|	ПоказателиБизнеса.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ ПоказателиБизнеса
	|ИЗ
	|	Справочник.ПоказателиБизнеса КАК ПоказателиБизнеса
	|ГДЕ
	|	(ПоказателиБизнеса.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейБизнеса.Доход)
	|			ИЛИ ПоказателиБизнеса.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейБизнеса.Расход))
	|	И НЕ ПоказателиБизнеса.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДвиженияДенежныхСредствОбороты.Период КАК ИсходныйПериод,
	|	ПоказателиБизнеса.Показатель КАК Показатель,
	|	ПоказателиБизнеса.ИдентификаторПоказателя КАК ИдентификаторПоказателя,
	|	СУММА(ВЫБОР
	|			КОГДА ПоказателиБизнеса.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.ДтОборот)
	|				ТОГДА ДвиженияДенежныхСредствОбороты.СуммаПриходОборот
	|			КОГДА ПоказателиБизнеса.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.КтОборот)
	|				ТОГДА ДвиженияДенежныхСредствОбороты.СуммаРасходОборот
	|			КОГДА ПоказателиБизнеса.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.ДтМинусКтОборот)
	|				ТОГДА ДвиженияДенежныхСредствОбороты.СуммаПриходОборот - ДвиженияДенежныхСредствОбороты.СуммаРасходОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ * ВЫБОР
	|			КОГДА ПоказателиБизнеса.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейБизнеса.Доход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ * ВЫБОР
	|			КОГДА ПоказателиБизнеса.Коэффициент = 0
	|				ТОГДА 1
	|			ИНАЧЕ ПоказателиБизнеса.Коэффициент
	|		КОНЕЦ) КАК Сумма,
	|	ДвиженияДенежныхСредствОбороты.СценарийПланирования КАК СценарийПланирования,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток) КАК ВидОтчета,
	|	ДвиженияДенежныхСредствОбороты.Организация КАК Организация,
	|	ПоказателиБизнеса.ТипПоказателя КАК ТипПоказателя
	|ИЗ
	|	ПоказателиБизнеса КАК ПоказателиБизнеса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&НачалоПериода, &КонецПериода, МЕСЯЦ, СценарийПланирования = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический)) КАК ДвиженияДенежныхСредствОбороты
	|		ПО ПоказателиБизнеса.ИсточникДанных = ДвиженияДенежныхСредствОбороты.Статья
	|ГДЕ
	|	ДвиженияДенежныхСредствОбороты.Период <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДенежныхСредствОбороты.Период,
	|	ПоказателиБизнеса.Показатель,
	|	ПоказателиБизнеса.ИдентификаторПоказателя,
	|	ДвиженияДенежныхСредствОбороты.СценарийПланирования,
	|	ПоказателиБизнеса.ТипПоказателя,
	|	ДвиженияДенежныхСредствОбороты.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоходыИРасходыОбороты.Период,
	|	ПоказателиБизнеса.Показатель,
	|	ПоказателиБизнеса.ИдентификаторПоказателя,
	|	СУММА(ВЫБОР
	|			КОГДА ПоказателиБизнеса.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.ДтОборот)
	|				ТОГДА ДоходыИРасходыОбороты.СуммаДоходовОборот
	|			КОГДА ПоказателиБизнеса.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.КтОборот)
	|				ТОГДА ДоходыИРасходыОбороты.СуммаРасходовОборот
	|			КОГДА ПоказателиБизнеса.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.ДтМинусКтОборот)
	|				ТОГДА ДоходыИРасходыОбороты.СуммаДоходовОборот - ДоходыИРасходыОбороты.СуммаРасходовОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ * ВЫБОР
	|			КОГДА ПоказателиБизнеса.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейБизнеса.Доход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ * ВЫБОР
	|			КОГДА ПоказателиБизнеса.Коэффициент = 0
	|				ТОГДА 1
	|			ИНАЧЕ ПоказателиБизнеса.Коэффициент
	|		КОНЕЦ),
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы),
	|	ДоходыИРасходыОбороты.Организация,
	|	ПоказателиБизнеса.ТипПоказателя
	|ИЗ
	|	ПоказателиБизнеса КАК ПоказателиБизнеса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФинансовыйРезультат.Обороты(&НачалоПериода, &КонецПериода, МЕСЯЦ, ) КАК ДоходыИРасходыОбороты
	|		ПО ПоказателиБизнеса.ИсточникДанных = ДоходыИРасходыОбороты.СчетУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыИРасходыОбороты.Период,
	|	ПоказателиБизнеса.Показатель,
	|	ПоказателиБизнеса.ИдентификаторПоказателя,
	|	ДоходыИРасходыОбороты.Организация,
	|	ПоказателиБизнеса.ТипПоказателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческийОбороты.Период,
	|	ПоказателиБизнеса.Показатель,
	|	ПоказателиБизнеса.ИдентификаторПоказателя,
	|	СУММА(ВЫБОР
	|			КОГДА ПоказателиБизнеса.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.ДтОборот)
	|				ТОГДА УправленческийОбороты.СуммаОборотДт
	|			КОГДА ПоказателиБизнеса.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.КтОборот)
	|				ТОГДА УправленческийОбороты.СуммаОборотКт
	|			КОГДА ПоказателиБизнеса.СпособПолученияДанныхИсточника = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияДанныхИсточника.ДтМинусКтОборот)
	|				ТОГДА УправленческийОбороты.СуммаОборотДт - УправленческийОбороты.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ * ВЫБОР
	|			КОГДА ПоказателиБизнеса.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейБизнеса.Доход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ * ВЫБОР
	|			КОГДА ПоказателиБизнеса.Коэффициент = 0
	|				ТОГДА 1
	|			ИНАЧЕ ПоказателиБизнеса.Коэффициент
	|		КОНЕЦ),
	|	УправленческийОбороты.СценарийПланирования,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы),
	|	УправленческийОбороты.Организация,
	|	ПоказателиБизнеса.ТипПоказателя
	|ИЗ
	|	ПоказателиБизнеса КАК ПоказателиБизнеса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Обороты(&НачалоПериода, &КонецПериода, МЕСЯЦ, , СценарийПланирования = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический), ) КАК УправленческийОбороты
	|		ПО ПоказателиБизнеса.ИсточникДанных = УправленческийОбороты.Счет
	|ГДЕ
	|	УправленческийОбороты.Период <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	УправленческийОбороты.Период,
	|	ПоказателиБизнеса.Показатель,
	|	ПоказателиБизнеса.ИдентификаторПоказателя,
	|	УправленческийОбороты.СценарийПланирования,
	|	УправленческийОбороты.Организация,
	|	ПоказателиБизнеса.ТипПоказателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсходныйПериод,
	|	Показатель,
	|	ТипПоказателя УБЫВ";
	
	Возврат ТекстЗапроса;

КонецФункции // ЗапросКДенежномуПотокуФакт()

&НаСервере
Процедура ПересчитатьСдвигПериода()
	
	Если НЕ ЗначениеЗаполнено(ОтборПериод.ДатаНачала) Тогда
		Возврат;
	КонецЕсли;
	
	СекундВМесяце = 86400 * 30;
	
	КоличествоПериодов = (ПериодБюджета.ДатаНачала - ОтборПериод.ДатаНачала) / (СекундВМесяце * КоэффициентСдвигаДат);
	
	Объект.СдвигДат = ?(КоличествоПериодов >= 0, КоличествоПериодов, 0);

КонецПроцедуры

&НаКлиенте
Процедура СдвинутьДатыВДанных()
	
	Для каждого Строка Из ДанныеИсточника Цикл
		
		Если Строка.Использовать Тогда
			Строка.Период = ДобавитьМесяц(Строка.ИсходныйПериод, Объект.СдвигДат * КоэффициентСдвигаДат);
			ВыровнятьДатуПланированияПоПериодуПланирования(Строка.Период, ПериодичностьБюджета, Объект.ДатаНачала, Объект.ДатаОкончания);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометку(Пометка)
	
	Элементы.СнятьФлажки.Видимость = НЕ Элементы.СнятьФлажки.Видимость;
	Элементы.УстановитьФлажки.Видимость = НЕ Элементы.УстановитьФлажки.Видимость;
	
	Для каждого Строка Из ДанныеИсточника Цикл
		Если Строка.ВидОтчета = ВыбранныйОтчет Тогда
			Строка.Использовать = Пометка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтфильтроватьДанные()

	
	Элементы.ДанныеИсточника.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидОтчета", ВыбранныйОтчет);
	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВыровнятьДатуПланированияПоПериодуПланирования(ДатаПланирования, Периодичность, ДатаНачала, ДатаОкончания)
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		
		ДатаПланирования = НачалоМесяца(ДатаПланирования);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		
		ДатаПланирования = НачалоКвартала(ДатаПланирования);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		
		МесяцДатыНачала = Месяц(ДатаПланирования);
		
		ДатаПланирования = НачалоГода(ДатаПланирования);
		
		Если МесяцДатыНачала > 6 Тогда
			
			ДатаПланирования = ДобавитьМесяц(ДатаПланирования, 6);
			
		КонецЕсли;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		
		ДатаПланирования = НачалоГода(ДатаПланирования);
		
	Иначе
		
		ДатаПланирования = '00010101';
		
	КонецЕсли;
	
	Если ДатаНачала <> '00010101'
		И (ДатаПланирования < ДатаНачала
		ИЛИ ДатаПланирования > ДатаОкончания) Тогда
		
		ДатаПланирования = ДатаНачала;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимость()

	Если СпособЗаполненияБюджета = ПредопределенноеЗначение("Перечисление.СпособЗаполненияБюджета.Бюджет") 
		ИЛИ СпособЗаполненияБюджета = ПредопределенноеЗначение("Перечисление.СпособЗаполненияБюджета.ПланПродаж") Тогда 
		
		Если НЕ ОсталисьВыбранныеБюджеты() И НЕ ОсталисьВыбранныеПланыПродаж() Тогда
			Элементы.ОтборСценарийПланирования.ТолькоПросмотр = Ложь;
			Элементы.ОтборСценарийПланирования.ПодсказкаВвода = НСтр("ru='Сценарий планирования'");
		КонецЕсли;
		
		Если НЕ ОсталисьВыбранныеСценарииПланирования() Тогда
			Элементы.ИсточникДанныхБюджета.ТолькоПросмотр = Ложь;
			Элементы.ИсточникДанныхБюджета.ПодсказкаВвода = НСтр("ru='Бюджеты'");
			Элементы.ИсточникДанныхПланаПродаж.ТолькоПросмотр = Ложь;
			Элементы.ИсточникДанныхПланаПродаж.ПодсказкаВвода = НСтр("ru='План продаж'");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОсталисьВыбранныеБюджеты()

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИмяПоляОтбора", "Бюджет");
	
	Возврат ДанныеМеток.НайтиСтроки(ПараметрыОтбора).Количество() > 0;

КонецФункции

&НаСервере
Функция ОсталисьВыбранныеПланыПродаж()

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИмяПоляОтбора", "ПланПродаж");
	
	Возврат ДанныеМеток.НайтиСтроки(ПараметрыОтбора).Количество() > 0;

КонецФункции

&НаСервере
Функция ОсталисьВыбранныеСценарииПланирования()

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИмяПоляОтбора", "СценарийПланирования");
	
	Возврат ДанныеМеток.НайтиСтроки(ПараметрыОтбора).Количество() > 0;

КонецФункции

#КонецОбласти
