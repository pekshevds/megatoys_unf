#Область ОписаниеПеременных

&НаКлиенте
Перем ШиринаКнопкиОтправить;

&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

#КонецОбласти


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Объект.Организация = Параметры.Организация;
		Иначе
			Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
			Если Не ЗначениеЗаполнено(Организация) Тогда
				Организация = Справочники.Организации.ПредопределеннаяОрганизация();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СобытиеКалендаря) Тогда
		Объект.СобытиеКалендаря = Параметры.СобытиеКалендаря;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СостояниеСобытия) Тогда
		Если ЗначениеЗаполнено(Параметры.СостояниеСобытия) Тогда
			Объект.СостояниеСобытия = Параметры.СостояниеСобытия;
		Иначе
			Объект.СостояниеСобытия = КалендарьОтчетности.ПолучитьСостояниеСобытияКалендаря(
				Объект.Организация,
				Объект.СобытиеКалендаря);
			
		КонецЕсли;
	КонецЕсли;
	
	// Обработка ситуации, если статус отправки "отправлен", то проверяем, нет ли каких-нибудь изменений
	Если Объект.СостояниеСобытия = Перечисления.СостоянияСобытийКалендаря.ПолучитьПодтверждение Тогда
		
		РегламентированнаяОтчетностьУСН.ОбновитьСтатусыОтправленныхОтчетов();
		
		Объект.СостояниеСобытия = КалендарьОтчетности.ПолучитьСостояниеСобытияКалендаря(
				Объект.Организация,
				Объект.СобытиеКалендаря);
	КонецЕсли;
	
	ДатаСменыСостояния = КалендарьОтчетности.ПолучитьДатуСменыСостояния(Объект.Организация, Объект.СобытиеКалендаря);
	
	Заголовок = Объект.СобытиеКалендаря.Наименование;
	
	ДатыСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СобытиеКалендаря, "ДатаНачалаДокументов,ДатаОкончанияДокументов");
	
	ПериодЗадачиПредставление = ПредставлениеПериода(
		ДатыСобытия.ДатаНачалаДокументов,
		КонецДня(ДатыСобытия.ДатаОкончанияДокументов),
		"ФП=Истина");		

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьТекущуюЗакладку(ЭтаФорма, Объект);
	УстановитьЗаголовокФормыПоТекущейСтранице();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаТекущаяОрганизация" Тогда
		Если Окно.Основное Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("e1cib/navigationpoint/НалогиИОтчетность");
		Иначе
			Закрыть();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменениеСостоянияСобытияКалендаря" Тогда
		Если Параметр = Объект.СобытиеКалендаря
				И Источник <> ЭтаФорма
				И Окно<> Неопределено
				И Не Окно.Основное Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// События переходов

&НаКлиенте
Процедура Далее(Команда)
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Завершено");
	
		КалендарьОтчетности.ЗавершитьСобытиеКалендаряОтчетности(
			Объект.Организация,
			Объект.СобытиеКалендаря,
			"");
		
	ДатаСменыСостояния = ТекущаяДата();
	
	Элементы.СтраницаАУСН.ТекущаяСтраница = Элементы.ЗадачаВыполнена;
	УстановитьЗаголовокФормыПоТекущейСтранице();
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.ЗаписиКалендаряПодготовкиОтчетности"));
	Оповестить("Запись_ЗаписиКалендаряПодготовкиОтчетности");
КонецПроцедуры

&НаКлиенте
Процедура ПереходКОплатеАУСННажатие(Элемент)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Ознакомиться");
	
	ДатаСменыСостояния = ТекущаяДата();
	
	Элементы.СтраницаАУСН.ТекущаяСтраница = Элементы.ОплатаНалогаАУСН;
	Элементы.Далее.КнопкаПоУмолчанию = Истина;
	УстановитьЗаголовокФормыПоТекущейСтранице();
	
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);

КонецПроцедуры

// Конец событий переходов
// -----------------------------------------------------------------------------

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Процедура УстановитьЗаголовокФормыПоТекущейСтранице()
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы.СтраницаАУСН.ТекущаяСтраница.Заголовок, ПериодЗадачиПредставление);   
	
	СрокОплаты = РегламентированнаяОтчетностьУСН.СрокУплатыПоНалогуИДате(ПредопределенноеЗначение("Справочник.ВидыНалогов.АУСН"),'00010101');   
	
	СрокОплаты = ПредставлениеПериода(
		СрокОплаты,
		КонецДня(СрокОплаты),
		"ФП=Истина");
	
	Элементы.ДекорацияОписаниеРаботы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы.ДекорацияОписаниеРаботы.Заголовок,
	СрокОплаты);
	                                                                                                    
	РегламентированнаяОтчетностьУСНКлиентСервер.УстановитьЗаголовокФормыЗадачи(ЭтаФорма, Объект.Организация);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюЗакладку(ЭтаФорма, Объект)
	
	Если Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Завершено") Тогда
		
		ЭтаФорма.Элементы.СтраницаАУСН.ТекущаяСтраница = ЭтаФорма.Элементы.ЗадачаВыполнена;
		
	Иначе
		
		ЭтаФорма.Элементы.СтраницаАУСН.ТекущаяСтраница = ЭтаФорма.Элементы.ОплатаНалогаАУСН;
		
	КонецЕсли;
	
КонецПроцедуры


#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ЗагрузитьИзФайлаФрагмент(ПараметрБанковскийСчет = Неопределено)
	
	Если ПараметрБанковскийСчет = Неопределено Тогда
		СтруктураПрямогоОбмена = КлиентБанкВызовСервера.ПолучитьСтруктуруПрямогоОбмена();
		Если СтруктураПрямогоОбмена.БанковскийСчет = Неопределено Тогда // Есть несколько счетов, нужно выбирать.
			Отбор = Новый Структура("ЭтоСчетОрганизации", Истина);
			ОткрытьФорму("Справочник.БанковскиеСчета.Форма.ФормаВыбораБезВладельца", Новый Структура("ТекущаяСтрока, Отбор", СтруктураПрямогоОбмена.БанковскийСчет, Отбор), ЭтотОбъект);
		ИначеЕсли СтруктураПрямогоОбмена.БанковскийСчет.Пустая() Тогда  // Нет ни одной настройки обмена с банками, можно сразу выбирать файл загрузки.
			УправлениеНебольшойФирмойКлиент.ЗагрузитьДанныеИзФайлаВыписки(УникальныйИдентификатор);
		Иначе // Один счет, можно сразу подставить его.
			Если РасчетыРаботаСФормамиВызовСервера.ПроверитьИспользованиеКлиентБанкаБП() Тогда
				ОткрытьФорму("Обработка.КлиентБанк.Форма.Форма", СтруктураПрямогоОбмена);
			Иначе
				ОткрытьФорму("Обработка.КлиентБанкУНФ.Форма.ФормаЗагрузка", СтруктураПрямогоОбмена);
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтруктураОбмена = КлиентБанкВызовСервера.ПолучитьСтруктуруОбмена(ПараметрБанковскийСчет);
		Если НЕ СтруктураОбмена.ПрямойОбмен Тогда
			КлиентБанкКлиент.ЗагрузитьДанныеИзФайлаВыписки(УникальныйИдентификатор, СтруктураОбмена);
		Иначе
			Если РасчетыРаботаСФормамиВызовСервера.ПроверитьИспользованиеКлиентБанкаБП() Тогда
				ОткрытьФорму("Обработка.КлиентБанк.Форма.Форма", СтруктураОбмена);
			Иначе
				ОткрытьФорму("Обработка.КлиентБанкУНФ.Форма.ФормаЗагрузка", СтруктураОбмена);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлВыгрузки(Команда)
	ЗагрузитьИзФайлаФрагмент();
КонецПроцедуры

#КонецОбласти

