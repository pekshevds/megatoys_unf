#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Объект.Организация = Параметры.Организация;
		Иначе
			Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
			Если Не ЗначениеЗаполнено(Организация) Тогда
				Организация = Справочники.Организации.ПредопределеннаяОрганизация();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СобытиеКалендаря) Тогда
		Объект.СобытиеКалендаря = Параметры.СобытиеКалендаря;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СостояниеСобытия) Тогда
		
		Если ЗначениеЗаполнено(Параметры.СостояниеСобытия) Тогда
			
			Объект.СостояниеСобытия = Параметры.СостояниеСобытия;
			
		Иначе
			
			Объект.СостояниеСобытия = КалендарьОтчетности.ПолучитьСостояниеСобытияКалендаря(
				Объект.Организация,
				Объект.СобытиеКалендаря);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДатыСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СобытиеКалендаря,
		"ДатаДокументаОбработкиСобытия,ДатаНачалаДокументов,ДатаОкончанияДокументов,ДатаОкончанияСобытия");
	ДатаДокументаОбработкиСобытия = ДатыСобытия.ДатаДокументаОбработкиСобытия;
	
	ПолучитьДанныеОтчетности();
	
	ПериодЗадачиПредставление = ПредставлениеПериода(
		ДатыСобытия.ДатаНачалаДокументов,
		КонецДня(ДатыСобытия.ДатаОкончанияДокументов),
		"ФП=Истина");
	
	Если Год(ДатаДокументаОбработкиСобытия) > 2013 Тогда
		Элементы.ДекорацияПФРСтраховаяСотрудники.Заголовок = НСтр("ru = 'ПФР'");
		Элементы.ГруппаСтрока8.Видимость = Ложь;
	КонецЕсли;
	
	ВыполнятьРасчетНДФЛПоПрогрессивнойШкалеУНФ = ПолучитьФункциональнуюОпцию("ВыполнятьРасчетНДФЛПоПрогрессивнойШкалеУНФ");
	Если НЕ ВыполнятьРасчетНДФЛПоПрогрессивнойШкалеУНФ Тогда
		Элементы.ГруппаСтрока13.Видимость = Ложь;  		
	КонецЕсли; 
	
	//страховые взносы теперь отдельно
	Если ДатаДокументаОбработкиСобытия > '20230701' Тогда
		Элементы.ГруппаСтрока7.Видимость = Ложь;    
		Элементы.ГруппаСтрока9.Видимость = Ложь; 
		Элементы.ГруппаСтрока11.Видимость = Ложь;  
		Элементы.ГруппаСтрока12.Видимость = Ложь;		
	КонецЕсли;
	
	ДанныеЗадачи = Новый Структура("Организация, Период, СрокУплаты, КодОКТМОДокумента, КодИФНСДокумента, ВидНалога, СуммаДокумента",
		Объект.Организация, КонецДня(ДатыСобытия.ДатаОкончанияДокументов), ДатыСобытия.ДатаОкончанияСобытия, , , , );
		
	ВидыНалоговСтруктура = Новый Структура();
	ВидыНалоговСтруктура.Вставить("ПФРНакопительнаяСотрудники", Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники);
	ВидыНалоговСтруктура.Вставить("ПФРСтраховаяСотрудники", Справочники.ВидыНалогов.ПФРСтраховаяСотрудники);
	ВидыНалоговСтруктура.Вставить("НДФЛСотрудники", Справочники.ВидыНалогов.НДФЛСотрудники);
	ВидыНалоговСтруктура.Вставить("НДФЛДоходыСвышеПредельнойВеличины", Справочники.ВидыНалогов.НДФЛДоходыСвышеПредельнойВеличины);
	ВидыНалоговСтруктура.Вставить("ФОМССотрудники", Справочники.ВидыНалогов.ФОМССотрудники);
	ВидыНалоговСтруктура.Вставить("ФСССотрудники", Справочники.ВидыНалогов.ФСССотрудники);
	ВидыНалоговСтруктура.Вставить("ФССТравматизмСотрудники", Справочники.ВидыНалогов.ФССТравматизмСотрудники);
	ВидыНалоговСтруктура.Вставить("ЕдиныйНалоговыйПлатеж", Справочники.ВидыНалогов.ЕдиныйНалоговыйПлатеж);
	
	ПериодСобытия = Объект.СобытиеКалендаря.ДатаОкончанияСобытия;
	
	ПлательщикЕНП = РегламентированнаяОтчетностьУСН.ПлательщикЕНП(
	Объект.Организация,
	Объект.СобытиеКалендаря.ДатаОкончанияДокументов);
	
	ЗаписьКалендаря = Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьЗаписьКалендаря(Объект.Организация,Объект.СобытиеКалендаря);
	
	ПодаетсяУведомлениеПоНалогуЗаПериод = ?(ПериодСобытия >= '20220701',
	Истина,
	Ложь);
	
	СуммаКУплате = 	НДФЛСотрудники + НДФЛСвышеПредельнойВеличины + ПФРСтраховаяСотрудники +	ФОМССотрудники + ФСССотрудники;
	
	ЗаполнитьУведомления();
	УправлениеФормойБлокУведомление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Ознакомиться") Тогда
		
		Элементы.СтраницаНалогиСотрудников.ТекущаяСтраница = Элементы.РезультатРасчета;
		
	ИначеЕсли Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Уплатить") Тогда
		
		Элементы.СтраницаНалогиСотрудников.ТекущаяСтраница = Элементы.УплатаНалога;
		
	Иначе
		
		Элементы.СтраницаНалогиСотрудников.ТекущаяСтраница = Элементы.ЗадачаВыполнена;
		
	КонецЕсли;
	
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанДокумент" Тогда
		
		
	ИначеЕсли ИмяСобытия = "ИзмененаТекущаяОрганизация" Тогда
		Если Окно.Основное Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("e1cib/navigationpoint/НалогиИОтчетность");
		Иначе
			Закрыть();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменениеСостоянияСобытияКалендаря" Тогда
		Если Параметр = Объект.СобытиеКалендаря
				И Источник <> ЭтаФорма
				И Окно<> Неопределено
				И Не Окно.Основное Тогда
			
			Попытка
				Закрыть()
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// -----------------------------------------------------------------------------
// квитанция

&НаКлиенте
Процедура ДекорацияВсеПлатежкиНажатие(Элемент)
	Если ТолькоНулевыеСуммы() Тогда
		ПоказатьПредупреждение(,НСтр("ru='Суммы всех взносов и налогов нулевые. Уплата не требуется'"));
		Возврат;
	КонецЕсли;
	
	оп = Новый ОписаниеОповещения("ОповещениеПолученияПлатежек", ЭтотОбъект, Новый Структура("Файл", Ложь));
	ПолучитьСписокПлатежек(оп);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВсеФайлыНажатие(Элемент)
	Если ТолькоНулевыеСуммы() Тогда
		ПоказатьПредупреждение(,НСтр("ru='Суммы всех взносов и налогов нулевые. Уплата не требуется'"));
		Возврат;
	КонецЕсли;
	
	оп = Новый ОписаниеОповещения("ОповещениеПолученияПлатежек", ЭтотОбъект, Новый Структура("Файл", Истина));
	ПолучитьСписокПлатежек(оп);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВсеКвитанцииНажатие(Элемент)
	
	Если ПроверитьНаличиеГосОргана("РаспечататьКвитанциюЗавершение") Тогда
		РаспечататьКвитанциюЗавершение();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// -----------------------------------------------------------------------------
// События переходов

&НаКлиенте
Процедура ПереходЗаполнение(Команда)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Заполнить");
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Объект.Организация,
		Объект.СобытиеКалендаря,
		Объект.СостояниеСобытия,
		"");
	
	ПараметрыФормы = Новый Структура("Организация,СобытиеКалендаря", Объект.Организация,Объект.СобытиеКалендаря);
	
	КалендарьОтчетностиКлиент.ОткрытьФормуНачалаЗаполнения(ЭтаФорма,ПараметрыФормы);
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходУплата(Команда)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Уплатить");
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Объект.Организация,
		Объект.СобытиеКалендаря,
		Объект.СостояниеСобытия,
		0);
	
	Элементы.СтраницаНалогиСотрудников.ТекущаяСтраница = Элементы.УплатаНалога;
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходРезультатРасчета(Команда)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Ознакомиться");
	
	ЗафиксироватьПереходкУплате(Объект.Организация, Объект.СобытиеКалендаря, Объект.СостояниеСобытия, 0);
	
	Элементы.СтраницаНалогиСотрудников.ТекущаяСтраница = Элементы.РезультатРасчета;
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходВыполнил(Команда)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Завершено");
	
	КалендарьОтчетности.ЗавершитьСобытиеКалендаряОтчетности(
		Объект.Организация,
		Объект.СобытиеКалендаря,
		"");
	
	Элементы.СтраницаНалогиСотрудников.ТекущаяСтраница = Элементы.ЗадачаВыполнена;
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.ЗаписиКалендаряПодготовкиОтчетности"));
	Оповестить("Запись_ЗаписиКалендаряПодготовкиОтчетности");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьРасходыВПрограмме(Команда)
	
	Данные = ДанныеЗадачи;
	Список = Новый СписокЗначений; 
	
	Если НЕ РегламентированнаяОтчетностьУСН.ПлательщикЕНП(Данные.Организация, Данные.Период) Тогда
		ДанныеНДФЛСотрудники = Новый Структура("Организация, Период, СрокУплаты, КодОКТМОДокумента, КодИФНСДокумента, ВидНалога, СуммаДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеНДФЛСотрудники, Данные);
		ДанныеНДФЛСотрудники.ВидНалога = ВидыНалоговСтруктура.НДФЛСотрудники;
		ДанныеНДФЛСотрудники.СуммаДокумента = НДФЛСотрудники;
		Список.Добавить(ДанныеНДФЛСотрудники,НСтр("ru='НДФЛ'"));
		
		ДанныеНДФЛСотрудникиСвышеПредельнойВеличины = Новый Структура("Организация, Период, СрокУплаты, КодОКТМОДокумента, КодИФНСДокумента, ВидНалога, СуммаДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеНДФЛСотрудникиСвышеПредельнойВеличины, Данные);
		ДанныеНДФЛСотрудникиСвышеПредельнойВеличины.ВидНалога = ВидыНалоговСтруктура.НДФЛДоходыСвышеПредельнойВеличины;
		ДанныеНДФЛСотрудникиСвышеПредельнойВеличины.СуммаДокумента = НДФЛСвышеПредельнойВеличины;
		Список.Добавить(ДанныеНДФЛСотрудникиСвышеПредельнойВеличины,НСтр("ru='НДФЛ свыше предельной величины'"));   
		
		ДанныеПФРСтраховаяСотрудники = Новый Структура("Организация, Период, СрокУплаты, КодОКТМОДокумента, КодИФНСДокумента, ВидНалога, СуммаДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеПФРСтраховаяСотрудники, Данные);
		ДанныеПФРСтраховаяСотрудники.ВидНалога = ВидыНалоговСтруктура.ПФРСтраховаяСотрудники;
		ДанныеПФРСтраховаяСотрудники.СуммаДокумента = ПФРСтраховаяСотрудники;
		Если Год(ДатаДокументаОбработкиСобытия) < 2014 Тогда
			ДанныеПФРНакопительнаяСотрудники = Новый Структура("Организация, Период, СрокУплаты, КодОКТМОДокумента, КодИФНСДокумента, ВидНалога, СуммаДокумента");
			ЗаполнитьЗначенияСвойств(ДанныеПФРНакопительнаяСотрудники, Данные);
			ДанныеПФРНакопительнаяСотрудники.ВидНалога = ВидыНалоговСтруктура.ПФРНакопительнаяСотрудники;
			ДанныеПФРНакопительнаяСотрудники.СуммаДокумента = ПФРНакопительнаяСотрудники;
			Список.Добавить(ДанныеПФРСтраховаяСотрудники,НСтр("ru='ПФР страховая'"));
			Список.Добавить(ДанныеПФРНакопительнаяСотрудники,НСтр("ru='ПФР накопительная'"));
		Иначе
			Список.Добавить(ДанныеПФРСтраховаяСотрудники,НСтр("ru='ПФР'"));
		КонецЕсли;
		
		ДанныеФОМССотрудники = Новый Структура("Организация, Период, СрокУплаты, КодОКТМОДокумента, КодИФНСДокумента, ВидНалога, СуммаДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеФОМССотрудники, Данные);
		ДанныеФОМССотрудники.ВидНалога = ВидыНалоговСтруктура.ФОМССотрудники;
		ДанныеФОМССотрудники.СуммаДокумента = ФОМССотрудники;
		Список.Добавить(ДанныеФОМССотрудники,НСтр("ru='ФОМС'"));
		ДанныеФСССотрудники = Данные;
		ДанныеФСССотрудники.ВидНалога = ВидыНалоговСтруктура.ФСССотрудники;
		ДанныеФСССотрудники.СуммаДокумента = ФСССотрудники;
		Список.Добавить(ДанныеФСССотрудники,НСтр("ru='ФСС'"));
	Иначе
		ДанныеЕНП = Новый Структура("Организация, Период, СрокУплаты, КодОКТМОДокумента, КодИФНСДокумента, ВидНалога, СуммаДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеЕНП, Данные);
		ДанныеЕНП.ВидНалога = ПредопределенноеЗначение("Справочник.ВидыНалогов.ЕдиныйНалоговыйПлатеж");
		ДанныеЕНП.СуммаДокумента = СуммаКУплате;
		Список.Добавить(ДанныеЕНП,НСтр("ru='Единый налоговый платеж'"));
	КонецЕсли;
	
	Если ДатаДокументаОбработкиСобытия < '20230701' Тогда
		ДанныеФССТравматизмСотрудники = Новый Структура("Организация, Период, СрокУплаты, КодОКТМОДокумента, КодИФНСДокумента, ВидНалога, СуммаДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеФССТравматизмСотрудники, Данные);
		ДанныеФССТравматизмСотрудники.ВидНалога = ВидыНалоговСтруктура.ФССТравматизмСотрудники;
		ДанныеФССТравматизмСотрудники.СуммаДокумента = ФССТравматизмСотрудники;
		Список.Добавить(ДанныеФССТравматизмСотрудники,НСтр("ru='ФСС травматизм'"));
	КонецЕсли;
	
	ОткрытьФорму(
	"Обработка.ОбработкиНалоговИОтчетности.Форма.ГрупповаяРегистрацияРасходов",
	Новый Структура("Организация,СписокКПоиску,БезДокументаВзаиморасчетов, СобытиеКалендаря",
	Объект.Организация, Список, Истина, Объект.СобытиеКалендаря));
	
КонецПроцедуры

#КонецОбласти

#Область Уведомления
// -----------------------------------------------------------------------------
// Уведомления

&НаКлиенте
Процедура ВыполнитьДействиеСформироватьУведомление(Команда)
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",                 Объект.Организация);
	ПараметрыУведомления.Вставить("ЗаписьКалендаря",                     ЗаписьКалендаря);
	ПараметрыУведомления.Вставить("ПериодСобытия",               ПериодСобытия);
	ПараметрыУведомления.Вставить("АдресХранилищаТаблицыНалоги", ОписаниеТаблицыНалоги());
	ПараметрыУведомления.Вставить("КонтекстныйВызов",            Истина);
	
	ОткрытьФорму("Документ.УведомлениеОбИсчисленныхСуммахНалогов.Форма.ФормаДокумента",
		ПараметрыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры  
	
&НаКлиенте
Процедура ВыполнитьДействиеСформироватьОперациюПоЕНС(Команда)
	
	ВыполненоВТихомРежиме = Ложь;
	СформироватьОперациюПоЕНСВТихомРежиме(ВыполненоВТихомРежиме);
	Если ВыполненоВТихомРежиме Тогда
		// Только перерисуем форму
		ОбработатьРедактированиеУведомления();
		Возврат;
	КонецЕсли;
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",                 Объект.Организация);
	ПараметрыУведомления.Вставить("ЗаписьКалендаря",                     ЗаписьКалендаря);
	ПараметрыУведомления.Вставить("ПериодСобытия",               ПериодСобытия);
	ПараметрыУведомления.Вставить("АдресХранилищаТаблицыНалоги", ОписаниеТаблицыНалоги());
	ПараметрыУведомления.Вставить("КонтекстныйВызов",            Истина);
	
	ОткрытьФорму("Документ.ОперацияПоЕдиномуНалоговомуСчету.Форма.ФормаДокумента",
		ПараметрыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОперациюПоЕНСВТихомРежиме(ВыполненоВТихомРежиме)
	
	ЕдиныйНалоговыйСчет.СформироватьОперациюПоЕНСВТихомРежиме(Объект.Организация,
		ОписаниеТаблицыНалоги(),
		ЗаписьКалендаря,
		Объект.ПериодРегистрации,
		ВыполненоВТихомРежиме);
	
КонецПроцедуры
	
&НаСервере
Функция ОписаниеТаблицыНалоги()
	
	ТаблицаНалоги = ТаблицаНалогиДляУведомления();
		
	ТаблицыНалогов = Документы.УведомлениеОбИсчисленныхСуммахНалогов.ОписаниеТаблицНалогов();
	ТаблицыНалогов.ТаблицаНалоги = ТаблицаНалоги;
	
	АдресХранилищаТаблицыНалоги = ПоместитьВоВременноеХранилище(ТаблицыНалогов, УникальныйИдентификатор);
	
	Возврат АдресХранилищаТаблицыНалоги;
	
КонецФункции 

&НаСервере
Функция ТаблицаНалогиДляУведомления() Экспорт
	
	ТаблицаНалоги = Документы.УведомлениеОбИсчисленныхСуммахНалогов.ОписаниеТаблицыНалогов();
	
	Для Каждого Налог Из ВидыНалоговСтруктура Цикл
		
		Налог = Налог.Значение;
		
		Если Налог = Неопределено Тогда
			Продолжить;
		ИначеЕсли Налог = Справочники.ВидыНалогов.ФССТравматизмСотрудники Тогда
			Продолжить;
		КонецЕсли; 
		
		Сумма = 0;
		
		Если Налог = ВидыНалоговСтруктура.НДФЛСотрудники Тогда
			Сумма                       = НДФЛСотрудники; 
		ИначеЕсли Налог = ВидыНалоговСтруктура.НДФЛДоходыСвышеПредельнойВеличины Тогда
			Сумма                       = НДФЛСвышеПредельнойВеличины;   
		КонецЕсли;	
		
		Если ДатаДокументаОбработкиСобытия < '20230701' И 
			(Налог = ВидыНалоговСтруктура.ПФРСтраховаяСотрудники 
			ИЛИ Налог = ВидыНалоговСтруктура.ФОМССотрудники 
			ИЛИ Налог = ВидыНалоговСтруктура.ФСССотрудники) Тогда    
			Продолжить;	  
		Иначе			
			Если Налог = ВидыНалоговСтруктура.ПФРСтраховаяСотрудники Тогда
				Сумма                       = ПФРСтраховаяСотрудники;   
			ИначеЕсли Налог = ВидыНалоговСтруктура.ФОМССотрудники Тогда 
				Сумма                       = ФОМССотрудники
			ИначеЕсли Налог = ВидыНалоговСтруктура.ФСССотрудники  Тогда
				Сумма                       = ФСССотрудники   
			КонецЕсли; 			
		КонецЕсли;
		
		Если Сумма > 0 Тогда 
			
			НоваяСтрока = ТаблицаНалоги.Добавить();
			НоваяСтрока.РегистрацияВНалоговомОргане = Объект.Организация.РегистрацияВНалоговомОргане;
			НоваяСтрока.КодПоОКТМО                  = НоваяСтрока.РегистрацияВНалоговомОргане.КодПоОКТМО;
			НоваяСтрока.Налог                       = Налог;
			НоваяСтрока.КодБК                       = Справочники.ВидыНалогов.КБК(Налог,, Объект.СобытиеКалендаря.ДатаОкончанияСобытия);
			НоваяСтрока.СчетУчета                   = Налог.СчетУчета;
			НоваяСтрока.Сумма = Сумма;
			НоваяСтрока.СрокУплаты                  = РегламентированнаяОтчетностьУСН.ОпределитьСрокПлатежаПоЕНП(Объект.СобытиеКалендаря.ДатаОкончанияСобытия);
			Если Объект.СобытиеКалендаря.ДатаОкончанияДокументов = НачалоДня(КонецГода(Объект.СобытиеКалендаря.ДатаНачалаДокументов)) Тогда
				НоваяСтрока.НачалоПериода = Объект.СобытиеКалендаря.ДатаНачалаДокументов;
				НоваяСтрока.КонецПериода = Объект.СобытиеКалендаря.ДатаОкончанияДокументов;
			Иначе
				НоваяСтрока.НачалоПериода = НачалоМесяца(Объект.СобытиеКалендаря.ДатаОкончанияДокументов);
				НоваяСтрока.КонецПериода = КонецМесяца(Объект.СобытиеКалендаря.ДатаОкончанияДокументов);
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНалоги;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРедактированиеУведомления(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбновитьСведенияОбУведомлениях();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОбУведомлениях()
	
	Если Не ПлательщикЕНП Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьУведомления();
	
	УправлениеФормойБлокУведомление();
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьУведомления()
	
	ТаблицаУведомления = ЕдиныйНалоговыйСчет.ДанныеДляУведомлений(ЗаписьКалендаря, Объект.Организация, ПериодСобытия);
	УведомленияОбИсчисленныхНалогах.Загрузить(ТаблицаУведомления);
	
	УведомлениеОбИсчисленныхНалогахПодготовлено = УведомленияОбИсчисленныхНалогах.Количество() > 0;
	
КонецПроцедуры 

&НаКлиенте
Процедура УведомлениеНажатие(Команда)
	
	// Команды генерируются в КопироватьЭлементСПодчиненными() и содержат числовой идентификатор,
	// совпадающий с идентификаторами строк в списке Платежи
	Идентификатор = ЕдиныйНалоговыйСчетКлиент.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьУведомление(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУведомление(Идентификатор)
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыФормыУведомления = ПараметрыФормыУведомления(Идентификатор);
	
	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		ИмяОбъекта = "УведомлениеОбИсчисленныхСуммахНалогов";
	Иначе
		ИмяОбъекта = "ОперацияПоЕдиномуНалоговомуСчету";
	КонецЕсли;
	
	ОткрытьФорму("Документ.УведомлениеОбИсчисленныхСуммахНалогов.ФормаОбъекта",
		ПараметрыФормыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУведомленияПоСтроке(СтрокаУведомления)
	
	Если ЗначениеЗаполнено(СтрокаУведомления.Уведомление) Тогда
		Возврат Новый Структура("Ключ", СтрокаУведомления.Уведомление);
	Иначе
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПустогоУведомления()
	
	ЗначенияЗаполнения = Новый Структура("Организация", Объект.Организация);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, СобытиеКалендаря",
	ЗначенияЗаполнения, Объект.ПериодРегистрации, Объект.СобытиеКалендаря);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыУведомления(Идентификатор)
	
	Если Идентификатор = Неопределено Тогда 
		// Получим параметры формы для пустого документа
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
	СтрокаУведомления = УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаУведомления = Неопределено Тогда
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
	Возврат ПараметрыФормыУведомленияПоСтроке(СтрокаУведомления);
	
КонецФункции

&НаСервере
Процедура УправлениеФормойБлокУведомление()
	
	ЕдиныйНалоговыйСчет.УправлениеФормойБлокУведомление(ЭтотОбъект,
		СуммаКУплате > 0, , 2);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ЗафиксироватьПереходкУплате(Организация, Событие, Состояние, ВсегоКУплате)

	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация, Событие, Состояние, ВсегоКУплате);
	ЗаписьКалендаря = Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьЗаписьКалендаря(Организация, Событие);
	Если ЗаписьКалендаря <> Неопределено Тогда
		ОбъектЗаписьКалендаря = ЗаписьКалендаря.ПолучитьОбъект();
		ОбъектЗаписьКалендаря.Завершено = Ложь;
		ОбъектЗаписьКалендаря.Записать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПолученияПлатежек(БанкСчетСтруктура, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(БанкСчетСтруктура) Тогда
		Возврат;
	КонецЕсли;  
	
	Если Параметры.Файл Тогда
		Если БанкСчетСтруктура <> Неопределено Тогда
			Если ПроверитьНаличиеГосОргана("ПолучитьФайлКлиентБанка") Тогда
				БанкСчетСтруктура.Вставить("СписокПлатежек", ПолучитьСписокПлатежекПриНаличииСчета());
				ОткрытьФорму(
					"Обработка.КлиентБанкУНФ.Форма.СохранениеПлатежек", БанкСчетСтруктура, , , , , ,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ПроверитьНаличиеГосОргана("РаспечататьПлатежноеПоручениеЗавершение") Тогда
			РаспечататьПлатежноеПоручениеЗавершение();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок()
	
	ИмяКнопки = ПолучитьИмяЭлементаКнопкиПоУмолчанию(Элементы.СтраницаНалогиСотрудников.ТекущаяСтраница.Имя);
	
	Если НЕ ПустаяСтрока(ИмяКнопки) Тогда
		Элементы[ИмяКнопки].КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы.СтраницаНалогиСотрудников.ТекущаяСтраница.Заголовок, ПериодЗадачиПредставление);
	РегламентированнаяОтчетностьУСНКлиентСервер.УстановитьЗаголовокФормыЗадачи(ЭтаФорма, Объект.Организация);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяЭлементаКнопкиПоУмолчанию(ИмяСтраницы)
	
	Если ИмяСтраницы = "РезультатРасчета" Тогда
		Возврат "ПереходДалее";
	ИначеЕсли ИмяСтраницы = "УплатаНалога" Тогда
		Возврат "ПереходВыполнил";
	ИначеЕсли ИмяСтраницы = "ЗадачаВыполнена" Тогда
		Возврат "";
	Иначе
		ВызватьИсключение НСтр("ru='Неизвестное имя текущей страницы'");
	КонецЕсли;
	
КонецФункции

// Процедура заполняет данные формы по данным ранее сформированной отчетности
//
&НаСервере
Процедура ПолучитьДанныеОтчетности()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетности.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	ЗначенияПоказателейОтчетности.ПоказательОтчетности.Код КАК КодОтчетности,
	|	ЗначенияПоказателейОтчетности.ПоказательОтчетности
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетности КАК ЗначенияПоказателейОтчетности
	|ГДЕ
	|	ЗначенияПоказателейОтчетности.Организация = &Организация
	|	И ЗначенияПоказателейОтчетности.ПериодОтчетности = &ПериодОтчетности
	|	И ЗначенияПоказателейОтчетности.ПоказательОтчетности В (&ГруппаПоказателя)");
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ПериодОтчетности", Объект.СобытиеКалендаря.ДатаДокументаОбработкиСобытия);
	
	МассивСуммируемыхПоказателей = Новый Массив;
	МассивСуммируемыхПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.ПФРНакопительнаяСотрудники);
	МассивСуммируемыхПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.ПФРСтраховаяСотрудники);
	МассивСуммируемыхПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.НДФЛСотрудники);
	МассивСуммируемыхПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.НДФЛСвышеПредельнойВеличины);
	МассивСуммируемыхПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.ФОМССотрудники);
	МассивСуммируемыхПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.ФСССотрудники);
	МассивСуммируемыхПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.ФССТравматизмСотрудники);
	
	Запрос.УстановитьПараметр("ГруппаПоказателя",МассивСуммируемыхПоказателей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	Итого = 0;
	
	Пока Выборка.Следующий() Цикл
		ЭтаФорма[Выборка.КодОтчетности+ "Строка"] = Формат(Выборка.ЗначениеПоказателя, "ЧДЦ=2; ЧРГ=; ЧН=" ) + " р.";
		ЭтаФорма[Выборка.КодОтчетности] =Выборка.ЗначениеПоказателя;
		Если МассивСуммируемыхПоказателей.Найти(Выборка.ПоказательОтчетности) <> Неопределено Тогда
			Итого = Итого + Выборка.ЗначениеПоказателя;
		КонецЕсли;
	КонецЦикла;
	
	ИтогоПФР = Формат(Итого, "ЧДЦ=2; ЧРГ=; ЧН=" ) + " р.";
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокПлатежек(ОповещениеСозданияПлатежек)
	
	Если Не ЗначениеЗаполнено(БанковскийСчетПоУмолчанию) Тогда
		оп = Новый ОписаниеОповещения("ОповещениеВыбораСчета", ЭтотОбъект,
			Новый Структура("ОповещениеСозданияПлатежек", ОповещениеСозданияПлатежек));
		РегламентированнаяОтчетностьУСНКлиент.ПолучитьБанковскийСчетДляУплатыНалога(оп, Объект.Организация);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ОповещениеСозданияПлатежек,
		Новый Структура ("БанковскийСчет", БанковскийСчетПоУмолчанию));
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыбораСчета(БанковскийСчет, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		БанковскийСчетПоУмолчанию = БанковскийСчет;
		ВыполнитьОбработкуОповещения(
			Параметры.ОповещениеСозданияПлатежек, Новый Структура("БанковскийСчет", БанковскийСчетПоУмолчанию));
	Иначе
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеСозданияПлатежек, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Функция СуммаЕНП()
	
	ЕНП = НДФЛСотрудники
		+ НДФЛСвышеПредельнойВеличины
		+ ПФРНакопительнаяСотрудники
		+ ПФРСтраховаяСотрудники
		+ ФОМССотрудники
		+ ФСССотрудники;
		
	Возврат ЕНП;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокПлатежекПриНаличииСчета()
	
	СписокПлатежек = Новый СписокЗначений;
	Данные = ДанныеЗадачи;
	
	Если ПлательщикЕНП Тогда
		Данные.ВидНалога = Справочники.ВидыНалогов.ЕдиныйНалоговыйПлатеж;
		
		СуммаЕНП = СуммаЕНП();
		
		Данные.СуммаДокумента = СуммаЕНП;
		
		Если Не ЗначениеЗаполнено(СсылкаДокументаБезналичнойОплатыЕНП) Тогда
			СсылкаДокументаБезналичнойОплатыЕНП = 
				РегламентированнаяОтчетностьУСН.СоздатьБезналичноеСписание(
					Данные,
					БанковскийСчетПоУмолчанию);
		КонецЕсли;
		СписокПлатежек.Добавить(СсылкаДокументаБезналичнойОплатыЕНП, "ПлатежноеПоручение");
	Иначе
		Если НДФЛСотрудники > 0 Тогда
			Данные.ВидНалога = ВидыНалоговСтруктура.НДФЛСотрудники;
			Данные.СуммаДокумента = НДФЛСотрудники;
			Если Не ЗначениеЗаполнено(СсылкаДокументаБезналичнойОплатыНДФЛСотрудники) Тогда
				СсылкаДокументаБезналичнойОплатыНДФЛСотрудники = 
					РегламентированнаяОтчетностьУСН.СоздатьБезналичноеСписание(
						Данные,
						БанковскийСчетПоУмолчанию);
			КонецЕсли;
			СписокПлатежек.Добавить(СсылкаДокументаБезналичнойОплатыНДФЛСотрудники, "ПлатежноеПоручение");
		КонецЕсли;
		
		Если НДФЛСвышеПредельнойВеличины > 0 Тогда
			Данные.ВидНалога = ВидыНалоговСтруктура.НДФЛДоходыСвышеПредельнойВеличины;
			Данные.СуммаДокумента = НДФЛСвышеПредельнойВеличины;
			Если Не ЗначениеЗаполнено(СсылкаДокументаБезналичнойОплатыНДФЛДоходыСвышеПредельнойВеличины) Тогда
				СсылкаДокументаБезналичнойОплатыНДФЛДоходыСвышеПредельнойВеличины = 
				РегламентированнаяОтчетностьУСН.СоздатьБезналичноеСписание(
				Данные,
				БанковскийСчетПоУмолчанию);
			КонецЕсли;
			СписокПлатежек.Добавить(СсылкаДокументаБезналичнойОплатыНДФЛДоходыСвышеПредельнойВеличины, "ПлатежноеПоручение");
		КонецЕсли;
		
		Если ПФРНакопительнаяСотрудники> 0 Тогда
			Данные.ВидНалога = ВидыНалоговСтруктура.ПФРНакопительнаяСотрудники;
			Данные.СуммаДокумента = ПФРНакопительнаяСотрудники;
			
			Если Не ЗначениеЗаполнено(СсылкаДокументаБезналичнойОплатыПФРНакопительнаяСотрудники) Тогда
				СсылкаДокументаБезналичнойОплатыПФРНакопительнаяСотрудники = 
					РегламентированнаяОтчетностьУСН.СоздатьБезналичноеСписание(
						Данные,
						БанковскийСчетПоУмолчанию);
			КонецЕсли;
			СписокПлатежек.Добавить(СсылкаДокументаБезналичнойОплатыПФРНакопительнаяСотрудники, "ПлатежноеПоручение");
		КонецЕсли;

		Если ПФРСтраховаяСотрудники > 0 Тогда
			Данные.ВидНалога = ВидыНалоговСтруктура.ПФРСтраховаяСотрудники;
			Данные.СуммаДокумента = ПФРСтраховаяСотрудники;
			
			Если Не ЗначениеЗаполнено(СсылкаДокументаБезналичнойОплатыПФРСтраховаяСотрудники) Тогда
				СсылкаДокументаБезналичнойОплатыПФРСтраховаяСотрудники = 
					РегламентированнаяОтчетностьУСН.СоздатьБезналичноеСписание(
						Данные,
						БанковскийСчетПоУмолчанию);
			КонецЕсли;
			СписокПлатежек.Добавить(СсылкаДокументаБезналичнойОплатыПФРСтраховаяСотрудники, "ПлатежноеПоручение");
		КонецЕсли;
		
		Если ФОМССотрудники > 0 Тогда
			Данные.ВидНалога = ВидыНалоговСтруктура.ФОМССотрудники;
			Данные.СуммаДокумента = ФОМССотрудники;
			
			Если Не ЗначениеЗаполнено(СсылкаДокументаБезналичнойОплатыФОМССотрудники) Тогда
				СсылкаДокументаБезналичнойОплатыФОМССотрудники = 
					РегламентированнаяОтчетностьУСН.СоздатьБезналичноеСписание(
						Данные,
						БанковскийСчетПоУмолчанию);
			КонецЕсли;
			СписокПлатежек.Добавить(СсылкаДокументаБезналичнойОплатыФОМССотрудники, "ПлатежноеПоручение");
		КонецЕсли;
		
		Если ФСССотрудники > 0 Тогда
			Данные.ВидНалога = ВидыНалоговСтруктура.ФСССотрудники;
			Данные.СуммаДокумента = ФСССотрудники;
			
			Если Не ЗначениеЗаполнено(СсылкаДокументаБезналичнойОплатыФСС) Тогда
				СсылкаДокументаБезналичнойОплатыФСС = 
					РегламентированнаяОтчетностьУСН.СоздатьБезналичноеСписание(
						Данные,
						БанковскийСчетПоУмолчанию);
			КонецЕсли;
			СписокПлатежек.Добавить(СсылкаДокументаБезналичнойОплатыФСС, "ПлатежноеПоручение");
		КонецЕсли;
	КонецЕсли;
	
	Если ФССТравматизмСотрудники > 0 Тогда
		Данные.ВидНалога = ВидыНалоговСтруктура.ФССТравматизмСотрудники;
		Данные.СуммаДокумента = ФССТравматизмСотрудники;
		
		Если Не ЗначениеЗаполнено(СсылкаДокументаБезналичнойОплатыФССТравматизм) Тогда
			СсылкаДокументаБезналичнойОплатыФССТравматизм = 
				РегламентированнаяОтчетностьУСН.СоздатьБезналичноеСписание(
					Данные,
					БанковскийСчетПоУмолчанию);
		КонецЕсли;
		СписокПлатежек.Добавить(СсылкаДокументаБезналичнойОплатыФССТравматизм, "ПлатежноеПоручение");
	КонецЕсли;
	
	Возврат СписокПлатежек;
КонецФункции

&НаКлиенте
Функция ТолькоНулевыеСуммы()
	
	ТолькоНулевые = Истина;
	Если НДФЛСотрудники > 0 Тогда
		ТолькоНулевые = Ложь;
	ИначеЕсли НДФЛСвышеПредельнойВеличины > 0 Тогда
		ТолькоНулевые = Ложь;	
	ИначеЕсли ПФРНакопительнаяСотрудники > 0 Тогда
		ТолькоНулевые = Ложь;
	ИначеЕсли ПФРСтраховаяСотрудники > 0 Тогда
		ТолькоНулевые = Ложь;
	ИначеЕсли ФОМССотрудники > 0 Тогда
		ТолькоНулевые = Ложь;
	ИначеЕсли ФСССотрудники > 0 Тогда
		ТолькоНулевые = Ложь;
	ИначеЕсли ФССТравматизмСотрудники > 0 Тогда
		ТолькоНулевые = Ложь;
	КонецЕсли;
	
	Возврат ТолькоНулевые;
	
КонецФункции

&НаКлиенте
Процедура РаспечататьКвитанциюЗавершение() Экспорт
	
	СписокДокументов = Новый Массив;
	Данные = ДанныеЗадачи;
	
	Если НЕ РегламентированнаяОтчетностьУСН.ПлательщикЕНП(Данные.Организация, Данные.Период) Тогда
		ДанныеНДФЛСотрудники = Новый Структура("Организация, Период, СрокУплаты, КодОКТМОДокумента, КодИФНСДокумента, ВидНалога, СуммаДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеНДФЛСотрудники, Данные);
		ДанныеНДФЛСотрудники.ВидНалога = ВидыНалоговСтруктура.НДФЛСотрудники;
		ДанныеНДФЛСотрудники.СуммаДокумента = НДФЛСотрудники;
		СписокДокументов.Добавить(ДанныеНДФЛСотрудники);
		
		ДанныеНДФЛСотрудникиСПревышения = Новый Структура("Организация, Период, СрокУплаты, КодОКТМОДокумента, КодИФНСДокумента, ВидНалога, СуммаДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеНДФЛСотрудникиСПревышения, Данные);
		ДанныеНДФЛСотрудникиСПревышения.ВидНалога = ВидыНалоговСтруктура.НДФЛДоходыСвышеПредельнойВеличины;
		ДанныеНДФЛСотрудникиСПревышения.СуммаДокумента = НДФЛСвышеПредельнойВеличины;
		СписокДокументов.Добавить(ДанныеНДФЛСотрудникиСПревышения); 
		
		ДанныеПФРСтраховаяСотрудники = Новый Структура("Организация, Период, СрокУплаты, КодОКТМОДокумента, КодИФНСДокумента, ВидНалога, СуммаДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеПФРСтраховаяСотрудники, Данные);
		ДанныеПФРСтраховаяСотрудники.ВидНалога = ВидыНалоговСтруктура.ПФРСтраховаяСотрудники;
		ДанныеПФРСтраховаяСотрудники.СуммаДокумента = ПФРСтраховаяСотрудники;
		СписокДокументов.Добавить(ДанныеПФРСтраховаяСотрудники);
		
		Если Год(ДатаДокументаОбработкиСобытия) < 2014 Тогда
			ДанныеПФРНакопительнаяСотрудники = Новый Структура("Организация, Период, СрокУплаты, КодОКТМОДокумента, КодИФНСДокумента, ВидНалога, СуммаДокумента");
			ЗаполнитьЗначенияСвойств(ДанныеПФРНакопительнаяСотрудники, Данные);
			ДанныеПФРНакопительнаяСотрудники.ВидНалога = ВидыНалоговСтруктура.ПФРНакопительнаяСотрудники;
			ДанныеПФРНакопительнаяСотрудники.СуммаДокумента = ПФРНакопительнаяСотрудники;
			СписокДокументов.Добавить(ДанныеПФРНакопительнаяСотрудники);
		КонецЕсли;
		
		ДанныеФОМССотрудники = Новый Структура("Организация, Период, СрокУплаты, КодОКТМОДокумента, КодИФНСДокумента, ВидНалога, СуммаДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеФОМССотрудники, Данные);
		ДанныеФОМССотрудники.ВидНалога = ВидыНалоговСтруктура.ФОМССотрудники;
		ДанныеФОМССотрудники.СуммаДокумента = ФОМССотрудники;
		СписокДокументов.Добавить(ДанныеФОМССотрудники);
		
		ДанныеФСССотрудники = Новый Структура("Организация, Период, СрокУплаты, КодОКТМОДокумента, КодИФНСДокумента, ВидНалога, СуммаДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеФСССотрудники, Данные);
		ДанныеФСССотрудники.ВидНалога = ВидыНалоговСтруктура.ФСССотрудники;
		ДанныеФСССотрудники.СуммаДокумента = ФСССотрудники;
		СписокДокументов.Добавить(ДанныеФСССотрудники);
	Иначе
		ДанныеЕНП = Новый Структура("Организация, Период, СрокУплаты, КодОКТМОДокумента, КодИФНСДокумента, ВидНалога, СуммаДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеЕНП, Данные);
		ДанныеЕНП.ВидНалога = ПредопределенноеЗначение("Справочник.ВидыНалогов.ЕдиныйНалоговыйПлатеж");
		ДанныеЕНП.СуммаДокумента = СуммаКУплате;
		СписокДокументов.Добавить(ДанныеЕНП);
	КонецЕсли;
	
	Если ДатаДокументаОбработкиСобытия < '20230701' Тогда 
		ДанныеФССТравматизмСотрудники = Новый Структура("Организация, Период, СрокУплаты, КодОКТМОДокумента, КодИФНСДокумента, ВидНалога, СуммаДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеФССТравматизмСотрудники, Данные);
		ДанныеФССТравматизмСотрудники.ВидНалога = ВидыНалоговСтруктура.ФССТравматизмСотрудники;
		ДанныеФССТравматизмСотрудники.СуммаДокумента = ФССТравматизмСотрудники;
		СписокДокументов.Добавить(ДанныеФССТравматизмСотрудники);
	КонецЕсли;
	
	СтруктураПечати = ВыгрузитьДокументВФайл(СписокДокументов, "Квитанция");
	Если СтруктураПечати.АдресФайла = Неопределено Тогда
		
		Сообщить(Нстр("ru='Произошла ошибка при выгрузке документа '")+Объект);
		Возврат;
		
	КонецЕсли;
	
	ФайловаяСистемаКлиент.СохранитьФайл(,СтруктураПечати.АдресФайла, СтруктураПечати.НаименованиеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьПлатежноеПоручениеЗавершение() Экспорт
	
	ПолучитьСписокПлатежекПриНаличииСчета();
	СписокДокументов = Новый Массив;
	
	Если ПлательщикЕНП Тогда
		СуммаЕНП = СуммаЕНП();
		Если СуммаЕНП > 0 Тогда
			СписокДокументов.Добавить(СсылкаДокументаБезналичнойОплатыЕНП);
		КонецЕсли;
	Иначе
		Если НДФЛСотрудникиСтрока <> "0,00 р." Тогда
			СписокДокументов.Добавить(СсылкаДокументаБезналичнойОплатыНДФЛСотрудники);
		КонецЕсли;
		
		Если НДФЛСвышеПредельнойВеличиныСтрока <> "0,00 р." Тогда
			СписокДокументов.Добавить(СсылкаДокументаБезналичнойОплатыНДФЛДоходыСвышеПредельнойВеличины);
		КонецЕсли; 
		
		Если ПФРНакопительнаяСотрудникиСтрока <> "0,00 р." Тогда
			СписокДокументов.Добавить(СсылкаДокументаБезналичнойОплатыПФРНакопительнаяСотрудники);
		КонецЕсли;
		
		Если ПФРСтраховаяСотрудникиСтрока <> "0,00 р." Тогда
			СписокДокументов.Добавить(СсылкаДокументаБезналичнойОплатыПФРСтраховаяСотрудники);
		КонецЕсли;
		
		Если ФОМССотрудникиСтрока <> "0,00 р." Тогда
			СписокДокументов.Добавить(СсылкаДокументаБезналичнойОплатыФОМССотрудники);
		КонецЕсли;
		
		Если ФСССотрудникиСтрока <> "0,00 р." Тогда
			СписокДокументов.Добавить(СсылкаДокументаБезналичнойОплатыФСС);
		КонецЕсли;
	КонецЕсли;
	
	Если ФССТравматизмСотрудникиСтрока <> "0,00 р." И ДатаДокументаОбработкиСобытия < '20230701' Тогда 
		СписокДокументов.Добавить(СсылкаДокументаБезналичнойОплатыФССТравматизм);
	КонецЕсли;
	
	СтруктураПечати = ВыгрузитьДокументВФайл(СписокДокументов, "ПлатежноеПоручение");
	Если СтруктураПечати.АдресФайла = Неопределено Тогда
		
		Сообщить(Нстр("ru='Произошла ошибка при выгрузке документа '")+Объект);
		Возврат;
		
	КонецЕсли;
	
	ПолучитьФайл(СтруктураПечати.АдресФайла, СтруктураПечати.НаименованиеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФайлКлиентБанка() Экспорт
	
	БанкСчетСтруктура = Новый Структура("БанковскийСчет, СписокПлатежек", БанковскийСчетПоУмолчанию, ПолучитьСписокПлатежекПриНаличииСчета());
	
	ОткрытьФорму(
		"Обработка.КлиентБанкУНФ.Форма.СохранениеПлатежек",
		БанкСчетСтруктура,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаличиеГосОргана(ИмяПроцедурыПоЗавершениюСозданияГосОргана)
	КодГосОргана = "";
	ВидОргана = "";
	
	Если ГосОрганСуществует( КодГосОргана, ВидОргана) Тогда
		Возврат Истина;
	Иначе
		ДопПараметры = Новый Структура("ИмяПроцедурыПоЗавершениюСозданияГосОргана, КодГосОргана, ВидОргана", ИмяПроцедурыПоЗавершениюСозданияГосОргана, КодГосОргана, ВидОргана);
		ТекстВопроса = НСтр("ru='В справочнике «Контрагенты» не задан государственный орган для уплаты налога (взноса).
			|Создать его автоматически?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросОСозданииГосОргана",
			ЭтаФорма, ДопПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Создать автоматически'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Создать вручную'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,,КодВозвратаДиалога.Да, НСтр("ru='Отсутствует налоговый орган'"));
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриОтветеНаВопросОСозданииГосОргана(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если ДопПараметры.ВидОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган") Тогда
			ВыполнитьЗаполнениеСведенийОНалоговойИнспекции(ДопПараметры);
		ИначеЕсли ДопПараметры.ВидОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганПФР") Тогда
			ВыполнитьЗаполнениеСведенийОбОтделенииПФР(ДопПараметры);
		Иначе
			ВыполнитьЗаполнениеСведенийОбОтделенииФСС(ДопПараметры);
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидГосударственногоОргана", ДопПараметры.ВидОргана);
		ПараметрыФормы.Вставить("КодГосударственногоОргана", ДопПараметры.КодГосОргана);
		ПараметрыФормы.Вставить("ИмяПроцедурыПоЗавершениюСозданияГосОргана",ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана);
		ПараметрыФормы.Вставить("ЗапретРедактированияКода", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовФНС", ЭтотОбъект, ПараметрыФормы);
		
		ОткрытьФорму("Справочник.Контрагенты.Форма.РеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОНалоговойИнспекции(ДопПараметры)
	
	ОписаниеОшибки = "";
	ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки, ДопПараметры.КодГосОргана);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			
			ТекстВопроса = НСтр("ru='Для автоматического создания налогового органа
				|в справочнике «Контрагенты» необходимо подключиться к Интернет-поддержке
				|пользователей. Подключиться сейчас?'");
				
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения,ИмяПроцедурыПоЗавершениюСозданияГосОргана", "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду, КодГосОргана", ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана, ДопПараметры.КодГосОргана);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	Иначе
		Если ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьКвитанциюЗавершение" Тогда
			РаспечататьКвитанциюЗавершение();
		ИначеЕсли ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьПлатежноеПоручениеЗавершение" Тогда
			РаспечататьПлатежноеПоручениеЗавершение();
		ИначеЕсли ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "ПолучитьФайлКлиентБанка" Тогда
			ПолучитьФайлКлиентБанка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("ВызовПослеПодключения") Тогда
			
			Если ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду" Тогда
				
				ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(,ДополнительныеПараметры.КодГосОргана);
				
			ИначеЕсли ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьСведенияОбОтделенииФСС" Тогда
				
				ЗаполнитьСведенияОбОтделенииФСС(,ДополнительныеПараметры.КодГосОргана);
				
			ИначеЕсли ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьСведенияОбОтделенииПФР" Тогда
				
				ЗаполнитьСведенияОбОтделенииПФР(,ДополнительныеПараметры.КодГосОргана);
			КонецЕсли;
			
			Если ДополнительныеПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьКвитанциюЗавершение" Тогда
				РаспечататьКвитанциюЗавершение();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки = "", КодНалоговогоОрганаПолучателя)
	
	РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(КодНалоговогоОрганаПолучателя);
	
	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыНалоговогоОргана.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыНалоговогоОргана.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОбОтделенииФСС(ДопПараметры)
	
	ОписаниеОшибки = "";
	ЗаполнитьСведенияОбОтделенииФСС(ОписаниеОшибки, ДопПараметры.КодГосОргана);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			
			ТекстВопроса = НСтр("ru='Для автоматического создания отделения ФСС
				|в справочнике «Контрагенты» необходимо подключиться к Интернет-поддержке
				|пользователей. Данные по отделению ФСС пригодятся при уплате налогов.
				|Подключиться сейчас?'");
			
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения", "ЗаполнитьСведенияОбОтделенииФСС");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	Иначе
		Если ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьКвитанциюЗавершение" Тогда
			РаспечататьКвитанциюЗавершение();
		ИначеЕсли ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьПлатежноеПоручениеЗавершение" Тогда
			РаспечататьПлатежноеПоручениеЗавершение();
		ИначеЕсли ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "ПолучитьФайлКлиентБанка" Тогда
			ПолучитьФайлКлиентБанка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтделенииФСС(ОписаниеОшибки = "", КодОрганаФСС)
	
	РеквизитыОтделенияФСС = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(КодОрганаФСС);
	
	Если ЗначениеЗаполнено(РеквизитыОтделенияФСС.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыОтделенияФСС.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыОтделенияФСС.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОтделенияФСС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОбОтделенииПФР(ДопПараметры)
	
	ОписаниеОшибки = "";
	ЗаполнитьСведенияОбОтделенииПФР(ОписаниеОшибки, ДопПараметры.КодГосОргана);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			
			ТекстВопроса = НСтр("ru='Для автоматического создания отделения ПФ РФ
				|в справочнике «Контрагенты» необходимо подключиться к Интернет-поддержке
				|пользователей. Данные по отделению ПФ РФ пригодятся при уплате налогов.
				|Подключиться сейчас?'");
				
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения", "ЗаполнитьСведенияОбОтделенииПФР");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	Иначе
		Если ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьКвитанциюЗавершение" Тогда
			РаспечататьКвитанциюЗавершение();
		ИначеЕсли ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьПлатежноеПоручениеЗавершение" Тогда
			РаспечататьПлатежноеПоручениеЗавершение();
		ИначеЕсли ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "ПолучитьФайлКлиентБанка" Тогда
			ПолучитьФайлКлиентБанка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтделенииПФР(ОписаниеОшибки = "", КодОрганаПФР)
	
	РеквизитыОтделенияПФР = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Лев(КодОрганаПФР, 3));
	
	Если ЗначениеЗаполнено(РеквизитыОтделенияПФР.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыОтделенияПФР.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыОтделенияПФР.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОтделенияПФР);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовФНС(Ответ, ДопПараметры) Экспорт
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		Если ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьКвитанциюЗавершение" Тогда
			РаспечататьКвитанциюЗавершение();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ГосОрганСуществует(КодГосОргана, ВидОргана)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "КодНалоговогоОрганаПолучателя, КодОрганаПФР, КодОрганаФСС");
	
	КодГосОргана = Реквизиты.КодНалоговогоОрганаПолучателя;
	ВидОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган;
	ГосОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(ВидОргана, КодГосОргана);
	Если Не ЗначениеЗаполнено(ГосОрган.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КодГосОргана = Реквизиты.КодОрганаФСС;
	ВидОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС;
	ГосОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(ВидОргана, КодГосОргана);
	Если Не ЗначениеЗаполнено(ГосОрган.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьДокументВФайл(МассивОбъектов, ВидФайла)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Если ВидФайла = "Квитанция" Тогда
		Для Каждого Объект Из МассивОбъектов Цикл
			ТабДокОбъекта = Документы.НачислениеНалогов.СформироватьКвитанцию(Объект);
			ТабДокОбъекта.Область().СоздатьФорматСтрок();
			Если ТабДок = Неопределено Тогда
				ТабДок = ТабДокОбъекта;
			Иначе
				ТабДок.Вывести(ТабДокОбъекта);
			КонецЕсли;
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;
		
	ИначеЕсли ВидФайла = "ПлатежноеПоручение" Тогда
		ОбъектыПечати = Новый СписокЗначений;
		ТабДок = Документы.ПлатежноеПоручение.ПечатнаяФорма(МассивОбъектов, ОбъектыПечати);
	КонецЕсли;
	
	СтруктураПечати = Новый Структура ("АдресФайла, НаименованиеФайла");
	
	Если ТабДок = Неопределено Тогда
		Возврат СтруктураПечати;
	КонецЕсли;
	
	Каталог = КаталогВременныхФайлов()+РаботаВМоделиСервиса.ЗначениеРазделителяСеанса()+"\";
	
	ПроверкаКаталога = Новый Файл(Каталог);
	Если НЕ ПроверкаКаталога.Существует() Тогда
		СоздатьКаталог(Каталог);
	КонецЕсли;
	РасширениеФайла = ".pdf" ;
	
	Если МассивОбъектов.Количество() > 0 Тогда
		Если ВидФайла = "Квитанция" Тогда
			НаименованиеФайла = НСтр("ru='Квитанция на оплату зарпл.налогов'", ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			НаименованиеФайла = НСтр("ru='Платежные поручения '", ОбщегоНазначения.КодОсновногоЯзыка());
			Для Каждого Платежка Из МассивОбъектов Цикл
				НаименованиеФайла = НаименованиеФайла + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Платежка.Номер,
					Истина, Истина) + ", ";
			КонецЦикла;
			НаименованиеФайла = Лев(НаименованиеФайла, СтрДлина(НаименованиеФайла)-2);
		КонецЕсли;
	Иначе
		НаименованиеФайла = НСтр("ru='Результат'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	НаименованиеФайла = ?(СтрДлина(НаименованиеФайла) + СтрДлина(РасширениеФайла) > 64, Лев(НаименованиеФайла, 64
		- СтрДлина(РасширениеФайла)), НаименованиеФайла);
	НаименованиеФайла = СтрЗаменить(НаименованиеФайла, ":", "_");
	
	ПолноеИмяФайла = Каталог + НаименованиеФайла + РасширениеФайла;
	ПолноеИмяФайла = СтрЗаменить(ПолноеИмяФайла, """", "");
	
	Попытка
		ТабДок.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка сохранения файла на сервере'"), УровеньЖурналаРегистрации.Ошибка, , ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru= 'При сохранении файла на сервере в области данных %1 произошла ошибка:
					 |%2'"), РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), ОписаниеОшибки()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		Возврат СтруктураПечати;
		
	КонецПопытки;
	ДанныеФайла = Новый ДвоичныеДанные(ПолноеИмяФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
	УдалитьФайлы(ПолноеИмяФайла);
	СтруктураПечати.АдресФайла = АдресФайла;
	СтруктураПечати.НаименованиеФайла = НаименованиеФайла+РасширениеФайла;
	
	Возврат СтруктураПечати;
	
КонецФункции

#КонецОбласти
