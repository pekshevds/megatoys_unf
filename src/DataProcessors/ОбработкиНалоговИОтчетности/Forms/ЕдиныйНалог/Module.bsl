
#Область ОписаниеПеременных

&НаКлиенте
Перем СтруктураЗаписейПараметровУчета;

&НаКлиенте
Перем ВыводилисьДанныеДляБанка;

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Объект.Организация = Параметры.Организация;
		Иначе
			Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
			Если Не ЗначениеЗаполнено(Организация) Тогда
				Организация = Справочники.Организации.ПредопределеннаяОрганизация();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СобытиеКалендаря) Тогда
		Объект.СобытиеКалендаря = Параметры.СобытиеКалендаря;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СостояниеСобытия) Тогда
		
		Если ЗначениеЗаполнено(Параметры.СостояниеСобытия) Тогда
			
			Объект.СостояниеСобытия = Параметры.СостояниеСобытия;
			
		Иначе
			
			Объект.СостояниеСобытия = КалендарьОтчетности.ПолучитьСостояниеСобытияКалендаря(
				Объект.Организация,
				Объект.СобытиеКалендаря);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектНалогообложения = РегламентированнаяОтчетностьУСН.ОбъектНалогообложенияНаДату(Объект.Организация,Объект.СобытиеКалендаря);
	
	ДатыСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СобытиеКалендаря, "ДатаДокументаОбработкиСобытия,ДатаОкончанияСобытия,ДатаНачалаДокументов,ДатаОкончанияДокументов");
	
	Если ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.ДоходыМинусРасходы Тогда
		ВидВзаиморасчетов = Справочники.ВидыНалогов.ЕдиныйНалогПриУСНРасходы;
	Иначе
		ВидВзаиморасчетов = Справочники.ВидыНалогов.ЕдиныйНалогПриУСН;
	КонецЕсли;
	
	ДокументВзаиморасчетовСБюджетом = РегламентированнаяОтчетностьУСН.ПолучитьДокументВзаиморасчетовСБюджетом(
		Объект.Организация,
		ВидВзаиморасчетов,
		ДатыСобытия.ДатаДокументаОбработкиСобытия,
		ДатыСобытия.ДатаОкончанияСобытия,
		Истина);
		
	Элементы.ГруппаСтрока2Продолжение.Видимость = Ложь;
	Элементы.ГруппаУплатыЧерезБанкОписание.Видимость = Ложь;
	Элементы.ГруппаУплатыЧерезКассуОписание.Видимость = Ложь;
	
	УпрощенныйЗачетФиксированныхВзносов = РегламентированнаяОтчетностьУСН.УпрощенныйЗачетФиксированныхВзносов(
	Объект.Организация,	ДатыСобытия.ДатаДокументаОбработкиСобытия);

	ПолучитьДанныеОтчетности(); 	
	
	Элементы.ГруппаУплатыЧерезБанкОписание.Видимость = Ложь;
	Элементы.ГруппаУплатыЧерезКассуОписание.Видимость = Ложь;
	Если ДатыСобытия.ДатаДокументаОбработкиСобытия > Дата('20200401')
		И ДатыСобытия.ДатаДокументаОбработкиСобытия < Дата('20210101') 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ПоддержкаИП") Тогда
		Элементы.ДекорацияНалоговыйВычет.Видимость = Истина;
		Элементы.ДекорацияМинус4.Видимость = Истина;
		Элементы.СуммаНалоговыхВычетов.Видимость = Истина;
		Элементы.ДекорацияТекстОписаниеНалоговыйВычет.Видимость = Истина;   
	ИначеЕсли ВзносСДоходов + ВзносПоЕдиномуТарифу > 0 Тогда
		Элементы.ДекорацияНалоговыйВычет.Видимость = Истина;
		Элементы.ДекорацияМинус4.Видимость = Истина;
		Элементы.СуммаНалоговыхВычетов.Видимость = Истина;
		Элементы.ДекорацияТекстОписаниеНалоговыйВычет2023.Видимость = Истина;     
		
		СобытиеВзносСДоходов = 
		Обработки.ОбработкиНалоговИОтчетности.ПолучитьСобытиеКалендаряПоВносамИПДоходы(
		ДатыСобытия.ДатаНачалаДокументов, Истина);   
		
		СобытиеВзносПоЕдиномуТарифу = 
		Обработки.ОбработкиНалоговИОтчетности.ПолучитьСобытиеКалендаряПоВносамИПДоходы(
		ДатыСобытия.ДатаНачалаДокументов); 
		
		Элементы.ДоляДоходовПоУСН.Видимость = ДоляДоходовПоУСН < 100 И ДоляДоходовПоУСН <> 0;	
		
	Иначе
		Элементы.ДекорацияНалоговыйВычет.Видимость = Ложь;
		Элементы.ДекорацияМинус4.Видимость = Ложь;
		Элементы.СуммаНалоговыхВычетов.Видимость = Ложь;
		Элементы.ДекорацияТекстОписаниеНалоговыйВычет.Видимость = Ложь;  
		Элементы.ГруппаВзносыПодлежащиеУплате.Видимость = Ложь;
		Элементы.ДоляДоходовПоУСН.Видимость = Ложь;
	КонецЕсли;
	
	ПериодЗадачиПредставление = ПредставлениеПериода(
	ДатыСобытия.ДатаНачалаДокументов,
	КонецДня(ДатыСобытия.ДатаОкончанияДокументов),
	"ФП=Истина");
	
	ПериодСобытия = Объект.СобытиеКалендаря.ДатаОкончанияСобытия;
	
	ПлательщикЕНП = РегламентированнаяОтчетностьУСН.ПлательщикЕНП(
	Объект.Организация,
	Объект.СобытиеКалендаря.ДатаОкончанияСобытия);
	
	ЗаписьКалендаряОтчет = НайтиЗаписьКалендаряОтчет();
	Если ЗаписьКалендаряОтчет <> Неопределено Тогда  
		ЗаписьКалендаря = ЗаписьКалендаряОтчет;
	Иначе
		ЗаписьКалендаря = Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьЗаписьКалендаря(Объект.Организация,Объект.СобытиеКалендаря)
	КонецЕсли;
	
	ПодаетсяУведомлениеПоНалогуЗаПериод = Ложь;
	
	ЗаполнитьУведомления();
	УправлениеФормойБлокУведомление();
	
КонецПроцедуры 

Функция НайтиЗаписьКалендаряОтчет()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаписиКалендаряПодготовкиОтчетности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|		ПО ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря = КалендарьПодготовкиОтчетности.Ссылка
	|ГДЕ
	|	ЗаписиКалендаряПодготовкиОтчетности.Организация = &Организация
	|	И НЕ ЗаписиКалендаряПодготовкиОтчетности.ПометкаУдаления
	|	И КалендарьПодготовкиОтчетности.Задача = &Задача
	|	И КалендарьПодготовкиОтчетности.ДатаНачалаСобытия = &ДатаНачалаСобытия");
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Задача", Справочники.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоУСН); 
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", Объект.СобытиеКалендаря.ДатаНачалаСобытия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Ознакомиться") Тогда
		
		Элементы.СтраницаЕдиногоНалога.ТекущаяСтраница = Элементы.РезультатРасчета;
		
	ИначеЕсли Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Уплатить") Тогда
		
		Элементы.СтраницаЕдиногоНалога.ТекущаяСтраница = Элементы.УплатаНалога;
		
	Иначе
		
		Элементы.СтраницаЕдиногоНалога.ТекущаяСтраница = Элементы.ЗадачаВыполнена;
		
	КонецЕсли;
	
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	
	ВыводилисьДанныеДляБанка = Ложь;
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаТекущаяОрганизация" Тогда
		Если Окно.Основное Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("e1cib/navigationpoint/НалогиИОтчетность");
		Иначе
			Закрыть();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменениеСостоянияСобытияКалендаря" Тогда
		Если Параметр = Объект.СобытиеКалендаря
				И Источник <> ЭтаФорма
				И Окно<> Неопределено
				И Не Окно.Основное Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ


&НаКлиенте
Процедура УплатаЧерезБанк(Команда)
	Элементы.ГруппаУплатыЧерезБанкОписание.Видимость = Истина;
	Элементы.ГруппаУплатыЧерезКассуОписание.Видимость = Ложь;
	Элементы.УплатаЧерезБанк.Шрифт = Новый Шрифт(Элементы.УплатаЧерезБанк.Шрифт,,,Истина);
	Элементы.УплатаЧерезКассу.Шрифт = Новый Шрифт(Элементы.УплатаЧерезКассу.Шрифт,,,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УплатаЧерезКассу(Команда)
	Элементы.ГруппаУплатыЧерезБанкОписание.Видимость = Ложь;
	Элементы.ГруппаУплатыЧерезКассуОписание.Видимость = Истина;
	Элементы.УплатаЧерезБанк.Шрифт = Новый Шрифт(Элементы.УплатаЧерезБанк.Шрифт,,,Ложь);
	Элементы.УплатаЧерезКассу.Шрифт = Новый Шрифт(Элементы.УплатаЧерезКассу.Шрифт,,,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРучнуюЗаписьУСН(Команда)
	ОткрытьФорму("Документ.ЗаписиУСН.ФормаОбъекта",,Элементы.КУДиР);
КонецПроцедуры

&НаКлиенте
Процедура СтраницыРезультатаРасчетаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "РезультатРасчетаПредставляение" Тогда
		// Возможно необходимо перерасчет
		// пересчитаем
		ОбновитьРасчет();
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Пересчитать(Команда)
	
	ОбновитьРасчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьРасходыВПрограмме(Команда)
	
	Если ВсегоКУплате = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Сумма нулевая. Уплата не требуется.'"));
		Возврат;
	КонецЕсли;
	
	ДанныеПоНачислениям = Новый Массив;
	ДанныеПоНачислениям.Добавить(Новый Структура("НачислениеНалогов,Сумма,Представление", ДокументВзаиморасчетовСБюджетом, ВсегоКУплате, НСтр("ru='Единый налоговый платеж'")));
	
	ОткрытьФорму(
		"Обработка.ОбработкиНалоговИОтчетности.Форма.ГрупповаяРегистрацияРасходов",
		Новый Структура(
			"Организация,СписокКПоиску,ДанныеПоНачислениям,СобытиеКалендаря", 
			Объект.Организация,
			,
			ДанныеПоНачислениям,Объект.СобытиеКалендаря));
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДоходовЗаГодЕННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПериодПараметр = КалендарьОтчетностиПовтИсп.ПолучитьСтандартныйПериодДокументовДляСобытия(Объект.СобытиеКалендаря);
	
	ОткрытьФорму(
		"Отчет.ДоходыРасходы.ФормаОбъекта",
		Новый Структура("Организация,СформироватьПриОткрытии, Период,ВидОтчета", Объект.Организация, Истина, ПериодПараметр, "Доходы"));
КонецПроцедуры

&НаКлиенте
Процедура СуммаРасходовЗаГодЕННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СтавкаНалогаЕН = "1%" Тогда
		СпсКнопок = Новый СписокЗначений;
		СпсКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Показать расходы'"));
		СпсКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Закрыть'"));
		
		оп = Новый ОписаниеОповещения("ОповещениеПоказРасходов", ЭтотОбъект);
		
		ПоказатьВопрос(
			оп,
			НСтр("ru='При расчете налога по ставке в 1% расходы не учитываются.
					|Ставка в 1% используется, когда налог, исчисленный по формуле
					|(Доходы – Расходы) * 15%,
					|меньше, чем налог, исчисленный по формуле
					|Доходы * 1%.'"),
			СпсКнопок);
		Возврат;
	ИначеЕсли ОбъектНалогообложения = ПредопределенноеЗначение("Перечисление.ВидыОбъектовНалогообложения.Доходы") Тогда
		
		СпсКнопок = Новый СписокЗначений;
		СпсКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Показать расходы'"));
		СпсКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Закрыть'"));
		
		оп = Новый ОписаниеОповещения("ОповещениеПоказРасходов", ЭтотОбъект);
		
		ПоказатьВопрос(
			оп,
			НСтр("ru='Вы используете объект налоогообложения «Доходы».
					|В этом случае расходы не учитываются при расчете налога.'"),
			СпсКнопок);
		
		Возврат;
	
	КонецЕсли;
	
	ПоказатьФормуРасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоказРасходов(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьФормуРасходов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаЕННажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если СтавкаНалогаЕН = "1%" Тогда
		ПоказатьПредупреждение(,
			НСтр("ru='Ставка в 1% используется, когда налог исчисленный по формуле (Доходы – Расходы) * 15% меньше,
					|чем налог, исчисленный по формуле Доходы * 1%.'"));
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СтруктураЗаписейПараметровУчета) Тогда
			СтруктураЗаписейПараметровУчета = ПолучитьСтруктуруЗаписиПараметровУчета(Объект.Организация, Объект.СобытиеКалендаря);
		КонецЕсли;
		
		ОткрытьФорму(
			"РегистрСведений.СистемыНалогообложенияОрганизаций.ФормаЗаписи",
			СтруктураЗаписейПараметровУчета);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СуммаСтраховыхВзносовЕННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОбъектНалогообложения = ПредопределенноеЗначение("Перечисление.ВидыОбъектовНалогообложения.ДоходыМинусРасходы") Тогда
		
		СпсКнопок = Новый СписокЗначений;
		СпсКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Показать страховые взносы'"));
		СпсКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Закрыть'"));
		оп = Новый ОписаниеОповещения("ОповещениеФормаСтраховыхВзносов", ЭтотОбъект);
		ПоказатьВопрос(
			оп,
			НСтр("ru='Вы используете объект налоогообложения «Доходы, уменьшенные на величину расходов».
					|В этом случае страховые взносы включены в состав расходов.'"),
			СпсКнопок);
		Возврат;
		
	ИначеЕсли СуммаСтраховыхВзносовКУплатеЕН <> СуммаСтраховыхВзносовЕН Тогда
		// К вычету принимается 50 процентов от суммы налога
		СпсКнопок = Новый СписокЗначений;
		СпсКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Показать страховые взносы'"));
		СпсКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Закрыть'"));
		оп = Новый ОписаниеОповещения("ОповещениеФормаСтраховыхВзносов", ЭтотОбъект);
		Если Зачет100ПроцСтрахВзносовЕН Тогда
			ПоказатьВопрос(
				оп,
				НСтр("ru='Сумма страховых взносов превысила сумму налога.
						|В этом случае сумма страховых взносов вычитается не полностью.'"),
				СпсКнопок);
		Иначе
			ПоказатьВопрос(
				оп,
				НСтр("ru='Сумма страховых взносов превысила 50% от суммы налога.
						|В этом случае сумма налога уменьшается на 50%.'"),
				СпсКнопок);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПоказатьФормуСтраховыхВзносов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеФормаСтраховыхВзносов(Ответ, Параметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьФормуСтраховыхВзносов();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура РаспечататьПлатежноеПоручение(Команда)
	
	Если ВсегоКУплатеЕН = "0,00 р." Тогда
		ПоказатьПредупреждение(,НСтр("ru='Сумма нулевая. Уплата не требуется.'"));
		Возврат;
	КонецЕсли;
	
	ВыводилисьДанныеДляБанка = Истина;
	
	Если ПлатежноеПоручение.Пустая() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеВыбораСчета", ЭтотОбъект, Новый Структура("Файл", Ложь));
		РегламентированнаяОтчетностьУСНКлиент.ПолучитьБанковскийСчетДляУплатыНалога(оп, Объект.Организация);
		Возврат;
	КонецЕсли;
	
	РаспечататьПлатежноеПоручениеЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыбораСчета(БанковскийСчет, Параметры) Экспорт
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	БанковскийСчетПоУмолчанию = БанковскийСчет;
	
	Если Параметры.Файл Тогда
		БанкСчетСтруктура = Новый Структура("БанковскийСчет", БанковскийСчетПоУмолчанию);
		
		ПлатежноеПоручение = РегламентированнаяОтчетностьУСН.СоздатьБезналичноеСписаниеПоВзаиморасчетамСБюджетом(ДокументВзаиморасчетовСБюджетом, БанковскийСчетПоУмолчанию,, ВсегоКУплате);
		
		СписокПлатежек = Новый СписокЗначений;
		СписокПлатежек.Добавить(ПлатежноеПоручение);
		
		БанкСчетСтруктура.Вставить("СписокПлатежек", СписокПлатежек);
		
		ОткрытьФорму(
			"Обработка.КлиентБанкУНФ.Форма.СохранениеПлатежек",
			БанкСчетСтруктура,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Если ПроверитьНаличиеГосОргана("РаспечататьПлатежноеПоручениеЗавершение") Тогда
			РаспечататьПлатежноеПоручениеЗавершение();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиДляКлиентБанка(Команда)
	
	ВыводилисьДанныеДляБанка = Истина;
	
	Если ВсегоКУплатеЕН = "0,00 р." Тогда
		ПоказатьПредупреждение(,НСтр("ru='Сумма нулевая. Уплата не требуется.'"));
		Возврат;
	КонецЕсли;
	
	Если ПлатежноеПоручение.Пустая() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеВыбораСчета", ЭтотОбъект, Новый Структура("Файл", Истина));
		РегламентированнаяОтчетностьУСНКлиент.ПолучитьБанковскийСчетДляУплатыНалога(оп, Объект.Организация);
		Возврат;
	КонецЕсли;
	
	ПолучитьФайлКлиентБанка();
	
КонецПроцедуры


&НаКлиенте
Процедура СуммаАвансовыхПлатежейЗаГодЕННажатие(Элемент, СтандартнаяОбработка)
		СтандартнаяОбработка = Ложь;
	
	ПериодПараметр = КалендарьОтчетностиПовтИсп.ПолучитьСтандартныйПериодДокументовДляСобытия(Объект.СобытиеКалендаря);
	
	СпсВидов = Новый СписокЗначений;
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.АвансовыйПлатежПриУСН"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.АвансовыйПлатежПриУСНРасходы"));

	
	СпсЗадач = Новый СписокЗначений;
	СпсЗадач.Добавить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП"));
	СпсЗадач.Добавить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН"));
	
	ОткрытьФорму(
		"Отчет.УплатыНалоговИВзносов.ФормаОбъекта",
		Новый Структура(
			"Организация, СформироватьПриОткрытии, Период,ВидВзаиморасчетов,УчетВыплатТекущегоГода, ЗадачиКалендаря",
			Объект.Организация,
			Истина,
			ПериодПараметр,
			СпсВидов,
			Истина,
			СпсЗадач));

КонецПроцедуры

&НаКлиенте
Процедура РаспечататьКвитанциюДляСбербанка(Команда)
	
	Если ПроверитьНаличиеГосОргана("РаспечататьКвитанциюЗавершение") Тогда
		РаспечататьКвитанциюЗавершение();
	КонецЕсли;
		
КонецПроцедуры

// -----------------------------------------------------------------------------
// События переходов


&НаКлиенте
Процедура ПереходЗаполнение(Команда)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Заполнить");
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Объект.Организация,
		Объект.СобытиеКалендаря,
		Объект.СостояниеСобытия,
		"");
		
	ПараметрыФормы = Новый Структура("Организация,СобытиеКалендаря", Объект.Организация,Объект.СобытиеКалендаря);
	
	КалендарьОтчетностиКлиент.ОткрытьФормуНачалаЗаполнения(ЭтаФорма,ПараметрыФормы);
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ПереходУплата(Команда)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Уплатить");
	
	ЗафиксироватьПереходкУплате(Объект.Организация, Объект.СобытиеКалендаря, Объект.СостояниеСобытия, ВсегоКУплатеЕН);
	
	Элементы.СтраницаЕдиногоНалога.ТекущаяСтраница = Элементы.УплатаНалога;
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗафиксироватьПереходкУплате(Организация, Событие, Состояние, ВсегоКУплате)
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		Событие,
		Состояние,
		ВсегоКУплате);
	
	
	ЗаписьКалендаря = Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьЗаписьКалендаря(Организация, Событие);
	Если ЗаписьКалендаря <> Неопределено Тогда
		ОбъектЗаписьКалендаря = ЗаписьКалендаря.ПолучитьОбъект();
		ОбъектЗаписьКалендаря.Завершено = Ложь;
		ОбъектЗаписьКалендаря.Записать();
	КонецЕсли;
	
КонецПроцедуры




&НаКлиенте
Процедура ПереходРезультатРасчета1Нажатие(Элемент)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Ознакомиться");
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Объект.Организация,
		Объект.СобытиеКалендаря,
		Объект.СостояниеСобытия,
		ВсегоКУплатеЕН);
	
	Элементы.СтраницаЕдиногоНалога.ТекущаяСтраница = Элементы.РезультатРасчета;
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходВыполнил(Команда)
	
	БезСозданияПлатежек = Ложь;
	// ВыводилисьДанныеДляБанка - не инициализируется изначально
	Если СсылкаДокументаНаличнойУплаты.Пустая() И НЕ ВыводилисьДанныеДляБанка И ВсегоКУплатеЕН <> "0,00 р." Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросОбОтсутствииПлатежныхДокументов",
			ЭтаФорма);
		
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru='Платежки не создавались. Расходы через кассу не зарегистрированы.
			         |Вы уверены, что все выполнено?'"),
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ПереходВыполнил1(Истина);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОтветеНаВопросОбОтсутствииПлатежныхДокументов(РезультатВопроса, ДопПараметры) Экспорт
	
		Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		БезСозданияПлатежек = Истина;
		ПереходВыполнил1(БезСозданияПлатежек);
	
КонецПроцедуры


&НаКлиенте
Процедура ПереходВыполнил1(БезСозданияПлатежек)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Завершено");
	
	КалендарьОтчетности.ЗавершитьСобытиеКалендаряОтчетности(
		Объект.Организация,
		Объект.СобытиеКалендаря,
		"");
	
	Элементы.СтраницаЕдиногоНалога.ТекущаяСтраница = Элементы.ЗадачаВыполнена;
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.ЗаписиКалендаряПодготовкиОтчетности"));
	Оповестить("Запись_ЗаписиКалендаряПодготовкиОтчетности");
	
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияТекстОписание6ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ОткрытаИзФормыСобытия,СобытиеКалендаря, Организация", Истина, Объект.СобытиеКалендаря, Объект.Организация);
	ОткрытьФорму("Документ.ЗаписиУСН.Форма.ФормаСпискаЗаписиПрочие", ПараметрыФормы);
КонецПроцедуры


// Конец событий переходов
// -----------------------------------------------------------------------------

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


// Процедура заполняет данные формы по данным ранее сформированной отчетности
//
&НаСервере
Процедура ПолучитьДанныеОтчетности()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетности.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	ЗначенияПоказателейОтчетности.ПоказательОтчетности.Код КАК КодОтчетности
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетности КАК ЗначенияПоказателейОтчетности
	|ГДЕ
	|	ЗначенияПоказателейОтчетности.Организация = &Организация
	|	И ЗначенияПоказателейОтчетности.ПериодОтчетности = &ПериодОтчетности
	|	И ЗначенияПоказателейОтчетности.ПоказательОтчетности В(&МассивПоказателей)");
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ПериодОтчетности", Объект.СобытиеКалендаря.ДатаДокументаОбработкиСобытия);
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.ВсегоКУплатеЕН);
	МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.РасчетМинимальнойСуммыЕН);
	МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.СтавкаНалогаЕН);
	МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.СуммаАвансовыхПлатежейЗаГодЕН);
	МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.СуммаДоходовЗаГодЕН);
	МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.СуммаЕН);
	МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.СуммаРасходовЗаГодЕН);
	МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.СуммаСтраховыхВзносовЕН);
	МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.НалоговаяБазаЕН);
	МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.СуммаСтраховыхВзносовКУплатеЕН);
	МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.Зачет100ПроцСтрахВзносовЕН);
	МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.СтавкаНалогаЕНПовышенная);
	МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.СуммаДоходовЗаГодЕНПовышенная);
	МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.СуммаЕНПовышенная);
	МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.СуммаРасходовЗаГодЕНПовышенная);   
	МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.НалоговыйВычетЕН);
	
	Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.КодОтчетности = "СтавкаНалогаЕН" 
			Или Выборка.КодОтчетности = "СтавкаНалогаЕНПовышенная"  Тогда
			ЭтаФорма[Выборка.КодОтчетности] = Формат(Выборка.ЗначениеПоказателя, "ЧЦ=4; ЧДЦ=2; ЧН=" ) + "%";
		ИначеЕсли Выборка.КодОтчетности = "Зачет100ПроцСтрахВзносовЕН" Тогда
			Зачет100ПроцСтрахВзносовЕН = Выборка.ЗначениеПоказателя;
		ИначеЕсли Выборка.КодОтчетности = "СуммаЕНПовышенная" Тогда	
			Элементы.ГруппаСтрока2Продолжение.Видимость = (Выборка.ЗначениеПоказателя > 0);
			ЭтаФорма[Выборка.КодОтчетности] = Формат(Выборка.ЗначениеПоказателя, "ЧДЦ=2; ЧРГ=; ЧН=" ) + " р.";
		Иначе
			Если Выборка.КодОтчетности = "ВсегоКУплатеЕН" Тогда
				ВсегоКУплате = Выборка.ЗначениеПоказателя;
			КонецЕсли; 			
			
			ЭтаФорма[Выборка.КодОтчетности] = Формат(Выборка.ЗначениеПоказателя, "ЧДЦ=2; ЧРГ=; ЧН=" ) + " р.";
		КонецЕсли;
	КонецЦикла;
	
	ДатыСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СобытиеКалендаря, "ДатаДокументаОбработкиСобытия,ДатаОкончанияСобытия,ДатаНачалаДокументов,ДатаОкончанияДокументов");
	
	Если ДатыСобытия.ДатаДокументаОбработкиСобытия > Дата('20200401')
		И ДатыСобытия.ДатаДокументаОбработкиСобытия < Дата('20210101') 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ПоддержкаИП") Тогда
		
		МассивПоказателей.Добавить(ПланыВидовХарактеристик.ПоказателиОтчетности.НалоговыйВычет);
		Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей); 
		Запрос.УстановитьПараметр("ПериодОтчетности", '20200630'); 
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.КодОтчетности = "НалоговыйВычет" Тогда
				НалоговыйВычет = Выборка.ЗначениеПоказателя; 
				НалоговыйВычетЕН = Формат(Выборка.ЗначениеПоказателя, "ЧДЦ=2; ЧРГ=; ЧН=" ) + " р.";
				              
				ВсегоКУплате = Окр(Макс(0,ВсегоКУплате - НалоговыйВычет));
				ВсегоКУплатеЕН = Формат(ВсегоКУплате, "ЧДЦ=2; ЧРГ=; ЧН=" ) + " р.";
			КонецЕсли;
		КонецЦикла;	
			
	КонецЕсли;  
	
	ДатаДокументаОбработкиСобытия = КонецДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СобытиеКалендаря,"ДатаДокументаОбработкиСобытия"));
	
	Если УпрощенныйЗачетФиксированныхВзносов Тогда
		
		// Включаем взносы, подлежащие уплате в текущем налоговом периоде
		// Федеральный закон от 31.07.2023 N 389-ФЗ
		
		ВзносыСДоходов = РегламентированнаяОтчетностьУСН.ВзносыСДоходовПодлежащиеУплате(
		Объект.Организация,
		ДатаДокументаОбработкиСобытия);
		
		ВзносПоЕдиномуТарифу = РегламентированнаяОтчетностьУСН.ВзносыПоЕдиномуТарифуПодлежащиеУплате(
		Объект.Организация,
		ДатаДокументаОбработкиСобытия);  		
		
		ВзносСДоходов = ВзносыСДоходов.Всего;
			
		СистемаНалогообложенияОрганизации = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, ДатаДокументаОбработкиСобытия);
		
		ПрименяетсяПСН = СистемаНалогообложенияОрганизации.ПрименяетсяПатент; 
		
		УчитыватьПСН = (ДатаДокументаОбработкиСобытия >= Дата(2021, 1, 1))
		И СистемаНалогообложенияОрганизации.ПрименяетсяПатент;
		
		Если УчитыватьПСН Тогда
			Периодичность = Перечисления.Периодичность.Год;
			ДоляДоходовПоУСН = 100 * (1 - РегламентированнаяОтчетностьУСН.ДоляДоходовПатентнойСистемыНалогообложения(
			Объект.Организация,
			ДатаДокументаОбработкиСобытия,
			Периодичность));
		КонецЕсли;
		
		СрокПоЕдиномуТарифу = Объект.СобытиеКалендаря.ДатаОкончанияСобытия;
		Обработки.ОбработкиНалоговИОтчетности.УточнитьСрокУплатыВзносовЕдиныйТариф(СрокПоЕдиномуТарифу);
		
		Элементы.ВзносПоЕдиномуТарифу.Подсказка = СтрШаблон(НСтр("ru = 'Срок оплаты - %1
		|Уменьшить налог следует в текущем периоде.'"),
		Формат(СрокПоЕдиномуТарифу, "ДЛФ=DD"));
		
		ТекущийГод = Год(ДатаДокументаОбработкиСобытия);
		
		Если ЗначениеЗаполнено(ВзносыСДоходов.ПереходныйПериод) Тогда
			Элементы.ВзносСДоходов.Подсказка = СтрШаблон(НСтр("ru = 'Взнос за %1 г. - %2 руб.
			|Взнос за %3 г. - %4 руб. (для уменьшения в %5 г. приниматься не будет)'"),
			Формат(ТекущийГод - 1, "ЧГ=0"),
			ВзносыСДоходов.ЗаТекущийГод,
			Формат(ТекущийГод, "ЧГ=0"),
			ВзносыСДоходов.ПереходныйПериод,
			Формат(ТекущийГод + 1, "ЧГ=0"));
		Иначе
			Элементы.ВзносСДоходов.Подсказка = СтрШаблон(НСтр("ru = 'Взнос с доходов за %1 г.
			|Взнос за %2 г. можно принять в налоговой базе в %3 г.'"),
			Формат(ТекущийГод - 1, "ЧГ=0"),
			Формат(ТекущийГод, "ЧГ=0"),
			Формат(ТекущийГод + 1, "ЧГ=0"));
		КонецЕсли; 
		
		ФорматЧиселВПояснении = НСтр("ru = 'ЧДЦ=2; ЧН=0,00; ЧГ=3,0'");		
		Если (ВзносПоЕдиномуТарифу + ВзносСДоходов) > 0 Тогда
			// Выводим расчет с учетом взносов, подлежащих уплате
			Если ДоляДоходовПоУСН < 100 Тогда
				// Есть совмещение с ПСН 			
				Элементы.СуммаНалоговыхВычетов.Подсказка = НСтр("ru = 'Налоговый вычет = (По единому тарифу + Взнос с доходов) * Доля доходов по УСН'")
				+ Символы.ПС + СтрШаблон("(%1 + %2) * %3%%",
				Формат(ВзносПоЕдиномуТарифу, ФорматЧиселВПояснении),
				Формат(ВзносСДоходов, ФорматЧиселВПояснении),
				Формат(ДоляДоходовПоУСН, ФорматЧиселВПояснении));  
			Иначе
				Элементы.СуммаНалоговыхВычетов.Подсказка = НСтр("ru = 'Налоговый вычет = По единому тарифу + Взнос с доходов'")
				+ Символы.ПС + СтрШаблон("%1 + %2",
				Формат(ВзносПоЕдиномуТарифу, ФорматЧиселВПояснении),
				Формат(ВзносСДоходов, ФорматЧиселВПояснении));
			КонецЕсли;
			
		Иначе
			Элементы.СуммаНалоговыхВычетов.Подсказка = НСтр("ru = 'Налоговый вычет: взносы в фиксированном размере'");
		КонецЕсли;
		
	КонецЕсли; 
	
	НайтиДокументОплаты();
	
КонецПроцедуры

// Процедура устанавливает видимость и доступность элементов управления
//
&НаКлиенте
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовокНаКлиенте();
	
	Элементы.ГруппаСтрока10.Видимость = Истина;
	Элементы.ГруппаСтрока11.Видимость = Истина;
	Элементы.ГруппаСтрока12.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасчет()
	
	ДатаДокументаОбработкиСобытия = КонецДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СобытиеКалендаря,"ДатаДокументаОбработкиСобытия"));
	РегламентированнаяОтчетностьУСН.ВыполнитьФормированияВсехЗаписейКУДИР(ДатаДокументаОбработкиСобытия);
	РегламентированнаяОтчетностьУСН.ВыполнитьРасчетЕдиногоНалога(
		Объект.Организация,
		ДатаДокументаОбработкиСобытия,
		Объект.СобытиеКалендаря);
	
	ПолучитьДанныеОтчетности();
	
	УправлениеФормойБлокУведомление();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок()
	
	ИмяКнопки = ПолучитьИмяЭлементаКнопкиПоУмолчанию(Элементы.СтраницаЕдиногоНалога.ТекущаяСтраница.Имя);
	
	Если НЕ ПустаяСтрока(ИмяКнопки) Тогда
		Элементы[ИмяКнопки].КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы.СтраницаЕдиногоНалога.ТекущаяСтраница.Заголовок, ПериодЗадачиПредставление);
	РегламентированнаяОтчетностьУСНКлиентСервер.УстановитьЗаголовокФормыЗадачи(ЭтаФорма, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовокНаКлиенте()
	
	ИмяСтраницы = Элементы.СтраницаЕдиногоНалога.ТекущаяСтраница.Имя;
	ИмяКнопки = ПолучитьИмяЭлементаКнопкиПоУмолчанию(ИмяСтраницы);
	
	Если НЕ ПустаяСтрока(ИмяКнопки) Тогда
		Элементы[ИмяКнопки].КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы.СтраницаЕдиногоНалога.ТекущаяСтраница.Заголовок, ПериодЗадачиПредставление);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяЭлементаКнопкиПоУмолчанию(ИмяСтраницы)
	
	Если ИмяСтраницы = "РезультатРасчета" Тогда
		Возврат "ПереходДалее";
	ИначеЕсли ИмяСтраницы = "УплатаНалога" Тогда
		Возврат "ПереходВыполнил";
	ИначеЕсли ИмяСтраницы = "ЗадачаВыполнена" Тогда
		Возврат "";
	Иначе
		ВызватьИсключение НСтр("ru='Неизвестное имя текущей страницы'");
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЗаписиПараметровУчета(Организация, СобытиеКалендаря)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизацийСрезПоследних.Период,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.Организация
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(
	|			&Дата,
	|			 Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Ключ = РегистрыСведений.СистемыНалогообложенияОрганизаций.СоздатьКлючЗаписи(
			Новый Структура(
				"Период,Организация",
				Выборка.Период,
				Выборка.Организация));
		
		Возврат Новый Структура("Ключ",Ключ);
		
	Иначе
		Возврат Новый Структура; // мы не должны попадать в эту форму, если параметры на дату события не заполнены
	КонецЕсли;
	
	
КонецФункции

&НаСервере
Процедура НайтиДокументОплаты()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходДенежныхСредствИзКассы.Ссылка
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходДенежныхСредствИзКассы
	|ГДЕ
	|	РасходДенежныхСредствИзКассы.Организация = &Организация
	|	И РасходДенежныхСредствИзКассы.ДокументОснование = &ДокументОснование
	|	И РасходДенежныхСредствИзКассы.Проведен");
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументВзаиморасчетовСБюджетом);
	
	Выборка  = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СсылкаДокументаНаличнойУплаты = Выборка.Ссылка;
	Иначе
		СсылкаДокументаНаличнойУплаты = Документы.РасходИзКассы.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуРасходов()
	
	ПериодПараметр = КалендарьОтчетностиПовтИсп.ПолучитьСтандартныйПериодДокументовДляСобытия(Объект.СобытиеКалендаря);
	
	ОткрытьФорму(
		"Отчет.ДоходыРасходы.ФормаОбъекта",
		Новый Структура("Организация, СформироватьПриОткрытии, Период,ВидОтчета",Объект.Организация, Истина, ПериодПараметр, "Расходы"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуСтраховыхВзносов()
	
		ПериодПараметр = КалендарьОтчетностиПовтИсп.ПолучитьСтандартныйПериодДокументовДляСобытия(Объект.СобытиеКалендаря);
	
	СпсВидов = Новый СписокЗначений;
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРНакопительная"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРСтраховая"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРСвыше300тр"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ТФОМС"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ФФОМС"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРНакопительнаяСотрудники"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРСтраховаяСотрудники"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ФСССотрудники"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ФССТравматизмСотрудники"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ФОМССотрудники"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф"));     
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.СтраховыеВзносыЕдиныйТариф"));
	
	СпсЗадач = Новый СписокЗначений;
	СпсЗадач.Добавить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП"));
	СпсЗадач.Добавить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.НалогиСотрудников"));
	СпсЗадач.Добавить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыПриДоходахСвыше300тр"));
	СпсЗадач.Добавить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыЗаСотрудников"));
	
	ОткрытьФорму(
		"Отчет.УплатыНалоговИВзносов.ФормаОбъекта",
		Новый Структура(
			"Организация, СформироватьПриОткрытии, Период,ВидВзаиморасчетов, ЗадачиКалендаря",
			Объект.Организация,
			Истина,
			ПериодПараметр,
			СпсВидов,
			СпсЗадач));

КонецПроцедуры


&НаКлиенте
Процедура РаспечататьКвитанциюЗавершение() Экспорт
	
	СтруктураПечати = ВыгрузитьДокументВФайл(Новый Структура("НачислениеНалогов,Сумма, СобытиеКалендаря", ДокументВзаиморасчетовСБюджетом, ВсегоКУплате, Объект.СобытиеКалендаря), "Квитанция");
	Если СтруктураПечати.АдресФайла = Неопределено Тогда
		
		Сообщить(Нстр("ru='Произошла ошибка при выгрузке документа '")+Объект);
		Возврат;
		
	КонецЕсли;
	
	ПолучитьФайл(СтруктураПечати.АдресФайла, Нстр("ru = 'Квитанция.pdf'"), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьПлатежноеПоручениеЗавершение() Экспорт
	
	ПлатежноеПоручение = РегламентированнаяОтчетностьУСН.СоздатьБезналичноеСписаниеПоВзаиморасчетамСБюджетом(ДокументВзаиморасчетовСБюджетом, БанковскийСчетПоУмолчанию,, ВсегоКУплате);
	СтруктураПечати = ВыгрузитьДокументВФайл(ПлатежноеПоручение, "ПлатежноеПоручение");
	Если СтруктураПечати.АдресФайла = Неопределено Тогда
		
		Сообщить(Нстр("ru='Произошла ошибка при выгрузке документа '")+Объект);
		Возврат;
		
	КонецЕсли;
	
	ПолучитьФайл(СтруктураПечати.АдресФайла, СтруктураПечати.НаименованиеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаличиеГосОргана(ИмяПроцедурыПоЗавершениюСозданияГосОргана)
	КодГосОргана = "";
	Если ГосОрганСуществует(Объект.Организация, КодГосОргана) Тогда
		Возврат Истина;
	Иначе
		ДопПараметры = Новый Структура("ИмяПроцедурыПоЗавершениюСозданияГосОргана, КодГосОргана", ИмяПроцедурыПоЗавершениюСозданияГосОргана, КодГосОргана);
		ТекстВопроса = НСтр("ru='В справочнике «Контрагенты» не задан налоговый орган для уплаты налога.
			|Создать его автоматически?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросОСозданииГосОргана",
			ЭтаФорма, ДопПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Создать автоматически'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Создать вручную'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,,КодВозвратаДиалога.Да, НСтр("ru='Отсутствует налоговый орган'"));
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриОтветеНаВопросОСозданииГосОргана(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеСведенийОНалоговойИнспекции(ДопПараметры);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган"));
		ПараметрыФормы.Вставить("КодГосударственногоОргана", ДопПараметры.КодГосОргана);
		ПараметрыФормы.Вставить("ИмяПроцедурыПоЗавершениюСозданияГосОргана",ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана);
		ПараметрыФормы.Вставить("ЗапретРедактированияКода", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовФНС", ЭтотОбъект, ПараметрыФормы);
		
		ОткрытьФорму("Справочник.Контрагенты.Форма.РеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОНалоговойИнспекции(ДопПараметры)
	
	ОписаниеОшибки = "";
	ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки, ДопПараметры.КодГосОргана);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			
			ТекстВопроса = НСтр("ru='Для автоматического создания налогового органа
				|в справочнике «Контрагенты» необходимо подключиться к Интернет-поддержке
				|пользователей. Подключиться сейчас?'");
				
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения,ИмяПроцедурыПоЗавершениюСозданияГосОргана", "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду, КодГосОргана", ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана, ДопПараметры.КодГосОргана);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	Иначе
		Если ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьКвитанциюЗавершение" Тогда
			РаспечататьКвитанциюЗавершение();
		ИначеЕсли ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьПлатежноеПоручениеЗавершение" Тогда
			РаспечататьПлатежноеПоручениеЗавершение();
		ИначеЕсли ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "ПолучитьФайлКлиентБанка" Тогда
			ПолучитьФайлКлиентБанка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФайлКлиентБанка() Экспорт
	
	БанкСчетСтруктура = Новый Структура("БанковскийСчет", БанковскийСчетПоУмолчанию);
	
	ПлатежноеПоручение = РегламентированнаяОтчетностьУСН.СоздатьБезналичноеСписаниеПоВзаиморасчетамСБюджетом(ДокументВзаиморасчетовСБюджетом, БанковскийСчетПоУмолчанию,, ВсегоКУплате);
	
	СписокПлатежек = Новый СписокЗначений;
	СписокПлатежек.Добавить(ПлатежноеПоручение);
	
	БанкСчетСтруктура.Вставить("СписокПлатежек", СписокПлатежек);
	
	ОткрытьФорму(
		"Обработка.КлиентБанкУНФ.Форма.СохранениеПлатежек",
		БанкСчетСтруктура,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("ВызовПослеПодключения") Тогда
			
			Если ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду" Тогда
				
				ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(,ДополнительныеПараметры.КодГосОргана);
				
				Если ДополнительныеПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьКвитанциюЗавершение" Тогда
					РаспечататьКвитанциюЗавершение();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки = "", КодНалоговогоОрганаПолучателя)
	
	РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(КодНалоговогоОрганаПолучателя);
	
	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыНалоговогоОргана.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыНалоговогоОргана.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовФНС(Ответ, ДопПараметры) Экспорт
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		Если ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьКвитанциюЗавершение" Тогда
			РаспечататьКвитанциюЗавершение();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ГосОрганСуществует(Организация, КодГосОргана)
	КодГосОргана = Организация.КодНалоговогоОрганаПолучателя;
	ГосОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, КодГосОргана);
	
	Возврат ЗначениеЗаполнено(ГосОрган.Ссылка);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьДокументВФайл(Объект, ВидФайла)
	
	ТабДок = Новый ТабличныйДокумент;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект);
	
	Если ВидФайла = "Квитанция" Тогда
		Для Каждого Объект Из МассивОбъектов Цикл
			ТабДокОбъекта = Документы.НачислениеНалогов.СформироватьКвитанцию(Объект.НачислениеНалогов, Объект.Сумма, Объект.СобытиеКалендаря);
			ТабДокОбъекта.Область().СоздатьФорматСтрок();
			Если ТабДок = Неопределено Тогда
				ТабДок = ТабДокОбъекта;
			Иначе
				ТабДок.Вывести(ТабДокОбъекта);
			КонецЕсли;
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;
	ИначеЕсли ВидФайла = "ПлатежноеПоручение" Тогда
		ОбъектыПечати = Новый СписокЗначений;
		ТабДок = Документы.ПлатежноеПоручение.ПечатнаяФорма(МассивОбъектов, ОбъектыПечати);
	КонецЕсли;
	
	СтруктураПечати = Новый Структура ("АдресФайла, НаименованиеФайла");
	
	Если ТабДок = Неопределено Тогда
		Возврат СтруктураПечати;
	КонецЕсли;
	
	Каталог = КаталогВременныхФайлов()+РаботаВМоделиСервиса.ЗначениеРазделителяСеанса()+"\";
	
	ПроверкаКаталога = Новый Файл(Каталог);
	Если НЕ ПроверкаКаталога.Существует() Тогда
		СоздатьКаталог(Каталог);
	КонецЕсли;
	ПризнакОшибки = Ложь;
	РасширениеФайла = ".pdf" ;
	НаименованиеФайла = Строка(Объект);
	НаименованиеФайла = ?(СтрДлина(НаименованиеФайла)+СтрДлина(РасширениеФайла)>64, Лев(НаименованиеФайла,64 - СтрДлина(РасширениеФайла)),НаименованиеФайла);
	НаименованиеФайла = СтрЗаменить(НаименованиеФайла, ":","_");
	
	ПолноеИмяФайла = Каталог + НаименованиеФайла + РасширениеФайла;
	ПолноеИмяФайла = СтрЗаменить(ПолноеИмяФайла, """","");
	
	Попытка
		ТабДок.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		
	Исключение
		ПризнакОшибки = Истина;
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка сохранения файла на сервере'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru= 'При сохранении файла на сервере в области данных %1 произошла ошибка:
						|%2'"),
				РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(),
				ОписаниеОшибки()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		Возврат СтруктураПечати;
		
	КонецПопытки;
	ДанныеФайла = Новый ДвоичныеДанные(ПолноеИмяФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
	УдалитьФайлы(ПолноеИмяФайла);
	СтруктураПечати.АдресФайла = АдресФайла;
	СтруктураПечати.НаименованиеФайла = НаименованиеФайла+РасширениеФайла;
	
	Возврат СтруктураПечати;
	
КонецФункции

#Область Уведомления
// -----------------------------------------------------------------------------
// Уведомления

&НаКлиенте
Процедура ВыполнитьДействиеСформироватьУведомление(Команда)
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",                 Объект.Организация);
	ПараметрыУведомления.Вставить("ЗаписьКалендаря",                     ЗаписьКалендаря);
	ПараметрыУведомления.Вставить("ПериодСобытия",               ПериодСобытия);
	ПараметрыУведомления.Вставить("АдресХранилищаТаблицыНалоги", ОписаниеТаблицыНалоги());
	ПараметрыУведомления.Вставить("КонтекстныйВызов",            Истина);
	
	ОткрытьФорму("Документ.УведомлениеОбИсчисленныхСуммахНалогов.Форма.ФормаДокумента",
		ПараметрыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры  
	
&НаКлиенте
Процедура ВыполнитьДействиеСформироватьОперациюПоЕНС(Команда)
	
	ВыполненоВТихомРежиме = Ложь;
	СформироватьОперациюПоЕНСВТихомРежиме(ВыполненоВТихомРежиме);
	Если ВыполненоВТихомРежиме Тогда
		// Только перерисуем форму
		ОбработатьРедактированиеУведомления();
		Возврат;
	КонецЕсли;
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация",                 Объект.Организация);
	ПараметрыУведомления.Вставить("ЗаписьКалендаря",                     ЗаписьКалендаря);
	ПараметрыУведомления.Вставить("ПериодСобытия",               ПериодСобытия);
	ПараметрыУведомления.Вставить("АдресХранилищаТаблицыНалоги", ОписаниеТаблицыНалоги());
	ПараметрыУведомления.Вставить("КонтекстныйВызов",            Истина);
	
	ОткрытьФорму("Документ.ОперацияПоЕдиномуНалоговомуСчету.Форма.ФормаДокумента",
		ПараметрыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОперациюПоЕНСВТихомРежиме(ВыполненоВТихомРежиме)
	
	ЕдиныйНалоговыйСчет.СформироватьОперациюПоЕНСВТихомРежиме(Объект.Организация,
		ОписаниеТаблицыНалоги(),
		ЗаписьКалендаря,
		ПериодСобытия,
		ВыполненоВТихомРежиме);
	
КонецПроцедуры
	
&НаСервере
Функция ОписаниеТаблицыНалоги()
	
	ТаблицаНалоги = ТаблицаНалогиДляУведомления();
		
	ТаблицыНалогов = Документы.УведомлениеОбИсчисленныхСуммахНалогов.ОписаниеТаблицНалогов();
	ТаблицыНалогов.ТаблицаНалоги = ТаблицаНалоги;
	
	АдресХранилищаТаблицыНалоги = ПоместитьВоВременноеХранилище(ТаблицыНалогов, УникальныйИдентификатор);
	
	Возврат АдресХранилищаТаблицыНалоги;
	
КонецФункции 

&НаСервере
Функция ТаблицаНалогиДляУведомления() Экспорт
	
	ТаблицаНалоги = Документы.УведомлениеОбИсчисленныхСуммахНалогов.ОписаниеТаблицыНалогов();
	
	ОбъектНалогообложения = РегламентированнаяОтчетностьУСН.ОбъектНалогообложенияНаДату(Объект.Организация,Объект.СобытиеКалендаря);
	Если ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.ДоходыМинусРасходы Тогда
		ВидВзаиморасчетов = Справочники.ВидыНалогов.ЕдиныйНалогПриУСНРасходы;
	Иначе
		ВидВзаиморасчетов = Справочники.ВидыНалогов.ЕдиныйНалогПриУСН;
	КонецЕсли;
	
	Если ВсегоКУплате > 0 Тогда 
		
		НоваяСтрока = ТаблицаНалоги.Добавить();
		НоваяСтрока.РегистрацияВНалоговомОргане = Объект.Организация.РегистрацияВНалоговомОргане;
		НоваяСтрока.КодПоОКТМО                  = НоваяСтрока.РегистрацияВНалоговомОргане.КодПоОКТМО;
		НоваяСтрока.Налог                       = ВидВзаиморасчетов;
		НоваяСтрока.КодБК                       = Справочники.ВидыНалогов.КБК(НоваяСтрока.Налог,, Объект.СобытиеКалендаря.ДатаОкончанияСобытия);
		НоваяСтрока.СчетУчета                   = НоваяСтрока.Налог.СчетУчета;
		НоваяСтрока.Сумма = ВсегоКУплате;
		НоваяСтрока.СрокУплаты                  = РегламентированнаяОтчетностьУСН.ОпределитьСрокПлатежаПоЕНП(Объект.СобытиеКалендаря.ДатаОкончанияСобытия);
		
	КонецЕсли;
	
	Возврат ТаблицаНалоги;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРедактированиеУведомления(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбновитьСведенияОбУведомлениях();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОбУведомлениях()
	
	Если Не ПлательщикЕНП Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьУведомления();
	
	УправлениеФормойБлокУведомление();
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьУведомления()
	
	ТаблицаУведомления = ЕдиныйНалоговыйСчет.ДанныеДляУведомлений(ЗаписьКалендаря, Объект.Организация, ПериодСобытия);
	УведомленияОбИсчисленныхНалогах.Загрузить(ТаблицаУведомления);
	
	УведомлениеОбИсчисленныхНалогахПодготовлено = УведомленияОбИсчисленныхНалогах.Количество() > 0;
	
КонецПроцедуры 

&НаКлиенте
Процедура УведомлениеНажатие(Команда)
	
	// Команды генерируются в КопироватьЭлементСПодчиненными() и содержат числовой идентификатор,
	// совпадающий с идентификаторами строк в списке Платежи
	Идентификатор = ЕдиныйНалоговыйСчетКлиент.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьУведомление(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУведомление(Идентификатор)
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеУведомления", ЭтотОбъект);
	
	ПараметрыФормыУведомления = ПараметрыФормыУведомления(Идентификатор);
	
	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		ИмяОбъекта = "УведомлениеОбИсчисленныхСуммахНалогов";
	Иначе
		ИмяОбъекта = "ОперацияПоЕдиномуНалоговомуСчету";
	КонецЕсли;
	
	ОткрытьФорму("Документ." + ИмяОбъекта + ".ФормаОбъекта",
		ПараметрыФормыУведомления,
		ЭтотОбъект,
		,
		,
		,
		ОткрытьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУведомленияПоСтроке(СтрокаУведомления)
	
	Если ЗначениеЗаполнено(СтрокаУведомления.Уведомление) Тогда
		Возврат Новый Структура("Ключ", СтрокаУведомления.Уведомление);
	Иначе
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПустогоУведомления()
	
	ЗначенияЗаполнения = Новый Структура("Организация", Объект.Организация);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, ЗаписьКалендаря",
	ЗначенияЗаполнения, Объект.ПериодРегистрации, ЗаписьКалендаря);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыУведомления(Идентификатор)
	
	Если Идентификатор = Неопределено Тогда 
		// Получим параметры формы для пустого документа
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
	СтрокаУведомления = УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаУведомления = Неопределено Тогда
		Возврат ПараметрыФормыПустогоУведомления();
	КонецЕсли;
	
	Возврат ПараметрыФормыУведомленияПоСтроке(СтрокаУведомления);
	
КонецФункции

&НаСервере
Процедура УправлениеФормойБлокУведомление()
	
	ЕдиныйНалоговыйСчет.УправлениеФормойБлокУведомление(ЭтотОбъект,
		ВсегоКУплате > 0, , 2);
	
КонецПроцедуры

#КонецОбласти
