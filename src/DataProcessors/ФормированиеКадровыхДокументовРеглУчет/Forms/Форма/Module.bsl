
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокДокументовКадровогоУчетаУпр.Параметры.УстановитьЗначениеПараметра("ВыбранныеСтроки", Новый СписокЗначений);
	
	СписокДокументов = Новый СписокЗначений;
	Если Параметры.КадровыеДокументыУпрУчет <> Неопределено Тогда
		СписокДокументов.ЗагрузитьЗначения(Параметры.КадровыеДокументыУпрУчет);
	КонецЕсли;
	ДобавитьДокументыВСписок(СписокДокументов);

	УстановитьУсловноеОформление();
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	
	Элементы.ОтборТипДокумента.СписокВыбора.Добавить(Тип("ДокументСсылка.ПриемНаРаботуУНФ"), НСтр("ru = 'Прием на работу'"));
	Элементы.ОтборТипДокумента.СписокВыбора.Добавить(Тип("ДокументСсылка.КадровоеПеремещениеУНФ"), НСтр("ru = 'Кадровый перевод'"));
	Элементы.ОтборТипДокумента.СписокВыбора.Добавить(Тип("ДокументСсылка.УвольнениеУНФ"), НСтр("ru = 'Увольнение'"));
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОтборыСписокДокументовКадровогоУчетаУпр();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыСотрудников

&НаКлиенте
Процедура ДокументыСотрудниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока = ДокументыСотрудников.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ДокументыСотрудниковКадровыйДокументРеглУчет
		ИЛИ Поле = Элементы.ДокументыСотрудниковСостояниеДокументаРеглУчет
		ИЛИ Поле = Элементы.ДокументыСотрудниковПредставлениеРеглУчет Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументРеглУчет) Тогда
			ПоказатьЗначение( , ТекущаяСтрока.ДокументРеглУчет);
		КонецЕсли;
	ИначеЕсли Поле = Элементы.ДокументыСотрудниковКадровыйДокументУпрУчет
		ИЛИ Поле = Элементы.ДокументыСотрудниковСостояниеДокументаУпрУчет
		ИЛИ Поле = Элементы.ДокументыСотрудниковПредставлениеУпрУчет Тогда
		
		ПоказатьЗначение( , ТекущаяСтрока.ДокументУпрУчет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыСотрудниковПослеУдаления(Элемент)
	ВыбранныеСтрокиИд.Очистить();
	Для Каждого Строка Из ДокументыСотрудников Цикл
		ВыбранныеСтрокиИд.Добавить(Строка.ИдСтроки);
	КонецЦикла;
	СписокДокументовКадровогоУчетаУпр.Параметры.УстановитьЗначениеПараметра("ВыбранныеСтроки", ВыбранныеСтрокиИд);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДокументовКадровогоУчетаУпр

&НаКлиенте
Процедура СписокДокументовКадровогоУчетаУпрВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ВыбранныеСотрудники = Новый Массив;
	ВыбранныеСотрудники.Добавить(Значение.Сотрудник);
	ДобавитьДокументыВСписок(Значение.ДокументУпрУчет, ВыбранныеСотрудники);
	Элементы.СписокДокументовКадровогоУчетаУпр.Обновить();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОтборов

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	СтруктураИменЭлементов = Новый Структура;
	СтруктураИменЭлементов.Вставить("ОтборПериод", "ОтборПериод");
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтаФорма, "СписокДокументовКадровогоУчетаУпр", "ДокументУпрУчет.Дата", , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	УстановитьОтборыСписокДокументовКадровогоУчетаУпр();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	УстановитьОтборыСписокДокументовКадровогоУчетаУпр();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСотрудникПриИзменении(Элемент)
	УстановитьОтборыСписокДокументовКадровогоУчетаУпр();
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипДокументаПриИзменении(Элемент)
	УстановитьОтборыСписокДокументовКадровогоУчетаУпр();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоказыватьСДокументамиРеглУчетаПриИзменении(Элемент)
	УстановитьОтборыСписокДокументовКадровогоУчетаУпр();
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСписокДокументовКадровогоУчетаУпр()
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДокументовКадровогоУчетаУпр,
		"Организация", ОтборОрганизация, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(ОтборОрганизация));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДокументовКадровогоУчетаУпр,
		"Подразделение", ОтборПодразделение, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(ОтборПодразделение));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДокументовКадровогоУчетаУпр,
		"Сотрудник", ОтборСотрудник, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(ОтборСотрудник));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДокументовКадровогоУчетаУпр,
		"ДокументРеглУчет", , ВидСравненияКомпоновкиДанных.НеЗаполнено, , НЕ ОтборПоказыватьСДокументамиРеглУчета);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДокументовКадровогоУчетаУпр,
		"ТипДокумента", ОтборТипДокумента, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(ОтборТипДокумента));
	
	РаботаСОтборамиКлиентСервер.УстановитьОтборПоПериоду(СписокДокументовКадровогоУчетаУпр.Отбор, ОтборПериод.ДатаНачала, ОтборПериод.ДатаОкончания, "ДокументУпрУчет.Дата");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	Если ДокументыСотрудников.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Выберите документы упр. учета'"));
		Возврат;
	КонецЕсли;
	
	ТипыДокументовБезДанных = Новый СписокЗначений;
	
	ПараметрыВыбораПользователем = Новый Структура;
	ПараметрыВыбораПользователем.Вставить("СписокПодразделений", Новый СписокЗначений);
	ПараметрыВыбораПользователем.Вставить("СписокДолжностей", Новый СписокЗначений);
	ПараметрыВыбораПользователем.Вставить("СписокНачислений", Новый СписокЗначений);
	ПараметрыВыбораПользователем.Вставить("ТипыДокументов", Новый СписокЗначений);
	
	Для Каждого Строка Из ДокументыСотрудников Цикл
		Если ЗначениеЗаполнено(Строка.ДокументРеглУчет) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ДанныеДокумента.ИмяДокументаРеглУчет = "ПриемНаРаботу"
			ИЛИ Строка.ДанныеДокумента.ИмяДокументаРеглУчет = "КадровыйПеревод" Тогда
			
			Если НЕ ЗначениеЗаполнено(Строка.ДанныеДокумента.Подразделение) Тогда
				ДобавитьУникальныйЭлементВСписок(ПараметрыВыбораПользователем.ТипыДокументов, Строка.ДанныеДокумента.ИмяДокументаРеглУчет);
				ДобавитьУникальныйЭлементВСписок(ПараметрыВыбораПользователем.СписокПодразделений, Строка.ДанныеДокумента.ПодразделениеУпр);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Строка.ДанныеДокумента.ТрудоваяФункция) Тогда
				ДобавитьУникальныйЭлементВСписок(ПараметрыВыбораПользователем.ТипыДокументов, Строка.ДанныеДокумента.ИмяДокументаРеглУчет);
				ДобавитьУникальныйЭлементВСписок(ПараметрыВыбораПользователем.СписокДолжностей, Строка.ДанныеДокумента.Должность);
			КонецЕсли;
			
			Для Каждого СтрНачисление Из Строка.ДанныеДокумента.Начисления Цикл
				Если НЕ ЗначениеЗаполнено(СтрНачисление.Начисление) Тогда
				ДобавитьУникальныйЭлементВСписок(ПараметрыВыбораПользователем.ТипыДокументов, Строка.ДанныеДокумента.ИмяДокументаРеглУчет);
					ДобавитьУникальныйЭлементВСписок(ПараметрыВыбораПользователем.СписокНачислений, СтрНачисление.НачислениеУпр);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыВыбораПользователем.ТипыДокументов.Количество() > 0 Тогда
		ОповещениеЗаполненыДанные = Новый ОписаниеОповещения("ОповещениеВыбраныРеквизитыДокументов", ЭтаФорма);
		ОткрытьФорму("Обработка.ФормированиеКадровыхДокументовРеглУчет.Форма.ЗаполнениеРеквизитов", ПараметрыВыбораПользователем,
			ЭтаФорма, , , , ОповещениеЗаполненыДанные, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		СоздатьДокументыРеглУчета();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	ТекущаяСтрока = Элементы.СписокДокументовКадровогоУчетаУпр.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено И ЗначениеЗаполнено(ТекущаяСтрока.ДокументУпрУчет) Тогда
		ПоказатьЗначение( , ТекущаяСтрока.ДокументУпрУчет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписок(Команда)
	ДокументыСотрудников.Очистить();
	ВыбранныеСтрокиИд.Очистить();
	СписокДокументовКадровогоУчетаУпр.Параметры.УстановитьЗначениеПараметра("ВыбранныеСтроки", ВыбранныеСтрокиИд);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	
	ОформлениеУжеСоздан = СписокДокументовКадровогоУчетаУпр.УсловноеОформление.Элементы.Добавить();
	ОформлениеУжеСоздан.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПодобранногоЗначенияЦвет);
	ГруппаОтборВыбраны = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ОформлениеУжеСоздан.Отбор,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборВыбраны, "ДокументРеглУчет", Неопределено,
		ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборВыбраны, "СтрокаВыбрана", Истина,
		ВидСравненияКомпоновкиДанных.Равно);
	
	ОформлениеСтатус = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемоеПоле(ОформлениеСтатус, Элементы.ДокументыСотрудниковСостояниеДокументаРеглУчет.Имя);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ОформлениеСтатус.Отбор, "ДокументыСотрудников.ДокументРеглУчет",
		Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ОформлениеСтатус, "Отображать", Ложь);
	
	ОформлениеДокументРеглУчет = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемоеПоле(ОформлениеДокументРеглУчет, Элементы.ДокументыСотрудниковКадровыйДокументРеглУчет.Имя);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ОформлениеДокументРеглУчет.Отбор, "ДокументыСотрудников.ДокументРеглУчет",
		Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ОформлениеДокументРеглУчет, "Текст", НСтр("ru = '<Документ отсутствует, будет создан>'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыбраныРеквизитыДокументов(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьДокументыРеглУчета(Результат);
КонецПроцедуры

&НаСервере
Процедура ДобавитьДокументыВСписок(СписокДокументов, СписокСотрудников = Неопределено)
	ДанныеЗаполнения = Обработки.ФормированиеКадровыхДокументовРеглУчет.ДанныеДляЗаполненияПоУпрУчету(СписокДокументов);
	
	Если ДанныеЗаполнения.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Неопределено;
	ПоляОтбора = "ДокументУпрУчет, Сотрудник";
	Для Каждого ДанныеСотрудника Из ДанныеЗаполнения.Данные Цикл
		ОтборСтрок = Новый Структура(ПоляОтбора);
		ЗаполнитьЗначенияСвойств(ОтборСтрок, ДанныеСотрудника);
		СтрокиДокумента = ДокументыСотрудников.НайтиСтроки(ОтборСтрок);
		Если СтрокиДокумента.Количество() > 0 Тогда
			ТекущаяСтрока = СтрокиДокумента[0].ПолучитьИдентификатор();
			Продолжить;
		КонецЕсли;
		
		Если СписокСотрудников <> Неопределено И СписокСотрудников.Найти(ДанныеСотрудника.Сотрудник) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДокументыСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСотрудника);
		НоваяСтрока.ДанныеДокумента = ДанныеСотрудника;
		ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		ВыбранныеСтрокиИд.Добавить(НоваяСтрока.ИдСтроки);
	КонецЦикла;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Элементы.ДокументыСотрудников.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	СписокДокументовКадровогоУчетаУпр.Параметры.УстановитьЗначениеПараметра("ВыбранныеСтроки", ВыбранныеСтрокиИд);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыРеглУчета(ВыбранныеПользователемДанные = Неопределено)
	Результаты = СоздатьДокументыРеглУчетаСервер(ВыбранныеПользователемДанные);
	Элементы.СписокДокументовКадровогоУчетаУпр.Обновить();
	
	Если Результаты.ВсегоСоздано = 0 Тогда
		ОповещениеЗаголовок = НСтр("ru = 'Возникли ошибки, документы не созданы'");
		ОповещениеКартинка = БиблиотекаКартинок.ОформлениеКрест;
		ОповещениеТекст = "";
	ИначеЕсли Результаты.ВсегоСоздано = Результаты.КоличествоПроведено Тогда
		ОповещениеЗаголовок = НСтр("ru = 'Документы созданы и проведены'");
		ОповещениеКартинка = БиблиотекаКартинок.ОформлениеФлажок;
		ОповещениеТекст = "";
	ИначеЕсли Результаты.КоличествоОшибок = 0 Тогда
		ОповещениеЗаголовок = НСтр("ru = 'Документы созданы'");
		ОповещениеКартинка = БиблиотекаКартинок.ОформлениеВосклицательныйЗнак;
		ШаблонТекста = НСтр("ru = 'Всего создано: %1
									|- из них проведено: %2'");
		
		ОповещениеТекст = СтрШаблон(ШаблонТекста, Результаты.ВсегоСоздано, Результаты.КоличествоПроведено);
	Иначе
		ОповещениеЗаголовок = НСтр("ru = 'Документы созданы частично'");
		ОповещениеКартинка = БиблиотекаКартинок.ОформлениеВосклицательныйЗнак;
			
		ШаблонТекста = НСтр("ru = 'Всего создано: %1
									|- из них проведено: %2
									|Пропущено: %3'");
		
		ОповещениеТекст = СтрШаблон(ШаблонТекста, Результаты.ВсегоСоздано, Результаты.КоличествоПроведено, Результаты.КоличествоОшибок);
	КонецЕсли;
	ПоказатьОповещениеПользователя(ОповещениеЗаголовок, , ОповещениеТекст, ОповещениеКартинка);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеРезультатовРаботы()
	Описание = Новый Структура;
	Описание.Вставить("ВсегоСоздано", 0);
	Описание.Вставить("КоличествоОшибок", 0);
	Описание.Вставить("КоличествоПроведено", 0);
	
	Возврат Описание;
КонецФункции

&НаСервере
Функция СоздатьДокументыРеглУчетаСервер(ЗаполненоПользователем = Неопределено)
	РезультатыРаботы = ОписаниеРезультатовРаботы();
	
	ШаблонСозданДокумент = НСтр("ru = 'Для документа %1 кадровый документ рег. учета уже существует'");
	Для Каждого Строка Из ДокументыСотрудников Цикл
		Если ЗначениеЗаполнено(Строка.ДокументРеглУчет) Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСозданДокумент, Строка.ДокументУпрУчет), Строка.ДокументРеглУчет);
			Продолжить;
		КонецЕсли;
		
		НовыйДокумент = Документы[Строка.ДанныеДокумента.ИмяДокументаРеглУчет].СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовыйДокумент, Строка.ДанныеДокумента);
		
		// Нужный вид занятости может измениться, если для физ. лица в этой же обработке создан другой кадровый документ
		ЗаполнятьМестоРаботы = Ложь;
		Если ТипЗнч(НовыйДокумент) = Тип("ДокументОбъект.ПриемНаРаботу") Тогда
			НовыйДокумент.ВидЗанятости = Обработки.ФормированиеКадровыхДокументовРеглУчет.ВидЗанятостиНовогоСотрудника(
				НовыйДокумент.Организация, НовыйДокумент.Сотрудник, НовыйДокумент.ФизическоеЛицо,
				НовыйДокумент.ДатаПриема, Строка.ДокументРеглУчет);
			ЗаполнятьМестоРаботы = Истина;
		ИначеЕсли ТипЗнч(НовыйДокумент) = Тип("ДокументОбъект.КадровыйПеревод") Тогда
			НовыйДокумент.ВидЗанятости = Обработки.ФормированиеКадровыхДокументовРеглУчет.ВидЗанятостиРаботающегоСотрудника(
				НовыйДокумент.Сотрудник, НовыйДокумент.ДатаНачала, Строка.ДокументРеглУчет);
			ЗаполнятьМестоРаботы = Истина;
		КонецЕсли;
		
		Если ЗаполнятьМестоРаботы И ЗаполненоПользователем <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.Подразделение) Тогда
				НовыйДокумент.Подразделение = ЗаполненоПользователем.Подразделения.Получить(Строка.ДанныеДокумента.ПодразделениеУпр);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.ТрудоваяФункция) Тогда
				НовыйДокумент.ТрудоваяФункция = ЗаполненоПользователем.ТрудовыеФункции.Получить(Строка.ДанныеДокумента.Должность);
			КонецЕсли;
		КонецЕсли;
			
		// Начисления и удержания
		Для Каждого Начисление Из Строка.ДанныеДокумента.Начисления Цикл
			НоваяСтрокаНачислений = НовыйДокумент.Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНачислений, Начисление);
			Если НЕ ЗначениеЗаполнено(НоваяСтрокаНачислений.Начисление) И ЗаполненоПользователем <> Неопределено Тогда
				НоваяСтрокаНачислений.Начисление = ЗаполненоПользователем.Начисления.Получить(Начисление.НачислениеУпр);
			КонецЕсли;
		КонецЦикла;
		
		СтатусДокумента = 0;
		ТекстОшибки = "";
		Если НовыйДокумент.ПроверитьЗаполнение() Тогда
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				СтатусДокумента = 1;
			Исключение
				ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
			
		Если СтатусДокумента = 0 Тогда
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
			Исключение
				ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовыйДокумент.Ссылка) Тогда
			Строка.ДокументРеглУчет = НовыйДокумент.Ссылка;
			РезультатыРаботы.ВсегоСоздано = РезультатыРаботы.ВсегоСоздано + 1;
			Если НовыйДокумент.Проведен Тогда
				РезультатыРаботы.КоличествоПроведено = РезультатыРаботы.КоличествоПроведено + 1;
			КонецЕсли;
		Иначе
			РезультатыРаботы.КоличествоОшибок = РезультатыРаботы.КоличествоОшибок + 1;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание кадровых документов'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);			
		КонецЕсли;
		
		Строка.СостояниеДокументаРеглУчет = СтатусДокумента;
	КонецЦикла;
	
	Возврат РезультатыРаботы;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьУникальныйЭлементВСписок(Список, НовоеЗначение)
	Если Список.НайтиПоЗначению(НовоеЗначение) = Неопределено Тогда
		Список.Добавить(НовоеЗначение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

