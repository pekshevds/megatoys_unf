
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоУНФ = ОбщегоНазначенияУНФ.ЭтоУНФ();
	РежимРаботы = Новый ФиксированнаяСтруктура(УправлениеНебольшойФирмойПовтИсп.РежимРаботыПрограммы());
	Элементы.ГруппаРасписаниеАвтоматическойЗагрузкиПочты.Видимость = Не РежимРаботы.МодельСервиса;
	Элементы.ГруппаАвтоматическаяЗагрузкаПочты.Видимость = ЭтоУНФ;
	Элементы.ГруппаМассовыеРассылки.Видимость = ЭтоУНФ;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	АвтоматическиЗагружатьПочту = ЭлектроннаяПочтаУНФ.ЗаданиеЗагрузкиЭлектроннойПочтыИспользуется();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ЭлектроннаяПочтаУНФКлиентСервер.ИмяСобытияУчетнаяЗаписьОбновлена()
		Или ИмяСобытия = "Запись_УчетнаяЗаписьЭлектроннойПочты" Тогда
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьМассовыеРассылкиИнтеграцияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыборСервисаРассылокИНастройкаИнтеграцииНажатие(Элемент)
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкаИнтеграцииМассовойРассылки");
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиЗагружатьПочтуПриИзменении(Элемент)
	АвтоматическиЗагружатьПочтуПриИзмененииСервер();
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеЗагрузкиПочты(Команда)
	ОткрытьДиалогНастройкиРасписания();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтандартноеСохранениеЗначенийКонстант

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	ИмяКонстанты = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если ИмяКонстанты <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, ИмяКонстанты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

// Открывает диалог настройки расписания
//
&НаКлиенте
Процедура ОткрытьДиалогНастройкиРасписания() Экспорт
	
	РасписаниеРегламентногоЗадания = РасписаниеЗаданияЗагрузкиЭлектроннойПочты();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеРасписания", ЭтотОбъект);
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРасписания(Расписание, ДополнительныеПараметры) Экспорт
	
	УстановитьРасписаниеРегламентногоЗадания(Расписание);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	ИмяКонстанты = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	Прочитать();
	УстановитьДоступность(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат ИмяКонстанты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	
	ЧастиИмени = СтрРазделить(РеквизитПутьКДанным, ".");
	Если ЧастиИмени.Количество() <> 2 Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяКонстанты = ЧастиИмени[1];
	КонстантаМенеджер = Константы[ИмяКонстанты];
	КонстантаЗначение = НаборКонстант[ИмяКонстанты];
	
	Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
		
		ТекстОшибки = ПриПроверкеВозможностиУстановкиЗначенияКонстанты(РеквизитПутьКДанным, КонстантаЗначение);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , РеквизитПутьКДанным);
		Иначе
			КонстантаМенеджер.Установить(КонстантаЗначение);
			ПриУстановкеЗначенияКонстанты(РеквизитПутьКДанным, КонстантаЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяКонстанты;
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ПриПроверкеВозможностиУстановкиЗначенияКонстанты(РеквизитПутьКДанным, НовоеЗначение)
	
	ТекстОшибки = "";
	Возврат ТекстОшибки;
	
КонецФункции

&НаСервере
Процедура ПриУстановкеЗначенияКонстанты(РеквизитПутьКДанным, НовоеЗначение)
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьМассовыеРассылкиИнтеграция"
		Или РеквизитПутьКДанным = "" Тогда
		Элементы.ГруппаНастройкиИнтеграцииССервисомРассылок.Доступность =
			НаборКонстант.ИспользоватьМассовыеРассылкиИнтеграция;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "АвтоматическиЗагружатьПочту"
		Или РеквизитПутьКДанным = "" Тогда
		Элементы.РасписаниеЗагрузкиПочты.Доступность = АвтоматическиЗагружатьПочту;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АвтоматическиЗагружатьПочтуПриИзмененииСервер()
	
	ЭлектроннаяПочтаУНФ.ИзменитьЗаданиеЗагрузкиЭлектроннойПочты(АвтоматическиЗагружатьПочту);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасписаниеРегламентногоЗадания(Знач Расписание)
	
	ЭлектроннаяПочтаУНФ.ИзменитьЗаданиеЗагрузкиЭлектроннойПочты(АвтоматическиЗагружатьПочту, Расписание);
	
КонецПроцедуры

&НаСервере
Функция РасписаниеЗаданияЗагрузкиЭлектроннойПочты()
	
	Возврат ЭлектроннаяПочтаУНФ.РасписаниеЗагрузкиЭлектроннойПочты();
	
КонецФункции

#КонецОбласти
