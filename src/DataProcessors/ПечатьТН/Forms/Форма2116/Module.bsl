
#Область ОбработчикиСобытийФормы

&НаСервере
// Функция возвращает табличный документ для печати ТН
Функция ПечатнаяФорма(МассивОбъектов, ПараметрыПечати, ОбъектыПечати) Экспорт

	ТабличныйДокумент			= Новый ТабличныйДокумент;
	Макет 						= РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_MXL_ТранспортнаяНакладная");
	ВывестиГоризонтРазделитель	= Ложь;
	
	Для каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если ВывестиГоризонтРазделитель Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ВывестиГоризонтРазделитель	= Истина;
		КонецЕсли;
		
		НомерСтрокиНачало 						= ТабличныйДокумент.ВысотаТаблицы + 1;
		ТабличныйДокумент.ИмяПараметровПечати 	= "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьТН_ТН";
		
		// :::Лицевая
		ОбластьМакета 				= Макет.ПолучитьОбласть("ЧастьПервая");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ОбластьМакета 				= Макет.ПолучитьОбласть("ЧастьВторая");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// :::Оборотная
		ОбластьМакетаОборотная		= Макет.ПолучитьОбласть("ЧастьТретья");
		ОбластьМакетаОборотная.Параметры.Заполнить(ПараметрыПечати);
		ТабличныйДокумент.Вывести(ОбластьМакетаОборотная);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, ТабличныйДокумент.ВысотаТаблицы + 1, ОбъектыПечати, ТекущийДокумент);
		
		// :::Параметры макета
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСлева  = 0;
		ТабличныйДокумент.ПолеСнизу  = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

&НаСервере
// Процедура обработчик события ПриСозданииНаСервере
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Документ") Тогда
		
		Объект.Документ = Параметры.Документ;
		
	КонецЕсли;
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ЮрЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	КэшЗначений.Вставить("ФизЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);

	ВосстановитьНастройки(Ложь);
	
КонецПроцедуры //ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГрузоотправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбора = Новый Структура();
	ПараметрыВыбора.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыВыбора, Элемент); 
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбранногоГрузоотправителя(ВыбранноеЗначение);
		
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыВыбора = Новый Структура();
	ПараметрыВыбора.Вставить("РежимВыбора", Истина);
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыВыбора, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбранногоГрузополучателя(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыВыбора = Новый Структура();
	ПараметрыВыбора.Вставить("РежимВыбора", Истина);
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыВыбора, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбранногоПеревозчика(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаПеревозкуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыВыбора = Новый Структура();
	ПараметрыВыбора.Вставить("РежимВыбора", Истина);
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыВыбора, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаПеревозкуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОтветственныйЗаПеревозку = Строка(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныеНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыВыбора = Новый Структура();
	ПараметрыВыбора.Вставить("РежимВыбора", Истина);
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.ТранспортныеСредства.ФормаВыбора", ПараметрыВыбора, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныеНомераОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	ЗаполнитьПараметрыТранспортногоСредства(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПриИзменении(Элемент)
	
	Заполнить(Неопределено)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура открывает форму для печати ТТН
//
Процедура ПечатьТН(Команда)
	
	НеЗаполняетсяИзФормы = "";
	
	ПараметрыПечати = Новый Структура();
	
	// ::: Раздел 0 (шапка и заголовки)
	ПараметрыПечати.Вставить("Пункт0_1", НомерЭкземпляра);
	ПараметрыПечати.Вставить("Пункт0_2", ДатаЗаявки);
	ПараметрыПечати.Вставить("Пункт0_3", НомерЗаявки);
	
	// ::: Раздел 1
	ПараметрыПечати.Вставить("Пункт1_1", Грузоотправитель);
	ПараметрыПечати.Вставить("Пункт1_2", ДокументыРасчетов);
	
	// ::: Раздел 1а
	ПараметрыПечати.Вставить("Пункт1а_1", Заказчик1а_1);
	ПараметрыПечати.Вставить("Пункт2а_1", Заказчик1а_2);
	
	// ::: Раздел 2
	ПараметрыПечати.Вставить("Пункт2_1", Грузополучатель);
	ПараметрыПечати.Вставить("Пункт2_2", АдресМестаДоставки);
	
	// ::: Раздел 3
	ПараметрыПечати.Вставить("Пункт3_1", НаименованиеГруза);
	ПараметрыПечати.Вставить("Пункт3_2", КоличествоМестМаркировка);
	ПараметрыПечати.Вставить("Пункт3_3", ГрузовыеМеста);
	ПараметрыПечати.Вставить("Пункт3_4", ИнформацияПоОпаснымВеществам);
	ПараметрыПечати.Вставить("Пункт3_5", ОбъявленнаяСтоимость);
	
	// ::: Раздел 4
	ПараметрыПечати.Вставить("Пункт4_1", ПрилагаемыеДокументы);
	ПараметрыПечати.Вставить("Пункт4_2", ПрилагаемыеСертификаты);
	ПараметрыПечати.Вставить("Пункт4_3", ДокументыОтгрузки);
	
	// ::: Раздел 5    
	ПараметрыПечати.Вставить("Пункт5_1", МаршрутИСроки);
	ПараметрыПечати.Вставить("Пункт5_2", НеобходимыеУказания);
	ПараметрыПечати.Вставить("Пункт5_3", ЗаявленныйПереадресовщик);
	ПараметрыПечати.Вставить("Пункт5_4", Рекомендации);
	
	// ::: Раздел 6 
	ПараметрыПечати.Вставить("Пункт6_1", Перевозчик);	
	ПараметрыПечати.Вставить("Пункт6_2", ОтветственныйЗаПеревозку);   
	
	// ::: Раздел 7
	ПараметрыПечати.Вставить("Пункт7_1", ТипМарка);
	ПараметрыПечати.Вставить("Пункт7_2", РегистрационныеНомера);
	ПараметрыПечати.Вставить("ТипВладения", ТипВладения); 
	ПараметрыПечати.Вставить("Пункт7_3", ОснованиеВладенияТС);
	ПараметрыПечати.Вставить("Пункт7_4", ПрочиеУсловия);
	
	// ::: Раздел 8
	ПараметрыПечати.Вставить("Пункт8_0", ГрузоотправительПоручитель);     
	ПараметрыПечати.Вставить("Пункт8_1", ЛицоОтКоторогоЗабираетсяГруз);
	ПараметрыПечати.Вставить("Пункт8_2", АдресПогрузки);
	ПараметрыПечати.Вставить("Пункт8_3", СрокПодачиПодПогрузку); 
	ПараметрыПечати.Вставить("Пункт8_4", ФактическоеПрибылПараграф8);   
	ПараметрыПечати.Вставить("Пункт8_41", ФактическоеУбылПараграф8);
	ПараметрыПечати.Вставить("Пункт8_5", МассаГрузаПриЗагрузке);   
	ПараметрыПечати.Вставить("Пункт8_51", КоличествоМестПриЗагрузке);  
	ПараметрыПечати.Вставить("Пункт8_52", ФактическоеСостояниеТары);   
	ПараметрыПечати.Вставить("Пункт8_6", ФактическоеСостояниеГруза);  
	ПараметрыПечати.Вставить("Пункт8_6", ФактическоеСостояниеГруза);  
	ПараметрыПечати.Вставить("Пункт8_7", ПодписьПеревозчикаПараграф8);
	ПараметрыПечати.Вставить("Пункт8_8", ПодписьВодителяПараграф8);  
	
	// ::: Раздел 9 
	ПараметрыПечати.Вставить("Пункт9_1", ДатаФормаПереадресовки); 
	ПараметрыПечати.Вставить("Пункт9_2", НовыйПунктВыгрузки);
	ПараметрыПечати.Вставить("Пункт9_3", Переадресовщик);  
	ПараметрыПечати.Вставить("Пункт9_4", НовыйПолучательГруза); 
	
	// ::: Раздел 10 
	ПараметрыПечати.Вставить("Пункт10_1", АдресВыгрузки);
	ПараметрыПечати.Вставить("Пункт10_2", СрокПодачиПодВыгрузку);
	ПараметрыПечати.Вставить("Пункт10_3", ФактическоеПрибылПараграф10);
	ПараметрыПечати.Вставить("Пункт10_31", ФактическоеУбылПараграф10);
	ПараметрыПечати.Вставить("Пункт10_4", СостояниеГрузаПриВыгрузке); 
	ПараметрыПечати.Вставить("Пункт10_5", КоличествоМестПриВыгрузке);
	ПараметрыПечати.Вставить("Пункт10_6", МассаГрузаПриВыгрузке);          
	ПараметрыПечати.Вставить("Пункт10_7", ПримечанияПеревозчика);    
	ПараметрыПечати.Вставить("Пункт10_8", ПодписьГрузополучателяПараграф10);
	ПараметрыПечати.Вставить("Пункт10_9", ПодписьВодителяПараграф10);  
	
	// ::: Раздел 11 
	ПараметрыПечати.Вставить("Пункт11_1", Обстоятельство);
	ПараметрыПечати.Вставить("Пункт11_2", Штраф);   
	ПараметрыПечати.Вставить("Пункт11_3", ПодписьОтметки); 
	
	// ::: Раздел 12
	ПараметрыПечати.Вставить("Пункт12_1", СтоимостьУслугБезНДС);   
	ПараметрыПечати.Вставить("Пункт12_2", НалоговаяСтавка);
	ПараметрыПечати.Вставить("Пункт12_3", СуммаНалога);
	ПараметрыПечати.Вставить("Пункт12_4", СтоимостьУслугиВНациональнойВалюте);
	ПараметрыПечати.Вставить("Пункт12_5", ПорядокРасчета); 
	ПараметрыПечати.Вставить("Пункт12_6", Перевозчик);
	ПараметрыПечати.Вставить("Пункт12_7", Грузоотправитель); 
	ПараметрыПечати.Вставить("Пункт12_11", ПодписьПеревозчика);
	ПараметрыПечати.Вставить("Пункт12_12", ПодписьГрузоотправителя);
	ПараметрыПечати.Вставить("Пункт12_13", УполномоченноеЛицоПеревозчик);
	ПараметрыПечати.Вставить("Пункт12_14", УполномоченноеЛицоГрузоотправитель);
	
	ПараметрКоманды 			= Новый Массив;
	ПараметрКоманды.Добавить(Объект.Документ);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьТН", "ТН", ПараметрКоманды, ЭтотОбъект,
		ПараметрыПечати);
	
	// ::: Запомним значения реквизитов формы для документа
	СохранитьНастройки(Ложь);
	
КонецПроцедуры //ПечатьТНВыполнить()

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьПоДокументуОснованию();
	
КонецПроцедуры

&НаКлиенте
//  Процедура инициализирует сохранение значений полей формы
//  в хранилище общих настроек.
//
Процедура СохранитьЗначениеПолей(Команда)
	
	СохранитьНастройки();
	
КонецПроцедуры //СохранитьЗначениеПолей()

&НаКлиенте
//  Процедура инициализирует восстановление настройки для пользователя
//  и заполнение полей формы из восстановленной настройки
//
Процедура ВосстановитьЗначениеПолей(Команда)
	
	ВосстановитьНастройки();
	
КонецПроцедуры //ВосстановитьЗначениеПолей()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьГрузоотправителяПоРасходнойНакладной(ДанныеДокумента, МетаданныеДокумента)
	
	ГрузоотправительДляПечати		= ГрузоотправительПоРасходнойНакладной(ДанныеДокумента);
	ИндивидуальныйПредприниматель	= Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
	ФизЛицоКонтрагент				= Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
	
	Если ЗначениеЗаполнено(ГрузоотправительДляПечати) Тогда
		
		Если ТипЗнч(ГрузоотправительДляПечати) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ВидКонтрагента	= ГрузоотправительДляПечати.ВидКонтрагента;
			ЭтоФизЛицо		= (ВидКонтрагента = ИндивидуальныйПредприниматель) ИЛИ (ВидКонтрагента = ФизЛицоКонтрагент);
				
		Иначе
			
			ЭтоФизЛицо = (ГрузоотправительДляПечати.ЮридическоеФизическоеЛицо = КэшЗначений.ФизЛицо);
			
		КонецЕсли;
		
		Если ЭтоФизЛицо Тогда
			ВидГрузоотправителя = КэшЗначений.ФизЛицо;
		Иначе
			ВидГрузоотправителя = КэшЗначений.ЮрЛицо;
		КонецЕсли;
		
		СведенияОГрузоотправителе = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ГрузоотправительДляПечати, 
		ДанныеДокумента.Дата);
		ДанныеГрузоотправителя 		= ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОГрузоотправителе,
				"ПолноеНаименование, ИНН, ФактическийАдрес, Телефоны");
		
		Грузоотправитель					= ДанныеГрузоотправителя;
		
	Иначе
		
		ВидГрузоотправителя = КэшЗначений.ЮрЛицо; 
	КонецЕсли;
		
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрузополучателяПоРасходнойНакладной(ДанныеДокумента, МетаданныеДокумента)
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Грузополучатель) Тогда
		ГрузополучательДляПечати = ДанныеДокумента.Грузополучатель;
	Иначе
		ГрузополучательДляПечати = ДанныеДокумента.Контрагент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГрузополучательДляПечати) Тогда
		
		СведенияОГрузополучателе	= ПечатьДокументовУНФ.СведенияОЮрФизЛице(ГрузополучательДляПечати, 
			ДанныеДокумента.Дата);
			
		Если ГрузополучательДляПечати.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель
			ИЛИ ГрузополучательДляПечати.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
			
			ВидГрузополучателя = КэшЗначений.ФизЛицо;
			Грузополучатель = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОГрузополучателе,
					"ПолноеНаименование, ИНН, ФактическийАдрес");
			
		Иначе
			ВидГрузополучателя = КэшЗначений.ЮрЛицо;
			Грузополучатель = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОГрузополучателе,
					"ПолноеНаименование, ИНН, ФактическийАдрес, Телефоны");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрузоотправителяПоДокументуПеремещениеЗапасов(ДанныеДокумента)
	
	ВидГрузоотправителя = КэшЗначений.ЮрЛицо;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Грузоотправитель) Тогда 
		ГрузоотправительДляПечати = ДанныеДокумента.Грузоотправитель;
	Иначе
		ГрузоотправительДляПечати = ДанныеДокумента.СтруктурнаяЕдиницаОрганизация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГрузоотправительДляПечати) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОГрузоотправителе	= ПечатьДокументовУНФ.СведенияОЮрФизЛице(ГрузоотправительДляПечати, ДанныеДокумента.Дата);
	ОписаниеГрузоотправителя	= ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОГрузоотправителе,
	"ПолноеНаименование, ИНН, ФактическийАдрес, Телефоны");
	
	Грузоотправитель = ОписаниеГрузоотправителя;
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьГрузополучателяПоДокументуПеремещениеЗапасов(ДанныеДокумента)
	
	ВидГрузополучателя = КэшЗначений.ЮрЛицо;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Грузополучатель) Тогда 
		ГрузополучательДляПечати = ДанныеДокумента.Грузополучатель;
	Иначе
		ГрузополучательДляПечати = ДанныеДокумента.СтруктурнаяЕдиницаПолучательОрганизация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГрузополучательДляПечати) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОГрузополучателе	= ПечатьДокументовУНФ.СведенияОЮрФизЛице(ГрузополучательДляПечати, ДанныеДокумента.Дата);
	ОписаниеГрузополучателя = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОГрузополучателе,
	"ПолноеНаименование, ИНН, ФактическийАдрес, Телефоны");
	
	Грузополучатель = ОписаниеГрузополучателя;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьГрузоотправителяПоДокументуОтчетОПереработке(ДанныеДокумента)
	
	ВидГрузоотправителя = КэшЗначений.ЮрЛицо;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Грузоотправитель) Тогда 
		ГрузоотправительДляПечати = ДанныеДокумента.Грузоотправитель;
	ИначеЕсли ЗначениеЗаполнено(ДанныеДокумента.СтруктурнаяЕдиница) 
		И ЗначениеЗаполнено(ДанныеДокумента.СтруктурнаяЕдиницаОрганизация) Тогда
		ГрузоотправительДляПечати = ДанныеДокумента.СтруктурнаяЕдиницаОрганизация;
	Иначе
		ГрузоотправительДляПечати = ДанныеДокумента.СтруктурнаяЕдиница;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГрузоотправительДляПечати) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОГрузоотправителе	= ПечатьДокументовУНФ.СведенияОЮрФизЛице(ГрузоотправительДляПечати, 
		ДанныеДокумента.Дата);
	ОписаниеГрузоотправителя	= ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОГрузоотправителе,
		"ПолноеНаименование, ИНН, ФактическийАдрес, Телефоны");
			
	Грузоотправитель = ОписаниеГрузоотправителя;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрузополучателяПоДокументуОтчетОПереработке(ДанныеДокумента, МетаданныеДокумента)
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Грузополучатель) Тогда
		ГрузополучательДляПечати = ДанныеДокумента.Грузополучатель;
	Иначе
		ГрузополучательДляПечати = ДанныеДокумента.Контрагент;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГрузополучательДляПечати) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОГрузополучателе	= ПечатьДокументовУНФ.СведенияОЮрФизЛице(ГрузополучательДляПечати, 
		ДанныеДокумента.Дата);
	
	Если ГрузополучательДляПечати.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель
		ИЛИ ГрузополучательДляПечати.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
		
		ВидГрузополучателя = КэшЗначений.ФизЛицо;
		Грузополучатель = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОГрузополучателе,
		"ПолноеНаименование, ИНН, ФактическийАдрес");
		
	Иначе
		ВидГрузополучателя = КэшЗначений.ЮрЛицо;
		Грузополучатель = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОГрузополучателе,
		"ПолноеНаименование, ИНН, ФактическийАдрес, Телефоны");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрузоотправителяПоДокументуЗаказНаряд(ДанныеДокумента, МетаданныеДокумента)
	
	ГрузоотправительДляПечати		= ГрузоотправительПоРасходнойНакладной(ДанныеДокумента);
	ИндивидуальныйПредприниматель	= Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
	ФизЛицоКонтрагент				= Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
	
	Если ЗначениеЗаполнено(ГрузоотправительДляПечати) Тогда
		
		Если ТипЗнч(ГрузоотправительДляПечати) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ВидКонтрагента	= ГрузоотправительДляПечати.ВидКонтрагента;
			ЭтоФизЛицо		= (ВидКонтрагента = ИндивидуальныйПредприниматель) ИЛИ (ВидКонтрагента = ФизЛицоКонтрагент);
				
		Иначе
			
			ЭтоФизЛицо = (ГрузоотправительДляПечати.ЮридическоеФизическоеЛицо = КэшЗначений.ФизЛицо);
			
		КонецЕсли;
		
		Если ЭтоФизЛицо Тогда
			ВидГрузоотправителя = КэшЗначений.ФизЛицо;
		Иначе
			ВидГрузоотправителя = КэшЗначений.ЮрЛицо;
		КонецЕсли;
		
		СведенияОГрузоотправителе = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ГрузоотправительДляПечати, 
		ДанныеДокумента.Дата);
			
		Если ЭтоФизЛицо Тогда
			ДанныеГрузоотправителя 		= ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОГрузоотправителе,
				"ПолноеНаименование, ИНН, ФактическийАдрес");
			Грузоотправитель					= ДанныеГрузоотправителя;
		Иначе
			ДанныеГрузоотправителя = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОГрузоотправителе, 
				"ПолноеНаименование, ИНН, ФактическийАдрес, Телефоны");
			Грузоотправитель					= ДанныеГрузоотправителя;
		КонецЕсли;
		
	Иначе
		
		ВидГрузоотправителя = КэшЗначений.ЮрЛицо;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрузополучателяПоДокументуЗаказНаряд(ДанныеДокумента, МетаданныеДокумента)
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Грузополучатель) Тогда
		ГрузополучательДляПечати = ДанныеДокумента.Грузополучатель;
	Иначе
		ГрузополучательДляПечати = ДанныеДокумента.Контрагент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГрузополучательДляПечати) Тогда
		
		СведенияОГрузополучателе	= ПечатьДокументовУНФ.СведенияОЮрФизЛице(ГрузополучательДляПечати, 
			ДанныеДокумента.Дата);
			
		Если ГрузополучательДляПечати.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель
			ИЛИ ГрузополучательДляПечати.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
			
			ВидГрузополучателя = КэшЗначений.ФизЛицо;
			Грузополучатель = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОГрузополучателе,
					"ПолноеНаименование, ИНН, ФактическийАдрес");
			
		Иначе
			ВидГрузополучателя = КэшЗначений.ЮрЛицо;
			Грузополучатель = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОГрузополучателе,
					"ПолноеНаименование, ИНН, ФактическийАдрес, Телефоны");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПеревозчика(ДанныеДокумента, МетаданныеДокумента)
	
	ИндивидуальныйПредприниматель	= Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
	ФизЛицоКонтрагент				= Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Перевозчик) Тогда
		ПеревозчикДляПечати = ДанныеДокумента.Перевозчик;
	Иначе
		ПеревозчикДляПечати = ДанныеДокумента.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПеревозчикДляПечати) Тогда
		
		Если ТипЗнч(ПеревозчикДляПечати) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ВидКонтрагента	= ПеревозчикДляПечати.ВидКонтрагента;
			ЭтоФизЛицо		= (ВидКонтрагента = ИндивидуальныйПредприниматель) ИЛИ (ВидКонтрагента = ФизЛицоКонтрагент);
				
		Иначе
			
			ЭтоФизЛицо = (ПеревозчикДляПечати.ЮридическоеФизическоеЛицо = КэшЗначений.ФизЛицо);
			
		КонецЕсли;
		
		Если ЭтоФизЛицо Тогда
			ВидПеревозчика = КэшЗначений.ФизЛицо;
		Иначе
			ВидПеревозчика = КэшЗначений.ЮрЛицо;
		КонецЕсли;
		
		СведенияОПеревозчике = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ПеревозчикДляПечати, 
			ДанныеДокумента.Дата);
		ДанныеПеревозчика = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПеревозчике, 
			"ПолноеНаименование, ИНН, ФактическийАдрес, Телефоны");
		
		Перевозчик				= ДанныеПеревозчика;
		
	Иначе
		ВидПеревозчика = КэшЗначений.ЮрЛицо;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуРасходнаяНакладная()
	
	ДокументОснование		= Объект.Документ;
	МетаданныеДокумента		= ДокументОснование.Метаданные();
	НомерЭкземпляра			= 1;
	ДанныеДокумента			= ДанныеДокументаРасходнаяНакладная(ДокументОснование);
	// ДатаЗаявки
	ДатаЗаявки								= ДанныеДокумента.Дата;
	
	// Масса
	Если ЗначениеЗаполнено(МассаГрузаПриЗагрузке) Тогда
		МассаГрузаПриЗагрузке	= СтрШаблон(НСтр("ru = '%1 кг'"),Строка(ДанныеДокумента.Вес));
	КонецЕсли;
	
	// Водитель
	ПодписьВодителяПараграф8				= Строка(ДанныеДокумента.Водитель);
	ПодписьВодителяПараграф10				= Строка(ДанныеДокумента.Водитель);
	ОтветственныйЗаПеревозку				= Строка(ДанныеДокумента.Водитель);
	
	//Автомобиль
	РегистрационныеНомера	= ДанныеДокумента.АвтомобильКод;
	ТипМарка				= ДанныеДокумента.АвтомобильМарка;
	
	// Адреса
	Если ЗначениеЗаполнено(ДанныеДокумента.СтруктурнаяЕдиница) Тогда
		Сведения 		= ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеДокумента.СтруктурнаяЕдиница, ДанныеДокумента.Дата);
		АдресПогрузки 	= Сведения.ФактическийАдрес;
	Иначе
		Сведения 		= ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
		АдресПогрузки 	= Сведения.ФактическийАдрес;
	КонецЕсли;
	
	АдресВыгрузки = ДанныеДокумента.АдресДоставки;
	
	// Грузоотправитель
	ЗаполнитьГрузоотправителяПоРасходнойНакладной(ДанныеДокумента, МетаданныеДокумента);
	
	// Грузополучатель
	ЗаполнитьГрузополучателяПоРасходнойНакладной(ДанныеДокумента, МетаданныеДокумента);
	
	// Перевозчик
	ЗаполнитьПеревозчика(ДанныеДокумента, МетаданныеДокумента);
	
КонецПроцедуры //ЗаполнитьПоДокументу()

&НаСервере
Процедура ЗаполнитьПоДокументуПеремещениеЗапасов()
	
	ДокументОснование	= Объект.Документ;
	МетаданныеДокумента	= ДокументОснование.Метаданные();
	НомерЭкземпляра 	= 1;
	ДатаЗаявки			= ДокументОснование.Дата;
	ДанныеДокумента 	= ДанныеДокументаПеремещениеЗапасов(ДокументОснование);
	
	// ДатаЗаявки
	ДатаЗаявки								= ДанныеДокумента.Дата;
	
	// Водитель
	ПодписьВодителяПараграф8				= Строка(ДанныеДокумента.Водитель);
	ПодписьВодителяПараграф10				= Строка(ДанныеДокумента.Водитель);
	ОтветственныйЗаПеревозку				= Строка(ДанныеДокумента.Водитель);
	
	//Автомобиль
	РегистрационныеНомера	= ДанныеДокумента.АвтомобильКод;
	ТипМарка				= ДанныеДокумента.АвтомобильМарка;
	
	// Адреса
	Если ЗначениеЗаполнено(ДанныеДокумента.СтруктурнаяЕдиница) Тогда
		Сведения 		= ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеДокумента.СтруктурнаяЕдиница, ДанныеДокумента.Дата);
		АдресПогрузки 	= Сведения.ФактическийАдрес;
	Иначе
		Сведения 		= ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
		АдресПогрузки 	= Сведения.ФактическийАдрес;
	КонецЕсли;
	АдресВыгрузки = ДанныеДокумента.АдресДоставки;
	
	// :::Грузоотправитель
	ЗаполнитьГрузоотправителяПоДокументуПеремещениеЗапасов(ДанныеДокумента);
	// :::Грузополучатель
	ЗаполнитьГрузополучателяПоДокументуПеремещениеЗапасов(ДанныеДокумента);
		
	// :::Перевозчик
	ЗаполнитьПеревозчика(ДокументОснование, МетаданныеДокумента);
	
КонецПроцедуры //ЗаполнитьПоДокументуПеремещениеЗапасов()

&НаСервере
Процедура ЗаполнитьПоДокументуОтчетОПереработке()
	
	ДокументОснование	= Объект.Документ;
	МетаданныеДокумента	= ДокументОснование.Метаданные();
	НомерЭкземпляра 	= 1;
	ДатаЗаявки			= ДокументОснование.Дата;
	ДанныеДокумента 	= ДанныеДокументаОтчетОПереработке(ДокументОснование);
	
	// ДатаЗаявки
	ДатаЗаявки								= ДанныеДокумента.Дата;
	
	// Водитель
	ПодписьВодителяПараграф8				= Строка(ДанныеДокумента.Водитель);
	ПодписьВодителяПараграф10				= Строка(ДанныеДокумента.Водитель);
	ОтветственныйЗаПеревозку				= Строка(ДанныеДокумента.Водитель);
	
	//Автомобиль
	РегистрационныеНомера	= ДанныеДокумента.АвтомобильКод;
	ТипМарка				= ДанныеДокумента.АвтомобильМарка;
	
	// Адреса
	Если ЗначениеЗаполнено(ДанныеДокумента.СтруктурнаяЕдиница) Тогда
		Сведения 		= ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеДокумента.СтруктурнаяЕдиница, ДанныеДокумента.Дата);
		АдресПогрузки 	= Сведения.ФактическийАдрес;
	Иначе
		Сведения 		= ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
		АдресПогрузки 	= Сведения.ФактическийАдрес;
	КонецЕсли;
	АдресВыгрузки = ДанныеДокумента.АдресДоставки;
	
	// :::Грузоотправитель
	ЗаполнитьГрузоотправителяПоДокументуОтчетОПереработке(ДанныеДокумента);
	
	// :::Грузополучатель
	ЗаполнитьГрузополучателяПоДокументуОтчетОПереработке(ДанныеДокумента, МетаданныеДокумента);
	
	// :::Перевозчик
	ЗаполнитьПеревозчика(ДокументОснование, МетаданныеДокумента);
	
КонецПроцедуры //ЗаполнитьПоДокументуОтчетОПереработке()

&НаСервере
Процедура ЗаполнитьПоДокументуЗаказНаряд()
	
	ДокументОснование	= Объект.Документ;
	МетаданныеДокумента	= ДокументОснование.Метаданные();
	НомерЭкземпляра 	= 1;
	ДатаЗаявки			= ДокументОснование.Дата;
	ДанныеДокумента 	= ДанныеДокументаЗаказНаряд(ДокументОснование);
	
	// ДатаЗаявки
	ДатаЗаявки								= ДанныеДокумента.Дата;
	
	// Водитель
	ПодписьВодителяПараграф8				= Строка(ДанныеДокумента.Водитель);
	ПодписьВодителяПараграф10				= Строка(ДанныеДокумента.Водитель);
	ОтветственныйЗаПеревозку				= Строка(ДанныеДокумента.Водитель);
	
	//Автомобиль
	РегистрационныеНомера	= ДанныеДокумента.АвтомобильКод;
	ТипМарка				= ДанныеДокумента.АвтомобильМарка;
	
	// Адреса
	Если ЗначениеЗаполнено(ДанныеДокумента.СтруктурнаяЕдиница) Тогда
		Сведения 		= ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеДокумента.СтруктурнаяЕдиница, ДанныеДокумента.Дата);
		АдресПогрузки 	= Сведения.ФактическийАдрес;
	Иначе
		Сведения 		= ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
		АдресПогрузки 	= Сведения.ФактическийАдрес;
	КонецЕсли;
	АдресВыгрузки = ДанныеДокумента.АдресДоставки;
	
	// :::Грузоотправитель
	ЗаполнитьГрузоотправителяПоДокументуЗаказНаряд(ДанныеДокумента, МетаданныеДокумента);
	
	// :::Грузополучатель
	ЗаполнитьГрузополучателяПоДокументуЗаказНаряд(ДанныеДокумента, МетаданныеДокумента);
	
	// :::Перевозчик
	ЗаполнитьПеревозчика(ДокументОснование, МетаданныеДокумента);
	
КонецПроцедуры

&НаСервере
Функция СведенияОбУчастникеПеревозки(СведенияОбУчастнике)
	
	ОписаниеУчастника	= ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбУчастнике,
		"ПолноеНаименование, ИНН, ФактическийАдрес, Телефоны");
	Возврат ОписаниеУчастника;
	
КонецФункции

Процедура ЗаполнитьПоДокументуОснованию()
	
	Если НЕ ЗначениеЗаполнено(Объект.Документ) Тогда
		
		ДатаЗаявки = ТекущаяДата();
		
		Возврат;
		
	ИначеЕсли ТипЗнч(Объект.Документ) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		ЗаполнитьПоДокументуРасходнаяНакладная();
		
	ИначеЕсли ТипЗнч(Объект.Документ) = Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда
		
		ЗаполнитьПоДокументуПеремещениеЗапасов();
		
	ИначеЕсли ТипЗнч(Объект.Документ) = Тип("ДокументСсылка.ОтчетОПереработке") Тогда
		
		ЗаполнитьПоДокументуОтчетОПереработке();
		
	ИначеЕсли ТипЗнч(Объект.Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		ЗаполнитьПоДокументуЗаказНаряд();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Восстанавливает настройки из хранилища общих настроек
//
Процедура ВосстановитьНастройки(Пользовательские = Истина)
	Перем СтруктураПолейФормы;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользовательские Тогда
		
		СтруктураПолейФормы = ХранилищеОбщихНастроек.Загрузить("Обработки.ПечатьТН",	"Пользовательские",			"Настройки печати");
		
	Иначе
		
		СтруктураПолейФормы = ХранилищеОбщихНастроек.Загрузить("Обработки.ПечатьТН",	СокрЛП(Объект.Документ),	"Настройки печати",		"Общие");
		
	КонецЕсли;
	
	Если СтруктураПолейФормы = Неопределено Тогда
		
		// Заполним повторно поля значениями из документа
		ЗаполнитьПоДокументуОснованию();
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураПолейФормы);
		
		СтруктураПолейФормы.Свойство("Грузоотправитель", Грузоотправитель);
		СтруктураПолейФормы.Свойство("Грузополучатель", Грузополучатель);
        СтруктураПолейФормы.Свойство("Перевозчик", Перевозчик);
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройки()

&НаСервере
// Сохраняет настройки в хранилище общих настроек
//
//
Процедура СохранитьНастройки(Пользовательские = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПолейФормы = СформироватьСтруктуруПолейФормыНаСервере();
	
	Если Пользовательские Тогда
		
		ХранилищеОбщихНастроек.Сохранить("Обработки.ПечатьТН",	"Пользовательские", 		СтруктураПолейФормы,	"Настройки печати");
		
	Иначе
		
		ХранилищеОбщихНастроек.Сохранить("Обработки.ПечатьТН",	СокрЛП(Объект.Документ),	СтруктураПолейФормы,	"Настройки печати",	"Общие");
		
	КонецЕсли;
	
КонецПроцедуры //СохранитьПользовательскийШаблон()

&НаСервере
Функция ДанныеДокументаРасходнаяНакладная(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходнаяНакладная.Ссылка КАК Ссылка,
	|	РасходнаяНакладная.Дата КАК Дата,
	|	РасходнаяНакладная.Автомобиль КАК Автомобиль,
	|	РасходнаяНакладная.Автомобиль.Код КАК АвтомобильКод,
	|	РасходнаяНакладная.Автомобиль.Марка КАК АвтомобильМарка,
	|	РасходнаяНакладная.АдресДоставки КАК АдресДоставки,
	|	РасходнаяНакладная.Вес КАК Вес,
	|	РасходнаяНакладная.Водитель КАК Водитель,
	|	РасходнаяНакладная.Грузоотправитель КАК Грузоотправитель,
	|	РасходнаяНакладная.Грузополучатель КАК Грузополучатель,
	|	РасходнаяНакладная.Контрагент КАК Контрагент,
	|	РасходнаяНакладная.Перевозчик КАК Перевозчик,
	|	РасходнаяНакладная.Прицеп КАК Прицеп,
	|	РасходнаяНакладная.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	РасходнаяНакладная.СтруктурнаяЕдиница.Организация КАК СтруктурнаяЕдиницаОрганизация,
	|	РасходнаяНакладная.Организация КАК Организация
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	ДанныеДокумента = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеДокумента[0];

КонецФункции

&НаСервере
Функция ДанныеДокументаПеремещениеЗапасов(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеЗапасов.Ссылка КАК Ссылка,
	|	ПеремещениеЗапасов.Дата КАК Дата,
	|	ПеремещениеЗапасов.Автомобиль КАК Автомобиль,
	|	ПеремещениеЗапасов.Автомобиль.Код КАК АвтомобильКод,
	|	ПеремещениеЗапасов.Автомобиль.Марка КАК АвтомобильМарка,
	|	ПеремещениеЗапасов.АдресДоставки КАК АдресДоставки,
	|	ПеремещениеЗапасов.Водитель КАК Водитель,
	|	ПеремещениеЗапасов.Грузоотправитель КАК Грузоотправитель,
	|	ПеремещениеЗапасов.Грузополучатель КАК Грузополучатель,
	|	ПеремещениеЗапасов.Перевозчик КАК Перевозчик,
	|	ПеремещениеЗапасов.Прицеп КАК Прицеп,
	|	ПеремещениеЗапасов.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПеремещениеЗапасов.СтруктурнаяЕдиница.Организация КАК СтруктурнаяЕдиницаОрганизация,
	|	ПеремещениеЗапасов.Организация КАК Организация,
	|	ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель КАК СтруктурнаяЕдиницаПолучатель,
	|	ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель.Организация КАК СтруктурнаяЕдиницаПолучательОрганизация
	|ИЗ
	|	Документ.ПеремещениеЗапасов КАК ПеремещениеЗапасов
	|ГДЕ
	|	ПеремещениеЗапасов.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	ДанныеДокумента = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеДокумента[0];

КонецФункции

&НаСервере
Функция ДанныеДокументаОтчетОПереработке(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтчетОПереработке.Ссылка КАК Ссылка,
	|	ОтчетОПереработке.Дата КАК Дата,
	|	ОтчетОПереработке.Автомобиль КАК Автомобиль,
	|	ОтчетОПереработке.Автомобиль.Код КАК АвтомобильКод,
	|	ОтчетОПереработке.Автомобиль.Марка КАК АвтомобильМарка,
	|	ОтчетОПереработке.АдресДоставки КАК АдресДоставки,
	|	ОтчетОПереработке.Водитель КАК Водитель,
	|	ОтчетОПереработке.Грузоотправитель КАК Грузоотправитель,
	|	ОтчетОПереработке.Грузополучатель КАК Грузополучатель,
	|	ОтчетОПереработке.Перевозчик КАК Перевозчик,
	|	ОтчетОПереработке.Прицеп КАК Прицеп,
	|	ОтчетОПереработке.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтчетОПереработке.СтруктурнаяЕдиница.Организация КАК СтруктурнаяЕдиницаОрганизация,
	|	ОтчетОПереработке.Организация КАК Организация,
	|	ОтчетОПереработке.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ОтчетОПереработке КАК ОтчетОПереработке
	|ГДЕ
	|	ОтчетОПереработке.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	ДанныеДокумента = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеДокумента[0];

КонецФункции

&НаСервере
Функция ДанныеДокументаЗаказНаряд(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаряд.Ссылка КАК Ссылка,
	|	ЗаказНаряд.Дата КАК Дата,
	|	ЗаказНаряд.Автомобиль КАК Автомобиль,
	|	ЗаказНаряд.Автомобиль.Код КАК АвтомобильКод,
	|	ЗаказНаряд.Автомобиль.Марка КАК АвтомобильМарка,
	|	ЗаказНаряд.АдресДоставки КАК АдресДоставки,
	|	ЗаказНаряд.Водитель КАК Водитель,
	|	ЗаказНаряд.Грузоотправитель КАК Грузоотправитель,
	|	ЗаказНаряд.Грузополучатель КАК Грузополучатель,
	|	ЗаказНаряд.Перевозчик КАК Перевозчик,
	|	ЗаказНаряд.Прицеп КАК Прицеп,
	|	ЗаказНаряд.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ЗаказНаряд.СтруктурнаяЕдиницаРезерв.Организация КАК СтруктурнаяЕдиницаОрганизация,
	|	ЗаказНаряд.Организация КАК Организация,
	|	ЗаказНаряд.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказНаряд
	|ГДЕ
	|	ЗаказНаряд.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	ДанныеДокумента = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеДокумента[0];

КонецФункции

&НаСервере
Функция ГрузоотправительПоРасходнойНакладной(ДанныеДокумента)
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Грузоотправитель) Тогда
		
		ГрузоотправительДляПечати	= ДанныеДокумента.Грузоотправитель;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеДокумента.Организация) Тогда
		
		ГрузоотправительДляПечати	= ДанныеДокумента.Организация;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеДокумента.СтруктурнаяЕдиница) 
		И ЗначениеЗаполнено(ДанныеДокумента.СтруктурнаяЕдиницаОрганизация)  Тогда
		
		ГрузоотправительДляПечати	= ДанныеДокумента.СтруктурнаяЕдиницаОрганизация;
		
	Иначе
		
		ГрузоотправительДляПечати	= ДанныеДокумента.Организация;
		
	КонецЕсли;
	
	Возврат ГрузоотправительДляПечати;
	
КонецФункции

&НаСервере
// Формирует структуру заполненную значениями полей формы
//
//  Ключ структуры	- идентификатор поля;
//  Значение 		- значение поля;
//  
Функция СформироватьСтруктуруПолейФормыНаСервере()
	
	СтруктураПолейФормы = Новый Структура();
	
	// ::: Раздел 0 (шапка и заголовки)
	СтруктураПолейФормы.Вставить("НомерЭкземпляра", НомерЭкземпляра);
	СтруктураПолейФормы.Вставить("ДатаЗаявки", ДатаЗаявки);
	СтруктураПолейФормы.Вставить("НомерЗаявки", НомерЗаявки);
	
	// ::: Раздел 1
	СтруктураПолейФормы.Вставить("Грузоотправитель", Грузоотправитель);
	СтруктураПолейФормы.Вставить("ДокументыРасчетов", ДокументыРасчетов);
	
	// ::: Раздел 1а
	СтруктураПолейФормы.Вставить("Заказчик1а_1", Заказчик1а_1);
	СтруктураПолейФормы.Вставить("Заказчик1а_2", Заказчик1а_2);
	
	// ::: Раздел 2
	СтруктураПолейФормы.Вставить("Грузополучатель", Грузополучатель);
	СтруктураПолейФормы.Вставить("АдресМестаДоставки", АдресМестаДоставки);
	
	// ::: Раздел 3
	СтруктураПолейФормы.Вставить("НаименованиеГруза", НаименованиеГруза);
	СтруктураПолейФормы.Вставить("КоличествоМестМаркировка", КоличествоМестМаркировка);
	СтруктураПолейФормы.Вставить("ГрузовыеМеста", ГрузовыеМеста);
	СтруктураПолейФормы.Вставить("ИнформацияПоОпаснымВеществам", ИнформацияПоОпаснымВеществам);
	СтруктураПолейФормы.Вставить("ОбъявленнаяСтоимость", ОбъявленнаяСтоимость);
	
	// ::: Раздел 4
	СтруктураПолейФормы.Вставить("ПрилагаемыеДокументы", ПрилагаемыеДокументы);
	СтруктураПолейФормы.Вставить("ПрилагаемыеСертификаты", ПрилагаемыеСертификаты);
	СтруктураПолейФормы.Вставить("ДокументыОтгрузки", ДокументыОтгрузки);
	
	// ::: Раздел 5    
	СтруктураПолейФормы.Вставить("МаршрутИСроки", МаршрутИСроки);
	СтруктураПолейФормы.Вставить("НеобходимыеУказания", НеобходимыеУказания);
	СтруктураПолейФормы.Вставить("ЗаявленныйПереадресовщик", ЗаявленныйПереадресовщик);
	СтруктураПолейФормы.Вставить("Рекомендации", Рекомендации);
	
	// ::: Раздел 6 
	СтруктураПолейФормы.Вставить("Перевозчик", Перевозчик);	
	СтруктураПолейФормы.Вставить("ОтветственныйЗаПеревозку", ОтветственныйЗаПеревозку);   
	
	// ::: Раздел 7
	СтруктураПолейФормы.Вставить("ТипМарка", ТипМарка);
	СтруктураПолейФормы.Вставить("РегистрационныеНомера", РегистрационныеНомера);
	СтруктураПолейФормы.Вставить("ТипВладения", ТипВладения); 
	СтруктураПолейФормы.Вставить("ОснованиеВладенияТС", ОснованиеВладенияТС);
	СтруктураПолейФормы.Вставить("ПрочиеУсловия", ПрочиеУсловия);
	
	// ::: Раздел 8
	СтруктураПолейФормы.Вставить("ГрузоотправительПоручитель", ГрузоотправительПоручитель);     
	СтруктураПолейФормы.Вставить("ЛицоОтКоторогоЗабираетсяГруз", ЛицоОтКоторогоЗабираетсяГруз);
	СтруктураПолейФормы.Вставить("АдресПогрузки", АдресПогрузки);
	СтруктураПолейФормы.Вставить("СрокПодачиПодПогрузку", СрокПодачиПодПогрузку); 
	СтруктураПолейФормы.Вставить("ФактическоеПрибылПараграф8", ФактическоеПрибылПараграф8);   
	СтруктураПолейФормы.Вставить("ФактическоеУбылПараграф8", ФактическоеУбылПараграф8);
	СтруктураПолейФормы.Вставить("МассаГрузаПриЗагрузке", МассаГрузаПриЗагрузке);   
	СтруктураПолейФормы.Вставить("КоличествоМестПриЗагрузке", КоличествоМестПриЗагрузке);  
	СтруктураПолейФормы.Вставить("ФактическоеСостояниеТары", ФактическоеСостояниеТары);   
	СтруктураПолейФормы.Вставить("ФактическоеСостояниеГруза", ФактическоеСостояниеГруза);  
	СтруктураПолейФормы.Вставить("ПодписьПеревозчикаПараграф8", ПодписьПеревозчикаПараграф8);
	СтруктураПолейФормы.Вставить("ПодписьВодителяПараграф8", ПодписьВодителяПараграф8);  
	
	// ::: Раздел 9 
	СтруктураПолейФормы.Вставить("ДатаФормаПереадресовки", ДатаФормаПереадресовки); 
	СтруктураПолейФормы.Вставить("НовыйПунктВыгрузки", НовыйПунктВыгрузки);
	СтруктураПолейФормы.Вставить("Переадресовщик", Переадресовщик);  
	СтруктураПолейФормы.Вставить("НовыйПолучательГруза", НовыйПолучательГруза); 
	
	// ::: Раздел 10 
	СтруктураПолейФормы.Вставить("АдресВыгрузки", АдресВыгрузки);
	СтруктураПолейФормы.Вставить("СрокПодачиПодВыгрузку", СрокПодачиПодВыгрузку);
	СтруктураПолейФормы.Вставить("ФактическоеПрибылПараграф10", ФактическоеПрибылПараграф10);
	СтруктураПолейФормы.Вставить("ФактическоеУбылПараграф10", ФактическоеУбылПараграф10);
	СтруктураПолейФормы.Вставить("СостояниеГрузаПриВыгрузке", СостояниеГрузаПриВыгрузке); 
	СтруктураПолейФормы.Вставить("КоличествоМестПриВыгрузке", КоличествоМестПриВыгрузке);
	СтруктураПолейФормы.Вставить("МассаГрузаПриВыгрузке", МассаГрузаПриВыгрузке);          
	СтруктураПолейФормы.Вставить("ПримечанияПеревозчика", ПримечанияПеревозчика);    
	СтруктураПолейФормы.Вставить("ПодписьГрузополучателяПараграф10", ПодписьГрузополучателяПараграф10);
	СтруктураПолейФормы.Вставить("ПодписьВодителяПараграф10", ПодписьВодителяПараграф10);  
	
	// ::: Раздел 11 
	СтруктураПолейФормы.Вставить("Обстоятельство", Обстоятельство);
	СтруктураПолейФормы.Вставить("Штраф", Штраф);   
	СтруктураПолейФормы.Вставить("ПодписьОтметки", ПодписьОтметки); 
	
	// ::: Раздел 12
	СтруктураПолейФормы.Вставить("СтоимостьУслугБезНДС", СтоимостьУслугБезНДС);   
	СтруктураПолейФормы.Вставить("НалоговаяСтавка", НалоговаяСтавка);
	СтруктураПолейФормы.Вставить("СуммаНалога", СуммаНалога);
	СтруктураПолейФормы.Вставить("СтоимостьУслугиВНациональнойВалюте", СтоимостьУслугиВНациональнойВалюте);
	СтруктураПолейФормы.Вставить("ПорядокРасчета", ПорядокРасчета); 
	СтруктураПолейФормы.Вставить("Перевозчик", Перевозчик);
	СтруктураПолейФормы.Вставить("Грузоотправитель", Грузоотправитель); 
	СтруктураПолейФормы.Вставить("ПодписьПеревозчика", ПодписьПеревозчика);
	СтруктураПолейФормы.Вставить("УполномоченноеЛицоПеревозчик", УполномоченноеЛицоПеревозчик);
	СтруктураПолейФормы.Вставить("ПодписьГрузоотправителя", ПодписьГрузоотправителя);
	СтруктураПолейФормы.Вставить("УполномоченноеЛицоГрузоотправитель", УполномоченноеЛицоГрузоотправитель);	
	Возврат СтруктураПолейФормы;
	
КонецФункции  // СформироватьСтруктуруПолейФормыНаСервере()

&НаСервере
Процедура ЗаполнитьПараметрыТранспортногоСредства(ВыбранноеТС)
	ДанныеТС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыбранноеТС, "Код, Марка");
	РегистрационныеНомера 	= ДанныеТС.Код;
	ТипМарка 				= ДанныеТС.Марка;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВыбранногоГрузоотправителя(Участник)
	
	СведенияОбУчастнике	= ПечатьДокументовУНФ.СведенияОЮрФизЛице(Участник, ДатаЗаявки);
	
	Грузоотправитель = СведенияОбУчастникеПеревозки(СведенияОбУчастнике);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВыбранногоГрузополучателя(Участник)
	
	СведенияОбУчастнике	= ПечатьДокументовУНФ.СведенияОЮрФизЛице(Участник, ДатаЗаявки);
	
	Грузополучатель = СведенияОбУчастникеПеревозки(СведенияОбУчастнике);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВыбранногоПеревозчика(Участник)
	
	СведенияОбУчастнике	= ПечатьДокументовУНФ.СведенияОЮрФизЛице(Участник, ДатаЗаявки);
	
	Перевозчик = СведенияОбУчастникеПеревозки(СведенияОбУчастнике);
	
КонецПроцедуры

#КонецОбласти
