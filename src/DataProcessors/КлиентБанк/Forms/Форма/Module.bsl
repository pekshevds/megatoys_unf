#Область ОписаниеПеременных

#Область ПеременныеФормы

&НаКлиенте
Перем ВыполняетсяПовторноеРаспознаваниеДанныхИзБанка;

&НаКлиенте
Перем СтруктураПоискаКонтрагента;

&НаКлиенте
Перем ДокументыКИмпорту_ТекущаяСтрока;

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Предопределенные значения
	ВидОперацииВзносНаличных = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными;
	ВидОперацииСписаниеНаличных = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных;
	ВидОперацииПереводСДругогоСчета = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета;
	ВидОперацииПереводНаДругойСчет = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет;
	ВидОперацииОтКурьерскойКомпанииПочты = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты;
	
	ДействиеНеСоздаватьНовогоКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
	
	СпособЗачетаВручную = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	СпособЗачетаАвтоматически = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
	СпособРазнесенияОплатыПоУмолчанию = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособРазнесенияОплатыПоУмолчанию();
	// Конец Предопределенные значения
	
	ВключитьВыгрузкуПлатежныхТребований = Параметры.ВключитьВыгрузкуПлатежныхТребований;
	
	РасширениеРаботыСФайламиПодключено = Истина;
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	Если Параметры.Свойство("БанковскийСчетОрганизации") 
		И ЗначениеЗаполнено(Параметры.БанковскийСчетОрганизации)
		И Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Объект.БанковскийСчет = Параметры.БанковскийСчетОрганизации;
	КонецЕсли;
	
	Если НЕ (Параметры.Свойство("НачалоПериода") И Параметры.Свойство("КонецПериода")) Тогда
		Объект.НачалоПериода = ОбщегоНазначения.ТекущаяДатаПользователя();
		Объект.КонецПериода  = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "Владелец");
		Иначе	
			Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимПоУмолчанию") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[Параметры.РежимПоУмолчанию];
	КонецЕсли;
	
	Если Параметры.Свойство("СписокДокументов") Тогда
		СписокДокументов = Параметры.СписокДокументов;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
	ИспользоватьСтатьиДДС          = Истина;
	
	ЦветОшибки = ЦветаСтиля.ПоясняющийПроблемуТекстБРО;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		УчетДенежныхСредствСервер.УстановитьБанковскийСчет(Объект.БанковскийСчет, Объект.Организация, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	ТаблицаДокументов.Загрузить(Обработки.КлиентБанк.ВидыДокументовКлиентаБанка());
	ЗагрузитьНастройкиДляБанковскогоСчета();
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Объект.СоздаватьНенайденныеЭлементы = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
		ВалютаДенежныхСредств = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если Параметры.Свойство("АдресХранилищаРаспознанныеДанныеИзБанка") Тогда
		ВыполненаЗагрузка = Ложь;
		УстановитьУсловноеОформление(); // должно идти раньше РазместитьНаФормеРаспознанныеДанныеИзБанка()
		РазместитьНаФормеРаспознанныеДанныеИзБанка(Параметры.АдресХранилищаРаспознанныеДанныеИзБанка);
		Если Объект.СоздаватьНенайденныеЭлементы И ЕстьОшибкиВДокументыКИмпорту() Тогда
			ПоказатьОшибкиНаСервере(Истина);
			ПоказатьОшибкиИмпорта = Истина;
			Элементы.ДокументыКИмпортуПоказатьОшибки.Пометка = Истина;
		КонецЕсли;
		Для Каждого СообщениеПользователю Из Параметры.СообщенияПользователюВФормеОбменСБанком Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		КонецЦикла;
		ПереданыРаспознанныеДанныеИзБанка = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ФайлЗагрузки") Тогда
		Объект.ФайлЗагрузки = Параметры.ФайлЗагрузки;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗагрузитьИзИстории") Тогда
		МенеджерЗаписи = РегистрыСведений.ИсторияРаботыСКлиентомБанка.СоздатьМенеджерЗаписи();
	
		МенеджерЗаписи.Период = Параметры.Период;
		МенеджерЗаписи.Организация = Параметры.Организация;
		МенеджерЗаписи.БанковскийСчет = Параметры.БанковскийСчет;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			ТекстФайлаЗагрузки = МенеджерЗаписи.ИсходныйФайл.Получить();

			ТекстовыйПоток = Новый ТекстовыйДокумент;
			ТекстовыйПоток.ДобавитьСтроку(ТекстФайлаЗагрузки);
	
			Попытка
				
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
				Если МенеджерЗаписи.Кодировка = "DOS" Тогда
					ТекстовыйПоток.Записать(ИмяВременногоФайла, КодировкаТекста.OEM);
				Иначе
					ТекстовыйПоток.Записать(ИмяВременногоФайла, КодировкаТекста.ANSI);
				КонецЕсли;
	
				Объект.ФайлЗагрузки = ИмяВременногоФайла;
				
				//УдалитьФайлы(ИмяВременногоФайла);
				
			Исключение
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с банком.Временный файл'"), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось сохранение временного файла на диск по причине: %1'"),
						ОписаниеОшибки()));
						
				Возврат;
				
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ВыпискиБанка.Очистить();
	
	// Разбор выписки при открытии КлиентБанка из формы электронного документа
	Если Параметры.Свойство("ЭлектроннаяВыпискаБанка")
		И ЗначениеЗаполнено(Параметры.ЭлектроннаяВыпискаБанка) Тогда
		Если ТипЗнч(Параметры.ЭлектроннаяВыпискаБанка) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
			СообщениеБанка = Параметры.ЭлектроннаяВыпискаБанка;
		ИначеЕсли ТипЗнч(Параметры.ЭлектроннаяВыпискаБанка) = Тип("СписокЗначений") Тогда
			СообщениеБанка = Параметры.ЭлектроннаяВыпискаБанка[0].Значение;
		КонецЕсли;
		
		ВыпискиБанка.Добавить(СообщениеБанка);
		Объект.НачалоПериода = СообщениеБанка.ДатаНачала;
		Объект.КонецПериода = ?(ЗначениеЗаполнено(СообщениеБанка.ДатаОкончания),
			СообщениеБанка.ДатаОкончания, СообщениеБанка.ДатаНачала);
		ЭлектроннаяВыпискаБанка = ТекстСсылкиНаЭлектронныеВыписки(Объект.НачалоПериода, Объект.КонецПериода);
		АдресФайлаВыписки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "АдресФайлаВыписки");
		АдресВыписки      = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "АдресВыписки");
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		ДлительнаяОперацияЗаполненияДокументовНаЭкспортПриОткрытии =
			ОбновитьДокументыНаЭкспортВФоне(Объект.ВыгружатьПлатежноеПоручение, Объект.ВыгружатьПлатежноеТребование);
	КонецЕсли;
	
	УстановитьУсловноеОформление(); // должно идти раньше УправлениеФормой()
	УправлениеФормой(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
		
	ИмяКлючаОбъекта = "Обработка.КлиентБанк.Форма.ОсновнаяФорма";

	ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта
		+ "_" + "ПоказыватьИнформациюОСтаройВерсииКлиентБанка");
	
	Если ЗначениеНастройки = Неопределено Тогда
		ПоказыватьИнформациюОСтаройВерсииКлиентБанка = Истина;
	Иначе
		ПоказыватьИнформациюОСтаройВерсииКлиентБанка = ЗначениеНастройки;
	КонецЕсли;
	
	ВыводитьПодсказку = РасчетыРаботаСФормамиВызовСервера.ПроверитьВозможностьИспользованияСтарогоКлиентБанкаУНФ();
	Элементы.ГруппаИнформацияОСтаройВерсииКлиентБанка.Видимость = ВыводитьПодсказку
		И ПоказыватьИнформациюОСтаройВерсииКлиентБанка;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	НастройкиЗагрузки(); // Превентивно прочитаем настройки, чтобы при необходимости они были сконвертированы
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВерсияФормата = "";
	
	ВыполняетсяПовторноеРаспознаваниеДанныхИзБанка = Ложь;
	ДокументыКИмпорту_ТекущаяСтрока = 0;
	
	Если Не ПустаяСтрока(АдресВыписки) И Не ПереданыРаспознанныеДанныеИзБанка Тогда
		ПрочитатьФайлВыпискиНаКлиенте();
	ИначеЕсли Не ПустаяСтрока(АдресФайлаВыписки) Тогда
		ПрочитатьФайлВыпискиНаКлиенте(Новый ОписаниеПередаваемогоФайла(, АдресФайлаВыписки));
	КонецЕсли;
	
	Если ДлительнаяОперацияЗаполненияДокументовНаЭкспортПриОткрытии <> Неопределено Тогда
		ЗапуститьПроверкуФоновогоЗаданияОбновитьСписокДокументовНаЭкспорт(ДлительнаяОперацияЗаполненияДокументовНаЭкспортПриОткрытии);
		ДлительнаяОперацияЗаполненияДокументовНаЭкспортПриОткрытии = Неопределено;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайламиИПрочитатьФайл", 0.1, Истина);
	
	УправлениеФормой(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Параметр = ЭтотОбъект Тогда
		ОбновитьСписокДокументовНаЭкспорт();
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		ОбновитьСписокДокументовНаЭкспорт(Ложь);
	ИначеЕсли ИмяСобытия = "ИзменениеВыписки" И Источник <> ЭтотОбъект
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗагрузка Тогда
		Если НЕ ВыполняетсяПовторноеРаспознаваниеДанныхИзБанка И ДокументыКИмпорту.Количество() > 0 Тогда
			ВыполняетсяПовторноеРаспознаваниеДанныхИзБанка = Истина;
			ПодключитьОбработчикОжидания("Подключаемый_РаспознатьДанныеБанкаПовторно", 1, Истина);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = Объект.Организация Тогда
		Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			ПриИзмененииБанковскийСчет();
		Иначе
			ПриИзмененииОрганизацияСервер();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененаНастройкаОбмена" Тогда
		ВидимостьЭлементовДиректБанк = ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
			Объект.Организация, Банк);
		
		ПоказатьЭлементыДиректБанк(ЭтотОбъект);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КомандыВыгрузки

&НаКлиенте
Процедура КомандаВыгрузить(Команда)
	
	ОчиститьСообщения();
	Если Объект.ПлатежныеДокументы.Количество() > 0 И КоличествоКВыгрузке > 0 Тогда
		
		АдресВоВременномХранилище = ВыгрузитьДокументы();
		
		Если РасширениеРаботыСФайламиПодключено Тогда
			
			// Вариант для установленного расширения для работы с файлами
			
			Если НЕ ЗначениеЗаполнено(Объект.ФайлВыгрузки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Не указан файл данных для выгрузки документов в банк'")
					,, "Объект.ФайлВыгрузки");
				Возврат;
			КонецЕсли;
			
			ВыгрузитьФайлНаКлиенте(Объект.ФайлВыгрузки, АдресВоВременномХранилище);
			
		Иначе
			// Веб клиент без расширения для работы с файлами
			Попытка
				
				ПолучитьФайл(АдресВоВременномХранилище, "1c_to_kl.txt", Истина);
				ДополнительныеПараметры = Новый Структура("ИмяФайла, АдресВоВременномХранилище",
					"", АдресВоВременномХранилище);
				ЗавершениеВыгрузкиФайла(ДополнительныеПараметры);
				
			Исключение
				ОписаниеОшибки = ИнформацияОбОшибке();
				ШаблонСообщения = НСтр("ru = 'При записи файла возникла ошибка
					|%1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					КраткоеПредставлениеОшибки(ОписаниеОшибки));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				ЗаписатьОшибкуВЖурнал(ТекстСообщения, ОписаниеОшибки.Описание);
				
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		
		Если Объект.ПлатежныеДокументы.Количество() = 0 Тогда
			Если Объект.НачалоПериода = Объект.КонецПериода Тогда
				ТекстПериода = Формат(Объект.НачалоПериода, "ДФ=dd.MM.yyyy");
			Иначе
				ТекстПериода = НСтр("ru = 'период с %1 по %2'");
				ТекстПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПериода,
					Формат(Объект.НачалоПериода, "ДФ=dd.MM.yyyy"),
					Формат(Объект.КонецПериода, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			
			ТекстСообщения = НСтр("ru = 'Отсутствуют платежные поручения за %1
				|по счету %2
				|(%3).
				|
				|Попробуйте изменить период или указать другой банковский счет.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				ТекстПериода,
				Объект.БанковскийСчет,
				Объект.Организация);
		Иначе
			ТекстСообщения = НСтр("ru = 'Отсутствуют платежные поручения, отмеченные к выгрузе.
				|
				|Отметьте документы и повторите выгрузку.'");
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправить(Команда)
	
	ОчиститьСообщения();
	Если Объект.ПлатежныеДокументы.Количество() > 0 Тогда
		
		МассивДокументов = Новый Массив;
		
		Для каждого Строка Из Объект.ПлатежныеДокументы Цикл
			Если Строка.Выгружать = Истина Тогда
				МассивДокументов.Добавить(Строка.Документ);
			КонецЕсли;
		КонецЦикла;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВБанкЗавершение", ЭтотОбъект);
		ЭлектронноеВзаимодействиеКлиентПереопределяемый.ВыполнитьПроверкуПроведенияДокументов(
			МассивДокументов, ОписаниеОповещения, ЭтотОбъект);
		
	Иначе
		
		Если Объект.НачалоПериода = Объект.КонецПериода Тогда
			ТекстПериода = Формат(Объект.НачалоПериода, "ДФ=dd.MM.yyyy");
		Иначе
			ТекстПериода = НСтр("ru = 'период с %1 по %2'");
			ТекстПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПериода,
				Формат(Объект.НачалоПериода, "ДФ=dd.MM.yyyy"), 
				Формат(Объект.КонецПериода, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Отсутствуют платежные поручения за %1
			|по счету %2
			|(%3).
			|
			|Попробуйте изменить период или указать другой банковский счет.'");
			
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			ТекстПериода,
			Объект.БанковскийСчет,
			Объект.Организация);
			
		ПоказатьПредупреждение(, ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтчетПоВыгрузке(Команда)
	
	ПолеОтчета = ПолучитьПротокол();
	ПолеОтчета.Показать(НСтр("ru = 'Отчет о выгруженных платежных документах'"));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПротокол()
	
	ПолеОтчета = Новый ТабличныйДокумент;
	ПолучитьОтчетОВыгрузке(ПолеОтчета);
	ПолеОтчета.ТолькоПросмотр = Истина;
	ПолеОтчета.АвтоМасштаб    = Истина;
	ПолеОтчета.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетПоВыгрузке";
	Возврат ПолеОтчета;
	
КонецФункции

&НаКлиенте
Процедура КомандаОткрытьВыгруженныйФайл(Элемент)
	
	ОбменСБанкомКлиент.ОткрытьФайлДляПросмотра(
		ЭтотОбъект,
		Новый Структура("ТекстРедактирования, Имя", Объект.ФайлВыгрузки, "ФайлВыгрузки"),
		Объект.Кодировка,
		НСтр("ru = 'Файл выгрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыНаЭкспорт(Команда)
	
	ОбновитьСписокДокументовНаЭкспорт();
	
КонецПроцедуры

// Команда устанавливает флажки во всех строках таблицы.
//
&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	ПлатежныеДокументыУстановитьОтметку(Истина);
	
КонецПроцедуры

// Команда снимает флажки во всех строках таблицы.
//
&НаКлиенте
Процедура СнятьОтметкуСоВсех(Команда)
	
	ПлатежныеДокументыУстановитьОтметку(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗагрузки

// Команда считывает данные из текстового файла.
//
&НаКлиенте
Процедура КомандаОбновитьИзВыписки(Команда)
	
	ОбновитьИзВыписки();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗапроситьЭлектроннуюВыпискуБанка(Команда)
	
	ЗапроситьЭлектроннуюВыпискуБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	ЗагрузитьВыпискуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЗагружаемыйФайл(Элемент)
	
	Если ОбработанныйТекст = "" Тогда
    	ПрочитатьЭлектронныеВыпискиБанка();
	КонецЕсли;
	ПараметрыФормыПросмотраФайла = Новый Структура("ТекстФайла, Кодировка", ОбработанныйТекст, Объект.Кодировка);
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаФайла", ПараметрыФормыПросмотраФайла, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтчетПоЗагрузке(Команда)
	
	ПолеОтчета = Новый ТабличныйДокумент;
	ПолучитьОтчетОЗагрузке(ПолеОтчета);
	ПолеОтчета.ТолькоПросмотр = Истина;
	ПолеОтчета.Показать(НСтр("ru = 'Отчет о загруженных документах'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНенайденное(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	АдресХранилищаКонтрагентов = АдресВременногоХранилищаДереваКонтрагентов();
	ПараметрыФормы.Вставить("АдресХранилищаКонтрагентов",              АдресХранилищаКонтрагентов);
	ПараметрыФормы.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка", АдресХранилищаРаспознанныеДанныеИзБанка);
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьНенайденноеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаСозданиеНенайденных", ПараметрыФормы,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДокументыКИмпортуКонтекстноеМенюКнопкаИзменить(Команда)
	
	Если НЕ ЗначениеЗаполнено(ДокументыКИмпорту) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	ДокументыКИмпортуВыбор(Элементы.ДокументыКИмпорту, Элементы.ДокументыКИмпорту.ТекущаяСтрока,
		Элементы.ДокументыКИмпорту.ТекущийЭлемент, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Элементы.ДокументыКИмпорту.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьИПрочитатьФайл(Команда)
	
	ОбновитьИзВыписки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибки(Команда)
	
	Элементы.ДокументыКИмпортуПоказатьОшибки.Пометка = НЕ Элементы.ДокументыКИмпортуПоказатьОшибки.Пометка;
	
	ПоказатьОшибкиИмпорта = Элементы.ДокументыКИмпортуПоказатьОшибки.Пометка;
	ПоказатьОшибкиНаСервере(ПоказатьОшибкиИмпорта);
	
КонецПроцедуры

// Команда устанавливает флажки во всех строках таблицы.
//
&НаКлиенте
Процедура ДокументыКИмпортуОтметитьВсе(Команда)
	
	ДокументыКИмпортуУстановитьОтметку(Истина);
	
КонецПроцедуры

// Команда снимает флажки во всех строках таблицы.
//
&НаКлиенте
Процедура ДокументыКИмпортуСнятьОтметкуСоВсех(Команда)
	
	ДокументыКИмпортуУстановитьОтметку(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОбменСБанкомКлиент.ВыбратьИЗагрузитьФайл(ЭтотОбъект, Объект.Кодировка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеКоманды

&НаКлиенте
Процедура РезультатПроведения(Команда)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		ОткрытьФорму("Отчет.ДвиженияДокумента.Форма", Новый Структура("Документ", ТекущиеДанные.Документ), , Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала = Объект.НачалоПериода;
	Диалог.Период.ДатаОкончания = Объект.КонецПериода;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПериодаЗаполнения", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройка(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", "Организация");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Организация");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",             Объект.Организация);
	ПараметрыФормы.Вставить("БанковскийСчет",          Объект.БанковскийСчет);
	ПараметрыФормы.Вставить("Кодировка",               Объект.Кодировка);
	ПараметрыФормы.Вставить("ВозможностьВыбораФайлов", РасширениеРаботыСФайламиПодключено);
	ПараметрыФормы.Вставить("КешНастроекЗагрузки",     КешНастроекЗагрузки);
	
	ПараметрыФормы.Вставить("Контрагент");
	ПараметрыФормы.Вставить("Договор");
	ПараметрыФормы.Вставить("БанковскийСчетКонтрагента");
	ПараметрыФормы.Вставить("БанковскийСчетОрганизации");
	//ПараметрыФормы.Вставить("Исходящий");
	
	ТекущаяСтрока = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ПараметрыФормы.Контрагент = ТекущаяСтрока.Контрагент;
		ПараметрыФормы.Договор = ТекущаяСтрока.Договор;
		ПараметрыФормы.БанковскийСчетКонтрагента = ТекущаяСтрока.СчетКонтрагента;
		ПараметрыФормы.БанковскийСчетОрганизации = ТекущаяСтрока.БанковскийСчетОрганизации;
		//ПараметрыФормы.Исходящий = ТекущаяСтрока.Исходящий;
	КонецЕсли;
		
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыполнитьНастройкуКлиентБанкаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаНастройкиЗаполнения", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачПериодаЗагрузкиПриИзменении(Элемент)
	
	ПроверитьИзменитьДатуОкончанияЗапросаВыписки();
	
	ОчиститьЭлектронныеВыписки();
	
КонецПроцедуры

&НаКлиенте
Процедура КонПериодаЗагрузкиПриИзменении(Элемент)
	
	ОчиститьЭлектронныеВыписки();
	
КонецПроцедуры

&НаКлиенте
Процедура НачПериодаПриИзменении(Элемент)
	
	ОбновитьСписокДокументовНаЭкспорт();
	
КонецПроцедуры

&НаКлиенте
Процедура КонПериодаПриИзменении(Элемент)
	
	ОбновитьСписокДокументовНаЭкспорт();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Запомним предыдущий путь к файлу
	ТекущийФайлЗагрузки = Объект.ФайлЗагрузки;
	ПриИзмененииОрганизацияСервер();
	
	ОчиститьЭлектронныеВыписки();
	ОбновитьСпискиДокументов();
	
	// Если файл не изменился, проверим возможно ничего перечитывать не требуется
	Если ТекущийФайлЗагрузки = Объект.ФайлЗагрузки Тогда
		Если ЗначениеЗаполнено(Объект.БанковскийСчет) И
			СоответствиеВыпискиОтбору(АдресХранилищаРаспознанныеДанныеИзБанка, Объект.БанковскийСчет).Соответствует Тогда
			
			РазместитьНаФормеРаспознанныеДанныеИзБанка(АдресХранилищаРаспознанныеДанныеИзБанка, Ложь);
			
		КонецЕсли;
	Иначе // Загрузим новый файл
		ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайламиИПрочитатьФайл", 0.1, Истина);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	ПриИзмененииБанковскийСчет();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетЗагрузкаФайлОчистка(Элемент, СтандартнаяОбработка)
	
	ПриИзмененииБанковскийСчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайлаДляВыгрузки(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСБанкомКлиент.ОткрытьФайлДляПросмотра(ЭтотОбъект, Элемент, Объект.Кодировка, НСтр("ru = 'Файл выгрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбменСБанкомКлиент.ВыбратьИЗагрузитьФайл(ЭтотОбъект, Объект.Кодировка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСБанкомКлиент.ОткрытьФайлДляПросмотра(ЭтотОбъект, Элемент, Объект.Кодировка, НСтр("ru = 'Файл загрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Текст) Тогда
		Объект.ФайлЗагрузки = СокрЛП(Текст);
		ОбновитьСпискиДокументов();
		ОбменСБанкомКлиент.ЗагрузитьВыбранныйФайл(Объект.ФайлЗагрузки, ЭтотОбъект, Объект.Кодировка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяВыпискаБанкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыпискиБанка.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВыпискиБанка", ВыпискиБанка);
		ПараметрыФормы.Вставить("НачалоПериода", Объект.НачалоПериода);
		ПараметрыФормы.Вставить("КонецПериода", Объект.КонецПериода);
		ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаСпискаВыписок", ПараметрыФормы);
		
	ИначеЕсли ВыпискиБанка.Количество() = 1 Тогда
		
		ПараметрыФормы = Новый Структура("СообщениеОбмена", ВыпискиБанка[0].Значение);
		ОбменСБанкамиКлиент.ОткрытьФормуПросмотраЭлектронногоДокумента(ВыпискиБанка[0].Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		ОбновитьСписокДокументовНаЭкспорт();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатуснаяСтрокаОшибкиПриВыгрузке2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "e1cib/app/Документ.ПлатежноеПоручение.Форма.ФормаПроверкиПлатежныхРеквизитов" Тогда
		
		ТекущиеДанные = Элементы.ПлатежныеДокументы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ПлатежныеРеквизиты = Новый Структура();
			ПлатежныеРеквизиты.Вставить("ИНН", ТекущиеДанные.КонтрагентИНН);
			ПлатежныеРеквизиты.Вставить("КПП", ТекущиеДанные.КонтрагентКПП);
			ПлатежныеРеквизиты.Вставить("ПолучательПлатежа", ТекущиеДанные.ТекстПолучателя);
			ПлатежныеРеквизиты.Вставить("РасчетныйСчет",     ТекущиеДанные.КонтрагентНомерСчета);
			ПлатежныеРеквизиты.Вставить("БИК",               ТекущиеДанные.КонтрагентБИКБанка);
			ПлатежныеРеквизиты.Вставить("КоррСчет",          СокрЛП(ТекущиеДанные.КонтрагентРасчСчет));
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ПлатежныеРеквизиты", ПлатежныеРеквизиты);
			ПараметрыФормы.Вставить("БанковскийСчет",     ТекущиеДанные.КонтрагентСчет);
			ОписаниеОповещения = Новый ОписаниеОповещения("ИсправитьСчетаКонтрагентовЗавершение", ЭтотОбъект);
			ОткрытьФорму("Документ.ПлатежноеПоручение.Форма.ФормаПроверкиПлатежныхРеквизитов",
				ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстРекламыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПодключитьДиректБанк" Тогда
		СтандартнаяОбработка = Ложь;
		ОбменСБанкамиКлиент.ОткрытьСоздатьНастройкуОбмена(Объект.Организация, Банк, НомерСчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСкрытьРекламуДиректБанкНажатие(Элемент)
	
	ЭлектронноеВзаимодействиеБПВызовСервера.СохранитьНастройкуВидимостиРекламыДиректБанк(Банк, Ложь);
	ВидимостьЭлементовДиректБанк = "ПоказатьГиперссылку";
	ПоказатьЭлементыДиректБанк(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьДиректБанкНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСБанкамиКлиент.ОткрытьСоздатьНастройкуОбмена(Объект.Организация, Банк, НомерСчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияОСтаройВерсииКлиентБанкаЗакрытьНажатие(Элемент)
	
	Элементы.ГруппаИнформацияОСтаройВерсииКлиентБанка.Видимость = Ложь;
	ПоказыватьИнформациюОСтаройВерсииКлиентБанка = Ложь;
	СохранитьНастройкуПоказыватьИнформациюОСтаройВерсииКлиентБанка();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуПоказыватьИнформациюОСтаройВерсииКлиентБанка()

	ИмяКлючаОбъекта = "Обработка.КлиентБанк.Форма.ОсновнаяФорма";
	ХранилищеСистемныхНастроек.Сохранить(ИмяКлючаОбъекта,
		ИмяКлючаОбъекта + "_" + "ПоказыватьИнформациюОСтаройВерсииКлиентБанка",
			ПоказыватьИнформациюОСтаройВерсииКлиентБанка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПлатежныеДокументы

&НаКлиенте
Процедура ПлатежныеДокументыПриАктивизацииСтроки(Элемент)
	
	Если НЕ ЕстьСтрокиЭкспортаСОшибками Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПлатежныеДокументыПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежныеДокументыПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.ПлатежныеДокументы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если СтрНайти(ТекущиеДанные.ОписаниеОшибок, "НеВерноУказаныПлатежныеРеквизиты") <> 0 Тогда
			СтатуснаяСтрокаОшибкиПриВыгрузке = РезультатПроверкиСчетаКонтрагентаОшибка();
		ИначеЕсли СтрНайти(ТекущиеДанные.ОписаниеОшибок, "РекомендуетсяОбновитьРеквизиты") <> 0 Тогда
			СтатуснаяСтрокаОшибкиПриВыгрузке = РезультатПроверкиСчетаКонтрагентаРекомендация();
		ИначеЕсли ТекущиеДанные.Готовность = 0 Тогда
			СтатуснаяСтрокаОшибкиПриВыгрузке = Новый ФорматированнаяСтрока(ТекущиеДанные.ОписаниеОшибок);
		Иначе
			СтатуснаяСтрокаОшибкиПриВыгрузке = Новый ФорматированнаяСтрока(ТекущиеДанные.ОписаниеОшибок, , ЦветОшибки);
		КонецЕсли;
		Элементы.ГруппаСообщенияОбОшибкеПриВыгрузкеСтраницы.ТекущаяСтраница = ?(ТекущиеДанные.Готовность = 0,
			Элементы.ГруппаСтраницаСтатусНетОшибки, Элементы.ГруппаСтраницаСтатусЕстьОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "ПлатежныеДокументыОписаниеОшибок" Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Ошибки в документе'"),
			ПолучитьНавигационнуюСсылку(Элемент.ТекущиеДанные.Документ),
			Элемент.ТекущиеДанные.ОписаниеОшибок);
	ИначеЕсли Поле.Имя = "ПлатежныеДокументыНазначениеПлатежа" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Заголовок", НСтр("ru = 'Назначение платежа'"));
		ПараметрыСообщения.Вставить("Сообщение", Элемент.ТекущиеДанные.НазначениеПлатежа);
		Если Элемент.ТекущиеДанные.Документ <> Неопределено Тогда
			ПараметрыСообщения.Вставить("ГиперссылкаТекст",
				ОбщегоНазначенияУНФВызовСервера.СформироватьЗаголовокДокумента(Элемент.ТекущиеДанные.Документ));
			ПараметрыСообщения.Вставить("ГиперссылкаНавигация", ПолучитьНавигационнуюСсылку(Элемент.ТекущиеДанные.Документ));
		КонецЕсли;
		
		ОбщегоНазначенияУНФКлиент.ПоказатьСообщениеВФорме(ПараметрыСообщения);
		
	Иначе
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РезультатПроверкиСчетаКонтрагентаОшибка()
	
	Подстроки = Новый Массив;
	
	Подстроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Возможно, платежные реквизиты уплаты налога указаны неверно'"),
		, ЦветОшибки));
	Подстроки.Добавить("  ");
	Подстроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Исправить'")
		,,,, "e1cib/app/Документ.ПлатежноеПоручение.Форма.ФормаПроверкиПлатежныхРеквизитов"));
	
	Возврат Новый ФорматированнаяСтрока(Подстроки);
	
КонецФункции

&НаКлиенте
Функция РезультатПроверкиСчетаКонтрагентаРекомендация()
	
	Подстроки = Новый Массив;
	
	Подстроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'С 01.01.21 рекомендуются новые платежные реквизиты для уплаты налога'"),
		, ЦветОшибки));
	Подстроки.Добавить("  ");
	Подстроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Исправить'")
		,,,, "e1cib/app/Документ.ПлатежноеПоручение.Форма.ФормаПроверкиПлатежныхРеквизитов"));
	
	Возврат Новый ФорматированнаяСтрока(Подстроки);
	
КонецФункции

&НаКлиенте
Процедура ПлатежныеДокументыВыгружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПлатежныеДокументы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Знак = ?(ТекущиеДанные.Выгружать, 1, -1);
	
	КоличествоКВыгрузке     = КоличествоКВыгрузке     + 1 * Знак;
	СуммаДокументаКВыгрузке = СуммаДокументаКВыгрузке + ТекущиеДанные.СуммаДокумента * Знак;
	
КонецПроцедуры

// Функция проверяет наличие в строке только цифр.
//
// Параметры
//  СтрокаПроверки - Строка для проверки только цифр
//
// Возвращаемое значение:
//   Булево
//
&НаКлиенте
Функция ЕстьНеЦифрыНаКлиенте(Знач СтрокаПроверки)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	Для Сч = 1 По Длина Цикл
		Если СтрНайти("0123456789", Сред(СтрокаПроверки, Сч, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ЕстьНеЦифры()

&НаКлиенте
Функция ПодготовитьОднуСтрокуТекстаПредупреждения(ОписаниеОшибок, ПоказыватьЗнакПредупреждения, ДанныеСтроки, ТолькоИнформацияОДублях = Неопределено)
	
	ПодготовленноеОписаниеОшибок = ОписаниеОшибок;
	
	// 1. Определим, что делать с контрагентом.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Не найден контрагент'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + 
			?(ДанныеСтроки.ДействиеСКонтрагентом.Пустая(), НСтр("ru = ' Будет создан новый при загрузке в 1С.'"), " "+ДанныеСтроки.ДействиеСКонтрагентом+".");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.КонтрагентНеНайденКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 2. Определим, что делать со счетом контрагента.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Не найден счет'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + 
			?(ДанныеСтроки.ДействиеСоСчетомКонтрагента.Пустая(), НСтр("ru = ' Будет создан новый при загрузке в 1С.'"), " "+ДанныеСтроки.ДействиеСоСчетомКонтрагента+".");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.СчетКонтрагентаНеНайденКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 3. Определим, что делать с договором.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Не найден договор'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ?(ДанныеСтроки.ДействиеСоСчетомКонтрагента.Пустая(), 
			НСтр("ru = 'Не найден основной договор. Будет создан новый при загрузке в 1С и установлен основным.'"), 
			НСтр("ru = 'Не найден договор контрагента. '")+ДанныеСтроки.ДействиеСоСчетомКонтрагента+".");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.ДоговорНеНайденКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 4. Определим, что делать с видом операции.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Проверьте операцию'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' В назначении не найдены данные о счете, накладной или заказе.'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.ВидОперацииНеНайденКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 5.1. Определим, что делать с суммой.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Укажите сумму вручную'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' Сумма в файле содержит недопустимые символы.'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.НеВерныйФорматСуммыКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	// 5.2. Определим, что делать с суммой.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Сумма не указана'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' В файле из банка не указана сумма операции.'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.НеВерныйФорматСуммыКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 6. Определим, что делать с дублями документов.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'соответствующих документов'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' Дубли документов будут помечены на удаление!!!'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.НесколькоДокументовКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = (ТолькоИнформацияОДублях = Неопределено ИЛИ ТолькоИнформацияОДублях = Истина);
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 7. Определим, что делать, если есть контрагенты с одинаковым ИНН.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'контрагентов с одинаковым ИНН!'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' Проверьте контрагента!'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.НесколькоДокументовКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = (ТолькоИнформацияОДублях = Неопределено ИЛИ ТолькоИнформацияОДублях = Истина);
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 8. Определим, что делать, если банковские счета с одинаковым номером.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'одинаковых банковских счетов!'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' Проверьте контрагента и его банковский счет!'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = Истина;
		КонецЕсли;
		
		ТолькоИнформацияОДублях = (ТолькоИнформацияОДублях = Неопределено ИЛИ ТолькоИнформацияОДублях = Истина);
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	ПоказыватьЗнакПредупреждения = Истина;
	
	Возврат ПодготовленноеОписаниеОшибок;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьТекстПредупреждения(ДанныеСтроки, ПоказыватьЗнакПредупреждения = Ложь)
	
	ТолькоИнформацияОДублях = Неопределено;
	
	ПодготовленноеОписаниеОшибок = НСтр("ru = 'В текущей строке: '")+ Символы.ПС + Символы.ПС;
	
	Если НЕ ДанныеСтроки.Загружать Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = '<Флаг загрузки снят. Строка не будет загружена>'") + Символы.ПС + Символы.ПС;
	КонецЕсли;
	
	ОписаниеОшибок = ДанныеСтроки.ОписаниеОшибок;
	
	// 1. Определим, что делать с контрагентом.
	ОбрабатываемыйТекст = ОписаниеОшибок;
	
	ТекС = СтрНайти(ОбрабатываемыйТекст, Символы.ПС);
	Пока ТекС > 0 Цикл
		ОбрабатываемаяСтрока = Лев(ОбрабатываемыйТекст, ТекС - 1);
		ОбрабатываемыйТекст = Сред(ОбрабатываемыйТекст, ТекС + 1);
		
		ОбрабатываемаяСтрока = ПодготовитьОднуСтрокуТекстаПредупреждения(ОбрабатываемаяСтрока, ПоказыватьЗнакПредупреждения, ДанныеСтроки, ТолькоИнформацияОДублях);
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + ОбрабатываемаяСтрока + Символы.ПС + Символы.ПС;
		
		ТекС = СтрНайти(ОбрабатываемыйТекст, Символы.ПС);
	КонецЦикла;
	
	Если Не ПустаяСтрока(ОбрабатываемыйТекст) Тогда
		ОбрабатываемаяСтрока = ПодготовитьОднуСтрокуТекстаПредупреждения(ОбрабатываемыйТекст, ПоказыватьЗнакПредупреждения, ДанныеСтроки, ТолькоИнформацияОДублях);
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + ОбрабатываемаяСтрока + Символы.ПС;
	КонецЕсли;
	
	Если ТолькоИнформацияОДублях = Истина Тогда
		ПоказыватьЗнакПредупреждения = Ложь;
	КонецЕсли;
	
	Возврат ПодготовленноеОписаниеОшибок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДанныхРасчетногоСчета(СтрокаДокумента, БанковскийСчет)
	
	СтруктураДанныхСтроки = Новый Структура;
	
	ТипКонтрагента = ?(СтрокаДокумента.Исходящий, "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	
	СтруктураДанныхСтроки.Вставить("СЧЕТ", СтрокаДокумента[ТипКонтрагента + "СЧЕТ"]);
	
	ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ТипКонтрагента + "2"]);
	СтруктураДанныхСтроки.Вставить("ПрямыеРасчеты", ПрямыеРасчеты);
	
	Если ПрямыеРасчеты Тогда
		
		СтруктураДанныхСтроки.Вставить("Банк", СтрокаДокумента[ТипКонтрагента + "БАНК1"]);
		СтруктураДанныхСтроки.Вставить("Город", СтрокаДокумента[ТипКонтрагента + "БАНК2"]);
		СтруктураДанныхСтроки.Вставить("БИК", СтрокаДокумента[ТипКонтрагента + "БИК"]);
		СтруктураДанныхСтроки.Вставить("КоррСчет", СтрокаДокумента[ТипКонтрагента + "КОРСЧЕТ"]);
		
	Иначе
		
		СтруктураДанныхСтроки.Вставить("Банк", СтрокаДокумента[ТипКонтрагента + "3"]);
		СтруктураДанныхСтроки.Вставить("Город", СтрокаДокумента[ТипКонтрагента + "4"]);
		СтруктураДанныхСтроки.Вставить("БИК", ""); // В менеджере будем банк искать по корр. счету.
		СтруктураДанныхСтроки.Вставить("КоррСчет", СтрокаДокумента[ТипКонтрагента + "РАСЧСЧЕТ"]);
		
		СтруктураДанныхСтроки.Вставить("БанкРасчетов", СтрокаДокумента[ТипКонтрагента + "БАНК1"]);
		СтруктураДанныхСтроки.Вставить("ГородРасчетов", СтрокаДокумента[ТипКонтрагента + "БАНК2"]);
		СтруктураДанныхСтроки.Вставить("БИКРасчетов",  СтрокаДокумента[ТипКонтрагента + "БИК"]);
		СтруктураДанныхСтроки.Вставить("КоррСчетРасчетов", СтрокаДокумента[ТипКонтрагента + "КОРСЧЕТ"]);
		
	КонецЕсли;
	
	СтруктураДанныхСтроки.Вставить("БанковскийСчет", Объект.БанковскийСчет);
	СтруктураДанныхСтроки.Вставить("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
	СтруктураДанныхСтроки.Вставить("СчетБИК", ?(СтрокаДокумента.Исходящий, СтрокаДокумента.ПолучательБИК, СтрокаДокумента.ПлательщикБИК));
	
	Возврат СтруктураДанныхСтроки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДанныхДоговора(СтрокаДокумента)
	
	СтруктураДанныхСтроки = Новый Структура;
	
	СтруктураДанныхСтроки.Вставить("ДоговорНомер", СтрокаДокумента.ДоговорНомер);
	СтруктураДанныхСтроки.Вставить("ДоговорДата", СтрокаДокумента.ДоговорДата);
	СтруктураДанныхСтроки.Вставить("ДоговорВалютаРасчетов", СтрокаДокумента.ДоговорВалютаРасчетов);
	СтруктураДанныхСтроки.Вставить("ДоговорРасчетыВУсловныхЕдиницах", СтрокаДокумента.ДоговорРасчетыВУсловныхЕдиницах);
	СтруктураДанныхСтроки.Вставить("ДоговорНаименованиеЛеваяЧасть", СтрокаДокумента.ДоговорНаименованиеЛеваяЧасть);
	СтруктураДанныхСтроки.Вставить("Договор", СтрокаДокумента.Договор);
	СтруктураДанныхСтроки.Вставить("ДатаДок", СтрокаДокумента.ДатаДок);
	
	Возврат СтруктураДанныхСтроки;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияКонтрагентов(ДанныеСтроки, ИмяЗакладкиНаФорме)
	
	ИНН = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательИНН, ДанныеСтроки.ПлательщикИНН);
	КПП = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательКПП, ДанныеСтроки.ПлательщикКПП);
	Счет = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательСчет, ДанныеСтроки.ПлательщикСчет);
	Если ДанныеСтроки.Исходящий Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.Получатель1) Тогда
			Наименование = ДанныеСтроки.Получатель1;
		Иначе
			Наименование = ДанныеСтроки.Получатель;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДанныеСтроки.Плательщик1) Тогда
			Наименование = ДанныеСтроки.Плательщик1;
		Иначе
			Наименование = ДанныеСтроки.Плательщик;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДанныхРасчетногоСчета = ПолучитьСтруктуруДанныхРасчетногоСчета(ДанныеСтроки, Объект.БанковскийСчет);
	СтруктураДанныхДоговора = ПолучитьСтруктуруДанныхДоговора(ДанныеСтроки);
	
	оп = Новый ОписаниеОповещения("ОповещениеРедактированиеКонтрагента", ЭтотОбъект, Новый Структура("ДанныеСтроки", ДанныеСтроки));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураДанныхРасчетногоСчета", СтруктураДанныхРасчетногоСчета);
	СтруктураПараметров.Вставить("СтруктураДанныхДоговора", СтруктураДанныхДоговора);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент", ДанныеСтроки.Контрагент);
	СтруктураПараметров.Вставить("Договор", ДанныеСтроки.Договор);
	СтруктураПараметров.Вставить("Наименование", Наименование);
	СтруктураПараметров.Вставить("ИНН", ИНН);
	СтруктураПараметров.Вставить("КПП", КПП);
	СтруктураПараметров.Вставить("НаименованиеПолное", Наименование);
	
	СтруктураПараметров.Вставить("КоличествоСтрокКонтрагента", 0);
	
	СтруктураПараметров.Вставить("ДеньгиОтКонтрагентаПоступили", ДанныеСтроки.СуммаПоступило <> 0);
	СтруктураПараметров.Вставить("ДействиеСКонтрагентом", ДанныеСтроки.ДействиеСКонтрагентом);
	СтруктураПараметров.Вставить("ДействиеСоСчетомКонтрагента", ДанныеСтроки.ДействиеСоСчетомКонтрагента);
	СтруктураПараметров.Вставить("ДействиеСДоговором", ДанныеСтроки.ДействиеСДоговором);
	СтруктураПараметров.Вставить("ИмяЗакладкиНаФорме", ИмяЗакладкиНаФорме);
	СтруктураПараметров.Вставить("ДатаДок", ДанныеСтроки.ДатаДок);
	СтруктураПараметров.Вставить("ВидОперации", ДанныеСтроки.ВидОперации);
	СтруктураПараметров.Вставить("СтатьяДДС", ДанныеСтроки.СтатьяДДС);
	СтруктураПараметров.Вставить("Корреспонденция", ДанныеСтроки.Корреспонденция);
	СтруктураПараметров.Вставить("НазначениеПлатежа", ДанныеСтроки.НазначениеПлатежа);
	СтруктураПараметров.Вставить("Исходящий", ДанныеСтроки.Исходящий);
	НеВерныйФорматСуммы = ЕстьНеЦифрыНаКлиенте(СтрЗаменить(СтрЗаменить(СтрЗаменить(ДанныеСтроки.Сумма, ".", ""), "-", ""), ",", ""));
	СтруктураПараметров.Вставить("НеВерныйФорматСуммы", НеВерныйФорматСуммы);
	СтруктураПараметров.Вставить("Сумма", ДанныеСтроки.Сумма);
	СтруктураПараметров.Вставить("СуммаДокумента", ДанныеСтроки.СуммаДокумента);
	// Картинки (
	СтруктураПараметров.Вставить("НеВерныйФорматСуммыКартинка", ДанныеСтроки.НеВерныйФорматСуммыКартинка);
	СтруктураПараметров.Вставить("ВидОперацииНеНайденКартинка", ДанныеСтроки.ВидОперацииНеНайденКартинка);
	СтруктураПараметров.Вставить("НесколькоДокументовКартинка", ДанныеСтроки.НесколькоДокументовКартинка);
	СтруктураПараметров.Вставить("КонтрагентНеНайденКартинка", ДанныеСтроки.КонтрагентНеНайденКартинка);
	СтруктураПараметров.Вставить("СчетКонтрагентаНеНайденКартинка", ДанныеСтроки.СчетКонтрагентаНеНайденКартинка);
	СтруктураПараметров.Вставить("ДоговорНеНайденКартинка", ДанныеСтроки.ДоговорНеНайденКартинка);
	// )
	// Найдено несколько документов (
	СтруктураПараметров.Вставить("ТаблицаДокументов", Неопределено);
	СтруктураПараметров.Вставить("ЕстьНесколькоДокументов", ?(СтрНайти(ДанныеСтроки.ДокументНайден, НСтр("ru = 'И еще'")) > 0 ИЛИ ДанныеСтроки.НесколькоДокументовКартинка = 0, Истина, Ложь));
	СтруктураПараметров.Вставить("Документ", ДанныеСтроки.Документ);
	Если Не ПустаяСтрока(ДанныеСтроки.ОписаниеОшибок) Тогда
		СтруктураПараметров.Вставить("ОписаниеОшибок", ПодготовитьТекстПредупреждения(ДанныеСтроки));
		Если ДанныеСтроки.НомерКартинки = -1 Тогда
			СтруктураПараметров.Вставить("СтраницаОшибокТекущая", Истина);
		КонецЕсли;
	КонецЕсли;
	// )
	СтруктураПараметров.Вставить("СтатьяДДСВходящий", Объект.СтатьяДДСВходящий);
	СтруктураПараметров.Вставить("СтатьяДДСИсходящий", Объект.СтатьяДДСИсходящий);
	// Налог
	СтруктураПараметров.Вставить("ВидНалога", ДанныеСтроки.ВидНалога);
	СтруктураПараметров.Вставить("СрокУплаты", ДанныеСтроки.СрокУплаты);
	
	СтруктураПараметров.Вставить("ВидОперации", ДанныеСтроки.ВидОперации);
	
	ОткрытьФорму(
		"Обработка.КлиентБанк.Форма.РедактированиеКонтрагентаДоговора",
		СтруктураПараметров,
		,
		,
		,
		,
		оп,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя <> "ПлатежныеДокументыВыгружать" И Элемент.Имя <> "ПлатежныеДокументы" Тогда
		Отказ = Истина;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРедактированиеКонтрагента(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Параметры.ДанныеСтроки;
	
	КонтрагентПередИзменением = ДанныеСтроки.Контрагент;
	ДоговорПередИзменением = ДанныеСтроки.Договор;
	ВидОперацииПередИзменением = ДанныеСтроки.ВидОперации;
	
	// Контрагент, договор и р/счет.
	Если (ТипЗнч(Результат.Контрагент) = Тип("СправочникСсылка.Контрагенты")) И ЗначениеЗаполнено(Результат.Контрагент) Тогда
		
		ДанныеСтроки.КонтрагентНеНайденКартинка = -1;
		ДанныеСтроки.СчетКонтрагентаНеНайденКартинка = -1;
		ДанныеСтроки.ДоговорНеНайденКартинка = -1;
		
		ДанныеСтроки.ДействиеСконтрагентом = Результат.ДействиеСконтрагентом;
		ДанныеСтроки.ДействиеСоСчетомКонтрагента = Результат.ДействиеСоСчетомКонтрагента;
		ДанныеСтроки.ДействиеСДоговором = Результат.ДействиеСДоговором;
		
		ДанныеСтроки.Контрагент = Результат.Контрагент;
		ДанныеСтроки.КонтрагентНайден = Истина;
		Если Результат.ДействиеСконтрагентом = ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С") Тогда
			ДанныеСтроки.Контрагент = ДанныеСтроки.КонтрагентИсходный;
		ИначеЕсли Результат.ДействиеСконтрагентом = ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента") Тогда
			ДанныеСтроки.Контрагент = ДанныеСтроки.КонтрагентИсходный;
		КонецЕсли;
		
		ОбновитьДанныеВСтрокеДокументыКИмпорту("Контрагент");
			
		// Р/счет.
		Если ЗначениеЗаполнено(Результат.БанковскийСчетПоУмолчанию) Тогда
			ДанныеСтроки.СчетКонтрагента = Результат.БанковскийСчетПоУмолчанию;
			ОбновитьДанныеВСтрокеДокументыКИмпорту("Договор");
		КонецЕсли;
		
		// Договор.
		Если ЗначениеЗаполнено(Результат.Договор) Тогда
			ДанныеСтроки.Договор = Результат.Договор;
			ОбновитьДанныеВСтрокеДокументыКИмпорту("Договор");
		КонецЕсли;
		
		// Обработаем строки, где контрагент с таким же ИНН
		Если Результат.ПрименятьДляВсехСтрок Тогда // применяется для всех строк
			ИНН = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательИНН, ДанныеСтроки.ПлательщикИНН);
			Счет = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательСчет, ДанныеСтроки.ПлательщикСчет);
			
			Для Каждого Строка Из Объект.Загрузка Цикл
				Если ДанныеСтроки <> Строка И ИНН = ?(Строка.Исходящий, Строка.ПолучательИНН, Строка.ПлательщикИНН) И
					Счет = ?(Строка.Исходящий, Строка.ПолучательСчет, Строка.ПлательщикСчет) Тогда
					
					Строка.ДействиеСконтрагентом = Результат.ДействиеСконтрагентом;
					Строка.ДействиеСоСчетомКонтрагента = Результат.ДействиеСоСчетомКонтрагента;
					Строка.ДействиеСДоговором = Результат.ДействиеСДоговором;
					
					Строка.КонтрагентНеНайденКартинка = -1;
					Строка.СчетКонтрагентаНеНайденКартинка = -1;
					Строка.ДоговорНеНайденКартинка = -1;
					
					Строка.Контрагент = ДанныеСтроки.Контрагент;
					Строка.КонтрагентНайден = Истина;
					
					// Договор.
					Если ЗначениеЗаполнено(Результат.Договор) Тогда
						Строка.Договор = Результат.Договор;
					КонецЕсли;
					
					// Р/счет.
					Если ЗначениеЗаполнено(Результат.БанковскийСчетПоУмолчанию) Тогда
						Строка.СчетКонтрагента = Результат.БанковскийСчетПоУмолчанию;
					КонецЕсли;
					
					// Операция, Статья ДДС и Корреспонденция
					Если Строка.Исходящий = ДанныеСтроки.Исходящий Тогда
						Если ЗначениеЗаполнено(Результат.ВидОперации) Тогда
							УстановитьВидОперации(Строка, Результат.ВидОперации);
						КонецЕсли;
						Если ЗначениеЗаполнено(Результат.СтатьяДДС) Тогда
							Строка.СтатьяДДС = Результат.СтатьяДДС;
						КонецЕсли;
						Если ЗначениеЗаполнено(Результат.Корреспонденция) Тогда
							Строка.Корреспонденция = Результат.Корреспонденция;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		
		ДанныеСтроки.ДействиеСконтрагентом = Результат.ДействиеСконтрагентом;
		ДанныеСтроки.ДействиеСоСчетомКонтрагента = Результат.ДействиеСоСчетомКонтрагента;
		ДанныеСтроки.ДействиеСДоговором = Результат.ДействиеСДоговором;
		
		ДанныеСтроки.КонтрагентНеНайденКартинка = -1;
		ДанныеСтроки.СчетКонтрагентаНеНайденКартинка = -1;
		ДанныеСтроки.ДоговорНеНайденКартинка = -1;
		
		// Р/счет.
		Если Результат.ЭтоПеремещение Тогда
			Если НЕ Результат.ЭтоПеремещениеНуженВыборКассы Тогда
				ДанныеСтроки.СчетКонтрагента = Результат.БанковскийСчетПоУмолчанию;
				ДанныеСтроки.Касса = Неопределено;
			Иначе
				ДанныеСтроки.СчетКонтрагента = Неопределено;
				ДанныеСтроки.Касса = Результат.Касса;
			КонецЕсли;
			
			НеСоздаватьНовогоКонтрагента = ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента");
			ДанныеСтроки.ДействиеСконтрагентом = НеСоздаватьНовогоКонтрагента;
			ДанныеСтроки.ДействиеСоСчетомКонтрагента = НеСоздаватьНовогоКонтрагента;
			ДанныеСтроки.ДействиеСДоговором = НеСоздаватьНовогоКонтрагента;
		КонецЕсли;
		
		// Обработаем строки, где контрагент с таким же ИНН
		Если Результат.ПрименятьДляВсехСтрок Тогда // применяется для всех строк
			ИНН          = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательИНН, ДанныеСтроки.ПлательщикИНН);
			Счет = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательСчет, ДанныеСтроки.ПлательщикСчет);
			
			Для Каждого Строка Из Объект.Загрузка Цикл
				Если ДанныеСтроки <> Строка И ИНН = ?(Строка.Исходящий, Строка.ПолучательИНН, Строка.ПлательщикИНН) И
					Счет = ?(Строка.Исходящий, Строка.ПолучательСчет, Строка.ПлательщикСчет) Тогда
					
					Строка.КонтрагентНеНайденКартинка = -1;
					Строка.СчетКонтрагентаНеНайденКартинка = -1;
					Строка.ДоговорНеНайденКартинка = -1;
					
					Строка.ДействиеСконтрагентом = Результат.ДействиеСконтрагентом;
					Строка.ДействиеСоСчетомКонтрагента = Результат.ДействиеСоСчетомКонтрагента;
					Строка.ДействиеСДоговором = Результат.ДействиеСДоговором;
					
					// Р/счет.
					Если Результат.ЭтоПеремещение Тогда
						Если НЕ Результат.ЭтоПеремещениеНуженВыборКассы Тогда
							ДанныеСтроки.СчетКонтрагента = Результат.БанковскийСчетПоУмолчанию;
							ДанныеСтроки.Касса = Неопределено;
						Иначе
							ДанныеСтроки.СчетКонтрагента = Неопределено;
							ДанныеСтроки.Касса = Результат.Касса;
						КонецЕсли;
						
						НеСоздаватьНовогоКонтрагента = ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента");
						ДанныеСтроки.ДействиеСконтрагентом = НеСоздаватьНовогоКонтрагента;
						ДанныеСтроки.ДействиеСоСчетомКонтрагента = НеСоздаватьНовогоКонтрагента;
						ДанныеСтроки.ДействиеСДоговором = НеСоздаватьНовогоКонтрагента;
					КонецЕсли;
					
					// Операция, Статья ДДС и Корреспонденция
					Если Строка.Исходящий = ДанныеСтроки.Исходящий Тогда
						Если ЗначениеЗаполнено(Результат.ВидОперации) Тогда
							УстановитьВидОперации(Строка, Результат.ВидОперации);
						КонецЕсли;
						Если ЗначениеЗаполнено(Результат.СтатьяДДС) Тогда
							Строка.СтатьяДДС = Результат.СтатьяДДС;
						КонецЕсли;
						Если ЗначениеЗаполнено(Результат.Корреспонденция) Тогда
							Строка.Корреспонденция = Результат.Корреспонденция;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

	// Сумма документа.
	Если Результат.Свойство("СуммаДокумента") Тогда
		Если Результат.СуммаДокумента > 0 Тогда
			ДанныеСтроки.СуммаДокумента = Результат.СуммаДокумента;
			ПриИзмененииСуммыДокумента(ДанныеСтроки);
		КонецЕсли;
	КонецЕсли;
	
	// Вид операции.
	Если ДанныеСтроки.ВидОперации <> Результат.ВидОперации ИЛИ ДанныеСтроки.ВидОперацииНеНайденКартинка = 0 Тогда
		УстановитьВидОперации(ДанныеСтроки, Результат.ВидОперации);
	КонецЕсли;
	ДанныеСтроки.ВидНалога = Результат.ВидНалога;
	ДанныеСтроки.СрокУплаты = Результат.СрокУплаты;
	
	// Документы.
	Если ДанныеСтроки.НесколькоДокументовКартинка = 0 Тогда
		ДанныеСтроки.НесколькоДокументовКартинка = -1;
	КонецЕсли;
	
	// Статья ДДС и Корреспонденция.
	ДанныеСтроки.СтатьяДДС = Результат.СтатьяДДС;
	ДанныеСтроки.Корреспонденция = Результат.Корреспонденция;
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	ПоказыватьЗнакПредупреждения = Ложь;
	
	// СпособЗачета
	Если КонтрагентПередИзменением <> ДанныеСтроки.Контрагент
		Или ДоговорПередИзменением <> ДанныеСтроки.Договор
		Или ВидОперацииПередИзменением <> ДанныеСтроки.ВидОперации Тогда
		
		Если КонтрагентПередИзменением <> ДанныеСтроки.Контрагент Тогда
			ОчиститьИнформациюОДокументахНаКлиенте(ДанныеСтроки);
		ИначеЕсли ДоговорПередИзменением <> ДанныеСтроки.Договор Тогда
			ДанныеСтроки.Заказ = Неопределено;
			ДанныеСтроки.СчетНаОплату = Неопределено;
			Если ЗначениеЗаполнено(ДанныеСтроки.ДокументРасчетов) И НужноОчищатьДокументРасчетов(ДанныеСтроки.ДокументРасчетов, ДанныеСтроки.Договор) Тогда
				ДанныеСтроки.ДокументРасчетов = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтроки.ПлатежноеПоручение) И НужноОчищатьДокументРасчетов(ДанныеСтроки.ПлатежноеПоручение, ДанныеСтроки.Договор) Тогда
				ДанныеСтроки.ПлатежноеПоручение = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьСпособЗачетаНаКлиенте(ДанныеСтроки);
		
	КонецЕсли;

	ОбновитьДанныеВСтрокеДокументыКИмпорту("ВидНалога");
	ОбновитьДанныеВСтрокеДокументыКИмпорту("ВидОперации");
	ОбновитьДанныеВСтрокеДокументыКИмпорту("Корреспонденция");
	ОбновитьДанныеВСтрокеДокументыКИмпорту("СтатьяДДС");
	//ОбновитьДанныеВСтрокеДокументыКИмпорту("СрокУплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидОперации(ДанныеСтроки, ВыбранноеЗначение)

	ВидОперацииПредыдущееЗначение = ДанныеСтроки.ВидОперации;
	
	ДанныеСтроки.ВидОперации = ВыбранноеЗначение;
	Если ДанныеСтроки.Исходящий Тогда
		ДанныеСтроки.ВидОперацииСписание = ВыбранноеЗначение;
	Иначе
		ДанныеСтроки.ВидОперацииПоступление = ВыбранноеЗначение;
	КонецЕсли;
	Если ДанныеСтроки.ВидОперацииНеНайденКартинка = 0 Тогда
		ДанныеСтроки.ВидОперацииНеНайденКартинка = -1;
	КонецЕсли;
	ДанныеСтроки.СтатьяДДС = ПолучитьСтатьюДДСПоВидуОперацииПриИзменении(ВыбранноеЗначение, ДанныеСтроки.СтатьяДДС);
	//ДанныеСтроки.ОписаниеОшибокПодТЧ = УдалитьДанныеИзОписанияОшибкиНаКлиенте(НСтр("ru = 'Проверьте операцию'"), ДанныеСтроки.ОписаниеОшибокПодТЧ, ДанныеСтроки);
	//ПоменятьСимволПСНаПробел(ДанныеСтроки.ОписаниеОшибокПодТЧ);
	
	Если ДанныеСтроки.ВидОперации = ВидОперацииПереводНаДругойСчет ИЛИ ДанныеСтроки.ВидОперации = ВидОперацииПереводСДругогоСчета Тогда
		
		Если НЕ (ВидОперацииПредыдущееЗначение = ВидОперацииПереводНаДругойСчет ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииПереводСДругогоСчета
			ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииСписаниеНаличных ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииВзносНаличных) Тогда
			ДанныеСтроки.СчетКонтрагентаИсходный = ДанныеСтроки.СчетКонтрагента;
		КонецЕсли;
		
		ЗаполнитьСчетОрганизации(ДанныеСтроки.ПолучитьИдентификатор());
		
	ИначеЕсли ДанныеСтроки.ВидОперации = ВидОперацииСписаниеНаличных ИЛИ ДанныеСтроки.ВидОперации = ВидОперацииВзносНаличных Тогда
		
		Если НЕ (ВидОперацииПредыдущееЗначение = ВидОперацииПереводНаДругойСчет ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииПереводСДругогоСчета
			ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииСписаниеНаличных ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииВзносНаличных) Тогда
			ДанныеСтроки.СчетКонтрагентаИсходный = ДанныеСтроки.СчетКонтрагента;
		КонецЕсли;
		
		Если ВидОперацииПредыдущееЗначение = ВидОперацииПереводНаДругойСчет ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииПереводСДругогоСчета Тогда
			ДанныеСтроки.СчетКонтрагента = "";
		Иначе
			ДанныеСтроки.СчетКонтрагента = "";
		КонецЕсли;
		ЗаполнитьКассуОрганизации(ДанныеСтроки.ПолучитьИдентификатор());
		
	ИначеЕсли ВидОперацииПредыдущееЗначение = ВидОперацииПереводНаДругойСчет ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииПереводСДругогоСчета
		ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииСписаниеНаличных ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииВзносНаличных Тогда
		
		ДанныеСтроки.СчетКонтрагента = ДанныеСтроки.СчетКонтрагентаИсходный;
		ДанныеСтроки.Контрагент = ДанныеСтроки.КонтрагентИсходный;
		
	ИначеЕсли ВыбранноеЗначение = ВидОперацииОтКурьерскойКомпанииПочты Тогда
		
		ДанныеСтроки.Корреспонденция = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыСРазнымиКредиторами");
		
	ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.РасчетыПоКредитам") Тогда
		ДанныеСтроки.Договор = ПредопределенноеЗначение("Документ.ДоговорКредитаИЗайма.ПустаяСсылка");
	КонецЕсли;
	
	ОбновитьСпособЗачетаНаКлиенте(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпособЗачетаНаКлиенте(СтрокаДокумента)
	
	Если ЭтоОперацияГдеВозможныАвторасчеты(СтрокаДокумента.ВидОперации) Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.ДокументРасчетов)
			Или ЗначениеЗаполнено(СтрокаДокумента.ПлатежноеПоручение)
			Или ЗначениеЗаполнено(СтрокаДокумента.СчетНаОплату)
			Или ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
			СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаВручную;
		ИначеЕсли ТипЗнч(СтрокаДокумента.Договор) = Тип("Строка")
			И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтрокаДокумента.СпособЗачетаТЧ = РасчетыРаботаСФормамиВызовСервера.СпособРазнесенияОплатыДляДоговора(Неопределено, СтрокаДокумента.Контрагент);
		ИначеЕсли ТипЗнч(СтрокаДокумента.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтрокаДокумента.СпособЗачетаТЧ = РасчетыРаботаСФормамиВызовСервера.СпособРазнесенияОплатыДляДоговора(СтрокаДокумента.Договор, СтрокаДокумента.Контрагент);
		Иначе
			СтрокаДокумента.СпособЗачетаТЧ = СпособРазнесенияОплатыПоУмолчанию;
		КонецЕсли;
	Иначе
		СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаВручную;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОперацияГдеВозможныАвторасчеты(пВидОперации)
	
	Возврат (пВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПокупателя")
		Или пВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Поставщику"));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСчетОрганизации(ИдентификаторСтроки)
	
	ВыделитьКолонкуРСКонтрагента = Ложь;
	
	СтрокаДокумента = Объект.Загрузка.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) ИЛИ
		(ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчета")
		И ТипЗнч(СтрокаДокумента.СчетКонтрагента.Владелец) = Тип("СправочникСсылка.Контрагенты"))
		Тогда
		ЗапросПоискаСчета = Новый Запрос;
		Если СтрокаДокумента.ВидОперации = ВидОперацииПереводНаДругойСчет Тогда
			СчетКонтрагента = СтрокаДокумента.ПолучательСчет;
			ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
			КППКонтрагента = СтрокаДокумента.ПолучательКПП;
			Если ЗначениеЗаполнено(СтрокаДокумента.Получатель1) Тогда
				ИмяКонтрагента = СтрокаДокумента.Получатель1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Получатель;
			КонецЕсли;
			БИКСчета = СтрокаДокумента.ПолучательБИК;
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПолучательСчет);
		Иначе
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПлательщикСчет);
			СчетКонтрагента = СтрокаДокумента.ПлательщикСчет;
			ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
			КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
			Если СтрокаДокумента.Плательщик1 <> "" Тогда
				ИмяКонтрагента = СтрокаДокумента.Плательщик1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Плательщик;
			КонецЕсли;
			БИКСчета = СтрокаДокумента.ПлательщикБИК;
		КонецЕсли;
		
		Если СокрЛП(КППКонтрагента) = "0" Тогда
			КППКонтрагента = "";
		КонецЕсли;
		
		ЗапросПоискаСчета.УстановитьПараметр("ИННКонтрагента", ИННКонтрагента);
		ЗапросПоискаСчета.УстановитьПараметр("КППКонтрагента", КППКонтрагента);
		ЗапросПоискаСчета.УстановитьПараметр("ИмяКонтрагента", ИмяКонтрагента);
		ЗапросПоискаСчета.УстановитьПараметр("БИКБанка", БИКСчета);
		
		ЗапросПоискаСчета.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Владелец,
		|	БанковскиеСчета.Владелец.ИНН КАК ВладелецИНН,
		|	БанковскиеСчета.Владелец.КПП КАК ВладелецКПП,
		|	БанковскиеСчета.Ссылка,
		|	БанковскиеСчета.НомерСчета,
		|	БанковскиеСчета.Банк.Код КАК БИК_из_Базы,
		|	ВЫБОР КОГДА БанковскиеСчета.Банк.Код = &БИКБанка ТОГДА 1 ИНАЧЕ 2 КОНЕЦ КАК ПриоритетБИК,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА БанковскиеСчета.Владелец.КПП = ""0""
		|					ТОГДА """"
		|				ИНАЧЕ БанковскиеСчета.Владелец.КПП
		|			КОНЕЦ = &КППКонтрагента
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ПриоритетКПП,
		|	ВЫБОР КОГДА БанковскиеСчета.Владелец.ИНН = &ИННКонтрагента ТОГДА 1 ИНАЧЕ 2 КОНЕЦ КАК ПриоритетИНН,
		|	ВЫБОР КОГДА (БанковскиеСчета.Владелец.Наименование = &ИмяКонтрагента) 
		|		ИЛИ (ВЫРАЗИТЬ(БанковскиеСчета.Владелец.НаименованиеПолное КАК Строка(1024)) = &ИмяКонтрагента) ТОГДА 1 ИНАЧЕ 2 КОНЕЦ КАК ПриоритетНаименования
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации 
		|	И БанковскиеСчета.НомерСчета = &НомерСчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетИНН,
		|	ПриоритетБИК,
		|	ПриоритетНаименования,
		|	ПриоритетКПП";
		
		РезультатЗапросаПоБС = ЗапросПоискаСчета.Выполнить();
		ВыборкаПоиска = РезультатЗапросаПоБС.Выбрать();
		
		// Нужно обработать следующую ситуацию.
		// У контрагента изменился ИНН, но номер счета остался прежним.
		// Будем в этом случае выдавать предупреждающее сообщение и предлагать создать нового контрагента, если не нашли
		// контрагента с нужным ИНН.
		
		КонтрагентНеНайден = Истина;
		Если ВыборкаПоиска.Следующий() Тогда
			
			// Если в файле указан ИНН контрагента, но мы его не нашли.
			Если НЕ ПустаяСтрока(ИННКонтрагента) И ВыборкаПоиска.ПриоритетИНН = 2 И ВыборкаПоиска.ПриоритетНаименования = 2 Тогда
				
				СтрокаЗамечание = НСтр("ru = 'Банковский счет найден у контрагента с другим ИНН (%ВладелецИНН%)!'");
				Если ЗначениеЗаполнено(ВыборкаПоиска.ВладелецИНН) Тогда
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", ВыборкаПоиска.ВладелецИНН);
				Иначе
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", НСтр("ru = '<Не заполнен>'"));
				КонецЕсли;
				//ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
				СтрокаДокумента.СчетКонтрагента = СтрокаЗамечание;
				СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаЗамечание;
				ВыделитьКолонкуРСКонтрагента = Истина;
				СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
				СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
				
			Иначе
				
				КонтрагентНеНайден = Ложь;
				
				СтрокаДокумента.СчетКонтрагента = ВыборкаПоиска.Ссылка;
				СтрокаДокумента.КонтрагентНеНайденКартинка = -1;
				
				// Не совпадает БИК в базе и в выписке.
				Если (ВыборкаПоиска.ПриоритетБИК = 2) Тогда
					// Проверим БИК банка. Может не совпадать. Например у разных контрагентов есть разные счета в разных банках,
					// но с одинаковым номером.
					ВыделитьКолонкуРСКонтрагента = Истина;
					СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
					
					//СтрокаЗамечание = НСтр("ru = 'БИК банка счета контрагента в базе (%БИК_из_Базы%) не совпадает с БИК банка в выписке (%БИК_в_Выписке%).'");
					//СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%БИК_из_Базы%", ?(ЗначениеЗаполнено(ВыборкаПоиска.БИК_из_Базы), ВыборкаПоиска.БИК_из_Базы, НСтр("ru = '<пустой>'")));
					//СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%БИК_в_Выписке%", ?(ЗначениеЗаполнено(БИКСчета), БИКСчета, НСтр("ru = '<пустой>'")));
					//ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
				КонецЕсли;
				
				// Не совпадает ИНН (в частности, когда ИНН не заполнен в ИБ.
				Если НЕ ПустаяСтрока(ИННКонтрагента) И ВыборкаПоиска.ПриоритетИНН = 2 Тогда
					СтрокаЗамечание = НСтр("ru = 'Банковский счет найден у контрагента с другим ИНН (%ВладелецИНН%)!'");
					Если ЗначениеЗаполнено(ВыборкаПоиска.ВладелецИНН) Тогда
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", ВыборкаПоиска.ВладелецИНН);
					Иначе
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", НСтр("ru = '<Не заполнен>'"));
					КонецЕсли;
					//ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
					СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаЗамечание;
					ВыделитьКолонкуРСКонтрагента = Истина;
					СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
					СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если КонтрагентНеНайден Тогда
			СтрокаЗамечание = НСтр("ru = 'Не найден счет контрагента (%СчетКонтрагента%)!'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%СчетКонтрагента%", СчетКонтрагента);
			
			//ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
			//СтрокаДокумента.НомерКартинки = 1;
			//УстановитьНомерКартинкиДляПодвалаНаСервере(СтрокаДокумента);
			
			СтрокаСчетКонтрагента = НСтр("ru = 'Не найден (%СчетКонтрагента%).'");
			СтрокаСчетКонтрагента = СтрЗаменить(СтрокаСчетКонтрагента, "%СчетКонтрагента%", СчетКонтрагента);
			СтрокаДокумента.СчетКонтрагента = СтрокаСчетКонтрагента;
			СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
			ВыделитьКолонкуРСКонтрагента = Истина;
			СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
		КонецЕсли;
		
		// Если ИНН не указан, то в выборку попадут все контрагенты, у которых есть счет с нужным номером.
		// Если ИНН указан, то нужно сообщать только количестве счетов у контрагентов с ИНН как в выписке из банка.
		Если НЕ ПустаяСтрока(ИННКонтрагента) Тогда
			КоличествоЭлементовВВыборке = 0;
			ВыборкаПоиска.Сбросить();
			Пока ВыборкаПоиска.Следующий() Цикл
				Если ВыборкаПоиска.ВладелецИНН = ИННКонтрагента Тогда
					КоличествоЭлементовВВыборке = КоличествоЭлементовВВыборке + 1;
				КонецЕсли;
			КонецЦикла;
		Иначе
			КоличествоЭлементовВВыборке = ВыборкаПоиска.Количество();
		КонецЕсли;
		
		
		Если КоличествоЭлементовВВыборке > 1 //И 
			// Если ИНН и наименование контрагента совпадают с теми, что указаны в выписке, то не будем выдавать сообщения о
			// нескольких РС.
			//ВыборкаПоиска.ПриоритетНаименования = 2 
			Тогда
			СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%Количество%) одинаковых банковских счетов! Проверьте контрагента и р/счет!'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Количество%", КоличествоЭлементовВВыборке);
			//ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
			Если ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") ИЛИ Не ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
				СтрокаДокумента.СчетКонтрагента = СтрокаЗамечание;
			КонецЕсли;
			СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
			ВыделитьКолонкуРСКонтрагента = Истина;
			СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
			СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыделитьКолонкуРСКонтрагента Тогда
		Элементы.ЗагрузкаГруппаСчетКонтрагента.КартинкаШапки = БиблиотекаКартинок.ВниманиеВВидеТреугольника;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКассуОрганизации(ИдентификаторСтроки)
	
	СтрокаДокумента = Объект.Загрузка.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	// Определим кассу орагазинации для операций снятия наличных и взноса наличных на счет организации.
	Если СтрокаДокумента.Касса.Пустая() Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Кассы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Кассы КАК Кассы
			|ГДЕ
			|	НЕ Кассы.ПометкаУдаления
			|ИТОГИ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
			|ПО
			|	ОБЩИЕ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ВыборкаОбщийИтог.Следующий();		// Общий итог
		
		Если ВыборкаОбщийИтог.Ссылка = 1 Тогда
			
			ВыборкаДетальныеЗаписи = ВыборкаОбщийИтог.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			
			СтрокаДокумента.Касса = ВыборкаДетальныеЗаписи.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыДокумента(ТекущаяСтрока)
	
	Если ТекущаяСтрока.Исходящий Тогда
		ТекущаяСтрока.СуммаСписано = ТекущаяСтрока.СуммаДокумента;
		ТекущаяСтрока.СуммаСписаноСМинусом = -ТекущаяСтрока.СуммаДокумента;
	Иначе
		ТекущаяСтрока.СуммаПоступило = ТекущаяСтрока.СуммаДокумента;
	КонецЕсли;
	ТекущаяСтрока.НеВерныйФорматСуммыКартинка = -1;
	Если ТекущаяСтрока.Готовность > 3 Тогда
		ТекущаяСтрока.Готовность = 3;
	КонецЕсли;
	
	//УдалятьПредупреждение = НСтр("ru = 'Укажите сумму вручную'");
	//ТекущаяСтрока.ОписаниеОшибокПодТЧ = УдалитьДанныеИзОписанияОшибкиНаКлиенте(УдалятьПредупреждение, ТекущаяСтрока.ОписаниеОшибокПодТЧ, ТекущаяСтрока);
	//ПоменятьСимволПСНаПробел(ТекущаяСтрока.ОписаниеОшибокПодТЧ);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтатьюДДСПоВидуОперацииПриИзменении(ВидОперации, СтатьяДДС)
	
	Если ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПоступлениеНаСчет") Тогда
		Возврат ДвиженияДенежныхСредствВызовСервера.ПолучитьНовоеЗначениеСтатьиДДСПоступления(ВидОперации, СтатьяДДС, Объект.СтатьяДДСВходящий, Объект.СтатьяДДСИсходящий);
	Иначе
		Возврат ДвиженияДенежныхСредствВызовСервера.ПолучитьНовоеЗначениеСтатьиДДССписания(ВидОперации, СтатьяДДС, Объект.СтатьяДДСВходящий, Объект.СтатьяДДСИсходящий);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция НужноОчищатьДокументРасчетов(пДокументРасчетов, пДоговор)
	
	Если пДокументРасчетов.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено
		И пДокументРасчетов.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("Договор") <> Неопределено Тогда
		Для Каждого ТекущаяСтрока Из пДокументРасчетов.РасшифровкаПлатежа Цикл
			Если ТекущаяСтрока.Договор = пДоговор Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		Возврат Истина;
	ИначеЕсли пДокументРасчетов.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
		Возврат пДокументРасчетов.Договор <> пДоговор И ЗначениеЗаполнено(пДоговор);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьИнформациюОДокументахНаКлиенте(пСтрока)
	
	пСтрока.Заказ = Неопределено;
	пСтрока.СчетНаОплату = Неопределено;
	// Если ПП было подставлено автоматически, то способ = Вручную.
	// Если пользователь выбрал ПП вручную, то способ = Вручную.
	// При загрузке выписки данные будут заполнен из ПП (кроме суммы и некоторых других реквизитов).
	пСтрока.ПлатежноеПоручение = Неопределено;
	пСтрока.ДокументРасчетов = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДокументыКИмпорту

// Событие вызывается при двойном щелчке мыши или нажатии Enter
//
&НаКлиенте
Процедура ДокументыКИмпортуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = ДокументыКИмпорту.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	СтрокаСекции = Элементы.ДокументыКИмпорту.ТекущиеДанные.СтрокаСекции;
	
	Если Объект.ИспользоватьПомощникСозданияСправочников Тогда
		Если Поле.Имя = "ДокументыКИмпортуКонтрагент" Тогда
			
			СтандартнаяОбработка = Ложь;
			ОткрытьФормуРедактированияКонтрагентов(СтрокаСекции, "ДействияСКонтрагентом");
			Возврат;
			
		ИначеЕсли Поле.Имя = "ДокументыКИмпортуСчетКонтрагента" Тогда
			
			СтандартнаяОбработка = Ложь;
			ОткрытьФормуРедактированияКонтрагентов(СтрокаСекции, "ДействияСоСчетомКонтрагента");
			Возврат;
			
		ИначеЕсли Поле.Имя = "ДокументыКИмпортуДоговор" Тогда
			
			СтандартнаяОбработка = Ложь;
			ОткрытьФормуРедактированияКонтрагентов(СтрокаСекции, "ДействияСДоговором");
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Поле.Имя = "ДокументыКИмпортуЗагружать" Тогда
		СтрокаТаблицы.Загружать = НЕ СтрокаТаблицы.Загружать;
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуОписаниеОшибок" Тогда
		СтандартнаяОбработка = Ложь;
		Если Элемент.ТекущиеДанные.Документ = Неопределено Тогда
			СсылкаДляПерехода = Неопределено;
		Иначе
			СсылкаДляПерехода = ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Документ);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Ошибки в документе'"), СсылкаДляПерехода, СтрокаТаблицы.ОписаниеОшибок);
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуНазначениеПлатежа" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Заголовок", НСтр("ru = 'Назначение платежа'"));
		ПараметрыСообщения.Вставить("Сообщение", СтрокаТаблицы.НазначениеПлатежа);
		Если СтрокаТаблицы.Документ <> Неопределено Тогда
			ПараметрыСообщения.Вставить("ГиперссылкаТекст",
				ОбщегоНазначенияУНФВызовСервера.СформироватьЗаголовокДокумента(СтрокаТаблицы.Документ));
			ПараметрыСообщения.Вставить("ГиперссылкаНавигация", ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Документ));
		КонецЕсли;
		
		ОбщегоНазначенияУНФКлиент.ПоказатьСообщениеВФорме(ПараметрыСообщения);
		
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуДокумент" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
			
			Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
				КлючеваяОперация = "ОткрытиеФормыПоступлениеНаРасчетныйСчет";
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.РасходСоСчета") Тогда
				КлючеваяОперация = "ОткрытиеФормыСписаниеСРасчетногоСчета";
			КонецЕсли;
			
			ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
			
			ПоказатьЗначение(, СтрокаТаблицы.Документ);
		Иначе
			// не реагируем
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Документ) И ВыполненаЗагрузка Тогда
		Если Поле.Имя = "ДокументыКИмпортуКонтрагент" Тогда 
			СтандартнаяОбработка = Ложь;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
				ПоказатьЗначение(, СтрокаТаблицы.Контрагент);
			КонецЕсли;
		ИначеЕсли Поле.Имя = "ДокументыКИмпортуСчетКонтрагента" Тогда 
			СтандартнаяОбработка = Ложь;
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетКонтрагента) Тогда
				ПоказатьЗначение(, СтрокаТаблицы.СчетКонтрагента);
			КонецЕсли;
		ИначеЕсли Поле.Имя = "ДокументыКИмпортуНомерСтроки" ИЛИ 
			Поле.Имя = "ДокументыКИмпортуДокумент" ИЛИ 
			Поле.Имя = "ДокументыКИмпортуНомерДок" ИЛИ 
			Поле.Имя = "ДокументыКИмпортуДатаПроведения" ИЛИ
			Поле.Имя = "ДокументыКИмпортуСуммаСписано" ИЛИ
			Поле.Имя = "ДокументыКИмпортуСуммаПоступило" ИЛИ 
			Поле.Имя = "ДокументыКИмпортуВидОперации" ИЛИ 
			Поле.Имя = "ДокументыКИмпортуДоговор" Тогда
			
			Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
				КлючеваяОперация = "ОткрытиеФормыПоступлениеНаРасчетныйСчет";
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.РасходСоСчета") Тогда
				КлючеваяОперация = "ОткрытиеФормыСписаниеСРасчетногоСчета";
			КонецЕсли;
			
			ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
			
			СтандартнаяОбработка = Ложь;
			ПоказатьЗначение(, СтрокаТаблицы.Документ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ДокументыКИмпортуКонтрагент Тогда 
		МассивПараметрыВыбора = Новый Массив;
		Элемент.ТекущийЭлемент.ВыбиратьТип = Ложь;
		ТипыКонтрагента = Новый Массив;
		ТипыКонтрагента.Добавить(УчетДенежныхСредствКлиентСервер.ТипКонтрагентаПоВидуОперации(ТекущиеДанные.ВидОперации));
		Элемент.ТекущийЭлемент.ОграничениеТипа = Новый ОписаниеТипов(ТипыКонтрагента);
		Элемент.ТекущийЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметрыВыбора);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущийЭлемент.Имя = "ДокументыКИмпортуКонтрагент" Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТипЗнч(ТекущиеДанные.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Элемент.ТекущийЭлемент.ПодсказкаВвода = ТекущиеДанные.РеквизитыКонтрагента.НаименованиеПолное;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Элемент.ТекущийЭлемент.ПодсказкаВвода = ТекущиеДанные.РеквизитыКонтрагента.Наименование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуКонтрагентПриИзменении(Элемент)
	
	ДокументыКИмпортуКонтрагентПриИзмененииНаСервере(Элементы.ДокументыКИмпорту.ТекущаяСтрока, СтруктураПоискаКонтрагента);
	
	ОбновитьДанныеВСтрокеСекции("Контрагент");
	ОбновитьДанныеВСтрокеСекции("Договор");
	ОбновитьДанныеВСтрокеСекции("СчетКонтрагента");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Определим структуру поиска контрагента.
	// Может потребоваться если пользователь захочет изменить этого контрагента и в других строках
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		СтруктураПоискаКонтрагента = Новый Структура("Контрагент", ТекущиеДанные.Контрагент);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.КонтрагентСсылкаДляНового) Тогда
		СтруктураПоискаКонтрагента = Новый Структура("КонтрагентСсылкаДляНового", ТекущиеДанные.КонтрагентСсылкаДляНового);
	Иначе
		СтруктураПоискаКонтрагента = Новый Структура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуКонтрагентСоздание(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	Если ПустаяСтрока(Элемент.ТекстРедактирования) И ЗначениеЗаполнено(ТекущиеДанные.РеквизитыКонтрагента) Тогда
		СтандартнаяОбработка = Ложь;
		
		ДанныеЗаполнения = Новый Структура("Ключ, Родитель, Наименование, НаименованиеПолное, ИНН, КПП, ЮридическоеФизическоеЛицо");
		ДанныеЗаполнения.Ключ = ТекущиеДанные.КонтрагентСсылкаДляНового;
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ТекущиеДанные.РеквизитыКонтрагента);
		
		Если ТипЗнч(ТекущиеДанные.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ДанныеЗаполнения), ЭтотОбъект);
		ИначеЕсли ТипЗнч(ТекущиеДанные.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ДанныеЗаполнения), ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСчетКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Владелец",    ТекущиеДанные.Контрагент);
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	ПараметрыОтбора.Вставить("Валютный",    ТекущиеДанные.ВалютаСчетаОрганизации <> ВалютаРегламентированногоУчета);
	Если ПараметрыОтбора.Валютный Тогда
		ПараметрыОтбора.Вставить("ВалютаДенежныхСредств", ТекущиеДанные.ВалютаСчетаОрганизации);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	ВидДоговораВзаиморасчетов = ЗаполнитьВидыДоговоров(ТекущиеДанные.ВидОперации);
	Если ВидДоговораВзаиморасчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Владелец",      ТекущиеДанные.Контрагент);
	ПараметрыОтбора.Вставить("Организация",   Объект.Организация);
	ПараметрыОтбора.Вставить("ВидДоговора",   Новый ФиксированныйМассив(ВидДоговораВзаиморасчетов));
	ПараметрыОтбора.Вставить("ОплатаВВалюте", (ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета));
	Если ПараметрыОтбора.ОплатаВВалюте Тогда
		ПараметрыОтбора.Вставить("ВалютаРасчетов", ВалютаДенежныхСредств);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

// СтруктураПоискаКонтрагента может быть модифицирован
&НаСервере
Процедура ДокументыКИмпортуКонтрагентПриИзмененииНаСервере(ИдентификаторСтроки, СтруктураПоискаКонтрагента)
	
	ТекущиеДанные = ДокументыКИмпорту.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	УточнитьХозяйственнуюОперациюДаннымиВведеннымиПользователем(ТекущиеДанные, "Контрагент");
		
	Если Не ЗначениеЗаполнено(СтруктураПоискаКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	// Не изменяем контрагента, если он уже существует
	// Общая замена происходит только для новых контрагентов.
	Если Не СтруктураПоискаКонтрагента.Свойство("КонтрагентСсылкаДляНового") Тогда
		Возврат;
	КонецЕсли;
	
	// Поищем контрагента по другим строкам, возможно придется изменять контрагента и в остальных строках;
	ОстальныеСтроки = ДокументыКИмпорту.НайтиСтроки(СтруктураПоискаКонтрагента);
	Если Не ЗначениеЗаполнено(ОстальныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ОстальныеСтроки Цикл
		СтрокаТаблицы.Контрагент = ТекущиеДанные.Контрагент;
		СтрокаТаблицы.СтрокаСекции.Контрагент = ТекущиеДанные.Контрагент;
		СтрокаТаблицы.СтрокаСекции.Договор = ТекущиеДанные.Договор;
		СтрокаТаблицы.СтрокаСекции.СчетКонтрагента = ТекущиеДанные.СчетКонтрагента;
		УточнитьХозяйственнуюОперациюДаннымиВведеннымиПользователем(СтрокаТаблицы, "Контрагент");
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ДокументыКИмпортуСчетКонтрагентаПриИзмененииНаСервере(ИдентификаторСтроки)
	
	УточнитьХозяйственнуюОперациюДаннымиВведеннымиПользователем(
		ДокументыКИмпорту.НайтиПоИдентификатору(ИдентификаторСтроки),
		"СчетКонтрагента");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСчетКонтрагентаПриИзменении(Элемент)
	
	ДокументыКИмпортуСчетКонтрагентаПриИзмененииНаСервере(Элементы.ДокументыКИмпорту.ТекущаяСтрока);
	
	ОбновитьДанныеВСтрокеСекции("СчетКонтрагента");

КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуДоговорПриИзменении(Элемент)
	
	ДокументыКИмпортуДоговорПриИзмененииНаСервере(Элементы.ДокументыКИмпорту.ТекущаяСтрока);
	
	ОбновитьДанныеВСтрокеСекции("Договор");
	
КонецПроцедуры

&НаСервере
Процедура ДокументыКИмпортуДоговорПриИзмененииНаСервере(ИдентификаторСтроки)

	УточнитьХозяйственнуюОперациюДаннымиВведеннымиПользователем(
		ДокументыКИмпорту.НайтиПоИдентификатору(ИдентификаторСтроки),
		"Договор");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуЗагружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Знак = ?(ТекущиеДанные.Загружать, 1, -1);
	
	КоличествоКЗагрузке     = КоличествоКЗагрузке     + 1 * Знак;
	СуммаПоступилоКЗагрузке = СуммаПоступилоКЗагрузке + ТекущиеДанные.СуммаПоступило * Знак;
	СуммаСписаноКЗагрузке   = СуммаСписаноКЗагрузке   + ТекущиеДанные.СуммаСписано   * Знак;
	
	УстановитьДоступностьКнопкиЗагрузить(ЭтотОбъект);
	
	ТекущиеДанные.СтрокаСекции.Загружать = ТекущиеДанные.Загружать;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуВидОперацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование) Тогда
		ДокументыКИмпортуВидОперацииПриИзмененииНаСервере(Элементы.ДокументыКИмпорту.ТекущаяСтрока);
	КонецЕсли;
	
	ОбновитьДанныеВСтрокеСекции("ВидОперации");
	
КонецПроцедуры

&НаСервере
Процедура ДокументыКИмпортуВидОперацииПриИзмененииНаСервере(ИдентификаторСтроки)
	
	УточнитьХозяйственнуюОперациюДаннымиВведеннымиПользователем(
		ДокументыКИмпорту.НайтиПоИдентификатору(ИдентификаторСтроки),
		"ВидОперации");
	
КонецПроцедуры

&НаСервере
Процедура ДокументыКИмпортуСтатьяДДСПриИзмененииНаСервере(ИдентификаторСтроки)
	
	//УточнитьХозяйственнуюОперациюДаннымиВведеннымиПользователем(
	//	ДокументыКИмпорту.НайтиПоИдентификатору(ИдентификаторСтроки),
	//	"СтатьяДДС");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСтатьяДДСПриИзменении(Элемент)
	
	ДокументыКИмпортуСтатьяДДСПриИзмененииНаСервере(Элементы.ДокументыКИмпорту.ТекущаяСтрока);
	
	ОбновитьДанныеВСтрокеСекции("СтатьяДДС");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОчиститьЭлектронныеВыписки()
	
	ВыпискиБанка.Очистить();
	ЭлектроннаяВыпискаБанка = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИзменитьДатуОкончанияЗапросаВыписки()
	
	Если ПрямойОбменСбербанк Тогда
		Если ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
			МаксимальнаяДата = Мин(ТекущаяДата(),
				Объект.НачалоПериода + УчетДенежныхСредствКлиентСервер.МаксимальныйПериодВыпискиСбербанк());
			Если МаксимальнаяДата < Объект.КонецПериода Или Объект.НачалоПериода > Объект.КонецПериода Тогда
				Объект.КонецПериода = МаксимальнаяДата;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиДляБанковскогоСчета()
	
	ПодключенаИнтеграцияСБанком = Ложь;
	Объект.Кодировка = "";
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "Владелец");
	КонецЕсли;
	
	БанкИНомерСчета(Объект.БанковскийСчет, Банк, НомерСчета);
	ИспользоватьНесколькоБанковскихСчетовОрганизации = ИспользоватьНесколькоБанковскихСчетов();
	
	ВидимостьЭлементовДиректБанк = ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
		Объект.Организация, Объект.БанковскийСчет);
	
	ПрямойОбменСбербанк = Ложь;
	ПрямойОбменСБанками = Ложь;
	ПрямойОбменТолькоЗагрузка = Ложь;
	ПодключенаИнтеграцияСБанком = Ложь;
	Объект.СоглашениеПрямогоОбменаСБанками = Неопределено;
	ВалютаДенежныхСредств = ВалютаРегламентированногоУчета;
	
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ПодключенаИнтеграцияСБанком = ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВключена(Объект.БанковскийСчет);
		
		Настройки = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(Объект.Организация, Объект.БанковскийСчет);
		
		Если Настройки.Свойство("ПрограммаБанка") Тогда
			ПрямойОбменСбербанк = Настройки.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
		КонецЕсли;
		
		Объект.СоглашениеПрямогоОбменаСБанками = Настройки.СоглашениеПрямогоОбменаСБанками;
		ПрямойОбменТолькоЗагрузка              = Настройки.ПрямойОбменТолькоЗагрузка;
		Объект.Программа                       = Настройки.Программа;
		Объект.Кодировка                       = Настройки.Кодировка;
		Объект.ФайлВыгрузки                    = Настройки.ФайлВыгрузки;
		
		ПрямойОбменСБанками = ЗначениеЗаполнено(Настройки.СоглашениеПрямогоОбменаСБанками);
		
		Если Не ПустаяСтрока(Настройки.ФайлЗагрузки) Тогда
			Объект.ФайлЗагрузки = Настройки.ФайлЗагрузки;
		КонецЕсли;
		
		Объект.ВыгружатьПлатежноеПоручение = Настройки.Платежное_Поручение;
		
		Если ВключитьВыгрузкуПлатежныхТребований Тогда
			Объект.ВыгружатьПлатежноеТребование = Истина;
		Иначе
			Объект.ВыгружатьПлатежноеТребование = Настройки.Платежное_Требование;
		КонецЕсли;
		
		ВыгружатьПлатежноеТребование(ЭтотОбъект);
		
		Объект.КонтролироватьНекорректныеСимволыВНомере = Настройки.КонтролироватьНекорректныеСимволыВНомере;
		Объект.СоздаватьНенайденныеЭлементы             = Настройки.СоздаватьНенайденныеЭлементы;
		Объект.КонтролироватьБезопасностьОбменаСБанком  = Настройки.КонтролироватьБезопасностьОбменаСБанком;
		
		Объект.АнализироватьИсториюВыбораЗначенийРеквизитов	= Настройки.АнализироватьИсториюВыбораЗначенийРеквизитов;
		Объект.АвтоматическиПодставлятьДокументы			= Настройки.АвтоматическиПодставлятьДокументы;
		Объект.ИспользоватьПомощникСозданияСправочников		= Настройки.ИспользоватьПомощникСозданияСправочников;
		Объект.СтатьяДДСВходящий							= Настройки.СтатьяДДСВходящий;
		Объект.СтатьяДДСИсходящий							= Настройки.СтатьяДДСИсходящий;
	
		ВалютаДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ВалютаДенежныхСредств");
	КонецЕсли;
	
	ПроверкаКорректностиБанковскогоСчета();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВыгружатьПлатежноеТребование(Форма)
	
	СтрокиПлатТребование = Форма.ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ", "ПлатежноеТребование"));
	Если СтрокиПлатТребование.Количество() = 1 Тогда
		СтрокиПлатТребование[0].Пометка = Форма.Объект.ВыгружатьПлатежноеТребование;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкиЗагрузки()
	
	Если ПустаяСтрока(КешНастроекЗагрузки) Тогда
		НастройкиЗагрузки = Неопределено;
	Иначе
		НастройкиЗагрузки = ПолучитьИзВременногоХранилища(КешНастроекЗагрузки);
	КонецЕсли;
	
	Если НастройкиЗагрузки = Неопределено  Тогда
		НастройкиЗагрузки = Обработки.КлиентБанк.НастройкиЗагрузки();
		КешНастроекЗагрузки = ПоместитьВоВременноеХранилище(НастройкиЗагрузки, УникальныйИдентификатор);
	ИначеЕсли НастройкиЗагрузки.Кодировка <> Объект.Кодировка Тогда
		НастройкиЗагрузки.Кодировка = Объект.Кодировка;
		КешНастроекЗагрузки = ПоместитьВоВременноеХранилище(НастройкиЗагрузки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат НастройкиЗагрузки;
	
КонецФункции

// Процедура формирует отчет о выгрузке
//
&НаСервере
Процедура ПолучитьОтчетОВыгрузке(ПолеОтчета)
	
	Обработки.КлиентБанк.ПечатьОтчетаОВыгруженныхПлатежныхДокументах(ПолеОтчета,
																	Объект.ПлатежныеДокументы,
																	Объект.Организация,
																	Объект.БанковскийСчет,
																	Объект.НачалоПериода,
																	Объект.КонецПериода);
	
КонецПроцедуры

// Процедура формирует отчет о загрузке
//
&НаСервере
Процедура ПолучитьОтчетОЗагрузке(ПолеОтчета)
	
	ДанныеФормы = Новый Структура;
	ДанныеФормы.Вставить("Организация",                  Объект.Организация);
	ДанныеФормы.Вставить("БанковскийСчет",               Объект.БанковскийСчет);
	ДанныеФормы.Вставить("СоздаватьНенайденныеЭлементы", Объект.СоздаватьНенайденныеЭлементы);
	ДанныеФормы.Вставить("ДокументыКИмпорту",            ДокументыКИмпорту.Выгрузить());
	
	Обработки.КлиентБанк.ПечатьОтчетаОЗагруженныхПлатежныхДокументах(ПолеОтчета,
		ДанныеФормы,
		АдресХранилищаРаспознанныеДанныеИзБанка);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКорректностиБанковскогоСчета()
	
	Ошибки = Новый Массив;
	ЕстьОшибки = Ложь;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		РезультатПроверкиСчета = БанковскиеСчетаСервер.ПроверитьКорректностьБанковскогоСчета(Объект.БанковскийСчет);
		ЕстьОшибки = РезультатПроверкиСчета.ЕстьОшибки;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ПризнакСчета = БанковскиеСчетаСервер.НовыйПризнакСчета();
		ПризнакСчета.СчетОрганизации = Истина;
		ТекстОшибки = БанковскиеСчетаСервер.ТекстОшибкиБанковскогоСчета(РезультатПроверкиСчета, ПризнакСчета);
		Ошибки.Добавить(ТекстОшибки);
		Элементы.ГруппаБанковскийСчетПроверка.ЦветФона = ЦветаСтиля.ЦветОшибкиБанковскогоСчета;
	Иначе
		Элементы.ГруппаБанковскийСчетПроверка.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	КонецЕсли;
	
	Если Ошибки.Количество() > 0 Тогда
		Элементы.БанковскийСчетВыгрузка.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(Ошибки);
		Элементы.БанковскийСчетВыгрузка.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Иначе
		Элементы.БанковскийСчетВыгрузка.РасширеннаяПодсказка.Заголовок = "";
		Элементы.БанковскийСчетВыгрузка.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	КонецЕсли;
	
КонецПроцедуры

#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ОткрытаСтраницаВыгрузки = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка;
	
	ПрямойОбменВыгрузка = Форма.ПрямойОбменСБанками И Не Форма.ПрямойОбменТолькоЗагрузка;
	
	// Выгрузка
	Элементы.ДекорацияОтчетОВыгрузке.Доступность  = Форма.ЭкспортПроизведен;
	Элементы.ДекорацияВыгруженныйФайл.Доступность = Форма.ЭкспортПроизведен
		И Не Объект.КонтролироватьБезопасностьОбменаСБанком;
	
	Элементы.БанковскийСчетВыгрузка.Видимость         = Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации;
	Элементы.ГруппаВыгрузкиВыпискиЧерезЭД.Видимость   = ПрямойОбменВыгрузка;
	Элементы.ГруппаВыгрузкаВыпискиВФайл.Видимость     = Не ПрямойОбменВыгрузка;
	
	// Установим кнопку по умолчанию
	Если ПрямойОбменВыгрузка Тогда
		Элементы.КомандаОтправитьЭД.КнопкаПоУмолчанию = ОткрытаСтраницаВыгрузки;
	Иначе
		Элементы.КомандаВыгрузить.КнопкаПоУмолчанию   = ОткрытаСтраницаВыгрузки;
	КонецЕсли;
	
	// Загрузка
	Элементы.ДекорацияЗагружаемыйФайл.Доступность = ЗначениеЗаполнено(Объект.ФайлЗагрузки);
	УстановитьДоступностьКнопкиЗагрузить(Форма);
	
	// Установим кнопку по умолчанию
	Элементы.КомандаЗагрузить.КнопкаПоУмолчанию   = Не ОткрытаСтраницаВыгрузки;
	Элементы.БанковскийСчетЗагрузкаФайл.Видимость = Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации;
	
	Элементы.ДокументыКИмпортуПоказатьОшибки.Видимость     = Объект.СоздаватьНенайденныеЭлементы;
	Элементы.ДокументыКИмпортуСоздатьНенайденное.Видимость =
		Не Объект.СоздаватьНенайденныеЭлементы И Не Объект.ИспользоватьПомощникСозданияСправочников;
	
	ЗагрузкаУстановитьВидимостьЭлементовВыбораФайлов(Форма);
	
	ПоказатьЭлементыДиректБанк(Форма);
	
	НастроитьЭлементыДляИнтеграцииСБанком(Форма);
	
	ОбновитьУсловноеОформление(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗагрузкаУстановитьВидимостьЭлементовВыбораФайлов(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ФайлВыгрузки.Видимость             = Форма.РасширениеРаботыСФайламиПодключено;
	Элементы.ДекорацияВыгруженныйФайл.Видимость = Форма.РасширениеРаботыСФайламиПодключено;
	Элементы.ЭлектроннаяВыпискаБанка.Видимость  = Форма.ПрямойОбменСБанками;
	Если Форма.ПрямойОбменСБанками Тогда
		Элементы.СтраницыВыборВыписки.ТекущаяСтраница = Элементы.ВыпискаПоПрямомуОбмену;
	ИначеЕсли Форма.РасширениеРаботыСФайламиПодключено Тогда
		Элементы.СтраницыВыборВыписки.ТекущаяСтраница = Элементы.ВыпискаИзФайлаСРасширением;
	Иначе
		Элементы.СтраницыВыборВыписки.ТекущаяСтраница = Элементы.ВыпискаИзФайлаБезРасширения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопкиЗагрузить(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.КомандаЗагрузить.Доступность = (Форма.КоличествоКЗагрузке > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиДокументов()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		ОбновитьСписокДокументовНаЭкспорт();
	Иначе
		ОчиститьСообщения();
		ДокументыКИмпорту.Очистить();
		
		КоличествоКЗагрузке     = 0;
		СуммаПоступилоКЗагрузке = 0;
		СуммаСписаноКЗагрузке   = 0;
		
		Элементы.ДокументыКИмпортуСуммаПоступило.ТекстПодвала    = "";
		Элементы.ДокументыКИмпортуСуммаСписано.ТекстПодвала      = "";
		
		СброситьСостояниеКомандИмпорта();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьСостояниеКомандИмпорта()
	
	Элементы.КомандаЗагрузить.Доступность                    = Ложь;
	Элементы.ДокументыКИмпортуСоздатьНенайденное.Доступность = Ложь;
	Элементы.ДокументыКИмпортуПоказатьОшибки.Доступность     = Ложь;
	Элементы.ДокументыКИмпортуПоказатьОшибки.Пометка         = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ГотовностьСтроки(Знач ДанныеСтроки, Знач СоздаватьНенайденныеЭлементы)
	
	// Если есть описание ошибки, то строка не готова
	Если НЕ ПустаяСтрока(ДанныеСтроки.ОписаниеОшибок) Тогда
		Готовность = Ложь;
	// Если требуется создавать контрагентов вручную, тогда проверим нужно ли что-то создавать
	ИначеЕсли НЕ СоздаватьНенайденныеЭлементы Тогда
		Готовность = НЕ ТребуетсяСозданиеНенайденныхВСтроке(ДанныеСтроки);
	// Во всех остальных случаях строка готова к загрузке
	Иначе
		Готовность = Истина;
	КонецЕсли;
	
	Возврат Готовность;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииОрганизацияСервер()
	
	Если УчетДенежныхСредствСервер.УстановитьБанковскийСчет(
		Объект.БанковскийСчет, Объект.Организация, ВалютаРегламентированногоУчета) Тогда
		ЗагрузитьНастройкиДляБанковскогоСчета();
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = ИспользоватьНесколькоБанковскихСчетов();
	КонецЕсли;
	
	БанкИНомерСчета(Объект.БанковскийСчет, Банк, НомерСчета);
	
	ВидимостьЭлементовДиректБанк = ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
		Объект.Организация, Объект.БанковскийСчет);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииБанковскийСчет()
	
	// Запомним предыдущий путь к файлу
	ТекущийФайлЗагрузки = Объект.ФайлЗагрузки;
	БылПрямойОбменСБанками = ПрямойОбменСБанками;
	ЗагрузитьНастройкиДляБанковскогоСчета();
	
	ОчиститьЭлектронныеВыписки();
	ОбновитьСпискиДокументов();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		Если БылПрямойОбменСБанками И Не ПрямойОбменСБанками Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайламиИПрочитатьФайл", 0.1, Истина);
		КонецЕсли;
	Иначе
		ПроверитьИзменитьДатуОкончанияЗапросаВыписки();
		
		Если Не РасширениеРаботыСФайламиПодключено И БылПрямойОбменСБанками И Не ПрямойОбменСБанками Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайламиИПрочитатьФайл", 0.1, Истина);
			Возврат;
		КонецЕсли;
		
		// Если файл не изменился, проверим возможно ничего перечитывать не требуется
		Если ТекущийФайлЗагрузки = Объект.ФайлЗагрузки Тогда
			
			Если СоответствиеВыпискиОтбору(АдресХранилищаРаспознанныеДанныеИзБанка, Объект.БанковскийСчет).Соответствует Тогда
				РазместитьНаФормеРаспознанныеДанныеИзБанка(АдресХранилищаРаспознанныеДанныеИзБанка, Ложь);
			КонецЕсли;
			
		Иначе // Загрузим новый файл
			ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайламиИПрочитатьФайл", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДокументыКИмпортуОбновитьИтогиВПодвале()
	
	ДокументыКЗагрузке = ДокументыКИмпорту.Выгрузить(Новый Структура("Загружать", Истина));
	
	КоличествоКЗагрузке     = ДокументыКЗагрузке.Количество();
	СуммаПоступилоКЗагрузке = ДокументыКЗагрузке.Итог("СуммаПоступило");
	СуммаСписаноКЗагрузке   = ДокументыКЗагрузке.Итог("СуммаСписано");
	
КонецПроцедуры

&НаСервере
Процедура ПлатежныеДокументыОбновитьИтогиВПодвале()
	
	Сумма      = 0;
	Количество = 0;
	
	ОтборСтрокКВыгрузке = Новый Структура("Выгружать", Истина);
	СтрокиКВыгрузке     = Объект.ПлатежныеДокументы.НайтиСтроки(ОтборСтрокКВыгрузке);
	Для каждого Строка Из СтрокиКВыгрузке Цикл
		Сумма      = Сумма      + Строка.СуммаДокумента;
		Количество = Количество + 1;
	КонецЦикла;
	
	КоличествоКВыгрузке     = Количество;
	СуммаДокументаКВыгрузке = Сумма;
	
КонецПроцедуры

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Если НастройкиУсловногоОформления <> Неопределено Тогда
		// Условное оформление уже инициализировано.
		Возврат;
	КонецЕсли;
	
	НастройкиУсловногоОформления = Новый Структура();
	
	УсловноеОформление.Элементы.Очистить();
	
	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();
	
	// Условное оформление для полей, расположенных на страницах
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)
	
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ВыгрузкаПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		
		Форма.УстановитьУсловноеОформлениеВыгрузка();
		
	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("ЗагрузкаПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗагрузка Тогда
		
		Форма.УстановитьУсловноеОформлениеЗагрузка();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()
	
	// ДокументыКИмпортуДокументНеЗагружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ДокументыКИмпортуДокумент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокумент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ДокументыКИмпортуСтатьяДДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСтатьяДДС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ИспользоватьСтатьиДДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ДокументыКИмпортуОписаниеОшибок
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуОписаниеОшибок");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ДокументыКИмпорту.ОписаниеОшибок",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ПоказатьОшибкиИмпорта",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВыгрузка() Экспорт
	
	НастройкиУсловногоОформления.Вставить("ВыгрузкаПроинициализировано", Истина);
	
	// ПлатежныеДокументы
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПлатежныеДокументы");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ПлатежныеДокументы.Готовность",
		ВидСравненияКомпоновкиДанных.Больше,
		0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекстБРО);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЗагрузка() Экспорт
	
	НастройкиУсловногоОформления.Вставить("ЗагрузкаПроинициализировано", Истина);
	
	// ДокументыКИмпортуДокументНеЗагружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не загружен'"));
	
	// ДокументыКИмпортуДокумент, ДокументыКИмпортуДокументНеЗагружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокумент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	
	// ДокументыКИмпортуДокумент, ДокументыКИмпортуДокументНеЗагружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокумент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// ДокументыКИмпортуДокумент, ДокументыКИмпортуДокументНеЗагружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокумент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность", 
		ВидСравненияКомпоновкиДанных.Равно, 
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекстБРО);
	
	// ДокументыКИмпортуКонтрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуКонтрагент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.КонтрагентОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Содержит,
		НСтр("ru = 'Не найден'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекстБРО);
	
	// ДокументыКИмпортуКонтрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуКонтрагент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.КонтрагентОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Содержит,
		НСтр("ru = 'Не загружен'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// ДокументыКИмпортуКонтрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуКонтрагент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.КонтрагентОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Содержит,
		НСтр("ru = 'Не указаны реквизиты контрагента'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекстБРО);
	
	// ДокументыКИмпортуКонтрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуКонтрагент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Контрагент",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.КонтрагентОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Заполнено);
			
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// ДокументыКИмпортуКонтрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуКонтрагент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Контрагент",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.КонтрагентОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.КонтрагентОтображениеНенайденного"));
	
	// ДокументыКИмпортуКонтрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуКонтрагент");
	
	ПереводыНаДругойСчет = Новый СписокЗначений;
	ПереводыНаДругойСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета);
	ПереводыНаДругойСчет.Добавить(Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.ВидОперации",
		ВидСравненияКомпоновкиДанных.ВСписке,
		ПереводыНаДругойСчет);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ДокументыКИмпортуСчетКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.СчетКонтрагента",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.СчетКонтрагентаОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.СчетКонтрагентаОтображениеНенайденного"));
	
	// ДокументыКИмпортуСчетКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.СчетКонтрагентаОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Содержит,
		НСтр("ru = 'Не найден'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекстБРО);
	
	// ДокументыКИмпортуСчетКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.СчетКонтрагентаОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Содержит,
		НСтр("ru = 'Не загружен'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.СчетКонтрагентаОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Равно,
		НСтр("ru = 'Не указаны реквизиты расчетного счета'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекстБРО);
	
	// ДокументыКИмпортуСчетКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.СчетКонтрагента",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.СчетКонтрагентаОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Заполнено);
			
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// ДокументыКИмпортуСчетКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Контрагент",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ДокументыКИмпортуДоговор
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДоговор");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	// Для Вида операции "Прочий расход" не будем выделять цветом ненайденный договор
	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"ДокументыКИмпорту.ДоговорОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Равно,
		НСтр("ru = 'Не найден'"));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"ДокументыКИмпорту.ВидОперации",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийРасходСоСчета.Прочее);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ДокументыКИмпорту.ДоговорОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Равно,
		НСтр("ru = 'Не создан'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекстБРО);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// ДокументыКИмпортуДоговор
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДоговор");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Договор",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.ДоговорОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.ДоговорОтображениеНенайденного"));
	
	// ДокументыКИмпортуДоговор
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДоговор");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ДокументыКИмпорту.ДоговорОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Равно,
		НСтр("ru = 'Не найден'"));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ДокументыКИмпорту.ДоговорОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Равно,
		НСтр("ru = 'Не создан'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// ДокументыКИмпортуДоговор
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДоговор");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Контрагент",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ДокументыКИмпортуДоговор
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДоговор");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ВыполненаЗагрузка",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	// Виды операций "без договора".
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Зарплата);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Налоги);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Прочее);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРасходСоСчета.НаРасходы);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРасходСоСчета.КомиссияБанка);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОтПродажиВалюты);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ЛичныеСредстваПредпринимателя);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ДокументыКИмпорту.ВидОперации",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокЗначений);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ДокументыКИмпортуНомерДок
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуНомерДок");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.НомерДокументаНекорректен",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекстБРО);
	
	// ДокументыКИмпортуВидОперации
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуВидОперации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСчетКонтрагента");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ДокументыКИмпорту.ДокументОснование",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ВыполненаЗагрузка",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДоговор");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.ДоговорРазрешеноИзменение",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПодготовитьПротоколИСохранитьРезультаты(АдресТекстаНаСервере)
	
	КоличествоВыведенныхДокументов = Объект.ПлатежныеДокументы.НайтиСтроки(Новый Структура("Выгружать", Истина)).Количество();
	
	// Сохраняем историю
	Запись = РегистрыСведений.ИсторияРаботыСКлиентомБанка.СоздатьМенеджерЗаписи();
	Запись.Период = ТекущаяДатаСеанса();
	Запись.Организация = Объект.Организация;
	Запись.БанковскийСчет = Объект.БанковскийСчет;
	Запись.Загрузка = Ложь;
	
	Запись.КоличествоДокументовВВыписке = КоличествоВыведенныхДокументов;
	Запись.Кодировка = Объект.Кодировка;
	
	Запись.ИсходныйФайл = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресТекстаНаСервере),
		Новый СжатиеДанных(5));
		
	Протокол = ПолучитьПротокол();
	Запись.ПротоколЗагрузки = Новый ХранилищеЗначения(Протокол, Новый СжатиеДанных(5));
		
	Запись.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ЭкспортДокументов

&НаСервере
Функция ОбновитьДокументыНаЭкспортВФоне(Знач ВыгружатьПлатПоручения, Знач ВыгружатьПлатТребования)
	
	Если ПодключенаИнтеграцияСБанком Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение платежных документов для выгрузки'");
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Организация",        Объект.Организация);
	ПараметрыВыполнения.Вставить("ПлатежныеДокументы", Объект.ПлатежныеДокументы.Выгрузить());
	ПараметрыВыполнения.Вставить("НачалоПериода",      Объект.НачалоПериода);
	ПараметрыВыполнения.Вставить("КонецПериода",       Объект.КонецПериода);
	ПараметрыВыполнения.Вставить("БанковскийСчет",     Объект.БанковскийСчет);
	ПараметрыВыполнения.Вставить("СписокДокументов",   СписокДокументов);
	ПараметрыВыполнения.Вставить("ВыгружатьПлатПоручения",  ВыгружатьПлатПоручения);
	ПараметрыВыполнения.Вставить("ВыгружатьПлатТребования", ВыгружатьПлатТребования);
	ПараметрыВыполнения.Вставить("КонтролироватьНекорректныеСимволыВНомере", Объект.КонтролироватьНекорректныеСимволыВНомере);
	Если ПрямойОбменТолькоЗагрузка Тогда
		ПараметрыВыполнения.Вставить("СоглашениеПрямогоОбменаСБанками", Справочники.НастройкиОбменСБанками.ПустаяСсылка());
	Иначе
		ПараметрыВыполнения.Вставить("СоглашениеПрямогоОбменаСБанками", Объект.СоглашениеПрямогоОбменаСБанками);
	КонецЕсли;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Обработки.КлиентБанк.ЗаполнитьДокументыНаЭкспортВФоне",
		ПараметрыВыполнения, ПараметрыЗапуска);
	
	Если ДлительнаяОперация <> Неопределено И ДлительнаяОперация.Статус = "Выполнено" Тогда
		ЗагрузитьПлатежныеДокументыПослеОбновленияВФоне(ДлительнаяОперация);
		Возврат Неопределено;
	Иначе
		УстановитьСостояниеПлатежныхДокументовДляВыгрузки(Ложь);
		Возврат ДлительнаяОперация;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПлатежныеДокументыПослеОбновленияВФоне(Результат)
	
	Если Результат = Неопределено Тогда // задание было отменено
		Возврат;
	КонецЕсли;
	
	УстановитьСостояниеПлатежныхДокументовДляВыгрузки(Истина);
	
	ТекущийДокументДоЗагрузки = ТекущийДокумент();
	
	ДокументыСИзмененнымФлагомВыгрузки = Обработки.КлиентБанк.ДокументыСИзмененнымФлагомВыгрузки(Объект.ПлатежныеДокументы);
	
	ПлатежныеДокументы = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Объект.ПлатежныеДокументы.Очистить();
	Объект.ПлатежныеДокументы.Загрузить(ПлатежныеДокументы);
	
	УстановитьТекущийДокумент(ТекущийДокументДоЗагрузки);
	
	Если ДокументыСИзмененнымФлагомВыгрузки.Количество() > 0 Тогда
		ВосстановитьИзмененияФлаговВыгрузки(ДокументыСИзмененнымФлагомВыгрузки);
	КонецЕсли;
	
	ЕстьСтрокиЭкспортаСОшибками      = Ложь;
	СтатуснаяСтрокаОшибкиПриВыгрузке = "";
	Обработки.КлиентБанк.ПроверитьЗаполнениеТаблицыДокументов(Объект, Объект.ПлатежныеДокументы, ЕстьСтрокиЭкспортаСОшибками);
	
	Элементы.ГруппаСообщенияОбОшибкеПриВыгрузкеСтраницы.Видимость = ЕстьСтрокиЭкспортаСОшибками;
	
	ПлатежныеДокументыОбновитьИтогиВПодвале();
	
КонецПроцедуры

&НаСервере
Функция ТекущийДокумент()
	
	ТекущийДокумент = Неопределено;
	Если Элементы.ПлатежныеДокументы.ТекущаяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = Объект.ПлатежныеДокументы.НайтиПоИдентификатору(Элементы.ПлатежныеДокументы.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущийДокумент = ТекущиеДанные.Документ;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекущийДокумент;
	
КонецФункции

&НаСервере
Процедура УстановитьТекущийДокумент(ТекущийДокумент)
	
	Если ТекущийДокумент <> Неопределено Тогда
		СтрокиТекущегоДокумента = Объект.ПлатежныеДокументы.НайтиСтроки(Новый Структура("Документ", ТекущийДокумент));
		Если СтрокиТекущегоДокумента.Количество() > 0 Тогда
			Элементы.ПлатежныеДокументы.ТекущаяСтрока = СтрокиТекущегоДокумента[0].ПолучитьИдентификатор()
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьИзмененияФлаговВыгрузки(ДокументыСИзмененнымФлагомВыгрузки)
	
	Для Каждого ПлатежныйДокумент Из Объект.ПлатежныеДокументы Цикл
		СохраненноеЗначениеВыгружать = ДокументыСИзмененнымФлагомВыгрузки.Получить(ПлатежныйДокумент.Документ);
		Если СохраненноеЗначениеВыгружать <> Неопределено Тогда
			ПлатежныйДокумент.Выгружать = СохраненноеЗначениеВыгружать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуОбновленияДокументовНаЭкспортВФоне(ДлительнаяОперация)
	
	УстановитьСостояниеПлатежныхДокументовДляВыгрузки(Истина);
	
	Текст = НСтр("ru = 'Ошибка при заполнении списка документов для выгрузки:'");
	Текст = Текст + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
	ВызватьИсключение Текст;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеПлатежныхДокументовДляВыгрузки(ПлатежныеДокументыПодготовлены)
	
	Элементы.ПлатежныеДокументы.Видимость = ПлатежныеДокументыПодготовлены;
	Элементы.ГруппаОжиданиеЗаполненияПлатежныхДокументов.Видимость = НЕ ПлатежныеДокументыПодготовлены;
	Элементы.КомандаВыгрузить.Доступность = ПлатежныеДокументыПодготовлены;
	Элементы.ГруппаСообщенияОбОшибкеПриВыгрузкеСтраницы.Видимость = ПлатежныеДокументыПодготовлены;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДокументовНаЭкспорт(Очищать = Истина)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ГруппаВыгрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Очищать Тогда
		ОчиститьСообщения();
		Объект.ПлатежныеДокументы.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ВыгружатьПлатежноеПоручение И НЕ Объект.ВыгружатьПлатежноеТребование Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо отметить хотя бы один из видов платежных документов.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", "Банковский счет");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.БанковскийСчет");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", "Конец периода выгрузки");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.КонецПериода");
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперацияЗаполненияДокументовНаЭкспорт = ОбновитьДокументыНаЭкспортВФоне(Объект.ВыгружатьПлатежноеПоручение, Объект.ВыгружатьПлатежноеТребование);
	
	ЗапуститьПроверкуФоновогоЗаданияОбновитьСписокДокументовНаЭкспорт(ДлительнаяОперацияЗаполненияДокументовНаЭкспорт);
	
КонецПроцедуры

&НаСервере
Процедура ПлатежныеДокументыУстановитьОтметку(Отметка)
	
	Для каждого СтрокаДокумента Из Объект.ПлатежныеДокументы Цикл
		СтрокаДокумента.Выгружать = Отметка;
	КонецЦикла;
	
	ПлатежныеДокументыОбновитьИтогиВПодвале();
	
КонецПроцедуры

// Функция вызывает функцию выгрузки документов из модуля объекта.
//
&НаСервере
Функция ВыгрузитьДокументы(ВТекстовомФОрмате = Ложь)
	
	Возврат Обработки.КлиентБанк.Выгрузить(ТаблицаДокументов.Выгрузить(),
											Объект.ПлатежныеДокументы,
											Объект.Кодировка,
											Объект.Программа,
											Объект.НачалоПериода,
											Объект.КонецПериода,
											Объект.БанковскийСчет,
											ВерсияФормата,
											УникальныйИдентификатор,
											ВТекстовомФОрмате);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьВидыДоговоров(Знач ВидОперации)
	
	Возврат УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокДокументовНаЭкспортЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда // задание было отменено
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ПоказатьОшибкуОбновленияДокументовНаЭкспортВФоне(ДлительнаяОперация);
	Иначе
		ЗагрузитьПлатежныеДокументыПослеОбновленияВФоне(ДлительнаяОперация);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуФоновогоЗаданияОбновитьСписокДокументовНаЭкспорт(ДлительнаяОперация)
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьСписокДокументовНаЭкспортЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИсправитьСчетаКонтрагентовИОбновитьВФоне(РасчетныйСчетДоИсправления, КонтрагентПослеИсправления, РасчетныйСчетПослеИсправления)
	
	Для Каждого ПлатежныйДокумент Из Объект.ПлатежныеДокументы Цикл
		
		Если ПлатежныйДокумент.КонтрагентСчет = РасчетныйСчетДоИсправления Тогда
			
			УстановитьНовыйРасчетныйСчетКонтрагента(ПлатежныйДокумент.Документ, КонтрагентПослеИсправления, РасчетныйСчетПослеИсправления);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбновитьДокументыНаЭкспортВФоне(Объект.ВыгружатьПлатежноеПоручение, Объект.ВыгружатьПлатежноеТребование);
	
КонецФункции

&НаСервере
Процедура УстановитьНовыйРасчетныйСчетКонтрагента(Документ, Контрагент, СчетКонтрагента)
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	
	ДокументОбъект.Контрагент      = Контрагент;
	ДокументОбъект.СчетКонтрагента = СчетКонтрагента;
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствСервер.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		ДокументОбъект.Организация,
		ДокументОбъект.БанковскийСчет,
		ДокументОбъект.Контрагент,
		ДокументОбъект.СчетКонтрагента,
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога,
		ДокументОбъект.Дата);
	
	Если ДокументОбъект.КПППолучателя <> АвтоЗначенияРеквизитов.КПППолучателя Тогда
		ЗаполнитьЗначенияСвойств(ДокументОбъект, АвтоЗначенияРеквизитов, "ТекстПолучателя, ИННПолучателя, КПППолучателя", "");
	Иначе
		ЗаполнитьЗначенияСвойств(ДокументОбъект, АвтоЗначенияРеквизитов, "ТекстПолучателя");
	КонецЕсли;
	
	ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьСчетаКонтрагентовЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") 
		И РезультатВыполнения.Свойство("ПерезаполнитьКонтрагента") Тогда
		
		ТекущиеДанные = Элементы.ПлатежныеДокументы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			РасчетныйСчетДоИсправления    = ТекущиеДанные.КонтрагентСчет;
			РасчетныйСчетПослеИсправления = РезультатВыполнения.СчетКонтрагента;
			
			ДлительнаяОперация = ИсправитьСчетаКонтрагентовИОбновитьВФоне(РасчетныйСчетДоИсправления,
				РезультатВыполнения.Контрагент, РасчетныйСчетПослеИсправления);
			
			Если ДлительнаяОперация <> Неопределено Тогда
				ЗапуститьПроверкуФоновогоЗаданияОбновитьСписокДокументовНаЭкспорт(ДлительнаяОперация);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзБанка

#Область ПолучениеВыписки

&НаКлиенте
Процедура ПрочитатьФайлВыпискиНаКлиенте(ОписаниеФайла = Неопределено, Кодировка = Неопределено) Экспорт
	
	Если Не ПрямойОбменСБанками Тогда
		Если РасширениеРаботыСФайламиПодключено
			И ТипЗнч(ОписаниеФайла) = Тип("ОписаниеПереданногоФайла")
			И ЗначениеЗаполнено(ОписаниеФайла.ПолноеИмя) Тогда
			Объект.ФайлЗагрузки = ОписаниеФайла.ПолноеИмя;
		Иначе
			Объект.ФайлЗагрузки = ОписаниеФайла.Имя;
		КонецЕсли;
		
		ОбновитьСпискиДокументов();
	КонецЕсли;
	
	ДлительнаяОперация = ПрочитатьФайлВыпискиНаСервере(ОписаниеФайла, Кодировка);
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	ИначеЕсли ДлительнаяОперация.Статус = "ЗапроситьВыпискуЗаново" Тогда
		ЗапроситьЭлектроннуюВыпискуБанка();
	Иначе
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Чтение данных из банка'");
		
		Обработчик = Новый ОписаниеОповещения("ПослеЧтенияБанковскойВыпискиВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияБанковскойВыпискиВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьРезультатПрочитаннойВыписки(ДлительнаяОперация.АдресРезультата);
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПрочитаннойВыписки(АдресХранилища)
	
	АдресХранилищаРаспознанныеДанныеИзБанка = АдресХранилища;
	СоответствиеВыпискиОтбору = СоответствиеВыпискиОтбору(АдресХранилища, Объект.БанковскийСчет, Объект.Организация);
	ВыполненаЗагрузка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет)
		ИЛИ ЗначениеЗаполнено(Объект.БанковскийСчет) И СоответствиеВыпискиОтбору.Соответствует И СоответствиеВыпискиОтбору.БанковскиеСчетаВыписки.Количество() = 1 Тогда
		
		Объект.БанковскийСчет  = СоответствиеВыпискиОтбору.БанковскийСчет;
		Если СоответствиеВыпискиОтбору.Свойство("Организация") И (Объект.Организация <> СоответствиеВыпискиОтбору.Организация) Тогда
			Объект.Организация = СоответствиеВыпискиОтбору.Организация;
		КонецЕсли;
		РазместитьНаФормеРаспознанныеДанныеИзБанка(АдресХранилища);
		
	ИначеЕсли СоответствиеВыпискиОтбору.БанковскиеСчетаВыписки.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатПрочитаннойВыпискиЗавершение", ЭтотОбъект, СоответствиеВыпискиОтбору);
		
		КолВоСчетов = СоответствиеВыпискиОтбору.БанковскиеСчетаВыписки.Количество();
		СтруктураПараметровТекста = Новый Структура;
		СтруктураПараметровТекста.Вставить("ШаблонДругимДругому", ?(КолВоСчетов = 1, "другому счету", "другим счетам"));
		СтруктураПараметровТекста.Вставить("ПереченьСчетов",    СтрСоединить(Новый ФиксированныйМассив(СоответствиеВыпискиОтбору.БанковскиеСчетаВыписки), Символы.ПС));
		СтруктураПараметровТекста.Вставить("ВыбранныйСчет",     Объект.БанковскийСчет);
		
		Если СоответствиеВыпискиОтбору.Соответствует Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				НСтр("ru = 'В файле содержатся выписки по нескольким счетам:
				|
				|[ПереченьСчетов]
				|
				|Для загрузки выбран счет [ВыбранныйСчет].
				|По каким счетам показать операции?'"),
				СтруктураПараметровТекста);
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да,     "По всем");
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "По выбранному");
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				НСтр("ru = 'Для загрузки выбран счет [ВыбранныйСчет]
				|
				|В файле содержатся выписки по [ШаблонДругимДругому]:
				|
				|[ПереченьСчетов]'"),
				СтруктураПараметровТекста);
				
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да,     "Прочитать");
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
		КонецЕсли;
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			ТекстВопроса,
			СписокКнопок);
	Иначе
		РазместитьНаФормеРаспознанныеДанныеИзБанка(АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПрочитаннойВыпискиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		//Объект.БанковскийСчет = ДополнительныеПараметры.БанковскийСчет;
		Объект.Организация = ДополнительныеПараметры.Организация;
		Если Объект.БанковскийСчет <> ДополнительныеПараметры.БанковскийСчет Тогда
			Объект.БанковскийСчет = ДополнительныеПараметры.БанковскийСчет;
			ЗагрузитьНастройкиДляБанковскогоСчета();
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Соответствует ИЛИ Результат = КодВозвратаДиалога.Да Тогда
		РазместитьНаФормеРаспознанныеДанныеИзБанка(АдресХранилищаРаспознанныеДанныеИзБанка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьТекущуюСтроку()
	
	Если ДокументыКИмпорту_ТекущаяСтрока > 0 Тогда
		ТекущаяСтрока = ДокументыКИмпорту[ДокументыКИмпорту_ТекущаяСтрока];
		Если ТекущаяСтрока <> Неопределено Тогда
			Элементы.ДокументыКИмпорту.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ДокументыКИмпорту_ТекущаяСтрока = 0;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьФайлВыпискиНаСервере(ОписаниеФайла, Кодировка)
	
	Если ПрямойОбменСБанками Тогда
		Если ОписаниеФайла = Неопределено Тогда
			Результат = Новый Структура("Статус");
			Если Не ЗначениеЗаполнено(АдресВыписки) Тогда
				Результат.Статус = "Ошибка";
				Результат.Вставить("КраткоеПредставлениеОшибки",   "");
				Результат.Вставить("ПодробноеПредставлениеОшибки", "");
				Возврат Результат;
			КонецЕсли;
			
			ВыпискаБанка = ПолучитьИзВременногоХранилища(АдресВыписки);
			Если ВыпискаБанка = Неопределено Тогда
				Результат.Статус = "ЗапроситьВыпискуЗаново";
				АдресВыписки = "";
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если РасширениеРаботыСФайламиПодключено
			И ТипЗнч(ОписаниеФайла) = Тип("ОписаниеПереданногоФайла")
			И ЗначениеЗаполнено(ОписаниеФайла.ПолноеИмя) Тогда
			ФайлЗагрузки = ОписаниеФайла.ПолноеИмя;
		Иначе
			ФайлЗагрузки = ОписаниеФайла.Имя;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Настройки", НастройкиЗагрузки());
	СтруктураПараметров.Вставить("ФайлЗагрузки", ФайлЗагрузки);
	СтруктураПараметров.Настройки.Кодировка = Кодировка;
	Если ЗначениеЗаполнено(ВыпискаБанка) Тогда
		СтруктураПараметров.Вставить("ВыпискаБанка", ВыпискаБанка);
	ИначеЕсли ОписаниеФайла <> Неопределено И Не ПустаяСтрока(ОписаниеФайла.Хранение) Тогда
		СтруктураПараметров.Вставить("ДвоичныеДанные", ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение));
		ОбработанныйТекст = ПолучитьСтрокуИзДвоичныхДанных(СтруктураПараметров.ДвоичныеДанные, Кодировка);
	КонецЕсли;
	
	СведенияОВладельцеБанковскогоСчетаИзКонтекста = Новый Структура;
	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("Организация",               Новый Массив);
	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("БанковскийСчетОрганизации", Новый Массив);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.Организация.Добавить(Объект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.БанковскийСчетОрганизации.Добавить(Объект.БанковскийСчет);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("СведенияОВладельцеБанковскогоСчетаИзКонтекста", СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Чтение данных из банка'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	НастройкиЗапуска.КлючФоновогоЗадания = Обработки.КлиентБанк.КлючФоновогоЗаданияЗагрузкаВыписки();
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.КлиентБанк.ФоноваяРаспознатьДанныеИзБанка",
		СтруктураПараметров,
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИзВыписки()
	
	ОбновитьСпискиДокументов();
	
	Если ПрямойОбменСБанками Тогда
		ЗапроситьЭлектроннуюВыпискуБанка(Истина);
	Иначе
		ОбновитьВыпискуЧерезФайл();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьЭлектроннуюВыпискуБанка(Обновить = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСпискиДокументов();
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Нстр("ru = 'Не выбран банковский счет'")
			,, "Объект.БанковскийСчет");
		Возврат;
	КонецЕсли;
	
	// Проверим период
	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Нстр("ru = 'Не заполнена дата начала периода'")
			,, "Объект.НачалоПериода");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Нстр("ru = 'Не заполнена дата окончания периода'")
			,, "Объект.КонецПериода");
		Возврат;
	КонецЕсли;
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если Объект.КонецПериода > КонецДня(ТекущаяДатаСеанса) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Дата окончания периода не может быть больше текущей даты'")
			,, "Объект.КонецПериода");
		Возврат;
	ИначеЕсли Объект.НачалоПериода > Объект.КонецПериода Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Дата начала не может быть больше даты окончания периода'")
			,, "Объект.НачалоПериода");
		Возврат;
	КонецЕсли;
	
	Если Обновить И ВыпискиБанка.Количество() > 0 И ЗначениеЗаполнено(АдресВыписки) И ЭтоАдресВременногоХранилища(АдресВыписки) Тогда
		ПрочитатьФайлВыпискиНаКлиенте();
	Иначе
		ДополнительныеПараметры = Новый Структура;
		Оповещение = Новый ОписаниеОповещения("ЗапроситьЭлектроннуюВыпискуБанкаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбменСБанкамиКлиент.ПолучитьВыписку(Оповещение, Объект.БанковскийСчет, Объект.НачалоПериода, Объект.КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьЭлектроннуюВыпискуБанкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат)Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Успех Тогда
		Если Не ДополнительныеПараметры.Свойство("ОкноУжеПоказано") Тогда
			ДополнительныеПараметры.Вставить("ОкноУжеПоказано", Истина);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаЗагрузитьВыпискуИзФайла",
				ЭтотОбъект, ДополнительныеПараметры);
			СписокКнопок       = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да,     НСтр("ru = 'Загрузить выписку из файла'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Попробовать позже'"));
			ПоказатьВопрос(
				ОписаниеОповещения,
				НСтр("ru = 'Вы отменили загрузку выписки с помощью 1С:ДиректБанк.
					|Хотите загрузить выписку из файла?'"),
				СписокКнопок,
				,
				КодВозвратаДиалога.Да,
				НСтр("ru = 'Загрузка банковской выписки'"));
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ОчиститьЭлектронныеВыписки();
	Если Результат.Выписки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыпискиБанка.ЗагрузитьЗначения(Результат.Выписки);
	
	АдресВыписки = ЭлектронноеВзаимодействиеБПВызовСервера.ДанныеВыписокБанкаВКоллекцию(Результат.Выписки);
	ПрочитатьФайлВыпискиНаКлиенте();
	
	ЭлектроннаяВыпискаБанка = ТекстСсылкиНаЭлектронныеВыписки(Объект.НачалоПериода, Объект.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗагрузитьВыпискуИзФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбменСБанкомКлиент.ВыбратьИЗагрузитьФайл(ЭтотОбъект, Объект.Кодировка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСсылкиНаЭлектронныеВыписки(НачалоПериода, КонецПериода)
	
	ШаблонСтроки = НСтр("ru = 'Выписка банка за период с %1 по %2'");
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
		Формат(НачалоПериода, "ДФ=dd.MM.yyyy"), Формат(КонецПериода, "ДФ=dd.MM.yyyy"));
	
КонецФункции

&НаКлиенте
Процедура ОбновитьВыпискуЧерезФайл()
	
	Если РасширениеРаботыСФайламиПодключено И ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		// Файл определен - можно начинаем чтение
		ОбменСБанкомКлиент.ЗагрузитьВыбранныйФайл(Объект.ФайлЗагрузки, ЭтотОбъект, Объект.Кодировка);
	Иначе
		// Файл не определен - запросим файл у пользователя
		ОбменСБанкомКлиент.ВыбратьИЗагрузитьФайл(ЭтотОбъект, Объект.Кодировка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РазмещениеВыпискиНаФорме

&НаСервере
Процедура РазместитьНаФормеРаспознанныеДанныеИзБанка(АдресРезультата, ВыводитьСообщения = Истина)
	
	Если ПустаяСтрока(АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	РаспознанныеДанныеИзБанка = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РаспознанныеДанныеИзБанка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Разместим прочитанные данные на форме
	ЗаполнитьДокументыКИмпортуПоРаспознаннымДаннымИзБанка(
		ДокументыКИмпорту, РаспознанныеДанныеИзБанка, ВыводитьСообщения);
	
	АдресХранилищаРаспознанныеДанныеИзБанка = ПоместитьВоВременноеХранилище(
		РаспознанныеДанныеИзБанка, УникальныйИдентификатор);
	
	// Обновим связанные данные формы
	ПоказатьОшибкиНаСервере(Ложь); // Сбросим отбор по ошибкам
	ДокументыКИмпортуОбновитьИтогиВПодвале();
	Элементы.ДокументыКИмпортуСуммаПоступило.ТекстПодвала = Формат(
		ДокументыКИмпорту.Итог("СуммаПоступило"), "ЧЦ=15; ЧДЦ=2");
	Элементы.ДокументыКИмпортуСуммаСписано.ТекстПодвала   = Формат(
		ДокументыКИмпорту.Итог("СуммаСписано"), "ЧЦ=15; ЧДЦ=2");
	Элементы.ДекорацияЗагружаемыйФайл.Доступность = Истина;
	// Если отбор по банковскому счету не установлен, то покажем колонку в таблице
	Элементы.ДокументыКИмпортуБанковскийСчет.Видимость = Не ЗначениеЗаполнено(Объект.БанковскийСчет);
	УстановитьДоступностьКнопкиЗагрузить(ЭтотОбъект);
	Если Объект.СоздаватьНенайденныеЭлементы Тогда
		Элементы.ДокументыКИмпортуПоказатьОшибки.Видимость       = Истина;
		Элементы.ДокументыКИмпортуПоказатьОшибки.Доступность     = ЕстьОшибкиВДокументыКИмпорту();
		Элементы.ДокументыКИмпортуСоздатьНенайденное.Видимость   = Ложь;
		ПоказатьОшибкиИмпорта = Ложь;
	Иначе
		Элементы.ДокументыКИмпортуСоздатьНенайденное.Видимость   = Истина;
		Элементы.ДокументыКИмпортуСоздатьНенайденное.Доступность = ТребуетсяСозданиеНенайденныхВТаблице(ДокументыКИмпорту);
		Элементы.ДокументыКИмпортуПоказатьОшибки.Видимость       = Ложь;
		ПоказатьОшибкиИмпорта = Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РазместитьПредупреждение(СтрокаТаблицы, ПредупрежденияРаспознавания = Неопределено, РезультатСозданияДокументов = Неопределено)
	
	МассивПредупреждений = Новый Массив;
	Если ПредупрежденияРаспознавания <> Неопределено Тогда
		Для Каждого Предупреждение Из ПредупрежденияРаспознавания Цикл
			Если Предупреждение.КодПроблемы = "СлучайныйВыбор" Тогда
				МассивПредупреждений.Добавить(Предупреждение.Текст);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатСозданияДокументов <> Неопределено Тогда
		РезультатСозданияДокумента = РезультатСозданияДокументов[СтрокаТаблицы.ИдентификаторОперации];
		Если РезультатСозданияДокумента <> Неопределено И НЕ РезультатСозданияДокумента.Успешно Тогда
			МассивПредупреждений.Добавить(РезультатСозданияДокумента.КраткоеПредставлениеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТаблицы.ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийРасходСоСчета") Тогда
		ТребуетсяКонтрагент = Документы.РасходСоСчета.КонтрагентДолженБытьЗаполнен(СтрокаТаблицы.ВидОперации);
	Иначе
		ТребуетсяКонтрагент = Документы.ПоступлениеНаСчет.КонтрагентДолженБытьЗаполнен(СтрокаТаблицы.ВидОперации);
	КонецЕсли;
	
	Если ТребуетсяКонтрагент И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.КонтрагентСсылкаДляНового) Тогда
		МассивПредупреждений.Добавить(НСтр("ru='Не заполнены реквизиты контрагента'"));
	КонецЕсли;
	
	Если СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет")
		И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетКонтрагента) 
		И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетКонтрагентаСсылкаДляНового) Тогда
		МассивПредупреждений.Добавить(НСтр("ru='Не заполнен счет получателя'"));
	КонецЕсли;
	Если СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета")
		И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетКонтрагента) 
		И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетКонтрагентаСсылкаДляНового) Тогда
		МассивПредупреждений.Добавить(НСтр("ru='Не заполнен счет отправителя'"));
	КонецЕсли;
	
	Если МассивПредупреждений.Количество() > 0 Тогда
		СтрокаТаблицы.ОписаниеОшибок = СтрСоединить(МассивПредупреждений, "; ");
		СтрокаТаблицы.ЕстьОшибка     = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыКИмпортуПоРаспознаннымДаннымИзБанка(ДокументыКИмпорту, РаспознанныеДанныеИзБанка, ВыводитьСообщения)
	
	ДокументыКИмпорту.Очистить();
	
	Если ВыводитьСообщения Тогда
		// Сообщим пользователю об ошибках в выписке
		Для Каждого ОшибкаГруппировкиВыписки Из РаспознанныеДанныеИзБанка.ПротоколГруппировкиВыписки Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаГруппировкиВыписки.ПолноеОписание);
		КонецЦикла;
	КонецЕсли;
	
	Если РаспознанныеДанныеИзБанка.РаспознанныеВыписки.Количество() = 1
		И Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Для Каждого РаспознаннаяВыписка Из РаспознанныеДанныеИзБанка.РаспознанныеВыписки Цикл
			Объект.БанковскийСчет = РаспознаннаяВыписка.Значение.ВладелецСчета.БанковскийСчет;
			ЗагрузитьНастройкиДляБанковскогоСчета();
		КонецЦикла;	
	КонецЕсли;	
	
	НомерСтроки = 1;
	Для Каждого КлючИЗначение Из РаспознанныеДанныеИзБанка.Выписки Цикл
		
		ИдентификаторВыписки = КлючИЗначение.Ключ;
		Выписка              = КлючИЗначение.Значение;
		РаспознаннаяВыписка  = РаспознанныеДанныеИзБанка.РаспознанныеВыписки[ИдентификаторВыписки];
		Если РаспознаннаяВыписка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПредупреждениеНеНайденБанковскийСчет = РаспознаннаяВыписка.Предупреждения.Найти("БанковскийСчетНеНайден", "КодПроблемы");
		Если ПредупреждениеНеНайденБанковскийСчет <> Неопределено Тогда
			Если ВыводитьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПредупреждениеНеНайденБанковскийСчет.Текст);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Ограничим загружаемую выписку
		БанковскийСчет = РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет;
		Если ЗначениеЗаполнено(Объект.БанковскийСчет) И БанковскийСчет <> Объект.БанковскийСчет Тогда
			Продолжить;
		КонецЕсли;
		
		ВалютаСчета = РаспознаннаяВыписка.ВладелецСчета.ВалютаСчета;
		
		ДанныеДокументов = ДанныеДокументов(Выписка, РаспознаннаяВыписка);
		
		Для Каждого Операция Из Выписка.Операции Цикл
			
			СтрокаТаблицы                           = ДокументыКИмпорту.Добавить();
			СтрокаТаблицы.ИдентификаторВыписки      = ИдентификаторВыписки;
			СтрокаТаблицы.Загружать                 = Истина;
			СтрокаТаблицы.НомерСтроки               = НомерСтроки;
			СтрокаТаблицы.БанковскийСчетОрганизации = БанковскийСчет;
			СтрокаТаблицы.ВалютаСчетаОрганизации    = ВалютаСчета;
			НомерСтроки                             = НомерСтроки + 1;
			
			// Заполним по строкам выписки
			СтрокаТаблицы.ДатаПроведения            = Операция.ДатаИсполнения;
			СтрокаТаблицы.НомерДок                  = Операция.НомерДокумента;
			СтрокаТаблицы.НазначениеПлатежа         = Операция.НазначениеПлатежа;
			СтрокаТаблицы.ИдентификаторОперации     = Операция.Идентификатор;
			СтрокаТаблицы.СтрокаСекции			    = Операция.СтрокаСекции;
			
			Если Операция.ПоступилоСписано = "Поступило" Тогда
				СтрокаТаблицы.СуммаПоступило = Операция.Сумма;
			Иначе
				СтрокаТаблицы.СуммаСписано   = Операция.Сумма;
			КонецЕсли;
			
			// Заполним по строкам распознанной выписки
			РаспознаннаяОперация = РаспознаннаяВыписка.Операции.Найти(Операция.Идентификатор, "Идентификатор");
			Если РаспознаннаяОперация = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.ДокументОснование  = РаспознаннаяОперация.ПлатежноеПоручение;
			СтрокаТаблицы.Документ           = РаспознаннаяОперация.Ссылка;
			
			ХозяйственнаяОперация = РаспознаннаяОперация.ХозяйственнаяОперация;
			ДанныеДокумента       = ДанныеДокументов[Операция.Идентификатор];
			Если ХозяйственнаяОперация <> Неопределено Тогда
				ЗаполнитьСтрокуПоХозяйственнойОперации(РаспознанныеДанныеИзБанка, СтрокаТаблицы, ХозяйственнаяОперация);
			ИначеЕсли ДанныеДокумента <> Неопределено Тогда
				ЗаполнитьСтрокуПоДаннымДокумента(СтрокаТаблицы, ДанныеДокумента);
			КонецЕсли;
			
			СтрокаТаблицы.ДоговорРазрешеноИзменение =
				Не (ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование) И ЗначениеЗаполнено(СтрокаТаблицы.Договор));
			
			// Покажем ошибки создания документов если они есть
			Если РаспознанныеДанныеИзБанка.Свойство("СозданиеДокументов") Тогда
				РезультатСозданияДокументов = РаспознанныеДанныеИзБанка.СозданиеДокументов[ИдентификаторВыписки];
			Иначе
				РезультатСозданияДокументов = Неопределено;
			КонецЕсли;
			
			ЗаполнитьДанныеВСтрокеДокументыКИмпортуПоДаннымСтрокиСекции(Операция.СтрокаСекции, СтрокаТаблицы);
			
			РазместитьПредупреждение(СтрокаТаблицы, РаспознаннаяОперация.Предупреждения, РезультатСозданияДокументов);
			ПодготовитьОтображениеПредупреждений(СтрокаТаблицы, Объект.СоздаватьНенайденныеЭлементы);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВСтрокеДокументыКИмпортуПоДаннымСтрокиСекции(СтрокаСекции, СтрокаТаблицы)
	
	Исключения = "";
	Если ЗначениеЗаполнено(СтрокаТаблицы.Документ) И Не ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
		Исключения = "Документ";
	КонецЕсли;
	
	МенялсяКонтрагент = Ложь;
	Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент)
		И ТипЗнч(СтрокаТаблицы.Контрагент) = Тип("СправочникСсылка.Контрагенты")
		И ТипЗнч(СтрокаСекции.Контрагент) = Тип("Строка") Тогда
		Исключения = ?(Исключения = "", "", Исключения + ", ") + "Контрагент";
		МенялсяКонтрагент = Истина;
	КонецЕсли;
	
	Если МенялсяКонтрагент Или
		ЗначениеЗаполнено(СтрокаТаблицы.Договор)
		И Не ЗначениеЗаполнено(СтрокаСекции.Договор) Тогда
		Исключения = ?(Исключения = "", "", Исключения + ", ") + "Договор";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаСекции, , Исключения);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуПоХозяйственнойОперации(РаспознанныеДанныеИзБанка, СтрокаТаблицы, ХозяйственнаяОперация)
	
	ШаблоныТекстов = Новый Структура;
	ШаблоныТекстов.Вставить("КонтрагентРасчетныйСчет");
	ШаблоныТекстов.Вставить("Договор");
	Если Объект.СоздаватьНенайденныеЭлементы Тогда
		ШаблоныТекстов.КонтрагентРасчетныйСчет = НСтр("ru = 'Не загружен (%1)'");
		ШаблоныТекстов.Договор                 = НСтр("ru = 'Не создан'");
	Иначе
		ШаблоныТекстов.КонтрагентРасчетныйСчет = НСтр("ru = 'Не найден (%1)'");
		ШаблоныТекстов.Договор                 = НСтр("ru = 'Не найден'");
	КонецЕсли;
	
	Если ХозяйственнаяОперация.Свойство("ВидОперацииДокумента") Тогда
		СтрокаТаблицы.ВидОперации = ХозяйственнаяОперация.ВидОперацииДокумента;
	КонецЕсли;
	Если ХозяйственнаяОперация.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
		СтрокаТаблицы.СтатьяДДС   = ХозяйственнаяОперация.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	// Контрагент
	Если ТипЗнч(СтрокаТаблицы.ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийРасходСоСчета") Тогда
		ТребуетсяКонтрагент = Документы.РасходСоСчета.КонтрагентДолженБытьЗаполнен(СтрокаТаблицы.ВидОперации);
	Иначе
		ТребуетсяКонтрагент = Документы.ПоступлениеНаСчет.КонтрагентДолженБытьЗаполнен(СтрокаТаблицы.ВидОперации);
	КонецЕсли;
	Если ХозяйственнаяОперация.Свойство("Контрагент") Тогда
		РаспознанныйКонтрагент = ХозяйственнаяОперация.Контрагент;
		НовыйКонтрагент = ИдентификацияУчастниковБанковскихОпераций.ОписаниеНовогоОбъекта(
			РаспознанныйКонтрагент,
			РаспознанныеДанныеИзБанка.УчастникиОпераций);
		
		Если ЗначениеЗаполнено(РаспознанныйКонтрагент) Тогда
			Если НовыйКонтрагент = Неопределено Тогда
				СтрокаТаблицы.Контрагент = РаспознанныйКонтрагент;
				СтрокаТаблицы.КонтрагентОтображениеНенайденного = "";
				СтрокаТаблицы.РеквизитыКонтрагента = НовыйОписаниеКонтрагента();
			Иначе
				СтрокаТаблицы.КонтрагентСсылкаДляНового = РаспознанныйКонтрагент;
				ТипСсылкиКонтрагенты = Тип("СправочникСсылка.Контрагенты");
				Если ТипЗнч(РаспознанныйКонтрагент) = ТипСсылкиКонтрагенты Тогда
					СтрокаТаблицы.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
					СтрокаТаблицы.КонтрагентОтображениеНенайденного = СтрШаблон(ШаблоныТекстов.КонтрагентРасчетныйСчет, НовыйКонтрагент.НаименованиеПолное);
					
					НовыйКонтрагентОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.ОписаниеСсылки(
						РаспознанныйКонтрагент, РаспознанныеДанныеИзБанка.УчастникиОпераций);
					СтрокаТаблицы.РеквизитыКонтрагента = НовыйОписаниеКонтрагента();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы.РеквизитыКонтрагента, НовыйКонтрагент);
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы.РеквизитыКонтрагента, НовыйКонтрагентОписаниеСсылки);
					
					НастройкиЗаполнения = РаспознанныеДанныеИзБанка.Настройки.ЗаполнениеНовыхЭлементов[ТипСсылкиКонтрагенты];
					Если НастройкиЗаполнения <> Неопределено Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтрокаТаблицы.РеквизитыКонтрагента, НастройкиЗаполнения, Истина);
					КонецЕсли;
				ИначеЕсли ТипЗнч(РаспознанныйКонтрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
					Наименование = СокрЛП(СтрЗаменить(НовыйКонтрагент.Наименование, НовыйКонтрагент.ИНН, ""));
					СтрокаТаблицы.Контрагент = Справочники.ФизическиеЛица.ПустаяСсылка();
					СтрокаТаблицы.КонтрагентОтображениеНенайденного = СтрШаблон(ШаблоныТекстов.КонтрагентРасчетныйСчет, Наименование);
					СтрокаТаблицы.РеквизитыКонтрагента = НовыйОписаниеКонтрагента();
					СтрокаТаблицы.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					СтрокаТаблицы.ДоговорОтображениеНенайденного = "";
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы.РеквизитыКонтрагента, НовыйКонтрагент);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТребуетсяКонтрагент Тогда
		СтрокаТаблицы.Контрагент = Новый(УчетДенежныхСредствКлиентСервер.ТипКонтрагентаПоВидуОперации(СтрокаТаблицы.ВидОперации));
		СтрокаТаблицы.КонтрагентОтображениеНенайденного = НСтр("ru = 'Не указаны реквизиты контрагента'");
		СтрокаТаблицы.РеквизитыКонтрагента = НовыйОписаниеКонтрагента();
	КонецЕсли;
	
	// Счет контрагента
	Если ХозяйственнаяОперация.Свойство("БанковскийСчетКонтрагента") Тогда
		РаспознанныйСчетКонтрагента = ХозяйственнаяОперация.БанковскийСчетКонтрагента;
		Если ЗначениеЗаполнено(РаспознанныйСчетКонтрагента) Тогда
			НовыйСчетКонтрагента = ИдентификацияУчастниковБанковскихОпераций.ОписаниеНовогоОбъекта(
				РаспознанныйСчетКонтрагента,
				РаспознанныеДанныеИзБанка.УчастникиОпераций);
			Если НовыйСчетКонтрагента = Неопределено Тогда
				СтрокаТаблицы.СчетКонтрагента = РаспознанныйСчетКонтрагента;
			Иначе
				СтрокаТаблицы.СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
				СтрокаТаблицы.СчетКонтрагентаСсылкаДляНового = РаспознанныйСчетКонтрагента;
				СтрокаТаблицы.СчетКонтрагентаОтображениеНенайденного = СтрШаблон(ШаблоныТекстов.КонтрагентРасчетныйСчет, НовыйСчетКонтрагента.НомерСчета);
			КонецЕсли;
		Иначе
			СтрокаТаблицы.СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
			СтрокаТаблицы.СчетКонтрагентаСсылкаДляНового = РаспознанныйСчетКонтрагента;
			СтрокаТаблицы.СчетКонтрагентаОтображениеНенайденного = НСтр("ru = 'Не найден'");
		КонецЕсли;
	ИначеЕсли ТребуетсяКонтрагент Тогда
		СтрокаТаблицы.СчетКонтрагентаОтображениеНенайденного = НСтр("ru = 'Не указаны реквизиты расчетного счета'");
	КонецЕсли;
	
	// Договор
	Если ХозяйственнаяОперация.Свойство("ДоговорКонтрагента") Тогда
		РаспознанныйДоговор = ХозяйственнаяОперация.ДоговорКонтрагента;
		Если ЗначениеЗаполнено(РаспознанныйДоговор) Тогда
			НовыйДоговор = ИдентификацияУчастниковБанковскихОпераций.ОписаниеНовогоОбъекта(
				РаспознанныйДоговор,
				РаспознанныеДанныеИзБанка.УчастникиОпераций);
			Если НовыйДоговор = Неопределено Тогда
				СтрокаТаблицы.Договор = РаспознанныйДоговор;
			Иначе
				СтрокаТаблицы.ДоговорСсылкаДляНового = РаспознанныйДоговор;
				СтрокаТаблицы.ДоговорОтображениеНенайденного = ШаблоныТекстов.Договор;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			СтрокаТаблицы.ДоговорСсылкаДляНового = РаспознанныйДоговор;
			СтрокаТаблицы.ДоговорОтображениеНенайденного = ШаблоныТекстов.Договор;
		КонецЕсли;
	ИначеЕсли НЕ ТребуетсяКонтрагент Тогда
		СтрокаТаблицы.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		СтрокаТаблицы.ДоговорОтображениеНенайденного = "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
		СтрокаТаблицы.СостояниеДокумента = 3;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйОписаниеКонтрагента()
	
	ОписаниеКонтрагента = Новый Структура;
	ОписаниеКонтрагента.Вставить("Наименование",              "");
	ОписаниеКонтрагента.Вставить("НаименованиеПолное",        "");
	ОписаниеКонтрагента.Вставить("ИНН",                       "");
	ОписаниеКонтрагента.Вставить("КПП",                       "");
	ОписаниеКонтрагента.Вставить("ВидКонтрагента",      	  Перечисления.ВидыКонтрагентов.ПустаяСсылка());
	ОписаниеКонтрагента.Вставить("ВидГосударственногоОргана", Перечисления.ВидыГосударственныхОрганов.ПустаяСсылка());
	ОписаниеКонтрагента.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	
	Возврат ОписаниеКонтрагента;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуПоДаннымДокумента(СтрокаТаблицы, ДанныеДокумента)
	
	СтрокаТаблицы.ВидОперации        = ДанныеДокумента.ВидОперацииДокумента;
	СтрокаТаблицы.СтатьяДДС          = ДанныеДокумента.Статья;
	СтрокаТаблицы.Контрагент         = ДанныеДокумента.Контрагент;
	СтрокаТаблицы.СчетКонтрагента    = ДанныеДокумента.БанковскийСчетКонтрагента;
	СтрокаТаблицы.СостояниеДокумента = ДанныеДокумента.СостояниеДокумента;
	СтрокаТаблицы.НазначениеПлатежа  = ДанныеДокумента.НазначениеПлатежа;
	Если ДанныеДокумента.Свойство("Договор") Тогда
		СтрокаТаблицы.Договор		 = ДанныеДокумента.Договор;
	КонецЕсли;
	
	// Если в документе не заполнен контрагент, то подставим информацию из файла
	Если НЕ ЗначениеЗаполнено(ДанныеДокумента.Контрагент) И ДанныеДокумента.Свойство("ДополнительныеРеквизиты") Тогда
		РеквизитыКонтрагента = ДанныеДокумента.ДополнительныеРеквизиты;
		МассивРеквизитовКонтрагента = Новый Массив;
		// Выводим либо детальное наименование
		
		Если РеквизитыКонтрагента["НаименованиеДетально"] <> Неопределено Тогда
			МассивРеквизитовКонтрагента.Добавить(РеквизитыКонтрагента["НаименованиеДетально"]);
		// Либо просто наименование
		ИначеЕсли РеквизитыКонтрагента["Наименование"] <> Неопределено Тогда
			 МассивРеквизитовКонтрагента.Добавить(РеквизитыКонтрагента["Наименование"]);
		КонецЕсли;
		Если РеквизитыКонтрагента["ИНН"] <> Неопределено Тогда
			МассивРеквизитовКонтрагента.Добавить(СтрШаблон(НСтр("ru='ИНН %1'"), РеквизитыКонтрагента["ИНН"]));
		КонецЕсли;
		Если РеквизитыКонтрагента["КПП"] <> Неопределено Тогда
			МассивРеквизитовКонтрагента.Добавить(СтрШаблон(НСтр("ru='КПП %1'"), РеквизитыКонтрагента["КПП"]));
		КонецЕсли;
		
		СтрокаТаблицы.КонтрагентОтображениеНенайденного = СтрСоединить(МассивРеквизитовКонтрагента, ", ");
	КонецЕсли;
	// Если в документе не заполнен БанковскийСчетКонтрагента, то подставим информацию из файла
	Если НЕ ЗначениеЗаполнено(ДанныеДокумента.БанковскийСчетКонтрагента) И ДанныеДокумента.Свойство("ДополнительныеРеквизиты") Тогда
		РеквизитыКонтрагента = ДанныеДокумента.ДополнительныеРеквизиты;
		МассивРеквизитовКонтрагента = Новый Массив;
		Если РеквизитыКонтрагента["РасчСчет"] <> Неопределено Тогда
			МассивРеквизитовКонтрагента.Добавить(РеквизитыКонтрагента["РасчСчет"]);
		КонецЕсли;
		Если РеквизитыКонтрагента["БИК"] <> Неопределено Тогда
			МассивРеквизитовКонтрагента.Добавить(СтрШаблон(НСтр("ru='БИК %1'"), РеквизитыКонтрагента["БИК"]));
		КонецЕсли;
		
		СтрокаТаблицы.СчетКонтрагентаОтображениеНенайденного = СтрСоединить(МассивРеквизитовКонтрагента, ", ");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДанныеДокументов(Выписка, РаспознаннаяВыписка)
	
	ДанныеДокументов = Новый Соответствие;
	
	ЗаполнитьДанныеПлатежныхПоручений(ДанныеДокументов, РаспознаннаяВыписка);
	ЗаполнитьДанныеРанееСозданныхДокументов(ДанныеДокументов, РаспознаннаяВыписка);
	
	Возврат ДанныеДокументов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПлатежныхПоручений(ДанныеДокументов, РаспознаннаяВыписка)
	
	ИндексСсылок = Новый Соответствие;
	Для Каждого РаспознаннаяОперация Из РаспознаннаяВыписка.Операции Цикл
		ОперацииСсылки = ИндексСсылок[РаспознаннаяОперация.ПлатежноеПоручение];
		Если ОперацииСсылки = Неопределено Тогда
			ОперацииСсылки = Новый Массив;
			ИндексСсылок.Вставить(РаспознаннаяОперация.ПлатежноеПоручение, ОперацииСсылки);
		КонецЕсли;
		ОперацииСсылки.Добавить(РаспознаннаяОперация);
	КонецЦикла;
	
	Ссылки = Новый Массив;
	Для Каждого КлючИЗначение Из ИндексСсылок Цикл
		Ссылки.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет)
	|			ТОГДА ПлатежноеПоручение.Организация
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.Подотчетнику)
	|			ТОГДА ПлатежноеПоручение.Подотчетник
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику)
	|			ТОГДА ПлатежноеПоручение.Подотчетник
	|		ИНАЧЕ ПлатежноеПоручение.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ПлатежноеПоручение.СчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	ПлатежноеПоручение.Подразделение КАК Подразделение,
	|	ПлатежноеПоручение.СуммаДокумента КАК Сумма,
	|	ПлатежноеПоручение.СтавкаНДС КАК СтавкаНДС,
	|	ПлатежноеПоручение.СуммаНДС КАК СуммаНДС,
	|	ПлатежноеПоручение.ВидОперации КАК ВидОперацииДокумента,
	|	ПлатежноеПоручение.Статья КАК Статья,
	|	ПлатежноеПоручение.НазначениеПлатежа,
	|	2 КАК СостояниеДокумента
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Ссылка В(&Ссылки)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Исключения = Новый Структура("Ссылка");
	
	Пока Выборка.Следующий() Цикл
		
		ОперацииСсылки = ИндексСсылок[Выборка.Ссылка];
		
		ДанныеДокумента = ЭлементВыборкиЗапросаДанныхДокументовВСтруктуру(Выборка, Исключения);
		
		Для Каждого РаспознаннаяОперация Из ОперацииСсылки Цикл
			
			Если ЗначениеЗаполнено(ДанныеДокумента) Тогда
				ДанныеДокументов.Вставить(РаспознаннаяОперация.Идентификатор, ДанныеДокумента);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеРанееСозданныхДокументов(ДанныеДокументов, РаспознаннаяВыписка)
	
	Ссылки       = Новый Массив;
	ИндексСсылок = Новый Соответствие;
	Для Каждого РаспознаннаяОперация Из РаспознаннаяВыписка.Операции Цикл
		ИндексСсылок.Вставить(РаспознаннаяОперация.Ссылка, РаспознаннаяОперация);// Одна ссылка может быть только в одной строке выписки
		Ссылки.Добавить(РаспознаннаяОперация.Ссылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходСоСчета.Ссылка КАК Ссылка,
	|	РасходСоСчета.ВидОперации КАК ВидОперацииДокумента,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет)
	|			ТОГДА РасходСоСчета.Организация
	|		КОГДА РасходСоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСоСчета.Подотчетнику)
	|			ТОГДА РасходСоСчета.Подотчетник
	|		КОГДА РасходСоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику)
	|			ТОГДА РасходСоСчета.Подотчетник
	|		ИНАЧЕ РасходСоСчета.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	РасходСоСчета.СчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	РасходСоСчета.ПодразделениеЗатраты КАК ПодразделениеЗатраты,
	|	РасходСоСчета.СуммаДокумента КАК Сумма,
	|	РасходСоСчета.Статья КАК Статья,
	|	РасходСоСчета.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.Проведен
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК СостояниеДокумента,
	|	РасходСоСчета.РасшифровкаПлатежа.(
	|		Договор КАК Договор,
	|		Подразделение КАК Подразделение,
	|		СтатьяДДС КАК СтатьяДДС,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|		Курс КАК Курс,
	|		Кратность КАК Кратность,
	|		СуммаРасчетов КАК СуммаРасчетов
	|	) КАК РасшифровкаПлатежа,
	|	РасходСоСчета.ДополнительныеРеквизиты.(
	|		Свойство КАК Свойство,
	|		Значение КАК Значение
	|	) КАК ДополнительныеРеквизиты
	|ИЗ
	|	Документ.РасходСоСчета КАК РасходСоСчета
	|ГДЕ
	|	РасходСоСчета.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.Ссылка,
	|	ПоступлениеНаСчет.ВидОперации,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета)
	|			ТОГДА ПоступлениеНаСчет.Организация
	|		КОГДА ПоступлениеНаСчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника)
	|			ТОГДА ПоступлениеНаСчет.Подотчетник
	|		ИНАЧЕ ПоступлениеНаСчет.Контрагент
	|	КОНЕЦ,
	|	ПоступлениеНаСчет.СчетКонтрагента,
	|	ПоступлениеНаСчет.ПодразделениеЗатраты,
	|	ПоступлениеНаСчет.СуммаДокумента,
	|	ПоступлениеНаСчет.Статья,
	|	ПоступлениеНаСчет.НазначениеПлатежа,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчет.Проведен
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	ПоступлениеНаСчет.РасшифровкаПлатежа.(
	|		Договор,
	|		Подразделение,
	|		СтатьяДДС,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		Договор.ВалютаРасчетов,
	|		Курс,
	|		Кратность,
	|		СуммаРасчетов
	|	),
	|	ПоступлениеНаСчет.ДополнительныеРеквизиты.(
	|		Свойство,
	|		Значение
	|	)
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|ГДЕ
	|	ПоступлениеНаСчет.Ссылка В(&Ссылки)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СлужебныеКолонки = Новый Структура("РасшифровкаПлатежа, ДополнительныеРеквизиты");// Их не надо помещать в ДанныеДокумента
	
	Пока Выборка.Следующий() Цикл
		
		РаспознаннаяОперация = ИндексСсылок[Выборка.Ссылка];
		
		ДанныеДокумента = ЭлементВыборкиЗапросаДанныхДокументовВСтруктуру(Выборка, СлужебныеКолонки);
		
		ВыборкаДетальныхЗаписей = Выборка.РасшифровкаПлатежа.Выбрать();
		Если ВыборкаДетальныхЗаписей.Количество() = 1 Тогда
			ВыборкаДетальныхЗаписей.Следующий();
			ДанныеРасшифровки = ЭлементВыборкиЗапросаДанныхДокументовВСтруктуру(ВыборкаДетальныхЗаписей, СлужебныеКолонки);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеДокумента, ДанныеРасшифровки, Истина);
		КонецЕсли;
		
		// Дополним данные документа, реквизитами контрагента, которые записываются из файла
		Если НЕ Выборка.ДополнительныеРеквизиты.Пустой() Тогда
			ДанныеДокумента.Вставить("ДополнительныеРеквизиты", Новый Соответствие);
			ВыборкаРеквизитыКонтрагента = Выборка.ДополнительныеРеквизиты.Выбрать();
			Пока ВыборкаРеквизитыКонтрагента.Следующий() Цикл
				Если НЕ ПустаяСтрока(ВыборкаРеквизитыКонтрагента.Свойство) Тогда
					ДанныеДокумента.ДополнительныеРеквизиты.Вставить(ВыборкаРеквизитыКонтрагента.Свойство, ВыборкаРеквизитыКонтрагента.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДокумента) Тогда
			ДанныеДокументов.Вставить(РаспознаннаяОперация.Идентификатор, ДанныеДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЭлементВыборкиЗапросаДанныхДокументовВСтруктуру(Выборка, Исключения)
	
	Структура = Новый Структура;
	Для Каждого Колонка Из Выборка.Владелец().Колонки Цикл
		
		Если Исключения.Свойство(Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Значение = Выборка[Колонка.Имя];
		Структура.Вставить(Колонка.Имя, Значение);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоответствиеВыпискиОтбору(Знач АдресРезультата, Знач БанковскийСчет, Знач Организация = Неопределено)

	СоответствиеВыпискиОтбору = Новый Структура;
	СоответствиеВыпискиОтбору.Вставить("Соответствует",  Истина);
	СоответствиеВыпискиОтбору.Вставить("БанковскийСчет", БанковскийСчет);
	СоответствиеВыпискиОтбору.Вставить("БанковскиеСчетаВыписки", Новый Массив);
	
	Если ПустаяСтрока(АдресРезультата) Тогда
		Возврат СоответствиеВыпискиОтбору;
	КонецЕсли;
	
	РаспознанныеДанныеИзБанка = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если РаспознанныеДанныеИзБанка = Неопределено Тогда
		Возврат СоответствиеВыпискиОтбору;
	КонецЕсли;
	
	БанковскиеСчетаВыписки = Новый Массив;
	ОрганизацииВыписки     = Новый Массив;
	
	Для Каждого КлючИЗначение Из РаспознанныеДанныеИзБанка.РаспознанныеВыписки Цикл
		РаспознаннаяВыписка = КлючИЗначение.Значение;
		// Не учитываем счета, не найденные в информационной базе
		ПредупреждениеНеНайденБанковскийСчет = РаспознаннаяВыписка.Предупреждения.Найти("БанковскийСчетНеНайден", "КодПроблемы");
		Если ПредупреждениеНеНайденБанковскийСчет = Неопределено Тогда
			БанковскиеСчетаВыписки.Добавить(РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет);
			ОрганизацииВыписки.Добавить(РаспознаннаяВыписка.ВладелецСчета.Организация);
		КонецЕсли;
	КонецЦикла;
	
	// Оставим только уникальные значения
	БанковскиеСчетаВыписки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(БанковскиеСчетаВыписки);
	ОрганизацииВыписки     = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОрганизацииВыписки);
	
	// Установим организацию
	СоответствиеВыпискиОтбору.Вставить("Организация", Неопределено);
	Если ОрганизацииВыписки.Количество() = 1 Тогда
		СоответствиеВыпискиОтбору.Организация = ОрганизацииВыписки[0];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		НайденныйБанковскийСчет = БанковскиеСчетаВыписки.Найти(БанковскийСчет);
		// В файле нет выписок, соответствующих отбору
		Если НайденныйБанковскийСчет = Неопределено Тогда
			СоответствиеВыпискиОтбору.Соответствует = Ложь;
		// Если в файле есть счет, соответствующий отбору, то установим его первым
		Иначе
			БанковскиеСчетаВыписки.Удалить(НайденныйБанковскийСчет);
			БанковскиеСчетаВыписки.Вставить(0, БанковскийСчет);
		КонецЕсли;
		// Подготовим новый отбор по счетам банковской выписки
		Если БанковскиеСчетаВыписки.Количество() = 1 Тогда
			СоответствиеВыпискиОтбору.БанковскийСчет = БанковскиеСчетаВыписки[0];
		Иначе
			СоответствиеВыпискиОтбору.БанковскийСчет = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Преобразуем массив в строки и добавим организацию если требуется
	ТребуетсяУказыватьОрганизацию = (ЗначениеЗаполнено(Организация) И СоответствиеВыпискиОтбору.Организация <> Организация);
	
	Для Каждого БанковскийСчет Из БанковскиеСчетаВыписки Цикл
		БанковскийСчетСтрокой = Строка(БанковскийСчет) + ?(ТребуетсяУказыватьОрганизацию, " ("+Строка(СоответствиеВыпискиОтбору.Организация)+")", "");
		СоответствиеВыпискиОтбору.БанковскиеСчетаВыписки.Добавить(БанковскийСчетСтрокой);
	КонецЦикла;
	
	Возврат СоответствиеВыпискиОтбору;
	
КонецФункции

&НаСервере
Функция ЕстьОшибкиВДокументыКИмпорту()

	Возврат (ДокументыКИмпорту.НайтиСтроки(Новый Структура("ЕстьОшибка", Истина)).Количество() > 0);

КонецФункции

#КонецОбласти

#Область ОбработкаСобытийДокументыКИмпорту

&НаСервере
Процедура ПоказатьОшибкиНаСервере(Включить)
	
	Если НЕ Объект.СоздаватьНенайденныеЭлементы Тогда
		Возврат;
	КонецЕсли;
	
	Если Включить Тогда
		ОтборОшибок = Новый Структура("ЕстьОшибка", Истина);
		Элементы.ДокументыКИмпорту.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборОшибок);
	Иначе
		Элементы.ДокументыКИмпорту.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументыКИмпортуУстановитьОтметку(Отметка)
	
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = Отметка;
	КонецЦикла;
	
	ДокументыКИмпортуОбновитьИтогиВПодвале();
	УстановитьДоступностьКнопкиЗагрузить(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодготовитьОтображениеПредупреждений(СтрокаТаблицы, СоздаватьНенайденныеЭлементы)
	
	// Если пользователь выбрал объекты вручную, то очистим ссылки для новых
	Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		СтрокаТаблицы.КонтрагентСсылкаДляНового              = Неопределено;
		СтрокаТаблицы.КонтрагентОтображениеНенайденного      = "";
		СтрокаТаблицы.РеквизитыКонтрагента = НовыйОписаниеКонтрагента();
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетКонтрагента) Тогда
		СтрокаТаблицы.СчетКонтрагентаСсылкаДляНового         = Неопределено;
		СтрокаТаблицы.СчетКонтрагентаОтображениеНенайденного = "";
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТаблицы.Договор) Тогда
		СтрокаТаблицы.ДоговорСсылкаДляНового                 = Неопределено;
		СтрокаТаблицы.ДоговорОтображениеНенайденного         = "";
	КонецЕсли;
	
	// Пользователь мог перевыбрать контрагентов, в этом случае очистим неактуальные предупреждения
	МассивПредупреждений = СтрРазделить(СтрокаТаблицы.ОписаниеОшибок, ";", Ложь);
	АктуальныйМассивПредупреждений = Новый Массив;
	
	Для Каждого Предупреждение Из МассивПредупреждений Цикл
		
		ТекстПредупреждения = СокрЛП(Предупреждение);
		Если ТекстПредупреждения = НСтр("ru='Не заполнены реквизиты контрагента'") И (ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.КонтрагентСсылкаДляНового)) Тогда
			Продолжить;
		ИначеЕсли ТекстПредупреждения = НСтр("ru='Не заполнен расчетный счет контрагента'") И (ЗначениеЗаполнено(СтрокаТаблицы.СчетКонтрагента) ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.СчетКонтрагентаСсылкаДляНового)) Тогда
			Продолжить;
		КонецЕсли;
		
		АктуальныйМассивПредупреждений.Добавить(ТекстПредупреждения);
		
	КонецЦикла;
	
	СтрокаТаблицы.ЕстьОшибка     = (АктуальныйМассивПредупреждений.Количество() > 0);
	СтрокаТаблицы.ОписаниеОшибок = СтрСоединить(АктуальныйМассивПредупреждений, "; ");
	СтрокаТаблицы.Готовность     = ГотовностьСтроки(СтрокаТаблицы, СоздаватьНенайденныеЭлементы);
	
КонецПроцедуры

&НаСервере
Процедура УточнитьХозяйственнуюОперациюДаннымиВведеннымиПользователем(СтрокаДокументыКИмпорту, ИменаВведенныхДанных)
	
	Если ЗначениеЗаполнено(СтрокаДокументыКИмпорту.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДокументыКИмпорту.Документ) Тогда
		// Если есть документ, то хозяйственная операция не определена,
		// поэтому создадим и заполним её полностью.
		// Это нужно для того, чтобы при загрузке документ перезаполнился
		ВведенныеДанные = Новый Структура("Контрагент,ВидОперации,СчетКонтрагента,Договор,СтатьяДДС");
	Иначе
		ВведенныеДанные = Новый Структура(ИменаВведенныхДанных);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ВведенныеДанные, СтрокаДокументыКИмпорту);
	
	// Приведем ВведенныеДанные в соответствие ХозяйственнаяОперация
	Если ВведенныеДанные.Свойство("ВидОперации") Тогда
		ВидОперацииДокумента = ВведенныеДанные.ВидОперации;
		ВведенныеДанные.Удалить("ВидОперации");
		ВведенныеДанные.Вставить("ВидОперацииДокумента", ВидОперацииДокумента);
	КонецЕсли;
	Если ВведенныеДанные.Свойство("Договор") Тогда
		ДоговорДокумента = ВведенныеДанные.Договор;
		ВведенныеДанные.Удалить("Договор");
		ВведенныеДанные.Вставить("ДоговорКонтрагента", ДоговорДокумента);
	КонецЕсли;
	Если ВведенныеДанные.Свойство("СчетКонтрагента") Тогда
		СчетКонтрагентаДокумента = ВведенныеДанные.СчетКонтрагента;
		ВведенныеДанные.Удалить("СчетКонтрагента");
		ВведенныеДанные.Вставить("БанковскийСчетКонтрагента", СчетКонтрагентаДокумента);
	КонецЕсли;
	Если ВведенныеДанные.Свойство("СтатьяДДС") Тогда
		СтатьяДДСДокумента = ВведенныеДанные.СтатьяДДС;
		ВведенныеДанные.Удалить("СтатьяДДС");
		ВведенныеДанные.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДДСДокумента);
	КонецЕсли;
	
	РаспознанныеДанныеИзБанка = ПолучитьИзВременногоХранилища(АдресХранилищаРаспознанныеДанныеИзБанка);
	
	ХозяйственнаяОперация = ЗагрузкаВыпискиПоБанковскомуСчету.УточнитьХозяйственнуюОперациюДаннымиВведеннымиПользователем(
		ВведенныеДанные,
		СтрокаДокументыКИмпорту.ИдентификаторВыписки,  // Идентифицируют выписку в РаспознанныеДанныеИзБанка
		СтрокаДокументыКИмпорту.ИдентификаторОперации, // Идентифицируют операцию в РаспознанныеДанныеИзБанка
		РаспознанныеДанныеИзБанка,
		НастройкиЗагрузки());
	
	АдресХранилищаРаспознанныеДанныеИзБанка = ПоместитьВоВременноеХранилище(РаспознанныеДанныеИзБанка, АдресХранилищаРаспознанныеДанныеИзБанка);
	
	ЗаполнитьСтрокуПоХозяйственнойОперации(РаспознанныеДанныеИзБанка, СтрокаДокументыКИмпорту, ХозяйственнаяОперация);
	
	РазместитьПредупреждение(СтрокаДокументыКИмпорту);
	ПодготовитьОтображениеПредупреждений(СтрокаДокументыКИмпорту, Объект.СоздаватьНенайденныеЭлементы);
	
КонецПроцедуры

&НаСервере
Функция РаспознатьДанныеИзБанкаПовторноНаСервере()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РаспознанныеДанныеИзБанка", ПолучитьИзВременногоХранилища(АдресХранилищаРаспознанныеДанныеИзБанка));
	СтруктураПараметров.Вставить("ДанныеИзБанка", ПолучитьИзВременногоХранилища(АдресВыписки).ДанныеИзБанка);
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Повторное чтение данных из банка'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	НастройкиЗапуска.КлючФоновогоЗадания = Обработки.КлиентБанк.КлючФоновогоЗаданияЗагрузкаВыписки();
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.КлиентБанк.ФоноваяРаспознатьДанныеИзБанкаПовторно",
		СтруктураПараметров,
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СозданиеНенайденного

&НаСервере
Функция АдресВременногоХранилищаДереваКонтрагентов()

	РазобранныеДанныеИзБанка = ПолучитьИзВременногоХранилища(АдресХранилищаРаспознанныеДанныеИзБанка);
	УчастникиОпераций        = РазобранныеДанныеИзБанка.УчастникиОпераций;
	ДеревоКонтрагентов       = НовыйДеревоКонтрагентов();
	
	Для Каждого СтрокаИмпорта Из ДокументыКИмпорту Цикл
		
		// Не создаем элементы для строк, которые пользователь не выбирал
		Если НЕ СтрокаИмпорта.Загружать Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ТребуетсяСозданиеНенайденныхВСтроке(СтрокаИмпорта) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаИмпорта.КонтрагентСсылкаДляНового) Тогда
			КонтрагентДляСозданиеНенайденного = СтрокаИмпорта.КонтрагентСсылкаДляНового;
		Иначе
			КонтрагентДляСозданиеНенайденного = СтрокаИмпорта.Контрагент;
		КонецЕсли;
		
		СчетКонтрагентаСсылкаДляНового = СтрокаИмпорта.СчетКонтрагентаСсылкаДляНового;
		ДоговорСсылкаДляНового         = СтрокаИмпорта.ДоговорСсылкаДляНового;
		
		СтрокаКонтрагент = ДеревоКонтрагентов.Строки.Найти(КонтрагентДляСозданиеНенайденного, "Ссылка");
		// Добавим нового контрагента
		Если СтрокаКонтрагент = Неопределено Тогда
			СтрокаКонтрагент = ДеревоКонтрагентов.Строки.Добавить();
			
			ДобавитьКонтрагентаВДеревоКонтрагентов(СтрокаКонтрагент, КонтрагентДляСозданиеНенайденного, УчастникиОпераций);
			ДобавитьРасчетныйСчетВДеревоКонтрагентов(СтрокаКонтрагент, СчетКонтрагентаСсылкаДляНового, УчастникиОпераций);
			ДобавитьДоговорВДеревоКонтрагентов(СтрокаКонтрагент, ДоговорСсылкаДляНового, УчастникиОпераций);
			
		// Такой контрагент уже есть, следует добавить только расчетный счет и договор
		Иначе
			
			// Добавим расчетный счет
			СтрокаРасчетныйСчет = СтрокаКонтрагент.Строки.Найти(СчетКонтрагентаСсылкаДляНового, "Ссылка");
			Если СтрокаРасчетныйСчет = Неопределено Тогда
				ДобавитьРасчетныйСчетВДеревоКонтрагентов(СтрокаКонтрагент, СчетКонтрагентаСсылкаДляНового, УчастникиОпераций);
			КонецЕсли;
			
			// Добавим договор
			СтрокаДоговор = СтрокаКонтрагент.Строки.Найти(ДоговорСсылкаДляНового, "Ссылка");
			Если СтрокаДоговор = Неопределено Тогда
				ДобавитьДоговорВДеревоКонтрагентов(СтрокаКонтрагент, ДоговорСсылкаДляНового, УчастникиОпераций);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ДеревоКонтрагентов, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура СоздатьНенайденноеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	АдресХранилищаРаспознанныеДанныеИзБанка = Результат.АдресХранилищаРаспознанныеДанныеИзБанка;
	
	Для Каждого ОшибкаСоздания Из Результат.МассивСообщений Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаСоздания);
	КонецЦикла;
	
	ОтобразитьСозданныеЭлементы(Результат.СсылкиНаСозданныеОбъекты);
	
	// Обновим доступность кнопки создать ненайденное
	Элементы.ДокументыКИмпортуСоздатьНенайденное.Доступность = ТребуетсяСозданиеНенайденныхВТаблице(ДокументыКИмпорту);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСозданныеЭлементы(СсылкиНаСозданныеОбъекты)
	
	ИзмененныеСтроки = Новый Соответствие;
	
	// Одна ссылка может использоваться в нескольких строках,
	// поэтому ищем использование данной ссылки в таблице 
	// и устанавливаем новое значение для отображение реквизита
	Для Каждого Ссылка Из СсылкиНаСозданныеОбъекты Цикл
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контрагенты") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КонтрагентСсылкаДляНового", Ссылка);
			СтрокиДокументыКИмпорту = ДокументыКИмпорту.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаДокументыКИмпорту Из СтрокиДокументыКИмпорту Цикл
				СтрокаДокументыКИмпорту.Контрагент                = Ссылка;
				СтрокаДокументыКИмпорту.КонтрагентСсылкаДляНового = Неопределено;
				СтрокаДокументыКИмпорту.КонтрагентОтображениеНенайденного = "";
				СтрокаДокументыКИмпорту.РеквизитыКонтрагента = НовыйОписаниеКонтрагента();
				ИзмененныеСтроки.Вставить(СтрокаДокументыКИмпорту, Истина);
			КонецЦикла;
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("СчетКонтрагентаСсылкаДляНового", Ссылка);
			СтрокиДокументыКИмпорту = ДокументыКИмпорту.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаДокументыКИмпорту Из СтрокиДокументыКИмпорту Цикл
				СтрокаДокументыКИмпорту.СчетКонтрагента                = Ссылка;
				СтрокаДокументыКИмпорту.СчетКонтрагентаСсылкаДляНового = Неопределено;
				СтрокаДокументыКИмпорту.СчетКонтрагентаОтображениеНенайденного = "";
				ИзмененныеСтроки.Вставить(СтрокаДокументыКИмпорту, Истина);
			КонецЦикла;
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ДоговорСсылкаДляНового", Ссылка);
			СтрокиДокументыКИмпорту = ДокументыКИмпорту.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаДокументыКИмпорту Из СтрокиДокументыКИмпорту Цикл
				СтрокаДокументыКИмпорту.Договор = Ссылка;
				СтрокаДокументыКИмпорту.ДоговорСсылкаДляНового = Неопределено;
				СтрокаДокументыКИмпорту.ДоговорОтображениеНенайденного = "";
				ИзмененныеСтроки.Вставить(СтрокаДокументыКИмпорту, Истина);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Установить готовность для измененных строк
	Для Каждого КлючИЗначение Из ИзмененныеСтроки Цикл
		СтрокаТаблицы = КлючИЗначение.Ключ;
		СтрокаТаблицы.Готовность = ГотовностьСтроки(СтрокаТаблицы, Объект.СоздаватьНенайденныеЭлементы);
	КонецЦикла;
	
	Если СсылкиНаСозданныеОбъекты.Количество() > 0 Тогда
		ОповеститьОбИзменении(Тип("СправочникСсылка.Контрагенты"));
		ОповеститьОбИзменении(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		ОповеститьОбИзменении(Тип("СправочникСсылка.БанковскиеСчета"));
		ОповеститьОбИзменении(Тип("СправочникСсылка.ФизическиеЛица"));
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Добавлены контрагенты, банковские счета и договоры'"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтрагентаВДеревоКонтрагентов(СтрокаКонтрагент, КонтрагентДляСозданиеНенайденного, УчастникиОпераций)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Наименование");
	СтруктураРеквизитов.Вставить("ИНН");
	
	// Определим коллекцию
	Если ТипЗнч(КонтрагентДляСозданиеНенайденного) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		КоллекцияКонтрагенты   = УчастникиОпераций.НовыеОбъекты[Тип("СправочникСсылка.ФизическиеЛица")];
		ВидКонтрагента         = "Сотрудник";
	Иначе
		КоллекцияКонтрагенты   = УчастникиОпераций.НовыеОбъекты[Тип("СправочникСсылка.Контрагенты")];
		ВидКонтрагента         = "Контрагент";
		СтруктураРеквизитов.Вставить("НаименованиеПолное");
		СтруктураРеквизитов.Вставить("КПП");
	КонецЕсли;
	
	НовыйКонтрагент = КоллекцияКонтрагенты.Найти(КонтрагентДляСозданиеНенайденного);
	Если НовыйКонтрагент = Неопределено Тогда
		// Контрагент уже создан, берем данные из ИБ
		СтруктураРеквизитов       = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КонтрагентДляСозданиеНенайденного, СтруктураРеквизитов);
		СтрокаКонтрагент.Реквизит = КонтрагентДляСозданиеНенайденного;
	Иначе
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, НовыйКонтрагент);
	КонецЕсли;
	
	СтрокаКонтрагент.Представление = СтруктураРеквизитов.Наименование;
	СтрокаКонтрагент.Значение      = ВидКонтрагента;
	СтрокаКонтрагент.Ссылка        = КонтрагентДляСозданиеНенайденного;
	СтрокаКонтрагент.Пометка       = Истина;
	СтрокаКонтрагент.ЭтоРодитель   = Истина;
	
	// Заполним реквизиты
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		СтрокаРеквизит               = СтрокаКонтрагент.Строки.Добавить();
		СтрокаРеквизит.Представление = КлючИЗначение.Ключ;
		СтрокаРеквизит.Значение      = КлючИЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРасчетныйСчетВДеревоКонтрагентов(СтрокаКонтрагент, СчетКонтрагентаСсылкаДляНового, УчастникиОпераций);

	КоллекцияБанковскиеСчета = УчастникиОпераций.НовыеОбъекты[Тип("СправочникСсылка.БанковскиеСчета")];
	НовыйБанковскийСчет      = КоллекцияБанковскиеСчета.Найти(СчетКонтрагентаСсылкаДляНового);
	Если НовыйБанковскийСчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерСчета          = НовыйБанковскийСчет.НомерСчета;
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Банк",  НовыйБанковскийСчет.НаименованиеБанка);
	СтруктураРеквизитов.Вставить("Город", НовыйБанковскийСчет.ГородБанка);
	СтруктураРеквизитов.Вставить("БИК",   НовыйБанковскийСчет.БИК);
	СтруктураРеквизитов.Вставить("КоррСчетБанка", НовыйБанковскийСчет.КоррСчетБанка);
	
	// Добавим расчетный счет
	СтрокаРасчетныйСчет = СтрокаКонтрагент.Строки.Вставить(3);
	СтрокаРасчетныйСчет.Представление = "Р/счет";
	СтрокаРасчетныйСчет.Значение      = НомерСчета;
	СтрокаРасчетныйСчет.Пометка       = Истина;
	СтрокаРасчетныйСчет.ЭтоРодитель   = Истина;
	СтрокаРасчетныйСчет.Ссылка        = СчетКонтрагентаСсылкаДляНового;
	
	// Заполним реквизиты
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		СтрокаРеквизит               = СтрокаРасчетныйСчет.Строки.Добавить();
		СтрокаРеквизит.Представление = КлючИЗначение.Ключ;
		СтрокаРеквизит.Значение      = КлючИЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДоговорВДеревоКонтрагентов(СтрокаКонтрагент, ДоговорСсылкаДляНового, УчастникиОпераций);
	
	КоллекцияДоговоры = УчастникиОпераций.НовыеОбъекты[Тип("СправочникСсылка.ДоговорыКонтрагентов")];
	НовыйДоговор      = КоллекцияДоговоры.Найти(ДоговорСсылкаДляНового);
	Если НовыйДоговор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСсылки      = ИдентификацияУчастниковБанковскихОпераций.ОписаниеСсылки(ДоговорСсылкаДляНового, УчастникиОпераций);
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Наименование", НовыйДоговор.Наименование);
	СтруктураРеквизитов.Вставить("Вид",          ОписаниеСсылки.ВидДоговора);
	
	// Добавим договор
	СтрокаДоговор = СтрокаКонтрагент.Строки.Добавить();
	СтрокаДоговор.Представление = "Договор";
	СтрокаДоговор.Значение      = СтруктураРеквизитов.Вид;
	СтрокаДоговор.Пометка       = Истина;
	СтрокаДоговор.ЭтоРодитель   = Истина;
	СтрокаДоговор.Ссылка        = ДоговорСсылкаДляНового;
	
	// Заполним реквизиты
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		СтрокаРеквизит               = СтрокаДоговор.Строки.Добавить();
		СтрокаРеквизит.Представление = КлючИЗначение.Ключ;
		СтрокаРеквизит.Значение      = КлючИЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НовыйДеревоКонтрагентов()

	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	МассивТипов.Добавить(Тип("СправочникСсылка.БанковскиеСчета"));
	ОписаниеТиповСсылка = Новый ОписаниеТипов(МассивТипов);
	
	ДеревоКонтрагентов = Новый ДеревоЗначений;
	ДеревоКонтрагентов.Колонки.Добавить("Представление", ОписаниеТиповСтрока);
	ДеревоКонтрагентов.Колонки.Добавить("Значение",      ОписаниеТиповСтрока);
	ДеревоКонтрагентов.Колонки.Добавить("Реквизит",      ОписаниеТиповСсылка);
	ДеревоКонтрагентов.Колонки.Добавить("Пометка",       ОписаниеТиповБулево);
	ДеревоКонтрагентов.Колонки.Добавить("ЭтоРодитель",   ОписаниеТиповБулево);
	ДеревоКонтрагентов.Колонки.Добавить("Ссылка",        ОписаниеТиповСсылка);
	
	Возврат ДеревоКонтрагентов;

КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяСозданиеНенайденныхВТаблице(Знач ДокументыКИмпорту)

	ТаблицаНеГотовыхСтрок = ДокументыКИмпорту.Выгрузить(Новый Структура("Готовность", Ложь));
	
	Если ТаблицаНеГотовыхСтрок.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		ТребуетсяСозданиеНенайденных = Ложь;
		Для Каждого НеГотоваяСтрока Из ТаблицаНеГотовыхСтрок Цикл
			Если ТребуетсяСозданиеНенайденныхВСтроке(НеГотоваяСтрока) Тогда
				ТребуетсяСозданиеНенайденных = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Возврат ТребуетсяСозданиеНенайденных;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяСозданиеНенайденныхВСтроке(Знач ДанныеСтроки)

	Возврат ЗначениеЗаполнено(ДанныеСтроки.КонтрагентСсылкаДляНового)
			ИЛИ ЗначениеЗаполнено(ДанныеСтроки.СчетКонтрагентаСсылкаДляНового)
			ИЛИ ЗначениеЗаполнено(ДанныеСтроки.ДоговорСсылкаДляНового)

КонецФункции

#КонецОбласти

#Область СозданиеДокументов

&НаСервере
Функция ЗагрузкаВыпискиНаСервере()
	
	ПараметрыЗагрузкиДокументов = ПараметрыЗагрузкиДокументовНаСервере();
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка банковской выписки'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	НастройкиЗапуска.КлючФоновогоЗадания = Обработки.КлиентБанк.КлючФоновогоЗаданияЗагрузкаВыписки();
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.КлиентБанк.ФоноваяЗагрузкаДокументовКИмпортуИзКлиентБанка",
		ПараметрыЗагрузкиДокументов,
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыЗагрузкиДокументовНаСервере()
	
	ПараметрыЗагрузкиДокументов = Новый Структура;
	ПараметрыЗагрузкиДокументов.Вставить("СоздаватьНенайденныеЭлементы", Объект.СоздаватьНенайденныеЭлементы);
	// Если требуется, то передадим ссылки для создания ненайденных элементов
	Если Объект.СоздаватьНенайденныеЭлементы Тогда
		ПараметрыЗагрузкиДокументов.Вставить("ОтборСсылкиКСозданию", ОтборСсылкиКСозданию());
	КонецЕсли;
	
	ДокументовКСозданию       = ДокументыКИмпорту.Выгрузить(Новый Структура("Загружать", Истина));
	РаспознанныеДанныеИзБанка = ПолучитьИзВременногоХранилища(АдресХранилищаРаспознанныеДанныеИзБанка);
	
	// Обновим данные из СтрокаСекция
	ПараметрыОтбора = Новый Структура("ИдентификаторВыписки, ИдентификаторОперации");
	ТЗДокументыКИмпорту = ДокументыКИмпорту.Выгрузить();
	Для Каждого Выписка Из РаспознанныеДанныеИзБанка.Выписки Цикл
		Для Каждого Операция Из Выписка.Значение.Операции Цикл
			ПараметрыОтбора.ИдентификаторВыписки = Выписка.Ключ;
			ПараметрыОтбора.ИдентификаторОперации = Операция.Идентификатор;
			СтрокиОтбора = ТЗДокументыКИмпорту.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиОтбора.Количество() > 0 Тогда
				ТекущаяСтрока = СтрокиОтбора[0];
			Иначе	
				ТекущаяСтрока = ТЗДокументыКИмпорту.Найти(Операция.Идентификатор, "ИдентификаторОперации");
			КонецЕсли;
			Если ТекущаяСтрока <> Неопределено Тогда
				Операция.СтрокаСекции = ТекущаяСтрока.СтрокаСекции;
			КонецЕсли;
			Операция.СтрокаСекции.Вставить("ИспользоватьПомощникСозданияСправочников", Объект.ИспользоватьПомощникСозданияСправочников);
		КонецЦикла;
	КонецЦикла;
	
	// Передадим отбор по документам, которые требуется создать
	ПараметрыЗагрузкиДокументов.Вставить("ОтборДокументовКСозданию",                ОтборДокументовКСозданию(ДокументовКСозданию, РаспознанныеДанныеИзБанка));
	ПараметрыЗагрузкиДокументов.Вставить("РаспознанныеДанныеИзБанка",               РаспознанныеДанныеИзБанка);
	ПараметрыЗагрузкиДокументов.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка", АдресХранилищаРаспознанныеДанныеИзБанка);
	
	Возврат ПараметрыЗагрузкиДокументов;
	
КонецФункции

&НаСервере
Функция ОтборСсылкиКСозданию()

	ОтборСсылки = Новый Соответствие;
	ОтборСсылки.Вставить(Тип("СправочникСсылка.Контрагенты"),          Новый Соответствие);
	ОтборСсылки.Вставить(Тип("СправочникСсылка.ФизическиеЛица"),       Новый Соответствие);
	ОтборСсылки.Вставить(Тип("СправочникСсылка.ДоговорыКонтрагентов"), Новый Соответствие);
	ОтборСсылки.Вставить(Тип("СправочникСсылка.БанковскиеСчета"),      Новый Соответствие);
	
	Для Каждого СтрокаТаблицы Из ДокументыКИмпорту Цикл
		
		Если НЕ СтрокаТаблицы.Загружать ИЛИ НЕ ТребуетсяСозданиеНенайденныхВСтроке(СтрокаТаблицы) Тогда
			Продолжить;
		КонецЕсли;
		
		Контрагент = СтрокаТаблицы.КонтрагентСсылкаДляНового;
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ОтборСсылки[ТипЗнч(Контрагент)].Вставить(Контрагент, Истина);
		КонецЕсли;
		СчетКонтрагента = СтрокаТаблицы.СчетКонтрагентаСсылкаДляНового;
		Если ЗначениеЗаполнено(СчетКонтрагента) Тогда
			ОтборСсылки[ТипЗнч(СчетКонтрагента)].Вставить(СчетКонтрагента, Истина);
		КонецЕсли;
		Договор = СтрокаТаблицы.ДоговорСсылкаДляНового;
		Если ЗначениеЗаполнено(Договор) Тогда
			ОтборСсылки[ТипЗнч(Договор)].Вставить(Договор, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтборСсылки;

КонецФункции

&НаСервере
Функция ОтборДокументовКСозданию(ДокументовКСозданию, РаспознанныеДанныеИзБанка)
	
	ОтборДокументовКСозданию = Новый Соответствие; // Ключ выписка, значение массив идентификаторов операции
	
	// Подготовим все выписки
	Для Каждого Выписка Из РаспознанныеДанныеИзБанка.РаспознанныеВыписки Цикл
		ОтборДокументовКСозданию.Вставить(Выписка.Ключ, Новый Массив);
	КонецЦикла;
	// Заполним документы, которые требуется создать
	Для Каждого СтрокаДокументаКСозданию Из ДокументовКСозданию Цикл
		ОтборДокумента = ОтборДокументовКСозданию[СтрокаДокументаКСозданию.ИдентификаторВыписки];
		Если ОтборДокумента <> Неопределено Тогда
			ОтборДокумента.Добавить(СтрокаДокументаКСозданию.ИдентификаторОперации);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтборДокументовКСозданию;

КонецФункции

&НаКлиенте
Процедура АктуализироватьДокументыКИмпорту(ПодготовленныеДанные)
	
	Если ПодготовленныеДанные.Свойство("СсылкиНаСозданныеОбъекты") Тогда
		ОтобразитьСозданныеЭлементы(ПодготовленныеДанные.СсылкиНаСозданныеОбъекты);
	КонецЕсли;
	Если ПодготовленныеДанные.Свойство("МассивСообщений") Тогда
		Для Каждого ТекстСообщения Из ПодготовленныеДанные.МассивСообщений Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;
	
	Если ПодготовленныеДанные.Свойство("РезультатСозданияДокументов") Тогда
		
		РезультатСозданияДокументов = ПодготовленныеДанные.РезультатСозданияДокументов;
		
		Если НЕ РезультатСозданияДокументов.Свойство("КоличествоЗагружено") Тогда
			ТекстОповещения = НСтр("ru='Новых документов для загрузки не обнаружено'");
			ТекстПояснения = "";
			СсылкаДляПерехода = Неопределено;
		Иначе
			ТекстОповещения = НСтр("ru='Выполнена загрузка документов'");
			ШаблонТекста = НСтр("ru = 'Загружено: [КоличествоДокументов]. 
				|Поступило: [СуммаПоступило] 
				|Списано: [СуммаСписано]'");
			
			СтрокаКоличествоДокументов = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(РезультатСозданияДокументов.КоличествоЗагружено, "документ, документа, документов");
			СтрокаСуммаПоступило       = ОбщегоНазначенияУНФВызовСервера.ФорматСумм(РезультатСозданияДокументов.СуммаПоступило, , "0,00");
			СтрокаСуммаСписано         = ОбщегоНазначенияУНФВызовСервера.ФорматСумм(РезультатСозданияДокументов.СуммаСписано, , "0,00");
			
			ВставляемыеЗначения = Новый Структура;
			ВставляемыеЗначения.Вставить("КоличествоДокументов", СтрокаКоличествоДокументов);
			ВставляемыеЗначения.Вставить("СуммаПоступило",       СтрокаСуммаПоступило);
			ВставляемыеЗначения.Вставить("СуммаСписано",         СтрокаСуммаСписано);
			ТекстПояснения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ВставляемыеЗначения);
			СсылкаДляПерехода = "e1cib/list/ЖурналДокументов.Деньги.Форма.БанковскиеВыписки";
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			ТекстОповещения,
			СсылкаДляПерехода,
			ТекстПояснения);
		
	КонецЕсли;
	
	АктуализироватьДанныеДокументаНаСервере();
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.ПоступлениеНаСчет"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.РасходСоСчета"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплату"));
	
	Оповестить("ИзменениеВыписки",, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьДанныеДокументаНаСервере()
	
	Если ПустаяСтрока(АдресХранилищаРаспознанныеДанныеИзБанка) Тогда
		Возврат;
	КонецЕсли;
	
	РаспознанныеДанныеИзБанка = ПолучитьИзВременногоХранилища(АдресХранилищаРаспознанныеДанныеИзБанка);
	РаспознанныеВыписки       = РаспознанныеДанныеИзБанка.РаспознанныеВыписки;
	
	Для Каждого КлючИЗначение Из РаспознанныеДанныеИзБанка.Выписки Цикл
		
		ИдентификаторВыписки = КлючИЗначение.Ключ;
		Выписка              = КлючИЗначение.Значение;
		РаспознаннаяВыписка  = РаспознанныеДанныеИзБанка.РаспознанныеВыписки[ИдентификаторВыписки];
		
		ДанныеДокументов = ДанныеДокументов(Выписка, РаспознаннаяВыписка);
		Для Каждого КлючИЗначение Из ДанныеДокументов Цикл
			ДанныеДокумента = КлючИЗначение.Значение;
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ИдентификаторВыписки", ИдентификаторВыписки);
			СтруктураПоиска.Вставить("ИдентификаторОперации", КлючИЗначение.Ключ);
			СтрокиТаблицы = ДокументыКИмпорту.НайтиСтроки(СтруктураПоиска);
			Если СтрокиТаблицы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы = СтрокиТаблицы[0];
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Документ) И ДанныеДокумента.Свойство("Ссылка") Тогда
				СтрокаТаблицы.Документ = ДанныеДокумента.Ссылка;
			КонецЕсли;
			ЗаполнитьСтрокуПоДаннымДокумента(СтрокаТаблицы, ДанныеДокумента);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыпискуНаКлиенте()
	
	СброситьСостояниеКомандИмпорта();
	
	ДлительнаяОперация = ЗагрузкаВыпискиНаСервере();
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	Иначе
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Загрузка банковской выписки'");
		
		Обработчик = Новый ОписаниеОповещения("ПослеЗагрузкиБанковскойВыпискиВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиБанковскойВыпискиВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда // задание было отменено
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ПодготовленныеДанные = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		АктуализироватьДокументыКИмпорту(ПодготовленныеДанные);
		ВыполненаЗагрузка = Истина;
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСФайлами

#Область РаботаСФайламиВыгрузка

&НаКлиенте
Процедура ВыборФайлаДляВыгрузки(Элемент) Экспорт
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбора.Фильтр                  = НСтр("ru = 'Текстовый файл'") + " (*.txt)|*.txt";
	ДиалогВыбора.Заголовок               = НСтр("ru = 'Выберите папку для выгрузки данных из 1C'");
	ДиалогВыбора.ПредварительныйПросмотр = Ложь;
	ДиалогВыбора.Расширение              = "txt";
	ДиалогВыбора.ИндексФильтра           = 0;
	ДиалогВыбора.ПолноеИмяФайла          = ?(ПустаяСтрока(Элемент.ТекстРедактирования),
		ИмяФайлаВыгрузки(), Элемент.ТекстРедактирования);
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаДляВыгрузкиЗавершение", ЭтотОбъект);
	ДиалогВыбора.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Функция ИмяФайлаВыгрузки()
	
	Возврат СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") + ".txt";
	
КонецФункции

&НаКлиенте
Процедура ВыборФайлаДляВыгрузкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено
		И ВыбранныеФайлы.Количество()>0 Тогда
		
		Объект.ФайлВыгрузки = ВыбранныеФайлы.Получить(0);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиенте(ИмяФайла, АдресВоВременномХранилище)
	
	ДополнительныеПараметры = Новый Структура("ИмяФайла, АдресВоВременномХранилище", ИмяФайла, АдресВоВременномХранилище);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеСозданиеФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	Если Объект.КонтролироватьБезопасностьОбменаСБанком Тогда
		ПоказатьОповещениеПользователя(ТекстЗаголовка);
	Иначе
		#Если НЕ ВебКлиент Тогда
		ПоказатьОповещениеПользователя(
			ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(ДополнительныеПараметры.ИмяФайла), "\", "/"),
			ДополнительныеПараметры.ИмяФайла);
		#Иначе
		Если НЕ ЗначениеЗаполнено(ПолученныеФайлы) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			ТекстЗаголовка,,
			ДополнительныеПараметры.ИмяФайла);
		#КонецЕсли
	КонецЕсли;
	
	ЗавершениеВыгрузкиФайла(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеПроверкаНаКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Прав(СокрЛП(ДополнительныеПараметры.ИмяФайла), 1) = "\"
		ИЛИ Прав(СокрЛП(ДополнительныеПараметры.ИмяФайла), 1) = "/"
		ИЛИ ЭтоКаталог Тогда
		ТекстСообщения = НСтр("ru = 'Файл данных для выгрузки документов в банк некорректен - выбран ""каталог"".
				|Выберите файл выгрузки'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения
			,, "Объект.ФайлВыгрузки");
		
		Возврат;
	КонецЕсли;
	
	ПередаваемыеФайлы = Новый Массив;
	
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(
		ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры.АдресВоВременномХранилище);
	ПередаваемыеФайлы.Добавить(ОписаниеФайла);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПолучениеФайлов(ОписаниеОповещения, ПередаваемыеФайлы,ДополнительныеПараметры.ИмяФайла, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеПроверкаСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	ДополнительныеПараметры.Вставить("ФайлСуществует", Существует);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеПроверкаНаКаталог", ЭтотОбъект, ДополнительныеПараметры);
	Если Существует Тогда
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеСозданиеФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеПроверкаСуществования", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыгрузкиФайла(ДополнительныеПараметры)
	
	УстановитьСостояниеОтправленоСервер();
	ОповеститьОбИзменении(Тип("ДокументСсылка.ПлатежноеПоручение"));
	
	ПоказатьФормуКонтроляБезопасности(ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры.АдресВоВременномХранилище);
	
	ЭкспортПроизведен = Истина;
	ПлатежныеДокументыОбновитьИтогиВПодвале();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуКонтроляБезопасности(ИмяФайла, АдресВоВременномХранилище)
	
	Если Объект.КонтролироватьБезопасностьОбменаСБанком И Не ПрямойОбменСБанками Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресИсходныхДанных", АдресВоВременномХранилище);
		ПараметрыФормы.Вставить("ПутьКФайлу", ИмяФайла);
		ПараметрыФормы.Вставить("Кодировка", Объект.Кодировка);
		ОткрытьФорму("Обработка.КлиентБанк.Форма.КонтрольБезопасностиОбменаСБанком", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ТекстовыйДокументИзВременногоХранилищаФайла(АдресФайла, Кодировка) Экспорт
	
	ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	Текст = Новый ТекстовыйДокумент();
	Если Кодировка = "DOS" Тогда
		Кодир = "cp866";
	Иначе
		Кодир = "windows-1251";
	КонецЕсли;
	
	Текст.Прочитать(ИмяВременногоФайла, Кодир);
	УдалитьФайлы(ИмяВременногоФайла); // Удалим временный файл, после его обработки.
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗаданияИДлительныеОперации

&НаСервере
Процедура ЗаписатьОшибкуВЖурнал(Знач ТекстСообщения, Знач ОписаниеОшибки)
	
	ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация)
	
	ШаблонСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:
							|%1
							|Подробности в журнале регистрации.'");
	Если ЗначениеЗаполнено(ДлительнаяОперация.КраткоеПредставлениеОшибки) Тогда
		СообщениеОбОшибке = СтрШаблон(ШаблонСообщения, ДлительнаяОперация.КраткоеПредставлениеОшибки);
	ИначеЕсли ЗначениеЗаполнено(ДлительнаяОперация.ПодробноеПредставлениеОшибки) Тогда
		СообщениеОбОшибке = СтрШаблон(ШаблонСообщения, ДлительнаяОперация.ПодробноеПредставлениеОшибки);
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеОбработчики

&НаКлиенте
Процедура Подключаемый_ПодключитьРасширениеРаботыСФайламиИПрочитатьФайл() Экспорт
	
	// Для прямого обмена с банками не предлагаем установку расширения работы с файлами
	Если ПрямойОбменСБанками Тогда
		РасширениеРаботыСФайламиПодключено = Ложь;
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрочитатьФайлЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РаспознатьДанныеБанкаПовторно()
	
	// Запомним текущую строку, чтобы после обновления (перезаполнения) данных в таблице,
	// вернуться ней
	Если Элементы.ДокументыКИмпорту.ТекущаяСтрока <> Неопределено Тогда
		ДокументыКИмпорту_ТекущаяСтрока =
			ДокументыКИмпорту.Индекс(ДокументыКИмпорту.НайтиПоИдентификатору(Элементы.ДокументыКИмпорту.ТекущаяСтрока));
	КонецЕсли;
	
	ДлительнаяОперация = РаспознатьДанныеИзБанкаПовторноНаСервере();
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	Иначе
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПовторногоРаспознаванияДанныхИзБанкаВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПовторногоРаспознаванияДанныхИзБанкаВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда // задание было отменено
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		АдресХранилищаРаспознанныеДанныеИзБанка = ДлительнаяОперация.АдресРезультата;
		РазместитьНаФормеРаспознанныеДанныеИзБанка(АдресХранилищаРаспознанныеДанныеИзБанка, Ложь);
		ВыполняетсяПовторноеРаспознаваниеДанныхИзБанка = Ложь;
		ВосстановитьТекущуюСтроку();
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеНемодальныхВызовов

&НаКлиенте
Процедура ПрочитатьФайлЗавершение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	
	РасширениеРаботыСФайламиПодключено = ПодключеноРасширениеРаботыСФайлами;
	ЗагрузкаУстановитьВидимостьЭлементовВыбораФайлов(ЭтотОбъект);
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗагрузка
		И РасширениеРаботыСФайламиПодключено
		И НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() // не запускаем чтение файла в веб-клиенте, так как требуется разрешение от пользователя
		И НЕ ПереданыРаспознанныеДанныеИзБанка Тогда
		Если НЕ ПустаяСтрока(Объект.ФайлЗагрузки) Тогда
			ОбменСБанкомКлиент.ЗагрузитьВыбранныйФайл(Объект.ФайлЗагрузки, ЭтотОбъект, Объект.Кодировка);
		КонецЕсли;
	КонецЕсли;
	
	ПереданыРаспознанныеДанныеИзБанка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуКлиентБанкаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатЗакрытия,, "ФайлЗагрузки");
		ВыгружатьПлатежноеТребование(ЭтотОбъект);
		
		УправлениеФормой(ЭтотОбъект);
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗагрузка Тогда
			Если НЕ ПустаяСтрока(РезультатЗакрытия.ФайлЗагрузки) И Объект.ФайлЗагрузки <> РезультатЗакрытия.ФайлЗагрузки И РасширениеРаботыСФайламиПодключено Тогда
				Объект.ФайлЗагрузки = РезультатЗакрытия.ФайлЗагрузки;
				ОбновитьСпискиДокументов();
				ОбменСБанкомКлиент.ЗагрузитьВыбранныйФайл(Объект.ФайлЗагрузки, ЭтотОбъект, Объект.Кодировка);
			ИначеЕсли СоответствиеВыпискиОтбору(АдресХранилищаРаспознанныеДанныеИзБанка, Объект.БанковскийСчет).Соответствует Тогда
				// Настройки могли повлиять на форму, повторно разместим данные на форме.
				РазместитьНаФормеРаспознанныеДанныеИзБанка(АдресХранилищаРаспознанныеДанныеИзБанка, Ложь);
			Иначе
				Объект.ФайлЗагрузки = РезультатЗакрытия.ФайлЗагрузки;
				ОбновитьСпискиДокументов();
			КонецЕсли;
		Иначе
			Объект.ФайлЗагрузки = РезультатЗакрытия.ФайлЗагрузки;
			ОбновитьСпискиДокументов();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВБанкЗавершение(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	ОбменСБанкамиКлиент.СформироватьПодписатьОтправитьЭД(МассивДокументов);
	ЭкспортПроизведен = Истина;
	
	АдресВоВременномХранилище = ВыгрузитьДокументы(Истина);
	ПодготовитьПротоколИСохранитьРезультаты(АдресВоВременномХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НачалоПериода = РезультатВыбора.НачалоПериода;
	Объект.КонецПериода  = РезультатВыбора.КонецПериода;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		ОбновитьСписокДокументовНаЭкспорт();
	Иначе
		ОчиститьЭлектронныеВыписки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьЭлементыДиректБанк(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ВидимостьБаннера     = Ложь;
	ВидимостьГиперссылки = Ложь;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ВидимостьБаннера     = Форма.ВидимостьЭлементовДиректБанк = "ПоказатьБаннер";
		ВидимостьГиперссылки = Форма.ВидимостьЭлементовДиректБанк = "ПоказатьГиперссылку";
	КонецЕсли;
	
	Элементы.ГруппаРекламаДиректБанк.Видимость = ВидимостьБаннера И Не Форма.ПодключенаИнтеграцияСБанком;
	
	Если ВидимостьГиперссылки Тогда
		Элементы.ПодключитьДиректБанк.Гиперссылка = Истина;
		Форма.ПодключитьДиректБанк = НСтр("ru = 'Подключить 1С:ДиректБанк'");
	Иначе
		Элементы.ПодключитьДиректБанк.Гиперссылка = Ложь;
		Форма.ПодключитьДиректБанк = "";
	КонецЕсли;
	
	Элементы.ДекорацияПояснениеПериод.Видимость = Форма.ПрямойОбменСбербанк;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура БанкИНомерСчета(БанковскийСчет, Банк, НомерСчета)
	
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, "Банк, НомерСчета");
	Банк = ЗначенияРеквизитов.Банк;
	НомерСчета = ЗначенияРеквизитов.НомерСчета;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеОтправленоСервер()
	
	Для Каждого Строка Из Объект.ПлатежныеДокументы Цикл
		
		Если Не Строка.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(
			Строка.Документ, Перечисления.СостоянияБанковскихДокументов.Отправлено);
		Строка.Состояние = Перечисления.СостоянияБанковскихДокументов.Отправлено;
		Строка.Выгружать = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыДляИнтеграцииСБанком(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаПодсказкаИнтеграцииВыгрузка.Видимость = Форма.ПодключенаИнтеграцияСБанком;
	Элементы.ГруппаПериоды.Видимость         = Не Форма.ПодключенаИнтеграцияСБанком;
	Элементы.ГруппаТаблицаВыгрузки.Видимость = Не Форма.ПодключенаИнтеграцияСБанком;
	Элементы.ГруппаВыгрузкаВыписки.Видимость = Не Форма.ПодключенаИнтеграцияСБанком;
	
	Элементы.ГруппаПодсказкаИнтеграцииЗагрузка.Видимость = Форма.ПодключенаИнтеграцияСБанком;
	Элементы.СтраницыВыборВыписки.Видимость  = Не Форма.ПодключенаИнтеграцияСБанком;
	Элементы.ГруппаТаблицаЗагрузки.Видимость = Не Форма.ПодключенаИнтеграцияСБанком;
	Элементы.ГруппаКомандЗагрузки.Видимость  = Не Форма.ПодключенаИнтеграцияСБанком;
	
КонецПроцедуры

&НаСервере
Функция ИспользоватьНесколькоБанковскихСчетов()
	
	Результат = Истина;
	
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Результат = УчетДенежныхСредствПовтИсп.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ПроцедурыИзКБУНФ

// Функция читает электронную выписку банка и возвращает ее содержимое в текстовом формате.
//
&НаСервере
Функция ПрочитатьЭлектроннуюВыпискуБанкаНаСервере(ЭлектроннаяВыписка, СтекОповещений)
	
	АдресФайла = Неопределено; // адрес временного хранилища
	
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(ЭлектроннаяВыписка, АдресФайла);
		
	Если АдресФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	
	// Тип файла передаем в виде строки, чтобы обеспечить корректное чтение файла в нелокализованных средах
	// (Linux, англоязычная Windows + англоязычный MS SQL и др.)
	Если Объект.Кодировка = Неопределено ИЛИ Объект.Кодировка = "Авто" Тогда
		ТипФайла = КлиентБанкВызовСервера.ТипФайла(ИмяВременногоФайла);
	ИначеЕсли (Объект.Кодировка = КодировкаТекста.OEM) ИЛИ (Объект.Кодировка = "DOS") Тогда
		ТипФайла = "cp866";
	ИначеЕсли Объект.Кодировка = "Windows" ИЛИ НЕ ЗначениеЗаполнено(Объект.Кодировка) Тогда
		ТипФайла = "windows-1251";
	Иначе
		ТипФайла = Объект.Кодировка;
	КонецЕсли;
	
	Попытка
		ПотокЧтения.Прочитать(ИмяВременногоФайла, ТипФайла);
	Исключение
		ТекстСообщения = НСтр("ru = 'Файл не прочитан.'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПотокЧтения.КоличествоСтрок() < 1 Тогда
		ТекстСообщения = НСтр("ru = 'В файле нет данных!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		Возврат Неопределено;
	КонецЕсли;
	
	Если СокрЛП(ПотокЧтения.ПолучитьСтроку(1)) <> "1CClientBankExchange" Тогда
		ТекстСообщения = НСтр("ru = 'Указанный файл не является файлом обмена или неверно указана кодировка!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		Возврат Неопределено;
	КонецЕсли;
	
	// Удаляем временный файл
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при удалении временного файла.'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ПотокЧтения.ПолучитьТекст();

КонецФункции // ПрочитатьЭлектроннуюВыпискуБанка()

&НаКлиенте
Процедура ПрочитатьЭлектронныеВыпискиБанка()
	
	СтекОповещений = Новый Массив;
	ТекстПредупреждения = "";
	НомерВыписки = 1;
	ИмпортТекстДляРазбора = "";
	Для каждого ЭлементСписка Из ВыпискиБанка Цикл
		ТекстВыписки = ПрочитатьЭлектроннуюВыпискуБанкаНаСервере(ЭлементСписка.Значение, СтекОповещений);
		// Необходимо удалить все секции "КонецФайла" кроме последней
		Если НомерВыписки <> ВыпискиБанка.Количество()Тогда
			ТекстВыписки = СтрЗаменить(ТекстВыписки, "КонецФайла", ""); // Не локализуется
		КонецЕсли;
		НомерВыписки = НомерВыписки + 1;
		ИмпортТекстДляРазбора = ИмпортТекстДляРазбора + Символы.ПС + ТекстВыписки;
	КонецЦикла;
	
	ОбработанныйТекст = ИмпортТекстДляРазбора;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияКБУНФиБП

&НаКлиенте
Процедура ОбновитьДанныеВСтрокеСекции(ИмяРеквизита)
	
	Если Элементы.ДокументыКИмпорту.ТекущиеДанные <> Неопределено Тогда
		Элементы.ДокументыКИмпорту.ТекущиеДанные.СтрокаСекции[ИмяРеквизита] =
			Элементы.ДокументыКИмпорту.ТекущиеДанные[ИмяРеквизита];
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеВСтрокеДокументыКИмпорту(ИмяРеквизита)
	
	Если Элементы.ДокументыКИмпорту.ТекущиеДанные <> Неопределено Тогда
		Элементы.ДокументыКИмпорту.ТекущиеДанные[ИмяРеквизита] =
			Элементы.ДокументыКИмпорту.ТекущиеДанные.СтрокаСекции[ИмяРеквизита];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСпособЗачетаПриИзменении(Элемент)
	
	ОбновитьДанныеВСтрокеСекции("СпособЗачетаТЧ");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуБанковскийСчетПриИзменении(Элемент)
	
	Если Элементы.ДокументыКИмпорту.ТекущиеДанные <> Неопределено Тогда
		Элементы.ДокументыКИмпорту.ТекущиеДанные.СтрокаСекции.БанковскийСчет =
			Элементы.ДокументыКИмпорту.ТекущиеДанные.БанковскийСчетОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуКорреспонденцияПриИзменении(Элемент)
	
	ОбновитьДанныеВСтрокеСекции("Корреспонденция");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПроектПриИзменении(Элемент)
	
	ОбновитьДанныеВСтрокеСекции("Проект");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПодразделениеПриИзменении(Элемент)
	
	ОбновитьДанныеВСтрокеСекции("Подразделение");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуЗаказПриИзменении(Элемент)
	
	ОбновитьДанныеВСтрокеСекции("Заказ");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСчетНаОплатуПриИзменении(Элемент)
	
	ОбновитьДанныеВСтрокеСекции("СчетНаОплату");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуДокументРасчетовПриИзменении(Элемент)
	
	ОбновитьДанныеВСтрокеСекции("ДокументРасчетов");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПлатежноеПоручениеПриИзменении(Элемент)
	
	ОбновитьДанныеВСтрокеСекции("ПлатежноеПоручение");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПризнакАвансаПриИзменении(Элемент)
	
	ОбновитьДанныеВСтрокеСекции("ПризнакАванса");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуВидНалогаПриИзменении(Элемент)
	
	ОбновитьДанныеВСтрокеСекции("ВидНалога");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуКассаПриИзменении(Элемент)
	
	ОбновитьДанныеВСтрокеСекции("Касса");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
// Процедура обрабатывает результат выбора периода заполнения текущего документа
//
Процедура ПослеВыбораПериодаЗаполнения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		Если Объект.НачалоПериода <> РезультатЗакрытия.ДатаНачала Тогда
			Объект.НачалоПериода = РезультатЗакрытия.ДатаНачала;
		КонецЕсли;
		
		Если Объект.КонецПериода <> РезультатЗакрытия.ДатаОкончания Тогда
			Объект.КонецПериода = РезультатЗакрытия.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияОСтаройВерсииКлиентБанкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("СтрокаПоиска", НСтр("ru = 'Банк'"));
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти
