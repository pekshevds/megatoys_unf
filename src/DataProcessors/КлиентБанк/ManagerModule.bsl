#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Настройки

Функция ПолучитьНастройкиПрограммыКлиентаБанка(Организация, БанковскийСчет) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		// Определим организацию
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			// Из банковского счета
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец");
		ИначеЕсли НЕ Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
			// По умолчанию
			Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) И ЗначениеЗаполнено(Организация)
		И НЕ УчетДенежныхСредствПовтИсп.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		// Определим банковский счет, если он один
		УчетДенежныхСредствСервер.УстановитьБанковскийСчет(БанковскийСчет, Организация,
			УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета());
	КонецЕсли;
	
	Настройки = Новый Структура;
	Настройки.Вставить("НастройкиЗагружены",                         Ложь);
	Настройки.Вставить("ПрямойОбменТолькоЗагрузка",                  Ложь);
	Настройки.Вставить("СоглашениеПрямогоОбменаСБанками",            Перечисления.ПрограммыБанка.ПустаяСсылка());
	Настройки.Вставить("БанкДляПрямогоОбмена",                       Справочники.Банки.ПустаяСсылка());
	Настройки.Вставить("Кодировка",                                  Неопределено);
	Настройки.Вставить("Программа",                                  "");
	Настройки.Вставить("ФайлВыгрузки",                               "");
	Настройки.Вставить("ФайлЗагрузки",                               "");
	Настройки.Вставить("КонтролироватьНекорректныеСимволыВНомере",   Истина);
	Настройки.Вставить("Платежное_Поручение",                        Истина);
	Настройки.Вставить("Платежное_Требование",                       Ложь);
	Настройки.Вставить("СоздаватьНенайденныеЭлементы",               Истина);
	Настройки.Вставить("ПередЗагрузкойПоказыватьФормуОбменаСБанком", Ложь);
	Настройки.Вставить("КонтролироватьБезопасностьОбменаСБанком",    Истина);
	Настройки.Вставить("БанковскийСчет",                             БанковскийСчет);
	Настройки.Вставить("Организация",                                Организация);
	Настройки.Вставить("РежимИнтеграцииОграничиватьПериодВыписки",   Ложь);
		
	Настройки.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов",	Истина);
	Настройки.Вставить("АвтоматическиПодставлятьДокументы",				Истина);
	Настройки.Вставить("ИспользоватьПомощникСозданияСправочников",		Ложь);
	Настройки.Вставить("НеУдалятьДокументыКоторыхНетВВыписке",			Ложь);
	Настройки.Вставить("СтатьяДДСВходящий",
		ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей"));
	Настройки.Вставить("СтатьяДДСИсходящий",
		ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам"));
	Настройки.Вставить("СпособЗачета", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ *
	|ИЗ
	|	РегистрСведений.НастройкиОбменаСКлиентомБанка КАК НастройкиОбменаСКлиентомБанка
	|ГДЕ
	|	НастройкиОбменаСКлиентомБанка.БанковскийСчет = &Счет
	|	И НастройкиОбменаСКлиентомБанка.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Счет",        БанковскийСчет);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Настройки.Вставить("НастройкиЗагружены",                         Истина);
		Настройки.Вставить("Кодировка",                                  Выборка.Кодировка);
		Настройки.Вставить("Программа",                                  Выборка.Программа);
		Настройки.Вставить("ФайлВыгрузки",                               Выборка.ФайлВыгрузки);
		Настройки.Вставить("ФайлЗагрузки",                               Выборка.ФайлЗагрузки);
		Настройки.Вставить("КонтролироватьНекорректныеСимволыВНомере",   Выборка.КонтролироватьНекорректныеСимволыВНомере);
		Настройки.Вставить("СоздаватьНенайденныеЭлементы",
			НЕ Выборка.ОтключитьАвтоматическоеСозданиеНенайденныхЭлементов);
		Настройки.Вставить("ПередЗагрузкойПоказыватьФормуОбменаСБанком", Выборка.ПередЗагрузкойПоказыватьФормуОбменаСБанком
			Или ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВключена(БанковскийСчет));
		Настройки.Вставить("КонтролироватьБезопасностьОбменаСБанком",
			НЕ Выборка.НеКонтролироватьБезопасностьОбменаСБанком);
		
		Настройки.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов",
			Выборка.АнализироватьИсториюВыбораЗначенийРеквизитов);
		Настройки.Вставить("АвтоматическиПодставлятьДокументы",			 Выборка.АвтоматическиПодставлятьДокументы);
		Настройки.Вставить("ИспользоватьПомощникСозданияСправочников",	 Выборка.ИспользоватьПомощникСозданияСправочников);
		Настройки.Вставить("СтатьяДДСВходящий",							 Выборка.СтатьяДДСВходящий);
		Настройки.Вставить("СтатьяДДСИсходящий",						 Выборка.СтатьяДДСИсходящий);
		Настройки.Вставить("СпособЗачета",						 		 Выборка.СпособЗачета);
		Настройки.Вставить("НеУдалятьДокументыКоторыхНетВВыписке",		 Выборка.НеУдалятьДокументыКоторыхНетВВыписке);
	
		ВидыВыгружаемыхПлатДокументов = Выборка.ВидыВыгружаемыхПлатДокументов.Получить();
		Если ВидыВыгружаемыхПлатДокументов <> Неопределено Тогда
			Для каждого Вид Из ВидыВыгружаемыхПлатДокументов Цикл
				Настройки.Вставить(СтрЗаменить(Вид.Документ, " ", "_"), Вид.Пометка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// При автоматической подстановке заказа, счета и документа расчетов не может быть установлен способ зачета Авто 
	Если Настройки.АвтоматическиПодставлятьДокументы
		И Настройки.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
		Настройки.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками")
		И ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, "ВалютаДенежныхСредств, Банк.Код");
		СвойстваСчета.Вставить("Валютный",
			УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() <> СвойстваСчета.ВалютаДенежныхСредств);
			
		ВозможнаЗагрузкаВалютнойВыписки = Ложь;
		Если СвойстваСчета.Валютный Тогда
			ВозможнаЗагрузкаВалютнойВыписки = ОбменСБанками.ВозможенПрямойОбменСБанком(СвойстваСчета.БанкКод, "3")
				Или РаботаСБанкамиПереопределяемый.ВозможнаЗагрузкаВалютнойВыписки(СвойстваСчета.БанкКод);
		КонецЕсли;
		
		ОбменДоступен = Не СвойстваСчета.Валютный Или ВозможнаЗагрузкаВалютнойВыписки;
		
		Если ОбменДоступен Тогда
			Банк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Банк");
			НастройкаДиректБанк = ОбменСБанками.НастройкаОбмена(Организация, Банк);
			
			Если НастройкаДиректБанк <> Неопределено Тогда
				Настройки.Вставить("СоглашениеПрямогоОбменаСБанками", НастройкаДиректБанк);
				Настройки.Вставить("ПрямойОбменТолькоЗагрузка",       СвойстваСчета.Валютный);
				Настройки.Вставить("БанкДляПрямогоОбмена",            Банк);
				Настройки.Вставить("Платежное_Требование",            Ложь);
				Настройки.Вставить("ПрограммаБанка",
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаДиректБанк, "ПрограммаБанка"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция НастройкиЗагрузки() Экспорт
	
	ВыполнитьМиграциюНастроекИзКлиентБанкаУНФПриПервомЗапуске();
	
	Настройки = ЗагрузкаВыпискиПоБанковскомуСчету.НовыйНастройкиОбменСБанком();
	
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбменСБанком", "НастройкиЗагрузки", Неопределено);
	Если СохраненныеНастройки = Неопределено Тогда
		СконвертироватьНастройкиЗагрузки(Настройки);
	Иначе
		ЗагрузкаВыпискиПоБанковскомуСчету.ЗаполнитьНастройкиОбменСБанком(Настройки, СохраненныеНастройки);
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Процедура ЗаписатьНастройкиЗагрузки(Настройки) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбменСБанком", "НастройкиЗагрузки", Настройки);
	
КонецПроцедуры

Процедура ВыполнитьМиграциюНастроекИзКлиентБанкаУНФПриПервомЗапуске()
	
	Если Не РасчетыРаботаСФормамиВызовСервера.ПроверитьВозможностьИспользованияСтарогоКлиентБанкаУНФ() Тогда
		Возврат;
	КонецЕсли;

	ИмяКлючаОбъекта = "Обработка.КлиентБанк.Форма.ОсновнаяФорма";
	ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта
		+ "_" + "МиграцияНастроекИзСтарогоКлиентБанкаУНФВыполнена");
	
	Если ЗначениеНастройки = Неопределено Тогда
		МиграцияНастроекИзСтарогоКлиентБанкаУНФВыполнена = Ложь;
	Иначе
		МиграцияНастроекИзСтарогоКлиентБанкаУНФВыполнена = ЗначениеНастройки;
	КонецЕсли;
	
	Если МиграцияНастроекИзСтарогоКлиентБанкаУНФВыполнена Тогда
		Возврат;
	КонецЕсли;

	ТаблицаДокументов = Новый ТаблицаЗначений();
	ТаблицаДокументов.Колонки.Добавить("Документ", ОбщегоНазначения.ОписаниеТипаСтрока(24));
	ТаблицаДокументов.Колонки.Добавить("Пометка",  Новый ОписаниеТипов("Булево"));
	
	СтрокаДокумента = ТаблицаДокументов.Добавить();
	СтрокаДокумента.Документ = "Платежное поручение";
	СтрокаДокумента.Пометка  = Истина;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	БанковскиеСчета.Владелец КАК Организация,
	                      |	БанковскиеСчета.Ссылка КАК БанковскийСчет
	                      |ИЗ
	                      |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	                      |ГДЕ
	                      |	БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Настройки = ХранилищеСистемныхНастроек.Загрузить(
			"Обработка.КлиентБанк.Форма.ОсновнаяФорма/" + ПолучитьНавигационнуюСсылку(Выборка.БанковскийСчет),
			"ВыгрузкаВСбербанк");

		Если Настройки <> Неопределено Тогда
			НастройкиОбменаСКлиентомБанка = РегистрыСведений.НастройкиОбменаСКлиентомБанка.СоздатьМенеджерЗаписи();
			
			НастройкиОбменаСКлиентомБанка.Организация                  	= Выборка.Организация;
			НастройкиОбменаСКлиентомБанка.БанковскийСчет               	= Выборка.БанковскийСчет;
			НастройкиОбменаСКлиентомБанка.Программа                    	= Настройки["Программа"];
			НастройкиОбменаСКлиентомБанка.Кодировка                    	= ?(Настройки["Кодировка"] = "DOS", "DOS", "Windows");
			НастройкиОбменаСКлиентомБанка.ФайлВыгрузки                 	= Настройки["ФайлВыгрузки"];
			НастройкиОбменаСКлиентомБанка.ФайлЗагрузки                 	= Настройки["ФайлЗагрузки"];
			НастройкиОбменаСКлиентомБанка.ВидыВыгружаемыхПлатДокументов	= Новый ХранилищеЗначения(ТаблицаДокументов);
			НастройкиОбменаСКлиентомБанка.КонтролироватьНекорректныеСимволыВНомере = Истина;
			НастройкиОбменаСКлиентомБанка.ПередЗагрузкойПоказыватьФормуОбменаСБанком = Ложь;
			НастройкиОбменаСКлиентомБанка.ОтключитьАвтоматическоеСозданиеНенайденныхЭлементов = Ложь;
			
			КонтролироватьБезопасностьОбменаСБанком = Настройки["КонтролироватьБезопасностьОбменаСБанком"];
			Если КонтролироватьБезопасностьОбменаСБанком = Неопределено Тогда
				НастройкиОбменаСКлиентомБанка.НеКонтролироватьБезопасностьОбменаСБанком = Истина;
			Иначе	
				НастройкиОбменаСКлиентомБанка.НеКонтролироватьБезопасностьОбменаСБанком =
					НЕ КонтролироватьБезопасностьОбменаСБанком;
			КонецЕсли;
			
			НастройкиОбменаСКлиентомБанка.АнализироватьИсториюВыбораЗначенийРеквизитов =
				Настройки["АнализироватьИсториюВыбораЗначенийРеквизитов"];
			НастройкиОбменаСКлиентомБанка.ИспользоватьПомощникСозданияСправочников =
				Настройки["ИспользоватьПомощникСозданияСправочников"];
			НастройкиОбменаСКлиентомБанка.НеУдалятьДокументыКоторыхНетВВыписке =
				Настройки["НеУдалятьДокументыКоторыхНетВВыписке"];
			НастройкиОбменаСКлиентомБанка.СпособЗачета	= Настройки["СпособЗачета"];
			НастройкиОбменаСКлиентомБанка.АвтоматическиПодставлятьДокументы	= Настройки["АвтоматическиПодставлятьДокументы"];
			НастройкиОбменаСКлиентомБанка.СтатьяДДСВходящий					= Настройки["СтатьяДДСВходящий"];
			НастройкиОбменаСКлиентомБанка.СтатьяДДСИсходящий				= Настройки["СтатьяДДСИсходящий"];
			
			НастройкиОбменаСКлиентомБанка.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ХранилищеСистемныхНастроек.Сохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта
		+ "_" + "МиграцияНастроекИзСтарогоКлиентБанкаУНФВыполнена", Истина);
		
КонецПроцедуры

// Читает настройки, сохраненные предыдущими версиями программы, и сохраняет их в новом формате.
// Раньше настройки хранились в текущих данных формы и если их не сконвертировать,
// то они будут утрачены при закрытии этой формы.
Процедура СконвертироватьНастройкиЗагрузки(Настройки)
	
	СохраненныеНастройки = ХранилищеСистемныхНастроек.Загрузить("Обработка.КлиентБанк.Форма.Форма/ТекущиеДанные");
	Если ТипЗнч(СохраненныеНастройки) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьДанные = Ложь;
	
	// 1. Родитель в новых элементах справочника
	ГруппаДляНовыхКонтрагентов = СохраненныеНастройки["ГруппаДляНовыхКонтрагентов"];
	Если ЗначениеЗаполнено(ГруппаДляНовыхКонтрагентов) Тогда
		
		НастройкиЗаполненияНовогоКонтрагента = Новый Структура;
		НастройкиЗаполненияНовогоКонтрагента.Вставить("Родитель", ГруппаДляНовыхКонтрагентов);
		Настройки.ЗаполнениеНовыхЭлементов.Вставить(Тип("СправочникСсылка.Контрагенты"), НастройкиЗаполненияНовогоКонтрагента);
		
		ЕстьДанные = Истина;
		
	КонецЕсли;
	
	// 2. Настройки для разных видов операций
	НастройкаЗаполнения = СохраненныеНастройки["НастройкаЗаполнения"];
	Если ТипЗнч(НастройкаЗаполнения) = Тип("ТаблицаЗначений") Тогда
		
		ОписаниеОпераций = Новый Структура;
		ОписаниеОпераций.Вставить("Поступило", Новый Структура);
		ОписаниеОпераций.Вставить("Списано",   Новый Структура);
		
		ОписаниеОпераций.Поступило.Вставить("Тип",       Тип("ДокументСсылка.ПоступлениеНаСчет"));
		ОписаниеОпераций.Поступило.Вставить("Псевдоним", "Поступление на расчетный счет");
		
		ОписаниеОпераций.Списано.Вставить("Тип",         Тип("ДокументСсылка.РасходСоСчета"));
		ОписаниеОпераций.Списано.Вставить("Псевдоним",   "Списание с расчетного счета");
		
		Для Каждого ОписаниеОперации Из ОписаниеОпераций Цикл
			
			НастройкаОперации = НастройкаЗаполнения.Найти(ОписаниеОперации.Значение.Псевдоним, "Документ");
			Если НастройкаОперации <> Неопределено Тогда
				Настройки.СозданиеДокументов[ОписаниеОперации.Значение.Тип].ПроводитьДокумент = НастройкаОперации.Проводить;
				ЕстьДанные = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьДанные Тогда
		ЗаписатьНастройкиЗагрузки(Настройки);
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыДокументовКлиентаБанка() Экспорт
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	ТаблицаДокументов.Колонки.Добавить("Документ", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументов.Колонки.Добавить("Название", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументов.Колонки.Добавить("Корреспондент", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументов.Колонки.Добавить("ДокументКратко", Новый ОписаниеТипов("Строка"));
	
	Макет                   = УправлениеПечатью.МакетПечатнойФормы("Обработка.КлиентБанк.ВидыДокументов");
	ОбластьДокументов       = Макет.ПолучитьОбласть("Документы");
	ОбластьДокументовВысота = ОбластьДокументов.ВысотаТаблицы;
	
	Для НСтр = 1 По ОбластьДокументовВысота Цикл
		ВидДокумента  = СокрЛП(ОбластьДокументов.Область(НСтр, 1).Текст);
		Название      = СокрЛП(ОбластьДокументов.Область(НСтр, 2).Текст);
		Корреспондент = СокрЛП(ОбластьДокументов.Область(НСтр, 3).Текст);
		Кратко        = СокрЛП(ОбластьДокументов.Область(НСтр, 4).Текст);
		
		Стр = ТаблицаДокументов.Добавить();
		Стр.Пометка        = Истина;
		Стр.Документ       = ВидДокумента;
		Стр.Название       = Название;
		Стр.Корреспондент  = Корреспондент;
		Стр.ДокументКратко = Кратко;
	КонецЦикла;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаВБанк

Функция Выгрузить(ТаблицаДокументов, ПлатежныеДокументы, Знач Кодировка, Программа, НачПериода, КонПериода, БанковскийСчет,
		ВерсияФормата = "", КлючУникальности, ВТекстовомФОрмате = Ложь) Экспорт
	Если НЕ ЗначениеЗаполнено(Кодировка) Тогда
		Кодировка = "Windows"; // кодировка "по умолчанию"
	КонецЕсли;
	
	ПараметрыВыгрузкиДокументов = НовыйПараметрыВыгрузкиДокументов(КонПериода);
	Если ЗначениеЗаполнено(ВерсияФормата) Тогда
		ПараметрыВыгрузкиДокументов.ВерсияФормата     = ВерсияФормата;
	КонецЕсли;
	ПараметрыВыгрузкиДокументов.Кодировка             = Кодировка;
	ПараметрыВыгрузкиДокументов.Программа             = Программа;
	ПараметрыВыгрузкиДокументов.ВыгружатьДатуСоздания = Истина;
	ПараметрыВыгрузкиДокументов.НачалоПериода         = НачПериода;
	ПараметрыВыгрузкиДокументов.КонецПериода          = КонПериода;
	ПараметрыВыгрузкиДокументов.НомерБанковскогоСчета = БанковскийСчет.НомерСчета;
	
	Для каждого Строка Из ТаблицаДокументов Цикл
		Если Строка.Пометка = Истина Тогда
			ИмяДокумента = СокрЛП(Строка.Название);
			ПараметрыВыгрузкиДокументов.ВидыДокументов.Добавить(ИмяДокумента);
		КонецЕсли;
	КонецЦикла;
	
	ДвоичныеДанные = ДвоичныеДанныеВыгрузки(ПараметрыВыгрузкиДокументов, ПлатежныеДокументы);
	
	Если ВТекстовомФОрмате Тогда
		Если Кодировка = "Windows" Тогда
			КодировкаДД = "windows-1251";
		Иначе
			КодировкаДД = "cp866";
		КонецЕсли;	
		Результат = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные, КодировкаДД);
	Иначе
		Результат = ДвоичныеДанные;
	КонецЕсли;	
	
	Адрес = ПоместитьВоВременноеХранилище(Результат, КлючУникальности);
	
	// Отметим те документы которые успешно загрузились
	Для каждого СтрокаСекции Из ПлатежныеДокументы Цикл
		СтрокаСекции.Готовность = ?(СтрокаСекции.Готовность = -2, -1, СтрокаСекции.Готовность);
	КонецЦикла;
	
	Возврат Адрес;
	
КонецФункции

// Процедура проверяет заполнение таблицы с документами
//
Процедура ПроверитьЗаполнениеТаблицыДокументов(Объект, Документ, ЕстьСтрокиЭкспортаСОшибками) Экспорт
	
	ЕстьСтрокиЭкспортаСПредупреждениями = Ложь;
	Для НомСтр = 0 По Документ.Количество() - 1 Цикл
		Если Документ[НомСтр].Готовность > 0 Тогда
			Если Документ[НомСтр].ОписаниеОшибок = "РекомендуетсяОбновитьРеквизиты" Тогда
				ЕстьСтрокиЭкспортаСПредупреждениями = Истина;
			Иначе
				ЕстьСтрокиЭкспортаСОшибками = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьСтрокиЭкспортаСОшибками Тогда
		ТекстСообщения = НСтр("ru = 'Некоторые платежные поручения заполнены некорректно и не могут быть выгружены'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежныеДокументы");
		
		Возврат;
	КонецЕсли;
	
	Если ЕстьСтрокиЭкспортаСПредупреждениями Тогда
		ТекстСообщения =
			НСтр("ru = 'Для некоторых платежных поручений есть рекомендации по обновлению реквизитов платежа в бюджет'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежныеДокументы");
		ЕстьСтрокиЭкспортаСОшибками = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТаблицыДокументов

// Процедура выводит на печать отчет о выгруженных документах
//
Процедура ПечатьОтчетаОВыгруженныхПлатежныхДокументах(ПолеОтчета, Источник, Организация, БанковскийСчет, НачПериода, КонПериода) Экспорт
	
	МакетОтчета = ПолучитьМакет("ОтчетОВыгруженныхПлатежныхДокументах");
	
	Шапка   = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка  = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал  = МакетОтчета.ПолучитьОбласть("Подвал");
	НазвОрг = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	НазвОрг.Параметры.НазваниеОрганизации = Организация.Наименование;
	ПолеОтчета.Вывести(НазвОрг);
	
	Шапка.Параметры.ИмяОтчета           = "Отчет о выгруженных платежных документах";
	Шапка.Параметры.ИмяСуммыСписания    = "На списание";
	Шапка.Параметры.ИмяСуммыПоступления = "На поступление";
	
	Если НачПериода = КонПериода Тогда
		Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'по счету  %1 за %2'"), БанковскийСчет.НомерСчета, Формат(НачПериода, "ДЛФ=D"));
	Иначе
		Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'по счету  %1 с %2 по %3'"), БанковскийСчет.НомерСчета, Формат(НачПериода, "ДЛФ=D"), Формат(КонПериода, "ДЛФ=D"));
	КонецЕсли;
	
	ПолеОтчета.Вывести(Шапка);
	
	Индекс      = 0;
	ИтогоСуммаП = 0;
	ИтогоСуммаР = 0;
	
	Для каждого СтрокаИсточника Из Источник Цикл
		
		Если СтрокаИсточника.Готовность <> -1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаИсточника.ВидДокумента = "Платежное поручение" Тогда
			Строка.Параметры.Плательщик     = СтрокаИсточника.Организация;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.ОрганизацияНомерСчета;
			Строка.Параметры.Получатель     = СтрокаИсточника.Контрагент;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.КонтрагентНомерСчета;
			Строка.Параметры.СуммаСписание  = СтрокаИсточника.СуммаДокумента;
			Строка.Параметры.СуммаПоступление = "";
			ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.СуммаДокумента;
		Иначе
			Строка.Параметры.Плательщик     = СтрокаИсточника.Контрагент;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.КонтрагентНомерСчета;
			Строка.Параметры.Получатель     = СтрокаИсточника.Организация;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.ОрганизацияНомерСчета;
			Строка.Параметры.СуммаСписание  = "";
			Строка.Параметры.СуммаПоступление = СтрокаИсточника.СуммаДокумента;
			ИтогоСуммаП = ИтогоСуммаП + СтрокаИсточника.СуммаДокумента;
		КонецЕсли;
		
		Строка.Параметры.Документ = СтрокаИсточника.Документ;
		Индекс = Индекс + 1;
		Строка.Параметры.Индекс   = Индекс;
		
		ПолеОтчета.Вывести(Строка);
		
	КонецЦикла;
	
	Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;
	Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;
	
	ПолеОтчета.Вывести(Подвал);
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки   = Ложь;
	ПолеОтчета.ОтображатьСетку       = Ложь;
	ПолеОтчета.ТолькоПросмотр        = Истина;
	
КонецПроцедуры

// Возвращает двоичные данные документа, выгруженного в файл. Если выгрузка невозможна - возвращает Неопределено.
//
// Параметры:
//  Документ - ДокументСсылка - Ссылка на документ, который требуется выгрузить.
// 
// Возвращаемое значение:
//   - ДвоичныеДанные, Неопределено
//
Функция ВыгрузитьДокумент(Документ) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
		"Дата, СчетОрганизации, СчетОрганизации.НомерСчета, СчетОрганизации.Валютный");
	Если НЕ ЗначениеЗаполнено(РеквизитыДокумента.СчетОрганизации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если РеквизитыДокумента.СчетОрганизацииВалютный Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыВыгрузкиДокументов = НовыйПараметрыВыгрузкиДокументов(РеквизитыДокумента.Дата);
	ПараметрыВыгрузкиДокументов.НачалоПериода         = РеквизитыДокумента.Дата;
	ПараметрыВыгрузкиДокументов.КонецПериода          = РеквизитыДокумента.Дата;
	ПараметрыВыгрузкиДокументов.НомерБанковскогоСчета = РеквизитыДокумента.СчетОрганизацииНомерСчета;
	
	ВидыДокументов = ВидыДокументовКлиентаБанка();
	СтрокиВидаДокумента = ВидыДокументов.НайтиСтроки(Новый Структура("Документ", Документ.Метаданные().Имя));
	Для Каждого СтрокаВидаДокумента Из СтрокиВидаДокумента Цикл
		ИмяДокумента = СокрЛП(СтрокаВидаДокумента.Название);
		ПараметрыВыгрузкиДокументов.ВидыДокументов.Добавить(ИмяДокумента);
	КонецЦикла;
	
	ДанныеДляЭкспортаПлатежногоПоручения = Обработки.КлиентБанк.ДанныеДляЭкспортаПлатежногоПоручения(Документ);
	
	Возврат ДвоичныеДанныеВыгрузки(ПараметрыВыгрузкиДокументов, ДанныеДляЭкспортаПлатежногоПоручения);
	
КонецФункции

Функция ДвоичныеДанныеВыгрузки(ПараметрыВыгрузкиДокументов, ПлатежныеДокументы)
	
	// Кодировку задаем текстом, иначе бывают проблемы на сервере в Linux и в связке англоязычная Windows + англоязычный SQL
	Если ПараметрыВыгрузкиДокументов.Кодировка = "DOS" Тогда
		Кодировка = "cp866";        // КодировкаТекста.OEM;
	Иначе
		Кодировка = "windows-1251"; // КодировкаТекста.ANSI;
	КонецЕсли;
	
	ПотокВПамяти  = Новый ПотокВПамяти;
	ПотокВыгрузки = Новый ЗаписьТекста(ПотокВПамяти, Кодировка);
	
	ЗаписатьЗаголовокФайлаВыгрузки(ПотокВыгрузки, ПараметрыВыгрузкиДокументов);
	
	ЗаписатьДокументыФайлаВыгрузки(ПотокВыгрузки, ПараметрыВыгрузкиДокументов, ПлатежныеДокументы);
	
	ЗаписатьЗавершениеФайлаВыгрузки(ПотокВыгрузки);
	
	Возврат ДвоичныеДанныеПотокаВыгрузки(ПотокВыгрузки, ПотокВПамяти);
	
КонецФункции

Процедура ЗаписатьЗаголовокФайлаВыгрузки(ПотокВыгрузки, ПараметрыВыгрузки)
	
	ПотокВыгрузки.ЗаписатьСтроку("1CClientBankExchange");
	
	ПотокВыгрузки.ЗаписатьСтроку("ВерсияФормата=" + ПараметрыВыгрузки.ВерсияФормата); // Поддерживаются версии "1.01" - "1.03"
	
	ПотокВыгрузки.ЗаписатьСтроку("Кодировка="   + ПараметрыВыгрузки.Кодировка);
	ПотокВыгрузки.ЗаписатьСтроку("Отправитель=" + Метаданные.Синоним);
	ПотокВыгрузки.ЗаписатьСтроку("Получатель="  + ПараметрыВыгрузки.Программа);
	
	Если ПараметрыВыгрузки.ВыгружатьДатуСоздания Тогда
		ДатаСегодня = ТекущаяДатаСеанса();
		ПотокВыгрузки.ЗаписатьСтроку("ДатаСоздания="  + Формат(ДатаСегодня, "ДФ=dd.MM.yyyy"));
		ПотокВыгрузки.ЗаписатьСтроку("ВремяСоздания=" + Формат(ДатаСегодня, "ДЛФ=В"));
	КонецЕсли;
	
	ПотокВыгрузки.ЗаписатьСтроку("ДатаНачала=" + Формат(ПараметрыВыгрузки.НачалоПериода, "ДФ=dd.MM.yyyy"));
	ПотокВыгрузки.ЗаписатьСтроку("ДатаКонца="  + Формат(ПараметрыВыгрузки.КонецПериода,  "ДФ=dd.MM.yyyy"));
	
	ПотокВыгрузки.ЗаписатьСтроку("РасчСчет=" + ПараметрыВыгрузки.НомерБанковскогоСчета);
	
	Для Каждого ВидДокумента Из ПараметрыВыгрузки.ВидыДокументов Цикл
		ПотокВыгрузки.ЗаписатьСтроку("Документ=" + ВидДокумента);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДокументыФайлаВыгрузки(ПотокВыгрузки, ПараметрыВыгрузки, ПлатежныеДокументы)
	
	// выводим отмеченные секции документов
	Для каждого СтрокаСекции Из ПлатежныеДокументы Цикл
		Если НЕ СтрокаСекции.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнятьПоказательТипа = СтрокаСекции.Дата < ПлатежиВБюджетКлиентСервер.НачалоДействияУказания3844У();
		Буфер = ПолучитьСекциюДокумент(СтрокаСекции, ПараметрыВыгрузки.ВерсияФормата, ЗаполнятьПоказательТипа);
		КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
		Для Сч = 1 По КоличествоСрокСекции Цикл
			ПотокВыгрузки.ЗаписатьСтроку(СтрПолучитьСтроку(Буфер, Сч));
		КонецЦикла;
		
		СтрокаСекции.Готовность = -2;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьЗавершениеФайлаВыгрузки(ПотокВыгрузки)
	
	ПотокВыгрузки.ЗаписатьСтроку("КонецФайла");
	
КонецПроцедуры

Функция ДвоичныеДанныеПотокаВыгрузки(ПотокВыгрузки, ПотокВПамяти)
	
	ПотокВыгрузки.Закрыть();
	ДвоичныеДанныеПотокаВыгрузки = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат ДвоичныеДанныеПотокаВыгрузки;
	
КонецФункции

Функция НовыйПараметрыВыгрузкиДокументов(Период)
	
	Параметры = Новый Структура();
	Если УчетДенежныхСредствКлиентСервер.ДействуетУказаниеБанкаРоссии5286У(Период) Тогда
		Параметры.Вставить("ВерсияФормата",     "1.03");
	Иначе
		Параметры.Вставить("ВерсияФормата",     "1.02");
	КонецЕсли;
	Параметры.Вставить("Кодировка",             "Windows");
	Параметры.Вставить("Программа",             "");
	Параметры.Вставить("ВыгружатьДатуСоздания", Ложь);
	Параметры.Вставить("НачалоПериода",         '00010101');
	Параметры.Вставить("КонецПериода",          '00010101');
	Параметры.Вставить("НомерБанковскогоСчета", "");
	Параметры.Вставить("ВидыДокументов",        Новый Массив);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаИзБанка

#Область ПериодЗагрузкиВыпискиПоДиректБанку

Функция ПериодЗагрузкиВыписки(НастройкиБанковскогоСчета, РежимИнтеграцииОграничиватьПериодВыписки = Ложь) Экспорт
	
	СтруктураПериода = Новый Структура;
	СтруктураПериода.Вставить("ДатаНачала");
	СтруктураПериода.Вставить("ДатаОкончания", КонецДня(ТекущаяДатаСеанса()));
	// Если период рабочей даты меньше текущей даты сеанса, то используем рабочую дату
	ПериодРабочейДаты = ОбщегоНазначения.РабочаяДатаПользователя();
	Если ЗначениеЗаполнено(ПериодРабочейДаты) Тогда
		СтруктураПериода.ДатаОкончания = Мин(КонецДня(ПериодРабочейДаты), СтруктураПериода.ДатаОкончания);
	КонецЕсли;
	
	Организация    = НастройкиБанковскогоСчета.Организация;
	БанковскийСчет = НастройкиБанковскогоСчета.БанковскийСчет;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат СтруктураПериода;
	КонецЕсли;
	
	// В параметрах функции передается разрешенная организация из отбора.
	// Функция возвращает технические данные (период загрузки) и не нарушает конфиденциальность.
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Дата КАК Дата
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ПоступлениеНаСчет.Дата КАК Дата
	|	ИЗ
	|		Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|	ГДЕ
	|		ПоступлениеНаСчет.Организация = &Организация
	|		И ПоступлениеНаСчет.БанковскийСчет = &БанковскийСчет
	|		И ПоступлениеНаСчет.Проведен = ИСТИНА
	|		И ПоступлениеНаСчет.Дата < &Дата
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Дата УБЫВ) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Дата
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		РасходСоСчета.Дата КАК Дата
	|	ИЗ
	|		Документ.РасходСоСчета КАК РасходСоСчета
	|	ГДЕ
	|		РасходСоСчета.Организация = &Организация
	|		И РасходСоСчета.БанковскийСчет = &БанковскийСчет
	|		И РасходСоСчета.Проведен = ИСТИНА
	|		И РасходСоСчета.Дата < &Дата
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		РасходСоСчета.Дата УБЫВ) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Запрос.УстановитьПараметр("Дата",           СтруктураПериода.ДатаОкончания);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ПериодУстановлен = Ложь;
		Если НастройкиБанковскогоСчета.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
			ПериодУстановлен = УстановитьПериодВыпискиСбербанк(СтруктураПериода, НастройкиБанковскогоСчета);
		КонецЕсли;
		
		Если Не ПериодУстановлен Тогда
			Если РежимИнтеграцииОграничиватьПериодВыписки Тогда
				ГраницаОтчетности = НачалоГода(ТекущаяДатаСеанса()) - 1;
				Если ЗначениеЗаполнено(ГраницаОтчетности) Тогда
					СтруктураПериода.ДатаНачала = КонецДня(ГраницаОтчетности) + 1;
				Иначе
					СтруктураПериода.ДатаНачала = НачалоГода(СтруктураПериода.ДатаОкончания);
				КонецЕсли;
			Иначе
				// Дата запроса неопределена, установим дату по умолчанию.
				// Если это первый месяц в квартале (не январь), то с начала предыдущего квартала, иначе с начала текущего квартала.
				// Это будет рекомендуемый период, т.к. в этом случае для загрузки выписки будет открыта обработка Обмен с банком,
				// чтобы пользователь мог сам выбрать требуемый период.
				Если НачалоМесяца(СтруктураПериода.ДатаОкончания) = НачалоКвартала(СтруктураПериода.ДатаОкончания)
					И НачалоМесяца(СтруктураПериода.ДатаОкончания) <> НачалоГода(СтруктураПериода.ДатаОкончания) Тогда
					СтруктураПериода.ДатаНачала = НачалоКвартала(НачалоМесяца(СтруктураПериода.ДатаОкончания) - 1);
				Иначе
					СтруктураПериода.ДатаНачала = НачалоКвартала(СтруктураПериода.ДатаОкончания);
				КонецЕсли;
			КонецЕсли;
			
			ОграничитьПериодНачалаВыписки(СтруктураПериода, НастройкиБанковскогоСчета);
		КонецЕсли;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СтруктураПериода.ДатаНачала = НачалоДня(Выборка.Дата);
		
		Если НастройкиБанковскогоСчета.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
			ОграничитьПериодОкончанияВыпискиСбербанк(СтруктураПериода);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПериода;
	
КонецФункции

Функция УстановитьПериодВыпискиСбербанк(СтруктураПериода, НастройкиБанковскогоСчета)
	
	ПериодУстановлен = Ложь;
	
	// В параметрах функции передается разрешенная организация из отбора.
	// Функция возвращает технические данные (период установлен) и не нарушает конфиденциальность.
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",            НачалоДня(СтруктураПериода.ДатаОкончания));
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкиБанковскогоСчета.СоглашениеПрямогоОбменаСБанками);
	Запрос.УстановитьПараметр("НомерСчета", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НастройкиБанковскогоСчета.БанковскийСчет, "НомерСчета"));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЖурналСобытийОбменСБанками.Сообщение.ДатаНачала КАК ЗапросДатаНачала
	|ПОМЕСТИТЬ ВТ_ДатыЗапросов
	|ИЗ
	|	РегистрСведений.ЖурналСобытийОбменСБанками КАК ЖурналСобытийОбменСБанками
	|ГДЕ
	|	ЖурналСобытийОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Обработан)
	|	И ЖурналСобытийОбменСБанками.Сообщение.НастройкаОбмена = &НастройкаОбмена
	|	И ЖурналСобытийОбменСБанками.Сообщение.НомерСчета = &НомерСчета
	|	И ЖурналСобытийОбменСБанками.Сообщение.ДатаНачала < &Дата
	|	И ЖурналСобытийОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Обработан)
	|	И ЖурналСобытийОбменСБанками.Сообщение.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ЗапросВыписки)
	|	И НЕ ЖурналСобытийОбменСБанками.Сообщение.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗапросДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщениеОбменСБанками.ДатаНачала КАК ДатаНачала
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыЗапросов КАК ВТ_ДатыЗапросов
	|		ПО СообщениеОбменСБанками.ДатаНачала = ВТ_ДатыЗапросов.ЗапросДатаНачала
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.НомерСчета = &НомерСчета
	|	И СообщениеОбменСБанками.ДатаНачала < &Дата
	|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ВыпискаБанка)
	|	И СообщениеОбменСБанками.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ПлатежИсполнен)
	|	И СообщениеОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Получен)
	|	И НЕ СообщениеОбменСБанками.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураПериода.ДатаНачала = Выборка.ДатаНачала;
		ОграничитьПериодОкончанияВыпискиСбербанк(СтруктураПериода);
		ПериодУстановлен = Истина;
	КонецЕсли;
	
	Возврат ПериодУстановлен;
	
КонецФункции

// Устанавливает признак открытия обработки для уточнения периода
//
Процедура УстановитьНеобходимостьИнтерактивногоУточненияПериода(СтруктураПериода)
	
	СтруктураПериода.Вставить("ОткрыватьФормуУточненияПериода", Истина);
	
	// Переложим значения периода для отбора в обработке
	СтруктураПериода.Вставить("НачалоПериода", СтруктураПериода.ДатаНачала);
	СтруктураПериода.Вставить("КонецПериода",  СтруктураПериода.ДатаОкончания);
	
КонецПроцедуры

Процедура ОграничитьПериодОкончанияВыпискиСбербанк(СтруктураПериода)
	
	МаксимальнаяДата = КонецДня(СтруктураПериода.ДатаНачала)
		+ УчетДенежныхСредствКлиентСервер.МаксимальныйПериодВыпискиСбербанк();
	Если МаксимальнаяДата < КонецДня(СтруктураПериода.ДатаОкончания) Тогда
		СтруктураПериода.ДатаОкончания = МаксимальнаяДата;
		УстановитьНеобходимостьИнтерактивногоУточненияПериода(СтруктураПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОграничитьПериодНачалаВыписки(СтруктураПериода, НастройкиБанковскогоСчета)
	
	// Ограничим период датой регистрации организации
	ДатаРегистрацииОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиБанковскогоСчета.Организация, "ДатаРегистрации");
	СтруктураПериода.ДатаНачала = Макс(СтруктураПериода.ДатаНачала, ДатаРегистрацииОрганизации);
	
	// Ограничим период датой открытия банковского счета
	ДатаОткрытияСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиБанковскогоСчета.БанковскийСчет, "ДатаОткрытия");
	СтруктураПериода.ДатаНачала = Макс(СтруктураПериода.ДатаНачала, ДатаОткрытияСчета);
	
	// Ограничим период датой начальных остатков
	ГраницаОтчетности = НачалоГода(ТекущаяДатаСеанса()) - 1;
	Если ЗначениеЗаполнено(ГраницаОтчетности) Тогда
		СтруктураПериода.ДатаНачала = Макс(СтруктураПериода.ДатаНачала, ГраницаОтчетности);
	КонецЕсли;
	
	Если НастройкиБанковскогоСчета.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		МинимальнаяДата = НачалоДня(СтруктураПериода.ДатаОкончания)
			- УчетДенежныхСредствКлиентСервер.МаксимальныйПериодВыпискиСбербанк();
		Если МинимальнаяДата > СтруктураПериода.ДатаНачала Тогда
			СтруктураПериода.ДатаНачала = МинимальнаяДата;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьНеобходимостьИнтерактивногоУточненияПериода(СтруктураПериода);
	
КонецПроцедуры

#КонецОбласти

Процедура ФоноваяЗагрузкаБанковскойВыпискиИзЖурнала(СтруктураПараметров, АдресХранилища,
		ИспользоватьПредупрежденияПриЗагрузкеВыписки = Ложь) Экспорт
	
	НастройкиЗагрузки = Обработки.КлиентБанк.НастройкиЗагрузки();
	НастройкиЗагрузки.Кодировка = СтруктураПараметров.Кодировка;
	
	Если СтруктураПараметров.Свойство("ВыпискаБанка") Тогда
		РаспознанныеДанныеИзБанка = ЗагрузкаВыпискиПоБанковскомуСчету.РаспознанныеДанныеИзБанкаДБ(
			СтруктураПараметров.ВыпискаБанка,
			НастройкиЗагрузки,
			СтруктураПараметров.СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	Иначе
		РаспознанныеДанныеИзБанка = РаспознанныеДанныеБанковскойВыпискиИзФайла(СтруктураПараметров, НастройкиЗагрузки);
	КонецЕсли;
	
	СоздаватьНенайденныеЭлементы = СоздаватьНенайденныеЭлементы(РаспознанныеДанныеИзБанка.РаспознанныеВыписки);
	Если ПередЗагрузкойПоказыватьФормуОбменаСБанком(РаспознанныеДанныеИзБанка.РаспознанныеВыписки) Тогда
		РезультатЗагрузки = НовыйРезультатЗагрузки();
		РезультатЗагрузки.РезультатВыполнения = "ПередЗагрузкойПоказыватьФормуОбменаСБанком";
	Иначе
		РежимИнтеграцииОграничиватьПериодВыписки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			СтруктураПараметров,
			"РежимИнтеграцииОграничиватьПериодВыписки",
			Ложь);
		
		ИгнорироватьПредупрежденияРаспознавания = Ложь;
		РезультатЗагрузки = ЗагрузитьБанковскиеВыписки(
			РаспознанныеДанныеИзБанка,
			СоздаватьНенайденныеЭлементы,
			ИгнорироватьПредупрежденияРаспознавания,
			РежимИнтеграцииОграничиватьПериодВыписки);
	КонецЕсли;
	
	Если ИспользоватьПредупрежденияПриЗагрузкеВыписки Тогда
		ПредупрежденияПриЗагрузкеВыписки = ПредупрежденияПриЗагрузкеВыписки(РаспознанныеДанныеИзБанка);
		Если ПредупрежденияПриЗагрузкеВыписки.Количество() > 0 Тогда
			СохранитьПредупрежденияПриЗагрузкеВыписки(ПредупрежденияПриЗагрузкеВыписки);
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗагрузкиИзЖурнала = ПодготовитьРезультатЗагрузкиИзЖурнала(
		РезультатЗагрузки, РаспознанныеДанныеИзБанка, СтруктураПараметров, АдресХранилища);
	ПоместитьВоВременноеХранилище(РезультатЗагрузкиИзЖурнала, АдресХранилища);
	
КонецПроцедуры

Процедура ЗагрузкаБанковскойВыпискиИзСервиса(ПотокДанныхФайлаВыписки, КодВозврата, ОписаниеОшибки) Экспорт
	
	СтруктураПараметров = ПараметрыДляЗагрузкиВыпискиДляСервиса(ПотокДанныхФайлаВыписки);
	
	НастройкиЗагрузки = НастройкиЗагрузкиДляСервиса();
	РаспознанныеДанныеИзБанка = РаспознанныеДанныеБанковскойВыпискиИзФайла(СтруктураПараметров, НастройкиЗагрузки);
	
	СоздаватьНенайденныеЭлементы = Истина;
	ИгнорироватьПредупрежденияРаспознавания = Истина;
	РезультатЗагрузки = ЗагрузитьБанковскиеВыписки(
		РаспознанныеДанныеИзБанка,
		СоздаватьНенайденныеЭлементы,
		ИгнорироватьПредупрежденияРаспознавания,
		Истина);
	
	ПредупрежденияПриЗагрузкеВыписки = ПредупрежденияПриЗагрузкеВыписки(РаспознанныеДанныеИзБанка);
	Если ПредупрежденияПриЗагрузкеВыписки.Количество() > 0 Тогда
		СохранитьПредупрежденияПриЗагрузкеВыписки(ПредупрежденияПриЗагрузкеВыписки);
	КонецЕсли;
	
	РезультатВыполнения = РезультатВыполненияЗагрузкиДляСервиса(РезультатЗагрузки, РаспознанныеДанныеИзБанка, 
		ПредупрежденияПриЗагрузкеВыписки);
	КодВозврата = РезультатВыполнения.КодВозврата;
	ОписаниеОшибки = РезультатВыполнения.ОписаниеОшибки;
	
	Если КодВозврата = ИнтеграцияОбъектовОбластейДанныхСловарь.КодВозвратаВыполнено()
		ИЛИ КодВозврата = ИнтеграцияОбъектовВСервисеБП.КодСостоянияВыполненоСПредупреждениями() Тогда
		ЗапланироватьАктуализациюПослеЗагрузкиВыпискиИзСервиса(РаспознанныеДанныеИзБанка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФоноваяРаспознатьДанныеИзБанка(СтруктураПараметров, АдресХранилища) Экспорт
	
	Если СтруктураПараметров.Свойство("ВыпискаБанка") Тогда
		РаспознанныеДанныеИзБанка = ЗагрузкаВыпискиПоБанковскомуСчету.РаспознанныеДанныеИзБанкаДБ(
			СтруктураПараметров.ВыпискаБанка,
			СтруктураПараметров.Настройки,
			СтруктураПараметров.СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	Иначе
		РаспознанныеДанныеИзБанка = РаспознанныеДанныеБанковскойВыпискиИзФайла(
			СтруктураПараметров, СтруктураПараметров.Настройки);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РаспознанныеДанныеИзБанка, АдресХранилища);
	
КонецПроцедуры

Процедура ФоноваяРаспознатьДанныеИзБанкаПовторно(СтруктураПараметров, АдресХранилища) Экспорт
	
	РаспознанныеДанныеИзБанка = СтруктураПараметров.РаспознанныеДанныеИзБанка;
	Если РаспознанныеДанныеИзБанка <> Неопределено Тогда
		РаспознанныеДанныеИзБанка.РаспознанныеВыписки = ЗагрузкаВыпискиПоБанковскомуСчету.РаспознатьВыписки(
			РаспознанныеДанныеИзБанка.Выписки,
			РаспознанныеДанныеИзБанка.УчастникиОпераций,
			СтруктураПараметров.ДанныеИзБанка);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РаспознанныеДанныеИзБанка, АдресХранилища);
	
КонецПроцедуры

Процедура ФоноваяСозданиеНовыхОбъектов(ПараметрыСозданияНовыхОбъектов, АдресХранилища) Экспорт
	
	РезультатСозданияНовыхОбъектов = Новый Структура;
	РаспознанныеДанныеИзБанка = ПараметрыСозданияНовыхОбъектов.РаспознанныеДанныеИзБанка;
	
	ОшибкиСоздания = ИдентификацияУчастниковБанковскихОпераций.СоздатьНовыеОбъекты(
		РаспознанныеДанныеИзБанка.УчастникиОпераций,
		РаспознанныеДанныеИзБанка.Настройки,
		ПараметрыСозданияНовыхОбъектов.ОтборСсылкиКСозданию);
	
	РезультатСозданияНовыхОбъектов.Вставить("МассивСообщений", Новый Массив);
	
	Для Каждого ОшибкаСозданияКонтрагента Из ОшибкиСоздания Цикл
		РезультатСозданияНовыхОбъектов.МассивСообщений.Добавить(ОшибкаСозданияКонтрагента.ТекстИсключения);
	КонецЦикла;
	
	АдресХранилищаРаспознанныеДанныеИзБанка = ПоместитьВоВременноеХранилище(РаспознанныеДанныеИзБанка, ПараметрыСозданияНовыхОбъектов.АдресХранилищаРаспознанныеДанныеИзБанка);
	РезультатСозданияНовыхОбъектов.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка", АдресХранилищаРаспознанныеДанныеИзБанка);
	РезультатСозданияНовыхОбъектов.Вставить("СсылкиНаСозданныеОбъекты", СсылкиНаСозданныеОбъекты(ПараметрыСозданияНовыхОбъектов.ОтборСсылкиКСозданию, ОшибкиСоздания));
	
	ПоместитьВоВременноеХранилище(РезультатСозданияНовыхОбъектов, АдресХранилища);
	
КонецПроцедуры

Процедура ФоноваяЗагрузкаДокументовКИмпортуИзКлиентБанка(ПараметрыЗагрузкиДокументов, АдресХранилища) Экспорт
	
	РезультатЗагрузки         = Новый Структура;
	РаспознанныеДанныеИзБанка = ПараметрыЗагрузкиДокументов.РаспознанныеДанныеИзБанка;
	ДопустимыеОрганизации     = ИнтерфейсыВзаимодействияБРОВызовСервера.ВсеОрганизации();
	МассивСообщений           = Новый Массив;
	
	// Создадим ненайденные элементы
	Если ПараметрыЗагрузкиДокументов.СоздаватьНенайденныеЭлементы Тогда
		
		ОшибкиСоздания = ИдентификацияУчастниковБанковскихОпераций.СоздатьНовыеОбъекты(
			РаспознанныеДанныеИзБанка.УчастникиОпераций,
			РаспознанныеДанныеИзБанка.Настройки,
			ПараметрыЗагрузкиДокументов.ОтборСсылкиКСозданию);
			
		Для Каждого ОшибкаСозданияКонтрагента Из ОшибкиСоздания Цикл
			МассивСообщений.Добавить(ОшибкаСозданияКонтрагента.ТекстИсключения);
		КонецЦикла;
		
		РезультатЗагрузки.Вставить("СсылкиНаСозданныеОбъекты", СсылкиНаСозданныеОбъекты(ПараметрыЗагрузкиДокументов.ОтборСсылкиКСозданию, ОшибкиСоздания));
		
	КонецЕсли;
	
	// Создадим документы
	ТаблицаДокументыСозданныеПоВыписке = Новый ТаблицаЗначений;
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("Выписка");
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("Ссылка");
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("Успешно",        Новый ОписаниеТипов("Булево"));
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("СуммаПоступило", Новый ОписаниеТипов("Число"));
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("СуммаСписано",   Новый ОписаниеТипов("Число"));
	
	РаспознанныеДанныеИзБанка.Вставить("СозданиеДокументов", Новый Соответствие);
	
	// Создадим документы
	Для Каждого Выписка Из РаспознанныеДанныеИзБанка.Выписки Цикл
		
		РаспознаннаяВыписка = РаспознанныеДанныеИзБанка.РаспознанныеВыписки[Выписка.Ключ];
		
		Если ЗначениеЗаполнено(РаспознаннаяВыписка.ВладелецСчета.Организация) И ДопустимыеОрганизации.Найти(РаспознаннаяВыписка.ВладелецСчета.Организация) = Неопределено Тогда
			МассивСообщений.Добавить(СтрШаблон(НСтр("ru='Недостаточно прав на создание документов по организации - %1'"),
				РаспознаннаяВыписка.ВладелецСчета.Организация));
			Продолжить;
		КонецЕсли;
		
		// Предотвратим создание документов с новыми (не записанными) ссылками
		ЗагрузкаВыпискиПоБанковскомуСчету.УдалитьНовыеОбъекты(РаспознаннаяВыписка.Операции, РаспознанныеДанныеИзБанка.УчастникиОпераций);
		
		// СоздатьДокументы
		РаспознанныеДанныеИзБанка.Настройки.Вставить("ИспользуетсяФормаОбменаСБанком", Истина);
		РезультатСозданияДокументов = ЗагрузкаВыпискиПоБанковскомуСчету.СоздатьДокументы(
			Выписка.Значение, 
			РаспознаннаяВыписка, 
			РаспознанныеДанныеИзБанка.Настройки, 
			ПараметрыЗагрузкиДокументов.ОтборДокументовКСозданию[Выписка.Ключ]);
			
		РаспознанныеДанныеИзБанка.СозданиеДокументов.Вставить(Выписка.Ключ, РезультатСозданияДокументов);
		ДобавитьВДокументыСозданныеПоВыписке(ТаблицаДокументыСозданныеПоВыписке, РезультатСозданияДокументов, Выписка);
		
	КонецЦикла;
	
	АдресХранилищаРаспознанныеДанныеИзБанка = ПоместитьВоВременноеХранилище(РаспознанныеДанныеИзБанка, ПараметрыЗагрузкиДокументов.АдресХранилищаРаспознанныеДанныеИзБанка);
	
	// Распознанные данные из банка могли поменяться, вернем их обратно
	РезультатЗагрузки.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка", АдресХранилищаРаспознанныеДанныеИзБанка);
	РезультатЗагрузки.Вставить("РезультатСозданияДокументов", РезультатСозданияДокументов(ТаблицаДокументыСозданныеПоВыписке));
	РезультатЗагрузки.Вставить("МассивСообщений", МассивСообщений);
	
	ПоместитьВоВременноеХранилище(РезультатЗагрузки, АдресХранилища);
	
КонецПроцедуры

// Процедура печатает отчет о загруженных платежных документах
//
Процедура ПечатьОтчетаОЗагруженныхПлатежныхДокументах(ПолеОтчета, ДанныеФормы, АдресХранилищаРаспознанныеДанныеИзБанка) Экспорт
	
	Если ДанныеФормы.ДокументыКИмпорту.Количество() = 0 ИЛИ АдресХранилищаРаспознанныеДанныеИзБанка = "" Тогда
		Возврат;
	КонецЕсли;
	
	МакетОтчета = ПолучитьМакет("ОтчетОЗагруженныхПлатежныхДокументах");
	
	РаспознанныеДанныеИзБанка    = ПолучитьИзВременногоХранилища(АдресХранилищаРаспознанныеДанныеИзБанка);
	СоздаватьНенайденныеЭлементы = ДанныеФормы.СоздаватьНенайденныеЭлементы;
	
	Шапка   = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка  = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал  = МакетОтчета.ПолучитьОбласть("Подвал");
	Остатки = МакетОтчета.ПолучитьОбласть("Остатки");
	
	Если ЗначениеЗаполнено(ДанныеФормы.Организация) Тогда
		НазвОрг = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
		НазвОрг.Параметры.НазваниеОрганизации = ДанныеФормы.Организация.Наименование;
		ПолеОтчета.Вывести(НазвОрг);
	КонецЕсли;
	
	// В отчет выводим информация в хронологическом порядке
	ДанныеФормы.ДокументыКИмпорту.Сортировать("ДатаПроведения");
	
	Для Каждого КлючИЗначение Из РаспознанныеДанныеИзБанка.Выписки Цикл
		
		ВыпискаДанныеФайла    = КлючИЗначение.Значение;
		НачалоПериода         = ВыпискаДанныеФайла.НачалоПериода;
		КонецПериода          = ВыпискаДанныеФайла.КонецПериода;
		РаспознаннаяВыписка   = РаспознанныеДанныеИзБанка.РаспознанныеВыписки[КлючИЗначение.Ключ];
		НомерБанковскогоСчета = РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет.НомерСчета;
		Если ЗначениеЗаполнено(ДанныеФормы.БанковскийСчет) И ДанныеФормы.БанковскийСчет <> РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет Тогда
			Продолжить;
		КонецЕсли;
		
		// Шапка
		Если КонецДня(НачалоПериода) = КонецДня(КонецПериода) ИЛИ НЕ ЗначениеЗаполнено(КонецПериода) Тогда
			ОписаниеПериода = Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
		Иначе
			ОписаниеПериода = СтрШаблон(НСтр("ru = '%1 по %2'"),
				Формат(НачалоПериода, "ДФ=dd.MM.yyyy"),
				Формат(КонецПериода,  "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		Шапка.Параметры.ОписаниеПериода = СтрШаблон(НСтр("ru = 'по счету %1 за %2'"),
			НомерБанковскогоСчета,
			ОписаниеПериода);
		
		ПолеОтчета.Вывести(Шапка);
		
		// Строки таблицы
		Для Каждого СтрокаТаблицы Из ДанныеФормы.ДокументыКИмпорту Цикл
			
			Если СтрокаТаблицы.БанковскийСчетОрганизации <> РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет Тогда
				Продолжить;
			КонецЕсли;
			
			// Установим у всей строки черный цвет текста
			Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
			
			// Контрагент
			Если СтрокаТаблицы.КонтрагентОтображениеНенайденного = НСтр("ru = 'Не указаны реквизиты контрагента'") Тогда
				Строка.Параметры.Контрагент = "";
				Строка.Область("R1C7:R1C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.КонтрагентОтображениеНенайденного) Тогда
				Строка.Параметры.Контрагент = СтрокаТаблицы.КонтрагентОтображениеНенайденного;
				Если НЕ СоздаватьНенайденныеЭлементы Тогда
					Строка.Область("R1C7:R1C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
				КонецЕсли;
			Иначе
				Строка.Параметры.Контрагент = СтрокаТаблицы.Контрагент;
			КонецЕсли;
			// Банковский счет
			Если СтрокаТаблицы.СчетКонтрагентаОтображениеНенайденного = НСтр("ru = 'Не указаны реквизиты р/счета'") Тогда
				Строка.Параметры.Счет = "";
				Строка.Область("R2C7:R2C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.СчетКонтрагентаОтображениеНенайденного) Тогда
				Строка.Параметры.Счет = СтрокаТаблицы.СчетКонтрагентаОтображениеНенайденного;
				Если НЕ СоздаватьНенайденныеЭлементы Тогда
					Строка.Область("R2C7:R2C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
				КонецЕсли;
			Иначе
				Строка.Параметры.Счет            = СтрокаТаблицы.СчетКонтрагента;
				Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
			КонецЕсли;
			// Договор
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорОтображениеНенайденного) Тогда
				Строка.Параметры.Договор = СтрокаТаблицы.ДоговорОтображениеНенайденного;
				Если НЕ СоздаватьНенайденныеЭлементы Тогда
					Строка.Область("R3C7:R3C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
				КонецЕсли;
			Иначе
				Строка.Параметры.Договор = СтрокаТаблицы.Договор;
			КонецЕсли;
			// Документ
			Если ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
				Строка.Параметры.Документ = СтрокаТаблицы.Документ;
			Иначе
				Строка.Параметры.Документ = НСтр("ru = 'Не загружен'");
				Если НЕ СтрокаТаблицы.Готовность Тогда
					Строка.Область("R1C5:R1C5").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
				КонецЕсли;
			КонецЕсли;
			
			Строка.Параметры.СуммаПоступление  = СтрокаТаблицы.СуммаПоступило;
			Строка.Параметры.СуммаСписание     = СтрокаТаблицы.СуммаСписано;
			Строка.Параметры.Дата              = Формат(СтрокаТаблицы.ДатаПроведения, "ДФ=dd.MM.yyyy");
			Строка.Параметры.Номер             = СтрокаТаблицы.НомерДок;
			Строка.Параметры.Индекс            = СтрокаТаблицы.НомерСтроки;
			Строка.Параметры.НазначениеПлатежа = СтрокаТаблицы.НазначениеПлатежа;
			
			ПолеОтчета.Вывести(Строка);
			
		КонецЦикла;
		
		// Подвал
		Если ВыпискаДанныеФайла.ВсегоПоступило <> 0 ИЛИ ВыпискаДанныеФайла.ВсегоСписано <> 0 Тогда
			ВсегоПоступило = ВыпискаДанныеФайла.ВсегоПоступило;
			ВсегоСписано   = ВыпискаДанныеФайла.ВсегоСписано;
		ИначеЕсли ВыпискаДанныеФайла.Операции.Количество() > 0 Тогда
			СтруктураПоискаПоступило = Новый Структура("ПоступилоСписано", "Поступило");
			ТаблицаПоступило         = ВыпискаДанныеФайла.Операции.Скопировать(СтруктураПоискаПоступило, "Сумма");
			ВсегоПоступило           = ТаблицаПоступило.Итог("Сумма");
			СтруктураПоискаСписано   = Новый Структура("ПоступилоСписано", "Списано");
			ТаблицаСписано           = ВыпискаДанныеФайла.Операции.Скопировать(СтруктураПоискаСписано, "Сумма");
			ВсегоСписано             = ТаблицаСписано.Итог("Сумма");
		Иначе
			ВсегоПоступило = 0;
			ВсегоСписано   = 0;
		КонецЕсли;
		Подвал.Параметры.ИтогоСуммаП = ВсегоПоступило;
		Подвал.Параметры.ИтогоСуммаР = ВсегоСписано;
		
		ПолеОтчета.Вывести(Подвал);
		
		Остатки.Параметры.Текст1 = СтрШаблон(НСтр("ru = 'Остаток на начало %1: '"), Формат(НачалоПериода, "ДФ=dd.MM.yyyy"));
		Остатки.Параметры.Текст2 = СтрШаблон(НСтр("ru = 'Остаток на конец %1: '"),  Формат(КонецПериода,  "ДФ=dd.MM.yyyy"));
		
		СтруктураПоиска = Новый Структура("Дата");
		
		СтруктураПоиска.Дата = НачалоПериода;
		СтрокиНачалоПериода = ВыпискаДанныеФайла.Сальдо.НайтиСтроки(СтруктураПоиска);
		// Сначала ищем по дате указанной в выписке как НачалоПериода
		Если СтрокиНачалоПериода.Количество() > 0 Тогда
			СуммаНаНачало = СтрокиНачалоПериода[0].Сумма;
		// Если ничего не нашли, то берем первое сальдо
		ИначеЕсли ВыпискаДанныеФайла.Сальдо.Количество() > 0 Тогда
			СуммаНаНачало = ВыпискаДанныеФайла.Сальдо[0].Сумма;
		// Если в файле сальдо не указано, то устанавливаем 0
		Иначе
			СуммаНаНачало = 0;
		КонецЕсли;
		
		СтруктураПоиска.Дата = КонецДня(КонецПериода) + 1;
		СтрокиКонецПериода = ВыпискаДанныеФайла.Сальдо.НайтиСтроки(СтруктураПоиска);
		// Сначала ищем по дате, указанной как КонецПериода
		Если СтрокиКонецПериода.Количество() > 0 Тогда
			// Если что-то нашли, то берем последнюю строку
			КоличествоСтрок = СтрокиКонецПериода.Количество();
			СуммаНаКонец = СтрокиКонецПериода[КоличествоСтрок-1].Сумма;
		// Если ничего не нашли, то берем последнее сальдо
		ИначеЕсли ВыпискаДанныеФайла.Сальдо.Количество() > 0 Тогда
			КоличествоСтрок = ВыпискаДанныеФайла.Сальдо.Количество();
			СуммаНаКонец = ВыпискаДанныеФайла.Сальдо[КоличествоСтрок-1].Сумма;
		Иначе
			СуммаНаКонец = 0;
		КонецЕсли;
		
		Остатки.Параметры.Сумма1 = СуммаНаНачало;
		Остатки.Параметры.Сумма2 = СуммаНаКонец;
		
		ПолеОтчета.Вывести(Остатки);
		
	КонецЦикла;
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки   = Ложь;
	ПолеОтчета.ОтображатьСетку       = Ложь;
	ПолеОтчета.ТолькоПросмотр        = Истина;
	
КонецПроцедуры

Функция КлючФоновогоЗаданияЗагрузкаВыписки() Экспорт
	
	Возврат "ЗагрузкаВыписки" + ИмяПользователя();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЭкспортДокументов

Процедура ЗаполнитьДокументыНаЭкспортВФоне(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ЗаполнитьДокументыНаЭкспорт(ПараметрыЗадания.Организация, ПараметрыЗадания.ПлатежныеДокументы,
		ПараметрыЗадания.НачалоПериода, ПараметрыЗадания.КонецПериода, ПараметрыЗадания.БанковскийСчет,
		ПараметрыЗадания.ВыгружатьПлатПоручения, ПараметрыЗадания.ВыгружатьПлатТребования,
		ПараметрыЗадания.КонтролироватьНекорректныеСимволыВНомере, ПараметрыЗадания.СоглашениеПрямогоОбменаСБанками,
		ПараметрыЗадания.СписокДокументов);
	
	ПоместитьВоВременноеХранилище(ПараметрыЗадания.ПлатежныеДокументы, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьДокументыНаЭкспорт(Организация, ОбъектПлатежныеДокументы, НачПериода, КонПериода, БанковскийСчет,
		ВыгружатьПлатПоручения, ВыгружатьПлатТребования, КонтролироватьНекорректныеСимволыВНомере = Ложь,
		СоглашениеПрямогоОбменаСБанками, СписокДокументов = Неопределено)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
	|	СостоянияБанковскихДокументов.Состояние КАК Состояние
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ПлатежноеПоручение.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|ГДЕ
	|	ПлатежноеПоручение.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И &ДополнительноеУсловие
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.БанковскийСчет = &Счет
	|	И &ВыгружатьПлатПоручения
	|	И ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)";
	
	ЗапросПоДокументам = Новый Запрос();
	ЗапросПоДокументам.УстановитьПараметр("ДатаНачало",    НачалоДня(НачПериода));
	ЗапросПоДокументам.УстановитьПараметр("ДатаОкончание", КонецДня(КонПериода));
	ЗапросПоДокументам.УстановитьПараметр("Счет",          БанковскийСчет);
	ЗапросПоДокументам.УстановитьПараметр("ВыгружатьПлатПоручения",  ВыгружатьПлатПоручения);
	ЗапросПоДокументам.УстановитьПараметр("ВыгружатьПлатТребования", ВыгружатьПлатТребования);
	ЗапросПоДокументам.УстановитьПараметр("ДополнительноеУсловие",   Истина);
	
	Если СписокДокументов <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительноеУсловие", "ПлатежноеПоручение.Ссылка В (&СписокДокументов)");
		ЗапросПоДокументам.УстановитьПараметр("СписокДокументов", СписокДокументов);
		ЗапросПоДокументам.УстановитьПараметр("ВыгружатьПлатТребования", Ложь);
	КонецЕсли;
	
	ЗапросПоДокументам.Текст = ТекстЗапроса;
	
	РезультатЗапроса = ЗапросПоДокументам.ВыполнитьПакет();
	ПлатежныеПоручения  = РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("ПлатежноеПоручение");
	
	// исключаем из выборки отправленные через ДиректБанк банковские документы
	Если ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками) Тогда
		
		ПлатежныеПоручения = ОбменСБанками.ГотовыеКОтправкеДокументы(ПлатежныеПоручения);
		ПлатежныеТребования = Неопределено;
		
	КонецЕсли;
	
	ОбъектПлатежныеДокументы.Очистить();
	
	ЗаполнитьТаблицуДокументовДляЭкспорта(ОбъектПлатежныеДокументы, ПлатежныеПоручения, ПлатежныеТребования, КонтролироватьНекорректныеСимволыВНомере);
	
	ПроверитьПлатежныеРеквизитыГосОрганов(ОбъектПлатежныеДокументы, Организация);
	
	ПроверитьКорректностьЗаполненияРасчетныхСчетов(ОбъектПлатежныеДокументы);
	
	ПроверитьКритичныеСобытияНадежностьБанков(ОбъектПлатежныеДокументы);
	
КонецПроцедуры // ЗаполнитьДокументыНаЭкспорт

// Возвращает соответствие со списком документов,
// у которых пользователь изменил флаг "Выгружать" в таблице платежных документов
//
// Параметры:
//  ПлатежныеДокументы - Обработки.КлиентБанк.ПлатежныеДокументы - таблица обработки, содержащая список документов.
//
// Возвращаемое значение:
//  Соответствие - Соответствие, в котором в качестве ключа указан документ, а в качестве значения - текущее значение
//                                                                                                   флага "Выгружать".
Функция ДокументыСИзмененнымФлагомВыгрузки(ПлатежныеДокументы) Экспорт
	
	ДокументыДляВыгрузки = Новый Соответствие;
	Для Каждого ПлатежныйДокумент Из ПлатежныеДокументы Цикл
		ВыгружатьПоУмолчанию = ПлатежныйДокумент.Готовность = 0
			И ПлатежныйДокумент.Состояние = Перечисления.СостоянияБанковскихДокументов.Подготовлено;
		
		Если ПлатежныйДокумент.Выгружать <> ВыгружатьПоУмолчанию Тогда
			ДокументыДляВыгрузки.Вставить(ПлатежныйДокумент.Документ, ПлатежныйДокумент.Выгружать);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументыДляВыгрузки;
	
КонецФункции

Функция ПолучитьТаблицуДокументовДляЭкспорта(ПлатежныеПоручения, ПлатежныеТребования) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ПлатежныеПоручения",  ПлатежныеПоручения);
	Запрос.Параметры.Вставить("ПлатежныеТребования", ПлатежныеТребования);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""Платежное поручение"" КАК ВидДокумента,
	|	ПлатежноеПоручение.Ссылка КАК Документ,
	|	ПлатежноеПоручение.Проведен КАК Проведен,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.Проведен
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК СостояниеДокумента,
	|	ПлатежноеПоручение.Номер КАК Номер,
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.ВидПлатежа КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПеречислениеВБюджет,
	|	ПлатежноеПоручение.ОчередностьПлатежа КАК ОчередностьПлатежа,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.НазначениеПлатежа КАК СТРОКА(210)) КАК НазначениеПлатежа,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаДокумента,
	|	0 КАК СуммаНаПриход,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаНаРасход,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.ТекстПлательщика КАК СТРОКА(500)) КАК ТекстПлательщика,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.ТекстПолучателя КАК СТРОКА(500)) КАК ТекстПолучателя,
	|	ПлатежноеПоручение.ИННПлательщика КАК ИННПлательщика,
	|	ПлатежноеПоручение.КПППлательщика КАК КПППлательщика,
	|	ПлатежноеПоручение.ИННПолучателя КАК ИННПолучателя,
	|	ПлатежноеПоручение.КПППолучателя КАК КПППолучателя,
	|	ПлатежноеПоручение.КодБК КАК КодБК,
	|	ПлатежноеПоручение.КодОКАТО КАК КодОКАТО,
	|	ПлатежноеПоручение.ПоказательДаты КАК ПоказательДаты,
	|	ПлатежноеПоручение.ПоказательНомера КАК ПоказательНомера,
	|	ПлатежноеПоручение.ПоказательОснования КАК ПоказательОснования,
	|	ПлатежноеПоручение.ПоказательПериода КАК ПоказательПериода,
	|	ПлатежноеПоручение.СтатусСоставителя КАК СтатусСоставителя,
	|	ПлатежноеПоручение.ПоказательТипа КАК ПоказательТипа,
	|	ПлатежноеПоручение.КодВыплат КАК КодВыплат,
	|	ПлатежноеПоручение.КодВидаДохода КАК КодВидаДохода,
	|	ПлатежноеПоручение.Организация.НаименованиеПолное КАК Организация,
	|	ПлатежноеПоручение.Организация.Наименование КАК ОрганизацияКратко,
	|	ПлатежноеПоручение.Организация.НаименованиеПлательщикаПриПеречисленииНалогов КАК ОрганизацияПеречислениеНалога,
	|	ПлатежноеПоручение.Организация.ИНН КАК ОрганизацияИНН,
	|	ПлатежноеПоручение.Организация.КПП КАК ОрганизацияКПП,
	|	ПлатежноеПоручение.БанковскийСчет КАК ОрганизацияСчет,
	|	ПлатежноеПоручение.БанковскийСчет.НомерСчета КАК ОрганизацияНомерСчета,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.Код КАК ОрганизацияБИКБанка,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.Наименование КАК ОрганизацияБанк,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.КоррСчет КАК ОрганизацияРасчСчет,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.Город КАК ОрганизацияГородБанка,
	|	ПлатежноеПоручение.БанковскийСчет.БанкРасчетов.Наименование КАК ОрганизацияБанкДляРасчетов,
	|	ПлатежноеПоручение.БанковскийСчет.БанкРасчетов.Город КАК ОрганизацияГородРЦБанка,
	|	ПлатежноеПоручение.БанковскийСчет.БанкРасчетов.Код КАК ОрганизацияБИКРЦБанка,
	|	ПлатежноеПоручение.БанковскийСчет.БанкРасчетов.КоррСчет КАК ОрганизацияКоррСчетРЦБанка,
	|	ПлатежноеПоручение.БанковскийСчет.СуммаБезКопеек КАК СуммаБезКопеек,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.БанковскийСчет.ТекстКорреспондента КАК СТРОКА(500)) КАК ОрганизацияТекстКорреспондента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.БанковскийСчет.ТекстНазначения КАК СТРОКА(210)) КАК ОрганизацияТекстНазначения,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ПлатежноеПоручение.СчетКонтрагента.Владелец.НаименованиеПолное, ЕСТЬNULL(ПлатежноеПоручение.СчетКонтрагента.Владелец.Наименование, ПлатежноеПоручение.СчетКонтрагента.Владелец.Наименование)) КАК СТРОКА(250)) КАК Контрагент,
	|	ПлатежноеПоручение.СчетКонтрагента.Владелец.Наименование КАК КонтрагентКратко,
	|	ПлатежноеПоручение.СчетКонтрагента.Владелец.ИНН КАК КонтрагентИНН,
	|	ПлатежноеПоручение.СчетКонтрагента.Владелец.КПП КАК КонтрагентКПП,
	|	ПлатежноеПоручение.СчетКонтрагента КАК КонтрагентСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Наименование КАК КонтрагентБанк,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.КоррСчет КАК КонтрагентРасчСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Город КАК КонтрагентГородБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов.Наименование КАК КонтрагентБанкДляРасчетов,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов.Город КАК КонтрагентГородРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Код КАК КонтрагентБИКБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов.Код КАК КонтрагентБИКРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов.КоррСчет КАК КонтрагентКоррСчетРЦБанка,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.СчетКонтрагента.ТекстКорреспондента КАК СТРОКА(500)) КАК КонтрагентТекстКорреспондента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.СчетКонтрагента.ТекстНазначения КАК СТРОКА(210)) КАК КонтрагентТекстНазначения,
	|	"""" КАК СрокАкцепта,
	|	"""" КАК УсловиеОплаты1,
	|	"""" КАК ДатаОтсылкиДок,
	|	"""" КАК ОписаниеОшибок,
	|	"""" КАК Готовность,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.БанковскийСчет.БанкРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НепрямыеРасчетыУПлательщика,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НепрямыеРасчетыУПолучателя,
	|	ПлатежноеПоручение.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	"""" КАК ВидАкцепта,
	|	ПлатежноеПоручение.ВидОперации КАК ВидОперации,
	|	ЛОЖЬ КАК ПеречислениеПоИсполнительномуЛисту,
	|	ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) КАК Состояние
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ПлатежноеПоручение.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|ГДЕ
	|	ПлатежноеПоручение.Ссылка В(&ПлатежныеПоручения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДокумента,
	|	ПлатежноеПоручение.Дата,
	|	Документ";
	
	ТаблицаПлатежныхДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаПлатежныхДокументов.Колонки.Добавить("НомерВФорматеВыгрузки", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(11)));
	Для каждого ПлатежныйДокумент Из ТаблицаПлатежныхДокументов Цикл
		ПлатежныйДокумент.НомерВФорматеВыгрузки = УчетДенежныхСредствКлиентСервер.НомерОбъектаБезПрефикса(ПлатежныйДокумент.Номер);
		
		ТекстПолучателя = "";
		Если ПлатежныйДокумент.НепрямыеРасчетыУПолучателя Тогда
			ПозицияРС = СтрНайти(ПлатежныйДокумент.ТекстПолучателя, "р/с");
			Если ПозицияРС = 0 Тогда
				ТекстПолучателя = ПлатежныйДокумент.ТекстПолучателя;
			Иначе
				ТекстПолучателя = СокрЛП((Лев(ПлатежныйДокумент.ТекстПолучателя, ПозицияРС - 1)));
			КонецЕсли;
		Иначе
			ТекстПолучателя = ПлатежныйДокумент.ТекстПолучателя;
		КонецЕсли;
		
		ПлатежныйДокумент.ТекстПолучателя = ЗаменитьПереносыСтроки(ТекстПолучателя);
		
		ТекстПлательщика = "";
		Если ПлатежныйДокумент.НепрямыеРасчетыУПлательщика Тогда
			ПозицияРС = СтрНайти(ПлатежныйДокумент.ТекстПлательщика, "р/с");
			Если ПозицияРС = 0 Тогда
				ТекстПлательщика = ПлатежныйДокумент.ТекстПлательщика;
			Иначе
				ТекстПлательщика = СокрЛП((Лев(ПлатежныйДокумент.ТекстПлательщика, ПозицияРС - 1)));
			КонецЕсли;
		Иначе
			ТекстПлательщика = ПлатежныйДокумент.ТекстПлательщика;
		КонецЕсли;
		
		ПлатежныйДокумент.ТекстПлательщика = ЗаменитьПереносыСтроки(ТекстПлательщика);
		
		ЗаполнитьНулемПустыеЗначенияРеквизитовПлатежаВБюджет(ПлатежныйДокумент);
		
		Если УчетДенежныхСредствКлиентСервер.ДействуетУказаниеБанкаРоссии5286У(ПлатежныйДокумент.Дата) Тогда
			Если ПустаяСтрока(ПлатежныйДокумент.КодВидаДохода)
				И ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты Тогда
				// "Нулевое" значение обработаем при выводе в файл отдельно - выведем незаполненную секцию.
				ПлатежныйДокумент.КодВидаДохода = "0";
			КонецЕсли;
		Иначе
			ПлатежныйДокумент.КодВидаДохода = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПлатежныхДокументов;
	
КонецФункции

Функция ЗаменитьПереносыСтроки(ТекстРеквизита)
	
	// Заменим совокупность символов переноса строки ПС+ВК на пробел.
	// Совокупность ПС+ВК принята в Windows, но платформой в Windows определяется как один символ ПС.
	// Но в других ОС, скорее всего, эта совокупность будет определяться как 2 разных символа.
	ТекстРеквизита = СтрЗаменить(ТекстРеквизита, Символы.ПС + Символы.ВК, " ");
	// Если предыдущая замена не сработала, то заменим какждый спецсимвол отдельно.
	// В разных ОС будет сформирован (и виден) какой-то один из них.
	ТекстРеквизита = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(
		Символы.ПС + Символы.ВК,
		ТекстРеквизита,
		"  ");
	
	Возврат ТекстРеквизита;
	
КонецФункции

Процедура ПроверитьПлатежныеРеквизитыГосОрганов(ПлатежныеДокументы, Организация)
	
	СчетаДляПроверки = Новый Соответствие;
	
	Для Каждого ПлатежныйДокумент Из ПлатежныеДокументы Цикл
		
		// Выполняем проверку только для платежных поручений на уплату налогов в бюджет
		// для правильно заполненных документов
		Если ПлатежныйДокумент.ПеречислениеВБюджет И ПлатежныйДокумент.Готовность = 0 Тогда
			
			ПлатежныеРеквизиты = Новый Структура();
			ПлатежныеРеквизиты.Вставить("ИНН", ПлатежныйДокумент.КонтрагентИНН);
			ПлатежныеРеквизиты.Вставить("КПП", ПлатежныйДокумент.КонтрагентКПП);
			ПлатежныеРеквизиты.Вставить("ПолучательПлатежа", ПлатежныйДокумент.ТекстПолучателя);
			ПлатежныеРеквизиты.Вставить("РасчетныйСчет",     ПлатежныйДокумент.КонтрагентНомерСчета);
			ПлатежныеРеквизиты.Вставить("БИК",               ПлатежныйДокумент.КонтрагентБИКБанка);
			ПлатежныеРеквизиты.Вставить("КоррСчет",          СокрЛП(ПлатежныйДокумент.КонтрагентРасчСчет));
			ПлатежныеРеквизиты.Вставить("ДатаДокумента",     ПлатежныйДокумент.Дата);
			
			ПлатежныеРеквизиты.Вставить("ПлательщикЕНП",
				УчетнаяПолитика.ПлательщикЕНП(Организация,
					ПлатежныйДокумент.Дата));
			
			СчетаДляПроверки.Вставить(ПлатежныйДокумент.КонтрагентСчет, ПлатежныеРеквизиты);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатПроверки = Новый Соответствие;
	
	Для Каждого СчетДляПроверки Из СчетаДляПроверки Цикл
		
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетДляПроверки.Ключ, "Владелец");
		Результат = ДанныеГосударственныхОрганов.ПроверитьПлатежныеРеквизитыКонтрагента(Контрагент, СчетДляПроверки.Значение);
		Если Результат.Свойство("ПлатежныеРеквизитыНайдены")
			И Результат.ПлатежныеРеквизитыНайдены Тогда
			
			Если Результат.Свойство("ПлатежныеРеквизитыАктуальны")
				И НЕ Результат.ПлатежныеРеквизитыАктуальны Тогда
				
				РезультатПроверки.Вставить(СчетДляПроверки.Ключ, Результат.РезультатПроверки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПлатежныйДокумент Из ПлатежныеДокументы Цикл
		
		Если ПлатежныйДокумент.ПеречислениеВБюджет
			И ПлатежныйДокумент.Готовность = 0 Тогда
			ТекстПредупреждения = РезультатПроверки.Получить(ПлатежныйДокумент.КонтрагентСчет);
			Если ТекстПредупреждения = Неопределено Тогда
				Продолжить;
			ИначеЕсли СтрНайти(ТекстПредупреждения, "01.01.21") > 0 Тогда
				ПлатежныйДокумент.ЕстьОшибка = Истина;
				ПлатежныйДокумент.ОписаниеОшибок = "РекомендуетсяОбновитьРеквизиты";
				ПлатежныйДокумент.Готовность = 4;
				ПлатежныйДокумент.Выгружать  = Истина;
			Иначе
				ПлатежныйДокумент.ЕстьОшибка = Истина;
				ПлатежныйДокумент.ОписаниеОшибок = "НеВерноУказаныПлатежныеРеквизиты";
				ПлатежныйДокумент.Готовность = 4;
				ПлатежныйДокумент.Выгружать  = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКритичныеСобытияНадежностьБанков(ПлатежныеДокументы)
	
	БИКБанков = ПлатежныеДокументы.ВыгрузитьКолонку("КонтрагентБИКБанка");
	
	Результат = НадежностьБанков.ИнформацияОКритичныхСобытиях(БИКБанков);
	Если НЕ Результат.Используется Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ПлатежныйДокумент Из ПлатежныеДокументы Цикл
		ДанныеСобытия = Результат.События[ПлатежныйДокумент.КонтрагентБИКБанка];
		Если ДанныеСобытия <> Неопределено
			И ПлатежныйДокумент.Готовность = 0 Тогда
			ПлатежныйДокумент.ЕстьОшибка = Истина;
			ПлатежныйДокумент.ОписаниеОшибок = ДанныеСобытия.ТекстСобытия;
			ПлатежныйДокумент.Готовность = 4;
			ПлатежныйДокумент.Выгружать  = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет строки таблицы на корректность и пустое значение
//
Процедура ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента, КоллекцияЭлементов,
		КонтролироватьНекорректныеСимволыВНомере = Ложь)
	
	ПеречислениеНалога          = Ложь;
	НепрямыеРасчетыУПлательщика = Ложь;
	НепрямыеРасчетыУПолучателя  = Ложь;
	
	Если СтрокаДокумента.ВидДокумента = "Платежное поручение" Тогда
		ПеречислениеНалога           = ЗначениеЗаполнено(СтрокаДокумента.СтатусСоставителя);
		НепрямыеРасчетыУПлательщика  = ЗначениеЗаполнено(СтрокаДокумента.ОрганизацияБанкДляРасчетов);
		НепрямыеРасчетыУПолучателя   = ЗначениеЗаполнено(СтрокаДокумента.КонтрагентБанкДляРасчетов);
		СтрокаДокумента.ТипДокумента = ?(ПеречислениеНалога, 1, 0) * 4
			+ ?(НепрямыеРасчетыУПолучателя, 1, 0) * 2 + ?(НепрямыеРасчетыУПлательщика, 1, 0) + 1;
		Плательщик    = "Организация";
		Получатель    = "Контрагент";
		ПлательщикИНН = "ИННПлательщика";
		ПолучательИНН = "ИННПолучателя";
	Иначе
		СтрокаДокумента.ТипДокумента = 0;
		Плательщик    = "Контрагент";
		Получатель    = "Организация";
		ПлательщикИНН = "КонтрагентИНН";
		ПолучательИНН = "ОрганизацияИНН";
	КонецЕсли;
	
	// РеквизитыПлДокЭкс_Основные
	Экспорт_НеПустые = Новый Структура("Номер, Дата, СуммаДокумента");
	
	// РеквизитыПлДокЭкс_Плательщик
	Экспорт_НеПустые.Вставить(ПлательщикИНН);
	Экспорт_НеПустые.Вставить(Плательщик);
	Экспорт_НеПустые.Вставить(Плательщик + "Счет");
	
	Если НепрямыеРасчетыУПлательщика Тогда
		// РеквизитыПлДокЭкс_ПлательщикНПР
		Экспорт_НеПустые.Вставить(Плательщик + "РасчСчет");
		Экспорт_НеПустые.Вставить(Плательщик + "БанкДляРасчетов");
		Экспорт_НеПустые.Вставить(Плательщик + "ГородБанка");
		Экспорт_НеПустые.Вставить(Плательщик + "БИКРЦБанка");
	КонецЕсли;
	
	// РеквизитыПлДокЭкс_Получатель
	Экспорт_НеПустые.Вставить(ПолучательИНН);
	Экспорт_НеПустые.Вставить(Получатель);
	Экспорт_НеПустые.Вставить(Получатель + "Счет");
	
	Если НепрямыеРасчетыУПолучателя Тогда
		// РеквизитыПлДокЭкс_ПолучательНПР
		Экспорт_НеПустые.Вставить(Получатель + "РасчСчет");
		Экспорт_НеПустые.Вставить(Получатель + "БанкДляРасчетов");
		Экспорт_НеПустые.Вставить(Получатель + "ГородБанка");
		Экспорт_НеПустые.Вставить(Получатель + "БИКРЦБанка");
	КонецЕсли;
	
	Для каждого Свойство Из Экспорт_НеПустые Цикл
		ПроверитьНаПустоеЗначениеЭкспорта(СтрокаДокумента, Свойство.Ключ, КоллекцияЭлементов.Найти(Свойство.Ключ).Синоним);
	КонецЦикла;
	
	Если ПеречислениеНалога Тогда
		ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаДокумента);
	КонецЕсли;
	
	ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаДокумента, КонтролироватьНекорректныеСимволыВНомере);
	
	ПроверитьНаКорректностьДатыПриВыгрузке(СтрокаДокумента);
	
КонецПроцедуры

Процедура ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства, ПредставлениеСвойства)
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта[ИмяСвойства]) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, "Не заполнено поле """ + ПредставлениеСвойства + """");
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет корректность номера
//
Процедура ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаЭкспорта, КонтролироватьНекорректныеСимволыВНомере = Ложь)
	
	Если КонтролироватьНекорректныеСимволыВНомере Тогда
		Значение = Прав(СокрЛП(СтрокаЭкспорта.НомерВФорматеВыгрузки), 6);
		Если Значение = "000000" Тогда
			ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'Номер не должен быть равен нулю.'"));
		КонецЕсли;
		
		Если ЕстьНеЦифры(Значение) Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Указан неправильный номер документа(%1).'"), Значение);
			ДобавитьЗамечание(СтрокаЭкспорта, 4, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет корректность даты выгрузки - она не должна быть старше, чем 10 дней.
//
Процедура ПроверитьНаКорректностьДатыПриВыгрузке(СтрокаЭкспорта)
	
	Если НачалоДня(ТекущаяДатаСеанса()) - НачалоДня(СтрокаЭкспорта.Дата) > 9 * 60 * 60 * 24 Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'Платежное поручение действительно только в течение 10 дней'"));
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует структуру экспорта
//
Функция СформироватьСтруктуруЭкспорта(ВерсияФормата)
	
	СтруктураЭкспорта = Новый Структура;
	
	СтруктураЭкспорта.Вставить("Выгружать",              ""); // "_"
	СтруктураЭкспорта.Вставить("Готовность",             ""); // "Готовность"
	
	СтруктураЭкспорта.Вставить("НомерДок",               ""); // "№ Документа"
	СтруктураЭкспорта.Вставить("Номер",                  ""); // "Номер"
	СтруктураЭкспорта.Вставить("Дата",                   ""); // "Дата"
	СтруктураЭкспорта.Вставить("Операция",               ""); // "Операция"
	СтруктураЭкспорта.Вставить("СчетОрганизации",        ""); // "Эл. Р/с организации"
	СтруктураЭкспорта.Вставить("НомерСчетаОрганизации",  ""); // "Р/с организации"
	СтруктураЭкспорта.Вставить("Сумма",                  ""); // "Сумма"
	
	СтруктураЭкспорта.Вставить("Контрагент",             ""); // "Контрагент"
	СтруктураЭкспорта.Вставить("СчетКонтрагента",        ""); // "Р/с контрагента"
	СтруктураЭкспорта.Вставить("НомерСчетаКонтрагента",  ""); // "Эл. Р/с контрагента"
	
	СтруктураЭкспорта.Вставить("КвитанцияДата",          ""); // "Дата форм. квитанции"
	СтруктураЭкспорта.Вставить("КвитанцияВремя",         ""); // "Время форм. квитанции"
	СтруктураЭкспорта.Вставить("КвитанцияСодержание",    ""); // "Содержание квитанции"
	
	СтруктураЭкспорта.Вставить("ПлательщикСчет",         ""); // "Расчетный счет плательщика"
	СтруктураЭкспорта.Вставить("Плательщик",             ""); // "Плательщик"
	СтруктураЭкспорта.Вставить("ПлательщикИНН",          ""); // "ИНН плательщика"
	СтруктураЭкспорта.Вставить("Плательщик1",            ""); // "Наименование плательщика"
	СтруктураЭкспорта.Вставить("Плательщик2",            ""); // "Расчетный счет плательщика"
	СтруктураЭкспорта.Вставить("Плательщик3",            ""); // "Банк плательщика"
	СтруктураЭкспорта.Вставить("Плательщик4",            ""); // "Город банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикРасчСчет",     ""); // "Корсчет банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикБанк1",        ""); // "РЦ банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикБанк2",        ""); // "Город РЦ банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикБИК",          ""); // "БИК РЦ банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикКорсчет",      ""); // "Корсчет РЦ банка плат."
	
	СтруктураЭкспорта.Вставить("ПолучательСчет",         ""); // "Расчетный счет получателя"
	СтруктураЭкспорта.Вставить("Получатель",             ""); // "Получатель"
	СтруктураЭкспорта.Вставить("ПолучательИНН",          ""); // "ИНН получателя"
	СтруктураЭкспорта.Вставить("Получатель1",            ""); // "Наименование получателя"
	СтруктураЭкспорта.Вставить("Получатель2",            ""); // "Расчетный счет получателя"
	СтруктураЭкспорта.Вставить("Получатель3",            ""); // "Банк получателя"
	СтруктураЭкспорта.Вставить("Получатель4",            ""); // "Город банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательРасчСчет",     ""); // "Корсчет банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательБанк1",        ""); // "РЦ банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательБанк2",        ""); // "Город РЦ банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательБИК",          ""); // "БИК РЦ банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательКорсчет",      ""); // "Корсчет РЦ банка пол."
	
	СтруктураЭкспорта.Вставить("ВидПлатежа",             ""); // "Вид платежа"
	СтруктураЭкспорта.Вставить("ВидОплаты",              ""); // "Вид оплаты"
	СтруктураЭкспорта.Вставить("ПеречислениеВБюджет",    ""); // "Перечисление в бюджет",
	СтруктураЭкспорта.Вставить("ВидПеречисленияВБюджет", ""); // "Вид перечисления в бюджет",
	
	СтруктураЭкспорта.Вставить("СтатусСоставителя",      ""); // "Статус составителя"
	СтруктураЭкспорта.Вставить("ПлательщикКПП",          ""); // "КПП плательщика"
	СтруктураЭкспорта.Вставить("ПолучательКПП",          ""); // "КПП получателя"
	СтруктураЭкспорта.Вставить("ПоказательКБК",          ""); // "Показатель КБК"
	СтруктураЭкспорта.Вставить("ОКАТО",                  ""); // "ОКАТО/ОКТМО"
	СтруктураЭкспорта.Вставить("ПоказательОснования",    ""); // "Пок. основания"
	СтруктураЭкспорта.Вставить("ПоказательПериода",      ""); // "Пок. нал. периода"
	СтруктураЭкспорта.Вставить("ПоказательНомера",       ""); // "Пок. номера док."
	СтруктураЭкспорта.Вставить("ПоказательДаты",         ""); // "Пок. даты док."
	
	// С 01.01.2015 не используется
	СтруктураЭкспорта.Вставить("ПоказательТипа",          ""); // "Пок. типа платежа"
	
	СтруктураЭкспорта.Вставить("СрокПлатежа",            ""); // "Срок действия аккредитива"
	СтруктураЭкспорта.Вставить("Очередность",            ""); // "Очередность платежа"
	
	СтруктураЭкспорта.Вставить("НазначениеПлатежа",      ""); // "Назначение платежа"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа1",     ""); // "Назначение платежа, стр. 1"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа2",     ""); // "Назначение платежа, стр. 2"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа3",     ""); // "Назначение платежа, стр. 3"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа4",     ""); // "Назначение платежа, стр. 4"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа5",     ""); // "Назначение платежа, стр. 5"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа6",     ""); // "Назначение платежа, стр. 6"
	
	СтруктураЭкспорта.Вставить("СрокАкцепта",            ""); // "Срок акцепта"
	СтруктураЭкспорта.Вставить("ВидАккредитива",         ""); // "Вид аккредитива"
	СтруктураЭкспорта.Вставить("УсловиеОплаты1",         ""); // "Условие оплаты, стр. 1"
	СтруктураЭкспорта.Вставить("УсловиеОплаты2",         ""); // "Условие оплаты, стр. 2"
	СтруктураЭкспорта.Вставить("УсловиеОплаты3",         ""); // "Условие оплаты, стр. 3"
	СтруктураЭкспорта.Вставить("ПлатежПоПредст",         ""); // "Платеж по представлению"
	СтруктураЭкспорта.Вставить("ДополнУсловия",          ""); // "Дополнительные условия"
	СтруктураЭкспорта.Вставить("НомерСчетаПоставщика",   ""); // "№ счета поставщика"
	СтруктураЭкспорта.Вставить("ДатаОтсылкиДок",         ""); // "Дата отсылки документов"
	
	СтруктураЭкспорта.Вставить("Документ",               ""); // "Источник"
	СтруктураЭкспорта.Вставить("СекцияДокумент",         ""); // "Выгрузка"
	
	СтруктураЭкспорта.Вставить("ОписаниеОшибок",         ""); // "Замечания"
	СтруктураЭкспорта.Вставить("ТипДокумента",           ""); // "Тип пл. документа"
	
	СтруктураЭкспорта.Вставить("Код",                    ""); // "Уникальный идентификатор платежа"
	
	// Код выплат указывается при переводе денежных средств физическим лицам на карту "Мир"
	// в целях осуществления выплат за счет средств бюджетов бюджетной системы РФ.
	СтруктураЭкспорта.Вставить("КодВыплат",              ""); // "поле 110 - ПоказательТипа"
	
	// Код вида дохода (наз. пл.) указывается при переводе денежных средств физическим лицам,
	// для классификации ограничений, которые могут быть наложены по исполнительномуо листу.
	СтруктураЭкспорта.Вставить("КодНазПлатежа",          ""); // "поле 20 - Наз. пл."
	
	Возврат СтруктураЭкспорта;
	
КонецФункции // СформироватьСтруктуруЭкспорта

// Процедура заполняет экспортные значения
//
Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта) Экспорт
	
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		Плательщик = "Контрагент";
		Получатель = "Организация";
	Иначе
		Плательщик = "Организация";
		Получатель = "Контрагент";
	КонецЕсли;
	
	СтрокаЭкспорта.Номер          = ВыборкаДляЭкспорта.НомерВФорматеВыгрузки;
	СтрокаЭкспорта.Дата           = Формат(ВыборкаДляЭкспорта.Дата, "ДФ=dd.MM.yyyy");
	СтрокаЭкспорта.Сумма          = Формат(ВыборкаДляЭкспорта.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	СтрокаЭкспорта.ПлательщикСчет = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
	СтрокаЭкспорта.ПолучательСчет = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
	СтрокаЭкспорта.ВидПлатежа     = ВыборкаДляЭкспорта.ВидПлатежа;
	
	НепрямыеРасчетыУПлательщика   = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"]);
	НепрямыеРасчетыУПолучателя    = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"]);
	
	СтрокаЭкспорта.КодВыплат      = ВыборкаДляЭкспорта.КодВыплат;
	СтрокаЭкспорта.КодНазПлатежа  = ВыборкаДляЭкспорта.КодВидаДохода;
	
//ВидОплаты
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное поручение" Тогда
		СтрокаЭкспорта.ВидОплаты  = "01";
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Аккредитив переданный" Тогда
		СтрокаЭкспорта.ВидОплаты  = "08";
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Инкассовое поручение" Тогда
		СтрокаЭкспорта.ВидОплаты  = "06";
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		СтрокаЭкспорта.ВидОплаты  = "02";
	Иначе
		СтрокаЭкспорта.ВидОплаты  = "00";
	КонецЕсли;
	
// Плательщик1
	СтрокаЭкспорта.Плательщик1 = ВыборкаДляЭкспорта.ТекстПлательщика;
	
// Плательщик, ПлательщикИНН
	Значение = ВыборкаДляЭкспорта.ИННПлательщика;
	СтрокаЭкспорта.ПлательщикИНН = Значение;
	СтрокаЭкспорта.Плательщик = "ИНН " + Значение + " " + СтрокаЭкспорта.Плательщик1;
	
// ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,Плательщик2, Плательщик3, Плательщик4
	Если НепрямыеРасчетыУПлательщика Тогда
		СтрокаЭкспорта.Плательщик2        = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		СтрокаЭкспорта.Плательщик3        = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.Плательщик4        = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.Плательщик         = СтрокаЭкспорта.Плательщик + " р/с " + СтрокаЭкспорта.Плательщик2 + " в " + СтрокаЭкспорта.Плательщик3 + " " + СтрокаЭкспорта.Плательщик4;
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородРЦБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКРЦБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
	КонецЕсли;
	
// Получатель1
	СтрокаЭкспорта.Получатель1 = ВыборкаДляЭкспорта.ТекстПолучателя;
	
// Получатель, ПолучательИНН
	Значение = ВыборкаДляЭкспорта.ИННПолучателя;
	СтрокаЭкспорта.ПолучательИНН = Значение;
	СтрокаЭкспорта.Получатель    = "ИНН " + Значение + " " + СтрокаЭкспорта.Получатель1;
	
// ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет, Получатель2, Получатель3, Получатель4
	Если НепрямыеРасчетыУПолучателя Тогда
		СтрокаЭкспорта.Получатель2        = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
		СтрокаЭкспорта.Получатель3        = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.Получатель4        = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.Получатель         = СтрокаЭкспорта.Получатель + " р/с " + СтрокаЭкспорта.Получатель2 + " в " + СтрокаЭкспорта.Получатель3 + " " + СтрокаЭкспорта.Получатель4;
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
		СтрокаЭкспорта.ПолучательБанк1    = ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородРЦБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКРЦБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
		СтрокаЭкспорта.ПолучательБанк1    = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
	КонецЕсли;
	
//ПлательщикКПП
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
		СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
	КонецЕсли;
	
//ПолучательКПП
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
		СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
	КонецЕсли;
	
	КодПредусмотренСтандартамиОбмена = СтрокаЭкспорта.Свойство("Код");
	КодВыгружаетсяВОтдельномПоле     = ВыборкаДляЭкспорта.Дата >= ПлатежиВБюджетКлиентСервер.НачалоПримененияИдентификатораПлатежа();
	Если КодВыгружаетсяВОтдельномПоле И КодПредусмотренСтандартамиОбмена Тогда
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.ИдентификаторПлатежа) Тогда
			СтрокаЭкспорта.Код = ВыборкаДляЭкспорта.ИдентификаторПлатежа;
		КонецЕсли;
	КонецЕсли;
	
// СтатусСоставителя, ПлательщикКПП ПолучательКПП ПоказательКБК ОКАТО/ОКТМО ПоказательОснования ПоказательПериода
// ПоказательНомера ПоказательДаты ПоказательТипа Код
	Если ВыборкаДляЭкспорта.ПеречислениеВБюджет Тогда
		СтрокаЭкспорта.СтатусСоставителя = ВыборкаДляЭкспорта.СтатусСоставителя;
		
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.КПППлательщика) Тогда
			СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.КПППолучателя) Тогда
			СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.КодБК) Тогда
			СтрокаЭкспорта.ПоказательКБК = ВыборкаДляЭкспорта.КодБК;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.КодОКАТО) Тогда
			СтрокаЭкспорта.ОКАТО = ВыборкаДляЭкспорта.КодОКАТО;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательОснования) Тогда
			СтрокаЭкспорта.ПоказательОснования = ВыборкаДляЭкспорта.ПоказательОснования;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательПериода) И ВыборкаДляЭкспорта.ПоказательПериода <> "  .  .    " Тогда
			СтрокаЭкспорта.ПоказательПериода = ВыборкаДляЭкспорта.ПоказательПериода;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательНомера) Тогда
			СтрокаЭкспорта.ПоказательНомера = ВыборкаДляЭкспорта.ПоказательНомера;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательДаты) Тогда
			СтрокаЭкспорта.ПоказательДаты = ВыборкаДляЭкспорта.ПоказательДаты;
		КонецЕсли;
		
		Если ВыборкаДляЭкспорта.ПоказательДаты = "01.01.0001" Тогда
			СтрокаЭкспорта.ПоказательДаты = "0";
		КонецЕсли;
		
		ПоказательТипаПредусмотренСтандартамиОбмена = СтрокаЭкспорта.Свойство("ПоказательТипа");
		Если ПоказательТипаПредусмотренСтандартамиОбмена Тогда
			Если ВыборкаДляЭкспорта.Дата >= ПлатежиВБюджетКлиентСервер.НачалоДействияПриказа126н() Тогда
				СтрокаЭкспорта.ПоказательТипа = "0";
			Иначе
				СтрокаЭкспорта.ПоказательТипа = ВыборкаДляЭкспорта.ПоказательТипа;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
// СрокАкцепта, ДатаОтсылкиДок, УсловиеОплаты1
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		СтрокаЭкспорта.СрокАкцепта = ВыборкаДляЭкспорта.СрокАкцепта;
		СтрокаЭкспорта.ДатаОтсылкиДок = ВыборкаДляЭкспорта.ДатаОтсылкиДок;
		СтрокаЭкспорта.УсловиеОплаты1 = ВыборкаДляЭкспорта.УсловиеОплаты1;
	КонецЕсли;
	
//Очередность
	СтрокаЭкспорта.Очередность = "" + ВыборкаДляЭкспорта.ОчередностьПлатежа;
	
// НазначениеПлатежа, НазначениеПлатежа1 НазначениеПлатежа2 НазначениеПлатежа3 НазначениеПлатежа4 НазначениеПлатежа5 НазначениеПлатежа6
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(ВыборкаДляЭкспорта.НазначениеПлатежа, Символы.ПС + Символы.ВК, " ");
	СтрокаЭкспорта.НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(
		Символы.ПС + Символы.ВК + Символы.ПФ,
		СтрокаЭкспорта.НазначениеПлатежа,
		"   ");
	КоличествоСтрокНП = СтрЧислоСтрок(ВыборкаДляЭкспорта.НазначениеПлатежа);
	
	Если КоличествоСтрокНП > 6 Тогда
		КоличествоСтрокНП = 6;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоСтрокНП Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = СтрПолучитьСтроку(ВыборкаДляЭкспорта.НазначениеПлатежа, Сч);
	КонецЦикла;
	
	Для Сч = (КоличествоСтрокНП + 1) По 6 Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = "";
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗначениеЭкспорта

Процедура ЗаполнитьНулемПустыеЗначенияРеквизитовПлатежаВБюджет(СтрокаЭкспорта) Экспорт
	
	Если НЕ СтрокаЭкспорта.ПеречислениеВБюджет Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.КПППлательщика) Тогда
		СтрокаЭкспорта.КПППлательщика = "0";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.КПППолучателя) Тогда
		СтрокаЭкспорта.КПППолучателя = "0";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.КодБК) Тогда
		СтрокаЭкспорта.КодБК = "0";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.КодОКАТО) Тогда
		СтрокаЭкспорта.КодОКАТО = "0";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.ПоказательОснования) Тогда
		СтрокаЭкспорта.ПоказательОснования = "0";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.ПоказательПериода) Тогда
		СтрокаЭкспорта.ПоказательПериода = "0";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.ПоказательНомера) Тогда
		СтрокаЭкспорта.ПоказательНомера = "0";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаЭкспорта.ПоказательТипа) Тогда
		СтрокаЭкспорта.ПоказательТипа = "";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.ПоказательДаты) Тогда
		СтрокаЭкспорта.ПоказательДаты = "0";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.ИдентификаторПлатежа) Тогда
		СтрокаЭкспорта.ИдентификаторПлатежа = "0";
	КонецЕсли;
	
КонецПроцедуры

// Функция получает секцию документа
//
Функция ПолучитьСекциюДокумент(СтруктураДокумента, ВерсияФормата, ЗаполнятьПоказательТипа)
	
	Буфер    = "";
	Реквизит = "";
	Секция   = СформироватьСтруктуруЭкспорта(ВерсияФормата);
	ЗаполнитьЗначениеЭкспорта(Секция, СтруктураДокумента);
	
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + СтруктураДокумента.ВидДокумента);
	
	Для каждого ВыгружаемыйРеквизит Из Секция Цикл
		
		Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
		
		Если НЕ ПустаяСтрока(Значение) Тогда
			Если Не ЗаполнятьПоказательТипа И ВыгружаемыйРеквизит.Ключ = "ПоказательТипа" Тогда
				ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "="); // Секция должна выгружаться пустой, потому что в банках может остаться ПО, которое ожидает такой ключ.
			ИначеЕсли ВыгружаемыйРеквизит.Ключ = "КодВыплат" Тогда
				ДобавитьВСтроку(Буфер, "ПоказательТипа=" + Значение); // Код выплат выгружается в секции ПоказательТипа
			ИначеЕсли ВыгружаемыйРеквизит.Ключ = "КодНазПлатежа" И Значение = "0" Тогда
				ДобавитьВСтроку(Буфер, "КодНазПлатежа=");
			Иначе
				ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "=" + Значение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
КонецФункции

// Процедура добавляет переданное значение в строку
//
Процедура ДобавитьВСтроку(Буфер, НоваяСтрока, Разделитель = "")
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	Иначе
		УжеЕстьФразаОшибкаВФайле = СтрНайти(Буфер, "Ошибка в файле. ") > 0;
		Если УжеЕстьФразаОшибкаВФайле Тогда
			НоваяСтрока = СтрЗаменить(НоваяСтрока, "Ошибка в файле. ", "");
		КонецЕсли;
		
		Шаблон = НСтр("ru = '%1%2%3'");
		Буфер  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					Буфер,
					?(ПустаяСтрока(Разделитель), Символы.ПС, Разделитель),
					НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаЭкспорта)
	
	// СтрокаЭкспорта - строка табличной части ПлатежныеДокументы обработки
	
	Если НЕ ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(СтрокаЭкспорта.Дата) Тогда
		// До даты применения 107н не выполняем проверку, так как был переходный период,
		// в течение которого непонятно, выполнение каких правил контролировать
		Возврат;
	КонецЕсли;
	
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	Если СтрокаЭкспорта.ВидДокумента = "Платежное поручение" Тогда
		РеквизитыПлатежаВБюджет.ВидПеречисления = СтрокаЭкспорта.Документ.ВидПеречисленияВБюджет;
	КонецЕсли;
	
	РеквизитыПлатежаВБюджет.ИдентификаторПлатежа = СтрокаЭкспорта.ИдентификаторПлатежа;
	РеквизитыПлатежаВБюджет.СтатусПлательщика    = СтрокаЭкспорта.СтатусСоставителя;
	РеквизитыПлатежаВБюджет.КБК                  = СтрокаЭкспорта.КодБК;
	РеквизитыПлатежаВБюджет.КодТерритории        = СтрокаЭкспорта.КодОКАТО;
	РеквизитыПлатежаВБюджет.ОснованиеПлатежа     = СтрокаЭкспорта.ПоказательОснования;
	РеквизитыПлатежаВБюджет.НалоговыйПериод      = СтрокаЭкспорта.ПоказательПериода;
	РеквизитыПлатежаВБюджет.НомерДокумента       = СтрокаЭкспорта.ПоказательНомера;
	РеквизитыПлатежаВБюджет.ДатаДокумента        = СтрокаЭкспорта.ПоказательДаты;
	РеквизитыПлатежаВБюджет.ТипПлатежа           = СтрокаЭкспорта.ПоказательТипа;
	РеквизитыПлатежаВБюджет.ПеречислениеВБюджет  = СтрокаЭкспорта.ПеречислениеВБюджет;
	РеквизитыПлатежаВБюджет.ПеречислениеПоИсполнительномуЛисту = СтрокаЭкспорта.ПеречислениеПоИсполнительномуЛисту;
	
	ИсточникДанных = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
	ИсточникДанных.Организация    = СтрокаЭкспорта.ОрганизацияСчет.Владелец;
	ИсточникДанных.Период         = СтрокаЭкспорта.Дата;
	ИсточникДанных.СчетПолучателя = СтрокаЭкспорта.КонтрагентСчет;
	ИсточникДанных.Налог          = Справочники.ВидыНалогов.НалогПоКБК(СтрокаЭкспорта.КодБК, , СтрокаЭкспорта.СтатусСоставителя);
	ИсточникДанных.ПеречислениеВБюджет                = СтрокаЭкспорта.ПеречислениеВБюджет;
	ИсточникДанных.ПеречислениеПоИсполнительномуЛисту = СтрокаЭкспорта.ПеречислениеПоИсполнительномуЛисту;
	Контекст = ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(ИсточникДанных);
	
	// В незаполненных полях проставим "0"
	ПлатежиВБюджетКлиентСервер.ОтметитьНезаполненныеЗначения(РеквизитыПлатежаВБюджет);
	
	РезультатПроверки = ПлатежиВБюджетКлиентСервер.ПроверитьЗаполнение(РеквизитыПлатежаВБюджет, Контекст);
	Ошибки = РезультатПроверки.Ошибки;
	
	// Проверим дубли УИН
	ИнформацияДублиУИН = ПлатежиВБюджет.ПроверитьДублиУИН(РеквизитыПлатежаВБюджет.ИдентификаторПлатежа, СтрокаЭкспорта.Документ);
	Для каждого ОписаниеОшибки Из ИнформацияДублиУИН Цикл
		Ошибки.Добавить(ОписаниеОшибки);
	КонецЦикла;
	
	// Выведем результат проверки
	Для каждого Ошибка Из Ошибки Цикл
		ДобавитьЗамечание(СтрокаЭкспорта, 4, Ошибка.Описание); // 4 означает, что выгрузить можно только после ознакомления с ошибкой
	КонецЦикла;
	
	// Дополнительные проверки по Приказу Минфина России от 23 сентября 2015 г. № 148н.
	Если Лев(СтрокаЭкспорта.ИННПлательщика, 2) = "00" Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'Первые две цифры ИНН плательщика не могут быть ""00""'"));
	КонецЕсли;
	Если Лев(СтрокаЭкспорта.ИННПолучателя, 2) = "00" Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'Первые две цифры ИНН получателя не могут быть ""00""'"));
	КонецЕсли;
	Если Лев(СтрокаЭкспорта.КПППлательщика, 2) = "00" Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'КПП плательщика не должен начинаться на 00'"));
	КонецЕсли;
	Если Лев(СтрокаЭкспорта.КПППолучателя, 2) = "00" Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'КПП получателя не должен начинаться на 00'"));
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет замечание
//
Процедура ДобавитьЗамечание(СтрокаДокумента, НоваяГотовность, ТекстЗамечания) Экспорт
	
	Если СтрокаДокумента.Готовность < НоваяГотовность Тогда
		СтрокаДокумента.Готовность = НоваяГотовность;
	КонецЕсли;
	ДобавитьВСтроку(СтрокаДокумента.ОписаниеОшибок, ТекстЗамечания, "; ");
	СтрокаДокумента.ЕстьОшибка = НоваяГотовность <> 0;
	
КонецПроцедуры

// Функция формирует значение на основании типа переданного значения
//
Функция ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		
		Возврат Формат(Значение, "ДФ=dd.MM.yyyy");
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Функция проверяет наличие в строке только цифр
//
Функция ЕстьНеЦифры(Знач СтрокаПроверки)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	
	Для Ном = 1 По Длина Цикл
		Если СтрНайти("0123456789", Сред(СтрокаПроверки, Ном, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ДанныеДляЭкспортаПлатежногоПоручения(Документ) Экспорт
	
	ПлатежныеПоручения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ);
	ПлатежныеТребования = Новый Массив;
	
	ТаблицаПлатежныхДокументов = НовыйТаблицаПлатежныхДокументов();
	
	ЗаполнитьТаблицуДокументовДляЭкспорта(ТаблицаПлатежныхДокументов, ПлатежныеПоручения, ПлатежныеТребования, Ложь);
	
	УстановитьПризнакВыгружатьДляВсехСтрок(ТаблицаПлатежныхДокументов);
	
	Возврат ТаблицаПлатежныхДокументов;
	
КонецФункции

Процедура ЗаполнитьТаблицуДокументовДляЭкспорта(ТаблицаДокументовДляЭкспорта, ПлатежныеПоручения, ПлатежныеТребования, КонтролироватьНекорректныеСимволыВНомере)
	
	ВыборкаДляЭкспорта = ПолучитьТаблицуДокументовДляЭкспорта(ПлатежныеПоручения, ПлатежныеТребования);
	
	КоллекцияЭлементов = Метаданные.Обработки.КлиентБанк.ТабличныеЧасти.ПлатежныеДокументы.Реквизиты;
	Для каждого СтрокаВыборкиДляЭкспорта Из ВыборкаДляЭкспорта Цикл
		
		СтрокаДокумента = ТаблицаДокументовДляЭкспорта.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаВыборкиДляЭкспорта);
		
		ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента, КоллекцияЭлементов, КонтролироватьНекорректныеСимволыВНомере);
		
		СтрокаДокумента.Выгружать = ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок)
			И (СтрокаДокумента.Состояние = Перечисления.СостоянияБанковскихДокументов.Подготовлено
			Или СтрокаДокумента.Состояние = Перечисления.СостоянияБанковскихДокументов.ПустаяСсылка());
		
		Если СтрокаДокумента.Готовность > 0 Тогда
			СтрокаДокумента.ОписаниеОшибок = СтрокаДокумента.ОписаниеОшибок;
		Иначе
			СтрокаДокумента.ОписаниеОшибок = НСтр("ru = 'Документ готов к выгрузке.'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПризнакВыгружатьДляВсехСтрок(ТаблицаПлатежныхДокументов)
	
	Для Каждого СтрокаДокумента Из ТаблицаПлатежныхДокументов Цикл
		СтрокаДокумента.Выгружать = Истина;
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйТаблицаПлатежныхДокументов()
	
	// Формируем копию таблицы ПлатежныеДокументы обработки КлиентБанк
	Таблица = Новый ТаблицаЗначений;
	Для Каждого Реквизит Из Метаданные.Обработки.КлиентБанк.ТабличныеЧасти.ПлатежныеДокументы.Реквизиты Цикл
		Таблица.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	Возврат Таблица;
	
КонецФункции

Процедура ПроверитьКорректностьЗаполненияРасчетныхСчетов(ТаблицаПлатежныхДокументов)
	
	ПроверяемыеБанковскиеСчета = ДанныеДляПроверкиСчетовВЭкспортируемыхДокументах(ТаблицаПлатежныхДокументов);
	РезультатыПроверкиБанковскихСчетов =
		БанковскиеСчетаСервер.ПроверитьКорректностьБанковскихСчетов(ПроверяемыеБанковскиеСчета);

	Для Каждого ПлатежныйДокумент Из ТаблицаПлатежныхДокументов Цикл
		ОшибкиРасчетныхСчетов = Новый Массив;
		
		ОтборСчетОрганизации = Новый Структура("Счет", ПлатежныйДокумент.ОрганизацияСчет);
		НайденныеСтрокиСчетОрганизации = РезультатыПроверкиБанковскихСчетов.НайтиСтроки(ОтборСчетОрганизации);
		ДанныеПроверяемогоСчета = Неопределено;
		Для Каждого СтрокаСчетОрганизации Из НайденныеСтрокиСчетОрганизации Цикл
			Если СтрокаСчетОрганизации.ПроверяемаяДата = ПлатежныйДокумент.Дата Тогда
				ДанныеПроверяемогоСчета = СтрокаСчетОрганизации;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеПроверяемогоСчета <> Неопределено И ДанныеПроверяемогоСчета.ЕстьОшибки Тогда
			РезультатПроверкиСчета = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеПроверяемогоСчета);
			ПризнакСчета = БанковскиеСчетаСервер.НовыйПризнакСчета();
			ПризнакСчета.СчетОрганизации = Истина;
			ТекстОшибкиСчетаОрганизации = БанковскиеСчетаСервер.ТекстОшибкиБанковскогоСчета(
				РезультатПроверкиСчета, ПризнакСчета);
			ОшибкиРасчетныхСчетов.Добавить(ТекстОшибкиСчетаОрганизации);
		КонецЕсли;
		
		ОтборСчетПолучателя = Новый Структура("Счет", ПлатежныйДокумент.КонтрагентСчет);
		НайденныеСтрокиСчетПолучателя = РезультатыПроверкиБанковскихСчетов.НайтиСтроки(ОтборСчетПолучателя);
		ДанныеПроверяемогоСчета = Неопределено;
		Для Каждого СтрокаСчетПолучателя Из НайденныеСтрокиСчетПолучателя Цикл
			Если СтрокаСчетПолучателя.ПроверяемаяДата = ПлатежныйДокумент.Дата Тогда
				ДанныеПроверяемогоСчета = СтрокаСчетПолучателя;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеПроверяемогоСчета <> Неопределено И ДанныеПроверяемогоСчета.ЕстьОшибки Тогда
			ПризнакСчета = БанковскиеСчетаСервер.НовыйПризнакСчета();
			ТипВладельцаСчета = ТипЗнч(ДанныеПроверяемогоСчета.Владелец);
			Если ТипВладельцаСчета = Тип("СправочникСсылка.Контрагенты") Тогда
				ПризнакСчета.СчетКонтрагента = Истина;
			ИначеЕсли ТипВладельцаСчета = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ПризнакСчета.СчетСотрудника = Истина;
			КонецЕсли;
			РезультатПроверкиСчета = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеПроверяемогоСчета);
			ТекстОшибкиСчетаПолучателя = БанковскиеСчетаСервер.ТекстОшибкиБанковскогоСчета(
				РезультатПроверкиСчета, ПризнакСчета);
			ОшибкиРасчетныхСчетов.Добавить(ТекстОшибкиСчетаПолучателя);
		КонецЕсли;
		
		ТекстОшибки = СтрСоединить(ОшибкиРасчетныхСчетов, "; ");
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			// Если других ошибок в документе не было, то очищаем описание ошибок
			Если ПлатежныйДокумент.Готовность = 0 Тогда
				ПлатежныйДокумент.ОписаниеОшибок = "";
			КонецЕсли;
			ДобавитьЗамечание(ПлатежныйДокумент, 4, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеДляПроверкиСчетовВЭкспортируемыхДокументах(ТаблицаПлатежныхДокументов)
	
	ДанныеДляПроверки = БанковскиеСчетаСервер.НовыеДанныеДляПроверкиСчетов();
	Для Каждого ПлатежныйДокумент Из ТаблицаПлатежныхДокументов Цикл
		СтрокаДанныхСчетОрганизации = ДанныеДляПроверки.Добавить();
		СтрокаДанныхСчетОрганизации.Счет = ПлатежныйДокумент.ОрганизацияСчет;
		СтрокаДанныхСчетОрганизации.ПроверяемаяДата = ПлатежныйДокумент.Дата;
		СтрокаДанныхСчетКонтрагента = ДанныеДляПроверки.Добавить();
		СтрокаДанныхСчетКонтрагента.Счет = ПлатежныйДокумент.КонтрагентСчет;
		СтрокаДанныхСчетКонтрагента.ПроверяемаяДата = ПлатежныйДокумент.Дата;
	КонецЦикла;
	
	Возврат ДанныеДляПроверки;
	
КонецФункции

#КонецОбласти

#Область ИмпортДокументов

Функция РаспознанныеДанныеБанковскойВыпискиИзФайла(СтруктураПараметров, НастройкиЗагрузки)
	
	Если СтруктураПараметров.Свойство("ДвоичныеДанные") Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		СтруктураПараметров.ДвоичныеДанные.Записать(ИмяФайла);
	Иначе
		ИмяФайла = СтруктураПараметров.ФайлЗагрузки;
	КонецЕсли;
	
	РаспознанныеДанныеИзБанка = ЗагрузкаВыпискиПоБанковскомуСчету.РаспознанныеДанныеИзБанка(
		ИмяФайла,
		НастройкиЗагрузки,
		СтруктураПараметров.СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	
	Если СтруктураПараметров.Свойство("ДвоичныеДанные") Тогда
		УдалитьФайлы(ИмяФайла); // Удалим временный файл, после его обработки.
	КонецЕсли;
	
	Возврат РаспознанныеДанныеИзБанка;
	
КонецФункции

Функция НовыйРезультатЗагрузки()
	
	РезультатЗагрузки = Новый Структура();
	РезультатЗагрузки.Вставить("РезультатВыполнения", "");
	РезультатЗагрузки.Вставить("РезультатСозданияДокументов", "");
	РезультатЗагрузки.Вставить("СообщенияПользователю", Новый Массив);
	РезультатЗагрузки.Вставить("СообщенияПользователюВФормеОбменСБанком", Новый Массив);
	
	Возврат РезультатЗагрузки;
	
КонецФункции

Функция ЗагрузитьБанковскиеВыписки(РаспознанныеДанныеИзБанка,
								   СоздаватьНенайденныеЭлементы,
								   ИгнорироватьПредупрежденияРаспознавания,
								   РежимИнтеграцииОграничиватьПериодВыписки = Ложь)
	
	РезультатЗагрузки = НовыйРезультатЗагрузки();
	
	Если РаспознанныеДанныеИзБанка = Неопределено Тогда
		РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиЧтенияФайла";
		Возврат РезультатЗагрузки;
	КонецЕсли;
	
	СообщенияОбОшибках = ОшибкиЧтенияФайла(РаспознанныеДанныеИзБанка.ПротоколЧтенияФайла);
	Если СообщенияОбОшибках.Количество() > 0 Тогда
		ДобавитьСообщения(РезультатЗагрузки.СообщенияПользователю, СообщенияОбОшибках);
		РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиЧтенияФайла";
		Возврат РезультатЗагрузки;
	КонецЕсли;
	
	Если НЕ ИгнорироватьПредупрежденияРаспознавания
		И ЕстьОшибкиРаспознавания(РаспознанныеДанныеИзБанка.РаспознанныеВыписки) Тогда
		РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиРаспознавания";
		Возврат РезультатЗагрузки;
	КонецЕсли;
	
	// Проверим разрешил ли пользователь автоматическое создание
	
	Если НужноСоздатьНовыеОбъекты(РаспознанныеДанныеИзБанка.УчастникиОпераций) Тогда
		Если СоздаватьНенайденныеЭлементы Тогда
			// Создадим ненайденные элементы
			ОшибкиСоздания = ИдентификацияУчастниковБанковскихОпераций.СоздатьНовыеОбъекты(
				РаспознанныеДанныеИзБанка.УчастникиОпераций, 
				РаспознанныеДанныеИзБанка.Настройки);
			
			Если (ОшибкиСоздания.Количество() > 0) Тогда
				Для Каждого ОшибкаСозданияКонтрагента Из ОшибкиСоздания Цикл
					РезультатЗагрузки.СообщенияПользователюВФормеОбменСБанком.Добавить(ОшибкаСозданияКонтрагента.ТекстИсключения);
				КонецЦикла;
				РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиСозданияКонтрагентов";
				Возврат РезультатЗагрузки;
			КонецЕсли;
		Иначе
			РезультатЗагрузки.РезультатВыполнения = "НеобходимоСоздатьКонтрагентов";
			Возврат РезультатЗагрузки;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаДокументыСозданныеПоВыписке = СоздатьДокументыПоВыписке(РаспознанныеДанныеИзБанка,
		РежимИнтеграцииОграничиватьПериодВыписки, РезультатЗагрузки.СообщенияПользователю);
	
	ЕстьОшибкиСозданияДокументов = (ТаблицаДокументыСозданныеПоВыписке.Найти(Ложь, "Успешно") <> Неопределено);
	Если ЕстьОшибкиСозданияДокументов Тогда
		РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиСозданияДокументов";
		Возврат РезультатЗагрузки;
	КонецЕсли;
	
	РезультатЗагрузки.РезультатСозданияДокументов = РезультатСозданияДокументов(ТаблицаДокументыСозданныеПоВыписке);
	РезультатЗагрузки.РезультатВыполнения = "УспешнаяЗагрузка";
	Возврат РезультатЗагрузки;
	
КонецФункции

Функция СоздатьДокументыПоВыписке(РаспознанныеДанныеИзБанка, РежимИнтеграцииОграничиватьПериодВыписки, СообщенияПользователю)
	
	// Создадим документы
	ТаблицаДокументыСозданныеПоВыписке = Новый ТаблицаЗначений;
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("Выписка");
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("Ссылка");
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("Успешно",        Новый ОписаниеТипов("Булево"));
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("СуммаПоступило", Новый ОписаниеТипов("Число"));
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("СуммаСписано",   Новый ОписаниеТипов("Число"));
	ДопустимыеОрганизации = ИнтерфейсыВзаимодействияБРОВызовСервера.ВсеОрганизации();
	
	РаспознанныеДанныеИзБанка.Вставить("СозданиеДокументов", Новый Соответствие);
	
	// Подготовим все выписки
	ОтборДокументовКСозданиюПоВсемВыпискам  = Новый Соответствие; // Ключ выписка, значение массив идентификаторов операции
	Для Каждого РаспознаннаяВыписка Из РаспознанныеДанныеИзБанка.РаспознанныеВыписки Цикл
		ОтборДокументовКСозданиюПоВсемВыпискам .Вставить(РаспознаннаяВыписка.Ключ, Новый Массив);
	КонецЦикла;
	
	СчетаВРежимеИнтеграции = Новый Массив;
	//Если РежимИнтеграцииОграничиватьПериодВыписки Тогда
	//	СчетаВРежимеИнтеграции = Справочники.НастройкиИнтеграцииСБанками.ВсеБанковскиеСчетаВРежимеИнтеграции();
	//КонецЕсли;
	
	Для Каждого Выписка Из РаспознанныеДанныеИзБанка.Выписки Цикл
		
		РаспознаннаяВыписка = РаспознанныеДанныеИзБанка.РаспознанныеВыписки[Выписка.Ключ];
		
		Если РаспознаннаяВыписка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Организация = РаспознаннаяВыписка.ВладелецСчета.Организация;
		Если ЗначениеЗаполнено(Организация) Тогда
			Если ДопустимыеОрганизации.Найти(Организация) = Неопределено Тогда
				СообщенияПользователю.Добавить(СтрШаблон(
					НСтр("ru = 'Недостаточно прав на создание документов по организации - %1'"),
					Организация));
				Продолжить;
			КонецЕсли;
			
			// Ограничиваем период загрузки документов только для выписок по счетам стороннего банка.
			// А корректность периода выписки по счетам интеграции должен контроллировать банк.
			ОтборДокументовКСозданиюПоВыписке = Неопределено;
			Если РежимИнтеграцииОграничиватьПериодВыписки
				И СчетаВРежимеИнтеграции.Количество() > 0
				И СчетаВРежимеИнтеграции.Найти(РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет) = Неопределено Тогда
				ГраницаПериодаВыписки = НачалоГода(ТекущаяДатаСеанса()) - 1;
				ОтборДокументовКСозданиюПоВыписке = ОтборДокументовКСозданиюПоВыписке(
					ГраницаПериодаВыписки, ОтборДокументовКСозданиюПоВсемВыпискам, Выписка);
			КонецЕсли;
		КонецЕсли;
		
		РезультатСозданияДокументов = ЗагрузкаВыпискиПоБанковскомуСчету.СоздатьДокументы(
			Выписка.Значение,
			РаспознаннаяВыписка,
			РаспознанныеДанныеИзБанка.Настройки,
			ОтборДокументовКСозданиюПоВыписке);
			
		РаспознанныеДанныеИзБанка.СозданиеДокументов.Вставить(Выписка.Ключ, РезультатСозданияДокументов);
		
		ДобавитьВДокументыСозданныеПоВыписке(ТаблицаДокументыСозданныеПоВыписке, РезультатСозданияДокументов, Выписка);
		
	КонецЦикла;
	
	Возврат ТаблицаДокументыСозданныеПоВыписке;
	
КонецФункции

Функция ОтборДокументовКСозданиюПоВыписке(ДатаОтбора, ОтборВсехДокументовКСозданию, ДанныеВыписки)
	
	Если Не ЗначениеЗаполнено(ДатаОтбора) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Массив;
	
	ИдентификаторВыписки = ДанныеВыписки.Ключ;
	Выписка = ДанныеВыписки.Значение;
	Для Каждого Операция Из Выписка.Операции Цикл
		Если Операция.ДатаИсполнения > ДатаОтбора Тогда
			Результат = ОтборВсехДокументовКСозданию[ИдентификаторВыписки];
			Если Результат <> Неопределено Тогда
				Результат.Добавить(Операция.Идентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОшибкиЧтенияФайла(ПротоколЧтенияФайла)
	
	СообщенияПользователю = Новый Массив;
	
	ЭлектроннаяВыписка = ПротоколЧтенияФайла.Найти("ЭлектроннаяВыписка") <> Неопределено;
	
	Если Не ЭлектроннаяВыписка И ПротоколЧтенияФайла.Найти("ФайлСодержитНачальныйТег") = Неопределено Тогда
		СообщенияПользователю.Добавить(
			НСтр("ru='В файле не найден обязательный идентификатор 1CClientBankExchange. Возможно, файл сохранен с неверной кодировкой. Файл должен быть в ANSI (CP-1251)'")); // Если файл в UTF-8, то тег на латинице прочитан не будет
	КонецЕсли;
	
	Если Не ЭлектроннаяВыписка И ПротоколЧтенияФайла.Найти("ФайлСодержитКонечныйТег") = Неопределено Тогда
		СообщенияПользователю.Добавить(
			НСтр("ru='В файле не найден обязательный идентификатор конца файла. Возможно, неверно указана кодировка файла.'"));
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции

Функция ЕстьОшибкиРаспознавания(РаспознанныеВыписки)
	
	Для Каждого КлючИЗначение Из РаспознанныеВыписки Цикл
		Выписка             = КлючИЗначение.Ключ;
		РаспознаннаяВыписка = КлючИЗначение.Значение;
		Если РаспознаннаяВыписка.Предупреждения.Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для Каждого Операция Из РаспознаннаяВыписка.Операции Цикл
			
			// Если есть предупреждение в строке
			Если Операция.Предупреждения <> Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			
			// Если не удалось распознать операцию
			ЕстьОшибкиРаспознавания = НЕ ЗначениеЗаполнено(Операция.Ссылка)
				И НЕ ЗначениеЗаполнено(Операция.ХозяйственнаяОперация)
				И НЕ ЗначениеЗаполнено(Операция.ПлатежноеПоручение);
			
			Если ЕстьОшибкиРаспознавания Тогда
				Возврат Истина;
			КонецЕсли;
			
			// Если есть не заполненные реквизиты
			Если Операция.ХозяйственнаяОперация <> Неопределено Тогда
				ХозяйственнаяОперация = Операция.ХозяйственнаяОперация;
				
				// Контрагент должен быть заполнен для конкретного вида операции
				ВидОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ХозяйственнаяОперация, "ВидОперацииДокумента");
				Если ВидОперации = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийРасходСоСчета") Тогда
					ТребуетсяКонтрагент = Документы.РасходСоСчета.КонтрагентДолженБытьЗаполнен(ВидОперации);
				Иначе
					ТребуетсяКонтрагент = Документы.ПоступлениеНаСчет.КонтрагентДолженБытьЗаполнен(ВидОперации);
				КонецЕсли;
				Если ТребуетсяКонтрагент
					И НЕ ХозяйственнаяОперация.Свойство("Контрагент")
					ИЛИ ХозяйственнаяОперация.Свойство("Контрагент") И НЕ ЗначениеЗаполнено(ХозяйственнаяОперация.Контрагент) Тогда
					Возврат Истина;
				КонецЕсли;
				
				// Банковский счет должен быть заполнен для конкретных видов операций.
				// Пустое свойство БанковскийСчетКонтрагента структуры ХозяйственнаяОперация также считаем ошибкой.
				Если (ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет
					ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета 
					ИЛИ ХозяйственнаяОперация.Свойство("БанковскийСчетКонтрагента")) 
					И НЕ ЗначениеЗаполнено(ХозяйственнаяОперация.БанковскийСчетКонтрагента) Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьВДокументыСозданныеПоВыписке(ТаблицаДокументыСозданныеПоВыписке, РезультатСозданияДокументов, Выписка)
	
	Для Каждого КлючИЗначение Из РезультатСозданияДокументов Цикл
		СтрокаОперации = Выписка.Значение.Операции.Найти(КлючИЗначение.Ключ, "Идентификатор");
		Если СтрокаОперации = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		СтрокаРезультат         = ТаблицаДокументыСозданныеПоВыписке.Добавить();
		СтрокаРезультат.Выписка = Выписка.Ключ;
		ЗаполнитьЗначенияСвойств(СтрокаРезультат, КлючИЗначение.Значение);
		Если СтрокаОперации.ПоступилоСписано = "Поступило" Тогда
			СтрокаРезультат.СуммаПоступило = СтрокаОперации.Сумма;
		Иначе
			СтрокаРезультат.СуммаСписано   = СтрокаОперации.Сумма;
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

Процедура ДополнитьРезультатЗагрузкиДаннымиВыписок(РезультатЗагрузки, РаспознанныеВыписки)
	
	// Соберем уникальные значения организаций, банковских счетов и валют
	Организации     = Новый Соответствие;
	БанковскиеСчета = Новый Соответствие; 
	ВалютыСчета     = Новый Соответствие;
	Для Каждого КлючИЗначение Из РаспознанныеВыписки Цикл
		РаспознаннаяВыписка = КлючИЗначение.Значение;
		Если НЕ ЗначениеЗаполнено(РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет) Тогда
			Продолжить;
		КонецЕсли;
		Организации.Вставить(РаспознаннаяВыписка.ВладелецСчета.Организация, Истина);
		БанковскиеСчета.Вставить(РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет, Истина);
		ВалютыСчета.Вставить(РаспознаннаяВыписка.ВладелецСчета.ВалютаСчета, Истина);
	КонецЦикла;
	
	// Если Организация одна, передадим её в качестве отбора
	Если Организации.Количество() = 1 Тогда
		Для Каждого КлючИЗначение Из Организации Цикл
			РезультатЗагрузки.Вставить("Организация", КлючИЗначение.Ключ);
		КонецЦикла;
	// Если несколько, то очистим отбор
	ИначеЕсли Организации.Количество() > 1 Тогда
		РезультатЗагрузки.Вставить("Организация", Неопределено);
	КонецЕсли;
	
	Если БанковскиеСчета.Количество() = 1 Тогда
		Для Каждого КлючИЗначение Из БанковскиеСчета Цикл
			РезультатЗагрузки.Вставить("БанковскийСчет", КлючИЗначение.Ключ);
		КонецЦикла;
	ИначеЕсли БанковскиеСчета.Количество() > 1 Тогда
		РезультатЗагрузки.Вставить("БанковскийСчет", Неопределено);
	КонецЕсли;
	
	Если ВалютыСчета.Количество() = 1 Тогда
		Для Каждого КлючИЗначение Из ВалютыСчета Цикл
			РезультатЗагрузки.Вставить("ВалютаСчета", КлючИЗначение.Ключ);
		КонецЦикла;
	ИначеЕсли ВалютыСчета.Количество() > 1 Тогда
		РезультатЗагрузки.Вставить("ВалютаСчета", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатСозданияДокументов(ТаблицаДокументыСозданныеПоВыписке)
	
	РезультатСозданияДокументов = Новый Структура;
	СозданныеДокументы = ТаблицаДокументыСозданныеПоВыписке.Скопировать(Новый Структура("Успешно", Истина));
	Если СозданныеДокументы.Количество() > 0 Тогда
		СозданныеДокументы.Сортировать("Ссылка");
		РезультатСозданияДокументов.Вставить("КоличествоЗагружено", СозданныеДокументы.Количество());
		РезультатСозданияДокументов.Вставить("СуммаПоступило",      СозданныеДокументы.Итог("СуммаПоступило"));
		РезультатСозданияДокументов.Вставить("СуммаСписано",        СозданныеДокументы.Итог("СуммаСписано"));
		РезультатСозданияДокументов.Вставить("ПервыйЗагруженный",   СозданныеДокументы[0].Ссылка);
	КонецЕсли;
	
	Возврат РезультатСозданияДокументов;
	
КонецФункции

Функция СсылкиНаСозданныеОбъекты(СсылкиКСозданию, ОшибкиСоздания)
	
	МассивОшибок = ОшибкиСоздания.ВыгрузитьКолонку("Ссылка");
	СсылкиНаСозданныеОбъекты = Новый Массив;
	Для Каждого КлючИЗначение Из СсылкиКСозданию Цикл
		Для Каждого Ссылка Из СсылкиКСозданию[КлючИЗначение.Ключ] Цикл
			Если МассивОшибок.Найти(Ссылка.Ключ) = Неопределено Тогда
				СсылкиНаСозданныеОбъекты.Добавить(Ссылка.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СсылкиНаСозданныеОбъекты;
	
КонецФункции

Функция НужноСоздатьНовыеОбъекты(УчастникиОперации)
	
	НужноСоздатьНовыеОбъекты = Ложь;
	Для Каждого КлючИЗначение Из УчастникиОперации.НовыеОбъекты Цикл
		Если КлючИЗначение.Значение.Количество() > 0 Тогда
			НужноСоздатьНовыеОбъекты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НужноСоздатьНовыеОбъекты;
	
КонецФункции

Процедура ДобавитьСообщения(МассивСообщений, ДобавляемыеСообщения)
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСообщений, ДобавляемыеСообщения);
	
КонецПроцедуры

Функция СоздаватьНенайденныеЭлементы(РаспознанныеВыписки)
	
	СоздаватьНенайденныеЭлементы = Истина;
	
	Для Каждого КлючИЗначение Из РаспознанныеВыписки Цикл
		
		РаспознаннаяВыписка = КлючИЗначение.Значение;
		ВладелецСчета = РаспознаннаяВыписка.ВладелецСчета;
		
		Если НЕ ЗначениеЗаполнено(ВладелецСчета.Организация)
			ИЛИ НЕ ЗначениеЗаполнено(ВладелецСчета.БанковскийСчет) Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкиСчета = ПолучитьНастройкиПрограммыКлиентаБанка(
			ВладелецСчета.Организация, ВладелецСчета.БанковскийСчет);
		
		Если НЕ НастройкиСчета.СоздаватьНенайденныеЭлементы Тогда
			СоздаватьНенайденныеЭлементы = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоздаватьНенайденныеЭлементы;
	
КонецФункции

Функция ПередЗагрузкойПоказыватьФормуОбменаСБанком(РаспознанныеВыписки)
	
	ПередЗагрузкойПоказыватьФормуОбменаСБанком = Ложь;
	
	Для Каждого КлючИЗначение Из РаспознанныеВыписки Цикл
		
		РаспознаннаяВыписка = КлючИЗначение.Значение;
		ВладелецСчета = РаспознаннаяВыписка.ВладелецСчета;
		
		Если НЕ ЗначениеЗаполнено(ВладелецСчета.Организация)
			ИЛИ НЕ ЗначениеЗаполнено(ВладелецСчета.БанковскийСчет) Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкиСчета = ПолучитьНастройкиПрограммыКлиентаБанка(
			ВладелецСчета.Организация, ВладелецСчета.БанковскийСчет);
		
		Банк = Неопределено;
		Если ЗначениеЗаполнено(ВладелецСчета.БанковскийСчет) Тогда
			Банк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецСчета.БанковскийСчет, "Банк");
		КонецЕсли;
		
		НастройкиАвтозагрузкиДиректБанк =
			ЭлектронноеВзаимодействиеБПВызовСервера.НастройкиОбменаАвтоматическоеПолучениеВыписки(
				ВладелецСчета.Организация, Банк);
		АвтоматическоеПолучениеВыпискиАктивно = НастройкиАвтозагрузкиДиректБанк.Количество() <> 0;
		Если НастройкиСчета.ПередЗагрузкойПоказыватьФормуОбменаСБанком И Не АвтоматическоеПолучениеВыпискиАктивно Тогда
			ПередЗагрузкойПоказыватьФормуОбменаСБанком = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПередЗагрузкойПоказыватьФормуОбменаСБанком;
	
КонецФункции

#Область ИмпортДокументовИзЖурнала

Функция ПодготовитьРезультатЗагрузкиИзЖурнала(РезультатЗагрузки, РаспознанныеДанныеИзБанка, СтруктураПараметров, АдресХранилища)
	
	РезультатЗагрузкиИзЖурнала = Новый Структура;
	
	Если СтруктураПараметров.Свойство("ФайлЗагрузки") Тогда
		РезультатЗагрузкиИзЖурнала.Вставить("ИмяФайла", СтруктураПараметров.ФайлЗагрузки);
	ИначеЕсли СтруктураПараметров.Свойство("ВыпискаБанка") Тогда
		АдресВыписки = ПоместитьВоВременноеХранилище(СтруктураПараметров.ВыпискаБанка, Новый УникальныйИдентификатор());
		РезультатЗагрузкиИзЖурнала.Вставить("АдресВыписки", АдресВыписки);
	КонецЕсли;
	
	РезультатЗагрузкиИзЖурнала.Вставить("РезультатВыполнения",
		РезультатЗагрузки.РезультатВыполнения);
	РезультатЗагрузкиИзЖурнала.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка", ПоместитьВоВременноеХранилище(
		РаспознанныеДанныеИзБанка, СтруктураПараметров.АдресХранилищаРаспознанныеДанныеИзБанка));
	РезультатЗагрузкиИзЖурнала.Вставить("СообщенияПользователю",
		РезультатЗагрузки.СообщенияПользователю);
	РезультатЗагрузкиИзЖурнала.Вставить("СообщенияПользователюВФормеОбменСБанком",
		РезультатЗагрузки.СообщенияПользователюВФормеОбменСБанком);
	Если ЗначениеЗаполнено(РезультатЗагрузки.РезультатСозданияДокументов) Тогда
		РезультатЗагрузкиИзЖурнала.Вставить("РезультатСозданияДокументов",
			РезультатЗагрузки.РезультатСозданияДокументов);
	КонецЕсли;
	
	ДополнитьРезультатЗагрузкиДаннымиВыписок(РезультатЗагрузкиИзЖурнала, РаспознанныеДанныеИзБанка.РаспознанныеВыписки);
	
	Возврат РезультатЗагрузкиИзЖурнала;
	
КонецФункции

#КонецОбласти

#Область ИмпортДокументовИзСервиса

Функция ПараметрыДляЗагрузкиВыпискиДляСервиса(ПотокДанныхФайлаВыписки) Экспорт
	
	БуферДвоичныхДаннныхФайлаВыписки = Новый БуферДвоичныхДанных(ПотокДанныхФайлаВыписки.Размер());
	ПотокДанныхФайлаВыписки.Прочитать(БуферДвоичныхДаннныхФайлаВыписки, 0, ПотокДанныхФайлаВыписки.Размер());
	ДвоичныеДанныеВыписки = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(БуферДвоичныхДаннныхФайлаВыписки);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СведенияОВладельцеБанковскогоСчетаИзКонтекста", Неопределено);
	СтруктураПараметров.Вставить("ДвоичныеДанные", ДвоичныеДанныеВыписки);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция НастройкиЗагрузкиДляСервиса()
	
	Настройки = ЗагрузкаВыпискиПоБанковскомуСчету.НовыйНастройкиОбменСБанком();
	Возврат Настройки;
	
КонецФункции

Функция ПредупрежденияПриЗагрузкеВыписки(РаспознанныеДанныеИзБанка)
	
	РегистрПредупрежденияПриЗагрузкеВыписки = Метаданные.РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки;
	
	Предупреждения = Новый ТаблицаЗначений;
	Предупреждения.Колонки.Добавить("Документ", РегистрПредупрежденияПриЗагрузкеВыписки.Измерения.Документ.Тип);
	Предупреждения.Колонки.Добавить("Организация", РегистрПредупрежденияПриЗагрузкеВыписки.Измерения.Организация.Тип);
	Предупреждения.Колонки.Добавить("СтрокаВыписки");
	Предупреждения.Колонки.Добавить("ТекстСообщенияПользователю", РегистрПредупрежденияПриЗагрузкеВыписки.Ресурсы.ТекстСообщенияПользователю.Тип);
	Предупреждения.Колонки.Добавить("ТекстСообщенияДляОписанияОшибок", РегистрПредупрежденияПриЗагрузкеВыписки.Ресурсы.ТекстСообщенияПользователю.Тип);
	Предупреждения.Индексы.Добавить("Документ");
	
	Для Каждого РаспознаннаяВыписка Из РаспознанныеДанныеИзБанка.РаспознанныеВыписки Цикл
		
		ИдентификаторВыписки = РаспознаннаяВыписка.Ключ;
		
		РаспознанныеОперации = РаспознаннаяВыписка.Значение.Операции;
		Организация = РаспознаннаяВыписка.Значение.ВладелецСчета.Организация;
		Выписка = РаспознанныеДанныеИзБанка.Выписки.Получить(ИдентификаторВыписки);
		ИдентификаторыУчастников = РаспознанныеДанныеИзБанка.УчастникиОпераций.Идентификаторы;
		
		// Записываем предупреждения, которые возникли при распознавании операций.
		Для Каждого РаспознаннаяОперация Из РаспознанныеОперации Цикл
			
			Если ЗначениеЗаполнено(РаспознаннаяОперация.Предупреждения)
				И ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка)
				И ОбщегоНазначения.СсылкаСуществует(РаспознаннаяОперация.Ссылка) Тогда
				
				Операция = Выписка.Операции.Найти(РаспознаннаяОперация.Идентификатор, "Идентификатор");
				
				// Текст предупреждения в регистре не сохраняем, т.к. он будет получен при открытии документа
				// из сохраненных распознанных данных из банка.
				// Текст предупреждения сохраняется в отдельном поле ТекстСообщенияДляОписанияОшибок 
				// для формирования ответа сервису.
				Предупреждение = ПредупреждениеПриЗагрузкеДляДокумента(РаспознаннаяОперация.Ссылка, Предупреждения);
				Предупреждение.Организация = Организация;
				Предупреждение.СтрокаВыписки = СтрокаВыпискиДляОперации(ИдентификаторВыписки, Операция, ИдентификаторыУчастников);
				Предупреждение.ТекстСообщенияПользователю = "";
				Предупреждение.ТекстСообщенияДляОписанияОшибок = СтрСоединить(РаспознаннаяОперация.Предупреждения.ВыгрузитьКолонку("Текст"), Символы.ПС);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Записываем предупреждения, которые возникли при проведении документов.
		Если РаспознанныеДанныеИзБанка.Свойство("СозданиеДокументов") Тогда
			СозданиеДокументовВыписки = РаспознанныеДанныеИзБанка.СозданиеДокументов.Получить(ИдентификаторВыписки);
			Для Каждого СозданиеДокументаВыписки Из СозданиеДокументовВыписки Цикл
				
				РезультатСозданияДокумента = СозданиеДокументаВыписки.Значение;
				
				// Если документ загружен, но не успешно, то нужно сохранить это предупреждение
				// в регистр для того, что бы потом показать пользователю.
				// Если же не получилось создать документ - то для таких записей предупреждение не сохраняем,
				// т.к. сообщение об этом будет отправлено в сервис как ошибка.
				Если НЕ РезультатСозданияДокумента.Успешно
					И ЗначениеЗаполнено(РезультатСозданияДокумента.Ссылка)
					И ОбщегоНазначения.СсылкаСуществует(РезультатСозданияДокумента.Ссылка) Тогда
					
					Операция = Выписка.Операции.Найти(СозданиеДокументаВыписки.Ключ, "Идентификатор");
					
					Предупреждение = ПредупреждениеПриЗагрузкеДляДокумента(РезультатСозданияДокумента.Ссылка, Предупреждения);
					Предупреждение.Организация = Организация;
					Предупреждение.СтрокаВыписки = СтрокаВыпискиДляОперации(ИдентификаторВыписки, Операция, ИдентификаторыУчастников);
					Предупреждение.ТекстСообщенияПользователю = РезультатСозданияДокумента.КраткоеПредставлениеОшибки;
					Предупреждение.ТекстСообщенияДляОписанияОшибок = РезультатСозданияДокумента.КраткоеПредставлениеОшибки;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Предупреждения;
	
КонецФункции

Функция ПредупреждениеПриЗагрузкеДляДокумента(Документ, Предупреждения)
	
	СтрокиПредупрежденийДокумента = Предупреждения.НайтиСтроки(Новый Структура("Документ", Документ));
	Если СтрокиПредупрежденийДокумента.Количество() = 0 Тогда
		ПредупреждениеДокумента = Предупреждения.Добавить();
		ПредупреждениеДокумента.Документ = Документ;
		Возврат ПредупреждениеДокумента;
	Иначе
		Возврат СтрокиПредупрежденийДокумента[0];
	КонецЕсли;
	
КонецФункции

Процедура СохранитьПредупрежденияПриЗагрузкеВыписки(Предупреждения)
	
	Для Каждого Предупреждение Из Предупреждения Цикл
		
		НаборЗаписей = РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Предупреждение.Документ);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Документ = Предупреждение.Документ;
		Запись.Организация = Предупреждение.Организация;
		Запись.СтрокаВыписки = Новый ХранилищеЗначения(Предупреждение.СтрокаВыписки);
		Запись.ТекстСообщенияПользователю = Предупреждение.ТекстСообщенияПользователю;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокаВыпискиДляОперации(ИдентификаторВыписки, Операция, ИдентификаторыУчастников)
	
	ИдентификаторыУчастниковОперации = ИдентификаторыУчастниковОперации(Операция, ИдентификаторыУчастников);
	
	СтрокаВыписки = Новый Структура();
	СтрокаВыписки.Вставить("ИдентификаторВыписки", ИдентификаторВыписки);
	СтрокаВыписки.Вставить("Операция", ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Операция));
	СтрокаВыписки.Вставить("ИдентификаторыУчастников", ИдентификаторыУчастниковОперации);
	
	Возврат СтрокаВыписки;
	
КонецФункции

Функция ИдентификаторыУчастниковОперации(Операция, ИдентификаторыУчастников)
	
	Идентификаторы = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Идентификаторы, Операция.ПлательщикИдентификаторы, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Идентификаторы, Операция.ПолучательИдентификаторы, Истина);
	
	ИспользуемыеИдентификаторыУчастников = ИдентификаторыУчастников.СкопироватьКолонки();
	Для Каждого Идентификатор Из Идентификаторы Цикл
		ИдентификаторУчастника = ИдентификаторыУчастников.Найти(Идентификатор, "Идентификатор");
		Если ИдентификаторУчастника <> Неопределено Тогда
			ИспользуемыйИдентификаторУчастника = ИспользуемыеИдентификаторыУчастников.Добавить();
			ЗаполнитьЗначенияСвойств(ИспользуемыйИдентификаторУчастника, ИдентификаторУчастника);
			// Ссылки сохранять не требуется, они будут распознаны еще раз
			// при исправлении ошибки пользователем.
			ИспользуемыйИдентификаторУчастника.Ссылки = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИспользуемыеИдентификаторыУчастников;
	
КонецФункции

Функция РезультатВыполненияЗагрузкиДляСервиса(РезультатЗагрузки, РаспознанныеДанныеИзБанка, ПредупрежденияПриЗагрузкеВыписки)
	
	Результат = Новый Структура();
	Результат.Вставить("КодВозврата", ИнтеграцияОбъектовОбластейДанныхСловарь.КодВозвратаВыполнено());
	Результат.Вставить("ОписаниеОшибки", "");
	
	Если РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиЧтенияФайла" Тогда
		Результат.КодВозврата = ИнтеграцияОбъектовОбластейДанныхСловарь.КодВозвратаОшибкаДанных();
		Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный формат файла:
			|%1'"),
			СтрСоединить(РезультатЗагрузки.СообщенияПользователю, Символы.ПС));
		ЗаписьЖурналаРегистрации(ИнтеграцияСБанкамиКлиентСервер.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.КлиентБанк, , Результат.ОписаниеОшибки);
		Возврат Результат;
	ИначеЕсли РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиСозданияКонтрагентов" Тогда
		Результат.КодВозврата = ИнтеграцияОбъектовОбластейДанныхСловарь.КодВозвратаОшибкаДанных();
		Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при создании контрагентов:
			|%1'"),
			СтрСоединить(РезультатЗагрузки.СообщенияПользователю, Символы.ПС));
		ЗаписьЖурналаРегистрации(ИнтеграцияСБанкамиКлиентСервер.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.КлиентБанк, , Результат.ОписаниеОшибки);
		Возврат Результат;
	ИначеЕсли РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиСозданияДокументов" Тогда
		// Проверим, что все документы созданы.
		// Если не создан хотя бы один из них - необходимо сообщить о том, что выписка не загрузилась.
		Для Каждого СозданиеДокументовВыписки Из РаспознанныеДанныеИзБанка.СозданиеДокументов Цикл
			Для Каждого РезультатСозданияДокумента Из СозданиеДокументовВыписки.Значение Цикл
				Если НЕ ЗначениеЗаполнено(РезультатСозданияДокумента.Значение.Ссылка)
					ИЛИ НЕ ОбщегоНазначения.СсылкаСуществует(РезультатСозданияДокумента.Значение.Ссылка) Тогда
					Результат.КодВозврата = ИнтеграцияОбъектовОбластейДанныхСловарь.КодВозвратаОшибкаДанных();
					Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не все документы созданы:
						|%1'"),
						СтрСоединить(РезультатЗагрузки.СообщенияПользователю, Символы.ПС));
					ЗаписьЖурналаРегистрации(ИнтеграцияСБанкамиКлиентСервер.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
						Метаданные.Обработки.КлиентБанк, , Результат.ОписаниеОшибки);
					Возврат Результат;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ПредупрежденияЗагрузкиВыписок = ПредупрежденияЗагрузкиВыписок(РаспознанныеДанныеИзБанка, ПредупрежденияПриЗагрузкеВыписки);
	
	Если ЗначениеЗаполнено(ПредупрежденияЗагрузкиВыписок) Тогда
		Результат.КодВозврата = ИнтеграцияОбъектовВСервисеБП.КодСостоянияВыполненоСПредупреждениями();
		Результат.ОписаниеОшибки = ПредупрежденияЗагрузкиВыписок;
		ЗаписьЖурналаРегистрации(ИнтеграцияСБанкамиКлиентСервер.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Обработки.КлиентБанк, , Результат.ОписаниеОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредупрежденияЗагрузкиВыписок(РаспознанныеДанныеИзБанка, ПредупрежденияПриЗагрузкеВыписки)
	
	ТекстыПредупрежденийПриЗагрузкеВыписки = Новый Массив;
	Для Каждого РаспознаннаяВыписка Из РаспознанныеДанныеИзБанка.РаспознанныеВыписки Цикл
		Если РаспознаннаяВыписка.Значение.Предупреждения.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТекстыПредупрежденийПриЗагрузкеВыписки,
				РаспознаннаяВыписка.Значение.Предупреждения.ВыгрузитьКолонку("Текст"));
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТекстыПредупрежденийПриЗагрузкеВыписки,
		ПредупрежденияПриЗагрузкеВыписки.ВыгрузитьКолонку("ТекстСообщенияДляОписанияОшибок"));
	
	Если ТекстыПредупрежденийПриЗагрузкеВыписки.Количество() > 0 Тогда
		Возврат СтрСоединить(ТекстыПредупрежденийПриЗагрузкеВыписки, Символы.ПС);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ЗапланироватьАктуализациюПослеЗагрузкиВыпискиИзСервиса(РаспознанныеДанныеИзБанка)
	
	ОрганизацииВыписки = Новый Массив;
	
	Для Каждого РаспознаннаяВыписка Из РаспознанныеДанныеИзБанка.РаспознанныеВыписки Цикл
		
		Организация = РаспознаннаяВыписка.Значение.ВладелецСчета.Организация;
		
		Если ЗначениеЗаполнено(Организация) И ОрганизацииВыписки.Найти(Организация) = Неопределено Тогда
			ОрганизацииВыписки.Добавить(Организация);
		КонецЕсли;
		
	КонецЦикла;
	
	//ИнтеграцияСБанками.ЗапланироватьАктуализациюУчетаПоОрганизациям(ОрганизацииВыписки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроцедурыИФункцииПомощникаСозданияСправочников

Процедура СоздатьКонтрагентаСчетДоговор(СтрокаСекции, ДанныеОбъекта, ТаблицаОбъектовСозданныхПриЗагрузке) Экспорт
		
	// Заполняем все реквизиты документа.
	Если НЕ (СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета
			ИЛИ СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет
			ИЛИ СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными
			ИЛИ СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных)
		Тогда
		
		// Создадим контрагента, р/счет и договор, если это необходимо.
		Если (ТипЗнч(СтрокаСекции.Контрагент) = Тип("Строка")) И 
			((СтрокаСекции.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаСекции.ДействиеСКонтрагентом)) Тогда
			
			СтруктураКонтрагентИРСчет = СоздатьНовогоКонтрагентаПриЗагрузке(ТаблицаОбъектовСозданныхПриЗагрузке, СтрокаСекции, ДанныеОбъекта);
			Если ЗначениеЗаполнено(СтруктураКонтрагентИРСчет) И ЗначениеЗаполнено(СтруктураКонтрагентИРСчет.Контрагент) Тогда
				СтрокаСекции.Контрагент = СтруктураКонтрагентИРСчет.Контрагент;
				СтрокаСекции.Договор = СтруктураКонтрагентИРСчет.Договор;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураКонтрагентИРСчет = Новый Структура();
		
		// Если контрагент известен, то создадим расчетный счет и договор, если это необходимо.
		Если ТипЗнч(СтрокаСекции.Контрагент) = Тип("СправочникСсылка.Контрагенты") И НЕ СтрокаСекции.Контрагент.Пустая() Тогда
			
			// Создадим р/счет.
			Если //ТипЗнч(СтрокаСекции.СчетКонтрагента) = Тип("Строка") И
				(СтрокаСекции.ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С 
				ИЛИ (НЕ ЗначениеЗаполнено(СтрокаСекции.ДействиеСоСчетомКонтрагента) И ТипЗнч(СтрокаСекции.СчетКонтрагента) = Тип("Строка"))) Тогда
				
				СтруктураДанных = ПолучитьСтруктуруДанныхРасчетногоСчета(СтрокаСекции, ДанныеОбъекта);
				
				СтруктураПоиска = Новый Структура("КонтрагентСсылка, СчетКонтрагента", СтрокаСекции.Контрагент, СтруктураДанных.Счет);
				МассивСтрок = ТаблицаОбъектовСозданныхПриЗагрузке.НайтиСтроки(СтруктураПоиска);
				
				Если МассивСтрок.Количество() > 0 Тогда // Нашли ранее созданный счет контрагента.
					
					Для каждого СтрокаМассива Из МассивСтрок Цикл
						Если НЕ СтрокаМассива.ДоговорСсылка.Пустая() И СтруктураКонтрагентИРСчет.Свойство("СчетКонтрагента") Тогда
							СтрокаСекции.СчетКонтрагента = СтруктураКонтрагентИРСчет.СчетКонтрагента;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					
					СтруктураДанных.Вставить("СоздаватьРСчет", Истина);
					СтруктураДанных.Вставить("Контрагент", СтрокаСекции.Контрагент);
					
					СчетКонтрагента = СоздатьРасчетныйСчетПоСтруктуреДанных(СтруктураДанных);
					Если ЗначениеЗаполнено(СчетКонтрагента) Тогда
						СтрокаСекции.СчетКонтрагента = СчетКонтрагента;
						
						НоваяСтрока = ТаблицаОбъектовСозданныхПриЗагрузке.Добавить();
						НоваяСтрока.КонтрагентСсылка = СтрокаСекции.Контрагент;
						НоваяСтрока.СчетКонтрагентаСсылка = СчетКонтрагента;
						НоваяСтрока.СчетКонтрагента = СтруктураДанных.Счет;
						НоваяСтрока.ТипСтроки = 3;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			// Создадим договор.
			// Договор нужно будет создавать только в случае, когда у контрагента нет не помеченного на удаление основного договора.
			// Созданный договор нужно будет сохранить в таблице созданных элементов и искать его в будущем.
			Если СтрокаСекции.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам 
				И (СтрокаСекции.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаСекции.ДействиеСДоговором))
				И ТипЗнч(СтрокаСекции.Договор) = Тип("Строка") Тогда
				
				СтруктураПоиска = Новый Структура("КонтрагентСсылка, Договор", СтрокаСекции.Контрагент, СтрокаСекции.Договор);
				МассивСтрок = ТаблицаОбъектовСозданныхПриЗагрузке.НайтиСтроки(СтруктураПоиска);
				
				Если МассивСтрок.Количество() > 0 Тогда // Нашли ранее созданный договор по умолчанию.
					
					Для каждого СтрокаМассива Из МассивСтрок Цикл
						Если НЕ СтрокаМассива.ДоговорСсылка.Пустая() Тогда
							СтрокаСекции.Договор = СтрокаМассива.ДоговорСсылка;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
				
					СтруктураДанных = Новый Структура;
					СтруктураДанных.Вставить("Контрагент", СтрокаСекции.Контрагент);
					ДополнитьСтруктуруДаннымиДоговора(СтруктураДанных);
					
					Договор = Обработки.КлиентБанк.СоздатьДоговорПоСтруктуреДанных(СтруктураДанных);
					Если ЗначениеЗаполнено(Договор) Тогда
						СтрокаСекции.Договор = Договор;
						
						НоваяСтрока = ТаблицаОбъектовСозданныхПриЗагрузке.Добавить();
						НоваяСтрока.КонтрагентСсылка = СтрокаСекции.Контрагент;
						НоваяСтрока.ДоговорСсылка = Договор;
						НоваяСтрока.ТипСтроки = 2;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьСтруктуруТаблицыОбъектовСозданныхПриЗагрузке() Экспорт
	
	ТаблицаОбъектовСозданныхПриЗагрузке = Новый ТаблицаЗначений;
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("ТипСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("СчетКонтрагента", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("Договор", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("СчетКонтрагентаСсылка", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("КонтрагентСсылка", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("ДоговорСсылка", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Возврат ТаблицаОбъектовСозданныхПриЗагрузке;
	
КонецФункции

Функция СоздатьНовогоКонтрагентаПриЗагрузке(ТаблицаОбъектовСозданныхПриЗагрузке, ДанныеСтроки, ДанныеОбъекта)
	
	ИНН = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательИНН, ДанныеСтроки.ПлательщикИНН);
	КПП = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательКПП, ДанныеСтроки.ПлательщикКПП);
	Если ДанныеСтроки.Исходящий Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.Получатель1) Тогда
			Наименование = ДанныеСтроки.Получатель1;
		Иначе
			Наименование = ДанныеСтроки.Получатель;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДанныеСтроки.Плательщик1) Тогда
			Наименование = ДанныеСтроки.Плательщик1;
		Иначе
			Наименование = ДанныеСтроки.Плательщик;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ТипСтроки, ИНН, КПП, Наименование", 1, ИНН, КПП, Наименование);
	МассивСтрок = ТаблицаОбъектовСозданныхПриЗагрузке.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		
		НайденнаяСтрока = МассивСтрок[0];
		
		СтруктураВозвращаемоеЗначение = Новый Структура;
		СтруктураВозвращаемоеЗначение.Вставить("Контрагент", НайденнаяСтрока.КонтрагентСсылка);
		СтруктураВозвращаемоеЗначение.Вставить("Договор", НайденнаяСтрока.ДоговорСсылка);
		СтруктураВозвращаемоеЗначение.Вставить("СчетКонтрагента", НайденнаяСтрока.СчетКонтрагентаСсылка);
		
		Возврат СтруктураВозвращаемоеЗначение;
		
	Иначе
	
		СтруктураДанных = Новый Структура;
		
		ВидКонтрагента = ?(СтрДлина(СокрЛП(ИНН)) = 12, Перечисления.ВидыКонтрагентов.ФизическоеЛицо, Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
		
		СтруктураДанных = ПолучитьСтруктуруДанныхРасчетногоСчета(ДанныеСтроки, ДанныеОбъекта);
		ДополнитьСтруктуруДаннымиДоговора(СтруктураДанных);
		
		СтруктураДанных.Вставить("СоздаватьРСчет", Истина);
		СтруктураДанных.Вставить("НаименованиеПолное", СокрЛП(Наименование));
		СтруктураДанных.Вставить("Наименование", ПолучитьНаименованиеКонтрагентаПоПолномуНаименованию(СокрЛП(Наименование)));
		СтруктураДанных.Вставить("ИНН", ИНН);
		СтруктураДанных.Вставить("КПП", КПП);
		СтруктураДанных.Вставить("ВидКонтрагента", ВидКонтрагента);
		СтруктураДанных.Вставить("Родитель", ""); //Родитель);
		СтруктураДанных.Вставить("Организация", ДанныеОбъекта.Организация);
		
		Если ДанныеСтроки.ЭтоФизическоеЛицо Тогда
			СтруктураДанных.Вставить("ВидКонтрагента", Перечисления.ВидыКонтрагентов.ФизическоеЛицо);
		КонецЕсли;
		
		Если Константы.ОграничиватьДоступНаУровнеЗаписей.Получить() Тогда
			СтруктураДанных.Вставить("ГруппаДоступа",
				УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					Пользователи.ТекущийПользователь(), "ОсновнаяГруппаДоступаКонтрагентов"));
		КонецЕсли;
		
		ВидОперации = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ВидОперацииСписание, ДанныеСтроки.ВидОперацииПоступление);
		Обработки.КлиентБанк.ДобавитьИнформациюОбОтношенияхСКонтрагентомПоВидуОперации(СтруктураДанных, ВидОперации);
		
		КонтрагентСоздан = Обработки.КлиентБанк.СоздатьКонтрагентаПоСтруктуреДанных(СтруктураДанных);
		
		Если КонтрагентСоздан Тогда
			СтруктураВозвращаемоеЗначение = Новый Структура;
			СтруктураВозвращаемоеЗначение.Вставить("Контрагент", СтруктураДанных.Контрагент);
			СтруктураВозвращаемоеЗначение.Вставить("Договор", СтруктураДанных.Договор);
			СтруктураВозвращаемоеЗначение.Вставить("СчетКонтрагента", СтруктураДанных.БанковскийСчетПоУмолчанию);
			
			НоваяСтрока = ТаблицаОбъектовСозданныхПриЗагрузке.Добавить();
			
			НоваяСтрока.ТипСтроки = 1;
			НоваяСтрока.Наименование = Наименование;
			НоваяСтрока.ИНН = ИНН;
			НоваяСтрока.КПП = КПП;
			НоваяСтрока.КонтрагентСсылка = СтруктураДанных.Контрагент;
			НоваяСтрока.ДоговорСсылка = СтруктураДанных.Договор;
			НоваяСтрока.СчетКонтрагентаСсылка = СтруктураДанных.БанковскийСчетПоУмолчанию;
			НоваяСтрока.СчетКонтрагента = СтруктураДанных.Счет;
			НоваяСтрока.Договор = СтруктураДанных.Договор;
			
			Возврат СтруктураВозвращаемоеЗначение;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Функция переставляет форму собственности в конец и убирает кавычки
Функция ПолучитьНаименованиеКонтрагентаПоПолномуНаименованию(пНаименованиеПолное)
	
	КлассификаторОПФ = РегламентированныеДанныеПовтИсп.КлассификаторОрганизационноПравовыхФорм();
	ОрганизационноПравоваяФорма = УправлениеНебольшойФирмойКлиентСервер.ВыделитьИзНаименованияОПФ(КлассификаторОПФ, пНаименованиеПолное);
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ОрганизационноПравоваяФорма.НаименованиеБезОПФ);
	
	Если НЕ ПустаяСтрока(ОрганизационноПравоваяФорма.КраткаяФорма) Тогда
		СписокВыбора.Вставить(0, ОрганизационноПравоваяФорма.НаименованиеБезОПФ + " " + ОрганизационноПравоваяФорма.КраткаяФорма);
		СписокВыбора.Добавить(ОрганизационноПравоваяФорма.КраткаяФорма + " " + ОрганизационноПравоваяФорма.НаименованиеБезОПФ);
	КонецЕсли;
	
	Если СписокВыбора.Количество() > 0 И ЗначениеЗаполнено(СписокВыбора[0].Значение) Тогда
		Возврат СписокВыбора[0].Значение;
	Иначе
		Возврат пНаименованиеПолное;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхРасчетногоСчета(СтрокаДокумента, ДанныеОбъекта)
	
	СтруктураДанныхСтроки = Новый Структура;
	
	НайденКонтрагент = ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка");
	НайденСчет       = ТипЗнч(СтрокаДокумента.СчетКонтрагента) <> Тип("Строка");
	
	ТипКонтрагента = ?(СтрокаДокумента.ПлательщикСчет = СокрЛП(ДанныеОбъекта.БанковскийСчет.НомерСчета), "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	
	СтруктураДанныхСтроки.Вставить("СЧЕТ", СтрокаДокумента[ТипКонтрагента + "СЧЕТ"]);
	
	ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ТипКонтрагента + "2"]);
	СтруктураДанныхСтроки.Вставить("ПрямыеРасчеты", ПрямыеРасчеты);
	
	Если ПрямыеРасчеты Тогда
		
		СтруктураДанныхСтроки.Вставить("Банк", СтрокаДокумента[ТипКонтрагента + "БАНК1"]);
		СтруктураДанныхСтроки.Вставить("Город", СтрокаДокумента[ТипКонтрагента + "БАНК2"]);
		СтруктураДанныхСтроки.Вставить("БИК", СтрокаДокумента[ТипКонтрагента + "БИК"]);
		СтруктураДанныхСтроки.Вставить("КоррСчет", СтрокаДокумента[ТипКонтрагента + "КОРСЧЕТ"]);
		
	Иначе
		
		СтруктураДанныхСтроки.Вставить("Банк", СтрокаДокумента[ТипКонтрагента + "3"]);
		СтруктураДанныхСтроки.Вставить("Город", СтрокаДокумента[ТипКонтрагента + "4"]);
		СтруктураДанныхСтроки.Вставить("БИК", ""); // В менеджере будем банк искать по корр. счету.
		СтруктураДанныхСтроки.Вставить("КоррСчет", СтрокаДокумента[ТипКонтрагента + "РАСЧСЧЕТ"]);
		
		СтруктураДанныхСтроки.Вставить("БанкРасчетов", СтрокаДокумента[ТипКонтрагента + "БАНК1"]);
		СтруктураДанныхСтроки.Вставить("ГородРасчетов", СтрокаДокумента[ТипКонтрагента + "БАНК2"]);
		СтруктураДанныхСтроки.Вставить("БИКРасчетов",  СтрокаДокумента[ТипКонтрагента + "БИК"]);
		СтруктураДанныхСтроки.Вставить("КоррСчетРасчетов", СтрокаДокумента[ТипКонтрагента + "КОРСЧЕТ"]);
		
	КонецЕсли;
	
	СтруктураДанныхСтроки.Вставить("БанковскийСчет", ДанныеОбъекта.БанковскийСчет);
	
	Возврат СтруктураДанныхСтроки;
	
КонецФункции

Процедура ДополнитьСтруктуруДаннымиДоговора(СтруктураДанных)
	
	СтруктураДанных.Вставить("ЗаполнятьДоговор", Ложь);
	СтруктураДанных.Вставить("ЗаполнятьДоговорПоУмолчанию", Истина);
	
КонецПроцедуры

#Область ПроцедурыИФункцииПоискаОбъектовИБ

// Функция ищет банк по БИК или корр. счету и возвращает найденное значение.
//
Функция НайтиБанкПоБикИКоррСчету(БИК, КоррСчет)
	
	НайденныйБанк = Справочники.Банки.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(БИК) Тогда
		НайденныйБанк = Справочники.Банки.НайтиПоКоду(БИК);
	КонецЕсли;
	
	Если НайденныйБанк = Справочники.Банки.ПустаяСсылка() Тогда
		НайденныйБанк = Справочники.Банки.НайтиПоРеквизиту("КоррСчет", КоррСчет);
	КонецЕсли;

	Возврат НайденныйБанк;

КонецФункции // НайтиБанкПоБикИКоррСчету()

// Определяем группу, в которую будет добавлен новый контрагент.
//
Функция ОпределитьАвтоГруппуКонтрагента(ДеньгиОтКонтрагентаПоступили) Экспорт 
	
	// Попробуем найти по наименованию.
	СтрокаПоиска = ?(ДеньгиОтКонтрагентаПоступили, НСтр("ru='Покупатели'"), НСтр("ru='Поставщики'"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ЭтоГруппа
	|	И Контрагенты.Родитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И Контрагенты.Наименование = &Наименование
	|	И (НЕ Контрагенты.ПометкаУдаления)");
	
	Запрос.УстановитьПараметр("Наименование", СтрокаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	// По наименованию не нашли, тогда найдем самый часто используемый в соответствующей таблице.
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.КонтрагентРодитель
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПоиска.Контрагент.Родитель КАК КонтрагентРодитель,
	|		КОЛИЧЕСТВО(ТаблицаПоиска.Контрагент.Родитель) КАК КоличествоОдинаковых
	|	ИЗ
	|		Документ.%ТАБЛИЦА_ПОИСКА% КАК ТаблицаПоиска
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПоиска.Контрагент.Родитель) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.КоличествоОдинаковых УБЫВ");
	
	Запрос.Текст = 
		СтрЗаменить(
			Запрос.Текст, 
			"%ТАБЛИЦА_ПОИСКА%", 
			?(ДеньгиОтКонтрагентаПоступили, "РасходнаяНакладная", "ПриходнаяНакладная"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.КонтрагентРодитель, Справочники.Контрагенты.ПустаяСсылка());
	
КонецФункции

// Функция находит договор контрагента.
//
Функция НайтиДоговор(ВладелецДоговора, ОрганизацияДоговора = Неопределено, СписокВидовДоговора = Неопределено) Экспорт
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ОсновныеДоговорыКонтрагента.Контрагент ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО (ОсновныеДоговорыКонтрагента.Контрагент = ДоговорыКонтрагентов.Владелец)
	|			И ДоговорыКонтрагентов.Ссылка = ОсновныеДоговорыКонтрагента.Договор
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ТекстФильтра =
	"	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора"
  + ?(ОрганизацияДоговора <> Неопределено, "
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора", "") 
  +	"	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
  + ?(СписокВидовДоговора <> Неопределено, "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)", "");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат НСтр("ru = 'Не найден'");
	КонецЕсли;
	
КонецФункции // НайтиДоговор()

// Функция находит счет контрагента по номеру.
//
Функция НайтиСчетКонтрагента(Контрагент, НомерСчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка,
		|	ВЫБОР
		|		КОГДА БанковскиеСчета.ПометкаУдаления ИЛИ БанковскиеСчета.Недействителен
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Контрагент
		|	И БанковскиеСчета.НомерСчета = &НомерСчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка(); //НСтр("ru = 'Не найден'");
	КонецЕсли;
	
КонецФункции // НайтиДоговор()

#КонецОбласти

#Область ПроцедурыСозданияИЗаполненияОбъектов

Функция ЗаполнитьДоговорПоСтруктуреДанных(СтруктураДанных, ДоговорОбъект) Экспорт
	
	ДоговорОбъект.Наименование = СтруктураДанных.ДоговорНаименование;
	ДоговорОбъект.Владелец = СтруктураДанных.Контрагент;
	ДоговорОбъект.ВалютаРасчетов = СтруктураДанных.ДоговорВалютаРасчетов;
	ДоговорОбъект.ДатаДоговора = СтруктураДанных.ДоговорДата;
	ДоговорОбъект.НомерДоговора = СтруктураДанных.ДоговорНомер;
	ДоговорОбъект.РасчетыВУсловныхЕдиницах = СтруктураДанных.ДоговорРасчетыВУсловныхЕдиницах;
	Если СтруктураДанных.Свойство("Организация") И ЗначениеЗаполнено(СтруктураДанных.Организация) Тогда
		ДоговорОбъект.Организация = СтруктураДанных.Организация;
	КонецЕсли;
	
КонецФункции

Функция СоздатьДоговорПоСтруктуреДанных(Знач СтруктураДанных, ДоговорСсылка = Неопределено) Экспорт
	
	Попытка
		
		Если Не ЗначениеЗаполнено(СтруктураДанных.Контрагент) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Попытка записи Договора не удалась по причине, т.к. не указан контрагент, для которого оформляется договор'"));
			Возврат Неопределено;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДоговорСсылка) Тогда
			НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			
			Если СтруктураДанных.Свойство("ЗаполнятьДоговорПоУмолчанию") И СтруктураДанных.ЗаполнятьДоговорПоУмолчанию Тогда
				НовыйДоговор.Заполнить(СтруктураДанных.Контрагент);
			КонецЕсли;
		Иначе
			НовыйДоговор = ДоговорСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не (СтруктураДанных.Свойство("ЗаполнятьДоговор") И Не СтруктураДанных.ЗаполнятьДоговор) Тогда
			ЗаполнитьДоговорПоСтруктуреДанных(СтруктураДанных, НовыйДоговор);
		КонецЕсли;
		
		НовыйДоговор.Записать();
		
		Возврат НовыйДоговор.Ссылка;
		
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Попытка записи Договора не удалась по причине: %1'"),
				ОписаниеОшибки()));
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СоздатьРасчетныйСчетПоСтруктуреДанных(СтруктураДанных) Экспорт
	
	Попытка
		
		Если ЗначениеЗаполнено(СтруктураДанных.Счет) Тогда
			НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			
			НовыйСчет.НомерСчета = СтруктураДанных.Счет;
			НовыйСчет.Владелец   = СтруктураДанных.Контрагент;
			
			БИК = СтруктураДанных.БИК;
			КоррСчет = СтруктураДанных.КоррСчет;
			Наименование = СтруктураДанных.Банк;
			Город = СтруктураДанных.Город;
			
			Если Не СтруктураДанных.ПрямыеРасчеты Тогда
			
				БИКРасчетов = СтруктураДанных.БИКРасчетов;
				КоррСчетРасчетов = СтруктураДанных.КоррСчетРасчетов;
				НаименованиеРасчетов = СтруктураДанных.БанкРасчетов;
				ГородРасчетов = СтруктураДанных.ГородРасчетов;
				
				// Банк контрагента.
				Если НЕ ПустаяСтрока(Наименование) Тогда
					
					НовыйБанк = НайтиБанкПоБикИКоррСчету(БИК, КоррСчет);
					Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
						НовыйБанк = Справочники.Банки.СоздатьЭлемент();
						
						НовыйБанк.Наименование = Наименование;
						НовыйБанк.Город        = Город;
						НовыйБанк.Код          = БИК;
						НовыйБанк.КоррСчет     = КоррСчет;
						
						НовыйБанк.Записать();
					КонецЕсли;
					НовыйСчет.Банк = НовыйБанк.Ссылка;
					
				КонецЕсли;
					
				// РЦ банка контрагента.
				Если НЕ ПустаяСтрока(НаименованиеРасчетов) Тогда
					
					НовыйБанкКорр = НайтиБанкПоБикИКоррСчету(БИКРасчетов, КоррСчетРасчетов);
					Если НовыйБанкКорр = Справочники.Банки.ПустаяСсылка() Тогда
						НовыйБанкКорр = Справочники.Банки.СоздатьЭлемент();
						
						НовыйБанкКорр.Наименование = НаименованиеРасчетов;
						НовыйБанкКорр.Город        = ГородРасчетов;
						НовыйБанкКорр.Код          = БИКРасчетов;
						НовыйБанкКорр.КоррСчет     = КоррСчетРасчетов;
						
						НовыйБанкКорр.Записать();
					КонецЕсли;
					НовыйСчет.БанкРасчетов = НовыйБанкКорр.Ссылка;
					
				КонецЕсли;
				
			Иначе
				
				// Банк контрагента.
				НовыйБанк = НайтиБанкПоБикИКоррСчету(БИК, КоррСчет);
				Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
					НовыйБанк = Справочники.Банки.СоздатьЭлемент();
					
					НовыйБанк.Наименование = Наименование;
					НовыйБанк.Город        = Город;
					НовыйБанк.Код          = БИК;
					НовыйБанк.КоррСчет     = КоррСчет;
					
					НовыйБанк.Записать();
				КонецЕсли;
				НовыйСчет.Банк = НовыйБанк.Ссылка;
				
			КонецЕсли;
			
			НовыйСчет.ВариантУказанияКПП = Перечисления.ВариантыУказанияКПП.ВоВсехПлатежныхПоручениях;
			НовыйСчет.ВидСчета = "Расчетный";
			НовыйСчет.ВалютаДенежныхСредств = СтруктураДанных.БанковскийСчет.ВалютаДенежныхСредств;
			СтрокаНаименования = СокрЛП(НовыйСчет.НомерСчета) + ?(ЗначениеЗаполнено(НовыйСчет.Банк), ", в " + Строка(НовыйСчет.Банк), "");
			СтрокаНаименования = Лев(СтрокаНаименования, 100);
			НовыйСчет.Наименование = СтрокаНаименования;
			
			НовыйСчет.Записать();
			
			Возврат НовыйСчет.Ссылка;
		Иначе
			Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
		
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Попытка записи Контрагента не удалась по причине: %1'"),
				ОписаниеОшибки()));
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СоздатьКонтрагентаПоСтруктуреДанных(СтруктураДанных) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		КонтрагентНовый = Справочники.Контрагенты.СоздатьЭлемент();
		
		КонтрагентНовый.Заполнить(СтруктураДанных);
			
		Если НЕ ЗначениеЗаполнено(СтруктураДанных.ВидКонтрагента) Тогда
			КонтрагентНовый.ВидКонтрагента = ?(СтрДлина(СокрЛП(СтруктураДанных.ИНН)) = 12, Перечисления.ВидыКонтрагентов.ФизическоеЛицо, Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
		КонецЕсли;
		
		КонтрагентНовый.Записать();
		
		СтруктураДанных.Вставить("Контрагент", КонтрагентНовый.Ссылка);
		
		// Создадим расчетный счет.
		Если СтруктураДанных.СоздаватьРСчет Тогда
			КонтрагентНовый.БанковскийСчетПоУмолчанию = СоздатьРасчетныйСчетПоСтруктуреДанных(СтруктураДанных);
			КонтрагентНовый.ОбменДанными.Загрузка = Истина;
			КонтрагентНовый.Записать();
		КонецЕсли;
		
		// Перезаполним основной договор.
		ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(КонтрагентНовый);
		Если СтруктураДанных.ЗаполнятьДоговор Тогда
			
			ДоговорОбъект = ДоговорПоУмолчанию.ПолучитьОбъект();
			ЗаполнитьДоговорПоСтруктуреДанных(СтруктураДанных, ДоговорОбъект);
			ДоговорОбъект.Записать();
			
		ИначеЕсли СтруктураДанных.Свойство("Организация") И ЗначениеЗаполнено(СтруктураДанных.Организация) И
			ДоговорПоУмолчанию.Организация <> СтруктураДанных.Организация Тогда
			
			ДоговорОбъект = ДоговорПоУмолчанию.ПолучитьОбъект();
			ДоговорОбъект.Организация = СтруктураДанных.Организация;
			ДоговорОбъект.Записать();
			
		КонецЕсли;
		
		СтруктураДанных.Вставить("БанковскийСчетПоУмолчанию", КонтрагентНовый.БанковскийСчетПоУмолчанию);
		СтруктураДанных.Вставить("Договор", ДоговорПоУмолчанию);
		
		ЗафиксироватьТранзакцию();
		
		Возврат Истина;
	Исключение
		ОтменитьТранзакцию();
		
		ОбщегоНазначения.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Попытка записи Контрагента не удалась по причине: %1'"),
				ОписаниеОшибки()));
				
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ДобавитьИнформациюОбОтношенияхСКонтрагентомПоВидуОперации(СтруктураДанных, ВидОперации) Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя ИЛИ
		ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
		СтруктураДанных.Вставить("Покупатель", Истина);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика ИЛИ
		ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
		СтруктураДанных.Вставить("Поставщик", Истина);
	Иначе
		СтруктураДанных.Вставить("ПрочиеОтношения", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Функция проверяет корректность данных для выгрузки.
//
Процедура ПроверитьНаКорректностьИПустоеЗначениеЭкспортаУНФ(СтрокаДокумента, Форма) Экспорт
	
	ПеречислениеНалога          = Ложь;
	НепрямыеРасчетыУПлательщика = Ложь;
	НепрямыеРасчетыУПолучателя  = Ложь;
	ПеречислениеНалога          = (СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога);
	НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(СтрокаДокумента.ОрганизацияБанкДляРасчетов);
	НепрямыеРасчетыУПолучателя  = ЗначениеЗаполнено(СтрокаДокумента.КонтрагентБанкДляРасчетов);
	Плательщик = "Организация";
	Получатель = "Контрагент";
	РеквизитыПлДокЭксОсновные = "Номер,Дата,СуммаДокумента";
	РеквизитыПлДокЭксПлательщик = Плательщик + "Счет," + Плательщик + "," + Плательщик + "ИНН";
	РеквизитыПлДокЭксПлательщикНПР = Плательщик + "РасчСчет," + Плательщик + "БанкДляРасчетов," + Плательщик + "ГородБанка," + Плательщик + "БИКРЦБанка";
	РеквизитыПлДокЭксПолучатель = Получатель + "Счет," + Получатель + "," + Получатель + "ИНН";
	РеквизитыПлДокЭксПолучательНПР = Получатель + "РасчСчет," + Получатель + "БанкДляРасчетов," + Получатель + "ГородБанка," + Получатель + "БИКРЦБанка";
	РеквизитыПлДокЭксБюджетПлатеж = "СтатусСоставителя,КПППлательщика,КПППолучателя,КодБК,КодОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа";
	
	СтрокаРеквизиты = "%РеквизитыПлДокЭксОсновные%,%РеквизитыПлДокЭксПлательщик%,%РеквизитыПлДокЭксПлательщикНПР%%РеквизитыПлДокЭксПолучатель%,%РеквизитыПлДокЭксПолучательНПР%";
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксОсновные%", РеквизитыПлДокЭксОсновные);
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксПлательщик%", РеквизитыПлДокЭксПлательщик);
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксПлательщикНПР%", ?(НепрямыеРасчетыУПлательщика, РеквизитыПлДокЭксПлательщикНПР + ",", ""));
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксПолучатель%", РеквизитыПлДокЭксПолучатель);
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксПолучательНПР%", ?(НепрямыеРасчетыУПолучателя, РеквизитыПлДокЭксПолучательНПР + ",", ""));
	
	ЭкспортНеПустые = СоздатьСоответствиеИзСтроки(СтрокаРеквизиты);
	
	Для каждого Свойство Из ЭкспортНеПустые Цикл
		ПроверитьНаПустоеЗначениеЭкспортаУНФ(СтрокаДокумента, Свойство.Ключ);
	КонецЦикла;
	Если ПеречислениеНалога Тогда
		ПроверитьЗаполнениеНалоговыхРеквизитовУНФ(СтрокаДокумента, Форма);
	КонецЕсли;
	ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаДокумента);
	
КонецПроцедуры // ПроверитьНаКорректностьИПустоеЗначениеЭкспорта()

// Функция создает соответствие из строки.
//
Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НовоеСоответствие = Новый Соответствие;
	ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
	Пока ПозицияРазделителя > 0 Цикл
		ИмяЭлемента = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяЭлемента, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
	КонецЦикла;
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
	КонецЕсли;
	
	Возврат НовоеСоответствие;
	
КонецФункции // СоздатьСоответствиеИзСтроки()

// Процедура проверяет пустое значение данных для выгрузки.
//
Процедура ПроверитьНаПустоеЗначениеЭкспортаУНФ(СтрокаЭкспорта, ИмяСвойства)
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта[СокрЛП(ИмяСвойства)]) Тогда
		СтрокаЗамечание = НСтр("ru = 'Не заполнено ""%ИмяСвойства%""!'");
		СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИмяСвойства%", ИмяСвойства);
		ДобавитьЗамечание(СтрокаЭкспорта, 3, СтрокаЗамечание);
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаПустоеЗначениеЭкспорта()

// Функция проверяет правильность заполнения налоговых реквизитов.
//
Функция ПроверитьЗаполнениеНалоговыхРеквизитовУНФ(СтрокаЭкспорта, Форма)
	
	Ошибка = Новый СписокЗначений();
	П101 = СокрЛП(СтрокаЭкспорта.СтатусСоставителя);
	П104 = СокрЛП(СтрокаЭкспорта.КодБК);
	П105 = СокрЛП(СтрокаЭкспорта.КодОКАТО);
	П106 = СокрЛП(СтрокаЭкспорта.ПоказательОснования);
	П107 = ?(
		ПустаяСтрока(СокрЛП(СтрЗаменить(СтрокаЭкспорта.ПоказательПериода , ".", ""))) = 1,
		"",
		СтрокаЭкспорта.ПоказательПериода);
	П107 = ?(
		СокрЛП(СтрЗаменить(СтрокаЭкспорта.ПоказательПериода, ".", "")) = "0",
		"",
		СтрокаЭкспорта.ПоказательПериода);
	П108 = СокрЛП(СтрокаЭкспорта.ПоказательНомера);
	П109 = ?(
		НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПоказательДаты),
		"0",
		Строка(СтрокаЭкспорта.ПоказательДаты));
	П110 = СокрЛП(СтрокаЭкспорта.ПоказательТипа);
	УИН = СокрЛП(СтрокаЭкспорта.ИдентификаторПлатежа);
	
	Если (СтрНайти("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26", П101) = 0)
	 ИЛИ (ПустаяСтрока(СокрЛП(П101))) Тогда
		ДобавитьЗамечание(
			СтрокаЭкспорта,
			3,
			НСтр("ru = 'Неверное значение поля реквизита для платежей в бюджет ""Статус составителя"" на закладке ""Бюджет"".'"));
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	Если НЕ (ПлатежиВБюджетКлиентСервер.ДопускаетсяПустойКБК(СтрокаЭкспорта.ВидПеречисленияВБюджет, СтрокаЭкспорта.КонтрагентНомерСчета, СтрокаЭкспорта.Дата)) Тогда
		Если (СтрЗаменить(П104, "0", "") = "")
			 И (СтрНайти("06, 07", П101) = 0) Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'Не заполнено поле ""КБК"" на закладке ""Бюджет"".'"));
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если ПустаяСтрока(П105)
			ИЛИ СтрЗаменить(П105, "0", "") = "" Тогда
			Если СтрокаЭкспорта.Дата >= '20140101' Тогда // ОКТМО действует в любом случае с 01.01.2014 
				ДобавитьЗамечание(
					СтрокаЭкспорта,
					3,
					НСтр("ru = 'Не заполнено поле ""Код ОКТМО"" на закладке ""Бюджет"".'"));
			Иначе
				ДобавитьЗамечание(
					СтрокаЭкспорта,
					3,
					НСтр("ru = 'Не заполнено поле ""Код ОКАТО"" на закладке ""Бюджет"".'"));
			КонецЕсли;
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
	КонецЕсли;
	
	// Проверяем в зависимости от статуса составителя.
	Если П101 = "08" Тогда
		Если СтрЗаменить(П106, "0", "") <> "" Тогда 
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При статусе составителя ""08"" следует указать ""0"" в поле ""Основание платежа"" на закладке ""Бюджет"".'"));
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П107, "0", "") <> "" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При статусе составителя ""08"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Бюджет"".'"));
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П108, "0", "") <> "" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При статусе составителя ""08"" не следует заполнять поле ""Номер документа"" на закладке ""Бюджет"".'"));
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П109, "0", "") <> "" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При статусе составителя ""08"" не следует заполнять поле ""Дата документа"" на закладке ""Бюджет"".'"));
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П110, "0", "") <> "" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При статусе составителя ""08"" следует указать ""0"" в поле ""Тип платежа"" на закладке ""Бюджет"".'"));
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
	Иначе
		// Проверяем в зависимости от основания платежа.
		Если СтрЗаменить(СокрЛП(П106), "0", "") = "" Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'"));
					УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(П106) <> 2 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""м"".'"));
					УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНайти("АП, АР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				ДобавитьЗамечание(
					СтрокаЭкспорта,
					3,
					НСтр("ru = 'При основании платежа ""АП"" или ""АР"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Бюджет"".'"));
				УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
			КонецЕсли;
		ИначеЕсли СтрНайти("ТР, РС, ОТ, РТ, ВУ, ПР, ПБ, ЗТ, ИН", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'"));
					УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНайти("ТП ,ЗД ", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				ДД = Сред((П107), 1, 2);
				ММ = Сред((П107), 4, 2);
				ГГ = Сред((П107), 7, 4);
				Если НЕ ММ = "" Тогда
					ММ = Число(Сред((П107), 4, 2));
				Иначе
					ММ = 0;
				КонецЕсли;
				Если НЕ ГГ = "" Тогда
					ГГ = Число(Сред((П107), 7, 4));
				Иначе
					ГГ = 0;
				КонецЕсли;
				Если (СтрНайти("Д1, Д2, Д3, МС", ДД) > 0) Тогда
					Если (ММ < 1)
					 ИЛИ (ММ > 12)
					 ИЛИ (ГГ < 2000)
					 ИЛИ (СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(
							СтрокаЭкспорта,
							3,
							НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'"));
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (СтрНайти("КВ", ДД) > 0) Тогда
					Если (ММ < 1)
					 ИЛИ (ММ > 4)
					 ИЛИ (ГГ < 2000)
					 ИЛИ (СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(
							СтрокаЭкспорта,
							3,
							НСтр("ru = 'Неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'"));
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (СтрНайти("ПЛ", ДД) > 0) Тогда
					Если (ММ < 1)
					 ИЛИ (ММ > 2)
					 ИЛИ (ГГ < 2000)
					 ИЛИ (СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(
							СтрокаЭкспорта,
							3,
							НСтр("ru = 'Неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'"));
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (СтрНайти("ГД", ДД) > 0) Тогда
					Если (ММ <> 0)
					 ИЛИ (ГГ < 2000)
					 ИЛИ (СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(
							СтрокаЭкспорта,
							3,
							НСтр("ru = 'Неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'"));
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(П107) Тогда
						ДобавитьЗамечание(
							СтрокаЭкспорта,
							3,
							НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'")); 
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П108, "0", "") <> "" Тогда
				ДобавитьЗамечание(
					СтрокаЭкспорта,
					3,
					НСтр("ru = 'При основании платежа ""ТП"" или ""ЗД"" необходимо указывать ""0"" в поле ""Номер документа"" на закладке ""Бюджет"".'"));
				УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
			КонецЕсли;
			Если СтрНайти("ЗД ", П106) > 0 Тогда
				Если СтрЗаменить(П109, "0", "") <> "" Тогда
					ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'При основании платежа ""ЗД"" не должно заполняться поле ""Дата документа"" на закладке ""Бюджет"".'"));
					УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНайти("БФ, ДЕ, ПО, КТ, ИД, ИП, ТУ, БД, ИН, КП", П106) > 0 Тогда
		Иначе
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'Неверно указано значение в поле ""Основание платежа"" на закладке ""Бюджет"".'"));
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П110, "0", "") = "" Тогда
		ИначеЕсли СтрНайти("НС, АВ, ПЕ, ПЦ, СА, АШ, ИШ, ПЛ, ГП, ВЗ, ШТ, ЗД", П110) > 0 Тогда
		Иначе
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'Неверно указано значение в поле ""Тип платежа"" на закладке ""Бюджет"".'"));
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаЭкспорта.Дата >= '2016-03-28' Тогда // Дополнительные проверки по Приказу Минфина России от 23 сентября 2015 г. № 148н.
												   //  Указание ЦБ РФ от 6 ноября 2015 г. № 3844-У
		Если Лев(СтрокаЭкспорта.ИННПлательщика, 2) = "00" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'Первые две цифры ИНН плательщика не могут быть ""00"".'"));
		КонецЕсли;
		Если Лев(СтрокаЭкспорта.ИННПолучателя, 2) = "00" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3, 
				НСтр("ru = 'Первые две цифры ИНН получателя не могут быть ""00"".'"));
		КонецЕсли;
		Если Лев(СтрокаЭкспорта.КПППлательщика, 2) = "00" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'КПП плательщика не должен начинаться на ""00"".'"));
		КонецЕсли;
		Если Лев(СтрокаЭкспорта.КПППолучателя, 2) = "00" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'КПП получателя не должен начинаться на ""00"".'"));
		КонецЕсли;
		Если ЗначениеЗаполнено(СокрЛП(УИН))
			И СокрЛП(УИН) <> "0"
			И ТолькоНулиВСтроке(УИН) Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'Все знаки уникального идентификатора начисления не могут одновременно принимать значение ""0"".'"));
		КонецЕсли;
	КонецЕсли;
	
	// Выводим список найденных ошибок.
	Для Ном = 0 По Ошибка.Количество() - 1 Цикл
		ТекстСообщения = Ошибка.Получить(Ном);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Форма);
	КонецЦикла;
	
	Возврат Ошибка;
	
КонецФункции // ПроверитьЗаполнениеНалоговыхРеквизитов()

// Процедура проверяет устанавливает готовность.
//
Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)
	
	Если ЗначениеЗаполнено(ТекущаяГотовность)
	   И ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяГотовность) Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;
	
КонецПроцедуры // УстановитьГотовность()

Функция ТолькоНулиВСтроке(Строка)
	
	ЗначащиеСимволы = СокрЛП(СтрЗаменить(Строка, "0", ""));
	Возврат ПустаяСтрока(ЗначащиеСимволы);
	
КонецФункции

Функция ПолучитьТекстЗапросаПоЗаполнениюТабличнойЧастиВыгрузка(Сохранение = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.Номер КАК Номер,
	|	ПлатежноеПоручение.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ПлатежноеПоручение.ВидПлатежа КАК ВидПлатежа,
	|	ПлатежноеПоручение.Ссылка КАК Документ,
	|	ПлатежноеПоручение.ПоказательДаты КАК ПоказательДаты,
	|	ПлатежноеПоручение.ПоказательНомера КАК ПоказательНомера,
	|	ПлатежноеПоручение.ПоказательОснования КАК ПоказательОснования,
	|	ПлатежноеПоручение.ПоказательТипа КАК ПоказательТипа,
	|	ПлатежноеПоручение.ПоказательПериода КАК ПоказательПериода,
	|	ПлатежноеПоручение.СтатусСоставителя КАК СтатусСоставителя,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя)
	|				ИЛИ ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет)
	|			ТОГДА ПлатежноеПоручение.Организация
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.Подотчетнику)
	|				ИЛИ ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику)
	|			ТОГДА ПлатежноеПоручение.Подотчетник
	|		ИНАЧЕ ПлатежноеПоручение.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ПлатежноеПоручение.ВидОперации КАК ВидОперации,
	|	ПлатежноеПоручение.ОчередностьПлатежа КАК ОчередностьПлатежа,
	|	ПлатежноеПоручение.ТекстПлательщика КАК ТекстПлательщика,
	|	ПлатежноеПоручение.ТекстПолучателя КАК ТекстПолучателя,
	|	ПлатежноеПоручение.ВидПеречисленияВБюджет КАК ВидПеречисленияВБюджет,
	|	ПлатежноеПоручение.ИННПлательщика КАК ИННПлательщика,
	|	ПлатежноеПоручение.КПППлательщика КАК КПППлательщика,
	|	ПлатежноеПоручение.ИННПолучателя КАК ИННПолучателя,
	|	ПлатежноеПоручение.КПППолучателя КАК КПППолучателя,
	|	ПлатежноеПоручение.КодБК КАК КодБК,
	|	ПлатежноеПоручение.КодОКАТО КАК КодОКАТО,
	|	ПлатежноеПоручение.Организация.НаименованиеПолное КАК Организация,
	|	ПлатежноеПоручение.Организация.НаименованиеПлательщикаПриПеречисленииНалогов КАК ОрганизацияПеречислениеНалога,
	|	ПлатежноеПоручение.Организация.ИНН КАК ОрганизацияИНН,
	|	ПлатежноеПоручение.Организация.КПП КАК ОрганизацияКПП,
	|	ПлатежноеПоручение.БанковскийСчет КАК ОрганизацияСчет,
	|	ПлатежноеПоручение.БанковскийСчет.НомерСчета КАК ОрганизацияНомерСчета,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.Код КАК ОрганизацияБИКБанка,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.Наименование КАК ОрганизацияБанк,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.КоррСчет КАК ОрганизацияРасчСчет,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.Город КАК ОрганизацияГородБанка,
	|	ПлатежноеПоручение.БанковскийСчет.БанкРасчетов КАК ОрганизацияБанкДляРасчетов,
	|	ПлатежноеПоручение.БанковскийСчет.БанкРасчетов.Город КАК ОрганизацияГородРЦБанка,
	|	ПлатежноеПоручение.БанковскийСчет.БанкРасчетов.Код КАК ОрганизацияБИКРЦБанка,
	|	ПлатежноеПоручение.БанковскийСчет.БанкРасчетов.КоррСчет КАК ОрганизацияКоррСчетРЦБанка,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя)
	|				ИЛИ ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет)
	|			ТОГДА ПлатежноеПоручение.Организация.ИНН
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.Подотчетнику)
	|				ИЛИ ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику)
	|			ТОГДА ПлатежноеПоручение.Подотчетник.Физлицо.ИНН
	|		ИНАЧЕ ПлатежноеПоручение.Контрагент.ИНН
	|	КОНЕЦ КАК КонтрагентИНН,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя)
	|				ИЛИ ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет)
	|			ТОГДА ПлатежноеПоручение.Организация.КПП
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.Подотчетнику)
	|				ИЛИ ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику)
	|			ТОГДА """"
	|		ИНАЧЕ ПлатежноеПоручение.Контрагент.КПП
	|	КОНЕЦ КАК КонтрагентКПП,
	|	ПлатежноеПоручение.СчетКонтрагента КАК КонтрагентСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	|	ПлатежноеПоручение.СчетКонтрагента.Наименование КАК КонтрагентПредставлениеСчета,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Наименование КАК КонтрагентБанк,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.КоррСчет КАК КонтрагентРасчСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Город КАК КонтрагентГородБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов КАК КонтрагентБанкДляРасчетов,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов.Город КАК КонтрагентГородРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Код КАК КонтрагентБИКБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов.Код КАК КонтрагентБИКРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов.КоррСчет КАК КонтрагентКоррСчетРЦБанка,
	|	ПлатежноеПоручение.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ЕСТЬNULL(СостоянияЭД.СостояниеЭДО, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ПустаяСсылка)) КАК СостояниеЭД,
	|	""Платежное поручение"" КАК ВидДокумента,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(255)) КАК ОписаниеОшибок,
	|	0 КАК Готовность,
	|	-1 КАК НомерКартинки,
	|	0 КАК НомерКартинкиДляПодвала,
	|	0 КАК СуммаДокументаВыделено,
	|	ИСТИНА КАК Выгружать,
	|	ЛОЖЬ КАК ЕстьОшибка,
	|	ПлатежноеПоручение.Оплачено КАК Оплачено,
	|	ПлатежноеПоручение.КодВидаДохода КАК КодВидаДохода
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|		ПО ПлатежноеПоручение.Ссылка = СостоянияЭД.СсылкаНаОбъект";
	
	Если НЕ Сохранение Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	ПлатежноеПоручение.Организация = &Организация
		|	И ПлатежноеПоручение.БанковскийСчет = &БанковскийСчет
		|	И ПлатежноеПоручение.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И ПлатежноеПоручение.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПлатежноеПоручение.Дата,
		|	Документ";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	ПлатежноеПоручение.Ссылка В(&Ссылки)";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецЕсли

