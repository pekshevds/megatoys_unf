#Область ОписаниеПеременных

&НаСервере
Перем СоответствиеЗаголовка;

&НаСервере
Перем СоответствиеОкончанияНаименования;

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ИндикаторИсполнения = 0;
	Если ЗначениеЗаполнено(СканерДляПодключения) Тогда
		
		Контекст = Новый Структура();
		Контекст.Вставить("ДрайверОборудования", СканерДляПодключения);
		Оповещение = Новый ОписаниеОповещения("ЗавершениеУстановкиДрайвераСканера", ЭтотОбъект, Контекст);
		МенеджерОборудованияКлиент.УстановитьДрайверОборудования(Оповещение, СканерДляПодключения);
		
	Иначе
		
		ВыполнитьДействияПереходаНаСтраницу(0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	ИмяРегистраКассовойДисциплиныВыемкиПриЗакрытииСмены = "КассоваяДисциплинаВыемкиПриЗакрытииСмены";
	ИмяКлассаМетаданных = "Регистры";
	МетаданныеСуществуют = МетаданныеСуществуют(ИмяКлассаМетаданных, ИмяРегистраКассовойДисциплиныВыемкиПриЗакрытииСмены);
	
	Если МетаданныеСуществуют
		И НавигационнаяСсылкаФорматированнойСтроки = "КассоваяДисциплинаВыемкиПриЗакрытииСмены" Тогда
		
		СтандартнаяОбработка	= Ложь;
		ПараметрыФормы			= Новый Структура();
		ДанныеОтбора			= Новый Структура();
		
		Если ЗначениеЗаполнено(Объект.ТорговыйОбъект) Тогда
			ДанныеОтбора.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
		КонецЕсли;
		
		Если НЕ НесколькоОрганизаций И ЗначениеЗаполнено(Объект.Организация) Тогда
			ДанныеОтбора.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОтбора) Тогда
			ПараметрыФормы.Вставить("Отбор", ДанныеОтбора);
		КонецЕсли;
		
		ИмяФормыСписка = "РегистрСведений.КассоваяДисциплинаВыемкиПриЗакрытииСмены.ФормаСписка";
		ОткрытьФорму(ИмяФормыСписка, ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МетаданныеСуществуют(ИмяКлассаМетаданныхВоМножественномЧисле, ИмяМетаданных)
	
	Результат = Ложь;
	Попытка
		
		КоллекцияМетаданных = Метаданные[ИмяКлассаМетаданныхВоМножественномЧисле];
		Результат = КоллекцияМетаданных.Найти(ИмяМетаданных) <> Неопределено;
		
	Исключение
		
		Результат = Ложь;
		ЗаписьЖурналаРегистрации( НСтр("ru = 'Попытка обращения к несуществующим метаданным'",
			ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Предупреждение,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееРабочееМесто = ?(ЗначениеЗаполнено(Объект.РабочееМесто),
		Объект.РабочееМесто,
		МенеджерОборудованияВызовСервера.РабочееМестоКлиента());
		
	Если НЕ ЗначениеЗаполнено(Объект.РабочееМесто) Тогда
		Объект.РабочееМесто = ТекущееРабочееМесто;
	КонецЕсли;
		
	ИспользоватьОтбор = Истина;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НастройкиРМК,
		"ТекущееРабочееМесто",
		ТекущееРабочееМесто,
		ИспользоватьОтбор);
		
	// исключить случаи неиспользования подключаемого оборудования в УРМК
	ИспользоватьПодключаемоеОборудование = Истина;
	СоздатьЭкземплярСканераШтрихкода();
	
	ТекстОшибокИнициализации = НСтр("ru = ''");
	ИнициализироватьПомощникНастройкиРабочегоМестаКассира(Отказ, ТекстОшибокИнициализации);
	
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю( СтрШаблон(
			НСтр("ru = 'Не удалось запустить помощник настройки РМК по причине %1'"), ТекстОшибокИнициализации));
		Возврат;
	КонецЕсли;
	
	ИмяКонстантыПрефиксаШтрихкодаВесовогоТовара = ОбщегоНазначенияРМК.ИмяКонстанты("ПрефиксШтрихкодаВесовогоТовара");
	ИмяКонстантыШаблонаШтрихкодаВесовыхТоваров = ОбщегоНазначенияРМК.ИмяКонстанты("ШаблонШтрихкодаВесовыхТоваров");
	ИмяКонстантыПрефиксаШтрихкодаШтучногоФасованногоТовара = ОбщегоНазначенияРМК.ИмяКонстанты(
		"ПрефиксШтрихкодаФасованногоТовара");
	
	ЛитералНабораКонстант = СтрШаблон("
	|%1,
	|%2,
	|%3",
		ИмяКонстантыПрефиксаШтрихкодаВесовогоТовара,
		ИмяКонстантыПрефиксаШтрихкодаШтучногоФасованногоТовара,
		ИмяКонстантыШаблонаШтрихкодаВесовыхТоваров);
		
	Попытка
		
		НаборКонстант = Константы.СоздатьНабор(ЛитералНабораКонстант);
		НаборКонстант.Прочитать();
		
		ПрефиксШтрихкодаВесовогоТовара = НаборКонстант[ИмяКонстантыПрефиксаШтрихкодаВесовогоТовара];
		ПрефиксШтрихкодаШтучногоФасованногоТовара = НаборКонстант[ИмяКонстантыПрефиксаШтрихкодаШтучногоФасованногоТовара];
		ШаблонШтрихкодаТовара = НаборКонстант[ИмяКонстантыШаблонаШтрихкодаВесовыхТоваров];
	
	Исключение
		
		ЗаписьЖурналаРегистрации( НСтр("ru = 'Попытка заполнения констант префиксов штрихкодов в интерфейсе помощника настройки РМК.'",
				ОбщегоНазначения.КодОсновногоЯзыка()) , УровеньЖурналаРегистрации.Ошибка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Элементы.ГруппаШаблоныШтрихкодов.Доступность = Ложь;
		
	КонецПопытки;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияПродажАлкоголя(ВестиСведенияДляДекларацийПоАлкоголю);
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияОплатПК(ИспользоватьОплатуПлатежнымиКартами);
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияОплатПлатежнымиСистемами(
		ИспользоватьОплатуПлатежнымиСистемами);
	ИспользоватьЗапретПродаж = ОбщегоНазначенияРМК.ИспользоватьЗапретыПродаж();
	ОбщегоНазначенияРМКПереопределяемый.ПереопределитьНастройкиСкупкиПомощникРМК(ЭтотОбъект);
	ОбщегоНазначенияРМКПереопределяемый.НастройкаСтраницыВидовОплат(ЭтотОбъект);
	ИзмененаСтраницаВидовОплат = ОбщегоНазначенияРМКПереопределяемый.ИзмененаСтраницаВидовОплат();
	
	ЗаполнитьТекущуюНастройкуРМК();
	ДоступностьСтраницНастройкиОбмена();
	ЗаполнитьЗначенияПоУмолчанию();
	Элементы.СтраницаЗапускаПомощникаНастройкиОбмена.Видимость = НЕ ОбменНастроен;
	Элементы.СтраницаНастройкаСинхронизацииДанных.Видимость = НЕ ОбменНастроен;
	
	УстановитьПодсказкуАдресаСервераЛояльности();
	ЗаполнитьУзлыОбмена();
	
	УстановитьУсловноеОформление();
	
	ОбщегоНазначенияРМК.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ДоступностьСтраницНастройкиОбмена()
	ОбменНастроен = ОбщегоНазначенияРМК.НастройкаСинхронизацииДанныхСуществует();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_УзелПланаОбмена" Тогда
		ДоступностьСтраницНастройкиОбмена();
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуНастройкиОбмена", ЭтотОбъект);
		ВыполнитьОбработкуОповещения(ОбработчикОповещения);
		
	ИначеЕсли ИмяСобытия = "ИзмененаТаблицаТарифовЗаУслугиЭквайринга" Тогда
		
		Если Параметр.Свойство("Эквайринг")
			И Параметр.Свойство("ТарифыУдалены")
			И Параметр.Свойство("ДобавленНовыйТариф") Тогда
			
			Эквайринг = Параметр.Эквайринг;
			ТарифыУдалены = Параметр.ТарифыУдалены;
			ДобавленНовыйТариф = Параметр.ДобавленНовыйТариф;
			
			Если ЗначениеЗаполнено(Эквайринг) Тогда
				
				РезультатПоиска = ЭквайринговыеТерминалыДляУточненияКомиссии.НайтиПоЗначению(Эквайринг);
				
				Если ДобавленНовыйТариф И НЕ РезультатПоиска = Неопределено Тогда
					ЭквайринговыеТерминалыДляУточненияКомиссии.Удалить(РезультатПоиска);
				ИначеЕсли ТарифыУдалены Тогда
					ЭквайринговыеТерминалыДляУточненияКомиссии.Добавить(Эквайринг);
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "РабочееМестоКассираУспешноНастроено" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("РабочееМестоКассираУспешноНастроено") Тогда
				РабочееМестоКассираУспешноНастроено = Параметр.РабочееМестоКассираУспешноНастроено;
				ЗаполнитьТекущуюНастройкуРМК();
				МодифицированностьРеквизитовРМК = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ВыполненОбменДанными" Тогда
		
		ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
		Если ИмяТекущейСтраницы = "СтраницаТорговыйОбъектОрганизация" Тогда
			Отказ = Ложь;
			ТекстОшибокИнициализации = НСтр("ru = ''");
			ИнициализироватьПомощникНастройкиРабочегоМестаКассира(Отказ, ТекстОшибокИнициализации);
			
			Элементы.ДекорацияОтсутствующиеДанные.Заголовок = "%data%";
			ЗаполнениеДаннымиПерехода("СтраницаТорговыйОбъектОрганизация", 0);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "СохранениеНастроекРМК" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("НастройкаЗаписана") Тогда
			РабочееМестоКассираУспешноНастроено = Параметр.НастройкаЗаписана;
			Если РабочееМестоКассираУспешноНастроено Тогда
				ЗаполнитьТекущуюНастройкуРМК();
				МодифицированностьРеквизитовРМК = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	Если НЕ (ИмяТекущейСтраницы = Элементы.СтраницаНастройкиРМК.Имя ИЛИ Найти(ИмяТекущейСтраницы, "НастройкаРМК") > 0) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НастройкаУспешноЗавершена = РабочееМестоКассираУспешноНастроено;
		Закрыть(НастройкаУспешноЗавершена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодыДоступаПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ОбработатьВыбранноеЗначениеКодаДоступа(ЭтотОбъект,
		ВыбраннаяСтрока,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыборКодаДоступа(Результат, Параметры) Экспорт
	Элементы.КодыДоступаПользователей.Обновить();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТорговыйОбъектПриИзменении(Элемент)
	ТорговыйОбъектПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПодключаемоеОборудованиеПриИзменении(Элемент)
	ПриИзмененииРеквизитовОборудования();
КонецПроцедуры

&НаКлиенте
Процедура ДрайверОборудованияПриИзменении(Элемент)
	ПриИзмененииРеквизитовОборудования();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииТипКассыПриИзменении(Элемент)
	
	ПриИзмененииРеквизитовКассаККМ();
	
	ТекущиеДанные = Элементы.Организации.ТекущиеДанные;
	ДоступностьПО = ТекущиеДанные.ТипКассы =
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыКассККМ.ФискальныйРегистратор");
	
	Элементы.ОрганизацииПодключаемоеОборудование.Доступность = ДоступностьПО;
	ТекущиеДанные.ИспользоватьБезПодключенияОборудования = НЕ ДоступностьПО;
	
	Если НЕ ДоступностьПО Тогда
		
		ТекущиеДанные.ПодключаемоеОборудование =
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ПодключаемоеОборудование.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииНаименованиеПриИзменении(Элемент)
	ПриИзмененииРеквизитовКассаККМ();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьТаблицуОрганизацийПоОднойОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииРегистрационныйНомерПриИзменении(Элемент)
	ПриИзмененииРеквизитовКассаККМ();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииПодключаемоеОборудованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Организации.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ИндексСтроки = Объект.Организации.Индекс(ТекущиеДанные);
		ПриИзмененииПодключаемоеОборудованиеСервер(ИндексСтроки);
		
	КонецЕсли;
	
	ПриИзмененииРеквизитовКассаККМ();
	
КонецПроцедуры

&НаКлиенте
Процедура КонстантыНаборИспользоватьОплатуПлатежнымиКартамиПриИзменении(Элемент)
	
	ИспользоватьОплатуПлатежнымиКартамиПриИзмененииСервер();
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПОПриИзменении(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	НастройкаПО = ЭтотОбъект[ИмяЭлемента];
	ИмяОборудования = СтрЗаменить(ИмяЭлемента, "НастройкаПО", "");
	ИмяДекорации = СтрЗаменить(ИмяЭлемента, "НастройкаПО", "ДекорацияКПодключению");
	Если НастройкаПО Тогда
		
		Если ИмяОборудования = "ФискальныеРегистраторы"
			ИЛИ ИмяОборудования = "ЭквайринговыйТерминал" Тогда
				ИмяДекорацииЗаголовок = Формат(Объект.Организации.Количество(), "ЧН=0; ЧГ=0");
		Иначе
			ИмяДекорацииЗаголовок = "1";
		КонецЕсли;
		
	Иначе
		ИмяДекорацииЗаголовок = "0";
	КонецЕсли;

// АПК:1036-выкл обусловлено дизайном формы
	ШрифтЖирный = Новый Шрифт("Arial", 11, Истина);
// АПК:1036-вкл
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ИмяДекорацииЗаголовок, ШрифтЖирный));

// АПК:1356-выкл выведение в интерфейс с заданным, согласно дизайну оформлением
	Элементы[ИмяДекорации].Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
// АПК:1356-вкл

КонецПроцедуры

&НаКлиенте
Процедура ПодключаемоеОборудованиеОчистка(Элемент, СтандартнаяОбработка)
	Элементы.НастроитьОборудование.Доступность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗапретПродажПриИзменении(Элемент)
	
	ИспользоватьЗапретПродажПриИзмененииСервер();
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьЗапретПродажПриИзмененииСервер()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьЗапретПродаж");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ИспользоватьЗапретПродаж);
	
	ИспользоватьЗапретПродаж = ОбщегоНазначенияРМК.ИспользоватьЗапретыПродаж();
	Элементы.ЗапретыПродаж.Доступность = ИспользоватьЗапретПродаж;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиСведенияДляДекларацийПоАлкогольнойПродукцииПриИзменении(Элемент)
	ВестиСведенияДляДекларацийПоАлкогольнойПродукцииПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ВестиСведенияДляДекларацийПоАлкогольнойПродукцииПриИзмененииСервер()

	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ВестиСведенияДляДекларацийПоАлкоголю");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ВестиСведенияДляДекларацийПоАлкоголю);
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияПродажАлкоголя(ВестиСведенияДляДекларацийПоАлкоголю);
	
	Если ВестиСведенияДляДекларацийПоАлкоголю И НЕ ИспользоватьЗапретПродаж Тогда
		КонстантыНабор.ИспользоватьЗапретПродаж = ВестиСведенияДляДекларацийПоАлкоголю;
		ИспользоватьЗапретПродажПриИзмененииСервер();
	КонецЕсли;

	Элементы.ИспользоватьЗапретПродаж.Доступность = НЕ ВестиСведенияДляДекларацийПоАлкоголю;
	Элементы.ПараметрыПодключенияЕГАИС.Доступность = ВестиСведенияДляДекларацийПоАлкоголю;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуНастройкиОбмена(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если ОбменНастроен Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаТорговыйОбъектОрганизация);
	Иначе
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаНастройкаСинхронизацииДанных);
		ИндикаторИсполнения = 0;
		ВыполнитьДействияПереходаНаСтраницу(0);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаОПереназначенииОборудования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПереназначитьПодключаемоеОборудование(ТекущееРабочееМесто);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПояснениеКФормеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОбработкаЭлементаФормыПомощника(
		ЭтотОбъект, 
		Элемент, 
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИспользоватьКассовыйQRКодСБПОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОбработкаЭлементаФормыПомощника(
		ЭтотОбъект, 
		Элемент, 
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКассовыйQRКодСБППриИзменении(Элемент)
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОбработкаЭлементаФормыПомощника(
		ЭтотОбъект, 
		Элемент, 
		Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОплатыКассовойСсылкиСБППриИзменении(Элемент)
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОбработкаЭлементаФормыПомощника(
		ЭтотОбъект, 
		Элемент, 
		Элемент.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	ВыполнитьДействияПереходаНаСтраницу(1);
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ВыполнитьДействияПереходаНаСтраницу(-1);
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЭлементФормы()
	Если ОтображатьСозданиеККТ Тогда
		ТекущийЭлемент = Элементы.ВыборПроизводительАтол;
		ОтображатьСозданиеККТ = Ложь;
	ИначеЕсли ОтображатьСозданиеЭТ Тогда
		ТекущийЭлемент = Элементы.ВыборСбербанк;
		ОтображатьСозданиеЭТ = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменитьНастройкуРМК(Команда)
	
	Если НЕ ПустаяСтрока(ТекущаяНастройкаРМКНаименование) Тогда
		
		ЗначенияНастроек = Новый Структура();
		ЗначенияНастроек.Вставить("Наименование", ТекущаяНастройкаРМКНаименование);
		ЗначенияНастроек.Вставить("ПечататьБумажныйЧек", ТекущаяНастройкаРМКПечататьБумажныйЧек);
		ЗначенияНастроек.Вставить("МаксимальныйПроцентРучнойСкидки", ТекущаяНастройкаРМКМаксимальныйПроцентРучнойСкидки);
		ЗначенияНастроек.Вставить("ТочностьОкругления", ТекущаяНастройкаРМКТочностьОкругления);
		ЗначенияНастроек.Вставить("ВидОтображения", ТекущаяНастройкаРМКВидОтображения);
		ЗначенияНастроек.Вставить("СворачиватьСтрокиПриПечатиЧека", ТекущаяНастройкаРМКСворачиватьСтрокиПриПечатиЧека);
		ЗначенияНастроек.Вставить("ШаблонЧекаПродажи", ТекущаяНастройкаРМКШаблонЧекаПродажи);
		ЗначенияНастроек.Вставить("ШаблонЧекаВозврата", ТекущаяНастройкаРМКШаблонЧекаВозврата);
		ЗначенияНастроек.Вставить("ЗапрашиватьПодтверждениеВозраста18Плюс",
			ТекущаяНастройкаРМКЗапрашиватьПодтверждениеВозраста18Плюс);
		ЗначенияНастроек.Вставить("ОжидатьРезультатПроверкиМарок", ТекущаяНастройкаРМКОжидатьРезультатПроверкиМарок);
		
		ТекущаяНастройкаРМК = СоздатьИзменитьНастройкуРМКНаСервере(ТекущаяНастройкаРМК,
			ЗначенияНастроек, Объект.РабочееМесто);
		Модифицированность = Ложь;
			
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Пожалуйста, укажите наименование для текущей настройки'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменитьПодключаемоеОборудование(Команда)
	
	Если НЕ ЗначениеЗаполнено(ДрайверОборудования) И НЕ (ТекущийТипОборудования =
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор")
			ИЛИ ТекущийТипОборудования = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ККТ")) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнен драйвер оборудования'"),, "ДрайверОборудования",,);
			
	ИначеЕсли ЗначениеЗаполнено(ПодключаемоеОборудование) И (ТекущийТипОборудования =
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор")
		ИЛИ ТекущийТипОборудования =
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ККТ")) Тогда
		
		ОбновитьДанныеОборудования();
		НастраиваемаяОрганизация = Объект.Организации[ИндексСтрокиОрганизации];
		
		Если НЕ НастраиваемаяОрганизация = Неопределено
			И НастраиваемаяОрганизация.Свойство("КассаККМ")
			И ЗначениеЗаполнено(НастраиваемаяОрганизация.КассаККМ) Тогда
			ИзменитьПодключаемоеОборудованиеКассыККМ(НастраиваемаяОрганизация.КассаККМ, ПодключаемоеОборудование);
		КонецЕсли;
		
		ПриИзмененииПодключаемоеОборудование();
		
		Модифицированность = Ложь;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ДрайверОборудования) И (ТекущийТипОборудования =
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор")
		ИЛИ ТекущийТипОборудования =
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ККТ")) Тогда
		
		НастраиваемаяОрганизация = Объект.Организации[ИндексСтрокиОрганизации];
		
		Если НЕ НастраиваемаяОрганизация = Неопределено
			И НастраиваемаяОрганизация.Свойство("КассаККМ")
			И ЗначениеЗаполнено(НастраиваемаяОрганизация.КассаККМ) Тогда
			ИзменитьПодключаемоеОборудованиеКассыККМ(НастраиваемаяОрганизация.КассаККМ, Неопределено);
		КонецЕсли;
		
		ПриИзмененииПодключаемоеОборудование();
		
		Модифицированность = Ложь;
	ИначеЕсли ЗначениеЗаполнено(ПодключаемоеОборудование) 
		И ТекущийТипОборудования = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал") Тогда
		ОбновитьДанныеОборудования();
		ПриИзмененииПодключаемоеОборудование();
		
		Модифицированность = Ложь; 
	ИначеЕсли НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) 
		И ТекущийТипОборудования = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнено оборудование'"),, "ПодключаемоеОборудование",,);
	Иначе
		
		НавигационнаяСсылка = СоздатьИзменитьПодключаемоеОборудованиеНаСервере();
		
		Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
			
			ПоказатьОповещениеПользователя(, НавигационнаяСсылка, ПодключаемоеОборудование);
			ОбновитьИнформациюДрайвераОборудования(ДрайверОборудования);
			ОтобразитьИзменениеДанных(ПодключаемоеОборудование, ВидИзмененияДанных.Изменение);
			
			Если ТекущийТипОборудования =
				ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор")
				ИЛИ ТекущийТипОборудования =
				ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
				
				НастраиваемаяОрганизация = Объект.Организации[ИндексСтрокиОрганизации];
				
				Если НЕ НастраиваемаяОрганизация = Неопределено
					И НастраиваемаяОрганизация.Свойство("КассаККМ")
					И ЗначениеЗаполнено(НастраиваемаяОрганизация.КассаККМ) Тогда
						ИзменитьПодключаемоеОборудованиеКассыККМ(НастраиваемаяОрганизация.КассаККМ, ПодключаемоеОборудование);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекстПредупреждения = НСтр("ru='Укажите уникальное наименование.'");
			ПоказатьПредупреждение(,ТекстПредупреждения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОборудование(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ВыполнитьНастройкуОборудованияЗавершение", ЭтотОбъект);
	Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		МенеджерОборудованияКлиент.ВыполнитьНастройкуОборудования(ПодключаемоеОборудование, Обработчик); 
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуНастроек(Команда)
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаПросмотраСпискаНастроек);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПросмотруНастройки(Команда)

	ТекущиеДанные = Элементы.НастройкиРабочегоМестаКассира.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.Свойство("Ссылка") Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаПросмотраНастройки);
		УстановитьЗначениеТекущейНастройкиВИнтерфейсе(ТекущиеДанные.Ссылка);
		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите настройку для просмотра'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОплатуПлатежнойКартой(Команда)
	СоздатьОплатуКлиент("ПлатежнаяКарта");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОплатуБанковскимКредитом(Команда)
	СоздатьОплатуКлиент("БанковскийКредит");
КонецПроцедуры

&НаКлиенте 
Процедура СоздатьОплатуПлатежнойСистемой(Команда)
	СоздатьОплатуКлиент("ПлатежнаяСистема");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменитьКассу(Команда)
	
	Отказ = Ложь;
	
	Если ПробиватьЧекиПоКассеККМКасса
		И НЕ ЗначениеЗаполнено(КассаККМКасса) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнена касса ККМ'"),
			Объект, "КассаККМКасса",, Отказ);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭквайринговыйТерминал(Команда)
	
	ЗаполнениеТаблицыСозданияЭТ();
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияРМККлиент.ОткрытьФормуНовогоТерминалаВИнтерфейсеПомощникаНастройки(ЭтотОбъект, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкуРМК(Команда)
	
	ТекущаяСтрока = Элементы.НастройкиРабочегоМестаКассира.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено
		И ТекущаяСтрока.Свойство("Ссылка") Тогда
		
		ЗначениеНастройки = ТекущаяСтрока.Ссылка;
		ОбщегоНазначенияРМКВызовСервера.УстановитьНастройкуРМКДляТекущегоРабочегоМеста(ЗначениеНастройки);
		Элементы.НастройкиРабочегоМестаКассира.Обновить();
		
		УстановитьЗначениеТекущейНастройкиВИнтерфейсе(ЗначениеНастройки);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаПросмотраНастройки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодключенияКЕГАИС(Команда)
	ОткрытьФорму("РегистрСведений.НастройкиОбменаЕГАИС.ФормаСписка");
КонецПроцедуры


&НаКлиенте
Процедура ДоступныеЗапретыПродаж(Команда)
	
	КоличествоЗаписей = КоличествоЗаписейЗапретовПродаж();
	ИмяФормыСуффикс = ?(КоличествоЗаписей > 0, "ФормаСписка", "ФормаЗаписи");
	ПолноеИмяФормы = СтрШаблон("РегистрСведений.УсловияЗапретаПродажРМК.%1", ИмяФормыСуффикс);
	
	ОткрытьФорму(ПолноеИмяФормы,, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникНастройкиОбмена(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуНастройкиОбмена", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ИмяФормыПомощникаНастройкиОбмена = "Обработка.ПомощникНастройкиОбмена.Форма";
	
	ОткрытьФорму(ИмяФормыПомощникаНастройкиОбмена,, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьКассовыеСсылки(Команда)
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОбработкаЭлементаФормыПомощника(
		ЭтотОбъект, 
		Команда, 
		Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьQRКода(Команда)

	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОбработкаЭлементаФормыПомощника(
		ЭтотОбъект, 
		Команда, 
		Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключить(Команда)
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОбработкаЭлементаФормыПомощника(
		ЭтотОбъект, 
		Команда, 
		Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуферСБП(Команда)
	
	// Копирование происходит с предварительной очисткой через обработчик, для обхода поведения платформы
	// при повторном копировании - при определенных условиях копирование не происходит.
	
	ЭтотОбъект.БуферОбменаСБП = "";
		
	ПодключитьОбработчикОжидания("КопироватьСсылкуВБуфер", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииОбщие

#Область СлужебныеПроцедурыИФункцииОбщие_Переопределение

&НаСервере
Процедура УстановитьТекстЗапросаВидовОплат(Отказ)

	ИмяСущности = Элементы.ВидыОплат.Имя;
	ОбщегоНазначенияРМКПереопределяемый.ПереопределитьДинамическийСписокПомощникаНастройкиРМК(ЭтотОбъект,
		ИмяСущности, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаДанныхПользователей(Отказ)

	ИмяСущности = Элементы.ДополнительныеДанныеПользователей.Имя;
	ОбщегоНазначенияРМКПереопределяемый.
		ПереопределитьДинамическийСписокПомощникаНастройкиРМК(ЭтотОбъект, ИмяСущности, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСписка = ДополнительныеДанныеПользователей.КомпоновщикНастроек.Настройки.Структура;

	Если НастройкиСписка.Количество() > 0 Тогда
		НастройкиСписка.Очистить();
	КонецЕсли;
	
	ТипГруппировки = Тип("ПолеГруппировкиКомпоновкиДанных");
	ГруппировкаКомпоновки = НастройкиСписка.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ЭлементГруппировки = ГруппировкаКомпоновки.ПоляГруппировки.Элементы.Добавить(ТипГруппировки);
	ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных("Пользователь");
	
	Элементы.ДополнительныеДанныеПользователей.НачальноеОтображениеДерева =
		НачальноеОтображениеДерева.НеРаскрывать;
	ИзмененныеНастройки = ДополнительныеДанныеПользователей.КомпоновщикНастроек.Настройки;
	ДополнительныеДанныеПользователей.КомпоновщикНастроек.ЗагрузитьНастройки(ИзмененныеНастройки);

	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ЭтоПользовательСПолнымиПравами = УправлениеДоступом.ЕстьРоль("ПолныеПрава",, ТекущийПользователь);
	
	Если НЕ ЭтоПользовательСПолнымиПравами Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДополнительныеДанныеПользователей,
				"Пользователь", Пользователи.ТекущийПользователь(), ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
	КонецЕсли;
	
	Элементы.ДополнительныеДанныеПользователей.КонтекстноеМеню.Доступность = ЭтоПользовательСПолнымиПравами;
	
КонецПроцедуры

&НаСервере
Процедура ИмпортироватьДанныеПользователейВКонтекстФормы()
	
	Запрос = Новый Запрос (ДополнительныеДанныеПользователей.ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ОтборДляПоиска = Новый Структура();
	ОтборДляПоиска.Вставить("Пользователь");
	
	Пока Выборка.Следующий() Цикл
	
		ЗаполнитьЗначенияСвойств(ОтборДляПоиска, Выборка);
		РезультатПоиска = ДанныеПользователей.НайтиСтроки(ОтборДляПоиска);
		Если РезультатПоиска.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ДанныеПользователей.Добавить(), Выборка);
		КонецЕсли;
	
	КонецЦикла;
	
	Запрос = Новый Запрос(КодыДоступаПользователей.ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоСтрокСПустымиКодамиДоступаПользователей = Выборка.Количество();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаКассККМ(Отказ)

	ИмяСущности = Элементы.КассыККМ.Имя;
	ОбщегоНазначенияРМКПереопределяемый.ПереопределитьДинамическийСписокПомощникаНастройкиРМК(ЭтотОбъект,
		ИмяСущности, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаКодовДоступаПользователей(Отказ)

	ИмяСущности = Элементы.КодыДоступаПользователей.Имя;
	ОбщегоНазначенияРМКПереопределяемый.
		ПереопределитьДинамическийСписокПомощникаНастройкиРМК(ЭтотОбъект, ИмяСущности, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаПеречняЭквайринговыхТерминалов(Отказ)

	ИмяСущности = Элементы.ЭквайринговыеТерминалы.Имя;
	ОбщегоНазначенияРМКПереопределяемый.ПереопределитьДинамическийСписокПомощникаНастройкиРМК(ЭтотОбъект,
		ИмяСущности, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭквайринговыеТерминалы.Параметры = Неопределено Тогда
		
		Если НЕ ЭквайринговыеТерминалы.Параметры.ДоступныеПараметры.Элементы.Найти("ТорговыйОбъект") = Неопределено Тогда
			ЭквайринговыеТерминалы.Параметры.УстановитьЗначениеПараметра("ТорговыйОбъект", Объект.ТорговыйОбъект);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ИмяКонстантыИспользованияПодключаемогоОборудования()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьПодключаемоеОборудование");
	Возврат ИмяКонстанты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСокращенныйСценарийНастройкиРабочегоМестаСПрименениемПомощника()
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакЭтоСокращенныйСценарийНастройкиРМК(Результат);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ИменаСтраницДляСокращеннойНастройки()

	Результат = Новый Массив();
	Результат.Добавить(Элементы.СтраницаТорговыйОбъектОрганизация.Имя);
	Результат.Добавить(Элементы.СтраницаНастройкиПользователей.Имя);
	Результат.Добавить(Элементы.СтраницаНастройкиРМК.Имя);
	Результат.Добавить(Элементы.СтраницаФинал.Имя);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция КоличествоЭлементовСправочникаПользователей()
	
	Результат = 0;
	Запрос = Новый Запрос( "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Пользователи.Ссылка) КАК КоличествоПользователей
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.Служебный
	|	И НЕ Пользователи.ПометкаУдаления");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.КоличествоПользователей
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИменаСтраницДляСокращеннойНастройкиНаСервере()

	Результат = Новый Массив();
	Результат.Добавить(Элементы.СтраницаТорговыйОбъектОрганизация.Имя);
	Результат.Добавить(Элементы.СтраницаНастройкиПользователей.Имя);
	Результат.Добавить(Элементы.СтраницаНастройкиРМК.Имя);
	Результат.Добавить(Элементы.СтраницаФинал.Имя);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьПереопределяемыеТекстыЗапросовДинамическихСписков(Отказ, ТекстОшибокИнициализации)
	
	ШаблонОшибки =
		НСтр("ru = 'Пожалуйста, переопределите текст запроса динамического списка ""%1"" в помощнике настройки РМК'");
	УстановитьТекстЗапросаВидовОплат(Отказ);
	Если Отказ Тогда
		
		ТекстОшибки = СтрШаблон(ШаблонОшибки, НСтр("ru = '""Виды оплат""'"));
		ТекстОшибокИнициализации = СтрШаблон("%1%2%3",ТекстОшибокИнициализации, Символы.ПС, ТекстОшибки);
		
	КонецЕсли;
	
	УстановитьТекстЗапросаДанныхПользователей(Отказ);
	Если Отказ Тогда
		
		ТекстОшибки = СтрШаблон(ШаблонОшибки, НСтр("ru = '""Данные пользователей""'"));
		ТекстОшибокИнициализации = СтрШаблон("%1%2%3",ТекстОшибокИнициализации, Символы.ПС, ТекстОшибки);
		
	КонецЕсли;
	
	УстановитьТекстЗапросаКодовДоступаПользователей(Отказ);
	Если Отказ Тогда
		
		ТекстОшибки = СтрШаблон(ШаблонОшибки, НСтр("ru = '""Коды доступа пользователей""'"));
		ТекстОшибокИнициализации = СтрШаблон("%1%2%3",ТекстОшибокИнициализации, Символы.ПС, ТекстОшибки);
		
	КонецЕсли;
	
	УстановитьТекстЗапросаКассККМ(Отказ);
	Если Отказ Тогда
		
		ТекстОшибки = СтрШаблон(ШаблонОшибки, НСтр("ru = '""Кассы ККМ""'"));
		ТекстОшибокИнициализации = СтрШаблон("%1%2%3",ТекстОшибокИнициализации, Символы.ПС, ТекстОшибки);
		
	КонецЕсли;
	
	УстановитьТекстЗапросаПеречняЭквайринговыхТерминалов(Отказ);
	Если Отказ Тогда
		
		ТекстОшибки = СтрШаблон(ШаблонОшибки, НСтр("ru = '""Эквайринговые терминалы""'"));
		ТекстОшибокИнициализации = СтрШаблон("%1%2%3",ТекстОшибокИнициализации, Символы.ПС, ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаОрганизацийИПодразделений(Запрос)
	
	ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросДанныеПредприятия(Запрос, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

// АПК:1036-выкл экспортный метод для вызова из общей формы
&НаКлиенте
Процедура ВыполнитьДействияПереходаНаСтраницу(ИтераторНаправления) Экспорт
// АПК:1036-вкл

	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	
	Отказ = Ложь;
	Если ИтераторНаправления > 0 Тогда
		ПроверитьВозможностьПерехода(ИмяТекущейСтраницы, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИтераторСменыТипаСтраницы = ИтераторНаправления;
	
	Если НЕ ЭтоСокращенныйРежимНастройкиРабочегоМестаКассира Тогда
		
		Если ИмяТекущейСтраницы = "СтраницаЗапускаПомощникаНастройкиОбмена" Тогда
			
			СписокИменСтраниц.Очистить();
			
			Для каждого ПодчиненныйЭлемент Из Элементы.Страницы.ПодчиненныеЭлементы Цикл
				
				Если Не Элементы[ПодчиненныйЭлемент.Имя].Видимость Тогда
					Продолжить;
				КонецЕсли;
				
				СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
				
			КонецЦикла;	
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуНастройкиОбмена", ЭтотОбъект);
			Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			ИмяФормыПомощникаНастройкиОбмена = "Обработка.ПомощникНастройкиОбмена.Форма";
			ОткрытьФорму(ИмяФормыПомощникаНастройкиОбмена,,
			УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
			
		ИначеЕсли ИмяТекущейСтраницы = "СтраницаНастройкаСинхронизацииДанных" Тогда
			
			СписокИменСтраниц.Очистить();
			
			Для каждого ПодчиненныйЭлемент Из Элементы.Страницы.ПодчиненныеЭлементы Цикл
				
				Если Не Элементы[ПодчиненныйЭлемент.Имя].Видимость Тогда
					
					Продолжить;                             
					
				ИначеЕсли ПодчиненныйЭлемент.Имя = "СтраницаЗапускаПомощникаНастройкиОбмена" Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
				
			КонецЦикла;
			
		ИначеЕсли ИмяТекущейСтраницы = "СтраницаТорговыйОбъектОрганизация" Тогда
			
			ЗаполнитьСписокСтраницНаСтартовойСтранице();
			
			ИндексСтрокиПодключаемоеОборудование	= -1;
			ИндексСтрокиОрганизации					= -1;
			ИндексСтрокиКасса						= -1;
			
			Элементы.ИндикаторИсполнения.МаксимальноеЗначение = СписокИменСтраниц.Количество() - 1;
			
		ИначеЕсли ИмяТекущейСтраницы = "СтраницаНастройкиПользователей" Тогда
			
			Если ЕстьОборудованиеДляПереназначенияРабочегоМеста Тогда
				
				Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаОПереназначенииОборудования", ЭтотОбъект);
				ПоказатьВопрос(Оповещение,
					НСтр("ru = 'Обнаружено оборудование, подключенное к другому рабочему месту. Переназначить его?'"),
					РежимДиалогаВопрос.ДаНет);
				
			КонецЕсли;
			
		ИначеЕсли ИмяТекущейСтраницы = "СтраницаВидыОплат" Тогда
			
			СписокИменСтраниц.Очистить();
			
			Для каждого ПодчиненныйЭлемент Из Элементы.Страницы.ПодчиненныеЭлементы Цикл
				
				Если Не Элементы[ПодчиненныйЭлемент.Имя].Видимость Тогда           
					
					Продолжить;
				
				ИначеЕсли ПодчиненныйЭлемент.Имя = "СтраницаЗапускаПомощникаНастройкиОбмена" Тогда
					
					Если ОбменНастроен Тогда
						Продолжить;
					КонецЕсли;
					
				ИначеЕсли ПодчиненныйЭлемент.Имя = "СтраницаНастройкаСинхронизацииДанных" Тогда
					
					Если Не ОбменНастроен Тогда
						СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
					КонецЕсли;
					
				ИначеЕсли ПодчиненныйЭлемент.Имя = "СтраницаПодключаемоеОборудование" Тогда
					
					Если ИспользоватьПодключаемоеОборудование Тогда
						СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
					КонецЕсли;
					
				ИначеЕсли ПодчиненныйЭлемент.Имя = "СтраницаТипыОборудования" Тогда
					
					Если ИспользоватьПодключаемоеОборудование Тогда
						СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
					КонецЕсли;
					
				ИначеЕсли ПодчиненныйЭлемент.Имя = "СтраницаЭквайринговыеТерминалы" Тогда
					
					Если ИспользоватьОплатуПлатежнымиКартами Тогда
						СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
					КонецЕсли;
					Продолжить;
					
				Иначе
					СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
				КонецЕсли;
				
			КонецЦикла;	
			
			Элементы.НастройкаПОЭквайринговыйТерминал.Доступность = ИспользоватьОплатуПлатежнымиКартами;
			
		ИначеЕсли ИмяТекущейСтраницы = "СтраницаТипыОборудования" Тогда
			
			
			ЕстьНастройкиПО = ЕстьНастройкиПО();
			ЭлементСписка = СписокИменСтраниц.НайтиПоЗначению("СтраницаПодключаемоеОборудование");
			Если НЕ ЕстьНастройкиПО Тогда
				
				Если НЕ ЭлементСписка = Неопределено Тогда
					СписокИменСтраниц.Удалить(ЭлементСписка)
				КонецЕсли;
				
			Иначе
				
				Если ЭлементСписка = Неопределено Тогда
					
					ИндексСтраницы = СписокИменСтраниц.Индекс(СписокИменСтраниц.НайтиПоЗначению(ИмяТекущейСтраницы));
					СписокИменСтраниц.Вставить(ИндексСтраницы + 1, "СтраницаПодключаемоеОборудование");
					
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы.ИндикаторИсполнения.МаксимальноеЗначение = СписокИменСтраниц.Количество() - 1;
			
		ИначеЕсли ИмяТекущейСтраницы = "СтраницаПодключаемоеОборудование" Тогда
			Если МодифицированностьПараметров = Истина Тогда
				ОбработкаОповещенияСохранениеОборудования = Новый ОписаниеОповещения("СохранитьПараметрыОборудование", ЭтаФорма);
				ПоказатьВопрос(ОбработкаОповещенияСохранениеОборудования,НСтр("ru = 'Изменены параметры оборудования. Сохранить?'"),РежимДиалогаВопрос.ДаНет);
				МодифицированностьПараметров = Ложь;
			КонецЕсли;
			
			Если ИтераторНаправления > 0 Тогда
				
				Если (Объект.ТаблицаПодключаемоеОборудование.Количество()-1) > ИндексСтрокиПодключаемоеОборудование Тогда
					// Не достигли конца таблицы
					ИтераторСменыТипаСтраницы = 0;
				КонецЕсли;
				
			ИначеЕсли ИтераторНаправления < 0 Тогда
				
				Если ИндексСтрокиПодключаемоеОборудование > 0 Тогда
					// Не достигли начала таблицы
					ИтераторСменыТипаСтраницы = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			
		ИначеЕсли ИмяТекущейСтраницы = "СтраницаКассаККМ" Тогда
			
			Если ИтераторНаправления > 0 Тогда
				
				Если (Объект.Организации.Количество()-1) > ИндексСтрокиОрганизации Тогда
					// Не достигли конца таблицы
					ИтераторСменыТипаСтраницы = 0;
				КонецЕсли;
				
			ИначеЕсли ИтераторНаправления < 0 Тогда
				
				Если ИндексСтрокиОрганизации > 0 Тогда
					// Не достигли начала таблицы
					ИтераторСменыТипаСтраницы = 0;
				КонецЕсли
				
			КонецЕсли;
			
			Если НЕ ИспользоватьОплатуПлатежнымиКартами Тогда
				НастроитьСтраницуОтображенияНастроекРМК();
			КонецЕсли;
			
		ИначеЕсли ИмяТекущейСтраницы = "СтраницаЭквайринговыеТерминалы" Тогда
			
			Если ИспользоватьОплатуПлатежнымиКартами И ЭквайринговыеТерминалыДляУточненияКомиссии.Количество() > 0 Тогда
				
				ПоказатьПредупреждение(,
				НСтр("ru = 'Пожалуйста, заполните таблицу тарифов для эквайринговых терминалов,
				|приведенных в списке на странице'"));
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
			НастроитьСтраницуОтображенияНастроекРМК();
			
		ИначеЕсли (ИмяТекущейСтраницы = "СтраницаНастройкаРМКИнтерфейс" И ИтераторНаправления > 0)
			ИЛИ (ИмяТекущейСтраницы = "СтраницаНастройкаРМКБыстрыеТовары" И ИтераторНаправления < 0) Тогда
			СценарийТерминалСамообслуживания = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.СценарииИспользованияРМК.ТерминалСамообслуживания");
			ЭтоСценарийТерминал = (НастройкаРМК.СценарийИспользования = СценарийТерминалСамообслуживания);
			Если ЭтоСценарийТерминал Тогда
				ИтераторСменыТипаСтраницы = ИтераторСменыТипаСтраницы + ИтераторНаправления;
			КонецЕсли;
		КонецЕсли;
		
		ИндексСтраницы = СписокИменСтраниц.Индекс(СписокИменСтраниц.НайтиПоЗначению(ИмяТекущейСтраницы));
		ИндексСтраницы = ИндексСтраницы + ИтераторСменыТипаСтраницы;
		
		Если ИндексСтраницы > (СписокИменСтраниц.Количество()-1) Тогда
			ИндексСтраницы = СписокИменСтраниц.Количество()-1;
		ИначеЕсли ИндексСтраницы < 0 Тогда
			ИндексСтраницы = 0;
		КонецЕсли;
		
		
		ИмяСтраницы = СписокИменСтраниц[ИндексСтраницы].Значение;
		
		Если ИмяСтраницы = "СтраницаПодключаемоеОборудование" Тогда
			ВосстановитьЭлементыНастройкиКассыККМ();
			ВосстановитьЭлементыНастройкиЭквайринговыйТерминал();
		КонецЕсли;
		
		Если ИтераторСменыТипаСтраницы = -1
			И ИмяСтраницы = "СтраницаПодключаемоеОборудование"
			И ИмяТекущейСтраницы = "СтраницаКассаККМ" Тогда
			ИндексСтрокиПодключаемоеОборудование = Объект.ТаблицаПодключаемоеОборудование.Количество();
		КонецЕсли;
		
		Если ИтераторСменыТипаСтраницы = -1
			И ИмяСтраницы = "СтраницаКассаККМ"
			И ИмяТекущейСтраницы = "СтраницаПодключаемоеОборудование" Тогда
			ИндексСтрокиОрганизации = Объект.Организации.Количество();
		КонецЕсли;
		
		ЗаполнениеДаннымиПерехода(ИмяСтраницы, ИтераторНаправления);
		
		ИмяПоследнейСтраницы = СписокИменСтраниц[СписокИменСтраниц.Количество()-1].Значение;
		
		ЭтоПоследняяСтраница = (ИмяТекущейСтраницы = ИмяПоследнейСтраницы) ;
		
		Если ЭтоПоследняяСтраница И (ИтераторСменыТипаСтраницы > 0) Тогда
			ЗакрытьПоследнююСтраницу();
		Иначе
			
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы[ИмяСтраницы]);
			ПриСменеСтраницы();
			
		КонецЕсли;
		
		ИндикаторИсполнения = ИндикаторИсполнения + ИтераторСменыТипаСтраницы;
		
		Если ИмяСтраницы = Элементы.СтраницаНастройкаРМКФормированиеЧека.Имя Тогда
			Если ПорядковыйНомерНастройки = 0 И НЕ ФормаРМКОткрыта Тогда
				ПорядковыйНомерНастройки = 1;
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("ПорядковыйНомер", ПорядковыйНомерНастройки);
				ПараметрыОткрытияФормы.Вставить("НастройкаРМК", НастройкаРМК);
				ПараметрыОткрытияФормы.Вставить("ПарольИзменен", ПарольСервераЛояльностиИзменен);
				ПараметрыОткрытияФормы.Вставить("ПарольСервераЛояльности", ПарольСервераЛояльности);
				ПараметрыОткрытияФормы.Вставить("МодифицированностьРеквизитовРМК", МодифицированностьРеквизитовРМК);
				ПараметрыОткрытияФормы.Вставить("ПомощникРМК", Истина);
				ОткрытьФорму("ОбщаяФорма.НастройкиРабочегоМестаКассира",ПараметрыОткрытияФормы,
					ЭтаФорма,УникальныйИдентификатор,ЭтаФорма.Окно);
				ФормаРМКОткрыта = Истина;
			Иначе
				ПорядковыйНомерНастройки = 1;
			КонецЕсли;
		ИначеЕсли ИмяСтраницы = Элементы.СтраницаНастройкаРМКСкупка.Имя Тогда
			ПорядковыйНомерНастройки = 2;
		ИначеЕсли ИмяСтраницы = Элементы.СтраницаНастройкаРМКСкидкиИОкругления.Имя Тогда
			ПорядковыйНомерНастройки = 3;
		ИначеЕсли ИмяСтраницы = Элементы.СтраницаНастройкаРМКОплаты.Имя Тогда
			ПорядковыйНомерНастройки = 4;
		ИначеЕсли ИмяСтраницы = Элементы.СтраницаНастройкиРМКФормированиеЧека.Имя Тогда
			ПорядковыйНомерНастройки = 5;
		ИначеЕсли ИмяСтраницы = Элементы.СтраницаНастройкаРМКИнтерфейс.Имя Тогда
			ПорядковыйНомерНастройки = 6;
		ИначеЕсли ИмяСтраницы = Элементы.СтраницаНастройкаРМКГорячиеКлавиши.Имя Тогда
			ПорядковыйНомерНастройки = 7;
		ИначеЕсли ИмяСтраницы = Элементы.СтраницаНастройкаРМКБыстрыеТовары.Имя Тогда
			ПорядковыйНомерНастройки = 8;
			НастройкаЗавершена = Ложь;
		ИначеЕсли ИмяСтраницы = Элементы.СтраницаНастройкиРМК.Имя Тогда
			ПорядковыйНомерНастройки = 0;
			Если ИтераторНаправления = 1 Тогда
				НастройкаЗавершена = Истина;
			Иначе
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("ПорядковыйНомер", ПорядковыйНомерНастройки);
				ПараметрыОткрытияФормы.Вставить("НастройкаРМК", НастройкаРМК);
				ПараметрыОткрытияФормы.Вставить("ПарольИзменен", ПарольСервераЛояльностиИзменен);
				ПараметрыОткрытияФормы.Вставить("ПарольСервераЛояльности", ПарольСервераЛояльности);
				ПараметрыОткрытияФормы.Вставить("МодифицированностьРеквизитовРМК", МодифицированностьРеквизитовРМК);
				ПараметрыОткрытияФормы.Вставить("ПомощникРМК", Истина);
				ОткрытьФорму("ОбщаяФорма.НастройкиРабочегоМестаКассира",ПараметрыОткрытияФормы,
					ЭтаФорма,УникальныйИдентификатор,ЭтаФорма.Окно);
				ФормаРМКОткрыта = Истина;
			КонецЕсли;
		Иначе
			ПорядковыйНомерНастройки = 0;
		КонецЕсли;
		
	
		Если ИмяСтраницы = "СтраницаСБП" Тогда

			// при перехода на страницу выводить печатную форму QR-кода
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОбработкаЭлементаФормыПомощника(
				ЭтотОбъект, 
				Элементы.ПечатьQRКода, 
				Элементы.ПечатьQRКода.Имя);
			
		ИначеЕсли ИмяСтраницы = "СтраницаКассаККМ" Тогда
			ПересчитатьФормуНаСервере();
		КонецЕсли;
		
	Иначе
		
		Если ИмяТекущейСтраницы = Элементы.СтраницаТорговыйОбъектОрганизация.Имя Тогда
			
			СписокИменСтраницДляСокращеннойНастройки = ИменаСтраницДляСокращеннойНастройки();
			СписокИменСтраниц.Очистить();
			
			Для Каждого Имя Из СписокИменСтраницДляСокращеннойНастройки Цикл
				СписокИменСтраниц.Добавить(Имя);
			КонецЦикла;
			
			ВведеныНастройкиПользователей = 
				ДанныеПользователей.Количество() > 0 ИЛИ КоличествоСтрокСПустымиКодамиДоступаПользователей > 0;
				
			Если ВведеныНастройкиПользователей Тогда
				ТекущаяСтраница = Элементы.СтраницаНастройкиДанныхПользователей;
			ИначеЕсли КоличествоПользователей = 0 Тогда
				ТекущаяСтраница = Элементы.СтраницаОтсутствияИсходныхДанныхПользователей;
			Иначе
				ТекущаяСтраница = Элементы.СтраницаУспешнойНастройкиПользователей;
			КонецЕсли;
			
			Элементы.СтраницыПанелиНастройкиПользователей.ТекущаяСтраница = ТекущаяСтраница;
			
		ИначеЕсли ИмяТекущейСтраницы = Элементы.СтраницаНастройкиПользователей.Имя Тогда

			ИндексСтрокиПодключаемоеОборудование	= -1;
			ИндексСтрокиОрганизации					= -1;
			ИндексСтрокиКасса						= -1;
			
			Элементы.ИндикаторИсполнения.МаксимальноеЗначение = СписокИменСтраниц.Количество() - 1;
			
			НастроитьСтраницуОтображенияНастроекРМК();
			
		КонецЕсли;
		
		ИндексСтраницы = СписокИменСтраниц.Индекс(СписокИменСтраниц.НайтиПоЗначению(ИмяТекущейСтраницы));
		ИндексСтраницы = ИндексСтраницы + ИтераторСменыТипаСтраницы;
		
		Если ИндексСтраницы > (СписокИменСтраниц.Количество()-1) Тогда
			ИндексСтраницы = СписокИменСтраниц.Количество()-1;
		ИначеЕсли ИндексСтраницы < 0 Тогда
			ИндексСтраницы = 0;
		КонецЕсли;
		
		ИмяСтраницы = СписокИменСтраниц[ИндексСтраницы].Значение;
		
		ЗаполнениеДаннымиПерехода(ИмяСтраницы, ИтераторНаправления);
		
		ИмяПоследнейСтраницы = СписокИменСтраниц[СписокИменСтраниц.Количество()-1].Значение;
		
		ЭтоПоследняяСтраница = (ИмяТекущейСтраницы = ИмяПоследнейСтраницы) ;
		
		Если ЭтоПоследняяСтраница И (ИтераторСменыТипаСтраницы > 0) Тогда
			ЗакрытьПоследнююСтраницу();
		Иначе
			
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы[ИмяСтраницы]);
			ПриСменеСтраницы();
			
		КонецЕсли;
		
		ИндикаторИсполнения = ИндикаторИсполнения + ИтераторСменыТипаСтраницы;
		
		Если ИмяСтраницы = Элементы.СтраницаНастройкиРМК.Имя Тогда
			ФормаРМКОткрыта = Истина;
			НастройкаЗавершена = Истина;
			ОткрытьФорму("ОбщаяФорма.НастройкиРабочегоМестаКассира",,
				ЭтаФорма,УникальныйИдентификатор,ЭтаФорма.Окно);
			
		КонецЕсли;
			
	КонецЕсли;
	АктивизироватьЭлементФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьПерехода(ИмяТекущейСтраницы, Отказ)
	
	ОчиститьСообщения();
	
	Если ИмяТекущейСтраницы = "СтраницаНастройкаСинхронизацииДанных"
		И НЕ ОбменНастроен Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для перехода далее необходимо настроить синхронизацию данных'"),,,, Отказ);
			
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаКассаККМ" Тогда
		
		ТекущиеДанные = Элементы.Организации.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КассаККМ) Тогда
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Не создана касса ККМ'"),
					Объект.КассаККМ, "Элементы.Организации.ТекущиеДанные.КассаККМ",, Отказ);
					
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницы = "СтраницыПанелиНастройкиПользователей" Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Пожалуйста, создайте пользователей'"));
		НедостаточноДанных =ДанныеПользователей.Количество() = 0 И КоличествоСтрокСПустымиКодамиДоступаПользователей = 0;
		
		Если НедостаточноДанных Тогда
			Отказ = Истина;
		КонецЕсли;
		
		ИначеЕсли ИмяТекущейСтраницы = "СтраницаПодключаемоеОборудование" Тогда
		
		Если Модифицированность Тогда
			
			ОповещениеОНамеренииПерехода =
				Новый ОписаниеОповещения("ПродолжитьБезСохраненияПодключаемогоОборудования",
				ЭтотОбъект);
			
			ПоказатьВопрос(ОповещениеОНамеренииПерехода,
				НСтр("ru = 'Изменения не будут сохранены. Продолжить?'"),
				РежимДиалогаВопрос.ДаНет);
			Отказ = Истина;
			
		КонецЕсли;

		
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаНастройкиРМК" Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеДаннымиПерехода(ИмяСтраницы, ИтераторНаправления)
	
	ПараметрыКлиент = Новый Структура();
	
	Если ИмяСтраницы = "СтраницаТорговыйОбъектОрганизация" Тогда
		
		ОбновитьИнтерфейсПрограммы();
		
		Если НЕ НесколькоОрганизаций Тогда
			
			ПерезаполнитьТаблицуОрганизаций = Ложь;
			
			Если НЕ Объект.Организации.Количество() = 1 Тогда
				ПерезаполнитьТаблицуОрганизаций = Истина;
			ИначеЕсли Объект.Организации.Количество() >= 0
				И НЕ Объект.Организации[0].Организация = Объект.Организация Тогда
				ПерезаполнитьТаблицуОрганизаций = Истина;
			КонецЕсли;
			
			Если ПерезаполнитьТаблицуОрганизаций Тогда
				ЗаполнитьТаблицуОрганизацийПоОднойОрганизации();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницы = "СтраницаТипыОборудования" Тогда
		
		ОбновитьРабочееМестоКлиента(ПараметрыКлиент);
		
		ИндексСтрокиПодключаемоеОборудование = -1;
		ИндексСтрокиОрганизации = -1;
		
	КонецЕсли;
	
	Если ИмяСтраницы = "СтраницаПодключаемоеОборудование" Тогда
		ИндексСтрокиОрганизации = -1;
	КонецЕсли;
	
	Если ИмяСтраницы = "СтраницаКассаККМ" Тогда
		
		Если НЕ ИспользоватьПодключаемоеОборудование Тогда
			ОбновитьРабочееМестоКлиента(ПараметрыКлиент);
		КонецЕсли;
		
		ИндексСтрокиКасса = -1;
	КонецЕсли;
	
	Если ИмяСтраницы = "СтраницаНастройкаСервераЛояльности" Тогда
		ЗаполнитьДанныеСервераЛояльности();
	КонецЕсли;
	
	Если ИмяСтраницы = "СтраницаФинал" Тогда
		ЗаполнитьОтчет();
	КонецЕсли;
	
	ЗаполнениеДаннымиПереходаСервер(ИмяСтраницы, ИтераторНаправления, ПараметрыКлиент);
	
	Если ИмяСтраницы = "СтраницаПодключаемоеОборудование" Тогда
		ОбновитьИнформациюДрайвераОборудования(ДрайверОборудования);
	ИначеЕсли ИмяСтраницы = "СтраницаЭквайринговыеТерминалы" Тогда
		ПриИзмененииСтраницыЭквайринговыхТерминалов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеСтраницы()
	
	ИмяТекущейСтраницы			= Элементы.Страницы.ТекущаяСтраница.Имя;
	ИмяПервойСтраницы			= СписокИменСтраниц[0].Значение;
	ИмяПоследнейСтраницы		= СписокИменСтраниц[СписокИменСтраниц.Количество()-1].Значение;
	Элементы.Назад.Доступность	= НЕ ИмяТекущейСтраницы = ИмяПервойСтраницы;
	
	ЭтоПоследняяСтраница = ИмяТекущейСтраницы = ИмяПоследнейСтраницы;
	
	Элементы.Далее.Заголовок = ?(ЭтоПоследняяСтраница, НСтр("ru = 'Готово'"), НСтр("ru = 'Далее'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРабочееМестоКлиента(ПараметрыКлиент)
	
	Если НЕ ЗначениеЗаполнено(Объект.РабочееМесто) Тогда
		
		МенеджерОборудованияРМККлиент.ОбновитьРабочееМестоПользователя();
		Объект.РабочееМесто = МенеджерОборудованияКлиент.РабочееМестоКлиента();
		
	КонецЕсли;
	
	ПараметрыКлиент.Вставить("ИмяКомпьютера");
	ПараметрыКлиент.Вставить("ИдентификаторКлиента");
	
	#Если Не ВебКлиент Тогда
		ПараметрыКлиент.ИмяКомпьютера = ИмяКомпьютера();
	#КонецЕсли
	
	ПараметрыКлиент.ИдентификаторКлиента = МенеджерОборудованияКлиентСервер.ИдентификаторКлиентаДляРабочегоМеста();

КонецПроцедуры

&НаСервере
Процедура ЗаполнениеДаннымиПереходаСервер(ИмяСтраницы, ИтераторНаправления, ПараметрыКлиент)
	
	Если СтрНайти(Элементы.ДекорацияОтсутствующиеДанные.Заголовок, "%data%") > 0
		И (ИмяСтраницы = "СтраницаЗапускаПомощникаНастройкиОбмена"
		ИЛИ ИмяСтраницы = "СтраницаТорговыйОбъектОрганизация") Тогда
		
		ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьПодключаемоеОборудование");
		ИспользоватьПодключаемоеОборудование = Константы[ИмяКонстанты].Получить(); 
		
		Запрос = Новый Запрос;
		
		УстановитьТекстЗапросаОрганизацийИПодразделений(Запрос);
		Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
			ТекстОшибки = НСтр("ru = 'Не сформирован запрос для получения данных предприятия.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ПакетныйРезультат = Запрос.ВыполнитьПакет();
		КоличествоПакетов = ПакетныйРезультат.Количество();
		
		ВыборкаОрганизаций = ПакетныйРезультат[КоличествоПакетов - 3].Выбрать();
		ВыборкаТорговыхОбъектов = ПакетныйРезультат[КоличествоПакетов - 2].Выбрать();
		ВыборкаКассККМ = ПакетныйРезультат[КоличествоПакетов - 1].Выбрать();
		
		КоличествоОрганизаций = ВыборкаОрганизаций.Количество();
		КоличествоТорговыхОбъектов = ВыборкаТорговыхОбъектов.Количество();
		КоличествоКассККМ = ВыборкаКассККМ.Количество();
		
		НачатьНастройкуРМК  = КоличествоОрганизаций И КоличествоТорговыхОбъектов И КоличествоКассККМ;
		
		Элементы.ГруппаИнформированияОНехваткеДанных.Видимость = НЕ НачатьНастройкуРМК;
		
		Если НЕ НачатьНастройкуРМК Тогда
			
			ДанныеДополненияПодсказки = ОбщегоНазначенияРМККлиентСервер.ДанныеДополненияПредупреждения();

			// АПК:1036-выкл подстрока имени метаданных, обрамленная в кавычки
			ДанныеДополненияОпределены = ЗначениеЗаполнено(ДанныеДополненияПодсказки);
			ПустаяСтрока = НСтр("ru = ''");
			
			ПодстрокаОтсутствияОрганизаций = ПустаяСтрока;
			Если КоличествоОрганизаций = 0 Тогда
				
				ПодстрокаОтсутствияОрганизаций = ?(ДанныеДополненияОпределены
				 И ДанныеДополненияПодсказки.Свойство("Организации"),
				 	ДанныеДополненияПодсказки.Организации,
					СтрШаблон(" %1 ", НСтр("ru = '""Организации""'")));

			КонецЕсли;
				
			ПодстрокаОтсутствияТорговыхОбъектов = ПустаяСтрока;
			Если КоличествоТорговыхОбъектов = 0 Тогда
				
				ПодстрокаОтсутствияТорговыхОбъектов = ?(ДанныеДополненияОпределены
				 И ДанныеДополненияПодсказки.Свойство("ТорговыеОбъекты"),
				 	ДанныеДополненияПодсказки.ТорговыеОбъекты,
					СтрШаблон(" %1 ", НСтр("ru = '""Торговые объекты""'")));
				
			КонецЕсли;
				
			ПодстрокаОтсутствияКассККМ = ПустаяСтрока;
			Если КоличествоКассККМ = 0 Тогда
				
				ПодстрокаОтсутствияКассККМ = ?(ДанныеДополненияОпределены
				 И ДанныеДополненияПодсказки.Свойство("КассыККМ"),
				 	ДанныеДополненияПодсказки.КассыККМ,
					СтрШаблон(" %1 ", НСтр("ru = '""Кассы ККМ""'")));
				
			КонецЕсли;
		
		// АПК:1036-вкл
		
			ПодробныеСведенияОбОтсутствииДанных = СтрШаблон(НСтр("ru = '%1%2%3%4%5'"),
				ПодстрокаОтсутствияОрганизаций,
			?(ПустаяСтрока(ПодстрокаОтсутствияОрганизаций), ПодстрокаОтсутствияОрганизаций, Символы.ПС),
				ПодстрокаОтсутствияТорговыхОбъектов,
			?(ПустаяСтрока(ПодстрокаОтсутствияТорговыхОбъектов), ПодстрокаОтсутствияТорговыхОбъектов, Символы.ПС),
				ПодстрокаОтсутствияКассККМ);
			
			Элементы.ДекорацияОтсутствующиеДанные.Заголовок =
			СтрЗаменить(Элементы.ДекорацияОтсутствующиеДанные.Заголовок,
				"%data%",ПодробныеСведенияОбОтсутствииДанных);
			Возврат;
			
		КонецЕсли;
		
		
		Если НЕ ЗначениеЗаполнено(Объект.ТорговыйОбъект) Тогда
			
			Если КоличествоТорговыхОбъектов = 1 И ВыборкаТорговыхОбъектов.Следующий() Тогда
				Объект.ТорговыйОбъект = ВыборкаТорговыхОбъектов.Ссылка;
			КонецЕсли;
			
			ТорговыйОбъектПриИзмененииСервер();
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	НЕ Организации.ПометкаУдаления";
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
				
				НесколькоОрганизаций = Ложь;
				Объект.Организация = Выборка.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.Организация.ТолькоПросмотр = (КоличествоОрганизаций <= 1);
		Элементы.ТорговыйОбъект.ТолькоПросмотр = (КоличествоТорговыхОбъектов <= 1);
		
		Элементы.КассыККМОрганизация.Видимость = (КоличествоОрганизаций > 1);
		Элементы.КассыККМТорговыйОбъект.Видимость = (КоличествоТорговыхОбъектов > 1);
		
		Если КоличествоОрганизаций = 1 И КоличествоОрганизаций = КоличествоТорговыхОбъектов Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(КассыККМ,
			"Организация", Объект.Организация, ВидСравненияКомпоновкиДанных.Равно,, Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(КассыККМ,
			"ТорговыйОбъект", Объект.ТорговыйОбъект, ВидСравненияКомпоновкиДанных.Равно,, Истина);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницы = "СтраницаВидыОплат" Тогда
		
		Запрос = Новый Запрос;
		ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросИспользуемыеВидыОплат(Запрос, ЭтотОбъект);
		Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
			ТекстОшибки = НСтр("ru = 'Не сформирован запрос для определения используемых видов оплат.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(КонстантыНабор, Выборка)
		КонецЕсли;
		
		ПрименитьОтборПоТипуОплатыКСпискуВидовОплат();
		ДоступностьКнопокВидовОплаты();
		
	ИначеЕсли ИмяСтраницы = "СтраницаТипыОборудования" Тогда
		ЗаполнитьДанныеПоТипамОборудования();
	ИначеЕсли ИмяСтраницы = "СтраницаПодключаемоеОборудование" Тогда
		
		Если ИндексСтрокиПодключаемоеОборудование = -1 Тогда
			ЗаполнитьТаблицуПодключаемогоОборудования();
		Иначе
			ИндексСтрокиПодключаемоеОборудование = ИндексСтрокиПодключаемоеОборудование + ИтераторНаправления;
		КонецЕсли;
		
		СтрокаТаблицы = Объект.ТаблицаПодключаемоеОборудование[ИндексСтрокиПодключаемоеОборудование];
		
		ОборудованиеОрганизация = СтрокаТаблицы.Организация;
		Элементы.ОборудованиеОрганизация.Видимость = ЗначениеЗаполнено(ОборудованиеОрганизация);
		Элементы.ПодключаемоеОборудование.Видимость = ЗначениеЗаполнено(ОборудованиеОрганизация);
		
		ПодключаемоеОборудование = СтрокаТаблицы.ПодключаемоеОборудование;
		ТекущийТипОборудования = СтрокаТаблицы.ТипОборудования;
		
		Если НЕ (ЗначениеЗаполнено(ПодключаемоеОборудование)
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.ДрайверОборудованияПоУмолчанию)) Тогда
			Элементы.ДекорацияДрайверСообщенияУспех.Заголовок = НСтр("ru = ''");
		КонецЕсли;
		
		
		ПараметрыВыбораЭлемента = Новый Массив;
		
		ОтображатьСозданиеККТ = ТекущийТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор И ИспользуемоеККТ = 0;
		Элементы.НастройкаПодключенияККМ.Видимость = ОтображатьСозданиеККТ;
		
		ОтображатьСозданиеЭТ = ТекущийТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал И ИспользуемыеЭквайринговыеТерминалы = 0;
		
		Элементы.ГруппаНастройкаПодключениеЭквайринговогоТерминала.Видимость = ОтображатьСозданиеЭТ;
		Элементы.ГруппаПодключаемоеОборудованиеВертикальная.Видимость = НЕ ОтображатьСозданиеЭТ И НЕ ОтображатьСозданиеККТ;
		Если ТекущийТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор 
			ИЛИ ТекущийТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал Тогда
				Элементы.ПодключаемоеОборудование.КнопкаСоздания = Истина;
		Иначе
				Элементы.ПодключаемоеОборудование.КнопкаСоздания = Ложь;
		КонецЕсли;
		Если ТекущийТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор Тогда
			ЗаполнитьКассыККМ();
			
			ПодключаемоеОборудованиеККМ = Справочники.ПодключаемоеОборудование.ПустаяСсылка();
			ИндексСтрокиОрганизации = ?(ИндексСтрокиОрганизации < 0, 0, ИндексСтрокиОрганизации);
			Объект.Организации[ИндексСтрокиОрганизации].Свойство("ПодключаемоеОборудование", ПодключаемоеОборудованиеККМ);
			
			Если ЗначениеЗаполнено(ПодключаемоеОборудованиеККМ) Тогда
				ПодключаемоеОборудование = ПодключаемоеОборудованиеККМ;
				Элементы.НастройкаПодключенияККМ.Видимость = Ложь;
				Элементы.ГруппаПодключаемоеОборудованиеВертикальная.Видимость = Истина;
			Иначе
				НастраиваемаяОрганизация = Объект.Организации[ИндексСтрокиОрганизации];
				ТекущаяКассаККМ = НастраиваемаяОрганизация.КассаККМ;
			КонецЕсли;
			
			МассивТиповПО = Новый Массив;
			МассивТиповПО.Добавить(ТекущийТипОборудования);
			МассивТиповПО.Добавить(Перечисления.ТипыПодключаемогоОборудования.ККТ);
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипОборудования", Новый ФиксированныйМассив(МассивТиповПО));
			СписокДрайверов = ПолучитьСписокДрайверовПоМассиву(МассивТиповПО);
			
		Иначе
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипОборудования", ТекущийТипОборудования);
			СписокДрайверов = ПолучитьСписокДрайверов(ТекущийТипОборудования);
			
		КонецЕсли;
		
		ПараметрыВыбораЭлемента.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.УстройствоИспользуется", Истина);
		ПараметрыВыбораЭлемента.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.РабочееМесто", Объект.РабочееМесто);
		ПараметрыВыбораЭлемента.Добавить(НовыйПараметр);
		
		Элементы.ПодключаемоеОборудование.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
		
		Элементы.ДрайверОборудования.СписокВыбора.Очистить();
		
		Для каждого СтрокаСписка Из СписокДрайверов Цикл
			Элементы.ДрайверОборудования.СписокВыбора.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
		КонецЦикла;
		
		ЗаполнитьСоответствияСообщений();
		ПодключаемоеОборудованиеЗаголовок = СоответствиеЗаголовка.Получить(ТекущийТипОборудования);
		
		ПриИзмененииПодключаемоеОборудование();
		
	ИначеЕсли ИмяСтраницы = "СтраницаКассаККМ" Тогда
		
		ТекстПодсказки = НСтр("ru ='Фискальный регистратор или АСПД, принтер чеков. 
		|Используется при печати чека на устройстве, подключенном к системе, на фискальном регистраторе
		| или АСПД (автоматизированной системе печати документов), принтере чеков.
		|
		|ККМ без подключения оборудования.
		| Используется при применении автономного фискального регистратора
		| или при продажах без обязательной печати фискального чека.'");
		
		Элементы.ОрганизацииТипКассы.Подсказка = ТекстПодсказки;
		
		Если ИндексСтрокиОрганизации <= 0 И Объект.Организации.Количество() > 0 Тогда
			
			ИндексСтрокиОрганизации = Объект.Организации.Индекс(Объект.Организации[0]);
			ЗаполнитьКассыККМ();
			
		Иначе
			ИндексСтрокиОрганизации = ИндексСтрокиОрганизации + ИтераторНаправления;
		КонецЕсли;
		
		Если Объект.Организации.Количество() > 0 И ИндексСтрокиОрганизации >= 0 Тогда
		
			СтрокаТаблицы = Объект.Организации[ИндексСтрокиОрганизации];
			
			ОрганизацияКассаККМ = СтрокаТаблицы.Организация;
			
			Элементы.Организации.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
			
			ЗаполнитьСтраницуКассыККМ(СтрокаТаблицы);
			
			ПриИзмененииКассыККМСервер(СтрокаТаблицы);
			
		КонецЕсли;

		
	ИначеЕсли ИмяСтраницы = "СтраницаЭквайринговыеТерминалы" Тогда
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭквайринговыеТерминалы,
			"Организация", Объект.Организация,
			ВидСравненияКомпоновкиДанных.Равно,, Истина);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ТорговыйОбъект) Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭквайринговыеТерминалы,
			"ТорговыйОбъект",
			Объект.ТорговыйОбъект,
			ВидСравненияКомпоновкиДанных.Равно,, Истина);
			
		КонецЕсли;
		
		ЗаполнитьЭквайринговыеТерминаловСПустымиТарифамиЗаОбслуживание();
		
	ИначеЕсли ИмяСтраницы = "СтраницаНастройкиРМК" Тогда	
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество записей запретов продаж
&НаСервереБезКонтекста
Функция КоличествоЗаписейЗапретовПродаж()
	Возврат ОбщегоНазначенияРМК.КоличествоЗаписейЗапретовПродаж();
КонецФункции

&НаСервере
Процедура УправлениеВидимостьюПодсказкиДоступностьюКнопкиПерехода(КоличествоКассККМПоОтбору)
	
	УправляющиеПоляЗаполнены = ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.ТорговыйОбъект);
		
	ДанныеДополненияПодсказки = ОбщегоНазначенияРМККлиентСервер.ДанныеДополненияПредупреждения();
	ПодстрокаОтсутствияКассККМ = ?(ЗначениеЗаполнено(ДанныеДополненияПодсказки)
		И ДанныеДополненияПодсказки.Свойство("КассыККМ"),
	 	ДанныеДополненияПодсказки.КассыККМ,
		СтрШаблон(" %1 ", НСтр("ru = '""Кассы ККМ""'")));
		
	Элементы.Далее.Доступность = УправляющиеПоляЗаполнены И КоличествоКассККМПоОтбору;
	Элементы.ДекорацияОтсутствующиеДанные.Заголовок = ПодстрокаОтсутствияКассККМ;
	Элементы.ГруппаИнформированияОНехваткеДанных.Видимость = (КоличествоКассККМПоОтбору < 1)
		И УправляющиеПоляЗаполнены;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементыОформления = УсловноеОформление.Элементы;
	ЭлементыОформления.Очистить();
	ЭлементОформления = ЭлементыОформления.Добавить();
	Элемент = ЭлементыОформления.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭквайринговыеТерминалы.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ЭквайринговыеТерминалыНедействителен.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИтогиФонГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Изменяет элемент отбора динамического списка.
//
// Параметры:
//  Список - ДинамическийСписок - обрабатываемый динамический список.
//  ИмяПоля - Строка - наименование поля компоновки данных.
//  ПравоеЗначение - ПравоеЗначение - значение, которое нужно установить.
//  Установить - Булево - признак необходимости установить отбор.
//  ВидСравнения - ВидСравнения - вид сравнения отбора, по умолчанию - Равно.
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь,
	ВидСравнения = Неопределено)
	
	НаборЭлементов = Список.КомпоновщикНастроек.Настройки.Отбор;
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(НаборЭлементов, ИмяПоля,,
		ПравоеЗначение, ВидСравнения, Установить);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСсылкуВБуфер()
		
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОбработкаЭлементаФормыПомощника(
		ЭтотОбъект, 
		ЭтотОбъект.Команды.КопироватьВБуферСБП, 
		ЭтотОбъект.Команды.КопироватьВБуферСБП.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаОбщиеПараметры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
		
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура КонстантыНаборИспользоватьОплатуПлатежнымиСистемамиПриИзменении(Элемент)
	ИспользоватьОплатуПлатежнымиСистемамиПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ПрефиксШтрихкодаВесовогоТоварПриИзмененииНаСервере(ПрефиксШтрихкодаВесовогоТовара)
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ПрефиксШтрихкодаВесовогоТовара");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ПрефиксШтрихкодаВесовогоТовара);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксШтрихкодаВесовогоТоварПриИзменении(Элемент)
	ПрефиксШтрихкодаВесовогоТоварПриИзмененииНаСервере(ПрефиксШтрихкодаВесовогоТовара);
КонецПроцедуры

&НаСервере
Процедура ПрефиксШтрихкодаШтучногоФасованногоТоварПриИзмененииНаСервере(ПрефиксШтрихкодаШтучногоФасованногоТовара)
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ПрефиксШтрихкодаФасованногоТовара");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ПрефиксШтрихкодаШтучногоФасованногоТовара);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксШтрихкодаШтучногоФасованногоТоварПриИзменении(Элемент)
	ПрефиксШтрихкодаШтучногоФасованногоТоварПриИзмененииНаСервере(ПрефиксШтрихкодаШтучногоФасованногоТовара);
КонецПроцедуры

&НаСервере
Процедура ШаблонШтрихкодаТоварПриИзмененииНаСервере(ШаблонШтрихкодаТовара)
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ШаблонШтрихкодаВесовыхТоваров");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ШаблонШтрихкодаТовара)
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонШтрихкодаТоварПриИзменении(Элемент)
	ШаблонШтрихкодаТоварПриИзмененииНаСервере(ШаблонШтрихкодаТовара);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(ТекущаяНастройкаРМКВидОтображения) Тогда
		ТекущаяНастройкаРМКВидОтображения = Перечисления.ВидыОтображения.Стандартный;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущаяНастройкаРМКПечататьБумажныйЧек) Тогда
		ТекущаяНастройкаРМКПечататьБумажныйЧек = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСтраницНаСтартовойСтранице()
	
	СписокИменСтраниц.Очистить();
	
	Для Каждого ПодчиненныйЭлемент Из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		Если Не Элементы[ПодчиненныйЭлемент.Имя].Видимость Тогда
			
			Продолжить;
				
		ИначеЕсли ПодчиненныйЭлемент.Имя = "СтраницаЗапускаПомощникаНастройкиОбмена" Тогда
			
			Если ОбменНастроен Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ПодчиненныйЭлемент.Имя = "СтраницаНастройкаСинхронизацииДанных" Тогда
			
			Если Не ОбменНастроен Тогда
				СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
			КонецЕсли;
			
		ИначеЕсли ПодчиненныйЭлемент.Имя = "СтраницаПодключаемоеОборудование" Тогда
			
			Если ИспользоватьПодключаемоеОборудование Тогда
				СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
			КонецЕсли;
			
		ИначеЕсли ПодчиненныйЭлемент.Имя = "СтраницаТипыОборудования" Тогда
			
			Если ИспользоватьПодключаемоеОборудование Тогда
				СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
			КонецЕсли;
			
		ИначеЕсли ПодчиненныйЭлемент.Имя = "СтраницаЭквайринговыеТерминалы" Тогда
			
			Если ИспользоватьОплатуПлатежнымиКартами Тогда
				СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
			КонецЕсли;
			
		ИначеЕсли ПодчиненныйЭлемент.Имя = "СтраницаНастройкиПользователей" Тогда
			
			ВведеныНастройкиПользователей = (ДанныеПользователей.Количество() > 0
				ИЛИ КоличествоСтрокСПустымиКодамиДоступаПользователей > 0);
			
			Если ВведеныНастройкиПользователей Тогда
				ТекущаяСтраница = Элементы.СтраницаНастройкиДанныхПользователей;
			ИначеЕсли КоличествоПользователей = 0 Тогда
				ТекущаяСтраница = Элементы.СтраницаОтсутствияИсходныхДанныхПользователей;
			Иначе
				ТекущаяСтраница = Элементы.СтраницаУспешнойНастройкиПользователей;
			КонецЕсли;
			
			Элементы.СтраницыПанелиНастройкиПользователей.ТекущаяСтраница	= ТекущаяСтраница;
			
			СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
			
		Иначе
			СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаТорговыйОбъектОрганизация

&НаКлиенте
Процедура ЗаполнитьТаблицуОрганизацийПоОднойОрганизации()
	
	КоличествоВТаблице = Объект.Организации.Количество();
	Если КоличествоВТаблице = 0 Тогда
		
		СтрокаОрганизаций = Объект.Организации.Добавить();
		СтрокаОрганизаций.Организация = Объект.Организация;
		
	Иначе
		
		Если КоличествоВТаблице > 1 Тогда
			
			Для Индекс = 1 По КоличествоВТаблице - 1 Цикл
				
				УдаляемыйИндекс = КоличествоВТаблице - Индекс;
				Объект.Организации.Удалить(УдаляемыйИндекс);
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокаОрганизаций = Объект.Организации[0];
		СтрокаОрганизаций.Организация = Объект.Организация;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ПрименитьОтборКСпискуКассККМ("Организация");
	КоличествоКассККМПоОтбору = КоличествоКассККМПоОтбору();
	УправлениеВидимостьюПодсказкиДоступностьюКнопкиПерехода(КоличествоКассККМПоОтбору);
	
КонецПроцедуры

&НаСервере
Процедура ТорговыйОбъектПриИзмененииСервер()
	
	ПрименитьОтборКСпискуКассККМ("ТорговыйОбъект");
	КоличествоКассККМПоОтбору = КоличествоКассККМПоОтбору();
	УправлениеВидимостьюПодсказкиДоступностьюКнопкиПерехода(КоличествоКассККМПоОтбору);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеКонстанты(КонстантаИмя, ТекущееЗначениеКонстанты)
	
	Если КонстантаИмя <> "" Тогда
		
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = ТекущееЗначениеКонстанты;
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПрименитьОтборКСпискуКассККМ(ИмяПоля)
	
	 Если ЗначениеЗаполнено(Объект[ИмяПоля]) Тогда
	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(КассыККМ,
			ИмяПоля, Объект[ИмяПоля], ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(КассыККМ, ИмяПоля);
	КонецЕсли;
	
	СоставноеИмяЭлемента = СтрШаблон(НСтр("ru = 'КассыККМ%1'"), ИмяПоля);
	Элементы[СоставноеИмяЭлемента].Видимость = НЕ ЗначениеЗаполнено(Объект[ИмяПоля]);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьОтборПоТипуОплатыКСпискуВидовОплат(ИмяПоля = "ТипОплаты")
	
	УстановитьОтбор = НЕ (ИспользоватьОплатуПлатежнымиКартами И ИспользоватьОплатуПлатежнымиСистемами);
	
	Исключения = Новый Массив;
	ИмяПеречисленияТиповОплат = "ТипыОплатЧекаККМ";
	ИмяКлассаМетаданных = "Перечисления";
	МетаданныеСуществуют = МетаданныеСуществуют(ИмяКлассаМетаданных, ИмяПеречисленияТиповОплат);
	
	Если НЕ ИспользоватьОплатуПлатежнымиКартами И МетаданныеСуществуют Тогда
		Исключения.Добавить(Перечисления[ИмяПеречисленияТиповОплат].ПлатежнаяКарта);
	КонецЕсли;
	
	Если УстановитьОтбор Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ВидыОплат,
			ИмяПоля, Исключения, ВидСравненияКомпоновкиДанных.НеВСписке,, Истина);
		
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(ВидыОплат, ИмяПоля);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КоличествоКассККМПоОтбору()

	КоличествоКасс = 0;
	
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.ТорговыйОбъект) Тогда
		
		Запрос = Новый Запрос;
		ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросКоличествоКассККМ(Запрос, ЭтотОбъект);
		Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
			ТекстОшибки = НСтр("ru = 'Не сформирован запрос для определения количества касс ККМ
								|с отбором по организации и торговому объекту.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат КоличествоКасс;
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		КоличествоКасс = Выборка.Количество();
	КонецЕсли;
	
	Возврат КоличествоКасс;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаТипыОборудования

&НаСервере
Процедура ЗаполнитьДекорациюПодключенногоОборудования(ТипОборудования, ТаблицаПоТипамОборудования, ИмяДекорации)
	
	СтрокаТаблицы = ТаблицаПоТипамОборудования.Найти(ТипОборудования, "ТипОборудования");
	
	ИспользуемоеОборудование = "0";
	ВсеОборудование = "0";
	
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		
		ИспользуемоеОборудование = Формат(СтрокаТаблицы.ИспользуемоеОборудование, "ЧН=0; ЧГ=0");
		ВсеОборудование = Формат(СтрокаТаблицы.ВсеОборудование, "ЧН=0; ЧГ=0");
		
		Если ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
			ИспользуемоеККТ = СтрокаТаблицы.ИспользуемоеОборудование;
		ИначеЕсли ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал Тогда
			ИспользуемыеЭквайринговыеТерминалы = СтрокаТаблицы.ИспользуемоеОборудование;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолужирноеНачертание = Истина;
	
	// АПК:1036-выкл нет подходящего шрифта
	ШрифтЖирный = Новый Шрифт(, 11, ПолужирноеНачертание);
	// АПК:1036-вкл
	
	СтрокаИспользуемогоОборудования = Новый ФорматированнаяСтрока(ИспользуемоеОборудование, ШрифтЖирный);
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(СтрокаИспользуемогоОборудования);
	МассивСтрок.Добавить("/" + ВсеОборудование);
	
	Элементы[ИмяДекорации].Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоТипамОборудования()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования,
	|	СУММА(1) КАК ВсеОборудование,
	|	СУММА(ВЫБОР
	|			КОГДА ПодключаемоеОборудование.УстройствоИспользуется
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользуемоеОборудование
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И НЕ ПодключаемоеОборудование.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККТ)
	|				ТОГДА ПодключаемоеОборудование.Организация = &Организация
	|	КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал)
	|				ТОГДА ПодключаемоеОборудование.Организация = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодключаемоеОборудование.ТипОборудования");
	
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Результат = Запрос.Выполнить();
	ТаблицаПоТипамОборудования =Результат.Выгрузить();
	
	ТипыОборудования = Перечисления.ТипыПодключаемогоОборудования;
	
	ЗаполнитьДекорациюПодключенногоОборудования(ТипыОборудования.СканерШтрихкода,
			ТаблицаПоТипамОборудования, "ДекорацияПОСканерШтрихкодов");
	
	ЗаполнитьДекорациюПодключенногоОборудования(ТипыОборудования.СчитывательМагнитныхКарт,
			ТаблицаПоТипамОборудования, "ДекорацияПОСчитывательМагнитныхКарт");

	ЗаполнитьДекорациюПодключенногоОборудования(ТипыОборудования.ККТ,
			ТаблицаПоТипамОборудования, "ДекорацияПОФискальныеРегистраторы");
	
	ЗаполнитьДекорациюПодключенногоОборудования(ТипыОборудования.ПринтерЧеков,
			ТаблицаПоТипамОборудования, "ДекорацияПОПринтерЧеков");
			
	ЗаполнитьДекорациюПодключенногоОборудования(ТипыОборудования.ЭквайринговыйТерминал,
			ТаблицаПоТипамОборудования,
			"ДекорацияПОЭквайринговыйТерминал");
	
	ЗаполнитьДекорациюПодключенногоОборудования(ТипыОборудования.ДисплейПокупателя,
			ТаблицаПоТипамОборудования, "ДекорацияПОДисплейПокупателей");
	
	ЗаполнитьДекорациюПодключенногоОборудования(ТипыОборудования.ЭлектронныеВесы,
			ТаблицаПоТипамОборудования, "ДекорацияПОЭлектронныеВесы");
		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаПодключаемоеОборудование

&НаКлиенте
Функция ЕстьНастройкиПО()

	Возврат НастройкаПОДисплейПокупателей
		ИЛИ НастройкаПОСканерШтрихкодов
		ИЛИ НастройкаПОСчитывательМагнитныхКарт
		ИЛИ НастройкаПОФискальныеРегистраторы
		ИЛИ НастройкаПОПринтерЧеков
		ИЛИ НастройкаПОЭквайринговыйТерминал
		ИЛИ НастройкаПОЭлектронныеВесы;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииРеквизитовОборудования()
	
	Модифицированность = Истина;
	
	Элементы.СоздатьИзменитьПодключаемоеОборудование.Доступность = Истина
	
КонецПроцедуры

&НаКлиенте
// Завершение настройки оборудования.
//
Процедура ВыполнитьНастройкуОборудованияЗавершение(Результат, Параметры) Экспорт
	ОбновитьИнформациюДрайвераОборудования(ДрайверОборудования);
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБезСохраненияПодключаемогоОборудования(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Модифицированность = Ложь;
		ВыполнитьДействияПереходаНаСтраницу(1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемоеОборудованиеПриИзменении(Элемент)
	
	ПодключаемоеОборудованиеПриИзмененииСервер();
	ПриИзмененииРеквизитовОборудования();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуУжеПодключенногоОборудования()
	
	ТаблицаУжеПодключенногоОборудования.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПодключаемоеОборудование.Ссылка КАК ПодключаемоеОборудование,
	|	ПодключаемоеОборудование.ТипОборудования,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|	ПодключаемоеОборудование.СерийныйНомер
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.УстройствоИспользуется
	|	И ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И НЕ ПодключаемоеОборудование.ПометкаУдаления
	|	И НЕ ПодключаемоеОборудование.ТипОборудования В (&МассивОборудованияЗависящегоОтОрганизаций)");
	
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	
	МассивОборудованияЗависящегоОтОрганизаций = Новый Массив;
	МассивОборудованияЗависящегоОтОрганизаций.Добавить(Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор);
	МассивОборудованияЗависящегоОтОрганизаций.Добавить(Перечисления.ТипыПодключаемогоОборудования.ККТ);
	МассивОборудованияЗависящегоОтОрганизаций.Добавить(Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал);
	
	Запрос.УстановитьПараметр("МассивОборудованияЗависящегоОтОрганизаций", МассивОборудованияЗависящегоОтОрганизаций);
	
	Результат = Запрос.Выполнить();
	ТаблицаУжеПодключенногоОборудования.Загрузить(Результат.Выгрузить());
	
	Запрос = Новый Запрос;
	ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросПодключенныеКассыККМ(Запрос, ЭтотОбъект);
	Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
		ТекстОшибки = НСтр("ru = 'Не сформирован запрос для заполнения подключенных касс ККМ.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ТаблицаУжеПодключенногоОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросПодключенныеЭквайринговыеТерминалы(Запрос, ЭтотОбъект);
	Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
		ТекстОшибки = НСтр("ru = 'Не сформирован запрос для заполнения подключенных эквайринговых терминалов.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ТаблицаУжеПодключенногоОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПодключаемоеОборудование()
	
	ЗаполнитьСоответствияСообщений();
	
	Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование)
		И Не ТекущийТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор
		И НЕ ТекущийТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал Тогда
		
		НаименованиеПодключаемоеОборудование = "";
		ДрайверОборудования = 
			Объект.ТаблицаПодключаемоеОборудование[ИндексСтрокиПодключаемоеОборудование].ДрайверОборудованияПоУмолчанию;
		Элементы.СоздатьИзменитьПодключаемоеОборудование.Заголовок = НСтр("ru = 'Создать экземпляр оборудования'"); 
		Элементы.СоздатьИзменитьПодключаемоеОборудование.Ширина = 0;
		Элементы.СоздатьИзменитьПодключаемоеОборудование.Доступность = Истина;
		СерийныйНомерПодключаемоеОборудование = "";
		Элементы.НастроитьОборудование.Видимость = Ложь;
		
	Иначе
		Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
			НаименованиеПодключаемоеОборудование = ПодключаемоеОборудование.Наименование;
		КонецЕсли;
		ДрайверОборудования = ПодключаемоеОборудование.ДрайверОборудования;
		СерийныйНомерПодключаемоеОборудование = ПодключаемоеОборудование.СерийныйНомер;
		Элементы.СоздатьИзменитьПодключаемоеОборудование.Заголовок = НСтр("ru = 'Записать настройки'");
		Элементы.СоздатьИзменитьПодключаемоеОборудование.Ширина = 15;
		Элементы.СоздатьИзменитьПодключаемоеОборудование.Доступность = Ложь;
		Если ЗначениеЗаполнено(ДрайверОборудования) Тогда
			Элементы.НастроитьОборудование.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПодсказкаВвода = Объект.РабочееМесто.Наименование;
	ПодсказкаВвода = ПодсказкаВвода + " (" + СоответствиеОкончанияНаименования.Получить(ТекущийТипОборудования) + ")";
	
	Элементы.НаименованиеПодключаемоеОборудование.СписокВыбора.Очистить();
	СтрокаНаименования = ПодсказкаВвода;
	НаименованиеПодключаемоеОборудование = ПодсказкаВвода;
	Элементы.НаименованиеПодключаемоеОборудование.СписокВыбора.Добавить(СтрокаНаименования);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Функция СоздатьИзменитьПодключаемоеОборудованиеНаСервере()

	ТипыОборудования = Перечисления.ТипыПодключаемогоОборудования;
	НаименованиеОборудования = ?(ЗначениеЗаполнено(НаименованиеПодключаемоеОборудование),
		НаименованиеПодключаемоеОборудование, Элементы.НаименованиеПодключаемоеОборудование.ПодсказкаВвода);
		
	Если ЭтоДубльОборудования(ПодключаемоеОборудование, НаименованиеОборудования) Тогда
		
		ПодключаемоеОборудование =
			ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПодключаемоеОборудование.ПустаяСсылка");
		Возврат ПодключаемоеОборудование;
		
	КонецЕсли;
		
	НачатьТранзакцию();
	
	Попытка

		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ПодключаемоеОборудование");
		БлокировкаДанных.Заблокировать();
		
		ПодключаемоеОборудованиеОбъект = ?(ЗначениеЗаполнено(ПодключаемоеОборудование),
			ПодключаемоеОборудование.ПолучитьОбъект(), Справочники.ПодключаемоеОборудование.СоздатьЭлемент());

		НаименованиеОборудования = ?(ЗначениеЗаполнено(НаименованиеПодключаемоеОборудование),
			НаименованиеПодключаемоеОборудование, Элементы.НаименованиеПодключаемоеОборудование.ПодсказкаВвода);
		ПодключаемоеОборудованиеОбъект.Наименование = НаименованиеОборудования;
		
		ПодключаемоеОборудованиеОбъект.ТипОборудования			= ДрайверОборудования.ТипОборудования;
		ПодключаемоеОборудованиеОбъект.ДрайверОборудования		= ДрайверОборудования;
		ПодключаемоеОборудованиеОбъект.РабочееМесто				= Объект.РабочееМесто;
		ПодключаемоеОборудованиеОбъект.УстройствоИспользуется	= Истина;
		ПодключаемоеОборудованиеОбъект.СерийныйНомер			= СерийныйНомерПодключаемоеОборудование;
		
		ПодключаемоеОборудованиеОбъект.ТипПодключения			=
			ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыПодключенияОборудования.ЛокальноеПодключение");
		
		Если ПодключаемоеОборудованиеОбъект.ТипОборудования	= ТипыОборудования.ККТ
			ИЛИ ПодключаемоеОборудованиеОбъект.ТипОборудования = ТипыОборудования.ЭквайринговыйТерминал Тогда
				ПодключаемоеОборудованиеОбъект.Организация		= ОборудованиеОрганизация;
		КонецЕсли;
		
		ПодключаемоеОборудованиеОбъект.Записать();
		
		ПодключаемоеОборудование = ПодключаемоеОборудованиеОбъект.Ссылка;
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации( НСтр("ru = 'Попытка записи подключаемого оборудования'",
			ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда

		СтрокаТаблицы = Объект.ТаблицаПодключаемоеОборудование[ИндексСтрокиПодключаемоеОборудование];
		СтрокаТаблицы.ПодключаемоеОборудование	= ПодключаемоеОборудование;
		СтрокаТаблицы.СерийныйНомер				= СерийныйНомерПодключаемоеОборудование;
		ПриИзмененииПодключаемоеОборудование();
		СкорректироватьТаблицуУжеПодключенногоОборудования(СтрокаТаблицы);
		
	КонецЕсли;
	
	
	Возврат ПолучитьНавигационнуюСсылку(ПодключаемоеОборудование);
	
КонецФункции

&НаСервере
Функция ЭтоДубльОборудования(ПроверяемаяСущность, Наименование)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ПроверяемаяСущность) И НЕ ПустаяСтрока(Наименование) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|    1
		|ИЗ
		|    Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|    ПодключаемоеОборудование.Наименование = &Наименование
		|    И ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
		|    И ПодключаемоеОборудование.Ссылка <> &Ссылка");
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
		Запрос.УстановитьПараметр("Ссылка", ПроверяемаяСущность);
		
		Результат = НЕ Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция ЭтоДубльОборудованияНаименования(Наименование)
	
	Результат = Ложь;
	
	Если НЕ ПустаяСтрока(Наименование) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	1 КАК Оборудование
		                      |ИЗ
		                      |	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		                      |ГДЕ
		                      |	ПодключаемоеОборудование.Наименование = &Наименование
		                      |	И ПодключаемоеОборудование.РабочееМесто = &РабочееМесто");
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
		
		Результат = НЕ Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура СкорректироватьТаблицуУжеПодключенногоОборудования(СтрокаТаблицыПО)
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ТипОборудования");
	СтруктураПоиска.Вставить("Организация");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицыПО);
	
	МассивПО = ТаблицаУжеПодключенногоОборудования.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаТаблицы Из МассивПО Цикл
		ТаблицаУжеПодключенногоОборудования.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаТаблицыПО.ПодключаемоеОборудование) Тогда
		
		СтрокаТаблицы = ТаблицаУжеПодключенногоОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТаблицыПО);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиПодключаемоеОборудования(ТипОборудования, ДрайверОборудованияПоУмолчанию = Неопределено,
	ЗависитОтОрганизации = Ложь)
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ТипОборудования", ТипОборудования);
	ЛокальноеПодключение = ОбщегоНазначения.
		ПредопределенныйЭлемент("Перечисление.ТипыПодключенияОборудования.ЛокальноеПодключение");
	
	Если ЗависитОтОрганизации Тогда
		
		Для каждого СтрокаТаблицыОрганизации Из Объект.Организации Цикл
			СтруктураПоиска.Вставить("Организация", СтрокаТаблицыОрганизации.Организация);
			МассивПО = ТаблицаУжеПодключенногоОборудования.НайтиСтроки(СтруктураПоиска);
			
			СтрокаТаблицы = Объект.ТаблицаПодключаемоеОборудование.Добавить();
			СтрокаТаблицы.ТипОборудования	= ТипОборудования;
			СтрокаТаблицы.Организация		= СтрокаТаблицыОрганизации.Организация;
			
			Если МассивПО.Количество() > 0 Тогда
				
				СтрокаТаблицы.ПодключаемоеОборудование	= МассивПО[0].ПодключаемоеОборудование;
				СтрокаТаблицы.СерийныйНомер				= МассивПО[0].СерийныйНомер;
				
			КонецЕсли;
			
			Если НЕ ДрайверОборудованияПоУмолчанию = Неопределено Тогда
				СтрокаТаблицы.ДрайверОборудованияПоУмолчанию = ДрайверОборудованияПоУмолчанию;
			КонецЕсли;
			
			СтрокаТаблицы.ДополнениеОписания = СтрШаблон(НСтр("ru = '(%1)'"), СтрокаТаблицы.Организация);
			СтрокаТаблицы.ТипПодключенияОборудования = ЛокальноеПодключение;
			
		КонецЦикла;
		
	Иначе
		
		МассивПО = ТаблицаУжеПодключенногоОборудования.НайтиСтроки(СтруктураПоиска);
		СтрокаТаблицы = Объект.ТаблицаПодключаемоеОборудование.Добавить();
		СтрокаТаблицы.ТипОборудования = ТипОборудования;
		
		Если МассивПО.Количество() > 0 Тогда
			
			СтрокаТаблицы.ПодключаемоеОборудование	= МассивПО[0].ПодключаемоеОборудование;
			СтрокаТаблицы.СерийныйНомер				= МассивПО[0].СерийныйНомер;
			
		КонецЕсли;
		
		Если НЕ ДрайверОборудованияПоУмолчанию = Неопределено Тогда
			СтрокаТаблицы.ДрайверОборудованияПоУмолчанию = ДрайверОборудованияПоУмолчанию;
		КонецЕсли;
		
		СтрокаТаблицы.ТипПодключенияОборудования = ЛокальноеПодключение;
		
	КонецЕсли;
	

	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПодключаемогоОборудования()
	
	Объект.ТаблицаПодключаемоеОборудование.Очистить();
	
	ЗаполнитьТаблицуУжеПодключенногоОборудования();
	
	ТипыОборудования = Перечисления.ТипыПодключаемогоОборудования;
	Драйверы = Справочники.ДрайверыОборудования;
	
	Если НастройкаПОСканерШтрихкодов Тогда
		ДобавитьСтрокиПодключаемоеОборудования(ТипыОборудования.СканерШтрихкода,
			Драйверы.Драйвер1ССканерыШтрихкодаNative);
	КонецЕсли;
	
	Если НастройкаПОСчитывательМагнитныхКарт Тогда
		ДобавитьСтрокиПодключаемоеОборудования(ТипыОборудования.СчитывательМагнитныхКарт,
			Драйверы.Драйвер1ССчитывателиМагнитныхКартNative);
	КонецЕсли;
	
	Если НастройкаПОФискальныеРегистраторы Тогда
		ДобавитьСтрокиПодключаемоеОборудования(
			ТипыОборудования.ФискальныйРегистратор,, Истина);
	КонецЕсли;
		
	Если НастройкаПОПринтерЧеков Тогда
		ДобавитьСтрокиПодключаемоеОборудования(ТипыОборудования.ПринтерЧеков, Драйверы.Драйвер1СПринтерЧеков);
	КонецЕсли;	
	
	Если ИспользоватьОплатуПлатежнымиКартами И НастройкаПОЭквайринговыйТерминал Тогда
		ДобавитьСтрокиПодключаемоеОборудования(ТипыОборудования.ЭквайринговыйТерминал,, Истина);
	КонецЕсли;
	
	Если НастройкаПОДисплейПокупателей Тогда
		ДобавитьСтрокиПодключаемоеОборудования(ТипыОборудования.ДисплейПокупателя, Драйверы.Драйвер1СДисплейПокупателя);
	КонецЕсли;
	
	Если НастройкаПОЭлектронныеВесы Тогда
		ДобавитьСтрокиПодключаемоеОборудования(ТипыОборудования.ЭлектронныеВесы);
	КонецЕсли;
	
	Если Объект.ТаблицаПодключаемоеОборудование.Количество() > 0 Тогда
		ИндексСтрокиПодключаемоеОборудование = 
			Объект.ТаблицаПодключаемоеОборудование.Индекс(Объект.ТаблицаПодключаемоеОборудование[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствияСообщений()
	
	ТипыОборудования = Перечисления.ТипыПодключаемогоОборудования;
	
	СоответствиеЗаголовка = Новый Соответствие;
	СоответствиеЗаголовка.Вставить(ТипыОборудования.СканерШтрихкода, НСтр("ru = 'Сканер штрихкодов'"));
	СоответствиеЗаголовка.Вставить(ТипыОборудования.СчитывательМагнитныхКарт, НСтр("ru = 'Считыватель магнитных карт'"));
	СоответствиеЗаголовка.Вставить(ТипыОборудования.ФискальныйРегистратор, НСтр("ru = 'Фискальный регистратор (ККТ)'"));
	СоответствиеЗаголовка.Вставить(ТипыОборудования.ПринтерЧеков, НСтр("ru = 'Принтер чеков'"));
	СоответствиеЗаголовка.Вставить(ТипыОборудования.ЭквайринговыйТерминал, НСтр("ru = 'Эквайринговый терминал'"));
	СоответствиеЗаголовка.Вставить(ТипыОборудования.ДисплейПокупателя, НСтр("ru = 'Дисплей покупателя'"));
	СоответствиеЗаголовка.Вставить(ТипыОборудования.ЭлектронныеВесы, НСтр("ru = 'Электронные весы (online)'"));
	СоответствиеЗаголовка.Вставить(ТипыОборудования.ВесыСПечатьюЭтикеток, НСтр("ru = 'Весы с печатью этикеток'"));
	
	СоответствиеОкончанияНаименования = Новый Соответствие;
	СоответствиеОкончанияНаименования.Вставить(ТипыОборудования.СканерШтрихкода, НСтр("ru = 'сканер'"));
	СоответствиеОкончанияНаименования.Вставить(ТипыОборудования.СчитывательМагнитныхКарт, НСтр("ru = 'ридер'"));
	СоответствиеОкончанияНаименования.Вставить(ТипыОборудования.ФискальныйРегистратор,
		НСтр("ru = 'фискальный регистратор (ККТ)'"));
	СоответствиеОкончанияНаименования.Вставить(ТипыОборудования.ПринтерЧеков, НСтр("ru = 'принтер чеков'"));
	СоответствиеОкончанияНаименования.Вставить(ТипыОборудования.ЭквайринговыйТерминал,
		НСтр("ru = 'эквайринговый терминал'"));
	СоответствиеОкончанияНаименования.Вставить(ТипыОборудования.ДисплейПокупателя,
		НСтр("ru = 'дисплей покупателя'"));
	СоответствиеОкончанияНаименования.Вставить(ТипыОборудования.ЭлектронныеВесы, НСтр("ru = 'весы-online'"));
	СоответствиеОкончанияНаименования.Вставить(ТипыОборудования.ВесыСПечатьюЭтикеток,
		НСтр("ru = 'весы с печатью этикеток'"));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДрайверов(ТипОборудования)
	
	СписокДрайверов = Новый СписокЗначений();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка,
	|	ДрайверыОборудования.Наименование,
	|	ДрайверыОборудования.ТипОборудования
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.ТипОборудования = &ТипОборудования
	|	И НЕ ДрайверыОборудования.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДрайверыОборудования.Наименование");
		
	Запрос.УстановитьПараметр("ТипОборудования", ТипОборудования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокДрайверов.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
	
	Возврат СписокДрайверов;

КонецФункции

&НаСервере
Функция ПолучитьСписокДрайверовПоМассиву(МассивТиповПО)
	
	СписокДрайверов = Новый СписокЗначений();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка,
	|	ДрайверыОборудования.Наименование,
	|	ДрайверыОборудования.ТипОборудования,
	|	ВЫБОР
	|		КОГДА ДрайверыОборудования.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоФР
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.ТипОборудования В(&МассивТиповПО)
	|	И НЕ ДрайверыОборудования.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДрайверыОборудования.Наименование");
		
	Запрос.УстановитьПараметр("МассивТиповПО", МассивТиповПО);
	
	РезультатЗапроса = Запрос.Выполнить();

	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Дополнение = СтрШаблон(" %1", НСтр("ru = '(ККТ)'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Если ВыборкаДетальныеЗаписи.ЭтоФР Тогда
			Дополнение = СтрШаблон(" %1", НСтр("ru = '(ФР)'", ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
		
		СписокДрайверов.Добавить(ВыборкаДетальныеЗаписи.Ссылка,
			СокрЛП(ВыборкаДетальныеЗаписи.Наименование) + Дополнение);
			
	КонецЦикла;
	
	Возврат СписокДрайверов;

КонецФункции

&НаСервере
Процедура ПодключаемоеОборудованиеПриИзмененииСервер()

	Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ПодключаемоеОборудование.Наименование КАК Наименование,
		|	ПодключаемоеОборудование.ДрайверОборудования КАК ДрайверОборудования,
		|	ПодключаемоеОборудование.СерийныйНомер КАК СерийныйНомер
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.Ссылка = &ПодключаемоеОборудование
		|	И НЕ ПодключаемоеОборудование.ПометкаУдаления");
		Запрос.УстановитьПараметр("ПодключаемоеОборудование", ПодключаемоеОборудование);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			НаименованиеПодключаемоеОборудование = Выборка.Наименование;
			ДрайверОборудования = Выборка.ДрайверОборудования;
			СерийныйНомерПодключаемоеОборудование = Выборка.СерийныйНомер;
			
		КонецЕсли;
		
	Иначе
		
		НаименованиеПодключаемоеОборудование = НСтр("ru='Без подключения оборудования'");
		ДрайверОборудования = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ПустаяСсылка");
		СерийныйНомерПодключаемоеОборудование = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьПодключаемоеОборудованиеКассыККМ(НастраиваемаяКассаККМ, ПодключаемоеОборудование)
	
	Если ЗначениеЗаполнено(НастраиваемаяКассаККМ) Тогда
	
		КассаККМОбъект = НастраиваемаяКассаККМ.ПолучитьОбъект();
		Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
			КассаККМОбъект.ПодключаемоеОборудование = ПодключаемоеОборудование;
			КассаККМОбъект.ИспользоватьБезПодключенияОборудования = Ложь;
			КассаККМОбъект.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
		Иначе
			КассаККМОбъект.ПодключаемоеОборудование = Неопределено;
			КассаККМОбъект.ИспользоватьБезПодключенияОборудования = Истина;
			КассаККМОбъект.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ;
		КонецЕсли;
		// АПК:1327-выкл: ответственное чтение не требуется, так как конкурентная работа с данными маловероятна
		КассаККМОбъект.Записать();
		// АПК:1327-вкл:
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеУстановкиДрайвераСканера(РезультатВыполнения, Контекст) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр("ru = 'Установка драйвера оборудования завершена.
		 |Пожалуйста, подключите сканер к компьютеру для дальнейшей работы.'");
		
		Если Контекст.Свойство("ДрайверОборудования") И ЗначениеЗаполнено(Контекст.ДрайверОборудования) Тогда
			ОбновитьИнформациюДрайвераОборудования(Контекст.ДрайверОборудования);
		КонецЕсли;
			
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ВыполнитьДействияПереходаНаСтраницу(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОбновленияИнформацииДрайвераОборудования(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Свойство("Результат") И РезультатВыполнения.Результат
		И РезультатВыполнения.Свойство("ОписаниеДрайвера") Тогда
		
		ТекущаяСтраница = Элементы.СтраницаДекорацииДрайвераУспех;
		ИмяПоясняющегоЭлемента = "ДекорацияДрайверСообщенияУспех";
		
		ОписаниеДрайвера = РезультатВыполнения.ОписаниеДрайвера;
		
		Если ОписаниеДрайвера.ИнтеграционныйКомпонент Тогда
			
			ТекущийСтатус = НСтр("ru='Установлен интеграционный компонент.'") + Символы.ПС;
			ТекущийСтатус = ТекущийСтатус + ?(ОписаниеДрайвера.ОсновнойДрайверУстановлен,
												НСтр("ru='Установлена основная поставка драйвера.'"),
												НСтр("ru='Основная поставка драйвера не установлена.'"));
												
		Иначе
			ТекущийСтатус = НСтр("ru='Установлен на текущем компьютере.'");
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОписаниеДрайвера.ВерсияДрайвера) Тогда
			
			УстановленнаяВерсия = ОписаниеДрайвера.ВерсияДрайвера;
			Если Не ПустаяСтрока(ОписаниеДрайвера.ВерсияИнтеграционногоКомпонента) Тогда
				УстановленнаяВерсия = УстановленнаяВерсия + "/" + ОписаниеДрайвера.ВерсияИнтеграционногоКомпонента;
			КонецЕсли;
			
			УстановленнаяВерсия = УстановленнаяВерсия + ОписаниеРевизииИнтерфейса(ОписаниеДрайвера.РевизияИнтерфейса);
			ТекущийСтатус = СтрШаблон("%1%2%3", ТекущийСтатус, Символы.ПС, УстановленнаяВерсия);
			
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтраница = Элементы.СтраницаДекорацииДрайвераНеудача;
		ИмяПоясняющегоЭлемента = "ДекорацияДрайверСообщенияНеудача";
		ТекущийСтатус = НСтр("ru = 'Драйвер не установлен'");
		
		Если РезультатВыполнения.Свойство("ОписаниеОшибки") Тогда
			ТекущийСтатус = СтрШаблон("%1%2%3", ТекущийСтатус, Символы.ПС, РезультатВыполнения.ОписаниеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы[ИмяПоясняющегоЭлемента].Заголовок = ТекущийСтатус;
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюДрайвераОборудования(ДрайверОборудования)
	
	Если ЗначениеЗаполнено(ДрайверОборудования) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗавершениеОбновленияИнформацииДрайвераОборудования", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПолучениеОписанияДрайвера(Оповещение, ДрайверОборудования);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеРевизииИнтерфейса(РевизияИнтерфейса)
	
	СообщениеНаЭкране = НСтр("ru='(Версия требований к разработке драйверов %Версия%)'");
	
	Если РевизияИнтерфейса >= 3000 Тогда
		
		Результат = Символы.НПП + СообщениеНаЭкране;
		Результат = СтрЗаменить(Результат, "%Версия%", "3." + Строка(РевизияИнтерфейса - 3000));
		
	ИначеЕсли РевизияИнтерфейса >= 2000 Тогда
		
		Результат = Символы.НПП + СообщениеНаЭкране;
		Результат = СтрЗаменить(Результат, "%Версия%", "2." + Строка(РевизияИнтерфейса - 2000));
		
	ИначеЕсли РевизияИнтерфейса > 1000 Тогда
		
		Результат = Символы.НПП + СообщениеНаЭкране;
		Результат = СтрЗаменить(Результат, "%Версия%", "1." + Строка(РевизияИнтерфейса - 1000));
		
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СоздатьЭкземплярСканераШтрихкода()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК СканерШтрихкода
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	НЕ ПодключаемоеОборудование.ПометкаУдаления
	|	И ПодключаемоеОборудование.РабочееМесто = &ТекущееРабочееМесто
	|	И ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.СканерШтрихкода)");
	
	Запрос.УстановитьПараметр("ТекущееРабочееМесто", ТекущееРабочееМесто);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		
		ИмяКонстантыИспользованияПодключаемогоОборудования =
			ИмяКонстантыИспользованияПодключаемогоОборудования();
		Константы[ИмяКонстантыИспользованияПодключаемогоОборудования].Установить(Истина);
		
		НачатьТранзакцию();
		
		Попытка
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ПодключаемоеОборудование");
			БлокировкаДанных.Заблокировать();
			
			СканерШтрихкодаОбъект = Справочники.ПодключаемоеОборудование.СоздатьЭлемент();
			СканерШтрихкодаОбъект.ТипПодключения =
				ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыПодключенияОборудования.ЛокальноеПодключение");
			СканерШтрихкодаОбъект.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода;
			СканерШтрихкодаОбъект.ДрайверОборудования = Справочники.ДрайверыОборудования.Драйвер1ССканерыШтрихкодаNative;
			СканерШтрихкодаОбъект.РабочееМесто = ТекущееРабочееМесто;
			СканерШтрихкодаОбъект.УстройствоИспользуется = Истина;
			
			ИмяРабочегоМеста = СтрШаблон(НСтр("ru = '%1на %2'"), " ", Строка(ТекущееРабочееМесто));
							
			Если ПустаяСтрока(Строка(ТекущееРабочееМесто)) Тогда
				ИмяРабочегоМеста = "";
			КонецЕсли;
			
			ЛокализованныйШаблон = НСтр("ru = '''%1''%2'");
			ИмяДрайвера = Строка(СканерШтрихкодаОбъект.ДрайверОборудования);
			Наименование = СтрШаблон(ЛокализованныйШаблон, ИмяДрайвера, ИмяРабочегоМеста);
			СканерШтрихкодаОбъект.Наименование = Наименование;
			
			СканерШтрихкодаОбъект.Записать();
			
			МенеджерОборудования.ОбновитьУстановленныеДрайвераПоТипу(
				Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода);
			СканерДляПодключения = СканерШтрихкодаОбъект.ДрайверОборудования;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка при подключении сканера штрихкода.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереназначитьПодключаемоеОборудование(ТекущееРабочееМесто)

	Если ЗначениеЗаполнено(ТекущееРабочееМесто) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ПодключаемоеОборудование.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	НЕ ПодключаемоеОборудование.ПометкаУдаления
		|	И НЕ ПодключаемоеОборудование.РабочееМесто = &РабочееМесто");
		Запрос.УстановитьПараметр("РабочееМесто", ТекущееРабочееМесто);
		
		ОборудованиеКИзменению = Запрос.Выполнить().Выбрать();
		
		Пока ОборудованиеКИзменению.Следующий() Цикл
		
			Оборудование = ОборудованиеКИзменению.Ссылка.ПолучитьОбъект();
			
			Попытка
				Оборудование.Заблокировать();
			Исключение
				
				ТекстОшибки = НСтр("ru = 'Ошибка блокировки справочника.'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ТекстОшибки,
				УровеньЖурналаРегистрации.Ошибка, ,
				Оборудование,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат;
				
			КонецПопытки;
				
			Оборудование.РабочееМесто = ТекущееРабочееМесто;
			
			Попытка
				Оборудование.Записать();
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Помощник настройки РМК: переназначение рабочих мест'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		
		КонецЦикла;
		
		РезультатПослеПереназначения = Запрос.Выполнить().Выбрать();
		ЕстьОборудованиеДляПереназначенияРабочегоМеста = РезультатПослеПереназначения.Следующий();
		
	КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаКассаККМ

&НаКлиенте
Процедура ПриИзмененииРеквизитовКассаККМ()
	
	ТекущиеДанные = Элементы.Организации.ТекущиеДанные;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКассыККМ()
	
	Запрос = Новый Запрос;
	ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросНастроенныеКассыККМВПомощнике(Запрос, ЭтотОбъект);
	Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
		ТекстОшибки = НСтр("ru = 'Не сформирован запрос для заполнения настроенных касс в помощнике.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Организация", Выборка.Организация);
		
		СтрокиОрганизации = Объект.Организации.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаОрганизации Из СтрокиОрганизации Цикл
			ЗаполнитьЗначенияСвойств(СтрокаОрганизации, Выборка,, "Организация");
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКассыККМСервер(СтрокаТаблицы)
	
	ДоступностьПО = СтрокаТаблицы.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
	
	Элементы.ОрганизацииПодключаемоеОборудование.Доступность = ДоступностьПО;
	Элементы.ОрганизацииТипКассы.Доступность = Ложь;
	
	СтрокаТаблицы.ИспользоватьБезПодключенияОборудования = НЕ ДоступностьПО;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтраницуКассыККМ(СтрокаТаблицы)
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КассаККМ) Тогда
		
		ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ;
		Если ИспользоватьПодключаемоеОборудование Тогда
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
			СтруктураПоиска.Вставить("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор);
			
			СтрокиТаблицыПО = Объект.ТаблицаПодключаемоеОборудование.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиТаблицыПО.Количество() > 0 Тогда
				
				СтрокаТаблицыПО = СтрокиТаблицыПО[0];
				Если ЗначениеЗаполнено(СтрокаТаблицыПО.ПодключаемоеОборудование) Тогда
					
					ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
					СтрокаТаблицы.ПодключаемоеОборудование = СтрокаТаблицыПО.ПодключаемоеОборудование;
					СтрокаТаблицы.СерийныйНомер = СтрокаТаблицыПО.СерийныйНомер;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицы.ТипКассы = ТипКассы;
		
	КонецЕсли;
	
	УстановитьДоступностьПолейККМ(СтрокаТаблицы);
	
	ОбновитьДекорациюКассыККМПодключаемоеОборудование(СтрокаТаблицы);
	Элементы.ОрганизацииНаименование.ПодсказкаВвода = СтрШаблон(НСтр("ru = '%1 (%2)'"),
		СокрЛП(СтрокаТаблицы.Организация), СокрЛП(Объект.ТорговыйОбъект));
	ТипНастраиваемойКассыККМ = СтрокаТаблицы.ТипКассы;
	Если СтрокаТаблицы.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ Тогда
		ПодключаемоеОборудованиеНастраиваемойКассыККМ = "";
		РегистрационныйНомерНастраиваемойКассыККМ = ""; 
		ИспользоватьБезПодключенияОборудования = Истина;
	Иначе
		ПодключаемоеОборудованиеНастраиваемойКассыККМ = СтрокаТаблицы.ПодключаемоеОборудование;
		РегистрационныйНомерНастраиваемойКассыККМ = СтрокаТаблицы.РегистрационныйНомер;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПодключаемоеОборудованиеСервер(ИндексСтроки)
	
	СтрокаТаблицы = Объект.Организации[ИндексСтроки];
	УстановитьДоступностьПолейККМ(СтрокаТаблицы);
	ОбновитьДекорациюКассыККМПодключаемоеОборудование(СтрокаТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПолейККМ(СтрокаТаблицы)
	
	Если ИспользоватьПодключаемоеОборудование
		И ЗначениеЗаполнено(СтрокаТаблицы.ПодключаемоеОборудование) Тогда
		
		РеквизитыОборудования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.ПодключаемоеОборудование,
			"ТипОборудования, Организация");
		
		Если РеквизитыОборудования.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
			
			Элементы.ОрганизацииПодключаемоеОборудование.Видимость = Истина;
			Элементы.ОрганизацииРегистрационныйНомер.Видимость = Истина;
			
			Элементы.ОрганизацияКассаККМ.Доступность = Ложь;
			Элементы.ОрганизацииРегистрационныйНомер.Доступность = Ложь;
			
			СтрокаТаблицы.Организация = РеквизитыОборудования.Организация;
			ОрганизацияКассаККМ = РеквизитыОборудования.Организация;
			
		Иначе
			Элементы.ОрганизацияКассаККМ.Доступность = Истина;
		КонецЕсли;
		
	ИначеЕсли СтрокаТаблицы.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ Тогда
		Элементы.ОрганизацииПодключаемоеОборудование.Видимость = Ложь;
		Элементы.ОрганизацииРегистрационныйНомер.Видимость = Ложь;
	Иначе
		Элементы.ОрганизацияКассаККМ.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодключаемоеОборудованиеФР(Организация)
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Организация", Организация);
	СтруктураПоиска.Вставить("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор);
	
	СтрокиТаблицыПО = Объект.ТаблицаПодключаемоеОборудование.НайтиСтроки(СтруктураПоиска);
	
	ПодключаемоеОборудованиеФР = Справочники.ПодключаемоеОборудование.ПустаяСсылка();
	
	Если СтрокиТаблицыПО.Количество() > 0 Тогда
		ПодключаемоеОборудованиеФР = СтрокиТаблицыПО[0].ПодключаемоеОборудование;
	КонецЕсли;
	
	Возврат ПодключаемоеОборудованиеФР;
	
КонецФункции

&НаСервере
Процедура ОбновитьДекорациюКассыККМПодключаемоеОборудование(СтрокаТаблицы)
	
	ЗаголовокДекорации = НСтр("ru = ''");
	ПодключаемоеОборудованиеКассыККМ = СтрокаТаблицы.ПодключаемоеОборудование;
	Если НастройкаПОФискальныеРегистраторы Тогда
		
		ПодключаемоеОборудованиеФР = ПодключаемоеОборудованиеФР(СтрокаТаблицы.Организация);
		
		Если НЕ ПодключаемоеОборудованиеКассыККМ = ПодключаемоеОборудованиеФР Тогда
			ЗаголовокДекорации = НСтр("ru = 'Оборудование не соответствует выбору.'") + " ";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодключаемоеОборудованиеКассыККМ)
		И НЕ ПодключаемоеОборудованиеКассыККМ.УстройствоИспользуется Тогда
			ЗаголовокДекорации = ЗаголовокДекорации + НСтр("ru = 'Устройство не используется.'") 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПомощникНастройкиРабочегоМестаКассира(Отказ, ТекстОшибокИнициализации)

	Запрос = Новый Запрос;
	УстановитьТекстЗапросаОрганизацийИПодразделений(Запрос);
	Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
		ТекстОшибки = НСтр("ru = 'Не сформирован запрос для получения данных предприятия.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПакетныйРезультат = Запрос.ВыполнитьПакет();
	КоличествоПакетов = ПакетныйРезультат.Количество();
	
	КоличествоОрганизацийВВыборке = 0;
	КоличествоТорговыхОбъектовВВыборке = 0;
	
	Если КоличествоПакетов > 0 Тогда
		
		ПакетОрганизаций = ПакетныйРезультат[КоличествоПакетов - 3];
		ВыборкаОрганизаций = ПакетОрганизаций.Выбрать();
		
		КоличествоОрганизацийВВыборке = ВыборкаОрганизаций.Количество();
		
		Если КоличествоОрганизацийВВыборке = 1 И ВыборкаОрганизаций.Следующий() Тогда
			Объект.Организация = ВыборкаОрганизаций.Ссылка;
		КонецЕсли;
		
		ПакетТорговыхОбъектов = ПакетныйРезультат[КоличествоПакетов - 2];
		ВыборкаТорговыхОбъектов = ПакетТорговыхОбъектов.Выбрать();
		
		КоличествоТорговыхОбъектовВВыборке = ВыборкаТорговыхОбъектов.Количество();
		
		Если КоличествоТорговыхОбъектовВВыборке = 1 И ВыборкаТорговыхОбъектов.Следующий() Тогда
			Объект.ТорговыйОбъект = ВыборкаТорговыхОбъектов.Ссылка;
		КонецЕсли;
		
	КонецЕсли;	

	Элементы.Организация.ТолькоПросмотр = (КоличествоОрганизацийВВыборке = 1);
	Элементы.ТорговыйОбъект.ТолькоПросмотр = (КоличествоТорговыхОбъектовВВыборке = 1);
	
	КоличествоКассККМОрганизации = 0;
	
	Если КоличествоОрганизацийВВыборке = 1 И КоличествоТорговыхОбъектовВВыборке = 1 Тогда
		КоличествоКассККМОрганизации = КоличествоКассККМПоОтбору();
	КонецЕсли;

	ИнициализироватьПереопределяемыеТекстыЗапросовДинамическихСписков(Отказ, ТекстОшибокИнициализации);
	ИмпортироватьДанныеПользователейВКонтекстФормы();
	ЭтоСокращенныйРежимНастройкиРабочегоМестаКассира =
		ЭтоСокращенныйСценарийНастройкиРабочегоМестаСПрименениемПомощника();
		
	ДоступностьКнопкиДалееПолныйРежимНастройки = ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.ТорговыйОбъект)
		И КоличествоКассККМОрганизации;
		
	Если ЭтоСокращенныйРежимНастройкиРабочегоМестаКассира Тогда
		Элементы.ДекорацияИнформирование.Заголовок =
			НСтр("ru = 'Недостаточно исходных данных для настройки рабочего места кассира.
				|Пожалуйста, введите данные следующих справочников:'");
	КонецЕсли;
	
	Элементы.Далее.Доступность = ДоступностьКнопкиДалееПолныйРежимНастройки;
	
	Если ЭтоСокращенныйРежимНастройкиРабочегоМестаКассира Тогда
		
		СписокИменСтраницДляСокращеннойНастройки = ИменаСтраницДляСокращеннойНастройкиНаСервере();
		СписокИменСтраниц.Очистить();
			
		Для Каждого Имя Из СписокИменСтраницДляСокращеннойНастройки Цикл
			СписокИменСтраниц.Добавить(Имя);
		КонецЦикла;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы[СписокИменСтраниц[0].Значение];
		
	КонецЕсли;
	
	КоличествоПользователей = КоличествоЭлементовСправочникаПользователей();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаВидыОплат

&НаКлиенте
// АПК:78-выкл метод оповещения
Процедура ОповещениеОткрытьФормуСозданияОплаты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
// АПК:78-вкл
	ДоступностьКнопокВидовОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеСоздатьВидОплатыПоНаименованию(ДанныеВыбора, ДополнительныеПараметры) Экспорт

	Если НЕ ПустаяСтрока(ДанныеВыбора) И ДополнительныеПараметры.Свойство("ТипОплаты")
		И ЗначениеЗаполнено(ДополнительныеПараметры.ТипОплаты) Тогда
		
			НовыйВидОплаты = СоздатьВидОплатыСервер(ДополнительныеПараметры.ТипОплаты, ДанныеВыбора);
			
			Если ЗначениеЗаполнено(НовыйВидОплаты) Тогда
				Элементы.ВидыОплат.Обновить();
			КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьОплатуКлиент(ИмяТипаОплат)
	 
	ДанныеВидаОплаты = ДанныеВидаОплатыПоНаименованию(ИмяТипаОплат);
	
	Если ДанныеВидаОплаты.Свойство("ВидПлатежнойСистемыРодительныйПадеж")
		И ЗначениеЗаполнено(ДанныеВидаОплаты.ВидПлатежнойСистемыРодительныйПадеж)
		И ДанныеВидаОплаты.Свойство("ЗначениеЗаполнения")
		И ЗначениеЗаполнено(ДанныеВидаОплаты.ЗначениеЗаполнения) Тогда
		
		ВводимоеНаименованиеВидаОплаты = НСтр("ru = ''");
		
		ПояснениеВвода = 
			СтрШаблон(НСтр("ru = 'Наименование платежной %1'"), ДанныеВидаОплаты.ВидПлатежнойСистемыРодительныйПадеж);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеСоздатьВидОплатыПоНаименованию",
			ЭтотОбъект, ДанныеВидаОплаты.ЗначениеЗаполнения);
		
		ПоказатьВводЗначения(ОбработчикОповещения, ВводимоеНаименованиеВидаОплаты, ПояснениеВвода);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВидаОплатыПоНаименованию(ИмяТипаОплат)
	
	Результат = Новый Структура("ВидПлатежнойСистемыРодительныйПадеж,ЗначениеЗаполнения");
	ИмяКлассаМетаданных = "Перечисления";
	ИмяПеречисленияТиповОплат = "ТипыОплатЧекаККМ";
	МетаданныеСуществуют = МетаданныеСуществуют(ИмяКлассаМетаданных, ИмяПеречисленияТиповОплат);
	
	Если МетаданныеСуществуют И НЕ ПустаяСтрока(ИмяТипаОплат) Тогда
		
		ТипОплаты = Перечисления[ИмяПеречисленияТиповОплат][ИмяТипаОплат];

		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("ТипОплаты", ТипОплаты);
		
		ВидПлатежнойСистемыРодительныйПадеж = НСтр("ru = ''");
		
		ИмяТипаОплатЧекаКартой = СтрШаблон("Перечисление.%1.ПлатежнаяКарта", ИмяТипаОплат);
		ИмяТипаОплатПлатежнойСистемой = СтрШаблон("Перечисление.%1.ПлатежнаяСистема", ИмяТипаОплат);
		
		Если ТипОплаты = ПредопределенноеЗначение(ИмяТипаОплатЧекаКартой) Тогда
			ВидПлатежнойСистемыРодительныйПадеж = НСтр("ru = 'карты'");
		ИначеЕсли ТипОплаты = ПредопределенноеЗначение(ИмяТипаОплатПлатежнойСистемой) Тогда
			ВидПлатежнойСистемыРодительныйПадеж = НСтр("ru = 'системы'");
		КонецЕсли; 

		Результат.Вставить("ВидПлатежнойСистемыРодительныйПадеж", ВидПлатежнойСистемыРодительныйПадеж);
		Результат.Вставить("ЗначениеЗаполнения", ЗначенияЗаполнения);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДоступностьКнопокВидовОплаты()
	
	Элементы.ВидыОплатСоздатьОплатуПлатежнойКартой.Видимость	= ИспользоватьОплатуПлатежнымиКартами;
	Элементы.ВидыОплатСоздатьОплатуПлатежнойСистемой.Видимость	= ИспользоватьОплатуПлатежнымиСистемами;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьОплатуПлатежнымиКартамиПриИзмененииСервер()

	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьОплатуПлатежнымиКартами");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ИспользоватьОплатуПлатежнымиКартами);
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияОплатПК(ИспользоватьОплатуПлатежнымиКартами);
	
	Элементы.ВидыОплатСоздатьОплатуПлатежнойКартой.Видимость = ИспользоватьОплатуПлатежнымиКартами;
	ПрименитьОтборПоТипуОплатыКСпискуВидовОплат();
	
	Если НЕ ИспользоватьОплатуПлатежнымиКартами Тогда
		
		НастройкаПОЭквайринговыйТерминал = ИспользоватьОплатуПлатежнымиКартами;
		
		ШрифтЖирный = ШрифтыСтиля.ВажнаяНадписьШрифт;
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока("0", ШрифтЖирный));
		
		// АПК:1356-выкл более эффективный способ указать шрифт и строку единовременно
		Элементы.ДекорацияКПодключениюЭквайринговыйТерминал.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		// АПК:1356-вкл
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьОплатуПлатежнымиСистемамиПриИзмененииСервер()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьОплатуПлатежнымиСистемами");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ИспользоватьОплатуПлатежнымиСистемами);
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияОплатПлатежнымиСистемами(
		ИспользоватьОплатуПлатежнымиСистемами);
	Элементы.ВидыОплатСоздатьОплатуПлатежнойСистемой.Видимость = ИспользоватьОплатуПлатежнымиСистемами;
	
	ПрименитьОтборПоТипуОплатыКСпискуВидовОплат();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьФормуНаСервере()
	
	Если ИндексСтрокиОрганизации >= 0 Тогда
		
		ИнтеграцияСПлатежнымиСистемамиРМКПереопределяемый.НастроитьФормуПомощникаПодключенияСБП(
			ЭтотОбъект, 
			Объект.Организации[ИндексСтрокиОрганизации].КассаККМ);

	КонецЕсли;		

КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьВидОплатыСервер(ТипОплаты, НаименованиеВидаОплаты)

	Результат = Неопределено;
	
	ИмяКлассаМетаданных = "Справочники";
	ИмяСправочникаВидовОплат = "ВидыОплат";
	
	Если МетаданныеСуществуют(ИмяКлассаМетаданных, ИмяСправочникаВидовОплат) Тогда
		
		Результат = Справочники[ИмяСправочникаВидовОплат].ПустаяСсылка();
		
		Если ЗначениеЗаполнено(ТипОплаты)
			И ЗначениеЗаполнено(НаименованиеВидаОплаты) Тогда
			
			НовыйВидОплаты = Справочники[ИмяСправочникаВидовОплат].СоздатьЭлемент();
			НовыйВидОплаты.Наименование = НаименованиеВидаОплаты;
			НовыйВидОплаты.ТипОплаты = ТипОплаты;
			НовыйВидОплаты.Записать();
			
			Результат = НовыйВидОплаты.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаЭквайринговыеТерминалы

&НаКлиенте
Процедура ОповещениеОткрытьФормуСозданияЭквайринговогоТерминала(РезультатОткрытияФормы,
	ДополнительныеПараметры) Экспорт
	
	МассивЭТ = Новый Массив;
	ПриИзмененииСтраницыЭквайринговыхТерминаловСервер(МассивЭТ);
	УстановитьОтбор = Истина;
	ИзменитьЭлементОтбораСписка(ЭквайринговыеТерминалы, 
		"Ссылка", МассивЭТ, УстановитьОтбор, ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтраницыЭквайринговыхТерминалов()
	
	МассивЭТ = Новый Массив;
	ПриИзмененииСтраницыЭквайринговыхТерминаловСервер(МассивЭТ);
	УстановитьОтбор = Истина;
	ИзменитьЭлементОтбораСписка(ЭквайринговыеТерминалы,
		"Ссылка", МассивЭТ, УстановитьОтбор, ВидСравненияКомпоновкиДанных.ВСписке);
	
	Элементы.ОрганизацияЭквайринговыеТерминалы.Видимость	= НЕ НесколькоОрганизаций;
	Элементы.ЭквайринговыеТерминалыОрганизация.Видимость	= НесколькоОрганизаций;
	
КонецПроцедуры

&НаСервере
Функция МассивЭквайринговыхТерминалов()
	Возврат ОбщегоНазначенияРМК.ЭквайринговыеТерминалыСККМ(ЭтотОбъект);
КонецФункции

&НаСервере
Процедура ЗаполнениеТаблицыСозданияЭТ()
	ОбщегоНазначенияРМК.ЗаполнитьТаблицуСозданияЭквайринговыхТерминалов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтраницыЭквайринговыхТерминаловСервер(МассивЭТ)
	МассивЭТ = МассивЭквайринговыхТерминалов();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭквайринговыеТерминаловСПустымиТарифамиЗаОбслуживание()

	Если ИспользоватьПодключаемоеОборудование Тогда
		
		Запрос = Новый Запрос;
		ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросТерминалыСПустымиТарифами(Запрос, ЭтотОбъект);
		Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
			ТекстОшибки = НСтр("ru = 'Не сформирован запрос для терминалов с незаполненными комиссиями за операции.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Терминал = Выборка.Ссылка;
			Если ЭквайринговыеТерминалыДляУточненияКомиссии.НайтиПоЗначению(Терминал) = Неопределено Тогда
				ЭквайринговыеТерминалыДляУточненияКомиссии.Добавить(Терминал);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаНастройкиРМК

&НаСервере
Процедура НастроитьСтраницуОтображенияНастроекРМК()
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеТекущейНастройкиВИнтерфейсе(ЗначениеНастройки)
	Возврат;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьИзменитьНастройкуРМКНаСервере(ЗначениеНастройкиРМК, ЗначенияНастроек, РабочееМесто)
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ПанельАдминистрированияБСПОрганайзер(Команда)
	ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.Органайзер");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущуюНастройкуРМК()
	ТекущееРабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
	
	Если НЕ ЗначениеЗаполнено(ТекущееРабочееМесто) Тогда
		ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	КонецЕсли;
	
	ДоступныеНастройкиРМК = ОбщегоНазначенияРМК.НастройкиРМКДляТекущегоРабочегоМеста(ТекущееРабочееМесто);
	КоличествоДоступныхНастроек = ДоступныеНастройкиРМК.Количество();
		
	Если КоличествоДоступныхНастроек = 1
		И ЗначениеЗаполнено(ДоступныеНастройкиРМК[0]) Тогда
		
		НастройкиОбъект = ДоступныеНастройкиРМК[0].ПолучитьОбъект();
		ЗначениеВРеквизитФормы(НастройкиОбъект, "НастройкаРМК");
		Элементы.НастройкаРМКВыдаватьНаличныеНаКассе.Доступность = НастройкаРМК.ВыдаватьНаличныеНаКассе;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКСценарийИспользованияПриИзменении(Элемент)
	МодифицированностьРеквизитовРМК = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКАдресСервераЛояльностиПриИзменении(Элемент)
	МодифицированностьРеквизитовРМК = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКПользовательСервераЛояльностиПриИзменении(Элемент)
	МодифицированностьРеквизитовРМК = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКРаботаВРежимеМедленногоСоединенияПриИзменении(Элемент)
	МодифицированностьРеквизитовРМК = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКИспользоватьОплатуНаличнымиПриИзменении(Элемент)
	МодифицированностьРеквизитовРМК = Истина;
	Элементы.НастройкаРМКВыдаватьНаличныеНаКассе.Доступность = НастройкаРМК.ВыдаватьНаличныеНаКассе;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКВыдаватьНаличныеНаКассеПриИзменении(Элемент)
	МодифицированностьРеквизитовРМК = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКИспользоватьОплатуБонусамиПриИзменении(Элемент)
	МодифицированностьРеквизитовРМК = Истина;
КонецПроцедуры

 &НаКлиенте
Процедура НастройкаРМКИспользоватьОплатуСертификатамиПриИзменении(Элемент)
	МодифицированностьРеквизитовРМК = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаФинал

&НаКлиенте
Процедура ЗакрытьПоследнююСтраницу()
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтчет()
	
	Макет = Обработки.ПомощникНастройкиКассовогоМестаРМК.ПолучитьМакет("Макет");
	
	РежимКассыСамообслуживания = НастройкаРМК.СценарийИспользования = Перечисления.СценарииИспользованияРМК.ТерминалСамообслуживания;
	ОбластьШапка	= Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаПО	= Макет.ПолучитьОбласть("ШапкаПО");
	
	ТабличныйДокументФинал.Очистить();
	ОбластьШапка.Параметры.РабочееМесто = Объект.РабочееМесто;
	ТабличныйДокументФинал.Вывести(ОбластьШапка);
	
	Запрос = Новый Запрос;
	ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросОтчетОПодключенномОборудовании(Запрос, ЭтотОбъект);
	Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
		
		ТекстОшибки = НСтр("ru = 'Не сформирован запрос для отчета о подключенном оборудовании.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		ОбластьШапкаТаблицыОрганизаций = Макет.ПолучитьОбласть("ШапкаТаблицыОрганизаций|ТаблицаОрганизация");
		ОбластьШапкаТаблицыНаличные = Макет.ПолучитьОбласть("ШапкаТаблицыОрганизаций|ТаблицаНаличные");
		ОбластьШапкаТаблицыКарта = Макет.ПолучитьОбласть("ШапкаТаблицыОрганизаций|ТаблицаКарта");
		
		ТабличныйДокументФинал.Вывести(ОбластьШапкаТаблицыОрганизаций);
		Если НЕ РежимКассыСамообслуживания Тогда
			ТабличныйДокументФинал.Присоединить(ОбластьШапкаТаблицыНаличные);
		КонецЕсли;
		ТабличныйДокументФинал.Присоединить(ОбластьШапкаТаблицыКарта);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		ОбластьОрганизация = Макет.ПолучитьОбласть("Организация|ТаблицаОрганизация");
		ОбластьНаличные = Макет.ПолучитьОбласть("Организация|ТаблицаНаличные");
		ОбластьКарта = Макет.ПолучитьОбласть("Организация|ТаблицаКарта");
		
		ОбластьОрганизация.Параметры.Заполнить(Выборка);
		ТабличныйДокументФинал.Вывести(ОбластьОрганизация);
		
		Если НЕ РежимКассыСамообслуживания Тогда
			ОбластьНаличные.Параметры.Заполнить(Выборка);
			Если Выборка.НаличныеПОСкрыть Тогда
				ОбластьНаличные.Области.ОбластьНаличные.Картинка = Новый Картинка;
			КонецЕсли;
			ТабличныйДокументФинал.Присоединить(ОбластьНаличные);
		КонецЕсли;
		
		ОбластьКарта.Параметры.Заполнить(Выборка);
		Если Выборка.ОплатаКартойПОСкрыть Тогда
			ОбластьКарта.Области.ОбластьКартой.Картинка = Новый Картинка;
		КонецЕсли;
		ТабличныйДокументФинал.Присоединить(ОбластьКарта);
		
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК СсылкаПО,
	|	ПодключаемоеОборудование.Наименование КАК Наименование,
	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования,
	|	ВЫБОР
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.СканерШтрихкода)
	|			ТОГДА ""СканерШтрихкода""
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт)
	|			ТОГДА ""СчитывательМагнитныхКарт""
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор)
	|			ТОГДА ""ФискальныйРегистратор""
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККТ)
	|			ТОГДА ""ККТ""
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ПринтерЧеков)
	|			ТОГДА ""ПринтерЧеков""
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ДисплейПокупателя)
	|			ТОГДА ""ДисплейПокупателя""
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал)
	|			ТОГДА ""ЭквайринговыйТерминал""
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭлектронныеВесы)
	|			ТОГДА ""ЭлектронныеВесы""
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток)
	|			ТОГДА ""ВесыСПечатьюЭтикеток""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИмяТипаОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И ПодключаемоеОборудование.УстройствоИспользуется
	|	И ВЫБОР
	|			КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККТ)
	|				ТОГДА ПодключаемоеОборудование.Организация = &Организация
	|			КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал)
	|				ТОГДА ПодключаемоеОборудование.Организация = &Организация
	|			КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор)
	|				ТОГДА ПодключаемоеОборудование.Организация = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.ПустаяСсылка)
	|	И НЕ ПодключаемоеОборудование.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	
	ТекстЗаголовкаШапки = НСтр("ru = 'Используемое подключаемое оборудование'");
	Если Выборка.Количество() = 0 Тогда
		ТекстЗаголовкаШапки = ТекстЗаголовкаШапки + СтрШаблон(НСтр("ru = '%1не обнаружено.'"), " ");
	КонецЕсли;
	
	ОбластьШапкаПО.Параметры.ЗаголовокШапкиТаблицыОборудования = ТекстЗаголовкаШапки;
	Подсказка = НСтр("ru = 'Для настройки оборудования необходимо перейти'");
	ПодсказкаГиперссылка = НСтр("ru = 'Администрирование -> Поддержка оборудования -> Подключаемое оборудование'");
	ОбластьШапкаПО.Параметры.Подсказка = Подсказка;
	ОбластьШапкаПО.Параметры.ПодсказкаГиперссылка = ПодсказкаГиперссылка;
	ТабличныйДокументФинал.Вывести(ОбластьШапкаПО);
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ИмяТипаОборудования) Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть(Выборка.ИмяТипаОборудования);
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокументФинал.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументФиналВыбор(Элемент, Область, СтандартнаяОбработка)
	Если Область.Имя = "Подсказка" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаСписка");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаНастройкаСервераЛояльности

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	ТекстСообщенияПользователю = НСтр("ru = ''");
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		ИсходныеДанные = НастройкаРМК;
		ПараметрыПроверкиПодключения = ИсходныеДанныеДляПроверкиДоступностиСервераЛояльности(ИсходныеДанные, ПарольСервераЛояльности);
		АдресСервера = ПараметрыПроверкиПодключения.АдресСервера;
		
		Если НЕ ЗначениеЗаполнено(АдресСервера) Тогда
			
			СтрокаСообщения = НСтр("ru = 'Не заполнен адрес сервера лояльности.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения,, "НастройкаРМК.АдресСервераЛояльности");
			Возврат;
			
		КонецЕсли;
		
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПроверитьПодключениеКСерверуЛояльности(ПараметрыПроверкиПодключения);
		РезультатПроверки = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		ТекстСообщенияПользователю = ?(РезультатПроверки.ЕстьОшибки,
			РезультатПроверки.ТекстОшибки,
			НСтр("ru = 'Соединение с сервером успешно установлено.'"));
			
	Иначе
		
		ТекстСообщенияПользователю =
			НСтр("ru = 'Пожалуйста, включите использование сервера лояльности перед проверкой подключения к серверу.'");
			
	КонецЕсли;
		
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияПользователю);

КонецПроцедуры

&НаСервере
Процедура ИспользоватьСерверЛояльностиПолучательДанныхПриИзмененииНаСервере()
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьСерверЛояльностиПолучательДанных");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ИспользоватьСерверЛояльностиПолучательДанных);
	ЗаполнитьДанныеСервераЛояльности();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерверЛояльностиПолучательДанныхПриИзменении(Элемент)
	ИспользоватьСерверЛояльностиПолучательДанныхПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПарольСервераЛояльностиПриИзмененииНаСервере()
	
	Если НЕ НастройкаРМК.Ссылка.Пустая() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(НастройкаРМК.Ссылка,
		ПарольСервераЛояльности, "ПарольСервераЛояльности");
		УстановитьПривилегированныйРежим(Ложь);
		ПарольСервераЛояльности = ?(ЗначениеЗаполнено(ПарольСервераЛояльности), УникальныйИдентификатор, "");
		ПарольСервераЛояльностиИзменен = Ложь;
		
	Иначе
		ПарольСервераЛояльностиИзменен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольСервераЛояльностиПриИзменении(Элемент)
	МодифицированностьРеквизитовРМК = Истина;
	ПарольСервераЛояльностиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИсходныеДанныеДляПроверкиДоступностиСервераЛояльности(НастройкиРМК, ПарольСервераЛояльности)
	
	Результат = Новый Структура();
	Результат.Вставить("АдресСервера", НастройкиРМК.АдресСервераЛояльности);
	Результат.Вставить("Логин", НастройкиРМК.ПользовательСервераЛояльности);
	Результат.Вставить("Пароль", ПарольСервераЛояльности(НастройкиРМК.Ссылка, ПарольСервераЛояльности));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПарольСервераЛояльности(ТекущаяНастройкаРМК, ПарольСервераЛояльности)
	Если НЕ ТекущаяНастройкаРМК.Пустая() Тогда
		Возврат ОбщегоНазначенияРМК.ПарольСервераЛояльности(ТекущаяНастройкаРМК);
	Иначе
		Возврат ПарольСервераЛояльности;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеСервераЛояльности()
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользоватьСерверЛояльностиПолучательДанных(ИспользоватьСерверЛояльностиПолучательДанных);
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		ПарольСервераЛояльности = УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуАдресаСервераЛояльности()
	
	Элементы.НастройкаРМКАдресСервераЛояльности.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	
	Строка1 = Новый ФорматированнаяСтрока(НСтр("ru = 'При использовании защищенного соединения или
				|нестандартного порта подключения необходимо указать адрес в таком виде:'"), Новый Шрифт());
	
	Строка2 = Новый ФорматированнаяСтрока(НСтр("ru = 'https://server:111/base/hs/loyaltyservice'"), Новый Шрифт(,,Истина));
	
	Строка3 = Новый ФорматированнаяСтрока(НСтр("ru = 'Стандартные порты 80 и 443 указывать не требуется.'"), Новый Шрифт(,,,));
	
	ЗаголовокПодсказки = Новый ФорматированнаяСтрока(Строка1, Символы.НПП, Строка2, Символы.ПС, Строка3);
	
	Элементы.НастройкаРМКАдресСервераЛояльности.РасширеннаяПодсказка.Заголовок = ЗаголовокПодсказки;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаНастройкаРасписанияОбменовДанными

&НаСервере
Процедура ЗаполнитьУзлыОбмена()

	Результат = Новый Массив;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьУзлыОбменаРМК(Результат);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		УзелОбмена = Результат[0];
		Элементы.СтраницаНастройкаРасписанияОбменовДанными.Видимость = Истина;
		ЗаполнитьДанныеРасписанияПоУмолчанию();
		РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеРасписанияПоУмолчанию()
	ВидТранспортаОбмена = РегистрыСведений.НастройкиТранспортаОбменаДанными.ВидТранспортаСообщенийОбменаПоУмолчанию(УзелОбмена);

	ВидТранспортаВыгрузкаДанных = ВидТранспортаОбмена;
	ИспользоватьРегламентноеЗаданиеВыгрузкаДанных = Истина;
	РасписаниеРегламентногоЗаданияВыгрузкаДанных = Справочники.СценарииОбменовДанными.РасписаниеРегламентногоЗаданияПоУмолчанию();
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗаданияВыгрузкаДанных);
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда	
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");	
	КонецЕсли;
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок = ПредставлениеРасписания;
	
	ВидТранспортаЗагрузкаДанных = ВидТранспортаОбмена;
	ИспользоватьРегламентноеЗаданиеЗагрузкаДанных = Истина;
	РасписаниеРегламентногоЗаданияЗагрузкаДанных = Справочники.СценарииОбменовДанными.РасписаниеРегламентногоЗаданияПоУмолчанию();
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗаданияЗагрузкаДанных);
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда	
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");	
	КонецЕсли;
	Элементы.НастроитьРасписаниеРегламентногоЗагрузкаДанных.Заголовок = ПредставлениеРасписания;
	
	РегламентноеЗаданиеРавноОтправке = Истина;
	Элементы.ГруппаПолучениеСообщений.Доступность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСценарииОбменаДанными(Команда)
	ОбменДаннымиКлиент.ОбработкаКомандыНастроитьРасписаниеВыполненияОбмена(УзелОбмена, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ДобавитьРасписаниеНаСервере()
	
	Если РегламентноеЗаданиеРавноОтправке Тогда
		СценарийОбменаДанными = Справочники.СценарииОбменовДанными.СоздатьЭлемент();
		Наименование = НСтр("ru = 'Автоматическая синхронизация данных с %1'");
		Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Наименование,
			Строка(УзелОбмена));
			
		СценарийОбменаДанными.Наименование = Наименование;
		СценарийОбменаДанными.ИспользоватьРегламентноеЗадание = ИспользоватьРегламентноеЗаданиеВыгрузкаДанных;
			
		// Создаем регламентное задание.
		Справочники.СценарииОбменовДанными.ОбновитьДанныеРегламентногоЗадания(Ложь, РасписаниеРегламентногоЗаданияВыгрузкаДанных, СценарийОбменаДанными);
			
		// Табличная часть
		СтрокаТаблицы = СценарийОбменаДанными.НастройкиОбмена.Добавить();
		СтрокаТаблицы.ВидТранспортаОбмена = ВидТранспортаВыгрузкаДанных;
		СтрокаТаблицы.ВыполняемоеДействие = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
		СтрокаТаблицы.УзелИнформационнойБазы = УзелОбмена;
			
		СтрокаТаблицы = СценарийОбменаДанными.НастройкиОбмена.Добавить();
		СтрокаТаблицы.ВидТранспортаОбмена = ВидТранспортаВыгрузкаДанных;
		СтрокаТаблицы.ВыполняемоеДействие = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
		СтрокаТаблицы.УзелИнформационнойБазы = УзелОбмена;
			
		СценарийОбменаДанными.Записать();
		
	Иначе
		
		СценарийОбменаДаннымиВыгрузка = Справочники.СценарииОбменовДанными.СоздатьЭлемент();
		Наименование = НСтр("ru = 'Автоматическая выгрузка данных в %1'");
		Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Наименование,
			Строка(УзелОбмена));
			
		СценарийОбменаДаннымиВыгрузка.Наименование = Наименование;
		СценарийОбменаДаннымиВыгрузка.ИспользоватьРегламентноеЗадание = ИспользоватьРегламентноеЗаданиеВыгрузкаДанных;
			
		// Создаем регламентное задание.
		Справочники.СценарииОбменовДанными.ОбновитьДанныеРегламентногоЗадания(Ложь, РасписаниеРегламентногоЗаданияВыгрузкаДанных, СценарийОбменаДаннымиВыгрузка);
			
		// Табличная часть
		СтрокаТаблицы = СценарийОбменаДаннымиВыгрузка.НастройкиОбмена.Добавить();
		СтрокаТаблицы.ВидТранспортаОбмена = ВидТранспортаВыгрузкаДанных;
		СтрокаТаблицы.ВыполняемоеДействие = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
		СтрокаТаблицы.УзелИнформационнойБазы = УзелОбмена;
			
		СценарийОбменаДаннымиВыгрузка.Записать();
		
		СценарийОбменаДаннымиЗагрузка = Справочники.СценарииОбменовДанными.СоздатьЭлемент();
		Наименование = НСтр("ru = 'Автоматическая загрузка данных из %1'");
		Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Наименование,
			Строка(УзелОбмена));
			
		СценарийОбменаДаннымиЗагрузка.Наименование = Наименование;
		СценарийОбменаДаннымиЗагрузка.ИспользоватьРегламентноеЗадание = ИспользоватьРегламентноеЗаданиеЗагрузкаДанных;
			
		// Создаем регламентное задание.
		Справочники.СценарииОбменовДанными.ОбновитьДанныеРегламентногоЗадания(Ложь, РасписаниеРегламентногоЗаданияЗагрузкаДанных, СценарийОбменаДаннымиЗагрузка);
			
		// Табличная часть
		СтрокаТаблицы = СценарийОбменаДаннымиЗагрузка.НастройкиОбмена.Добавить();
		СтрокаТаблицы.ВидТранспортаОбмена = ВидТранспортаЗагрузкаДанных;
		СтрокаТаблицы.ВыполняемоеДействие = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
		СтрокаТаблицы.УзелИнформационнойБазы = УзелОбмена;
			
		СценарийОбменаДаннымиЗагрузка.Записать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРасписание(Команда)
	ДобавитьРасписаниеНаСервере();
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Сценарий обмена создан'"));
КонецПроцедуры

&НаКлиенте
Процедура РегламентноеЗаданиеРавноОтправкеПриИзменении(Элемент)
	Элементы.ГруппаПолучениеСообщений.Доступность = НЕ РегламентноеЗаданиеРавноОтправке;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗадания(Команда)
	
	// Если расписание не инициализировано в форме на сервере, то создаем новое.
	Если РасписаниеРегламентногоЗаданияВыгрузкаДанных = Неопределено Тогда
		
		РасписаниеРегламентногоЗаданияВыгрузкаДанных = Новый РасписаниеРегламентногоЗадания;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗаданияВыгрузкаДанных);
	
	// Открываем диалог для редактирования Расписания.
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияЗавершение", ЭтотОбъект, Новый Структура("ВыгрузкаДанных", Истина));
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		
		Если РазделениеВключено 
			И Расписание.ПериодПовтораВТечениеДня < 15*60 Тогда
			
			Расписание.ПериодПовтораВТечениеДня = 15*60;
			ТекстПредупреждения = НСтр("ru = 'Минимальный интервал не должен быть меньше 15 минут (900 секунд).'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		КонецЕсли;
		Если ДополнительныеПараметры.ВыгрузкаДанных Тогда
			РасписаниеРегламентногоЗаданияВыгрузкаДанных = Расписание;
			ОбновитьПредставлениеРасписания(РасписаниеРегламентногоЗаданияВыгрузкаДанных, ДополнительныеПараметры.ВыгрузкаДанных);
		Иначе
			РасписаниеРегламентногоЗаданияЗагрузкаДанных = Расписание;
			ОбновитьПредставлениеРасписания(РасписаниеРегламентногоЗаданияЗагрузкаДанных, ДополнительныеПараметры.ВыгрузкаДанных);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеРасписания(Расписание, ВыгрузкаДанных = Истина)
	
	ПредставлениеРасписания = Строка(Расписание);
	
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
		
	КонецЕсли;
	
	Если ВыгрузкаДанных Тогда
		Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок = ПредставлениеРасписания;
	Иначе
		Элементы.НастроитьРасписаниеРегламентногоЗагрузкаДанных.Заголовок = ПредставлениеРасписания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗагрузкаДанных(Команда)
	
	// Если расписание не инициализировано в форме на сервере, то создаем новое.
	Если РасписаниеРегламентногоЗаданияЗагрузкаДанных = Неопределено Тогда
		
		РасписаниеРегламентногоЗаданияЗагрузкаДанных = Новый РасписаниеРегламентногоЗадания;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗаданияЗагрузкаДанных);
	
	// Открываем диалог для редактирования Расписания.
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияЗавершение", ЭтотОбъект, Новый Структура("ВыгрузкаДанных", Ложь));
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПодключенияОбмена(Команда)
	ОбработчикПослеЗакрытияФормы = Новый ОписаниеОповещения("ИзменитьВидПодключения", ЭтаФорма);
	Отбор              = Новый Структура("Корреспондент", УзелОбмена);
	ЗначенияЗаполнения = Новый Структура("Корреспондент", УзелОбмена);
		
	ОбменДаннымиКлиент.ОткрытьФормуЗаписиРегистраСведенийПоОтбору(Отбор,
		ЗначенияЗаполнения, "НастройкиТранспортаОбменаДанными",ЭтотОбъект,,,ОбработчикПослеЗакрытияФормы);
КонецПроцедуры
	
&НаКлиенте
Процедура ИзменитьВидПодключения(Результат, ДополнительныеПараметры) Экспорт
	ЗаполнитьВидТранспорта();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидТранспорта()
	ВидТранспортаОбмена = РегистрыСведений.НастройкиТранспортаОбменаДанными.ВидТранспортаСообщенийОбменаПоУмолчанию(УзелОбмена);
	ВидТранспортаВыгрузкаДанных = ВидТранспортаОбмена;
	ВидТранспортаЗагрузкаДанных = ВидТранспортаОбмена;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаНастройкаПодключенияОборудования

#Область ОбщиеПроцедурыИФункцииНастройкаПодключенияОборудования

&НаСервере
Функция ПолучитьСписокДрайверовПоОтбору(МассивТиповПО, Имя)
	
	СписокДрайверов = Новый СписокЗначений();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДрайверыОборудования.Ссылка КАК Ссылка,
	                      |	ДрайверыОборудования.Наименование КАК Наименование,
	                      |	ДрайверыОборудования.ТипОборудования КАК ТипОборудования,
	                      |	ВЫБОР
	                      |		КОГДА ДрайверыОборудования.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор)
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК ЭтоФР
	                      |ИЗ
	                      |	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	                      |ГДЕ
	                      |	ДрайверыОборудования.ТипОборудования В(&МассивТиповПО)
	                      |	И НЕ ДрайверыОборудования.ПометкаУдаления
	                      |	И ДрайверыОборудования.Наименование ПОДОБНО &ИмяПроизводителя
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДрайверыОборудования.Наименование");
		
	Запрос.УстановитьПараметр("МассивТиповПО", МассивТиповПО);
	Запрос.УстановитьПараметр("ИмяПроизводителя", Имя);
	
	РезультатЗапроса = Запрос.Выполнить();

	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Дополнение = СтрШаблон(" %1", НСтр("ru = '(ККТ)'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Если ВыборкаДетальныеЗаписи.ЭтоФР Тогда
			Дополнение = СтрШаблон(" %1", НСтр("ru = '(ФР)'", ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
		
		СписокДрайверов.Добавить(ВыборкаДетальныеЗаписи.Ссылка,
			СокрЛП(ВыборкаДетальныеЗаписи.Наименование) + Дополнение);
			
	КонецЦикла;
	
	Возврат СписокДрайверов;

КонецФункции

&НаКлиенте
Процедура ПрочитатьНастройкиДрайвера()
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПараметрыОборудования", ЭтотОбъект);
	ДанныеУстройства = МенеджерОборудованияВызовСервера.ДанныеУстройства(ИдентификаторОборудования); // Структура
	МенеджерОборудованияКлиент.НачатьПолучениеОписанияОборудования(Оповещение, , ДанныеУстройства);
	
КонецПроцедуры

&НаКлиенте
Процедура ПортПриИзменении(Элемент)
	Элементы.ГруппаCOMUSB.Видимость = Порт = "0" ИЛИ Порт = "1";
	Элементы.ГруппаIPАдрес.Видимость = Порт = "2";
	Элементы.MACАдрес.Видимость = Порт = "3";
	МодифицированностьПараметров = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыОборудования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойство("ОписаниеОшибки") 
		И ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Элементы.ТекстОшибкиНастройкиОборудования.Заголовок = Результат.ОписаниеОшибки;
		Элементы.ТекстОшибкиНастройкиОборудования.Видимость = Истина;
		Возврат;
	Иначе
		Элементы.ГруппаОбщиеНастройкиАтол.Видимость = НЕ ИдентификаторОборудования.Пустая() И ВыбранныйПроизводитель = 1;
		Элементы.ГруппаОбщиеНастройкиШтрихМ.Видимость = НЕ ИдентификаторОборудования.Пустая() И ВыбранныйПроизводитель = 2;
		Элементы.ГруппаОбщиеНастройкиДримкас.Видимость = НЕ ИдентификаторОборудования.Пустая() И ВыбранныйПроизводитель = 3;
		Элементы.ГруппаОбщиеНастройкиСбербанк.Видимость = НЕ ИдентификаторОборудования.Пустая() И ВыбранныйПроизводитель = 4;
		Элементы.ГруппаКомандыСозданияОборудования.Видимость = Истина;
		Элементы.ТекстОшибкиНастройкиОборудования.Заголовок = "";
		Элементы.ТекстОшибкиНастройкиОборудования.Видимость = Ложь;
	КонецЕсли;
	
	ОчиститьНастройкиОборудования();

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Результат.ОписаниеДрайвера.ПараметрыДрайвера);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.Имя = "Settings" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.Имя = "Parameter" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТолькоЧтение = ?(ВРег(ЧтениеXML.ЗначениеАтрибута("ReadOnly")) = "TRUE", Истина, Ложь)
					Или ?(ВРег(ЧтениеXML.ЗначениеАтрибута("ReadOnly")) = "ИСТИНА", Истина, Ложь);
				ОригинальноеИмя   =  ЧтениеXML.ЗначениеАтрибута("Name");
				ПараметрИмя       = ?(ТолькоЧтение, "R_", "P_") + ОригинальноеИмя;
				ПараметрТип       = ?(НЕ ПустаяСтрока(ПараметрТип), ПараметрТип, "STRING");
				ПараметрЗначение  = ЧтениеXML.ЗначениеАтрибута("DefaultValue");
				
				Элемент = Неопределено;
				ИмяРеквизита = "";

				Если ВыбранныйПроизводитель = 1 Тогда
					Если ОригинальноеИмя = "Port" Тогда
						Элемент = Элементы.Порт;
						ИмяРеквизита = "Порт";
					ИначеЕсли ОригинальноеИмя = "ComFile" Тогда
						Элемент = Элементы.COMVCOM;
						ИмяРеквизита = "COMПодключение";
					ИначеЕсли ОригинальноеИмя = "BaudRate" Тогда
						Элемент = Элементы.Скорость;
						ИмяРеквизита = "Скорость";
					ИначеЕсли ОригинальноеИмя = "IPAddress" Тогда
						Элемент = Элементы.IPАдрес;
						ИмяРеквизита = "IPАдрес";
					ИначеЕсли ОригинальноеИмя = "IPPort" Тогда
						Элемент = Элементы.IPПорт;
						ИмяРеквизита = "IPПорт";
					ИначеЕсли ОригинальноеИмя = "MACAddress" Тогда
						Элемент = Элементы.MACАдрес;
						ИмяРеквизита = "MACАдрес";
					КонецЕсли;
				ИначеЕсли ВыбранныйПроизводитель = 2 Тогда
					Если ОригинальноеИмя = "ConnectionType" Тогда
						Элемент = Элементы.ТипПодключения;
						ИмяРеквизита = "ТипПодключения";
					ИначеЕсли ОригинальноеИмя = "ProtocolType" Тогда
						Элемент = Элементы.ТипПротокола;
						ИмяРеквизита = "ТипПротокола"; 
					ИначеЕсли ОригинальноеИмя = "Port" Тогда
						Элемент = Элементы.COMVCOMШтрихМ;
						ИмяРеквизита = "COMПодключение";
					ИначеЕсли ОригинальноеИмя = "Baudrate" Тогда
						Элемент = Элементы.СкоростьШтрихМ;
						ИмяРеквизита = "Скорость";
					ИначеЕсли ОригинальноеИмя = "ComputerName" Тогда
						Элемент = Элементы.ИмяКомпьютера;
						ИмяРеквизита = "ИмяКомпьютера";
					ИначеЕсли ОригинальноеИмя = "IPAddress" Тогда
						Элемент = Элементы.IPАдресШтрихМ;
						ИмяРеквизита = "IPАдрес";
					ИначеЕсли ОригинальноеИмя = "TCPPort" Тогда
						Элемент = Элементы.TCPПорт;
						ИмяРеквизита = "IPПорт";
					КонецЕсли;
				ИначеЕсли ВыбранныйПроизводитель = 3 Тогда
					Если ОригинальноеИмя = "Port" Тогда
						Элемент = Элементы.COMVCOMДримкас;
						ИмяРеквизита = "COMПодключение";
					ИначеЕсли ОригинальноеИмя = "Speed" Тогда
						Элемент = Элементы.СкоростьДримкас;
						ИмяРеквизита = "Скорость";
					КонецЕсли;
				ИначеЕсли ВыбранныйПроизводитель = 4 Тогда
					Если ОригинальноеИмя = "DistribPath" Тогда
						Элемент = Элементы.ПутьSBPilot;
						ИмяРеквизита = "ПутьSBPilot";
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ПараметрЗначение) Тогда
					Если ПараметрТип = "BOOLEAN" Тогда
						ПараметрЗначение = ?(ВРег(ПараметрЗначение) = "TRUE", Истина, Ложь) Или ?(ВРег(ПараметрЗначение) = "ИСТИНА", Истина, Ложь);
					ИначеЕсли ПараметрТип = "STRING" Тогда
						ПараметрЗначение = Строка(ПараметрЗначение);
					КонецЕсли;
				КонецЕсли;
				
				ПараметрыДрайвера.Добавить(ПараметрЗначение,ПараметрИмя);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ИмяРеквизита) Тогда
				ЭтотОбъект[ИмяРеквизита] = ПараметрЗначение;
			КонецЕсли;
			
			Если ЧтениеXML.Имя = "ChoiceList" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НЕ Элемент = Неопределено Тогда
				
				Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = "ChoiceList") Цикл
					
					Если ЧтениеXML.Имя = "Item" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						
						ЗначениеАтрибута = ЧтениеXML.ЗначениеАтрибута("Value"); 
						Если ЧтениеXML.Прочитать() Тогда
							ПредставлениеАтрибута = ЧтениеXML.Значение;
						КонецЕсли;
						Если ПустаяСтрока(ЗначениеАтрибута) Тогда
							ЗначениеАтрибута = ПредставлениеАтрибута;
						КонецЕсли;
						
						Если ПараметрТип = "NUMBER" Тогда 
							Элемент.СписокВыбора.Добавить(Число(ЗначениеАтрибута), ПредставлениеАтрибута);
						Иначе
							Элемент.СписокВыбора.Добавить(ЗначениеАтрибута, ПредставлениеАтрибута)
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьЭкземплярОборудованияНаСервере()
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ПодключаемоеОборудование");
		БлокировкаДанных.Заблокировать();
		
		НовыйЭкземплярОборудования = Справочники.ПодключаемоеОборудование.СоздатьЭлемент();
		НовыйЭкземплярОборудования.Наименование = НаименованиеОборудованияНастройка;
		НовыйЭкземплярОборудования.ТипПодключения = Перечисления.ТипыПодключенияОборудования.ЛокальноеПодключение;
		НовыйЭкземплярОборудования.ТипОборудования = ДрайверОборудованияНастройка.ТипОборудования;
		НовыйЭкземплярОборудования.Организация = Объект.Организация;
		НовыйЭкземплярОборудования.РабочееМесто = ТекущееРабочееМесто;
		НовыйЭкземплярОборудования.ДрайверОборудования = ДрайверОборудованияНастройка;
		НовыйЭкземплярОборудования.УстройствоИспользуется = Истина;
		НовыйЭкземплярОборудования.СпособФорматноЛогическогоКонтроля = Перечисления.СпособыФорматноЛогическогоКонтроля.РазделятьСтроки;
		НовыйЭкземплярОборудования.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = 0.01;
		НовыйЭкземплярОборудования.Записать();
		ИдентификаторОборудования = НовыйЭкземплярОборудования.Ссылка;
		
		ПодключаемоеОборудование = ИдентификаторОборудования;
		ДрайверОборудования = ДрайверОборудованияНастройка;
		НаименованиеПодключаемоеОборудование = НаименованиеОборудованияНастройка;
		Если ТекущийТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал Тогда
			ИспользуемыеЭквайринговыеТерминалы = ИспользуемыеЭквайринговыеТерминалы + 1;
		Иначе
			ИспользуемоеККТ = ИспользуемоеККТ + 1;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при создании оборудования.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭкземплярОборудования(Команда) 
	Если ЭтоДубльОборудованияНаименования(НаименованиеОборудованияНастройка) Тогда
		СообщениеОбОшибке = НСтр("ru='Не удалось создать оборудование. Оборудование с таким наименованием уже существует'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке); 
		Возврат;
	КонецЕсли;
	
	Если ДрайверОборудованияНастройка.Пустая() Тогда
		СообщениеОбОшибке = НСтр("ru='Не удалось создать оборудование. Не заполнен драйвер'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке); 
		Возврат;
	КонецЕсли;
	
	СоздатьЭкземплярОборудованияНаСервере();
	
	Если НЕ ПодключаемоеОборудование.Пустая() Тогда
		Элементы.СоздатьЭкземплярОборудования.Видимость = Ложь;
		ПриИзмененииПодключаемоеОборудование();
		Если ТекущийТипОборудования =
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор")
				ИЛИ ТекущийТипОборудования =
				ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
					ИзменитьПодключаемоеОборудованиеКассыККМ(ТекущаяКассаККМ, ПодключаемоеОборудование);
		КонецЕсли;
	КонецЕсли;
	
	ПрочитатьНастройкиДрайвера();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПараметрыОборудования(Команда)
	МодифицированностьПараметров = Ложь;
	СохранитьПараметрыОборудование(КодВозвратаДиалога.Да);
КонецПроцедуры 

&НаКлиенте
Процедура СохранитьПараметрыОборудование(Результат, ДополнительныеПараметры = Неопределено) экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключаемоеОборудование.Пустая() Тогда
		ПриИзмененииПодключаемоеОборудование()
	КонецЕсли;
	
	ЗначенияНастроек = ПодготовитьПараметрыОборудования();
	РезультатЗавершения = МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(ИдентификаторОборудования, ЗначенияНастроек);
	
	Если НЕ РезультатЗавершения Тогда
		СообщениеОбОшибке = НСтр("ru='Не удалось сохранить параметры устройства.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьПараметрыОборудования()
	СтруктураНастроек = Новый Структура;
	Если ВыбранныйПроизводитель = 1 Тогда
		СтруктураНастроек.Вставить("P_Port", Порт);
		СтруктураНастроек.Вставить("P_ComFile", COMПодключение);
		СтруктураНастроек.Вставить("P_BaudRate", Скорость);
		СтруктураНастроек.Вставить("P_IPAddress", IPАдрес);
		СтруктураНастроек.Вставить("P_IPPort", IPПорт);
		СтруктураНастроек.Вставить("P_MACAddress", MACАдрес);
	ИначеЕсли ВыбранныйПроизводитель = 2 Тогда
		СтруктураНастроек.Вставить("P_ConnectionType", ТипПодключения);
		СтруктураНастроек.Вставить("P_ProtocolType", ТипПротокола);
		СтруктураНастроек.Вставить("P_Port", COMПодключение);
		СтруктураНастроек.Вставить("P_Baudrate", Скорость);
		СтруктураНастроек.Вставить("P_ComputerName", ИмяКомпьютера);
		СтруктураНастроек.Вставить("P_IPAddress", IPАдрес);
		СтруктураНастроек.Вставить("P_TCPPort", IPПорт);
	ИначеЕсли ВыбранныйПроизводитель = 3 Тогда
		СтруктураНастроек.Вставить("P_Port", COMПодключение);
		СтруктураНастроек.Вставить("P_Speed", Скорость);
	ИначеЕсли ВыбранныйПроизводитель = 4 Тогда
		СтруктураНастроек.Вставить("P_DistribPath", ПутьSBPilot);
	КонецЕсли;
	Возврат СтруктураНастроек;
КонецФункции

&НаКлиенте
Процедура ТестПодключения(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыУстройства = ПодготовитьПараметрыОборудования();
	Оповещение = Новый ОписаниеОповещения("ТестУстройстваЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьТестУстройства(Оповещение, ИдентификаторОборудования, ПараметрыУстройства);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестУстройстваЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ДополнительноеОписание = РезультатВыполнения.РезультатВыполнения;
		ДемонстрационныйРежим =  РезультатВыполнения.АктивированДемоРежим;
	КонецЕсли;
	
	ТекстСообщения = ?(РезультатВыполнения.Результат,  НСтр("ru = 'Тест успешно выполнен. %ДополнительноеОписание%'"),
	                               НСтр("ru = 'Тест не пройден. %ДополнительноеОписание%'"));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ?(ПустаяСтрока(ДополнительноеОписание), "", ДополнительноеОписание));
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура БольшеНастроек(Команда)
	МенеджерОборудованияКлиент.ВыполнитьНастройкуОборудования(ИдентификаторОборудования);
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемоеОборудованиеСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ТекущийТипОборудования = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор") 
		ИЛИ ТекущийТипОборудования = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
		НастраиваемаяОрганизация = Объект.Организации[ИндексСтрокиОрганизации];
		ТекущаяКассаККМ = НастраиваемаяОрганизация.КассаККМ;
		Элементы.НастройкаПодключенияККМ.Видимость = Истина;
	Иначе
		Элементы.ГруппаНастройкаПодключениеЭквайринговогоТерминала.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ГруппаПодключаемоеОборудованиеВертикальная.Видимость = Ложь;
КонецПроцедуры

&НаСервере
Процедура ОчиститьНастройкиОборудования()
	Порт = "";
	COMПодключение = "";
	Скорость = "";
	MACАдрес = "";
	IPАдрес = "";
	IPПорт = 0;
	ТипПодключения = "";
	ТипПротокола = "";
	ИмяКомпьютера = "";
	ПутьSBPilot = "";
КонецПроцедуры

&НаСервере
Процедура ПереместитьОбщиеНастройкиОборудования()
	Если ВыбранныйПроизводитель = 4 ИЛИ ВыбранныйПроизводитель = 5 Тогда
		Элементы.Переместить(Элементы.ДекорацияЭквайринговыйТерминал, Элементы.ГруппаНастройкиЭквайринговыйТерминал);
		Элементы.Переместить(Элементы.ОрганизацияНастройкаОборудования, Элементы.ГруппаНастройкиЭквайринговыйТерминал);
		Элементы.Переместить(Элементы.НаименованиеОборудования, Элементы.ГруппаНастройкиЭквайринговыйТерминал);
		Элементы.Переместить(Элементы.ДрайверОборудованияНастройка, Элементы.ГруппаНастройкиЭквайринговыйТерминал);
		Элементы.Переместить(Элементы.СоздатьЭкземплярОборудования, Элементы.ГруппаКомандыЭквайринговыйТерминал);
		Элементы.Переместить(Элементы.ГруппаКомандыСозданияОборудования, Элементы.ГруппаКомандыЭквайринговыйТерминал);
	Иначе
		Элементы.Переместить(Элементы.ОрганизацияНастройкаОборудования, Элементы.ГруппаНастройкиККТ);
		Элементы.Переместить(Элементы.НаименованиеОборудования, Элементы.ГруппаНастройкиККТ);
		Элементы.Переместить(Элементы.ДрайверОборудованияНастройка, Элементы.ГруппаНастройкиККТ);
		Элементы.Переместить(Элементы.СоздатьЭкземплярОборудования, Элементы.ГруппаКомандыККТ);
		Элементы.Переместить(Элементы.ГруппаКомандыСозданияОборудования, Элементы.ГруппаКомандыККТ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОборудования()
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ПодключаемоеОборудование");
		БлокировкаДанных.Заблокировать(); 
		
		ПодключаемоеОборудованиеОбъект = ПодключаемоеОборудование.ПолучитьОбъект();
		ПодключаемоеОборудованиеОбъект.Наименование = НаименованиеПодключаемоеОборудование;
		ПодключаемоеОборудованиеОбъект.ДрайверОборудования = ДрайверОборудования;
		ПодключаемоеОборудованиеОбъект.Записать(); 
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось записать оборудование.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
	Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда

		СтрокаТаблицы = Объект.ТаблицаПодключаемоеОборудование[ИндексСтрокиПодключаемоеОборудование];
		СтрокаТаблицы.ПодключаемоеОборудование	= ПодключаемоеОборудование;
		СтрокаТаблицы.СерийныйНомер				= СерийныйНомерПодключаемоеОборудование;
		ПриИзмененииПодключаемоеОборудование();
		СкорректироватьТаблицуУжеПодключенногоОборудования(СтрокаТаблицы);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДрайверОборудованияНастройкаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.ДрайверыОборудования.Форма.ФормаСписка",,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область НастройкиККТПроцедурыИФункцииНастройкаПодключенияОборудования

&НаКлиенте
Процедура ВыборПроизводительАтол(Команда)
	
	МассивТиповОборудования = Новый Массив;
	МассивТиповОборудования.Добавить(ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ККТ"));
	СписокДрайверов = ПолучитьСписокДрайверовПоОтбору(МассивТиповОборудования, НСтр("ru ='АТОЛ%'"));
	ДрайверОборудования = ПредопределенноеЗначение("Справочник.ДрайверыОборудования.ПустаяСсылка");
	Элементы.ДрайверОборудованияНастройка.СписокВыбора.Очистить();
	
	Для каждого СтрокаСписка Из СписокДрайверов Цикл
		Элементы.ДрайверОборудованияНастройка.СписокВыбора.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
	КонецЦикла;
	Если СписокДрайверов.Количество() = 1 Тогда
		ДрайверОборудованияНастройка = СписокДрайверов[0].Значение;
	КонецЕсли;
	НаименованиеОборудованияНастройка = Строка(ТекущаяКассаККМ) + " (" + Строка(ТекущееРабочееМесто) + ")";
	Элементы.НаименованиеОборудования.СписокВыбора.Очистить();
	Элементы.НаименованиеОборудования.СписокВыбора.Добавить(НаименованиеОборудованияНастройка);
	Элементы.ГруппаНастройкаОборудования.Видимость = Истина;
	Элементы.ГруппаВыборПроизводителя.Видимость = Ложь;
	ВыбранныйПроизводитель = 1;
	ПереместитьОбщиеНастройкиОборудования();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПроизводительШтрихМ(Команда)
	МассивТиповОборудования = Новый Массив;
	МассивТиповОборудования.Добавить(ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ККТ"));
	СписокДрайверов = ПолучитьСписокДрайверовПоОтбору(МассивТиповОборудования, НСтр("ru ='ШТРИХ-М%'"));
	
	Элементы.ДрайверОборудованияНастройка.СписокВыбора.Очистить();
	
	Для каждого СтрокаСписка Из СписокДрайверов Цикл
		Элементы.ДрайверОборудованияНастройка.СписокВыбора.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
	КонецЦикла;
	
	Если СписокДрайверов.Количество() = 1 Тогда
		ДрайверОборудованияНастройка = СписокДрайверов[0].Значение;
	КонецЕсли;
	
	НаименованиеОборудованияНастройка = Строка(ТекущаяКассаККМ) + " (" + Строка(ТекущееРабочееМесто) + ")";
	Элементы.НаименованиеОборудования.СписокВыбора.Очистить();
	Элементы.НаименованиеОборудования.СписокВыбора.Добавить(НаименованиеОборудованияНастройка);

	Элементы.ГруппаНастройкаОборудования.Видимость = Истина;
	Элементы.ГруппаВыборПроизводителя.Видимость = Ложь; 
	ВыбранныйПроизводитель = 2;
	ПереместитьОбщиеНастройкиОборудования();
КонецПроцедуры

&НаКлиенте
Процедура ВыборПроизводительДримкас(Команда)
	МассивТиповОборудования = Новый Массив;
	МассивТиповОборудования.Добавить(ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ККТ"));
	СписокДрайверов = ПолучитьСписокДрайверовПоОтбору(МассивТиповОборудования, НСтр("ru ='Дримкас%'"));
	
	Элементы.ДрайверОборудованияНастройка.СписокВыбора.Очистить();
	
	Для каждого СтрокаСписка Из СписокДрайверов Цикл
		Элементы.ДрайверОборудованияНастройка.СписокВыбора.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
	КонецЦикла;
	
	Если СписокДрайверов.Количество() = 1 Тогда
		ДрайверОборудованияНастройка = СписокДрайверов[0].Значение;
	КонецЕсли;
	НаименованиеОборудованияНастройка = Строка(ТекущаяКассаККМ) + " (" + Строка(ТекущееРабочееМесто) + ")";
	Элементы.НаименованиеОборудования.СписокВыбора.Очистить();
	Элементы.НаименованиеОборудования.СписокВыбора.Добавить(НаименованиеОборудованияНастройка);

	Элементы.ГруппаНастройкаОборудования.Видимость = Истина;
	Элементы.ГруппаВыборПроизводителя.Видимость = Ложь;
	ВыбранныйПроизводитель = 3;
	ПереместитьОбщиеНастройкиОборудования();
КонецПроцедуры

&НаКлиенте
Процедура ВыборПроизводительДругие(Команда)
	МассивТиповОборудования = Новый Массив;
	МассивТиповОборудования.Добавить(ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ККТ"));
	СписокДрайверов = ПолучитьСписокДрайверовПоМассиву(МассивТиповОборудования);
	
	Элементы.ДрайверОборудованияНастройка.СписокВыбора.Очистить();
	
	Для каждого СтрокаСписка Из СписокДрайверов Цикл
		Элементы.ДрайверОборудованияНастройка.СписокВыбора.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
	КонецЦикла;
	НаименованиеОборудованияНастройка = Строка(ТекущаяКассаККМ) + " (" + Строка(ТекущееРабочееМесто) + ")";
	Элементы.НаименованиеОборудования.СписокВыбора.Очистить();
	Элементы.НаименованиеОборудования.СписокВыбора.Добавить(НаименованиеОборудованияНастройка);

	Элементы.ГруппаНастройкаОборудования.Видимость = Истина;
	Элементы.ГруппаВыборПроизводителя.Видимость = Ложь;
	ПереместитьОбщиеНастройкиОборудования();
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьЭлементыНастройкиКассыККМ()
	Элементы.ГруппаВыборПроизводителя.Видимость = Истина;
	Элементы.ГруппаНастройкаОборудования.Видимость = Ложь;
	Элементы.ГруппаОбщиеНастройкиАтол.Видимость = Ложь;
	Элементы.ГруппаОбщиеНастройкиШтрихМ.Видимость = Ложь;
	Элементы.ГруппаОбщиеНастройкиДримкас.Видимость = Ложь;
	Элементы.СоздатьЭкземплярОборудования.Видимость = Истина;
	Элементы.ГруппаКомандыСозданияОборудования.Видимость = Ложь;
	Элементы.ТекстОшибкиНастройкиОборудования.Заголовок = "";
	Элементы.ТекстОшибкиНастройкиОборудования.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТипПодключенияПриИзменении(Элемент)
	#Если Не ВебКлиент Тогда
		ИмяКомпьютера = ИмяКомпьютера();
	#КонецЕсли
	Элементы.ГруппаЛокальноеПодключение.Видимость = ТипПодключения = "0";
	Элементы.ГруппаTCPПротокол.Видимость = ТипПодключения = "1";
	Элементы.ГруппаDCOMПротокол.Видимость = ТипПодключения = "2";
	Элементы.ГруппаTCPSocketПротокол.Видимость = ТипПодключения = "6"; 
	ПереместитьЭлементыШтрихМ();
КонецПроцедуры

&НаСервере
Процедура ПереместитьЭлементыШтрихМ()
	
	Если ТипПодключения = "1" Тогда
		Элементы.Переместить(Элементы.ИмяКомпьютера,Элементы.ГруппаTCPПротокол);
		Элементы.Переместить(Элементы.IPАдресШтрихМ,Элементы.ГруппаTCPПротокол);
		Элементы.Переместить(Элементы.TCPПорт,Элементы.ГруппаTCPПротокол);
	ИначеЕсли ТипПодключения = "2" Тогда
		Элементы.Переместить(Элементы.ИмяКомпьютера,Элементы.ГруппаDCOMПротокол);
	ИначеЕсли ТипПодключения = "6" Тогда
		Элементы.Переместить(Элементы.IPАдресШтрихМ,Элементы.ГруппаTCPSocketПротокол);
		Элементы.Переместить(Элементы.TCPПорт,Элементы.ГруппаTCPSocketПротокол);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура COMVCOMПриИзменении(Элемент)
	МодифицированностьПараметров = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СкоростьПриИзменении(Элемент)
	МодифицированностьПараметров = Истина;
КонецПроцедуры

&НаКлиенте
Процедура IPАдресПриИзменении(Элемент)
	МодифицированностьПараметров = Истина;
КонецПроцедуры

&НаКлиенте
Процедура IPПортПриИзменении(Элемент)
	МодифицированностьПараметров = Истина;
КонецПроцедуры

&НаКлиенте
Процедура MACАдресПриИзменении(Элемент)
	МодифицированностьПараметров = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТипПротоколаПриИзменении(Элемент)
	МодифицированностьПараметров = Истина;
КонецПроцедуры

&НаКлиенте
Процедура COMVCOMШтрихМПриИзменении(Элемент)
	МодифицированностьПараметров = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СкоростьШтрихМПриИзменении(Элемент)
	МодифицированностьПараметров = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИмяКомпьютераПриИзменении(Элемент)
	МодифицированностьПараметров = Истина;
КонецПроцедуры

&НаКлиенте
Процедура IPАдресШтрихМПриИзменении(Элемент)
	МодифицированностьПараметров = Истина;
КонецПроцедуры

&НаКлиенте
Процедура TCPПортПриИзменении(Элемент)
	МодифицированностьПараметров = Истина;
КонецПроцедуры

&НаКлиенте
Процедура COMVCOMДримкасПриИзменении(Элемент)
	МодифицированностьПараметров = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СкоростьДримкасПриИзменении(Элемент)
	МодифицированностьПараметров = Истина;
КонецПроцедуры

#КонецОбласти

#Область НастройкиЭквайринговыйТерминалПроцедурыИФункцииНастройкаПодключенияОборудования
&НаКлиенте
Процедура ВосстановитьЭлементыНастройкиЭквайринговыйТерминал()
	Элементы.ГруппаВыборПроизводителяЭквайринговыйТерминал.Видимость = Истина;
	Элементы.СоздатьЭкземплярОборудования.Видимость = Истина;
	Элементы.ГруппаНастройкиЭквайринговыйТерминал.Видимость = Истина;
	Элементы.ГруппаНастройкаЭквайринговыйТерминал.Видимость = Ложь;
	Элементы.ТекстОшибкиНастройкиОборудования.Заголовок = "";
	Элементы.ТекстОшибкиНастройкиОборудования.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВыборСбербанк(Команда)
	МассивТиповОборудования = Новый Массив;
	МассивТиповОборудования.Добавить(ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"));
	СписокДрайверов = ПолучитьСписокДрайверовПоОтбору(МассивТиповОборудования, НСтр("ru ='%Сбербанк%'"));
	
	Элементы.ДрайверОборудованияНастройка.СписокВыбора.Очистить();
	
	Для каждого СтрокаСписка Из СписокДрайверов Цикл
		Элементы.ДрайверОборудованияНастройка.СписокВыбора.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
	КонецЦикла;
	
	Если СписокДрайверов.Количество() = 1 Тогда
		ДрайверОборудованияНастройка = СписокДрайверов[0].Значение;
	КонецЕсли;
	
	НаименованиеОборудованияНастройка = НСтр("ru ='Эквайринговый терминал'") + " (" + Строка(ТекущееРабочееМесто) + ")";
	Элементы.НаименованиеОборудования.СписокВыбора.Очистить();
	Элементы.НаименованиеОборудования.СписокВыбора.Добавить(НаименованиеОборудованияНастройка);

	Элементы.ГруппаНастройкаЭквайринговыйТерминал.Видимость = Истина;
	Элементы.ГруппаВыборПроизводителяЭквайринговыйТерминал.Видимость = Ложь;

	ВыбранныйПроизводитель = 4;
	ПереместитьОбщиеНастройкиОборудования();
КонецПроцедуры

&НаКлиенте
Процедура ВыборДругое(Команда)
	МассивТиповОборудования = Новый Массив;
	МассивТиповОборудования.Добавить(ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"));
	СписокДрайверов = ПолучитьСписокДрайверовПоМассиву(МассивТиповОборудования);
	
	Элементы.ДрайверОборудованияНастройка.СписокВыбора.Очистить();
	
	Для каждого СтрокаСписка Из СписокДрайверов Цикл
		Элементы.ДрайверОборудованияНастройка.СписокВыбора.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
	КонецЦикла;
	НаименованиеОборудованияНастройка = НСтр("ru ='Эквайринговый терминал'") + " (" + Строка(ТекущееРабочееМесто) + ")";
	Элементы.НаименованиеОборудования.СписокВыбора.Очистить();
	Элементы.НаименованиеОборудования.СписокВыбора.Добавить(НаименованиеОборудованияНастройка);

	Элементы.ГруппаНастройкаЭквайринговыйТерминал.Видимость = Истина;
	Элементы.ГруппаВыборПроизводителяЭквайринговыйТерминал.Видимость = Ложь;

	ВыбранныйПроизводитель = 5;
	ПереместитьОбщиеНастройкиОборудования();
КонецПроцедуры

&НаКлиенте
Процедура ПутьSBPilotПриИзменении(Элемент)
	МодифицированностьПараметров = Истина;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
