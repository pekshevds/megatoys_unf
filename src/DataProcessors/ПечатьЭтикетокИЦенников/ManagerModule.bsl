#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Формирует незаполненную структуру результатов.
//
// Возвращаемое значение:
//  Структура - структура результата.
//
Функция ПолучитьПустуюСтруктуруРезультата() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ТаблицаТоваров" , Неопределено);
	Структура.Вставить("СоответствиеПолейСКДКолонкамТаблицыТоваров", Новый Соответствие);
	
	Возврат Структура;
	
КонецФункции

// Подготавливает структуру данных, необходимую для печати ценников и этикеток.
//
// Параметры:
//  СтруктураНастроек - Структура - структура настроек печати.
//  СтруктураШаблона - Структура -структура шаблона.
//
// Возвращаемое значение:
//  Структура - данные, необходимые для печати этикеток и ценников.
//
Функция ПодготовитьСтруктуруДанных(СтруктураНастроек, СтруктураШаблона = Неопределено, Режим = "") Экспорт
	
	СхемаКомпоновкиДанных = Неопределено;
	Если СтруктураНастроек.ИсходныеДанные <> Неопределено Тогда
		ИсходныеДанные = СтруктураНастроек.ИсходныеДанные.Скопировать();
	Иначе
		ИсходныеДанные = Неопределено;
	КонецЕсли;
	
	Если СтруктураШаблона = Неопределено Тогда
		ТаблицаИсходныеДанные = СтруктураНастроек.ИсходныеДанные;
	Иначе
		СтруктураОтбора = Новый Структура;
		ИмяКолонки = СтрЗаменить(СтруктураШаблона.ИмяКолонкиШаблон, "ДляПечати", "");
		СтруктураОтбора.Вставить(ИмяКолонки, СтруктураШаблона.Шаблон);
		ТаблицаИсходныеДанные = СтруктураНастроек.ИсходныеДанные.Скопировать(СтруктураОтбора);
		ХранилищеСКД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШаблона.Шаблон, "СхемаКомпоновкиДанных");
		СхемаКомпоновкиДанных = ХранилищеСКД.Получить();
	КонецЕсли;
	
	СтруктураРезультата = ПолучитьПустуюСтруктуруРезультата();
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
	КонецЕсли;
	
	НаборДанныхВСКДЗапрос = ТипЗнч(СхемаКомпоновкиДанных.НаборыДанных.НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных");
	
	Если НаборДанныхВСКДЗапрос Тогда
		
		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос;
		
		ПечатьЭтикетокИСМПУНФ.ПриПодготовкеСтруктурыДанныхНабора(Режим, СхемаКомпоновкиДанных, ТекстЗапроса);
		
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос = ТекстЗапроса;
	КонецЕсли;
	
	// Возможно изменение схемы компоновки данных.
	ДанныеПолученияВыражений = ДанныеДляПолученияВыраженийФормулЧерезСКД(СхемаКомпоновкиДанных,
		СтруктураНастроек.ОбязательныеПоля, Истина);
	
	ПоляДляВыборки = Новый Массив;
	НомерПоля = 0;
	
	// Хранит назначенные имена вычисляемым полям. Для получения данных в СКД (содержатся наборы объекты).
	ИменаКолонокДляСКД = Новый Соответствие;
	// Хранит исходные выражения, указанные в макете печати. Для получения данных в запросе (содержатся наборы запросы).
	ИсходныеВыраженияДляЗапроса = Новый Соответствие;
	Для Каждого ПреобразованиеВыражения Из ДанныеПолученияВыражений.ПреобразованныеВыражения Цикл
		ИсходноеВыражение = ПреобразованиеВыражения.Ключ;
		РезультатПреобразования = ПреобразованиеВыражения.Значение;
		Если ЗначениеЗаполнено(РезультатПреобразования) Тогда
			Если СтрНайти(РезультатПреобразования, ".") > 0 Тогда
				НомерПоля = НомерПоля + 1;
				ИмяПоля = "ВычисляемоеПоле" + Формат(НомерПоля, "ЧН=0; ЧГ=0;");
			
				НовоеВычисляемоеПоле(СхемаКомпоновкиДанных,
					ИмяПоля,
					РезультатПреобразования);
				ПоляДляВыборки.Добавить(ИмяПоля);
				
				Если НЕ НаборДанныхВСКДЗапрос Тогда
					ИменаКолонокДляСКД.Вставить(ИсходноеВыражение, ЗаменитьСпецСимволы(ИмяПоля));
				КонецЕсли;
			Иначе
				// Исходное поле компоновки.
				ПоляДляВыборки.Добавить(РезультатПреобразования);
				
				Если НЕ НаборДанныхВСКДЗапрос Тогда
					ИменаКолонокДляСКД.Вставить(ИсходноеВыражение, ЗаменитьСпецСимволы(РезультатПреобразования));
				КонецЕсли;
			КонецЕсли;
			Если НаборДанныхВСКДЗапрос Тогда
				ИсходныеВыраженияДляЗапроса.Вставить(РезультатПреобразования, ИсходноеВыражение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	
	// Отбор компоновщика настроек.
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		// Удаление некорректных отборов.
		Количество = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
		Для Индекс = 1 По Количество Цикл
			ЭлементОтбора = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
				Если СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
					СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
		
	КонецЕсли;
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПоле Из СтруктураНастроек.ОбязательныеПоля Цикл
		ПолеСКД = ПечатьЭтикетокИСМПУНФ.НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
		Если ПолеСКД <> Неопределено Тогда
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение параметров.
	Для Каждого ПараметрДанных Из СтруктураНастроек.ПараметрыДанных Цикл
		Если ПараметрДанных.Ключ = "Склад" Тогда // Если склад не заполнен - не используем параметр.
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение, Ложь);
		Иначе
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение);
		КонецЕсли;
	КонецЦикла;
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущееВремя", ТекущаяДатаСеанса());
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	
	Для каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	КонецЦикла;
	
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	// Подмена запроса при печати этикеток...
	Если СтруктураНастроек.ИсходныеДанные = Неопределено
		И СтруктураНастроек.Свойство("ТекстЗаменяемойТаблицы")
		И СтруктураНастроек.Свойство("ТекстТаблицыДляЗамены") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
										СтруктураНастроек.ТекстЗаменяемойТаблицы,
										СтруктураНастроек.ТекстТаблицыДляЗамены);
		
	ИначеЕсли Режим = "ЭтикеткаКодМаркировкиИСМП" Тогда
		
		ПечатьЭтикетокИСМПУНФ.ПриПодготовкеСтруктурыДанныхДляПечати(СтруктураНастроек, Режим, Запрос, СтруктураНастроек.ИсходныеДанные);
		
	ИначеЕсли Режим = "ШтрихкодыУпаковок" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			ПечатьЭтикетокИСМПУНФ.ЗаполнитьДополнительныеПараметрыШтрихкодовУпаковок(ИсходныеДанные);
			
			НомерНачальнойПозиции = СтрНайти(Запрос.Текст, "(ВЫБРАТЬ");
			СодержимоеКонечнойПозиции = ") КАК ИсходныеДанные";
			НомерКонечнойПозиции  = СтрНайти(Запрос.Текст, СодержимоеКонечнойПозиции);
			ТекстЗаменяемогоПодзапроса = Сред(Запрос.Текст, НомерНачальнойПозиции, НомерКонечнойПозиции
				+ СтрДлина(СодержимоеКонечнойПозиции) - НомерНачальнойПозиции);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗаменяемогоПодзапроса, "&Таблица КАК ИсходныеДанные");
			ПечатьЭтикетокИСМПУНФ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		КонецЕсли;
		
	Иначе
		
		Если СтруктураНастроек.Свойство("ТекстВременнойТаблицы") Тогда
			ТекстВременнойТаблицы = СтруктураНастроек.ТекстВременнойТаблицы;
		Иначе
			ТекстВременнойТаблицыСовместимостьССохраненнымиЭтикетками =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
			|		0 КАК Количество,
			|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) КАК Справка2,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
			|		0 КАК Количество,
			|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицыСовместимостьССохраненнымиЭтикетками, "&Таблица");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЦенников""", "ИсходныеДанные.КоличествоЦенников");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЭтикеток""", "ИсходныеДанные.КоличествоЭтикеток");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЦенника""", "ИсходныеДанные.ШаблонЦенника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЭтикетки""", "ИсходныеДанные.ШаблонЭтикетки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """Организация""", "ИсходныеДанные.Организация");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """Штрихкод""", "ИсходныеДанные.Штрихкод");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШтрихАвтопроверки""", "ИсходныеДанные.ШтрихАвтопроверки");
		
		Если ТаблицаИсходныеДанные.Колонки.Найти("Справка2") = Неопределено Тогда
			ТаблицаИсходныеДанные.Колонки.Добавить("Справка2", Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Таблица", ТаблицаИсходныеДанные);
		
	КонецЕсли;
	
	СтруктураРезультата.ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Возврат СтруктураРезультата;
	
КонецФункции
// Функция формирует незаполненную структуру результатов.
//
Функция НовыйРезультатДанныеДляПечати() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаТоваров" , Неопределено);
	Результат.Вставить("СоответствиеПолейСКДКолонкамТаблицыТоваров", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

// Настройки печати этикеток и ценников 
//
Функция НовыеНастройкиПечати() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИсходныеДанные", Неопределено); // Таблица с произвольными данными.
	Результат.Вставить("ОбязательныеПоля", Новый Массив);
	Результат.Вставить("СоответствиеШаблоновИСтруктурыШаблонов" , Новый Соответствие);
	Результат.Вставить("ПараметрыДанных", Новый Структура);
	Результат.Вставить("КомпоновщикНастроек", Неопределено); // Отбор
	Результат.Вставить("ИмяМакетаСхемыКомпоновкиДанных" , Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Функция сворачивает таблицу значений по реквизиту, имя которого передается вторым параметром.
//
Функция СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, ИмяРеквизита) Экспорт
	
	Таблица = ТаблицаРеквизитыДокументов.Скопировать();
	Таблица.Свернуть(ИмяРеквизита);
	Возврат Таблица;
	
КонецФункции

// Подготавливает данные, необходимые для печати ценников и этикеток.
// 
// Параметры:
// 	НастройкиПечати - Структура
// 	ОписаниеШаблона - Структура
// Возвращаемое значение:
//  Структура - данные, необходимые для печати этикеток и ценников.
Функция ПодготовитьДанныеДляПечати(НастройкиПечати, ОписаниеШаблона = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = Неопределено;
	
	Если ОписаниеШаблона = Неопределено Тогда
		ТаблицаИсходныеДанные = НастройкиПечати.ИсходныеДанные;
	Иначе
		СтруктураОтбора = Новый Структура;
		ИмяКолонки = СтрЗаменить(ОписаниеШаблона.ИмяКолонкиШаблон, "ДляПечати", "");
		СтруктураОтбора.Вставить(ИмяКолонки, ОписаниеШаблона.Шаблон);
		ТаблицаИсходныеДанные = НастройкиПечати.ИсходныеДанные.Скопировать(СтруктураОтбора);
		ХранилищеСКД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеШаблона.Шаблон, "СхемаКомпоновкиДанных");
		СхемаКомпоновкиДанных = ХранилищеСКД.Получить();
	КонецЕсли;
	
	Результат = НовыйРезультатДанныеДляПечати();
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет(НастройкиПечати.ИмяМакетаСхемыКомпоновкиДанных);
	КонецЕсли;
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	
	// Отбор компоновщика настроек.
	Если НастройкиПечати.КомпоновщикНастроек <> Неопределено Тогда
		
		// Удаление некорректных отборов.
		Количество = НастройкиПечати.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
		Для Индекс = 1 По Количество Цикл
			
			ЭлементОтбора = НастройкиПечати.КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];
			Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтоПараметрТипШтрихкода(ЭлементОтбора) И ЭлементОтбора.Использование Тогда
				ПараметрТипШтрихкода = ЭлементОтбора.ПравоеЗначение;
			КонецЕсли;
			
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
			Если НастройкиПечати.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
				НастройкиПечати.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
		СкопироватьЭлементыОтбора(Компоновщик.Настройки.Отбор, НастройкиПечати.КомпоновщикНастроек.Настройки.Отбор);
		
	КонецЕсли;
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПоле Из НастройкиПечати.ОбязательныеПоля Цикл
		Если ТипЗнч(ОбязательноеПоле) = Тип("Структура") И ОбязательноеПоле.Значение <> "" Тогда
			ПолеСКД = ПечатьЭтикетокИСМПУНФ.НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле.Значение);
			Если ПолеСКД <> Неопределено Тогда
				ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = ПолеСКД.Поле;
				ВыбранноеПоле.Заголовок = ОбязательноеПоле.Наименование;
			КонецЕсли;
		Иначе
			ПолеСКД = ПечатьЭтикетокИСМПУНФ.НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
			Если ПолеСКД <> Неопределено Тогда
				ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = ПолеСКД.Поле;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение параметров.
	Для Каждого ПараметрДанных Из НастройкиПечати.ПараметрыДанных Цикл
		Если ПараметрДанных.Ключ = "Склад" Тогда // Если склад не заполнен - не используем параметр.
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение, Ложь);
		Иначе
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущееВремя", ТекущаяДатаСеанса());
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Если ЗначениеЗаполнено(ПараметрТипШтрихкода) Тогда
		УстановитьЗначениеПараметраСКД(Компоновщик, "ТипШтрихкода", ПараметрТипШтрихкода);
	КонецЕсли;
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Для Каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		Результат.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для Каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	ПодготовитьЗапросДляИспользованияТаблицыИсходныеДанные(Запрос, ТаблицаИсходныеДанные);
	
	Результат.ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Таблица = Результат.ТаблицаТоваров;
	Для Каждого ОбязательноеПоле Из НастройкиПечати.ОбязательныеПоля Цикл
		
		Если ТипЗнч(ОбязательноеПоле) = Тип("Структура") Тогда
			СтрокаПоиска = ОбязательноеПоле.Значение;
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, ".", "");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "[", ""); 
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "]", "");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, " ", "");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "%", "_");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, ",", "_");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "(", "_");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, ")", "_");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, """", "_");
			Колонка = Таблица.Колонки.Найти(СтрокаПоиска);
			Если Колонка <> Неопределено Тогда
				Колонка.Заголовок = ОбязательноеПоле.Наименование;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура печати документа.
//
Процедура Печать(Знач МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	РежимПечати = "";
	Если ПараметрыПечати.Свойство("РежимПечати") Тогда
		РежимПечати = ПараметрыПечати.РежимПечати;
	КонецЕсли;
	
	Если РежимПечати = "ЭтикеткаКодМаркировкиИСМП" Тогда
		
		ПечатьЭтикетокИСМПУНФ.ПриПечати(КоллекцияПечатныхФорм, ПараметрыПечати, ОбъектыПечати);
		Возврат;
		
	КонецЕсли;
	
	// Вытаскиваем данные для печати в массив объектов для совместимости обработки с Розницей 
	//МассивОбъектов = Новый Массив;
	//МассивОбъектов.Добавить(ПараметрыПечати.ДанныеПечати[0]);
	
	НастройкиПечати = НовыеНастройкиПечати();
	СоответствиеШаблонов = Новый Соответствие;
	
	НастройкиПечати.ОбязательныеПоля.Добавить("КоличествоЦенниковДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("ШаблонЦенникаДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("Номенклатура");

	НастройкиПечати.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона";
	
	ШаблонТаблицыТоваров = ТаблицаЗначенийТоваров();
	ТаблицаТовары = ПреобразоватьМассивВТаблицуЗначений(ПараметрыПечати.Товары, ШаблонТаблицыТоваров);
	
	// Собираем используемые поля из шаблонов.
	ТаблицаШаблонов = ТаблицаТовары.Скопировать(Новый Структура("Выбран", Истина), "ШаблонЭтикетки, ШаблонЦенника");

	ПечататьЭтикетки = Истина;
	ПечататьЦенники = Истина;
	Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
		ПечататьЦенники = КоллекцияПечатныхФорм[0].ИмяМакета = "Ценники";
		ПечататьЭтикетки = КоллекцияПечатныхФорм[0].ИмяМакета = "Этикетки";
	КонецЕсли;

	Для Каждого СтрокаТЧ Из ТаблицаШаблонов Цикл

		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) И ПечататьЭтикетки
				И СтрокаТЧ.ШаблонЭтикетки.ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) И ПечататьЦенники
				И СтрокаТЧ.ШаблонЦенника.ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЦенника);
		КонецЕсли;

	КонецЦикла;

	// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
	Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
		СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();

		// Структура шаблонов.
		НастройкиПечати.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(КлючИЗначение.Ключ, СтруктураШаблона);

		// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
		Если СтруктураШаблона <> Неопределено
				И ТипЗнч(СтруктураШаблона) = Тип("Структура")
				И СтруктураШаблона.Свойство("ПараметрыШаблона") Тогда
			Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
				НастройкиПечати.ОбязательныеПоля.Добавить(Элемент.Ключ);
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

	// Подготовка исходных данных.
	ИсходныеДанные = ТаблицаТовары.Скопировать(
		Новый Структура("Выбран", Истина),
		КолонкиИсходныхДанных());
	Для Каждого СтрокаТЧ Из ИсходныеДанные Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
			СтрокаТЧ.КоличествоЭтикеток = 0;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) Тогда
			СтрокаТЧ.КоличествоЦенников = 0;
		КонецЕсли;
	КонецЦикла;
	Если ПараметрыПечати.Режим = "ПечатьЭтикеток" Тогда
		ИсходныеДанные.ЗаполнитьЗначения(0, "КоличествоЦенников");
	КонецЕсли;
	Если ПараметрыПечати.Режим = "ПечатьЦенников" Тогда
		ИсходныеДанные.ЗаполнитьЗначения(0, "КоличествоЭтикеток");
	КонецЕсли;

	НастройкиПечати.ПараметрыДанных.Вставить("ВидЦен", ПараметрыПечати.ВидЦен);
	НастройкиПечати.ПараметрыДанных.Вставить("Организация", ПараметрыПечати.Организация);
	НастройкиПечати.ПараметрыДанных.Вставить("ЦеныПоВидуЦены", ПараметрыПечати.ЦеныПоВидуЦены);
	НастройкиПечати.ПараметрыДанных.Вставить("ЦеныНаДату", ПараметрыПечати.ЦеныНаДату);
	НастройкиПечати.ПараметрыДанных.Вставить("ЦеныНаДатуАкционные", ПараметрыПечати.ЦеныНаДатуАкционные);
	НастройкиПечати.ПараметрыДанных.Вставить("ВидЦенАкционный", ПараметрыПечати.ВидЦенАкционные);

	НастройкиПечати.ИсходныеДанные = ИсходныеДанные;

	// Вывод табличных документов в коллекцию.
	КоллекцияПечатныхФормВнутренняя = СформироватьПечатныеФормыЭтикетокИЦенников(НастройкиПечати, ПечататьЭтикетки, ПечататьЦенники);
	КоллекцияПечатныхФорм.Очистить();
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФормВнутренняя Цикл

		НоваяФорма = КоллекцияПечатныхФорм.Добавить();
		НоваяФорма.ИмяМакета = ПечатнаяФорма.ИмяМакета;
		НоваяФорма.СинонимМакета = ПечатнаяФорма.ИмяМакета;
		НоваяФорма.ИмяВРЕГ = ВРег(ПечатнаяФорма.ИмяМакета);
		НоваяФорма.ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
		НоваяФорма.Экземпляров = 1;

	КонецЦикла;

КонецПроцедуры

// Процедура подготовки данных к печати на принтере этикеток.
//
Функция ПолучитьДанныеДляПринтераЭтикеток(Обработка) Экспорт
	
	РежимПечати = "Ценники,Этикетки";
	
	Если Обработка.Режим = "ПечатьЦенников" Тогда
		РежимПечати = "Ценники";
	ИначеЕсли Обработка.Режим = "ПечатьЭтикеток" Тогда
		РежимПечати = "Этикетки";
	КонецЕсли;
		
	КоллекцияПечатныхФорм = ПодготовитьКоллекциюПечатныхФорм(Новый Массив);
	ИменаМакетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РежимПечати);
	
	Для Каждого Идентификатор Из ИменаМакетов Цикл
		
		ВременнаяКоллекцияДляОднойПечатнойФормы = ПодготовитьКоллекциюПечатныхФорм(Идентификатор);
		
		Для Каждого ВременнаяПечатнаяФорма Из ВременнаяКоллекцияДляОднойПечатнойФормы Цикл 
			
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ВременнаяПечатнаяФорма);
			
			Если ВременнаяКоллекцияДляОднойПечатнойФормы.Количество() = 1 Тогда
				ПечатнаяФорма.ИмяМакета = Идентификатор;
				ПечатнаяФорма.ИмяВРЕГ = ВРег(Идентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СоответствиеШаблонов = Новый Соответствие;
	НастройкиПечати = НовыеНастройкиПечати();
	НастройкиПечати.ОбязательныеПоля.Добавить("КоличествоЦенниковДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("ШаблонЦенникаДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("Номенклатура");
	
	НастройкиПечати.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона";
	ИспользоватьАссортимент = Ложь;
	
	Если ИспользоватьАссортимент Тогда
		ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обработка.Магазин, "ФорматМагазина");
		НастройкиПечати.ПараметрыДанных.Вставить("ФорматМагазина", ФорматМагазина);
	КонецЕсли;
	
	ТаблицаШаблонов = Обработка.Товары.Выгрузить(Новый Структура("Выбран", Истина), "ШаблонЭтикетки, ШаблонЦенника");
	
	ПечататьЭтикетки = Истина;
	ПечататьЦенники = Истина;
	
	Для Каждого СтрокаТЧ Из ТаблицаШаблонов Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) И ПечататьЭтикетки И СтрокаТЧ.ШаблонЭтикетки.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) И ПечататьЦенники И СтрокаТЧ.ШаблонЦенника.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЦенника);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
		
		СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
		НастройкиПечати.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(КлючИЗначение.Ключ, СтруктураШаблона);
		
		Если СтруктураШаблона <> Неопределено
			И ТипЗнч(СтруктураШаблона) = Тип("Структура")
			И СтруктураШаблона.Свойство("ПоляМакета") Тогда
			
			Для Каждого Элемент Из СтруктураШаблона.ПоляМакета Цикл
				НастройкиПечати.ОбязательныеПоля.Добавить(Элемент.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИсходныеДанные = Обработка.Товары.Выгрузить(
	Новый Структура("Выбран", Истина),
	КолонкиИсходныхДанных());
	Для Каждого СтрокаТЧ Из ИсходныеДанные Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
			СтрокаТЧ.КоличествоЭтикеток = 0;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) Тогда
			СтрокаТЧ.КоличествоЦенников = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Обработка.Режим = "ПечатьЭтикеток" Тогда
		ИсходныеДанные.ЗаполнитьЗначения(0,"КоличествоЦенников");
	КонецЕсли;
	
	Если Обработка.Режим = "ПечатьЦенников" Тогда
		ИсходныеДанные.ЗаполнитьЗначения(0,"КоличествоЭтикеток");
	КонецЕсли;
	
	НастройкиПечати.ПараметрыДанных.Вставить("ВидЦен",     Обработка.ВидЦен);
	НастройкиПечати.ПараметрыДанных.Вставить("ВидЦенАкционный",     Обработка.ВидЦенАкционные);
	
	НастройкиПечати.ПараметрыДанных.Вставить("СтруктурнаяЕдиница", Обработка.СтруктурнаяЕдиница);
	НастройкиПечати.ПараметрыДанных.Вставить("Организация", Обработка.Организация);
	НастройкиПечати.ПараметрыДанных.Вставить("ЦеныПоВидуЦены", Обработка.ЦеныПоВидуЦены);
	НастройкиПечати.ПараметрыДанных.Вставить("ЦеныНаДату", Обработка.ЦеныНаДату);
	НастройкиПечати.ПараметрыДанных.Вставить("ЦеныНаДатуАкционный", Обработка.ЦеныНаДатуАкционные);

	НастройкиПечати.ИсходныеДанные = ИсходныеДанные;
	
	Данные = СформироватьПечатныеФормыЭтикетокИЦенников(НастройкиПечати, ПечататьЭтикетки, ПечататьЦенники);
	
	Возврат Данные;
	
КонецФункции

Функция ИмяПараметраШтрихкод() Экспорт
	
	Возврат "Штрихкод";
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НовыйЗапросЗаполнитьПоляТаблицы() Экспорт
	
	Результат = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Партия КАК Партия,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЦеныНоменклатурыСрезПоследних.Цена * СоставНаборов.Количество) КАК Цена,
	|	СоставНаборов.НоменклатураНабора КАК НоменклатураНабора,
	|	СоставНаборов.ХарактеристикаНабора КАК ХарактеристикаНабора
	|ПОМЕСТИТЬ ЦеныНаборов
	|ИЗ
	|	РегистрСведений.СоставНаборов КАК СоставНаборов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Актуальность
	|					И ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО СоставНаборов.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И СоставНаборов.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|ГДЕ
	|	&ИспользоватьНаборы
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставНаборов.НоменклатураНабора,
	|	СоставНаборов.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Партия КАК Партия,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	КодыТоваровSKU.SKU КАК SKU
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО Товары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И Товары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И Товары.Партия = ШтрихкодыНоменклатуры.Партия
	|			И Товары.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.ЕдиницаИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ПО Товары.Номенклатура = КодыТоваровSKU.Номенклатура
	|			И Товары.Характеристика = КодыТоваровSKU.Характеристика
	|			И Товары.Партия = КодыТоваровSKU.Партия
	|			И Товары.ЕдиницаИзмерения = КодыТоваровSKU.ЕдиницаИзмерения
	|ГДЕ
	|	&НуженШтрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ЗапасыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки КАК ЗапасыНаСкладахОстатки
	|		ПО Товары.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
	|			И Товары.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
	|ГДЕ
	|	&НуженОстаток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, ЕСТЬNULL(ЦеныНаборов.Цена, 0)) КАК Цена
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Актуальность
	|					И ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И Товары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНаборов КАК ЦеныНаборов
	|		ПО Товары.Номенклатура = ЦеныНаборов.НоменклатураНабора
	|			И Товары.Характеристика = ЦеныНаборов.ХарактеристикаНабора
	|ГДЕ
	|	&НужнаЦена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	КатегорииНоменклатуры.ШаблонЭтикетки КАК ШаблонЭтикетки,
	|	КатегорииНоменклатуры.ШаблонЦенника КАК ШаблонЦенника
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|			ПО СправочникНоменклатуры.КатегорияНоменклатуры = КатегорииНоменклатуры.Ссылка
	|		ПО Товары.Номенклатура = СправочникНоменклатуры.Ссылка
	|ГДЕ
	|	&НужныШаблоны");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияПечатиЭтикетокИЦенников

Процедура СкопироватьЭлементыОтбора(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) Экспорт
	
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ЭтоПараметрТипШтрихкода(ЭлементИсточник) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции.
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементыОтбора(ЭлементПриемник, ЭлементИсточник);
		КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

// Рекурсивная процедура заполнения элементов.
//
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Находит среди элементов полей СКД поле по имени.
//
// Параметры:
//	Элементы - поля СКД
//	Имя - имя поля СКД
//
// Возвращаемое значение:
//	Поле - поле СКД
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя, Кэш = Неопределено) Экспорт
	
	Если Кэш <> Неопределено Тогда
		Элемент = Кэш.Получить(Имя);
		Если Элемент <> Неопределено Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			
			Если Кэш <> Неопределено Тогда
				Кэш.Вставить(Имя, Элемент);
			КонецЕсли;
			
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - Колонки исходных данных
// 
// Возвращаемое значение:
//   Строка  - имена колонок, перечисленные через запятую, которые необходимо выгрузить для печати этикеток
//
Функция КолонкиИсходныхДанных()
	
	Результат = Новый Массив;
	Результат.Добавить("Номенклатура");
	Результат.Добавить("Характеристика");
	Результат.Добавить("Партия");
	Результат.Добавить("ЕдиницаИзмерения");
	Результат.Добавить("КоличествоЭтикеток");
	Результат.Добавить("КоличествоЦенников");
	Результат.Добавить("ШаблонЭтикетки");
	Результат.Добавить("ШаблонЦенника");
	Результат.Добавить("Организация");
	Результат.Добавить("Штрихкод");
	Результат.Добавить("ШтрихАвтопроверки");
	
	Возврат СтрСоединить(Результат, ",");
	
КонецФункции

Функция ИмяПараметраШтрихкодСправкиБ()
	
	Возврат "ШтрихСправкиБ";
	
КонецФункции

// Позволяет определить ПараметрДанных.ТипШтрихкода и пропустить его при установке отборов.
// Данный параметр добавлен в таблицу отборов, чтобы не добавлять новые элементы на форму.
// Установка этого параметра в свойстве компоновщика "Отбор" приводит к ошибке 
// "Глобальные элементы отбора обязательно должны использовать поля".
// Поэтому данный параметр при копировании отборов пропускается, а в коде устанавливается с помощью
// УстановитьЗначениеПараметраСКД(Компоновщик, "ТипШтрихкода", ПараметрТипШтрихкода). 
Функция ЭтоПараметрТипШтрихкода(Знач ЭлементОтбора)
	
	Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыДанных.ТипШтрихкода");
	
КонецФункции

// Функция определяет существует ли реквизит у формы.
//
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита)
	
	КлючУникальности   = Новый УникальныйИдентификатор;

	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);

	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

Функция УстановитьЗначениеПараметраСКД(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, ИспользоватьНеЗаполненный = Истина)
	
	ПараметрУстановлен = Ложь;
	
	ПараметрВидЦены = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметраВидЦены = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрВидЦены);
	Если ЗначениеПараметраВидЦены <> Неопределено Тогда
		
		ЗначениеПараметраВидЦены.Значение = ЗначениеПараметра;
		ЗначениеПараметраВидЦены.Использование = ?(ИспользоватьНеЗаполненный, Истина, ЗначениеЗаполнено(ЗначениеПараметраВидЦены.Значение));
		
		ПараметрУстановлен = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрУстановлен;
	
КонецФункции

// Функция формирует табличный документ с ценниками и этикетками.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма с ценниками и этикетками.
//
Функция СформироватьПечатныеФормыЭтикетокИЦенников(НастройкиПечати, ПечататьЭтикетки, ПечататьЦенники)
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	// Подготовка коллекции печатных форм.
	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиКоличество");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиШаблон");
	КоллекцияПечатныхФорм.Колонки.Добавить("Шаблон");
	
	Для Каждого КлючИЗначение Из НастройкиПечати.СоответствиеШаблоновИСтруктурыШаблонов Цикл
		Если ПечататьЭтикетки Тогда
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ПечатнаяФорма.ИмяМакета            = "Этикетка"+КлючИЗначение.Ключ;
			ПечатнаяФорма.ИмяКолонкиКоличество = "КоличествоЭтикетокДляПечати";
			ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЭтикеткиДляПечати";
			ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
		КонецЕсли;
		
		Если ПечататьЦенники Тогда
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ПечатнаяФорма.ИмяМакета            = "Ценник" + КлючИЗначение.Ключ;
			ПечатнаяФорма.ИмяКолонкиКоличество = "КоличествоЦенниковДляПечати";
			ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЦенникаДляПечати";
			ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		
		НомерКолонки = 0;
		НомерРяда = 0;
		
		ОписаниеШаблона = Новый Структура;
		ОписаниеШаблона.Вставить("Шаблон", ПечатнаяФорма.Шаблон);
		ОписаниеШаблона.Вставить("ИмяКолонкиШаблон", ПечатнаяФорма.ИмяКолонкиШаблон);
		ДанныеДляПечати = ПодготовитьДанныеДляПечати(НастройкиПечати, ОписаниеШаблона);
		
		ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
		
		Для Каждого СтрокаТовары Из ДанныеДляПечати.ТаблицаТоваров Цикл
			
			Если СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] > 0
				И СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон] = ПечатнаяФорма.Шаблон Тогда
				
				ОписаниеШаблона = НастройкиПечати.СоответствиеШаблоновИСтруктурыШаблонов.Получить(СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон]);
				
				Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
					
					Если СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон].ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
						ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
					Иначе
						ПечатнаяФорма.ТабличныйДокумент = Новый Структура;
						ПечатнаяФорма.ТабличныйДокумент.Вставить("XML", ОписаниеШаблона.XMLОписаниеМакета);
						ПечатнаяФорма.ТабличныйДокумент.Вставить("Этикетки", Новый Массив);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ОписаниеШаблона <> Неопределено 
					И ТипЗнч(ОписаниеШаблона) = Тип("Структура")
					И СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон].ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
					
					Область = ОписаниеШаблона.МакетЭтикетки.ПолучитьОбласть(ОписаниеШаблона.ИмяОбластиПечати);
					
					ПроверятьВывод = Ложь;
					
					Для ИндексСтроки = 1 По Область.ВысотаТаблицы Цикл
						
						Если Область.Область("R" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0")).АвтоВысотаСтроки Тогда
							ПроверятьВывод = Истина;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					// Применение настроек табличного документа.
					ЗаполнитьЗначенияСвойств(ПечатнаяФорма.ТабличныйДокумент, ОписаниеШаблона.МакетЭтикетки, , "ОбластьПечати");
					
					// Установка параметров печати
					ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Этикетки_и_ценники" + ПечатнаяФорма.ИмяМакета;
					
					Для каждого ПараметрШаблона Из ОписаниеШаблона.ПараметрыШаблона Цикл
						Если ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
							НаименованиеКолонки = ДанныеДляПечати.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
							Если НаименованиеКолонки <> Неопределено Тогда
								// служебные поля
								Область.Параметры[ПараметрШаблона.Значение] = СтрокаТовары[НаименованиеКолонки];
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого Рисунок Из Область.Рисунки Цикл
						Если Лев(Рисунок.Имя,8) = ИмяПараметраШтрихкод() ИЛИ Лев(Рисунок.Имя,13) = ИмяПараметраШтрихкодСправкиБ() Тогда
							
							Если Лев(Рисунок.Имя,8) = ИмяПараметраШтрихкод() Тогда
								ЗначениеШтрихкода = СтрокаТовары[ДанныеДляПечати.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ИмяПараметраШтрихкод())];
							ИначеЕсли Лев(Рисунок.Имя,13) = ИмяПараметраШтрихкодСправкиБ() Тогда
								ЗначениеШтрихкода = СтрокаТовары[ДанныеДляПечати.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ИмяПараметраШтрихкодСправкиБ())];
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
								
								ПараметрыШтрихкода = Новый Структура;
								ПараметрыШтрихкода.Вставить("Ширина",	Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
								ПараметрыШтрихкода.Вставить("Высота",	Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
								
								Если ОписаниеШаблона.ТипКода = 16 Тогда
									МинСторона = Мин(ПараметрыШтрихкода.Ширина, ПараметрыШтрихкода.Высота);
									ПараметрыШтрихкода.Ширина = МинСторона;
									ПараметрыШтрихкода.Высота = МинСторона;
								КонецЕсли;
								
								Если ОписаниеШаблона.Свойство("УровеньКоррекцииQR") Тогда
									ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", ОписаниеШаблона.УровеньКоррекцииQR);
								Иначе
									ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
								КонецЕсли;
								
								ПараметрыШтрихкода.Вставить("Штрихкод",				ЗначениеШтрихкода);
								ПараметрыШтрихкода.Вставить("ТипКода",				ОписаниеШаблона.ТипКода);
								
								Если ОписаниеШаблона.Свойство("ОтображатьТекст") Тогда
									ПараметрыШтрихкода.Вставить("ОтображатьТекст",		ОписаниеШаблона.ОтображатьТекст);
								Иначе
									ПараметрыШтрихкода.Вставить("ОтображатьТекст",		Истина);
								КонецЕсли;
								
								Если ОписаниеШаблона.Свойство("РазмерШрифта") Тогда
									ПараметрыШтрихкода.Вставить("РазмерШрифта",			ОписаниеШаблона.РазмерШрифта);
								КонецЕсли;
								
								Если ОписаниеШаблона.Свойство("УголПоворота") Тогда
									ПараметрыШтрихкода.Вставить("УголПоворота", ОписаниеШаблона.УголПоворота);
								КонецЕсли;
								
								ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0);
								
								Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
								Если Картинка <> Неопределено Тогда
									Рисунок.Картинка = Картинка;
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
					Для Инд = 1 По СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] Цикл // Цикл по количеству экземпляров.
						
						МассивОбластей = Новый Массив;
						МассивОбластей.Добавить(Область);
						
						НомерКолонки = НомерКолонки + 1;
						
						Если ПроверятьВывод Тогда
							
							Если НомерКолонки = 1 Тогда
								Если Не ВременныйТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда
									ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
									НомерРяда = 0;
									ВременныйТабличныйДокумент.Очистить();
								КонецЕсли;
							Иначе
								Если Не ВременныйТабличныйДокумент.ПроверитьПрисоединение(МассивОбластей) Тогда
									ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
									НомерРяда    = 0;
									ВременныйТабличныйДокумент.Очистить();
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						
						Если НомерКолонки = 1 Тогда
							
							НомерРяда = НомерРяда + 1;
							
							ПечатнаяФорма.ТабличныйДокумент.Вывести(Область);
							ВременныйТабличныйДокумент.Вывести(Область);
							
						Иначе
							
							ПечатнаяФорма.ТабличныйДокумент.Присоединить(Область);
							ВременныйТабличныйДокумент.Присоединить(Область);
							
						КонецЕсли;
						
						Если НомерКолонки = ОписаниеШаблона.КоличествоПоГоризонтали И НомерРяда = ОписаниеШаблона.КоличествоПоВертикали Тогда
							
							НомерРяда    = 0;
							НомерКолонки = 0;
							
							ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
							ВременныйТабличныйДокумент.Очистить();
							
						ИначеЕсли НомерКолонки = ОписаниеШаблона.КоличествоПоГоризонтали Тогда
							
							НомерКолонки = 0;
							
						КонецЕсли;
						
					КонецЦикла; // Цикл по количеству экземпляров.
					
				КонецЕсли;
				
				Если ОписаниеШаблона <> Неопределено 
					И ТипЗнч(ОписаниеШаблона) = Тип("Структура")
					И СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон].ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
					Поля = Новый Массив;
					Для Каждого ТекПоле Из ОписаниеШаблона.ПоляМакета Цикл			
						Если ТекПоле.ТипЗаполнения = "Parameter" Тогда							
							НовоеПоле = Новый Структура;
							НовоеПоле.Вставить("ИмяПоля", ТекПоле.Наименование);							
							Попытка
								Значение = СтрокаТовары[ТекПоле.Значение];
							Исключение
								Значение = "";
							КонецПопытки;
							Если Значение = "" Тогда
								Попытка
									ИмяКолонки = ДанныеДляПечати.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ТекПоле.Значение);
									Значение = СтрокаТовары[ИмяКолонки];
								Исключение
									Значение = "";
								КонецПопытки;
							КонецЕсли;
							Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда								
								Значение = Значение.Получить();								
								Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
									Значение = Base64Строка(Значение);
								Иначе
									Значение = Строка(Значение);
								КонецЕсли;								
							ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы") Тогда
								
								Если Значение.ТипХраненияФайла = ПредопределенноеЗначение("Перечисление.ТипыХраненияФайлов.ВИнформационнойБазе") Тогда
									АдресХранилища = РаботаСФайлами.ДанныеФайла(Значение).СсылкаНаДвоичныеДанныеФайла;
									Значение = ПолучитьИзВременногоХранилища(АдресХранилища);
								КонецЕсли;
								
								Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
									Значение = Base64Строка(Значение);
								Иначе
									Значение = Строка(Значение);
								КонецЕсли;
								
							КонецЕсли;							
							Если ЗначениеЗаполнено(Значение) Тогда
								НовоеПоле.Вставить("Значение", Значение);
							Иначе								
								Если ЗначениеЗаполнено(ТекПоле.ЗначениеПоУмолчанию) Тогда						
									НовоеПоле.Вставить("Значение", ТекПоле.ЗначениеПоУмолчанию);
								Иначе
									НовоеПоле.Вставить("Значение", "");
								КонецЕсли;								
							КонецЕсли;
							
							Поля.Добавить(НовоеПоле);
														
						КонецЕсли;
						
					КонецЦикла;
					НоваяЭтикетка = Новый Структура;
					НоваяЭтикетка.Вставить("Количество", СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество]);
					НоваяЭтикетка.Вставить("ЗначенияПолей", Поля);
					ПечатнаяФорма.ТабличныйДокумент.Этикетки.Добавить(НоваяЭтикетка);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по строкам таблицы товаров.
		
	КонецЦикла;
	
	МассивСтрокДляУдаления = Новый Массив;
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(ПечатнаяФорма);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ПечатнаяФорма Из МассивСтрокДляУдаления Цикл
		КоллекцияПечатныхФорм.Удалить(ПечатнаяФорма);
	КонецЦикла;
	
	Возврат КоллекцияПечатныхФорм;
	
КонецФункции

Функция ПодготовитьКоллекциюПечатныхФорм(Знач ИменаМакетов)
	
	Макеты = Новый ТаблицаЗначений;
	Макеты.Колонки.Добавить("ИмяМакета");
	Макеты.Колонки.Добавить("ИмяВРЕГ");
	Макеты.Колонки.Добавить("СинонимМакета");
	Макеты.Колонки.Добавить("ТабличныйДокумент");
	Макеты.Колонки.Добавить("Экземпляров");
	Макеты.Колонки.Добавить("Картинка");
	Макеты.Колонки.Добавить("ПолныйПутьКМакету");
	Макеты.Колонки.Добавить("ИмяФайлаПечатнойФормы");
	
	Если ТипЗнч(ИменаМакетов) = Тип("Строка") Тогда
		ИменаМакетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаМакетов);
	КонецЕсли;
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		
		Макет = Макеты.Найти(ИмяМакета, "ИмяМакета");
		
		Если Макет = Неопределено Тогда
			Макет = Макеты.Добавить();
			Макет.ИмяМакета = ИмяМакета;
			Макет.ИмяВРЕГ = ВРег(ИмяМакета);
			Макет.Экземпляров = 1;
		Иначе
			Макет.Экземпляров = Макет.Экземпляров + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Макеты;
	
КонецФункции

// Заменяет текст вложенного запроса в скобках `(ВЫБРАТЬ...) КАК ИсходныеДанные` именем параметра "&Таблица" 
// 
// Параметры:
// 	Запрос - запрос, текст которого преобразуется
// 	ТаблицаИсходныеДанные - таблица с исходными данными
Процедура ПодготовитьЗапросДляИспользованияТаблицыИсходныеДанные(Запрос, ТаблицаИсходныеДанные)

	Если ТаблицаИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачПозиция = СтрНайти(Запрос.Текст, "(ВЫБРАТЬ");
	Если НачПозиция = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КонПозиция = СтрНайти(Запрос.Текст, ") КАК ИсходныеДанные");
	Если КонПозиция = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон("%1&Таблица%2",
		Сред(Запрос.Текст, 1, НачПозиция - 1),
		Сред(Запрос.Текст, КонПозиция + 1));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЦенников""", "ИсходныеДанные.КоличествоЦенников");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЭтикеток""", "ИсходныеДанные.КоличествоЭтикеток");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЦенника""", "ИсходныеДанные.ШаблонЦенника");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЭтикетки""", "ИсходныеДанные.ШаблонЭтикетки");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """Организация""", "ИсходныеДанные.Организация");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """Штрихкод""", "ИсходныеДанные.Штрихкод");
	
	Если ТаблицаИсходныеДанные.Колонки.Найти("Штрихкод") = Неопределено Тогда
		ТаблицаИсходныеДанные.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	КонецЕсли;

	Запрос.УстановитьПараметр("Таблица", ТаблицаИсходныеДанные);	
		
КонецПроцедуры

// Функция возвращает пустую структуру настроек
// 
// Параметры: 
//  Нет
// 
// Возвращаемое значение: 
//  Структура - структура настроек.
Функция СтруктураНастроек() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИсходныеДанные",                         Неопределено);
	СтруктураНастроек.Вставить("ОбязательныеПоля",                       Новый Массив);
	СтруктураНастроек.Вставить("СоответствиеШаблоновИСтруктурыШаблонов", Новый Соответствие);
	СтруктураНастроек.Вставить("ПараметрыДанных"    ,                    Новый Структура);
	СтруктураНастроек.Вставить("КомпоновщикНастроек",                    Неопределено);
	СтруктураНастроек.Вставить("ИмяМакетаСхемыКомпоновкиДанных",         Неопределено);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру параметров для получения данных через СКД, а также, выполняет корректировку СКД
// (если для получения выражений используются только наборы данных запросы, то по указанным выражениям вычисляются
// все типы данных, для которых указаны характеристики указывается в текстах соответствующих наборов запросов
// текст переопределения получения характеристик на языке расширения запросов (ограниченное количество типов,
// т.к. указание переопределения характеристик для всех возможных типов не оптимально).
// В случае, если для вычисления выражений используются наборы объекты, то выражения преобразуются с использованием
// представлений характеристик на языке текущего пользователя.
// 
// Параметры:
// 	СхемаКомпоновки - СхемаКомпоновкиДанных - Схема компоновки, используемая для получения данных.
// 	ИсходныеВыражения - Массив из Строка - Массив исходных выражений в формате написания формул.
// 				Например, "Номенклатура.{ДР.ОсновнойПоставщикТовара}.{КИ.Телефон}".
// 	ВыполнятьПроверкуВыражений - Булево - Флаг, указывающий, нужно ли проводить полную проверку выражений.
// 				Если полная проверка всего выражения не проводится, то это может сэкономить время на парсинге выражений
// 				(предполагается, что выражения указаны корректно), что может быть критично для механизмов, используемых
// 				в транзакции. Если полная проверка всего выражения не проводится, то выражения парсятся только для
// 				получения типов, для которых указана характеристика или для получения представления характеристики.
// 				Если полная проверка всего выражения проводится, то все выражение проверяется на корректность
// 				не зависимо от наличия в нем характеристик.
// 	ИспользоватьТолькоПредставленияХарактеристик - Булево - Настройка позволяет принудительно включить преобразование
// 				характеристик к представлению на языке текущего пользователя. Бывает полезна для механизм, где критична
// 				производительность механизма получения данных (например, выполнение в транзакции), т.к. парсинг
// 				выражения с целью получения типов данных занимает время. Если Истина будет выполнена замена характеристик
// 				на представления не зависимо от того, какие наборы данных используются в схеме компоновки.
// Возвращаемое значение:
// 	Структура - Описание:
//   * ПреобразованныеВыражения - Соответствие - Результат преобразования выражений.
// 		*Ключ - Строка - Исходное выражение.
// 		*Значение - Строка - Результат преобразования для СКД. В случае, если для вычисления выражений
// 			используются только наборы запросы, то, например, "Номенклатура.[[ДР.ОсновнойПоставщикТовара]]].[[КИ.Телефон]]]".
// 			Если для вычисления выражений используются также наборы объекты, то выражение преобразуется с использованием
// 			представлений. Например, "Номенклатура.[Основной поставщик товара (Обувь)].Телефон".
//   * ЕстьОшибки - Булево - Флаг наличия ошибок при преобразовании выражений.
//   * СообщенияОшибокПреобразования - Соответствие - Сообщения ошибок преобразования, при их наличии:
//    **Ключ - Строка - Исходное выражение, для которого зарегистрирована ошибка.
//    **Значение - Строка - Текст сообщения об ошибке.
//   * СхемаКомпоновкиИзменена - Булево - Флаг, указывающий, что схема компоновки изменена (в наборы данных запросы
//   			добавлено переопределение получения характеристик на языке расширения запросов.
//
Функция ДанныеДляПолученияВыраженийФормулЧерезСКД(СхемаКомпоновки, ИсходныеВыражения, ВыполнятьПроверкуВыражений = Ложь,
				ИспользоватьТолькоПредставленияХарактеристик = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПреобразованныеВыражения", Новый Соответствие);
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("СообщенияОшибокПреобразования", Новый Соответствие);
	Результат.Вставить("СхемаКомпоновкиИзменена", Ложь);
	
	ВыраженияДляПроверки = Новый Массив;
	
	Для Каждого ИсходноеВыражение Из ИсходныеВыражения Цикл
		ВыражениеСодержитХарактеристики = (СтрНайти(ИсходноеВыражение, "{") > 0);
		Если НЕ ВыражениеСодержитХарактеристики 
			И НЕ ВыполнятьПроверкуВыражений Тогда
			// Выражение выполняется как есть, без дальнейших проверок.
			Результат.ПреобразованныеВыражения.Вставить(ИсходноеВыражение, ИсходноеВыражение);
		Иначе
			ВыраженияДляПроверки.Добавить(ИсходноеВыражение);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыраженияДляПроверки.Количество() > 0 Тогда
		
		ЕстьНаборыОбъекты = Ложь;
		
		ИспользуемыеНаборыДанных = ИспользуемыеНаборыДанныхСхемыКомпоновки(СхемаКомпоновки,
			ВыраженияДляПроверки);
		
		ИменаПолейСРодителями = Новый Массив;
		
		Для Каждого НаборДанныхИПоля Из ИспользуемыеНаборыДанных Цикл
			НаборДанных = НаборДанныхИПоля.Ключ;
			ПараметрыИспользованияНабора = НаборДанныхИПоля.Значение;
			ПоляНабора = ПараметрыИспользованияНабора.ПоляНабора;
			НаборДанныхИспользуетсяВВыраженияхХарактеристик = ПараметрыИспользованияНабора.НаборДанныхИспользуетсяВВыраженияхХарактеристик;
			
			Если НаборДанныхИспользуетсяВВыраженияхХарактеристик
				И ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
				ЕстьНаборыОбъекты = Истина;
			КонецЕсли;
			Для Каждого ПутьКДаннымПоля Из ПоляНабора Цикл
				Если (СтрНайти(ПутьКДаннымПоля, ".") > 0)
					И (ИменаПолейСРодителями.Найти(ПутьКДаннымПоля) = Неопределено) Тогда
					ИменаПолейСРодителями.Добавить(ПутьКДаннымПоля);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// При проверке родителей поля будет использоваться первое подошедшее максимальное значение.
		СортировкаИменПолей = Новый СписокЗначений();
		СортировкаИменПолей.ЗагрузитьЗначения(ИменаПолейСРодителями);
		СортировкаИменПолей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		
		ИменаПолейСРодителями = СортировкаИменПолей.ВыгрузитьЗначения();
		
		ПараметрыПроверкиВыражений = Новый Структура;
		ПараметрыПроверкиВыражений.Вставить("СхемаКомпоновки", СхемаКомпоновки);
		ПараметрыПроверкиВыражений.Вставить("ИменаПолейСРодителями", ИменаПолейСРодителями);
		ПараметрыПроверкиВыражений.Вставить("ТипыДляПереопределенияХарактеристик", Новый Массив);
		ПараметрыПроверкиВыражений.Вставить("ВыраженияДляПроверки", ВыраженияДляПроверки);
		ПараметрыПроверкиВыражений.Вставить("ВыполнятьПроверкуВыражений", ВыполнятьПроверкуВыражений);
		
		Если ЕстьНаборыОбъекты ИЛИ ИспользоватьТолькоПредставленияХарактеристик Тогда
			
			// Для вычисления полей с характеристиками и используются (по крайней мере, в том числе) наборы-объекты.
			// 
			// Если бы использовался только один набор данных-объект, можно было бы добавить служебный набор данных
			// объединение запросов и настроить соединение по ссылке между наборами. Но т.к. в общем случае
			// количество наборов данных и связи между ними не известны, то используется метод подстановки
			// представлений в качестве характеристик.
			// 
			// Т.к. метаданные (кнопка характеристики на закладке данные) не предполагает указания полей для идентификаторов,
			// механизм схемы компоновки данных по умолчанию в качестве идентификатора характеристики использует
			// представление характеристики. Причем именно представление на языке текущего пользователя
			// (которое можно переопределить программно), а не поля, например, Наименование.
			// ==> Если вместо идентификаторов в формате {ПрефиксВидаХарактеристики.ИдентификаторХарактеристики}
			// подставить представление на языке текущего пользователя, то механизм схемы компоновки получит данные.
			// 		Если представление простое, не содержит спецсимволов и его можно указать как реквизит, то
			// 		представление должно быть указано как реквизит. Например, Заказ.Экспедитор, где Экспедитор - представление.
			// 		Если представление сложное, то оно указывается в квадратных скобках, например, Заказ.[Основной экспедитор].
			// В подстановке представления есть сложность. Представление характеристики должно быть уникальным для
			// всех характеристик (поддерживаемых и не поддерживаемых) которые подходят для одного объекта метаданных.
			// Подходящие характеристики для объекта метаданных определяются с учетом отбора характеристик, указанного
			// в метаданных. Например, если есть поле составного типа (справочники Контрагенты и Организации), то для
			// них можно указать представление характеристики "Телефон" (разные виды контактной информации, но в рамках
			// одного объекта метаданных представление "Телефон" будет уникальным. Однако, нельзя указать дополнительный
			// реквизит с представлением "Телефон", если для объекта метаданных указана контактная информация и
			// есть подходящий вид контактной информации с таким же представлением.
			
			ПараметрыПроверкиВыражений.Вставить("ПреобразованиеХарактеристикКПредставлению", Истина);
			
			ВыполнениеПроверкиИПреобразованияВыражений(ПараметрыПроверкиВыражений, Результат);
			
		Иначе
			
			// Для вычисления полей с характеристиками используются наборы данных-запросы.
			// Значит в текстах наборов данных-запросов при помощи языка расширений запросов можно переопределить
			// идентификаторы характеристик.
			// ==> Парсятся выражения, определяются типы значений, для которых необходимо переопределение
			// на языке расширения запросов, составляется текст переопределения методом ОписаниеХарактеристикСКДДляОписанияТипов
			// и данный текст вставляется в текст запросов (текст на языке расширения запросов не является текстом самого
			// запроса, поэтому длину текста можно не контролировать).
			// Сами выражения на данный момент нужно тоже преобразовывать, заменив фигурные скобки на квадратные
			// в формате {ПрефиксВидаХарактеристики.ИдентификаторХарактеристики} --> [[ПрефиксВидаХарактеристики.ИдентификаторХарактеристики]]]
			// (третья закрывающая скобка является служебной для механизма парсинга выражения схемы компоновки).
			
			ПараметрыПроверкиВыражений.Вставить("ПреобразованиеХарактеристикКПредставлению", Ложь);
			
			ВыполнениеПроверкиИПреобразованияВыражений(ПараметрыПроверкиВыражений, Результат);
				
			Если ПараметрыПроверкиВыражений.ТипыДляПереопределенияХарактеристик.Количество() > 0 Тогда
				
				ОписаниеТипов = Новый ОписаниеТипов(ПараметрыПроверкиВыражений.ТипыДляПереопределенияХарактеристик);
				ТекстХарактеристик = ОписаниеХарактеристикСКДДляОписанияТипов(ОписаниеТипов);
				
				Для Каждого НаборДанныхИПоля Из ИспользуемыеНаборыДанных Цикл
					ПараметрыИспользованияНабора = НаборДанныхИПоля.Значение;
					НаборДанныхИспользуетсяВВыраженияхХарактеристик = ПараметрыИспользованияНабора.НаборДанныхИспользуетсяВВыраженияхХарактеристик;
					Если НаборДанныхИспользуетсяВВыраженияхХарактеристик Тогда
						НаборДанныхЗапрос = НаборДанныхИПоля.Ключ;
						НаборДанныхЗапрос.Запрос = НаборДанныхЗапрос.Запрос + Символы.ПС + Символы.ПС + ТекстХарактеристик;
					КонецЕсли;
				КонецЦикла;
				
				Результат.СхемаКомпоновкиИзменена = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ссылку на новое вычисляемое поле в переданной схеме компоновки данных.
//
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема компоновки данных в которой необходимо создать новое
//                                                  вычисляемое поле.
//  ПутьКДанным           - Строка - путь к данным вычисляемого поля схемы компоновки данных.
//  ВыражениеПоля         - Строка - выражение вычисления нового вычисляемого поля.
//  Заголовок             - Строка - заголовок нового вычисляемого поля (необязательное).
//  ИскатьИПерезаполнять  - Булево - Истина - добавить новое и заполнить или перезаполнить найденное поле, 
//                                   Ложь - добавить новое и заполнить без поиска дублей, 
//                                   Неопределено - добавить новое и заполнить или оставить найденное поле без изменений. 
//                                   Значение по умолчанию - Ложь.
//  ТипЗначения           - ОписаниеТипов - Описание типов вычисляемого поля.
//                        - Неопределено - Тип значения установлен не будет, по умолчанию Неопределено.
//
// Возвращаемое значение:
//  ВычисляемоеПолеСхемыКомпоновкиДанных - ссылка на новое вычисляемое поле схемы компоновки данных.
//
Функция НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, ПутьКДанным, ВыражениеПоля, Заголовок = "", ИскатьИПерезаполнять = Ложь, ТипЗначения = Неопределено) Экспорт
	
	// Поиск или создание
	ПолеДобавлено = Ложь;
	Если ИскатьИПерезаполнять = Ложь Тогда
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
		ПолеДобавлено = Истина;
	Иначе
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти(ПутьКДанным);
		ПолеСуществует = ВычисляемоеПоле <> Неопределено;
		
		Если Не ПолеСуществует Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ПолеДобавлено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение
	Если ПолеДобавлено Или Не ИскатьИПерезаполнять = Неопределено Тогда
		ВычисляемоеПоле.ПутьКДанным = ПутьКДанным;
		ВычисляемоеПоле.Выражение = ВыражениеПоля;
		Если НЕ ПустаяСтрока(Заголовок) Тогда
			ВычисляемоеПоле.Заголовок = Заголовок;
		КонецЕсли;
		
		Если НЕ ТипЗначения = Неопределено Тогда
			ВычисляемоеПоле.ТипЗначения = ТипЗначения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВычисляемоеПоле;
	
КонецФункции

Функция ЗаменитьСпецСимволы(Знач ВходящаяСтрока)
	
	Перем Результат;
	
	Результат = СтрЗаменить(ВходящаяСтрока, ".", "");
	Результат = СтрЗаменить(Результат, " ", "");
	Результат = СтрЗаменить(Результат, "[", "_");
	Результат = СтрЗаменить(Результат, "]", "_");
	Результат = СтрЗаменить(Результат, "(", "_");
	Результат = СтрЗаменить(Результат, ")", "_");
	Результат = СтрЗаменить(Результат, "*", "_");
	Результат = СтрЗаменить(Результат, "-", "_");
	Результат = СтрЗаменить(Результат, "+", "_");
	Результат = СтрЗаменить(Результат, "/", "_");
	Результат = СтрЗаменить(Результат, "@", "_");
	Результат = СтрЗаменить(Результат, "#", "_");
	Результат = СтрЗаменить(Результат, "$", "_");
	Результат = СтрЗаменить(Результат, "%", "_");
	Результат = СтрЗаменить(Результат, "^", "_");
	Результат = СтрЗаменить(Результат, "&", "_");
	Результат = СтрЗаменить(Результат, "*", "_");
	Результат = СтрЗаменить(Результат, ">", "_");
	Результат = СтрЗаменить(Результат, "<", "_");
	Результат = СтрЗаменить(Результат, "?", "_");
	Результат = СтрЗаменить(Результат, ",", "_");
	
	Возврат Результат;

КонецФункции

Функция ИспользуемыеНаборыДанныхСхемыКомпоновки(СхемаКомпоновки, ВыраженияДляПроверки)
	ИспользуемыеНаборыДанных = Новый Соответствие;
		
	НаборыДанныхСхемы = НаборыДанныхСхемыКомпоновки(СхемаКомпоновки);
	Для Каждого НаборДанныхИПоля Из НаборыДанныхСхемы Цикл
		НаборДанных = НаборДанныхИПоля.Ключ;
		ПоляНабора = НаборДанныхИПоля.Значение; // - Массив из Строка -
		
		НаборДанныхИспользуетсяВВыражениях = Ложь;
		НаборДанныхИспользуетсяВВыраженияхХарактеристик = Ложь;
		Для Каждого ПутьКДаннымПоля Из ПоляНабора Цикл
			Для Каждого ИсходноеВыражение Из ВыраженияДляПроверки Цикл
				Если СтрНайти(ИсходноеВыражение, ПутьКДаннымПоля) = 1 Тогда
					НаборДанныхИспользуетсяВВыражениях = Истина;
					
					ВыражениеСодержитХарактеристики = (СтрНайти(ИсходноеВыражение, "{") > 0);
					Если ВыражениеСодержитХарактеристики Тогда
						НаборДанныхИспользуетсяВВыраженияхХарактеристик = Истина;
					КонецЕсли;
					Если НаборДанныхИспользуетсяВВыраженияхХарактеристик Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НаборДанныхИспользуетсяВВыраженияхХарактеристик Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НаборДанныхИспользуетсяВВыражениях Тогда
			ПараметрыИспользования = Новый Структура;
			ПараметрыИспользования.Вставить("ПоляНабора", ПоляНабора);
			ПараметрыИспользования.Вставить("НаборДанныхИспользуетсяВВыраженияхХарактеристик", НаборДанныхИспользуетсяВВыраженияхХарактеристик);
			ИспользуемыеНаборыДанных.Вставить(НаборДанных, ПараметрыИспользования);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ИспользуемыеНаборыДанных;
КонецФункции

Процедура ВыполнениеПроверкиИПреобразованияВыражений(ПараметрыПроверкиВыражений, СтруктураРезультата)
	
	СхемаКомпоновки = ПараметрыПроверкиВыражений.СхемаКомпоновки;
	ИменаПолейСРодителями = ПараметрыПроверкиВыражений.ИменаПолейСРодителями;
	ПреобразованиеХарактеристикКПредставлению = ПараметрыПроверкиВыражений.ПреобразованиеХарактеристикКПредставлению;
	ТипыДляПереопределенияХарактеристик = ПараметрыПроверкиВыражений.ТипыДляПереопределенияХарактеристик;
	ВыраженияДляПроверки = ПараметрыПроверкиВыражений.ВыраженияДляПроверки;
	ВыполнятьПроверкуВыражений = ПараметрыПроверкиВыражений.ВыполнятьПроверкуВыражений;
	СообщенияОшибокПреобразования = СтруктураРезультата.СообщенияОшибокПреобразования; // Соответствие -
	СвойстваИсточниковХарактеристик = СвойстваПоддерживаемыхИсточниковХарактеристик();
	
	КомпоновщикИсходнаяСхема = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикИсходнаяСхема.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	
	КэшТиповВыражений = Новый Соответствие;
	КешИсточниковХарактеристик = Новый Соответствие;
	КэшПредставленийХарактеристик = Новый Соответствие;
	
	
	ПараметрыУказанияХарактеристик = ПолучитьПараметрыУказанияХарактеристикВВыражениях(ВыраженияДляПроверки,
		ПараметрыПроверкиВыражений,
		СтруктураРезультата,
		СвойстваИсточниковХарактеристик);
	ПараметрыУникальныхХарактеристик = ПараметрыУказанияХарактеристик.ПараметрыУникальныхХарактеристик;
	ВыраженияСОшибками = ПараметрыУказанияХарактеристик.ВыраженияСОшибками;
	ВыраженияСНеУникальнымиХарактеристиками = ПараметрыУказанияХарактеристик.ВыраженияСНеУникальнымиХарактеристиками;
	СоответствияИменСтандартныхРеквизитов = СоответствияИменСтандартныхРеквизитов();
	
	Для Каждого ИсходноеВыражение Из ВыраженияДляПроверки Цикл
		
		СтруктураРезультата.ПреобразованныеВыражения.Вставить(ИсходноеВыражение, "");
		
		Если НЕ ВыраженияСОшибками.Получить(ИсходноеВыражение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПарситьВыражение = ВыполнятьПроверкуВыражений
			ИЛИ НЕ ПреобразованиеХарактеристикКПредставлению
			ИЛИ ВыраженияСНеУникальнымиХарактеристиками.Найти(ИсходноеВыражение) <> Неопределено;
		
		ЕстьОшибкиПреобразованияВыражения = Ложь;
		ВыражениеЗамены = Неопределено;
		
		Если НЕ ПарситьВыражение Тогда
			
			ВыражениеЗамены = ИсходноеВыражение;
			Для Каждого ИдентификаторХарактеристикиИПараметры Из ПараметрыУникальныхХарактеристик Цикл
				ИдентификаторХарактеристики = ИдентификаторХарактеристикиИПараметры.Ключ;
				ПараметрыХарактеристики = ИдентификаторХарактеристикиИПараметры.Значение;
				ПредставлениеХарактеристики = ПредставлениеХарактеристикиВВыраженииСКД(
					ПараметрыХарактеристики.Представление);
				ВыражениеЗамены = СтрЗаменить(ВыражениеЗамены, ИдентификаторХарактеристики, ПредставлениеХарактеристики);
			КонецЦикла;
			
		Иначе
		
			Если ВыполнятьПроверкуВыражений Тогда
				// Парсинг всего выражения целиком.
				ПроверяемаяЧастьВыражения = ИсходноеВыражение;
			Иначе
				// Парсинг выражения с целью подставить представление характеристики. Доходим
				// до последней характеристики, включая ее.
				НомерПозиции = СтрНайти(ИсходноеВыражение, "}", НаправлениеПоиска.СКонца);
			
				Если НомерПозиции = 0 Тогда
					// Парсинг выражения не осуществляется, т.к. не содержит характеристик и не нужна проверка всего выражения.
					ПроверяемаяЧастьВыражения = "";
				Иначе
					// Парсинг выражения до последней характеристики, с целью определить
					// типы данных, которым может соответствовать характеристика или установить нужное представление.
					ПроверяемаяЧастьВыражения = Сред(ИсходноеВыражение, 1, НомерПозиции);
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(ПроверяемаяЧастьВыражения) Тогда
				
				// Не требуется полная проверка выражения и нет характеристик.
				ВыражениеЗамены = ИсходноеВыражение;
				
			Иначе
				
				ВыражениеЗамены = "";
				
				// Проверка на использование сложного пути к данным (через группу или другой элемент).
				ПолеСУчетомРодителя = "";
				Для Каждого ИмяПоляСРодителями Из ИменаПолейСРодителями Цикл
					Если СтрНачинаетсяС(ИсходноеВыражение, ИмяПоляСРодителями) Тогда
						СледующийСимвол = Сред(ИсходноеВыражение, СтрДлина(ИмяПоляСРодителями) + 1, 1);
						Если СледующийСимвол = "." ИЛИ СледующийСимвол = "" Тогда
							ПолеСУчетомРодителя = ИмяПоляСРодителями;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если ПустаяСтрока(ПолеСУчетомРодителя) Тогда
					ОстатокВыражения = ИсходноеВыражение;
				Иначе
					ОстатокВыражения = Сред(ИсходноеВыражение, СтрДлина(ПолеСУчетомРодителя + ".") + 1);
				КонецЕсли;
				
				ЧастиВыражения = ЧастиОперанда(ОстатокВыражения,, Ложь);
				Если ПустаяСтрока(ПолеСУчетомРодителя) Тогда
					НакопленныйПуть = ЧастиВыражения[0];
					ЧастиВыражения.Удалить(0);
				Иначе
					НакопленныйПуть = ПолеСУчетомРодителя;
				КонецЕсли;
				
				
				// В начале выражения не может быть характеристики, т.к. характеристика всегда принадлежит
				// какому-либо объекту (полю в запросе или колонке таблицы). Поэтому ищем по исходной схеме компоновки
				// поле, с учетом, что для поля может быть задан сложный путь к данным.
				ТипПоля = КэшТиповВыражений.Получить(НакопленныйПуть);
				Если ТипПоля = Неопределено Тогда
					ПолеСКД = ПечатьЭтикетокИСМПУНФ.НайтиПолеСКДПоПолномуИмени(
						КомпоновщикИсходнаяСхема.Настройки.Выбор.ДоступныеПоляВыбора.Элементы,
						НакопленныйПуть);
					Если ПолеСКД = Неопределено Тогда
						ЕстьОшибкиПреобразованияВыражения = Истина;
						
						ТекстСообщения = НСтр("ru = 'Не найдено поле %1 в выражении %2. Проверьте корректность выражения.';
												|en = 'Cannot find %1 field in expression %2. Check, if the expression is correct.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
							НакопленныйПуть, ИсходноеВыражение);
						СообщенияОшибокПреобразования.Вставить(ИсходноеВыражение, ТекстСообщения);
					Иначе
						ТипПоля = ПолеСКД.Тип;
						КэшТиповВыражений.Вставить(НакопленныйПуть, ТипПоля);
					КонецЕсли;
				КонецЕсли;
				Если ЕстьОшибкиПреобразованияВыражения Тогда
					Продолжить;
				Иначе
					ВыражениеЗамены = НакопленныйПуть;
				КонецЕсли;
				
				Пока НЕ ЕстьОшибкиПреобразованияВыражения
					И ЧастиВыражения.Количество() > 0
					И ПроверяемаяЧастьВыражения <> НакопленныйПуть Цикл
					
					ЧастьВыражения = ЧастиВыражения[0];
					ЧастиВыражения.Удалить(0);
					
					ЭтоХарактеристика = (СтрНайти(ЧастьВыражения, "{") > 0);
					Если ЭтоХарактеристика И НЕ ПреобразованиеХарактеристикКПредставлению Тогда
						ДополнитьТипыДляПереопределенияХарактеристик(ТипыДляПереопределенияХарактеристик,
							ТипПоля);
					КонецЕсли;
					
					ТекущееВыражение = НакопленныйПуть + "." + ЧастьВыражения;
					
					Если ЭтоХарактеристика Тогда
						ПараметрыУникальнойХарактеристики = ПараметрыУникальныхХарактеристик.Получить(ЧастьВыражения);
						Если НЕ ПараметрыУникальнойХарактеристики = Неопределено Тогда
							ТипТекущегоВыражения = ПараметрыУникальнойХарактеристики.ТипЗначения;
							Представление = ПараметрыУникальнойХарактеристики.Представление;
							Если НЕ ПреобразованиеХарактеристикКПредставлению Тогда
								ВыражениеЗамены = ВыражениеЗамены + "." + МодифицированноеВыражениеОперандаДляСКД(ЧастьВыражения);
							Иначе
								ВыражениеЗамены = ВыражениеЗамены + "." + ПредставлениеХарактеристикиВВыраженииСКД(Представление);
							КонецЕсли;
						Иначе
							// Не уникальное представление характеристики и ПреобразованиеХарактеристикКПредставлению = Истина.
							
							ПараметрыДополнения = Новый Структура;
							ПараметрыДополнения.Вставить("КэшТиповВыражений", КэшТиповВыражений);
							ПараметрыДополнения.Вставить("КэшПредставленийХарактеристик", КэшПредставленийХарактеристик);
							ПараметрыДополнения.Вставить("КешИсточниковХарактеристик", КешИсточниковХарактеристик);
							ПараметрыДополнения.Вставить("СвойстваИсточниковХарактеристик", СвойстваИсточниковХарактеристик);
							ПараметрыДополнения.Вставить("НакопленныйПуть", НакопленныйПуть);
							ПараметрыДополнения.Вставить("ВыражениеХарактеристики", ЧастьВыражения);
							ПараметрыДополнения.Вставить("ИсходноеВыражение", ИсходноеВыражение);
								
							ДополнитьВыражениеЗаменыПредставлениемХарактеристики(ВыражениеЗамены,
								ПараметрыДополнения,
								ЕстьОшибкиПреобразованияВыражения,
								СообщенияОшибокПреобразования);
								
							ТипТекущегоВыражения = КэшТиповВыражений.Получить(ТекущееВыражение);
						КонецЕсли;
							
					Иначе
						ТипТекущегоВыражения = КэшТиповВыражений.Получить(ТекущееВыражение);
						Если ТипТекущегоВыражения = Неопределено Тогда
							МассивНайденныхТипов = Новый Массив;
							Типы = ТипПоля.Типы();
							Для Каждого Тип Из Типы Цикл
								ОбъектМД = Метаданные.НайтиПоТипу(Тип);
								Если ОбъектМД = Неопределено Тогда
									Продолжить;
								КонецЕсли;
								Если ОбщегоНазначения.ЭтоПеречисление(ОбъектМД) Тогда
									Продолжить;
								КонецЕсли;
								РеквизитНайден = Ложь;
								Реквизит = ОбъектМД.Реквизиты.Найти(ЧастьВыражения);
								Если НЕ Реквизит = Неопределено Тогда
									РеквизитНайден = Истина;
									ТипыРеквизита = Реквизит.Тип.Типы();
									Для Каждого ТипРеквизита Из ТипыРеквизита Цикл
										Если МассивНайденныхТипов.Найти(ТипРеквизита) = Неопределено Тогда
											МассивНайденныхТипов.Добавить(ТипРеквизита);
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
								Если НЕ РеквизитНайден Тогда
									Для Каждого Реквизит Из ОбъектМД.СтандартныеРеквизиты Цикл
										Если Реквизит.Имя = ЧастьВыражения
											ИЛИ СоответствияИменСтандартныхРеквизитов.Получить(Реквизит.Имя) = ЧастьВыражения Тогда
											РеквизитНайден = Истина;
											ТипыРеквизита = Реквизит.Тип.Типы();
											Для Каждого ТипРеквизита Из ТипыРеквизита Цикл
												Если МассивНайденныхТипов.Найти(ТипРеквизита) = Неопределено Тогда
													МассивНайденныхТипов.Добавить(ТипРеквизита);
												КонецЕсли;
											КонецЦикла;
											Прервать;
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
							Если МассивНайденныхТипов.Количество() = 0 Тогда
								ЕстьОшибкиПреобразованияВыражения = Истина;
								
								ТекстСообщения = НСтр("ru = 'Не найдено поле %1 в выражении %2. Проверьте корректность выражения.';
														|en = 'Cannot find %1 field in expression %2. Check, if the expression is correct.'");
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
									НакопленныйПуть, ИсходноеВыражение);
								СообщенияОшибокПреобразования.Вставить(ИсходноеВыражение, ТекстСообщения);
							Иначе
								ТипТекущегоВыражения = Новый ОписаниеТипов(МассивНайденныхТипов);
							КонецЕсли;
							
						КонецЕсли;
						
						ВыражениеЗамены = ВыражениеЗамены + "." + ЧастьВыражения;
						
						Если НЕ ЕстьОшибкиПреобразованияВыражения Тогда
							КэшТиповВыражений.Вставить(ТекущееВыражение, ТипТекущегоВыражения);
						КонецЕсли;
						
					КонецЕсли;
					Если НЕ ЕстьОшибкиПреобразованияВыражения Тогда
						КэшТиповВыражений.Вставить(ТекущееВыражение, ТипТекущегоВыражения);
					КонецЕсли;
					
					ТипПоля = ТипТекущегоВыражения;
					НакопленныйПуть = ТекущееВыражение;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЕстьОшибкиПреобразованияВыражения Тогда
			СтруктураРезультата.ПреобразованныеВыражения.Вставить(ИсходноеВыражение, ВыражениеЗамены);
		КонецЕсли;
		
		Если ЕстьОшибкиПреобразованияВыражения Тогда
			СтруктураРезультата.ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает описание поддерживаемых источников характеристик.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица, описание поддерживаемых источников характеристик.
//    *МетаданныеИсточника - Метаданные - Метаданные источника характеристик.
//    *ПрефиксТипаВидаХарактеристик - Строка - Идентификатор источника характеристик.
//    *ПолеИдентификатора - Строка -  Имя поля (реквизита) идентификатора (или наименования) вида характеристик.
//                           Например, "ИдентификаторДляФормул" для плана видов характеристик ДополнительныеРеквизитыИСведения.
//    *ПолеТипаЗначений   - Строка - Имя поля (реквизита), содержащее тип значения вида характеристик.
//    		Если указано выражение типа, то указание поля типа значения является не обязательным.
//    *ИспользуетсяВыражениеТипаЗначений - Булево - Флаг использования выражения типа значений, тогда вместо обращения
//    		к полю будет указано выражение.
//    		Например, для справочника ВидыКонтактнойИнформации.
//    *ВыражениеТипаЗначений - Строка - Выражение типа значений. Используется при отсутствии поля типа значений.
//    		Например, для справочника ВидыКонтактнойИнформации можно использовать
//    		выражение "ТИП(СТРОКА)".
//    *ПереопределениеВыраженияТипаЗначений - ОписаниеТипов - Содержит описание типов. Необходимо задавать всегда, когда
//                                                            нет реального поля,
//    		содержащего тип значения (не ПВХ, ИспользуетсяВыражениеТипаЗначений = Истина).
//    		Переопределение в методе НоваяСтрокаДереваПоПолюКомпоновки.
//    *УникальностьИмениВПределахВсейТаблицыХарактеристик - Булево - Если Истина, то идентификатор характеристики (поле
//                                                                   имени) уникален
//    		во всей таблице характеристик. Например, значение поля "Имя" дополнительных реквизитов
//    		и сведений уникально во всей таблице ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения
//    		(т.к. один и тот же реквизит может входить в состав разных наборов).
//    		Если Ложь, то уникальность идентификатора характеристики (поле имени) не обеспечивается.
//    		Например, видов для контактной информации идентификатор "Телефон" будет использоваться
//    		в наборах "Контрагент" / "Организация" / "ФизическоеЛицо" и т.д.
//    		Если вид контактной информации указывается для одного типа, то мы можем точно определить
//    		параметры вида контактной информации (представление, тип). Если вид контактной информации
//    		указывается для составного типа, то параметры вида контактной информации (представление, тип)
//    		определяются так же как для обычных реквизитов (Представление берется с наименьшим значением,
//    		тип контактной информации указывается "прочее" - см. ОтсортированныйСписокПолейКомпоновки).
//
Функция СвойстваПоддерживаемыхИсточниковХарактеристик()
	
	ОписаниеСтроки = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));
	ТаблицаСвойств = Новый ТаблицаЗначений();
	ОписаниеБулево = Новый ОписаниеТипов("Булево");
	ТаблицаСвойств.Колонки.Добавить("МетаданныеИсточника");
	ТаблицаСвойств.Колонки.Добавить("ПрефиксТипаВидаХарактеристик", ОписаниеСтроки);
	ТаблицаСвойств.Колонки.Добавить("ПолеИдентификатора", ОписаниеСтроки);
	ТаблицаСвойств.Колонки.Добавить("ПолеТипаЗначений", ОписаниеСтроки);
	ТаблицаСвойств.Колонки.Добавить("ИспользуетсяВыражениеТипаЗначений", ОписаниеБулево);
	ТаблицаСвойств.Колонки.Добавить("ВыражениеТипаЗначений", ОписаниеСтроки);
	ТаблицаСвойств.Колонки.Добавить("ПереопределениеВыраженияТипаЗначений");
	ТаблицаСвойств.Колонки.Добавить("УникальностьИмениВПределахВсейТаблицыХарактеристик", ОписаниеБулево);
	
	Свойства = ТаблицаСвойств.Добавить();
	Свойства.МетаданныеИсточника = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	Свойства.ПрефиксТипаВидаХарактеристик = "ДР.";
	Свойства.ПолеИдентификатора = "ИдентификаторДляФормул";
	Свойства.ПолеТипаЗначений = "ТипЗначения";
	Свойства.ИспользуетсяВыражениеТипаЗначений = Ложь;
	Свойства.ВыражениеТипаЗначений = "";
	Свойства.УникальностьИмениВПределахВсейТаблицыХарактеристик = Истина;
	
	Свойства = ТаблицаСвойств.Добавить();
	Свойства.МетаданныеИсточника = Метаданные.Справочники.ВидыКонтактнойИнформации;
	Свойства.ПрефиксТипаВидаХарактеристик = "КИ.";
	Свойства.ПолеИдентификатора = "ИдентификаторДляФормул";
	Свойства.ПолеТипаЗначений = "";
	Свойства.ИспользуетсяВыражениеТипаЗначений = Истина;
	Свойства.ВыражениеТипаЗначений = "ТИП(СТРОКА)";
	Свойства.ПереопределениеВыраженияТипаЗначений = Новый ОписаниеТипов("Строка");
	Свойства.УникальностьИмениВПределахВсейТаблицыХарактеристик = Ложь;
	
	ТаблицаСвойств.Индексы.Добавить("МетаданныеИсточника");
	ТаблицаСвойств.Индексы.Добавить("ПрефиксТипаВидаХарактеристик");
	
	Возврат ТаблицаСвойств;
	
КонецФункции

// Возвращает соответствие английских и русских имен стандартных реквизитов.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие английских и русских имен стандартных реквизитов.
//
Функция СоответствияИменСтандартныхРеквизитов()
	
	СоответствиеИмен = Новый Соответствие;
	СоответствиеИмен.Вставить("DeletionMark", "ПометкаУдаления");
	СоответствиеИмен.Вставить("Owner", "Владелец");
	СоответствиеИмен.Вставить("Code", "Код");
	СоответствиеИмен.Вставить("Parent", "Родитель");
	СоответствиеИмен.Вставить("Predefined", "Предопределенный");
	СоответствиеИмен.Вставить("IsFolder", "ЭтоГруппа");
	СоответствиеИмен.Вставить("Description", "Наименование");
	СоответствиеИмен.Вставить("Ref", "Ссылка");
	СоответствиеИмен.Вставить("PredefinedDataName", "ИмяПредопределенныхДанных");
	СоответствиеИмен.Вставить("Date", "Дата");
	СоответствиеИмен.Вставить("Number", "Номер");
	СоответствиеИмен.Вставить("Posted", "Проведен");
	СоответствиеИмен.Вставить("ValueType", "ТипЗначения");
	СоответствиеИмен.Вставить("Type", "Вид");
	СоответствиеИмен.Вставить("Order", "Порядок");
	СоответствиеИмен.Вставить("ActionPeriodIsBasic", "Забалансовый");
	СоответствиеИмен.Вставить("HeadTask", "ВедущаяЗадача");
	СоответствиеИмен.Вставить("Completed", "Завершен");
	СоответствиеИмен.Вставить("Started", "Стартован");
	СоответствиеИмен.Вставить("BusinessProcess", "БизнесПроцесс");
	СоответствиеИмен.Вставить("Executed", "Выполнена");
	СоответствиеИмен.Вставить("RoutePoint", "ТочкаМаршрута");
	СоответствиеИмен.Вставить("SentNo", "НомерОтправленного");
	СоответствиеИмен.Вставить("ReceivedNo", "НомерПринятого");
	СоответствиеИмен.Вставить("ThisNode", "ЭтотУзел");
	
	
	// Обратное соответствие.
	Для каждого КлючИЗначение Из СоответствиеИмен Цикл
		СоответствиеИмен.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат СоответствиеИмен;
	
КонецФункции

// Возвращает массив частей операнда. Например, операнд
// 			"СтрокаТабличнойЧасти[0].РеквизитТЧ.{ХарактеристикаРеквизита}.РеквизитХарактеристики"
// должен быть разделен на части:
// 			"СтрокаТабличнойЧасти[0]", "РеквизитТЧ", "{ХарактеристикаРеквизита}", "РеквизитХарактеристики".
// 
// Параметры:
// 	Операнд - Строка - Операнд формулы.
// 	ПредставленияХарактеристик - Булево - Флаг, указывающий, что парсится выражения с представлениями характеристик,
// 				а не идентификаторами.
// 	УдалятьВнешниеСкобки - Булево - Если Истина, то если операнд заключен во внешние [] скобки, они будут удалены.
// 				В основном, если операнд заключен во внешние квадратные скобки, это ограничение самого операнда,
// 				как, например, в формулах видов номенклатур. Однако, если разбирается на части часть операнда, то
// 				внешние квадратные скобки являются признаком характеристики, и их удалять не следует.
// 				Например, в методе "ВыполнениеПроверкиИПреобразованияВыражений", может распарсиваться путь
// 				типа "Счет.Субконто1.[Представление характеристики]". Тогда часть "Счет.Субконто1" - является
// 				первой частью выражения, а "[Представление характеристики]" - второй.
// Возвращаемое значение:
// 	Массив из Строка - Части операнда.
//
Функция ЧастиОперанда(Операнд, ПредставленияХарактеристик = Ложь, УдалятьВнешниеСкобки = Истина)
	Результат = Новый Массив;
	
	РазбираемыйТекст = Операнд;
	
	ТегНачалаОперанда = "[";
	ТегОкончанияОперанда = "]";
	
	ТегНачалаХарактеристики = "{";
	ТегОкончанияХарактеристики = "}";
	Если ПредставленияХарактеристик Тогда
		ТегНачалаХарактеристики = "[";
		ТегОкончанияХарактеристики = "]";
	КонецЕсли;
	
	Если УдалятьВнешниеСкобки Тогда
		// Если операнд заключен во внешние скобки [], их нужно удалить.
		Если Лев(РазбираемыйТекст, 1) = ТегНачалаОперанда
			И Прав(РазбираемыйТекст, 1) = ТегОкончанияОперанда Тогда
			РазбираемыйТекст = Сред(РазбираемыйТекст, 2, СтрДлина(РазбираемыйТекст) - 2);
		КонецЕсли;
	КонецЕсли;
	
	// Внутри характеристики через точку указывается префикс типа характеристики.
	// Поэтому сначала ищутся теги характеристик, вне этих тегов части операнда разделяются точкой.
	РазделительЧастейОперанда = ".";
	
	НачалоПозицииХарактеристики = СтрНайти(РазбираемыйТекст, ТегНачалаХарактеристики);
	Пока НачалоПозицииХарактеристики > 0 Цикл
		КонецПозицииХарактеристики = ПозицияЗакрывающегоТегаОкончанияОперанда(РазбираемыйТекст,
			ТегНачалаХарактеристики, ТегОкончанияХарактеристики);
		
		Если НачалоПозицииХарактеристики = 1 Тогда
			ТекстПередХарактеристикой = "";
		Иначе
			ТекстПередХарактеристикой = Сред(РазбираемыйТекст, 1, НачалоПозицииХарактеристики - 1);
		КонецЕсли;
		Если НЕ ПустаяСтрока(ТекстПередХарактеристикой) Тогда
			Части = СтрРазделить(ТекстПередХарактеристикой, РазделительЧастейОперанда, Ложь);
			Для Каждого Часть Из Части Цикл
				Результат.Добавить(Часть);
			КонецЦикла;
		КонецЕсли;
		ЧастьХарактеристики = Сред(РазбираемыйТекст,
			НачалоПозицииХарактеристики,
			КонецПозицииХарактеристики - НачалоПозицииХарактеристики + 1);
		Результат.Добавить(ЧастьХарактеристики);
		
		РазбираемыйТекст = Сред(РазбираемыйТекст, КонецПозицииХарактеристики + 1);
		НачалоПозицииХарактеристики = СтрНайти(РазбираемыйТекст, ТегНачалаХарактеристики);
	КонецЦикла;
	Если НЕ ПустаяСтрока(РазбираемыйТекст) Тогда
		Части = СтрРазделить(РазбираемыйТекст, РазделительЧастейОперанда, Ложь);
		Для Каждого Часть Из Части Цикл
			Результат.Добавить(Часть);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПозицияЗакрывающегоТегаОкончанияОперанда(ОставшаясяЧастьФормулы, ТегНачалаОперанда, ТегОкончанияОперанда)
	
	СчетчикВложенныхТегов = 0;
	Позиция = СтрНайти(ОставшаясяЧастьФормулы, ТегНачалаОперанда,, 1);
	
	СледующаяПозицияЗакрытия = 0;
	СчетчикВложенныхТегов = СчетчикВложенныхТегов + 1;
	Пока НЕ СчетчикВложенныхТегов = 0 Цикл
		// Например, операнд, включающий индекс строки табличной части.
		СледующаяПозицияОткрытия = СтрНайти(ОставшаясяЧастьФормулы, ТегНачалаОперанда,, Позиция + 1);
		СледующаяПозицияЗакрытия = СтрНайти(ОставшаясяЧастьФормулы, ТегОкончанияОперанда,, Позиция + 1);
		
		Если СледующаяПозицияОткрытия <> 0
			И (СледующаяПозицияОткрытия < СледующаяПозицияЗакрытия) Тогда
			Позиция = СледующаяПозицияОткрытия;
			СчетчикВложенныхТегов = СчетчикВложенныхТегов + 1;
		Иначе
			Позиция = СледующаяПозицияЗакрытия;
			СчетчикВложенныхТегов = СчетчикВложенныхТегов - 1;
		КонецЕсли;
		Если Позиция = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка при разборе текста формулы: не найден тег закрытия операнда';
								|en = 'Error parsing formula text: operand close tag not found'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Позиция;
	
КонецФункции

Функция СпецСимволы()
	СпецСимволы = " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
	Возврат СпецСимволы;
КонецФункции

// Возвращает текст из конструкций расширения языка запросов для описания характеристик.
// 
// Параметры:
// 	ОписаниеТипов - ОписаниеТипов - типы, для которых необходимо составить выражения описания характеристик на языке расширения запросов СКД.
// Возвращаемое значение:
// 	Строка - выражения описания характеристик на языке расширения запросов СКД.
//
Функция ОписаниеХарактеристикСКДДляОписанияТипов(ОписаниеТипов)
	
	ВыраженияРасширенийЯзыкаЗапроса = "";
	
	СвойстваИсточниковХарактеристик = СвойстваПоддерживаемыхИсточниковХарактеристик();
	
	ТипыДанныхСтроки = ОписаниеТипов.Типы();
	Для Каждого ТипЗначения Из ТипыДанныхСтроки Цикл
		ОбъектМД = ОбъектМетаданныхПоТипуЗначения(ТипЗначения);
		Если ОбъектМД = Неопределено Тогда
			Продолжить
		КонецЕсли;
		ВидОбъектаМД = ВидОбъектаМетаданных(ОбъектМД);
		Если ВидОбъектаМД = Неопределено Тогда
			// Перечисление не имеет реквизитов
			Продолжить;
		КонецЕсли;
		
		ТекстыХарактеристик = Новый Массив;
		
		Если ОбъектМД.Характеристики.Количество() = 0 Тогда
			// Для объекта метаданных не определены любые (не только поддерживаемые) характеристики на уровне метаданных,
			// значит выражение переопределяющее получение характеристик не нужно.
			Продолжить;
		КонецЕсли;
		
		// Соответствие Ключ - объект метаданных вид характеристик, Значение - ОписаниеХарактеристик.
		ИспользуемыеИсточникиХарактеристик = Новый Соответствие;
		
		ЗаполнитьИспользуемыеИсточникиХарактеристик(ИспользуемыеИсточникиХарактеристик,
			ОбъектМД,
			СвойстваИсточниковХарактеристик);
		
		ВыражениеТипаИсточника = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1.%2",
				ВидОбъектаМД,
				ОбъектМД.Имя);
		
		Если ИспользуемыеИсточникиХарактеристик.Количество() = 0 Тогда
			// Не могут быть определены поддерживаемые виды характеристик. Запрещаем использование любых характеристик.
			
			ШаблонТекстаХарактеристик = "
			|{ХАРАКТЕРИСТИКИ
			|	ТИП(&ВыражениеТипаИсточника)
			|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
			|			НЕОПРЕДЕЛЕНО КАК Идентификатор,
			|			"""" КАК Имя,
			|			НЕОПРЕДЕЛЕНО КАК ТипЗначения
			|		ГДЕ ЛОЖЬ)
			|	ПОЛЕКЛЮЧА Идентификатор
			|	ПОЛЕИМЕНИ Имя
			|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
			|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
			|			НЕОПРЕДЕЛЕНО КАК Ссылка,
			|			НЕОПРЕДЕЛЕНО КАК Свойство,
			|			НЕОПРЕДЕЛЕНО КАК Значение
			|		ГДЕ ЛОЖЬ)
			|	ПОЛЕОБЪЕКТА Ссылка
			|	ПОЛЕВИДА Свойство
			|	ПОЛЕЗНАЧЕНИЯ Значение }";
			ТекстХарактеристик = СтрЗаменить(ШаблонТекстаХарактеристик,
				"&ВыражениеТипаИсточника", ВыражениеТипаИсточника);
			
			ТекстыХарактеристик.Добавить(ТекстХарактеристик);
			
		Иначе
			
			ШаблонТекстаХарактеристик = "
			|{ХАРАКТЕРИСТИКИ
			|	ТИП(&ВыражениеТипаИсточника)
			|	ВИДЫХАРАКТЕРИСТИК (&ТекстПодзапросаИсточникиХарактеристик
			|		)
			|	ПОЛЕКЛЮЧА Идентификатор
			|	ПОЛЕИМЕНИ Имя
			|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
			|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (&ТекстПодзапросаИсточникиЗначений)
			|	ПОЛЕОБЪЕКТА Ссылка
			|	ПОЛЕВИДА Свойство
			|	ПОЛЕЗНАЧЕНИЯ Значение }";
			
			ТекстПодзапросаИсточникиХарактеристик = "";
			
			ТекстПодзапросаИсточникиЗначений = "";
			
			Для Каждого ОбъектИсточникаИОписанияХарактеристик Из ИспользуемыеИсточникиХарактеристик Цикл
				
				МДИсточникаХарактеристик = ОбъектИсточникаИОписанияХарактеристик.Ключ;
				ОписанияХарактеристик = ОбъектИсточникаИОписанияХарактеристик.Значение;
				
				СвойстваИсточника = СвойстваИсточниковХарактеристик.Найти(МДИсточникаХарактеристик, "МетаданныеИсточника");
				
				Для Каждого ОписаниеХарактеристик Из ОписанияХарактеристик Цикл
					
					// В подзапрос выборки видов характеристик нельзя помещать объединение подзапросов, поэтому
					// каждый набор характеристик - новый запрос.
					ТекстПодзапросаИсточникиХарактеристик = ТекстПодзапросаИсточниковВидовХарактеристик(
						СвойстваИсточника,
						ОписаниеХарактеристик,,
						Истина);
					
					ТекстПодзапросаИсточникиЗначений = ТекстПодзапросаИсточниковЗначенийХарактеристик(ОписаниеХарактеристик);
					
					ТекстХарактеристик = ШаблонТекстаХарактеристик;
					ТекстХарактеристик = СтрЗаменить(ТекстХарактеристик, "&ТекстПодзапросаИсточникиХарактеристик", ТекстПодзапросаИсточникиХарактеристик);
					ТекстХарактеристик = СтрЗаменить(ТекстХарактеристик, "&ТекстПодзапросаИсточникиЗначений", ТекстПодзапросаИсточникиЗначений);
					ТекстХарактеристик = СтрЗаменить(ТекстХарактеристик, "&ВыражениеТипаИсточника", ВыражениеТипаИсточника);
					
					ТекстыХарактеристик.Добавить(ТекстХарактеристик);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВыраженияРасширенийЯзыкаЗапроса = ВыраженияРасширенийЯзыкаЗапроса
			+ СтрСоединить(ТекстыХарактеристик, Символы.ПС);
		
	КонецЦикла;
	
	Возврат ВыраженияРасширенийЯзыкаЗапроса;
	
КонецФункции

// Возвращает текст подзапроса источников вида характеристик
// 
// Параметры:
// 	СвойстваИсточника - СтрокаТаблицыЗначений - Описание свойств вида характеристик.
// 	ОписаниеХарактеристикВМетаданных - СтрокаТаблицыЗначений - Строка таблицы описаний характеристик по метаданным. Конструктор таблицы см. ТаблицаСвойствХарактеристикПоМетаданным.
// 	 **ВидыХарактеристик - ОбъектМетаданныхСправочник - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхДокумент - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхПланОбмена - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхПланВидовХарактеристик - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхПланВидовРасчета - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхБизнесПроцесс - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхЗадача - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхТабличнаяЧасть - (виды характеристик) объект источника видов характеристик.
// 	 **ПолеКлюча - ОбъектМетаданных - (виды характеристик) поле ключа источника характеристик.
// 	 **ПолеОтбораВидов - ОбъектМетаданныхПоле - (виды характеристик) поле отбора источника характеристик.
// 	 **ПолеОтбораВидов - Неопределено - значение по умолчанию, если отбор в метаданных не задан.
// 	 **ЗначениеОтбораВидов - Неопределено, ЛюбаяСсылка, Булево, Число, Строка, Дата - значение отбора.
// 	 **ЗначенияХарактеристик - ОбъектМетаданных - (значения характеристик) объект источника значений характеристик.
// 	 **ПолеОбъекта - ОбъектМетаданных - (значения характеристик) поле объекта, которому принадлежат характеристики.
// 	 **ПолеВида - ОбъектМетаданных - (значения характеристик) поле, в котором содержится вид характеристики.
// 	 **ПолеЗначения - ОбъектМетаданных - (значения характеристик) поле, в котором содержится значение характеристики.
// 	НаборыДополнительныхРеквизитов - Массив из СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - Дополнительный отбор по наборам дополнительных реквизитов и сведений.
// 	НаборыДополнительныхРеквизитов - Неопределено - Значение по умолчанию.
// 	ДляСКД - Булево - Флаг составления текста запроса для СКД.
// Возвращаемое значение:
// 	Строка - Текст подзапроса.
Функция ТекстПодзапросаИсточниковВидовХарактеристик(СвойстваИсточника, ОписаниеХарактеристикВМетаданных, НаборыДополнительныхРеквизитов = Неопределено, ДляСКД = Ложь)
	
	МДИсточникаХарактеристик = СвойстваИсточника.МетаданныеИсточника;
	ТаблицаВидовХарактеристик = ПолноеИмяТаблицыДанных(МДИсточникаХарактеристик.ПолноеИмя());
	
	ПолеКлюча = ОписаниеХарактеристикВМетаданных.ПолеКлюча; // ОбъектМетаданныхПоле - 
	
	Если ОписаниеХарактеристикВМетаданных.ВидыХарактеристик = МДИсточникаХарактеристик Тогда
		
		ТекстПодзапроса =
		"ВЫБРАТЬ
		|	&ВыражениеПоляИдентификатора КАК Идентификатор,
		|	&ВыражениеПоляИмени КАК Имя,
		|	&ВыражениеТипаЗначения КАК ТипЗначения
		|ИЗ
		|	&ИсточникВидовХарактеристик КАК ТаблицаВидовХарактеристик
		|ГДЕ
		|	&УсловияОтбораВидовХарактеристик";
		
	Иначе
		
		ТекстПодзапроса =
		"ВЫБРАТЬ
		|	&ВыражениеПоляИдентификатора КАК Идентификатор,
		|	&ВыражениеПоляИмени КАК Имя,
		|	&ВыражениеТипаЗначения КАК ТипЗначения
		|ИЗ
		|	&ИсточникВидовХарактеристик КАК ТаблицаИсточник
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	#ТаблицаВидовХарактеристик КАК ТаблицаВидовХарактеристик
		|ПО
		|	&УсловиеСоединения
		|ГДЕ
		|	&УсловияОтбораВидовХарактеристик";
		
		УсловиеСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ТаблицаИсточник.%1 = ТаблицаВидовХарактеристик.Ссылка",
		ПолеКлюча.Имя);
		
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "#ТаблицаВидовХарактеристик", ТаблицаВидовХарактеристик);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&УсловиеСоединения", УсловиеСоединения);
		
	КонецЕсли;
	
	ИсточникВидовХарактеристик = ПолноеИмяТаблицыДанных(
		ОписаниеХарактеристикВМетаданных.ВидыХарактеристик.ПолноеИмя());
	
	Если ОписаниеХарактеристикВМетаданных.ВидыХарактеристик = МДИсточникаХарактеристик Тогда
		
		ВыражениеПоляИдентификатора = "ТаблицаВидовХарактеристик."
			+ ПолеКлюча.Имя;
		
	Иначе
		
		ВыражениеПоляИдентификатора = "ТаблицаИсточник."
			+ ПолеКлюча.Имя;
		
	КонецЕсли;
	
	ВыражениеПоляИмени = ВыражениеПолногоИдентификатораХарактеристики(МДИсточникаХарактеристик, ДляСКД);
	ВыражениеПоляИмени = СтрЗаменить(ВыражениеПоляИмени, "%ИмяТаблицы%", "ТаблицаВидовХарактеристик");
	
	Если СвойстваИсточника.ИспользуетсяВыражениеТипаЗначений Тогда
		ВыражениеТипаЗначения = СвойстваИсточника.ВыражениеТипаЗначений;
	Иначе
		ВыражениеТипаЗначения = "ТаблицаВидовХарактеристик."
			+ СвойстваИсточника.ПолеТипаЗначений;
	КонецЕсли;
	
	УсловияОтбораВидовХарактеристик = "";
	Если ОписаниеХарактеристикВМетаданных.ПолеОтбораВидов <> Неопределено Тогда
		
		УсловияОтбораВидовХарактеристик = УсловиеОтбораХарактеристикПоДаннымМетаданных(ОписаниеХарактеристикВМетаданных,
			МДИсточникаХарактеристик,
			"ТаблицаИсточник",
			"ТаблицаВидовХарактеристик");
		
		ВыражениеДополнительногоОтбора = "";
		Если МДИсточникаХарактеристик = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения Тогда
			Если ТипЗнч(НаборыДополнительныхРеквизитов) = Тип("Массив")
				И НаборыДополнительныхРеквизитов.Количество() > 0 Тогда
				// Выражение дополнительных отборов источника характеристик должно содержать только условия к полям ТаблицаВидовХарактеристик
				// т.к. дополнительные условия задаются на объект метаданных видов характеристик.
				ВыражениеДополнительногоОтбора =
				"ТаблицаВидовХарактеристик.Ссылка В
				|	(&ВыражениеВыборкиДопРеквизитов)";
				ШаблонВыраженияВыборкиДопРеквизитов =
				"ВЫБРАТЬ
				|	НаборыСвойствСостав.Свойство КАК Свойство
				|ИЗ
				|	&ТаблицаНаборов КАК НаборыСвойствСостав
				|ГДЕ
				|	НаборыСвойствСостав.Ссылка В (&НаборыДополнительныхРеквизитов)";
				Если ОписаниеХарактеристикВМетаданных.ВидыХарактеристик = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ТабличныеЧасти.ДополнительныеРеквизиты Тогда
					ВыражениеВыборки = СтрЗаменить(ШаблонВыраженияВыборкиДопРеквизитов,
						"&ТаблицаНаборов", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты");
				ИначеЕсли ОписаниеХарактеристикВМетаданных.ВидыХарактеристик = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ТабличныеЧасти.ДополнительныеСведения Тогда
					ВыражениеВыборки = СтрЗаменить(ШаблонВыраженияВыборкиДопРеквизитов,
						"&ТаблицаНаборов", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения");
				Иначе
					ВыражениеВыборки = СтрЗаменить(ШаблонВыраженияВыборкиДопРеквизитов,
						"&ТаблицаНаборов", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты")
						+ "
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|"
						+ СтрЗаменить(ШаблонВыраженияВыборкиДопРеквизитов,
						"&ТаблицаНаборов", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения");
				КонецЕсли;
				ВыражениеДополнительногоОтбора = СтрЗаменить(ВыражениеДополнительногоОтбора, "&ВыражениеВыборкиДопРеквизитов", ВыражениеВыборки);
			КонецЕсли;
		КонецЕсли;
		Если УсловияОтбораВидовХарактеристик <> ""
			И ВыражениеДополнительногоОтбора <> "" Тогда
			УсловияОтбораВидовХарактеристик = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 И %2",
			УсловияОтбораВидовХарактеристик,
			ВыражениеДополнительногоОтбора);
		ИначеЕсли УсловияОтбораВидовХарактеристик = ""
			И ВыражениеДополнительногоОтбора <> "" Тогда
			УсловияОтбораВидовХарактеристик = ВыражениеДополнительногоОтбора;
		КонецЕсли;
	КонецЕсли;
	УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик + ?(УсловияОтбораВидовХарактеристик = "", "", " " + "И" + " ")
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("(ТаблицаВидовХарактеристик.%1 <> """")",
			СвойстваИсточника.ПолеИдентификатора);
	
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляИдентификатора", ВыражениеПоляИдентификатора);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляИмени", ВыражениеПоляИмени);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеТипаЗначения", ВыражениеТипаЗначения);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ИсточникВидовХарактеристик", ИсточникВидовХарактеристик);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&УсловияОтбораВидовХарактеристик", УсловияОтбораВидовХарактеристик);
	
	Возврат ТекстПодзапроса;
	
КонецФункции

Функция НаборыДанныхСхемыКомпоновки(СхемаКомпоновки)
	СоответствиеНаборовДанных = Новый Соответствие;
	Для Каждого НаборДанных Из СхемаКомпоновки.НаборыДанных Цикл
		ЗаполнитьНаборыПолученияДанныхРекурсивно(СоответствиеНаборовДанных, НаборДанных);
	КонецЦикла;
	
	Возврат СоответствиеНаборовДанных;
КонецФункции

Процедура ЗаполнитьНаборыПолученияДанныхРекурсивно(СписокНаборовДанных, ТекущийНабор)
	Если ТипЗнч(ТекущийНабор) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		Для Каждого ВложенныйНабор Из ТекущийНабор.Элементы Цикл
			ЗаполнитьНаборыПолученияДанныхРекурсивно(СписокНаборовДанных, ВложенныйНабор);
		КонецЦикла;
	Иначе
		СписокНаборовДанных.Вставить(ТекущийНабор, ПоляНабораСхемыКомпоновки(ТекущийНабор));
	КонецЕсли;
КонецПроцедуры

Функция ПоляНабораСхемыКомпоновки(НаборДанныхСхемыКомпоновки)
	МассивПолей = Новый Массив;
	
	Для Каждого Поле Из НаборДанныхСхемыКомпоновки.Поля Цикл
		Если ТипЗнч(Поле) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		МассивПолей.Добавить(Поле.ПутьКДанным);
	КонецЦикла;
	
	Возврат МассивПолей;
КонецФункции

Функция ПолучитьПараметрыУказанияХарактеристикВВыражениях(ВыраженияДляПроверки, ПараметрыПроверкиВыражений,
				СтруктураРезультата, СвойстваИсточниковХарактеристик)
	
	ПараметрыУказанияХарактеристик = Новый Структура;
	
	СообщенияОшибокПреобразования = СтруктураРезультата.СообщенияОшибокПреобразования;
	ПреобразованиеХарактеристикКПредставлению = ПараметрыПроверкиВыражений.ПреобразованиеХарактеристикКПредставлению;
	
	КонтрольПредставлений = ПреобразованиеХарактеристикКПредставлению;
	
	// Характеристики, у которых свойство УникальностьИмениВПределахВсейТаблицыХарактеристик = Истина. Например, доп. реквизиты.
	ПараметрыУникальныхХарактеристик = Новый Соответствие;
	ВыраженияСНеУникальнымиХарактеристиками = Новый Массив;
	ВыраженияСОшибками = Новый Соответствие;
	
	ИдентификаторыХарактеристикПоВидам = Новый Соответствие;
	Для Каждого ИсходноеВыражение Из ВыраженияДляПроверки Цикл
		Если СтрНайти(ИсходноеВыражение, "{") = 0 Тогда
			Продолжить;
		КонецЕсли;
		ВыражениеСодержитОшибкиПарсинга = Ложь;
		ДлинаВыражения = СтрДлина(ИсходноеВыражение);
		
		Для Каждого ОписаниеИсточника Из СвойстваИсточниковХарактеристик Цикл
			МетаданныеИсточника = ОписаниеИсточника.МетаданныеИсточника;
			
			ТегНачала = "{" + ОписаниеИсточника.ПрефиксТипаВидаХарактеристик;
			ДлинаТегаНачала = СтрДлина(ТегНачала);
			ТегОкончания = "}";
			
			ПроверкиВыполнены = Ложь;
			НомерПозиции = 0;
			Пока НЕ ПроверкиВыполнены И НЕ ВыражениеСодержитОшибкиПарсинга Цикл
				НомерПозиции = СтрНайти(ИсходноеВыражение, ТегНачала,, НомерПозиции + 1);
				Если НомерПозиции = 0 Тогда
					ПроверкиВыполнены = Истина;
					Прервать;
				Иначе
					НомерПозицииОкончания = СтрНайти(ИсходноеВыражение, ТегОкончания,, НомерПозиции + ДлинаТегаНачала);
					Если НомерПозицииОкончания = 0 Тогда
						СтруктураРезультата.ЕстьОшибки = Истина;
						ВыраженияСОшибками.Вставить(ИсходноеВыражение, Истина);
						
						ТекстСообщения = НСтр("ru = 'Ошибка парсинга выражения ""%1"". Не найден тег окончания характеристики.';
												|en = 'Error when parsing the ""%1"" expression. Cannot find variant end tag.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
							ИсходноеВыражение);
						СообщенияОшибокПреобразования.Вставить(ИсходноеВыражение, ТекстСообщения);
						Прервать;
					КонецЕсли;
					ПолныйИдентификатор = Сред(ИсходноеВыражение, НомерПозиции, НомерПозицииОкончания - НомерПозиции + 1);
					ДлинаИдентификатора = НомерПозицииОкончания - (НомерПозиции + ДлинаТегаНачала);
					ИдентификаторХарактеристики = Сред(ИсходноеВыражение, НомерПозиции + ДлинаТегаНачала, ДлинаИдентификатора);
					
					
					ТаблицаИдентификаторов = ИдентификаторыХарактеристикПоВидам.Получить(МетаданныеИсточника);
					Если ТаблицаИдентификаторов = Неопределено Тогда
						ОписаниеТипаИдентификатора = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000, ДопустимаяДлина.Переменная));
						ТаблицаИдентификаторов = Новый ТаблицаЗначений;
						ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторПоля", ОписаниеТипаИдентификатора);
						ТаблицаИдентификаторов.Колонки.Добавить("ЗначениеПоляИмени", ОписаниеТипаИдентификатора);
					КонецЕсли;
					СтрокаИдентификатора = ТаблицаИдентификаторов.Добавить();
					СтрокаИдентификатора.ИдентификаторПоля = ПолныйИдентификатор;
					СтрокаИдентификатора.ЗначениеПоляИмени = ИдентификаторХарактеристики;
					
					ИдентификаторыХарактеристикПоВидам.Вставить(МетаданныеИсточника, ТаблицаИдентификаторов);
					
					НомерПозиции = НомерПозицииОкончания + 1;
					Если НомерПозиции > ДлинаВыражения Тогда
						ПроверкиВыполнены = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ВыражениеСодержитОшибкиПарсинга Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ХарактеристикиСОшибками = Новый Соответствие;
	НеУникальныеХарактеристики = Новый Массив;
	Для Каждого ВидХарактеристикИИдентификаторы Из ИдентификаторыХарактеристикПоВидам Цикл
		МетаданныеИсточника = ВидХарактеристикИИдентификаторы.Ключ;
		ТаблицаИдентификаторов = ВидХарактеристикИИдентификаторы.Значение;
		ТаблицаИдентификаторов.Свернуть("ИдентификаторПоля, ЗначениеПоляИмени");
		
		СвойстваИсточникаХарактеристик = СвойстваИсточниковХарактеристик.Найти(МетаданныеИсточника, "МетаданныеИсточника");
		ТаблицаБД = ПолноеИмяТаблицыДанных(
			СвойстваИсточникаХарактеристик.МетаданныеИсточника.ПолноеИмя());
		
		Запрос = Новый Запрос;
		Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыХарактеристик.ИдентификаторПоля КАК ИдентификаторПоля,
		|	ИдентификаторыХарактеристик.ЗначениеПоляИмени КАК ЗначениеПоляИмени
		|ПОМЕСТИТЬ ИдентификаторыХарактеристик
		|ИЗ
		|	&ИдентификаторыХарактеристик КАК ИдентификаторыХарактеристик
		|;
		|
		|ВЫБРАТЬ
		|	ИдентификаторыХарактеристик.ИдентификаторПоля КАК ИдентификаторПоля,
		|	ИдентификаторыХарактеристик.ЗначениеПоляИмени КАК ЗначениеПоляИмени,
		|	ТаблицаВидовХарактеристик.Ссылка КАК Ссылка,
		|	&ВыражениеПредставленияХарактеристики КАК ПредставлениеХарактеристики,
		|	&ВыражениеТипЗначения КАК ТипЗначения
		|ИЗ
		|	ИдентификаторыХарактеристик КАК ИдентификаторыХарактеристик
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	#ИмяТаблицыИсточникаХарактеристик КАК ТаблицаВидовХарактеристик
		|ПО
		|	&ВыражениеСоединенияТаблиц
		|
		|ИТОГИ
		|	МАКСИМУМ(ЗначениеПоляИмени) КАК ЗначениеПоляИмени
		|ПО
		|	ИдентификаторПоля";
		
		ВыражениеСоединенияТаблиц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ИдентификаторыХарактеристик.ЗначениеПоляИмени = ТаблицаВидовХарактеристик.%1",
			СвойстваИсточникаХарактеристик.ПолеИдентификатора);
		Если СвойстваИсточникаХарактеристик.ИспользуетсяВыражениеТипаЗначений Тогда
			ВыражениеТипЗначения = СвойстваИсточникаХарактеристик.ВыражениеТипаЗначений;
		Иначе
			ВыражениеТипЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ТаблицаВидовХарактеристик.%1",
				СвойстваИсточникаХарактеристик.ПолеТипаЗначений);
		КонецЕсли;
		Если ПреобразованиеХарактеристикКПредставлению Тогда
			ВыражениеПредставленияХарактеристики = "ВЫБОР
			|		КОГДА НЕ ТаблицаВидовХарактеристик.Ссылка ЕСТЬ NULL
			|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаВидовХарактеристик.Ссылка)
			|		ИНАЧЕ """"
			|	КОНЕЦ";
		Иначе
			ВыражениеПредставленияХарактеристики = """""";
		КонецЕсли;
			
		Текст = СтрЗаменить(Текст, "#ИмяТаблицыИсточникаХарактеристик", ТаблицаБД);
		Текст = СтрЗаменить(Текст, "&ВыражениеСоединенияТаблиц", ВыражениеСоединенияТаблиц);
		Текст = СтрЗаменить(Текст, "&ВыражениеТипЗначения", ВыражениеТипЗначения);
		Текст = СтрЗаменить(Текст, "&ВыражениеПредставленияХарактеристики", ВыражениеПредставленияХарактеристики);
		
		Запрос.Текст = Текст;
		Запрос.УстановитьПараметр("ИдентификаторыХарактеристик", ТаблицаИдентификаторов);
		
		ВыборкаИдентификатор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ИдентификаторПоля");
		Пока ВыборкаИдентификатор.Следующий() Цикл
			ИдентификаторПоля = ВыборкаИдентификатор.ИдентификаторПоля;
			ЗначениеПоляИмени = ВыборкаИдентификатор.ЗначениеПоляИмени;
			
			ВыборкаДетальные = ВыборкаИдентификатор.Выбрать();
			Если СвойстваИсточникаХарактеристик.УникальностьИмениВПределахВсейТаблицыХарактеристик
				И ВыборкаДетальные.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Не обеспечена уникальность характеристики по идентификатору ""%1""';
										|en = 'Variant with ID ""%1"" must be unique'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
					ЗначениеПоляИмени);
				
				ХарактеристикиСОшибками.Вставить(ИдентификаторПоля, ТекстСообщения);
				Продолжить;
			КонецЕсли;
			ТипДанныхХарактеристики = Неопределено;
			ПредставлениеХарактеристики = Неопределено;
			
			ХарактеристикаНеУникальна = Ложь;
			ЕстьОшибкиВХарактеристике = Ложь;
			Пока ВыборкаДетальные.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаДетальные.Ссылка) Тогда
					ТекстСообщения = НСтр("ru = 'Не найдена характеристика по идентификатору ""%1""';
											|en = 'Cannot find variant with ID ""%1""'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
						ЗначениеПоляИмени);
					
					ХарактеристикиСОшибками.Вставить(ИдентификаторПоля, ТекстСообщения);
					ЕстьОшибкиВХарактеристике = Истина;
					Прервать;
				КонецЕсли;
				ТипДанных = ВыборкаДетальные.ТипЗначения;
				Если ЗначениеЗаполнено(СвойстваИсточникаХарактеристик.ПереопределениеВыраженияТипаЗначений) Тогда
					ТипДанных = СвойстваИсточникаХарактеристик.ПереопределениеВыраженияТипаЗначений;
				КонецЕсли;
				Если КонтрольПредставлений
					И НЕ ПредставлениеХарактеристики = Неопределено
					И ПредставлениеХарактеристики <> ВыборкаДетальные.ПредставлениеХарактеристики Тогда
					ХарактеристикаНеУникальна = Истина;
					Прервать;
				КонецЕсли;
				ПредставлениеХарактеристики = ВыборкаДетальные.ПредставлениеХарактеристики;
				ТипДанныхХарактеристики = ТипДанных;
			КонецЦикла;
			
			Если НЕ ЕстьОшибкиВХарактеристике Тогда
				Если ХарактеристикаНеУникальна Тогда
					НеУникальныеХарактеристики.Добавить(ИдентификаторПоля);
				Иначе
					ПараметрыХарактеристики = Новый Структура;
					ПараметрыХарактеристики.Вставить("Представление", ПредставлениеХарактеристики);
					ПараметрыХарактеристики.Вставить("ТипЗначения", ТипДанныхХарактеристики);
					ПараметрыУникальныхХарактеристик.Вставить(ИдентификаторПоля, ПараметрыХарактеристики);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ИсходноеВыражение Из ВыраженияДляПроверки Цикл
		ЕстьОшибкиВВыражении = Ложь;
		Для Каждого ХарактеристикаИТекстОшибки Из ХарактеристикиСОшибками Цикл
			ИдентификаторХарактеристики = ХарактеристикаИТекстОшибки.Ключ;
			ТекстОшибки = ХарактеристикаИТекстОшибки.Значение;
			НомерПозиции = СтрНайти(ИсходноеВыражение, ИдентификаторХарактеристики);
			Если НомерПозиции > 0 Тогда
				ВыраженияСОшибками.Вставить(ИсходноеВыражение, Истина);
				СообщенияОшибокПреобразования.Вставить(ИсходноеВыражение, ТекстОшибки);
				СтруктураРезультата.ЕстьОшибки = Истина;
				ЕстьОшибкиВВыражении = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьОшибкиВВыражении Тогда
			Продолжить;
		КонецЕсли;
		ЕстьНеУникальныеХарактеристики = Ложь;
		Для Каждого ИдентификаторХарактеристики Из НеУникальныеХарактеристики Цикл
			НомерПозиции = СтрНайти(ИсходноеВыражение, ИдентификаторХарактеристики);
			Если НомерПозиции > 0 Тогда
				ЕстьНеУникальныеХарактеристики = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьНеУникальныеХарактеристики Тогда
			ВыраженияСНеУникальнымиХарактеристиками.Добавить(ИсходноеВыражение);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыУказанияХарактеристик.Вставить("ПараметрыУникальныхХарактеристик", ПараметрыУникальныхХарактеристик);
	ПараметрыУказанияХарактеристик.Вставить("ВыраженияСНеУникальнымиХарактеристиками", ВыраженияСНеУникальнымиХарактеристиками);
	ПараметрыУказанияХарактеристик.Вставить("ВыраженияСОшибками", ВыраженияСОшибками);
	
	Возврат ПараметрыУказанияХарактеристик;
	
КонецФункции

Функция ПолноеИмяТаблицыДанных(ОбъектМетаданных)
	
	Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
		Результат = "Справочник." + ОбъектМетаданных.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
		Результат = "Документ." + ОбъектМетаданных.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных) Тогда
		Результат = "ПланВидовХарактеристик." + ОбъектМетаданных.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		Результат = "РегистрСведений." + ОбъектМетаданных.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоПланСчетов(ОбъектМетаданных) Тогда
		Результат = "ПланСчетов." + ОбъектМетаданных.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовРасчета(ОбъектМетаданных) Тогда
		Результат = "ПланВидовРасчета." + ОбъектМетаданных.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоПланОбмена(ОбъектМетаданных) Тогда
		Результат = "ПланОбмена." + ОбъектМетаданных.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(ОбъектМетаданных) Тогда
		Результат = "БизнесПроцесс." + ОбъектМетаданных.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоЗадача(ОбъектМетаданных) Тогда
		Результат = "Задача." + ОбъектМетаданных.Имя;
	Иначе
		// Табличная часть.
		РодительскийОбъектМД = ОбъектМетаданных.Родитель();
		Результат = ПолноеИмяТаблицыДанных(РодительскийОбъектМД)
			+ "." + ОбъектМетаданных.Имя;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеХарактеристикиВВыраженииСКД(ПредставлениеХарактеристики)
	ПредставлениеХарактеристикиВСКД = ПредставлениеХарактеристики;
	
	СпецСимволы = СпецСимволы();
	
	СодержитСпецсимволы = Ложь;
	Для НомСимвола = 1 По СтрДлина(СпецСимволы) Цикл
		Символ = Сред(СпецСимволы, НомСимвола, 1);
		Если СтрНайти(ПредставлениеХарактеристики, Символ) > 0 Тогда
			СодержитСпецсимволы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СодержитСпецсимволы Тогда
		ПредставлениеХарактеристикиВСКД = "[" + ПредставлениеХарактеристики + "]";
	КонецЕсли;
	
	Возврат ПредставлениеХарактеристикиВСКД;
КонецФункции

Процедура ДополнитьТипыДляПереопределенияХарактеристик(ТипыДляПереопределенияХарактеристик, ОписаниеТипов)
	
	Типы = ОписаниеТипов.Типы();
	Для Каждого Тип Из Типы Цикл
		Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			Если ТипыДляПереопределенияХарактеристик.Найти(Тип) = Неопределено Тогда
				ТипыДляПереопределенияХарактеристик.Добавить(Тип);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает модифицированное выражение операнда для СКД с наборами данных - запросами, в которых переопределено
// получение характеристик.
// 
// Параметры:
// 	ИсходноеВыражение - Строка - Выражение операнда. Например, "Номенклатура.{ДР.Характеристика1}.Контрагент"
// Возвращаемое значение:
// 	Строка - модифицированное выражение. Например, "Номенклатура.[[ДР.Характеристика1]]].Контрагент".
Функция МодифицированноеВыражениеОперандаДляСКД(ИсходноеВыражение) Экспорт
	
	// В связи с текущей особенностью СКД, заменяем фигурные скобки на квадратные.
	// Закрывающих скобок 3, одна - часть выражения характеристики, и две добавляет СКД для проверки закрытия выражения
	// поля в СКД (внутренний механизм)).
	МодифицированноеВыражение = СтрЗаменить(ИсходноеВыражение, "{", "[[");
	МодифицированноеВыражение = СтрЗаменить(МодифицированноеВыражение, "}", "]]]");
	
	Возврат МодифицированноеВыражение;
	
КонецФункции

Процедура ДополнитьВыражениеЗаменыПредставлениемХарактеристики(ВыражениеЗамены, ПараметрыДополнения,
				ЕстьОшибкиПреобразованияВыражения, СообщенияОшибокПреобразования)
	
	КэшТиповВыражений = ПараметрыДополнения.КэшТиповВыражений;
	КэшПредставленийХарактеристик = ПараметрыДополнения.КэшПредставленийХарактеристик;
	КешИсточниковХарактеристик = ПараметрыДополнения.КешИсточниковХарактеристик;
	СвойстваИсточниковХарактеристик = ПараметрыДополнения.СвойстваИсточниковХарактеристик;
	НакопленныйПуть = ПараметрыДополнения.НакопленныйПуть;
	ВыражениеХарактеристики = ПараметрыДополнения.ВыражениеХарактеристики;
	ИсходноеВыражение = ПараметрыДополнения.ИсходноеВыражение;
	
	ВыражениеСХарактеристикой = НакопленныйПуть + "." + ВыражениеХарактеристики;
	Выражения = КэшПредставленийХарактеристик.Получить(ВыражениеСХарактеристикой);
	
	Если Выражения = Неопределено Тогда
		ТипПоляВладельцаХарактеристики = КэшТиповВыражений.Получить(НакопленныйПуть);
		Выражения = ПолучитьПредставленияХарактеристикиДляОбъектовТипа(ТипПоляВладельцаХарактеристики,
			ВыражениеХарактеристики, СвойстваИсточниковХарактеристик, КешИсточниковХарактеристик);
		КэшПредставленийХарактеристик.Вставить(ВыражениеСХарактеристикой, Выражения);
	КонецЕсли;
	Если Выражения.Количество() = 0 Тогда
		ЕстьОшибкиПреобразованияВыражения = Истина;
		ТекстСообщения = НСтр("ru = 'Не найдено характеристики с идентификатором %1 в выражении %2';
								|en = 'Cannot find variant with ID %1 in expression %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
			ВыражениеХарактеристики, ВыражениеСХарактеристикой);
		СообщенияОшибокПреобразования.Вставить(ИсходноеВыражение, ТекстСообщения);
	ИначеЕсли Выражения.Количество() = 1 Тогда
		Для Каждого ОписаниеТиповИПредставление Из Выражения Цикл
			Представление = ОписаниеТиповИПредставление.Значение;
			ВыражениеЗамены = ВыражениеЗамены + "." + ПредставлениеХарактеристикиВВыраженииСКД(Представление);
		КонецЦикла;
	
	Иначе
		// Контактная информация предполагает возможность нескольких представлений.
		// Т.к. тип значения контактной информации - строка (представление), то после нее
		// выражений быть не может.
		НовоеВыражениеЗамены = "";
		Для Каждого ОписаниеТиповИПредставление Из Выражения Цикл
			Представление = ОписаниеТиповИПредставление.Значение;
			ОписаниеТипов = ОписаниеТиповИПредставление.Ключ;
			ПредставлениеВСКД = ПредставлениеХарактеристикиВВыраженииСКД(Представление);
			Типы = ОписаниеТипов.Типы();
			ВыражениеЗаменыТипов = "";
			Для Каждого Тип Из Типы Цикл
				ОбъектМД = ОбъектМетаданныхПоТипуЗначения(Тип);
				ВидОбъектаМД = ВидОбъектаМетаданных(ОбъектМД);
				Если ВыражениеЗаменыТипов = "" Тогда
					ВыражениеЗаменыТипов = "КОГДА" + " ";
				Иначе
					ВыражениеЗаменыТипов = ВыражениеЗаменыТипов + Символы.ПС + " " + "ИЛИ" + " ";
				КонецЕсли;
				ВыражениеЗаменыТипов = ВыражениеЗаменыТипов + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"ТИПЗНАЧЕНИЯ(%1) = ТИП(""%2"")",
					ВыражениеЗамены,
					ВидОбъектаМД + "." + ОбъектМД.Имя);
			КонецЦикла;
			ВыражениеЗаменыТипов = ВыражениеЗаменыТипов + " " + Символы.ПС + Символы.Таб
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"ТОГДА %1",
					ВыражениеЗамены + "." + ПредставлениеВСКД);
			НовоеВыражениеЗамены = НовоеВыражениеЗамены + ?(НовоеВыражениеЗамены = "", "", Символы.ПС + " ")
				+ ВыражениеЗаменыТипов;
		КонецЦикла;
		НовоеВыражениеЗамены = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ВЫБОР
			|	%1
			|КОНЕЦ",
			НовоеВыражениеЗамены);
		ВыражениеЗамены = НовоеВыражениеЗамены;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектМетаданныхПоТипуЗначения(ТипЗначения)
	ОбъектМД = Неопределено;
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
		ОбъектМД = Метаданные.НайтиПоТипу(ТипЗначения);
	КонецЕсли;
	
	Возврат ОбъектМД;
КонецФункции

Функция ВидОбъектаМетаданных(ОбъектМД, ДляУказанияТипа = Ложь)
	ВидОбъектаМД = Неопределено;
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектМД) Тогда
		ВидОбъектаМД = "Справочник";
	ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ОбъектМД) Тогда
		ВидОбъектаМД = "Документ";
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМД) Тогда
		ВидОбъектаМД = "ПланВидовХарактеристик";
	ИначеЕсли ОбщегоНазначения.ЭтоПланСчетов(ОбъектМД) Тогда
		ВидОбъектаМД = "ПланСчетов";
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовРасчета(ОбъектМД) Тогда
		ВидОбъектаМД = "ПланВидовРасчета";
	ИначеЕсли ОбщегоНазначения.ЭтоПланОбмена(ОбъектМД) Тогда
		ВидОбъектаМД = "ПланОбмена";
	ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(ОбъектМД) Тогда
		ВидОбъектаМД = "БизнесПроцесс";
	ИначеЕсли ОбщегоНазначения.ЭтоЗадача(ОбъектМД) Тогда
		ВидОбъектаМД = "Задача";
	КонецЕсли;
	// Перечисление не имеет реквизитов, поэтому для него не указывается значение.
	Если ДляУказанияТипа И НЕ ВидОбъектаМД = Неопределено Тогда
		ВидОбъектаМД = ВидОбъектаМД + "Ссылка";
	КонецЕсли;
	
	Возврат ВидОбъектаМД;
КонецФункции

// Заполняет соответствие используемых источников характеристик
// 
// Параметры:
// 	ИспользуемыеИсточникиХарактеристик - Соответствие - соответствие метаданных источника характеристик и таблицы описания свойств характеристик по метаданным.
// 		*Ключ - ОбъектМетаданных - объект метаданных источника характеристик, например Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.
// 		*Значение - ТаблицаЗначений - см. РаботаСФормулами.ТаблицаСвойствХарактеристикПоМетаданным.
// 	ОбъектМД - ОбъектМетаданныхСправочник - объект метаданных поля дерева операндов, содержащего характеристики, например, Метаданные.Справочники.Организации.
// 	ОбъектМД - ОбъектМетаданныхДокумент - объект метаданных поля дерева операндов.
// 	ОбъектМД - ОбъектМетаданныхПланОбмена - объект метаданных поля дерева операндов.
// 	ОбъектМД - ОбъектМетаданныхПланВидовХарактеристик - объект метаданных поля дерева операндов.
// 	ОбъектМД - ОбъектМетаданныхПланСчетов - объект метаданных поля дерева операндов.
// 	ОбъектМД - ОбъектМетаданныхПланВидовРасчета - объект метаданных поля дерева операндов.
// 	ОбъектМД - ОбъектМетаданныхБизнесПроцесс - объект метаданных поля дерева операндов.
// 	ОбъектМД - ОбъектМетаданныхЗадача - объект метаданных поля дерева операндов.
// 	СвойстваИсточниковХарактеристик - см. РаботаСФормуламиПовтИсп.СвойстваПоддерживаемыхИсточниковХарактеристик
// 	ОтборПоМетаданнымИсточникаХарактеристик - Неопределено, ОбъектМетаданных - Пустое значение отбора по метаданным источника характеристик.
// 				В случае указания объекта метаданных - значение отбора по метаданным источника характеристик. Например, Метаданные.Справочники.ВидыКонтактнойИнформации.
//
Процедура ЗаполнитьИспользуемыеИсточникиХарактеристик(ИспользуемыеИсточникиХарактеристик, ОбъектМД, СвойстваИсточниковХарактеристик,
				ОтборПоМетаданнымИсточникаХарактеристик = Неопределено)
	
	Для Каждого ОписаниеХарактеристик Из ОбъектМД.Характеристики Цикл
		Если ОписаниеХарактеристик.ПолеКлюча = Неопределено
				ИЛИ ОписаниеХарактеристик.ПолеОбъекта = Неопределено
				ИЛИ ОписаниеХарактеристик.ПолеВида = Неопределено
				ИЛИ ОписаниеХарактеристик.ВидыХарактеристик = Неопределено
				ИЛИ ОписаниеХарактеристик.ЗначенияХарактеристик = Неопределено Тогда
				// Ошибочное заполнение характеристик.
			Продолжить;
		КонецЕсли;
		ПолеКлюча = ОписаниеХарактеристик.ПолеКлюча.Имя;
		ИсточникиХарактеристик = ОписаниеХарактеристик.ВидыХарактеристик;
		ПолеИсточниковХарактеристик = ИсточникиХарактеристик.Реквизиты.Найти(ПолеКлюча);
		Если ПолеИсточниковХарактеристик = Неопределено Тогда
			ПолеИсточниковХарактеристик = ИсточникиХарактеристик.СтандартныеРеквизиты[ПолеКлюча];
		КонецЕсли;
		Если ПолеИсточниковХарактеристик = Неопределено Тогда
			Если СтрНайти(ВРЕГ(ОписаниеХарактеристик.ВидыХарактеристик.ПолноеИмя()), ВРЕГ(".ТабличнаяЧасть.")) > 0
				И ВРЕГ(ПолеКлюча) = "ССЫЛКА" Тогда
				ВладелецТЧ = ОписаниеХарактеристик.ВидыХарактеристик.Родитель(); // ОбъектМетаданныхСправочник - 
				ПолеИсточниковХарактеристик = ВладелецТЧ.СтандартныеРеквизиты[ПолеКлюча];
			КонецЕсли;
		КонецЕсли;
		ТипыИсточниковХарактеристик = ПолеИсточниковХарактеристик.Тип.Типы();
		Для Каждого ТипИсточникаХарактеристик Из ТипыИсточниковХарактеристик Цикл
			МДИсточникаХарактеристик = Метаданные.НайтиПоТипу(ТипИсточникаХарактеристик);
			
			СвойстваИсточника = СвойстваИсточниковХарактеристик.Найти(МДИсточникаХарактеристик, "МетаданныеИсточника");
			Если СвойстваИсточника = Неопределено Тогда
				// Не доступный источник характеристик.
				Продолжить;
			КонецЕсли;
			Если НЕ ОтборПоМетаданнымИсточникаХарактеристик = Неопределено
				И МДИсточникаХарактеристик <> ОтборПоМетаданнымИсточникаХарактеристик Тогда
				Продолжить;
			КонецЕсли;
			
			ОписанияХарактеристик = ИспользуемыеИсточникиХарактеристик.Получить(МДИсточникаХарактеристик);
			Если ОписанияХарактеристик = Неопределено Тогда
				ОписанияХарактеристик = ТаблицаСвойствХарактеристикПоМетаданным();
			КонецЕсли;
			СтрокаОписанияХарактеристик = ОписанияХарактеристик.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОписанияХарактеристик, ОписаниеХарактеристик);
			ИспользуемыеИсточникиХарактеристик.Вставить(МДИсточникаХарактеристик, ОписанияХарактеристик);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаСвойствХарактеристикПоМетаданным()
	ТаблицаСвойствХарактеристик = Новый ТаблицаЗначений();
	// Колонки описания видов характеристик.
	ТаблицаСвойствХарактеристик.Колонки.Добавить("ВидыХарактеристик");
	ТаблицаСвойствХарактеристик.Колонки.Добавить("ПолеКлюча");
	ТаблицаСвойствХарактеристик.Колонки.Добавить("ПолеОтбораВидов");
	ТаблицаСвойствХарактеристик.Колонки.Добавить("ЗначениеОтбораВидов");
	
	// Колонки описания значений характеристик.
	ТаблицаСвойствХарактеристик.Колонки.Добавить("ЗначенияХарактеристик");
	ТаблицаСвойствХарактеристик.Колонки.Добавить("ПолеОбъекта");
	ТаблицаСвойствХарактеристик.Колонки.Добавить("ПолеВида");
	ТаблицаСвойствХарактеристик.Колонки.Добавить("ПолеЗначения");
	
	Возврат ТаблицаСвойствХарактеристик;
КонецФункции

// Возвращает текст подзапроса источников значений характеристик.
// 
// Параметры:
// 	ОписаниеХарактеристикВМетаданных - СтрокаТаблицыЗначений - Строка таблицы описаний характеристик по метаданным. Конструктор таблицы см. ТаблицаСвойствХарактеристикПоМетаданным.
// 	 **ВидыХарактеристик - ОбъектМетаданныхСправочник - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхДокумент - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхПланОбмена - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхПланВидовХарактеристик - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхПланВидовРасчета - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхБизнесПроцесс - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхЗадача - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхТабличнаяЧасть - (виды характеристик) объект источника видов характеристик.
// 	 **ПолеКлюча - ОбъектМетаданных - (виды характеристик) поле ключа источника характеристик.
// 	 **ПолеОтбораВидов - ОбъектМетаданныхПоле - (виды характеристик) поле отбора источника характеристик.
// 	 **ПолеОтбораВидов - Неопределено - значение по умолчанию, если отбор в метаданных не задан.
// 	 **ЗначениеОтбораВидов - Неопределено, ЛюбаяСсылка, Булево, Число, Строка, Дата - значение отбора.
// 	 **ЗначенияХарактеристик - ОбъектМетаданных - (значения характеристик) объект источника значений характеристик.
// 	 **ПолеОбъекта - ОбъектМетаданных - (значения характеристик) поле объекта, которому принадлежат характеристики.
// 	 **ПолеВида - ОбъектМетаданных - (значения характеристик) поле, в котором содержится вид характеристики.
// 	 **ПолеЗначения - ОбъектМетаданных - (значения характеристик) поле, в котором содержится значение характеристики.
//
// Возвращаемое значение:
// 	Строка - Текст подзапроса источников значений характеристик.
//
Функция ТекстПодзапросаИсточниковЗначенийХарактеристик(ОписаниеХарактеристик)
	ТекстПодзапроса =
	"ВЫБРАТЬ
	|	&ВыражениеПоляОбъекта КАК Ссылка,
	|	&ВыражениеПоляВида КАК Свойство,
	|	&ВыражениеПоляЗначения КАК Значение
	|ИЗ
	|	&ИсточникЗначенийХарактеристик КАК ТаблицаЗначенийХарактеристик";
	
	ПолеОбъекта = ОписаниеХарактеристик.ПолеОбъекта; // ОбъектМетаданныхПоле - 
	ПолеВида = ОписаниеХарактеристик.ПолеВида; // ОбъектМетаданныхПоле -
	ПолеЗначения = ОписаниеХарактеристик.ПолеЗначения; // ОбъектМетаданныхПоле -
	
	ИсточникЗначенийХарактеристик = ПолноеИмяТаблицыДанных(
		ОписаниеХарактеристик.ЗначенияХарактеристик.ПолноеИмя());
	ВыражениеПоляОбъекта = "ТаблицаЗначенийХарактеристик." + ПолеОбъекта.Имя;
	ВыражениеПоляВида = "ТаблицаЗначенийХарактеристик." + ПолеВида.Имя;
	Если ОписаниеХарактеристик.ПолеЗначения = Неопределено Тогда
		ВыражениеПоляЗначения = "НЕОПРЕДЕЛЕНО";
	Иначе
		ВыражениеПоляЗначения = "ТаблицаЗначенийХарактеристик." + ПолеЗначения.Имя;
	КонецЕсли;
	
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ИсточникЗначенийХарактеристик", ИсточникЗначенийХарактеристик);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляОбъекта", ВыражениеПоляОбъекта);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляВида", ВыражениеПоляВида);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляЗначения", ВыражениеПоляЗначения);
	
	Возврат ТекстПодзапроса;
	
КонецФункции

// Возвращает выражение получения идентификатора характеристики. Следует обратить внимание, что выражение
// в обычном запросе и в наборе-запросе СКД отличаются.
// 
// Параметры:
// 	МетаданныеВидаХарактеристик - ОбъектМетаданных - Объект метаданных характеристик. См. СвойстваПоддерживаемыхИсточниковХарактеристик.
// 	ДляСКД - Булево - Флаг получения выражения для текста запроса в СКД.
// Возвращаемое значение:
// 	Строка - Выражение поля идентификатора, включающего скобки и обращение к указанному в СвойстваПоддерживаемыхИсточниковХарактеристик полю.
//
Функция ВыражениеПолногоИдентификатораХарактеристики(МетаданныеВидаХарактеристик, ДляСКД = Ложь)
	
	СвойстваХарактеристик = СвойстваПоддерживаемыхИсточниковХарактеристик();
	СвойстваХарактеристики = СвойстваХарактеристик.Найти(МетаданныеВидаХарактеристик, "МетаданныеИсточника");
	Если НЕ СвойстваХарактеристики = Неопределено Тогда
		Если ДляСКД Тогда
			// В расширении языков запросов сейчас нельзя указать более 1 таблицы видов характеристик с ограничением
			// фигурными скобками.
			Шаблон = """[%1"" + %ИмяТаблицы%.%2 + ""]""";
		Иначе
			Шаблон = """{%1"" + %ИмяТаблицы%.%2 + ""}""";
		КонецЕсли;
		ВыражениеПоля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			СвойстваХарактеристики.ПрефиксТипаВидаХарактеристик,
			СвойстваХарактеристики.ПолеИдентификатора);
	Иначе
		ВыражениеПоля = "";
	КонецЕсли;
	
	Возврат ВыражениеПоля;
КонецФункции

// Возвращает текст условия по описанию характеристик, заданному в метаданных.
// 
// Параметры:
// 	ОписаниеХарактеристикВМетаданных - СтрокаТаблицыЗначений - Строка таблицы описаний характеристик по метаданным. Конструктор таблицы см. ТаблицаСвойствХарактеристикПоМетаданным.
// 	 **ВидыХарактеристик - ОбъектМетаданныхСправочник - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхДокумент - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхПланОбмена - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхПланВидовХарактеристик - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхПланВидовРасчета - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхБизнесПроцесс - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхЗадача - (виды характеристик) объект источника видов характеристик.
// 	 **ВидыХарактеристик - ОбъектМетаданныхТабличнаяЧасть - (виды характеристик) объект источника видов характеристик.
// 	 **ПолеКлюча - ОбъектМетаданных - (виды характеристик) поле ключа источника характеристик.
// 	 **ПолеОтбораВидов - ОбъектМетаданныхПоле - (виды характеристик) поле отбора источника характеристик.
// 	 **ПолеОтбораВидов - Неопределено - значение по умолчанию, если отбор в метаданных не задан.
// 	 **ЗначениеОтбораВидов - Неопределено, ЛюбаяСсылка, Булево, Число, Строка, Дата - значение отбора.
// 	 **ЗначенияХарактеристик - ОбъектМетаданных - (значения характеристик) объект источника значений характеристик.
// 	 **ПолеОбъекта - ОбъектМетаданных - (значения характеристик) поле объекта, которому принадлежат характеристики.
// 	 **ПолеВида - ОбъектМетаданных - (значения характеристик) поле, в котором содержится вид характеристики.
// 	 **ПолеЗначения - ОбъектМетаданных - (значения характеристик) поле, в котором содержится значение характеристики.
//
// 	МДВидовХарактеристик - ОбъектМетаданныхСправочник - Метаданные видов характеристик. Например, ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.
// 	МДВидовХарактеристик - ОбъектМетаданныхДокумент - Метаданные видов характеристик.
// 	МДВидовХарактеристик - ОбъектМетаданныхПланОбмена - Метаданные видов характеристик.
// 	МДВидовХарактеристик - ОбъектМетаданныхПланВидовХарактеристик - Метаданные видов характеристик.
// 	МДВидовХарактеристик - ОбъектМетаданныхПланСчетов - Метаданные видов характеристик.
// 	МДВидовХарактеристик - ОбъектМетаданныхПланВидовРасчета - Метаданные видов характеристик.
// 	МДВидовХарактеристик - ОбъектМетаданныхБизнесПроцесс - Метаданные видов характеристик.
// 	МДВидовХарактеристик - ОбъектМетаданныхЗадача - Метаданные видов характеристик.
// 	ИмяТаблицыИсточник - Строка - Имя таблицы, для которой указывается условие, в случае, если таблица источника характеристик, как это задано в метаданных,
// 					(например, Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты)
// 					НЕ совпадает с таблицей самого вида характеристик (например, Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения).
// 	ИмяТаблицыВидовХарактеристик - Строка - Имя таблицы, для которой указывается условие, в случае, если таблица источника характеристик, как это задано в метаданных,
// 					(например, Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты)
// 					совпадает с таблицей самого вида характеристик (например, Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения).
//
// Возвращаемое значение:
// 	Строка - Текст условия по описанию характеристик, заданному в метаданных.
//
Функция УсловиеОтбораХарактеристикПоДаннымМетаданных(ОписаниеХарактеристикВМетаданных, МДВидовХарактеристик, ИмяТаблицыИсточник, ИмяТаблицыВидовХарактеристик)
	УсловияОтбораВидовХарактеристик = "";
	
	Если ОписаниеХарактеристикВМетаданных.ПолеОтбораВидов <> Неопределено Тогда
		
		ПолеОтбораВидов = ОписаниеХарактеристикВМетаданных.ПолеОтбораВидов; // ОбъектМетаданныхПоле - 
		ВыражениеВидаСравнения = "";
		ВыражениеЗначения = "";
		
		ЗначениеОтбораВидов = ОписаниеХарактеристикВМетаданных.ЗначениеОтбораВидов;
		ТипЗначенияОтбораВидов = ТипЗнч(ЗначениеОтбораВидов);
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗначенияОтбораВидов) Тогда
			ВидМетаданных = ЗначениеОтбораВидов.Метаданные();
			ВыражениеВидаСравнения = "=";
			ВыражениеЗначения = "ЗНАЧЕНИЕ(%1)";
			ВыражениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ВыражениеЗначения,
				ПолноеИмяТаблицыДанных(ВидМетаданных.ПолноеИмя())
					+ "." + ЗначениеОтбораВидов.ИмяПредопределенныхДанных);
		Иначе
			ВыражениеВидаСравнения = "=";
			Если ТипЗначенияОтбораВидов = Тип("Строка") Тогда
				ВыражениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"""%1""",
					ЗначениеОтбораВидов);
			ИначеЕсли ТипЗначенияОтбораВидов = Тип("Булево") Тогда
				ВыражениеЗначения = ?(ЗначениеОтбораВидов, "ИСТИНА", "ЛОЖЬ");
			ИначеЕсли ТипЗначенияОтбораВидов = Тип("Дата") Тогда
				ВыражениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"ДАТАВРЕМЯ(%1,%2,%3,%4,%5,%6)",
					Год(ЗначениеОтбораВидов),
					Месяц(ЗначениеОтбораВидов),
					День(ЗначениеОтбораВидов),
					Час(ЗначениеОтбораВидов),
					Минута(ЗначениеОтбораВидов),
					Секунда(ЗначениеОтбораВидов));
			Иначе
				ВыражениеЗначения = "НЕОПРЕДЕЛЕНО";
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеХарактеристикВМетаданных.ВидыХарактеристик = МДВидовХарактеристик Тогда
			УсловияОтбораВидовХарактеристик = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"&ТаблицаВидовХарактеристик.%1 %2 %3",
				ПолеОтбораВидов.Имя,
				ВыражениеВидаСравнения,
				ВыражениеЗначения);
			УсловияОтбораВидовХарактеристик = СтрЗаменить(УсловияОтбораВидовХарактеристик, "&ТаблицаВидовХарактеристик", ИмяТаблицыВидовХарактеристик);
		Иначе
			УсловияОтбораВидовХарактеристик = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"&ТаблицаИсточник.%1 %2 %3",
				ПолеОтбораВидов.Имя,
				ВыражениеВидаСравнения,
				ВыражениеЗначения);
			УсловияОтбораВидовХарактеристик = СтрЗаменить(УсловияОтбораВидовХарактеристик, "&ТаблицаИсточник", ИмяТаблицыИсточник);
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат УсловияОтбораВидовХарактеристик;
	
КонецФункции

Функция ПолучитьПредставленияХарактеристикиДляОбъектовТипа(ОписаниеТипов, ВыражениеХарактеристики, 
		СвойстваИсточниковХарактеристик, КешИсточниковХарактеристик)
	
	ПредставленияХарактеристики = Новый Соответствие();
	
	Запрос = ЗапросСвойствХарактеристикПоОбъектамМетаданных(ОписаниеТипов,
		СвойстваИсточниковХарактеристик, КешИсточниковХарактеристик, ВыражениеХарактеристики);
	
	ТипыВладельцевХарактеристикПоПредставлениям = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Представление = Выборка.ПредставлениеХарактеристики;
		МассивТипов = ТипыВладельцевХарактеристикПоПредставлениям.Получить(Представление);
		Если МассивТипов = Неопределено Тогда
			МассивТипов = Новый Массив;
		КонецЕсли;
		Тип = Тип(Выборка.ОписаниеТипаВладельцаХарактеристики);
		МассивТипов.Добавить(Тип);
		ТипыВладельцевХарактеристикПоПредставлениям.Вставить(Представление, МассивТипов);
	КонецЦикла;
	Для Каждого КлючИЗначение Из ТипыВладельцевХарактеристикПоПредставлениям Цикл
		ОписаниеТипов = Новый ОписаниеТипов(КлючИЗначение.Значение);
		Представление = КлючИЗначение.Ключ;
		ПредставленияХарактеристики.Вставить(ОписаниеТипов, Представление);
	КонецЦикла;
	
	Возврат ПредставленияХарактеристики;
	
КонецФункции

Функция ЗапросСвойствХарактеристикПоОбъектамМетаданных(ОписаниеТипов, СвойстваИсточниковХарактеристик, КешИсточниковХарактеристик,
			ВыражениеХарактеристики = "", ОтборПоНаборамДополнительныхРеквизитов = Неопределено, ИспользоватьНаименованиеВместоПредставления = Ложь)
	
	Запрос = Новый Запрос;
	
	ШаблоныСоединенийТаблиц = Новый ТаблицаЗначений;
	ШаблоныСоединенийТаблиц.Колонки.Добавить("НомерШаблона");
	ШаблоныСоединенийТаблиц.Колонки.Добавить("ОписаниеИсточникаХарактеристик");
	
	ШаблоныСоединенийТаблиц.Колонки.Добавить("ВидыХарактеристик");
	ШаблоныСоединенийТаблиц.Колонки.Добавить("ПолеКлюча");
	ШаблоныСоединенийТаблиц.Колонки.Добавить("ПолеОтбораВидов");
	
	КвЧ = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой);
	КвС = Новый КвалификаторыСтроки(1000, ДопустимаяДлина.Переменная);
	КвД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	ОписаниеСсылочныхЗначений = ОбщегоНазначения.ОписаниеТипаВсеСсылки();
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",,,, КвС, КвД);
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число",,, КвЧ);
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаДата = Новый ОписаниеТипов("Булево",,,,, КвД);
	ФлагиИндексов = Новый Структура;
	ФлагиИндексов.Вставить("ЕстьСтроки", Ложь);
	ФлагиИндексов.Вставить("ЕстьЧисла", Ложь);
	ФлагиИндексов.Вставить("ЕстьБулево", Ложь);
	ФлагиИндексов.Вставить("ЕстьДаты", Ложь);
	ФлагиИндексов.Вставить("ЕстьСсылки", Ложь);
	
	
	ХарактеристикиОбъектовМетаданныхПоШаблонам = Новый ТаблицаЗначений;
	ХарактеристикиОбъектовМетаданныхПоШаблонам.Колонки.Добавить("ОписаниеТипаВладельцаХарактеристики",
		ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ХарактеристикиОбъектовМетаданныхПоШаблонам.Колонки.Добавить("НомерШаблона",
		ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	ХарактеристикиОбъектовМетаданныхПоШаблонам.Колонки.Добавить("ЗначениеОтбораВидовСсылки", ОписаниеСсылочныхЗначений);
	ХарактеристикиОбъектовМетаданныхПоШаблонам.Колонки.Добавить("ЗначениеОтбораВидовСтрока", ОписаниеТипаСтрока);
	ХарактеристикиОбъектовМетаданныхПоШаблонам.Колонки.Добавить("ЗначениеОтбораВидовЧисло", ОписаниеТипаЧисло);
	ХарактеристикиОбъектовМетаданныхПоШаблонам.Колонки.Добавить("ЗначениеОтбораВидовБулево", ОписаниеТипаБулево);
	ХарактеристикиОбъектовМетаданныхПоШаблонам.Колонки.Добавить("ЗначениеОтбораВидовДата", ОписаниеТипаДата);
	
	ВыражениеУсловияПоИдентификатору = "";
	Если НЕ ПустаяСтрока(ВыражениеХарактеристики) Тогда
		Для Каждого ОписаниеИсточникаХарактеристик Из СвойстваИсточниковХарактеристик Цикл
			ИскомаяСтрока = "{" + ОписаниеИсточникаХарактеристик.ПрефиксТипаВидаХарактеристик;
			Если НЕ СтрНачинаетсяС(ВыражениеХарактеристики, ИскомаяСтрока) Тогда
				Продолжить;
			КонецЕсли;
		
			ИдентификаторХарактеристики = Сред(ВыражениеХарактеристики, СтрДлина(ИскомаяСтрока) + 1);
			ИдентификаторХарактеристики = Сред(ИдентификаторХарактеристики, 1, СтрДлина(ИдентификаторХарактеристики) -1);
			ВыражениеУсловияПоИдентификатору = "ТаблицаВидовХарактеристик.%1 = ""%2""";
			ВыражениеУсловияПоИдентификатору = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ВыражениеУсловияПоИдентификатору,
				ОписаниеИсточникаХарактеристик.ПолеИдентификатора,
				ИдентификаторХарактеристики);
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Типы = ОписаниеТипов.Типы();
	Для Каждого Тип Из Типы Цикл
		ОбъектМД = ОбъектМетаданныхПоТипуЗначения(Тип);
		Если ОбъектМД = Неопределено Тогда
			Продолжить
		КонецЕсли;
		ВидОбъектаМД = ВидОбъектаМетаданных(ОбъектМД, Истина);
		Если ВидОбъектаМД = Неопределено Тогда
			// Перечисление не имеет реквизитов
			Продолжить;
		КонецЕсли;
		
		ВыражениеТипаИсточника = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1.%2",
			ВидОбъектаМД,
			ОбъектМД.Имя);
		
		ИсточникиХарактеристик = КешИсточниковХарактеристик.Получить(Тип);
		Если ИсточникиХарактеристик = Неопределено Тогда
			ИсточникиХарактеристик = Новый Соответствие;
			ЗаполнитьИспользуемыеИсточникиХарактеристик(ИсточникиХарактеристик,
				ОбъектМД, СвойстваИсточниковХарактеристик);
			КешИсточниковХарактеристик.Вставить(Тип, ИсточникиХарактеристик);
		КонецЕсли;
		
		Если ИсточникиХарактеристик.Количество() > 0 Тогда
			Для Каждого ОписаниеИсточникаХарактеристик Из СвойстваИсточниковХарактеристик Цикл
				Если ТипЗнч(ОтборПоНаборамДополнительныхРеквизитов) = Тип("Массив")
					И ОписаниеИсточникаХарактеристик.МетаданныеИсточника <> Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения Тогда
					Продолжить;
				КонецЕсли;
				
				ВключатьИсточникХарактеристикВЗапрос = Ложь;
				Если ПустаяСтрока(ВыражениеХарактеристики) Тогда
					ИсточникиТекущейХарактеристики = ИсточникиХарактеристик.Получить(ОписаниеИсточникаХарактеристик.МетаданныеИсточника);
					ВключатьИсточникХарактеристикВЗапрос = (ИсточникиТекущейХарактеристики <> Неопределено);
				Иначе
					ИскомаяСтрока = "{" + ОписаниеИсточникаХарактеристик.ПрефиксТипаВидаХарактеристик;
					Если СтрНачинаетсяС(ВыражениеХарактеристики, ИскомаяСтрока) Тогда
						ВключатьИсточникХарактеристикВЗапрос = Истина;
					КонецЕсли;
				КонецЕсли;
				Если ВключатьИсточникХарактеристикВЗапрос Тогда
					ИсточникиТекущейХарактеристики = ИсточникиХарактеристик.Получить(ОписаниеИсточникаХарактеристик.МетаданныеИсточника);
					
					Для Каждого ОписаниеХарактеристикиВМетаданных Из ИсточникиТекущейХарактеристики Цикл
						
						ПоискПоШаблону = Новый Структура;
						ПоискПоШаблону.Вставить("ВидыХарактеристик", ОписаниеХарактеристикиВМетаданных.ВидыХарактеристик);
						ПоискПоШаблону.Вставить("ПолеКлюча", ОписаниеХарактеристикиВМетаданных.ПолеКлюча);
						ПоискПоШаблону.Вставить("ПолеОтбораВидов", ОписаниеХарактеристикиВМетаданных.ПолеОтбораВидов);
						СтрокиШаблона = ШаблоныСоединенийТаблиц.НайтиСтроки(ПоискПоШаблону);
						Если СтрокиШаблона.Количество() = 0 Тогда
							СтрокаШаблона = ШаблоныСоединенийТаблиц.Добавить();
							НомерШаблона = ШаблоныСоединенийТаблиц.Количество();
							ЗаполнитьЗначенияСвойств(СтрокаШаблона, ОписаниеХарактеристикиВМетаданных);
							СтрокаШаблона.НомерШаблона = НомерШаблона;
							СтрокаШаблона.ОписаниеИсточникаХарактеристик = ОписаниеИсточникаХарактеристик;
							
						Иначе
							СтрокаШаблона = СтрокиШаблона[0];
							НомерШаблона = СтрокаШаблона.НомерШаблона;
						КонецЕсли;
						
						СтрокаОтбораПоТипуХарактеристик = ХарактеристикиОбъектовМетаданныхПоШаблонам.Добавить();
						СтрокаОтбораПоТипуХарактеристик.НомерШаблона = НомерШаблона;
						СтрокаОтбораПоТипуХарактеристик.ОписаниеТипаВладельцаХарактеристики = ВыражениеТипаИсточника;
						ТипОтбора = ТипЗнч(ОписаниеХарактеристикиВМетаданных.ЗначениеОтбораВидов);
						Если ТипОтбора = Тип("Строка") Тогда
							СтрокаОтбораПоТипуХарактеристик.ЗначениеОтбораВидовСтрока = ОписаниеХарактеристикиВМетаданных.ЗначениеОтбораВидов;
							ФлагиИндексов.ЕстьСтроки = Истина;
						ИначеЕсли ТипОтбора = Тип("Число") Тогда
							СтрокаОтбораПоТипуХарактеристик.ЗначениеОтбораВидовЧисло = ОписаниеХарактеристикиВМетаданных.ЗначениеОтбораВидов;
							ФлагиИндексов.ЕстьЧисла = Истина;
						ИначеЕсли ТипОтбора = Тип("Булево") Тогда
							СтрокаОтбораПоТипуХарактеристик.ЗначениеОтбораВидовБулево = ОписаниеХарактеристикиВМетаданных.ЗначениеОтбораВидов;
							ФлагиИндексов.ЕстьБулево = Истина;
						ИначеЕсли ТипОтбора = Тип("Дата") Тогда
							СтрокаОтбораПоТипуХарактеристик.ЗначениеОтбораВидовДата = ОписаниеХарактеристикиВМетаданных.ЗначениеОтбораВидов;
							ФлагиИндексов.ЕстьДаты = Истина;
						Иначе
							СтрокаОтбораПоТипуХарактеристик.ЗначениеОтбораВидовСсылки = ОписаниеХарактеристикиВМетаданных.ЗначениеОтбораВидов;
							ФлагиИндексов.ЕстьСсылки = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ХарактеристикиОбъектовМетаданныхПоШаблонам.Количество() > 0 Тогда
		
		ТекстРазделителя = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		ТекстыЗапроса = Новый Массив;
		ТекстЗапроса = 
		"ВЫБРАТЬ
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.НомерШаблона КАК НомерШаблона,
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовСсылки КАК ЗначениеОтбораВидовСсылки,
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовСтрока КАК ЗначениеОтбораВидовСтрока,
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовЧисло КАК ЗначениеОтбораВидовЧисло,
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовБулево КАК ЗначениеОтбораВидовБулево,
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовДата КАК ЗначениеОтбораВидовДата,
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ОписаниеТипаВладельцаХарактеристики КАК ОписаниеТипаВладельцаХарактеристики
			|ПОМЕСТИТЬ ХарактеристикиОбъектовМетаданныхПоШаблонам
			|ИЗ
			|	&ХарактеристикиОбъектовМетаданныхПоШаблонам КАК ХарактеристикиОбъектовМетаданныхПоШаблонам
			|ИНДЕКСИРОВАТЬ ПО
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.НомерШаблона";
		Если ФлагиИндексов.ЕстьСсылки Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовСсылки";
		КонецЕсли;
		Если ФлагиИндексов.ЕстьСтроки Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовСтрока";
		КонецЕсли;
		Если ФлагиИндексов.ЕстьЧисла Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовЧисло";
		КонецЕсли;
		Если ФлагиИндексов.ЕстьБулево Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовБулево";
		КонецЕсли;
		Если ФлагиИндексов.ЕстьДаты Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовДата";
		КонецЕсли;
		
		Для Каждого ОписаниеШаблонаВыборки Из ШаблоныСоединенийТаблиц Цикл
			Текст = ТекстВыборкиСвойствХарактеристикПоШаблону(ОписаниеШаблонаВыборки,
				ФлагиИндексов,
				ВыражениеУсловияПоИдентификатору,
				ОтборПоНаборамДополнительныхРеквизитов,
				ИспользоватьНаименованиеВместоПредставления);
			ТекстыЗапроса.Добавить(Текст);
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|" + СтрСоединить(ТекстыЗапроса, ТекстРазделителя);
		
		Запрос.УстановитьПараметр("ХарактеристикиОбъектовМетаданныхПоШаблонам", ХарактеристикиОбъектовМетаданныхПоШаблонам);
		Запрос.УстановитьПараметр("НаборыДополнительныхРеквизитов", ОтборПоНаборамДополнительныхРеквизитов);
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	"""" КАК ОписаниеТипаВладельцаХарактеристики,
		|	НЕОПРЕДЕЛЕНО КАК Ссылка,
		|	"""" КАК ПолныйИдентификатор,
		|	"""" КАК ИдентификаторДляФормул,
		|	"""" КАК ПрефиксТипаВидаХарактеристик,
		|	"""" КАК ПредставлениеХарактеристики,
		|	НЕОПРЕДЕЛЕНО КАК ТипЗначения
		|ГДЕ
		|	ЛОЖЬ";
		
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Функция ТекстВыборкиСвойствХарактеристикПоШаблону(ОписаниеШаблонаВыборки, ФлагиИндексов, ВыражениеУсловияПоИдентификатору,
				НаборыДополнительныхРеквизитов, ИспользоватьНаименованиеВместоПредставления)
	
	ОписаниеИсточникаХарактеристик = ОписаниеШаблонаВыборки.ОписаниеИсточникаХарактеристик;
	МДИсточникаХарактеристик = ОписаниеИсточникаХарактеристик.МетаданныеИсточника;
	ТаблицаВидовХарактеристик = ПолноеИмяТаблицыДанных(МДИсточникаХарактеристик.ПолноеИмя());
	
	ПолеКлюча = ОписаниеШаблонаВыборки.ПолеКлюча; // ОбъектМетаданныхПоле - 
	
	Если ОписаниеШаблонаВыборки.ВидыХарактеристик = МДИсточникаХарактеристик Тогда
		
		ТекстПодзапроса =
		"ВЫБРАТЬ
		|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ОписаниеТипаВладельцаХарактеристики КАК ОписаниеТипаВладельцаХарактеристики,
		|	&ВыражениеПоляСсылка КАК Ссылка,
		|	&ВыражениеПоляПолныйИдентификатор КАК ПолныйИдентификатор,
		|	&ВыражениеПоляИдентификаторДляФормул КАК ИдентификаторДляФормул,
		|	&ВыражениеПоляПрефиксТипаВидаХарактеристик КАК ПрефиксТипаВидаХарактеристик,
		|	&ВыражениеПредставления КАК ПредставлениеХарактеристики,
		|	&ВыражениеТипаЗначения КАК ТипЗначения
		|ИЗ
		|	&ХарактеристикиОбъектовМетаданныхПоШаблонам КАК ХарактеристикиОбъектовМетаданныхПоШаблонам
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	#ИсточникВидовХарактеристик КАК ТаблицаВидовХарактеристик
		|ПО
		|	ХарактеристикиОбъектовМетаданныхПоШаблонам.НомерШаблона = &НомерШаблона
		|	И &УсловияОтбораВидовХарактеристик
		|	И &УсловияПоХарактеристикам";
		
	Иначе
		
		ТекстПодзапроса =
		"ВЫБРАТЬ
		|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ОписаниеТипаВладельцаХарактеристики КАК ОписаниеТипаВладельцаХарактеристики,
		|	&ВыражениеПоляСсылка КАК Ссылка,
		|	&ВыражениеПоляПолныйИдентификатор КАК ПолныйИдентификатор,
		|	&ВыражениеПоляИдентификаторДляФормул КАК ИдентификаторДляФормул,
		|	&ВыражениеПоляПрефиксТипаВидаХарактеристик КАК ПрефиксТипаВидаХарактеристик,
		|	&ВыражениеПредставления КАК ПредставлениеХарактеристики,
		|	&ВыражениеТипаЗначения КАК ТипЗначения
		|ИЗ
		|	&ХарактеристикиОбъектовМетаданныхПоШаблонам КАК ХарактеристикиОбъектовМетаданныхПоШаблонам
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	#ИсточникВидовХарактеристик КАК ТаблицаИсточник
		|ПО
		|	ХарактеристикиОбъектовМетаданныхПоШаблонам.НомерШаблона = &НомерШаблона
		|	И &УсловияОтбораВидовХарактеристик
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	#ТаблицаВидовХарактеристик КАК ТаблицаВидовХарактеристик
		|ПО
		|	&УсловиеСоединения
		|	И &УсловияПоХарактеристикам";
		
		УсловиеСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ТаблицаИсточник.%1 = ТаблицаВидовХарактеристик.Ссылка",
			ПолеКлюча.Имя);
		
		Если НЕ ПустаяСтрока(ВыражениеУсловияПоИдентификатору) Тогда
			УсловиеСоединения = УсловиеСоединения + "
			|	И " + ВыражениеУсловияПоИдентификатору;
		КонецЕсли;
		
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "#ТаблицаВидовХарактеристик", ТаблицаВидовХарактеристик);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&УсловиеСоединения", УсловиеСоединения);
		
	КонецЕсли;
	
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&УсловияПоХарактеристикам", "ТаблицаВидовХарактеристик.%1 <> """"");
	
	ТекстПодзапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПодзапроса,
		ОписаниеИсточникаХарактеристик.ПолеИдентификатора);
	
	ИсточникВидовХарактеристик = ПолноеИмяТаблицыДанных(
		ОписаниеШаблонаВыборки.ВидыХарактеристик.ПолноеИмя());
	
	Если ОписаниеШаблонаВыборки.ВидыХарактеристик = МДИсточникаХарактеристик Тогда
		ВыражениеПоляСсылка = "ТаблицаВидовХарактеристик."
			+ ПолеКлюча.Имя;
	Иначе
		ВыражениеПоляСсылка = "ТаблицаИсточник."
			+ ПолеКлюча.Имя;
	КонецЕсли;
	
	ВыражениеПоляПолныйИдентификатор = ВыражениеПолногоИдентификатораХарактеристики(МДИсточникаХарактеристик, Ложь);
	ВыражениеПоляПолныйИдентификатор = СтрЗаменить(ВыражениеПоляПолныйИдентификатор, "%ИмяТаблицы%", "ТаблицаВидовХарактеристик");
	ВыражениеПоляИдентификаторДляФормул = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ТаблицаВидовХарактеристик.%1",
		ОписаниеИсточникаХарактеристик.ПолеИдентификатора);
	ВыражениеПоляПрефиксТипаВидаХарактеристик = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"""%1""",
		ОписаниеИсточникаХарактеристик.ПрефиксТипаВидаХарактеристик);
	Если НЕ ИспользоватьНаименованиеВместоПредставления Тогда
		ВыражениеПредставления = "ПРЕДСТАВЛЕНИЕ(ТаблицаВидовХарактеристик.Ссылка)";
	Иначе
		ВыражениеПредставления = "ТаблицаВидовХарактеристик.Наименование";
	КонецЕсли;
	
	Если ОписаниеИсточникаХарактеристик.ИспользуетсяВыражениеТипаЗначений Тогда
		ВыражениеТипаЗначения = ОписаниеИсточникаХарактеристик.ВыражениеТипаЗначений;
	Иначе
		ВыражениеТипаЗначения = "ТаблицаВидовХарактеристик."
			+ ОписаниеИсточникаХарактеристик.ПолеТипаЗначений;
	КонецЕсли;
	
	УсловияОтбораВидовХарактеристик = "";
	Если ОписаниеШаблонаВыборки.ПолеОтбораВидов = Неопределено Тогда
		
		УсловияОтбораВидовХарактеристик = "ИСТИНА";
		
	Иначе
		
		ПолеОтбораВидов = ОписаниеШаблонаВыборки.ПолеОтбораВидов; // ОбъектМетаданныхПоле -
		ТипыПоляОтбора = Неопределено;
		ПолеОтбораСсылочногоТипа = Ложь;
		ПолеОтбораСтрока = Ложь;
		ПолеОтбораЧисло = Ложь;
		ПолеОтбораБулево = Ложь;
		ПолеОтбораДата = Ложь;
		
		ПолноеИмяВидаХарактеристики = ОписаниеШаблонаВыборки.ВидыХарактеристик.ПолноеИмя();
		Если СтрНайти(ВРЕГ(ПолноеИмяВидаХарактеристики), ВРЕГ(".ТабличнаяЧасть."))> 0
			И ВРЕГ(ПолеОтбораВидов.Имя) = "ССЫЛКА" Тогда
			РодительскийОбъектМД = ОписаниеШаблонаВыборки.ВидыХарактеристик.Родитель(); // ОбъектМетаданных -
			ОписаниеТиповПоляОтбора = Новый ОписаниеТипов(ВидОбъектаМетаданных(РодительскийОбъектМД, Истина)
				+ "." + РодительскийОбъектМД.Имя);
			ТипыПоляОтбора = ОписаниеТиповПоляОтбора.Типы();
		Иначе
			Реквизит = ОписаниеШаблонаВыборки.ВидыХарактеристик.Реквизиты.Найти(ПолеОтбораВидов.Имя);
			Если Реквизит = Неопределено Тогда
				КоличествоРеквизитов = ОписаниеШаблонаВыборки.ВидыХарактеристик.СтандартныеРеквизиты.Количество();
				Для НомерРеквизита = 1 По КоличествоРеквизитов Цикл
					ОписаниеРеквизита = ОписаниеШаблонаВыборки.ВидыХарактеристик.СтандартныеРеквизиты[НомерРеквизита - 1]; // ОбъектМетаданныхПоле -
					Если ОписаниеРеквизита.Имя = ПолеОтбораВидов.Имя Тогда
						ТипыПоляОтбора = ОписаниеРеквизита.Тип.Типы();
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ТипыПоляОтбора = Реквизит.Тип.Типы();
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ТипыПоляОтбора = Неопределено Тогда
			Если ТипыПоляОтбора.Найти(Тип("Строка")) <> Неопределено Тогда
				ПолеОтбораСтрока = Истина;
			ИначеЕсли ТипыПоляОтбора.Найти(Тип("Число")) <> Неопределено Тогда
				ПолеОтбораЧисло = Истина;
			ИначеЕсли ТипыПоляОтбора.Найти(Тип("Булево")) <> Неопределено Тогда
				ПолеОтбораБулево = Истина;
			ИначеЕсли ТипыПоляОтбора.Найти(Тип("Дата")) <> Неопределено Тогда
				ПолеОтбораДата = Истина;
			Иначе
				ПолеОтбораСсылочногоТипа = Истина;
			КонецЕсли;
		КонецЕсли;
		
		УсловияОтбораВидовХарактеристик = "";
		Если ФлагиИндексов.ЕстьСсылки Тогда
			УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик + ?(УсловияОтбораВидовХарактеристик = "", "", "
					|	И ");
			Если ПолеОтбораСсылочногоТипа Тогда
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%ИмяТаблицыОтбора%.%1 = ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовСсылки",
							ПолеОтбораВидов.Имя);
			Иначе
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ "ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовСсылки = НЕОПРЕДЕЛЕНО";
			КонецЕсли;
		КонецЕсли;
		Если ФлагиИндексов.ЕстьСтроки Тогда
			УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик + ?(УсловияОтбораВидовХарактеристик = "", "", "
					|	И ");
					
			Если ПолеОтбораСтрока Тогда
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%ИмяТаблицыОтбора%.%1 = ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовСтрока",
							ПолеОтбораВидов.Имя);
			Иначе
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ "ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовСтрока = """"";
			КонецЕсли;
		КонецЕсли;
		Если ФлагиИндексов.ЕстьЧисла Тогда
			УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик + ?(УсловияОтбораВидовХарактеристик = "", "", "
					|	И ");
					
			Если ПолеОтбораЧисло Тогда
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%ИмяТаблицыОтбора%.%1 = ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовЧисло",
							ПолеОтбораВидов.Имя);
			Иначе
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ "ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовЧисло = 0";
			КонецЕсли;
		КонецЕсли;
		Если ФлагиИндексов.ЕстьБулево Тогда
			УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик + ?(УсловияОтбораВидовХарактеристик = "", "", "
					|	И ");
				
			Если ПолеОтбораБулево Тогда
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%ИмяТаблицыОтбора%.%1 = ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовБулево",
							ПолеОтбораВидов.Имя);
			Иначе
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ "ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовБулево = ЛОЖЬ";
			КонецЕсли;
		КонецЕсли;
		Если ФлагиИндексов.ЕстьДаты Тогда
			УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик + ?(УсловияОтбораВидовХарактеристик = "", "", "
					|	И ");
				
			Если ПолеОтбораДата Тогда
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%ИмяТаблицыОтбора%.%1 = ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовДата",
							ПолеОтбораВидов.Имя);
			Иначе
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ "ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовДата = ЛОЖЬ";
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеШаблонаВыборки.ВидыХарактеристик = МДИсточникаХарактеристик Тогда
			ИмяТаблицыОтбора = "ТаблицаВидовХарактеристик";
		Иначе
			ИмяТаблицыОтбора = "ТаблицаИсточник";
		КонецЕсли;
		УсловияОтбораВидовХарактеристик = СтрЗаменить(УсловияОтбораВидовХарактеристик, "%ИмяТаблицыОтбора%", ИмяТаблицыОтбора);
		
	КонецЕсли;
	
	ВыражениеДополнительногоОтбора = "";
	Если МДИсточникаХарактеристик = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения Тогда
		Если ТипЗнч(НаборыДополнительныхРеквизитов) = Тип("Массив")
			И НаборыДополнительныхРеквизитов.Количество() > 0 Тогда
			// Выражение дополнительных отборов источника характеристик должно содержать только условия к полям ТаблицаВидовХарактеристик
			// т.к. дополнительные условия задаются на объект метаданных видов характеристик.
			ВыражениеДополнительногоОтбора =
			"ТаблицаВидовХарактеристик.Ссылка В
			|	(&ВыражениеВыборкиДопРеквизитов)";
			ШаблонВыраженияВыборкиДопРеквизитов =
			"ВЫБРАТЬ
			|	НаборыСвойствСостав.Свойство КАК Свойство
			|ИЗ
			|	&ТаблицаНаборов КАК НаборыСвойствСостав
			|ГДЕ
			|	НаборыСвойствСостав.Ссылка В (&НаборыДополнительныхРеквизитов)";
			Если ОписаниеШаблонаВыборки.ВидыХарактеристик = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ТабличныеЧасти.ДополнительныеРеквизиты Тогда
				ВыражениеВыборки = СтрЗаменить(ШаблонВыраженияВыборкиДопРеквизитов,
					"&ТаблицаНаборов", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты");
			ИначеЕсли ОписаниеШаблонаВыборки.ВидыХарактеристик = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ТабличныеЧасти.ДополнительныеСведения Тогда
				ВыражениеВыборки = СтрЗаменить(ШаблонВыраженияВыборкиДопРеквизитов,
					"&ТаблицаНаборов", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения");
			Иначе
				ВыражениеВыборки = СтрЗаменить(ШаблонВыраженияВыборкиДопРеквизитов,
					"&ТаблицаНаборов", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты")
					+ "
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|"
					+ СтрЗаменить(ШаблонВыраженияВыборкиДопРеквизитов,
					"&ТаблицаНаборов", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения");
			КонецЕсли;
			ВыражениеДополнительногоОтбора = СтрЗаменить(ВыражениеДополнительногоОтбора, "&ВыражениеВыборкиДопРеквизитов", ВыражениеВыборки);
		КонецЕсли;
	КонецЕсли;
	Если ОписаниеШаблонаВыборки.ВидыХарактеристик = МДИсточникаХарактеристик Тогда
		Если НЕ ПустаяСтрока(ВыражениеУсловияПоИдентификатору) Тогда
			УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик + "
			|	И " + ВыражениеУсловияПоИдентификатору;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ВыражениеДополнительногоОтбора = "" Тогда
		ТекстПодзапроса = ТекстПодзапроса + "
		|ГДЕ
		|	" + ВыражениеДополнительногоОтбора;
	КонецЕсли;
	
	ВыражениеНомерШаблона = Формат(ОписаниеШаблонаВыборки.НомерШаблона, "ЧН=0; ЧГ=0;");
	
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ХарактеристикиОбъектовМетаданныхПоШаблонам", "ХарактеристикиОбъектовМетаданныхПоШаблонам");
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "#ИсточникВидовХарактеристик", ИсточникВидовХарактеристик);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "#ТаблицаВидовХарактеристик", ТаблицаВидовХарактеристик);
	
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляСсылка", ВыражениеПоляСсылка);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляПолныйИдентификатор", ВыражениеПоляПолныйИдентификатор);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляИдентификаторДляФормул", ВыражениеПоляИдентификаторДляФормул);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляПрефиксТипаВидаХарактеристик", ВыражениеПоляПрефиксТипаВидаХарактеристик);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПредставления", ВыражениеПредставления);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеТипаЗначения", ВыражениеТипаЗначения);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&УсловияОтбораВидовХарактеристик", УсловияОтбораВидовХарактеристик);
	
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&НомерШаблона", ВыражениеНомерШаблона);
	
	Возврат ТекстПодзапроса;
	
КонецФункции

Функция ПреобразоватьМассивВТаблицуЗначений(МассивДанных, ТаблицаЗначений)
	
	Для Каждого ЭлементМассива Из МассивДанных Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
			НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция ТаблицаЗначенийТоваров()
	
	ТаблицаЗначенийТоваров = Новый ТаблицаЗначений;
	ТаблицаЗначенийТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Партия", Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ШаблонЦенника", Новый ОписаниеТипов("СправочникСсылка.ХранилищеШаблонов"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("КоличествоЦенников", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ШаблонЭтикетки", Новый ОписаниеТипов("СправочникСсылка.ХранилищеШаблонов"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("КоличествоЭтикеток", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ОстатокНаСкладе", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("КоличествоВДокументе", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Выбран", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1024)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("SKU", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(9, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("СправкаБ", Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ШтрихСправкиБ", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Весовой", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ШтрихАвтопроверки", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(500)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ТипШаблонаЦенника", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ТипШаблонаЭтикетки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ИсходныйНомерСтроки", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаЗначенийТоваров;
	
КонецФункции

#КонецОбласти

#КонецЕсли
