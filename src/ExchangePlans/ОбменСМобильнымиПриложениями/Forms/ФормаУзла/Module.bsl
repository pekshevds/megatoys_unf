#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	ПроверитьАдресПубликацииНаСервере();
	
	КлиентПодключенЧерезВебСервер = ОбщегоНазначения.КлиентПодключенЧерезВебСервер();
	
	Если Не РазделениеВключено И ЗначениеЗаполнено(АдресПубликации) И Не КлиентПодключенЧерезВебСервер Тогда
		ПроверитьПубликациюВебСервисовНаСервере(); 
	ИначеЕсли РазделениеВключено ИЛИ КлиентПодключенЧерезВебСервер Тогда
		ВебСервисыОпубликованы = Истина;
		Элементы.ГруппаПроверкаВебСервисов.Видимость = Ложь;
		Элементы.ИспользоватьЛокальныйАдресПубликации.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПроверкаВебСервисов.Видимость = Ложь;
	КонецЕсли;   

	ВариантНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МобильноеПриложение, "ВариантНастройки");  
	Если ВариантНастройки = "ПроверкаЦенников" Тогда
		ИспользоватьПодключаемоеОборудование = Константы.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование.Получить();
		Если Не ИспользоватьПодключаемоеОборудование Тогда
			Константы.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование.Установить(Истина);
		КонецЕсли;
		
		ИспользоватьОбменСПодключаемымОборудованиемOffline = Константы.ИспользоватьОбменСПодключаемымОборудованиемOffline.Получить();
		Если Не ИспользоватьОбменСПодключаемымОборудованиемOffline Тогда
			Константы.ИспользоватьОбменСПодключаемымОборудованиемOffline.Установить(Истина);
		КонецЕсли;  
	КонецЕсли;
	
	НастройкиОбмена = Неопределено;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗначениеКопирования = Параметры.ЗначениеКопирования;
		Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			КопируемыеНастройки = ЗначениеКопирования.НастройкиОбмена.Получить();
			НастройкиОбмена = Новый ХранилищеЗначения(КопируемыеНастройки, Новый СжатиеДанных(9));
		КонецЕсли;    
		Объект.ПрефиксДляДанныхМобильногоУстройства = 
			УправлениеМобильнымиПриложениями.НовыйПрефиксДляДанныхМобильногоУстройства();
		Объект.Пользователь = Пользователи.ТекущийПользователь();
		ПриЧтенииСозданииНаСервере(НастройкиОбмена);   

		УстановитьПривилегированныйРежим(Истина);     
		Если ЗначениеЗаполнено(Объект.Пользователь) Тогда
			СвойстваПользователя = Пользователи.СвойстваПользователяИБ(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Пользователь, "ИдентификаторПользователяИБ"));
			Если ЗначениеЗаполнено(СвойстваПользователя) Тогда
				ИмяДляВхода = СвойстваПользователя.Имя;     
			КонецЕсли;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);     
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбменСМобильнымиПриложениями.Ссылка) КАК КоличествоУзлов
		|ИЗ
		|	ПланОбмена.ОбменСМобильнымиПриложениями КАК ОбменСМобильнымиПриложениями
		|ГДЕ
		|	ОбменСМобильнымиПриложениями.МобильноеПриложение = &МобильноеПриложение";
		
		Запрос.УстановитьПараметр("МобильноеПриложение", Объект.МобильноеПриложение);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		КоличествоУзлов= 0;
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			КоличествоУзлов = ВыборкаДетальныеЗаписи.КоличествоУзлов;
		КонецЕсли;
		
		Если ВариантНастройки = "Заказы" Тогда
			Объект.Код = "Orders";
		ИначеЕсли ВариантНастройки = "Кладовщик" Тогда
			Объект.Код = "StoreKeeper";  
		ИначеЕсли ВариантНастройки = "ПроверкаЦенников" Тогда
			Объект.Код = "PriceChecker";  
		КонецЕсли;
		КодНовогоУзла = 1;
		Если КоличествоУзлов > 0 Тогда
			КодНовогоУзла = Строка(КоличествоУзлов);
			Объект.Код = Объект.Код + " #" + КодНовогоУзла;
		КонецЕсли;
		Если Не КодГлавногоУзлаУникален(Объект.Код) Тогда
			Объект.Код = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		КодГлавногоУзла = Объект.Код;  

		ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
		Элементы.ГруппаQRКод.Видимость = Ложь;
		Элементы.ДекорацияЦифраОдин.Видимость = Ложь;
		Элементы.ОбъектовКВыгрузке.Видимость = Ложь;     
		
	Иначе		
		КодГлавногоУзла = Объект.Код;  
		УстановитьПривилегированныйРежим(Истина);
		Если ЗначениеЗаполнено(Объект.Пользователь) Тогда
			СвойстваПользователя = Пользователи.СвойстваПользователяИБ(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Пользователь, "ИдентификаторПользователяИБ"));
			Если ЗначениеЗаполнено(СвойстваПользователя) Тогда
				ИмяДляВхода = СвойстваПользователя.Имя;     
			КонецЕсли;      
		КонецЕсли;      
		УстановитьПривилегированныйРежим(Ложь);   
		
		УстановитьQRКод();
		Элементы.ГруппаСоздатьQRКод.Видимость = Ложь;    
		
		КоличествоОбъектовКВыгрузке();
	КонецЕсли;   

	Если Не РазделениеВключено Тогда
		ПроверитьНаличиеРолейНаСервере(); 
	ИначеЕсли РазделениеВключено ИЛИ КлиентПодключенЧерезВебСервер Тогда
		НеобходимыеРолиИмеются = Истина;
		Элементы.ГруппаПроверкаРолей.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПроверкаРолей.Видимость = Ложь;
	КонецЕсли;    
	
	Элементы.ГруппаПросьбаЗакрытияФормы.Видимость = Ложь;

	Если Объект.ЭтотУзел 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.МобильноеПриложение) Тогда
		Элементы.ГруппаСтатусОбмена.Видимость = Ложь;
		Элементы.ГруппаПользователей.Видимость = Ложь;
		Элементы.Пользователь.Видимость = Ложь;
		Элементы.ГруппаШапкаПраво.Видимость = Ложь;
		Элементы.ДекорацияОтсканируйте.Заголовок = НСтр("ru = 'Отсканируйте QR-код в мобильном приложении'");
	Иначе
		Элементы.ДекорацияОтсканируйте.Заголовок = СтрШаблон(НСтр("ru = 'Отсканируйте QR-код в %1'"), Объект.МобильноеПриложение) ;
		Если ВариантНастройки = "ПроверкаЦенников" Тогда
			Элементы.ГруппаСтатусОбмена.Видимость = Ложь;
			Элементы.ГруппаПользователей.Видимость = Ложь;
			Элементы.ПрефиксДляДанныхМобильногоУстройства.Видимость = Ложь;    
			Элементы.КодГлавногоУзла.Заголовок = НСтр("ru = 'Идентификатор оборудования'");
		ИначеЕсли ВариантНастройки = "Кладовщик" Тогда
			Элементы.КодГлавногоУзла.Заголовок = НСтр("ru = 'Идентификатор настройки обмена'");
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ТекущийОбъект.ВерсияФорматаОбмена = УправлениеМобильнымиПриложениями.ВерсияФорматаОбмена(ТекущийОбъект.МобильноеПриложение);
	НастройкаКомпоновки = ТекущиеНастройкиКомпоновкиСервер();
 	ТекущийОбъект.НастройкиОбмена = Новый ХранилищеЗначения(НастройкаКомпоновки, Новый СжатиеДанных(9));    
	СтруктураПараметровОтбора = Новый Структура;                       
	СтруктураПараметровОтбора.Вставить("ИдентификаторWebСервисОборудования", ТекущийОбъект.Код);
	Для Каждого ЭлементОтбора Из НастройкаКомпоновки.Отбор.Элементы Цикл 
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
			СтруктураПараметровОтбора.Вставить(ЭлементОтбора.ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	КонецЦикла;
	УправлениеМобильнымиПриложениями.ПередЗаписьюНастройки(ТекущийОбъект.МобильноеПриложение.ВариантНастройки, СтруктураПараметровОтбора);      
	Если СтруктураПараметровОтбора.Свойство("УзелИнформационнойБазы") Тогда
		ТекущийОбъект.УзелПланаОбменаСПодключаемымОборудованием = СтруктураПараметровОтбора.УзелИнформационнойБазы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ЭтотУзел Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииУчастниковНастройкиСервер();
	УправлениеМобильнымиПриложениями.ПослеЗаписиНастройки(ТекущийОбъект.Ссылка);   
	КодГлавногоУзла = Объект.Код;
	УстановитьQRКод(); 
	
	Элементы.ГруппаНастройкиСвертываемая.Скрыть();    
	КоличествоОбъектовКВыгрузке();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОтобразитьПросьбуЗакрытия();	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого ЭлементНастройки Из Элементы.ГруппаНастройки.ПодчиненныеЭлементы Цикл
		Если ЭлементНастройки.Вид = ВидПоляФормы.ПолеВвода Тогда
			Если ЭлементНастройки.АвтоОтметкаНезаполненного = Истина Тогда
				ПроверяемыеРеквизиты.Добавить(ЭлементНастройки.Имя);
			КонецЕсли;   
		ИначеЕсли ЭлементНастройки.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
			Для Каждого ПодчиненныйЭлементНастройки Из ЭлементНастройки.ПодчиненныеЭлементы Цикл
				Если ПодчиненныйЭлементНастройки.Вид = ВидПоляФормы.ПолеВвода Тогда
					Если ПодчиненныйЭлементНастройки.АвтоОтметкаНезаполненного = Истина Тогда
						ПроверяемыеРеквизиты.Добавить(ПодчиненныйЭлементНастройки.Имя);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;     
		КонецЕсли;
	КонецЦикла;     
	
	Если Не ЗначениеЗаполнено(Объект.Пользователь) Тогда
		ОбщегоНазначения.СообщитьПользователю(
		НСтр("ru = 'Поле ""Пользователь"" не заполнено'"),
		,
		"Объект.Пользователь");
		Отказ = Истина;
	КонецЕсли;  
	
	Если Не ЗначениеЗаполнено(ИмяДляВхода) Тогда
		ОбщегоНазначения.СообщитьПользователю(
		НСтр("ru = 'В поле ""Пользователь"" необходимо выбрать пользователя с введенным именем (для входа)'"),
		,
		"Объект.Пользователь");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресПубликации) Тогда
		ОбщегоНазначения.СообщитьПользователю(
		НСтр("ru = 'Адрес публикации информационной базы не создан'"),
		,
		"ДекорацияQRКодНадпись");
		Элементы.ДекорацияQRКодКартинка.Видимость = Истина;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ РазделениеВключено И Не ВебСервисыОпубликованы Тогда
		ОбщегоНазначения.СообщитьПользователю(
		НСтр("ru = 'Не опубликованы веб-сервисы EnterpriseDataExchange_1_0_1_1 и Exchange_2_0_1_6'"),
		,
		"ДекорацияВебСервисыНадпись");
		Элементы.ГруппаПроверкаВебСервисов.Видимость = Истина;
		Элементы.ДекорацияПроверкаВебСервиса.Видимость = Истина;
		Отказ = Истина;
	КонецЕсли;  
	
	Если Не НеобходимыеРолиИмеются Тогда  
		ТекстСообщения = СтрШаблон(НСтр("ru = 'У пользователя %1 отсутствует необходимая роль
				|""%2"" ИЛИ ""%3""'"), Объект.Пользователь, НСтр("ru = 'Создание узла обмена для мобильного приложения'"), НСтр("ru = 'Чтение данных УНФ'")); 
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения
		,
		,
		"ДекорацияРолиНадпись");
		Элементы.ГруппаПроверкаРолей.Видимость = Истина;
		Элементы.ДекорацияПроверкаРолей.Видимость = Истина;
		Отказ = Истина;
	КонецЕсли;
	
	ВариантНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МобильноеПриложение, "ВариантНастройки");
	Если ВариантНастройки = "Кладовщик" Тогда
		Если Не ЗначениеЗаполнено(ЭтаФорма.СостояниеЗаказаДляСборки) 
			 ИЛИ Не ЗначениеЗаполнено(ЭтаФорма.ЭтаФорма.СостояниеЗаказаПоставщикуДляПриемки) 
			 ИЛИ Не ЗначениеЗаполнено(ЭтаФорма.ЭтаФорма.СостояниеЗаказаПоставщикуПринят)
			 ИЛИ Не ЗначениеЗаполнено(ЭтаФорма.ЭтаФорма.СостояниеЗаказаСобран) Тогда
			Элементы.ГруппаНастройкиСвертываемая.Показать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда 
		ПроверитьАдресПубликацииНаСервере();
		Если Не ПустаяСтрока(АдресПубликации) И Не РазделениеВключено И Не КлиентПодключенЧерезВебСервер Тогда
			ПроверитьПубликациюВебСервисовНаСервере();
		КонецЕсли
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаПользователейПриИзменении(Элемент)
	
	ПриИзмененииУчастниковНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбязательнаяНастройкаПриИзменении(Элемент)

	ОбязательнаяНастройкаПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	ПриИзмененииУчастниковНастройки();
	ПользовательПриИзмененииСервер();   
	УстановитьМодифицированность();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбменаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЖурналРегистрацииПоНастройкам();
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбменаНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЖурналРегистрацииПоНастройкам();
КонецПроцедуры
 
&НаКлиенте
Процедура Декорация4Нажатие(Элемент)
		
	Оповещение = Новый ОписаниеОповещения("ПослеВводаСтроки", ЭтотОбъект);
	ПоказатьВводСтроки(Оповещение, КодГлавногоУзла, НСтр("ru = 'Код главного узла'"), 36, Ложь);

КонецПроцедуры  

&НаКлиенте
Процедура СодержимоеКРКода(Команда)   
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Сначала обновите QR-код.'"));
		Возврат;
	КонецЕсли;
	
	QRСтрока = ПолучитьСтрокуQRКода();
	Оповещение = Новый ОписаниеОповещения("ПослеПросмотраQRКода", ЭтотОбъект);
	ПоказатьВводСтроки(Оповещение, QRСтрока, "Содержимое QR-кода"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияQRКодНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму(
	"Обработка.ПанельАдминистрированияБСП.Форма.ОбщиеНастройки",
	Новый Структура,
	,
	"Обработка.ПанельАдминистрированияБСП.Форма.ОбщиеНастройки.ОтдельноеОкно");
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	Если Элементы.Проверить.Отображение = ОтображениеКнопки.Картинка Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияВебСервисыНадпись.Видимость = Ложь;
	Элементы.ДекорацияПроверкаВебСервиса.Видимость = Ложь;
	Элементы.ДекорацияВебСервисыИдетПроверка.Видимость = Истина;
	Элементы.Проверить.Отображение = ОтображениеКнопки.Картинка;
	
	ПодключитьОбработчикОжидания("ПроверитьПубликациюВебСервисов", 1, Истина);
	
КонецПроцедуры  

&НаКлиенте
Процедура ПроверитьРоли(Команда) 
	
	Если Элементы.ПроверитьРоли.Отображение = ОтображениеКнопки.Картинка Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияРолиНадпись.Видимость = Ложь;
	Элементы.ДекорацияТаймер.Видимость = Истина;
	Элементы.ДекорацияПроверкаРолей.Видимость = Ложь;
	Элементы.ПроверитьРоли.Отображение = ОтображениеКнопки.Картинка;
	
	ПодключитьОбработчикОжидания("ПроверитьНаличиеРолей", 1, Истина);     
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбрабатыватьПоведениеПриИзменении(Элемент) 
	
	ОбрабатыватьПоведениеПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры    

&НаКлиенте
Процедура Подключаемый_ОбрабатыватьПоведениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) 
	
	ОбрабатыватьПоведениеАвтоПодборСервер(Элемент.Имя, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры   

&НаКлиенте
Процедура ИспользоватьЛокальныйАдресПубликацииПриИзменении(Элемент)
	ПроверитьАдресПубликацииНаСервере();
	Если Не РазделениеВключено И ЗначениеЗаполнено(АдресПубликации) И Не КлиентПодключенЧерезВебСервер Тогда
		ПроверитьПубликациюВебСервисов(); 
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ОбъектовКВыгрузкеНажатие(Элемент, СтандартнаяОбработка)     
	
	СтандартнаяОбработка = Ложь;     
	
	Если ВариантНастройки = "ПроверкаЦенников" Тогда
		УзелОбмена = Объект.УзелПланаОбменаСПодключаемымОборудованием;    
	Иначе
		УзелОбмена = Объект.Ссылка;    
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("УзелОбмена", УзелОбмена);
	ПараметрыФормы.Вставить("ЗапрещеноВыбиратьУзелОбмена", Истина);

	ПараметрыФормы.Вставить("ИменаСкрываемыхМетаданных", Новый СписокЗначений);
	ПараметрыФормы.ИменаСкрываемыхМетаданных.Добавить("РегистрСведений.СоответствияОбъектовИнформационныхБаз");
	НеВыгружатьПоПравилам = ОбменДаннымиВызовСервера.ИменаМетаданныхНеВыгружаемыхОбъектовУзла(УзелОбмена);
	Для Каждого ИмяМетаданных Из НеВыгружатьПоПравилам Цикл
		ПараметрыФормы.ИменаСкрываемыхМетаданных.Добавить(ИмяМетаданных);
	КонецЦикла; 
	
	ОткрытьФорму("Обработка.РегистрацияИзмененийДляОбменаДанными.Форма", ПараметрыФормы,, УзелОбмена);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаНастроекКомпоновки

&НаКлиенте
Процедура ТаблицаНастроекКомпоновкиПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ТаблицаНастроекКомпоновкиПриИзмененииСервер();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьКомпоновщикСервер(НастройкиОбмена = Неопределено, НачальныеНастройки = Ложь)
	
	Если НастройкиОбмена = Неопределено Тогда
		Если НачальныеНастройки Тогда
			НастройкаКомпоновки = Неопределено;
		Иначе
			НастройкаКомпоновки = Объект.Ссылка.НастройкиОбмена.Получить();
		КонецЕсли;
	Иначе
		НастройкаКомпоновки = НастройкиОбмена.Получить();
	КонецЕсли;
	
	УправлениеМобильнымиПриложениями.ЗаполнитьНастройкиКомпоновщика(
		КомпоновщикНастроекКомпоновкиДанных,
		Объект.МобильноеПриложение, НастройкаКомпоновки);
	
	УправлениеМобильнымиПриложениями.ОтрисоватьФормуУзла(
		ЭтаФорма, Элементы.ГруппаНастройки, КомпоновщикНастроекКомпоновкиДанных, Объект.МобильноеПриложение);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОбязательнаяНастройкаПриИзмененииСервер(ИмяНастройки)
	
	УправлениеМобильнымиПриложениями.ОбязательнаяНастройкаПриИзменении(
		ЭтаФорма, ИмяНастройки, Объект.МобильноеПриложение, КомпоновщикНастроекКомпоновкиДанных);
	
КонецПроцедуры

&НаСервере
Процедура ОбрабатыватьПоведениеПриИзмененииСервер(ИмяНастройки)
	
	УправлениеМобильнымиПриложениями.ОбрабатыватьПоведениеПриИзмененииСервер(
		ЭтаФорма, ИмяНастройки, Объект.МобильноеПриложение, КомпоновщикНастроекКомпоновкиДанных);
	
КонецПроцедуры   
	
&НаСервере
Процедура ОбрабатыватьПоведениеАвтоПодборСервер(ИмяНастройки, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеМобильнымиПриложениями.ОбрабатыватьПоведениеАвтоПодборСервер(
		ЭтаФорма, ИмяНастройки, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры  

&НаКлиенте
Процедура ОткрытьЖурналРегистрацииПоНастройкам()
	
	ПараметрыФормы = Новый Структура();
	ИмяПриложения = Новый Массив;
	ИмяПриложения.Добавить("WSConnection");
	ПараметрыФормы.Вставить("ДатаНачала", ДатаОбмена);
	ПараметрыФормы.Вставить("ДатаОкончания", ДатаОбмена);
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииУчастниковНастройки()
	
	ОчиститьСообщения();
	ПриИзмененииУчастниковНастройкиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииУчастниковНастройкиСервер()
	
	НастройкаСохранена = Не Объект.Ссылка.Пустая();
	
	Если ЗначениеЗаполнено(Объект.Пользователь) Тогда
		Элементы.ГруппаПользователей.ТолькоПросмотр = Истина;
	ИначеЕсли ЗначениеЗаполнено(Объект.ГруппаПользователей) Тогда
		Элементы.Пользователь.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПользователей.ТолькоПросмотр = Ложь;
		Элементы.Пользователь.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры      

&НаСервере
Процедура ПроверитьАдресПубликацииНаСервере()
	
	Если НЕ РазделениеВключено Тогда 
		Если Объект.ИспользоватьЛокальныйАдресПубликации Тогда
			АдресПубликации = Константы.АдресПубликацииИнформационнойБазыВЛокальнойСети.Получить();  
			ТекстПредупреждения = СтроковыеФункции.ФорматированнаяСтрока(НСтр(
				"ru = 'Не заполнен <a href = ""%1"">адрес публикации</a> информационной базы в локальной сети.
				|Настройки → Общие настройки → Публикация информационной базы.'"),
				"ПустаяСсылка");
		Иначе
			АдресПубликации = Константы.АдресПубликацииИнформационнойБазыВИнтернете.Получить();
			ТекстПредупреждения = СтроковыеФункции.ФорматированнаяСтрока(НСтр(
				"ru = 'Не заполнен <a href = ""%1"">адрес публикации</a> информационной базы в Интернете.
				|Настройки → Общие настройки → Публикация информационной базы.'"),
				"ПустаяСсылка");
		КонецЕсли;
		
		Элементы.ДекорацияQRКодНадпись.Заголовок = ТекстПредупреждения;
		Если ПустаяСтрока(АдресПубликации) Тогда
			Элементы.ГруппаQRПредупреждение.Видимость = Истина;
		Иначе
			Элементы.ГруппаQRПредупреждение.Видимость = Ложь;
		КонецЕсли;
	Иначе
		АдресПубликации = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
		Элементы.ГруппаQRПредупреждение.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПользовательПриИзмененииСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваПользователя = Пользователи.СвойстваПользователяИБ(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Пользователь, "ИдентификаторПользователяИБ"));
	Если ЗначениеЗаполнено(СвойстваПользователя) Тогда
		ИмяДляВхода = СвойстваПользователя.Имя;     
	КонецЕсли;    
	Если Не РазделениеВключено Тогда
		ПроверитьНаличиеРолейНаСервере(); 
	ИначеЕсли РазделениеВключено ИЛИ КлиентПодключенЧерезВебСервер Тогда
		НеобходимыеРолиИмеются = Истина;
    	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);      
	Если Объект.МобильноеПриложение.ВариантНастройки = "Заказы" Тогда
		ШаблонНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
			Объект.Пользователь, Объект.МобильноеПриложение);   
		Элементы.Наименование.СписокВыбора.Очистить();
		Элементы.Наименование.СписокВыбора.Добавить(ШаблонНаименования);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере(НастройкиОбмена = Неопределено)
	
	СостояниеОбменаДанными();
	ИнициализироватьКомпоновщикСервер(НастройкиОбмена);
	
КонецПроцедуры

&НаСервере
Процедура СостояниеОбменаДанными()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтатусОбмена = 0;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(СостоянияОбменовДанными.ДатаОкончания) КАК ДатаОкончания
	|ПОМЕСТИТЬ СостоянияОбменовДаннымиМаксДата
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
	|ГДЕ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияОбменовДанными.РезультатВыполненияОбмена КАК РезультатВыполненияОбмена,
	|	СостоянияОбменовДанными.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ РезультатыВыполненияОбмена
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияОбменовДаннымиМаксДата КАК СостоянияОбменовДаннымиМаксДата
	|		ПО (СостоянияОбменовДаннымиМаксДата.ДатаОкончания = СостоянияОбменовДанными.ДатаОкончания)
	|ГДЕ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|					ТОГДА 1
	|				ИНАЧЕ 2
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусОбмена,
	|	ЕСТЬNULL(СостоянияОбменовДанными.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбмена
	|ИЗ
	|	ПланОбмена.ОбменСМобильнымиПриложениями КАК ОбменСМобильнымиПриложениями
	|		ЛЕВОЕ СОЕДИНЕНИЕ РезультатыВыполненияОбмена КАК СостоянияОбменовДанными
	|		ПО ОбменСМобильнымиПриложениями.Ссылка = СостоянияОбменовДанными.УзелИнформационнойБазы
	|ГДЕ
	|	ОбменСМобильнымиПриложениями.Ссылка = &Ссылка";
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.СостоянияОбменовДанными",
			"РегистрСведений.СостоянияОбменовДаннымиОбластейДанных");
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СтатусОбмена = 0;
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	СтатусОбмена = Выборка.СтатусОбмена;
	ДатаОбмена = Выборка.ДатаОбмена;
КонецПроцедуры

&НаСервере
Процедура ТаблицаНастроекКомпоновкиПриИзмененииСервер()

	УправлениеМобильнымиПриложениямиПереопределяемый.ПриИзмененииТаблицыНастроек(
		ЭтаФорма, КомпоновщикНастроекКомпоновкиДанных);
	
КонецПроцедуры

&НаСервере
Функция ТекущиеНастройкиКомпоновкиСервер()
	
	УправлениеМобильнымиПриложениями.УстановитьРеквизитыФормыВОтборыКомпоновщика(
		ЭтаФорма, КомпоновщикНастроекКомпоновкиДанных, Объект.МобильноеПриложение);
	Возврат КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки();
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	НастройкаСохранена = Не Объект.Ссылка.Пустая();
	
	Если СтатусОбмена = 0 Тогда
		СтатусОбменаНадпись = Нстр("ru = 'Ожидается первая синхронизация данных'");
	ИначеЕсли СтатусОбмена = 1 Тогда
		СтатусОбменаНадпись = Нстр("ru = 'Синхронизация успешно завершена в %ДатаОбмена%'");
	ИначеЕсли СтатусОбмена = 2 Тогда
		СтатусОбменаНадпись = Нстр("ru = 'Синхронизация завершена с ошибками в %ДатаОбмена%'");
	КонецЕсли;
	СтатусОбменаНадпись = СтрЗаменить(СтатусОбменаНадпись, "%ДатаОбмена%", Формат(ДатаОбмена, "ДЛФ=DT"));
	Элементы.СтатусОбмена.Видимость = НастройкаСохранена;
	Элементы.СтатусОбменаНадпись.Видимость = НастройкаСохранена;
	Элементы.СтатусОбмена.Гиперссылка = НЕ СтатусОбмена = 0;
	Элементы.СтатусОбменаНадпись.Гиперссылка = НЕ СтатусОбмена = 0;
	
	Элементы.ГруппаОтборы.Видимость = ЗначениеЗаполнено(Объект.МобильноеПриложение)
		И КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки.Элементы.Количество() > 0;
	
	ЭлементВидСравнения = Элементы.ТаблицаНастроекКомпоновки.ПодчиненныеЭлементы.ТаблицаНастроекКомпоновкиВидСравнения;
	ЭлементВидСравнения.СписокВыбора.Очистить();
	ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);    
	
	
	
	ПриИзмененииУчастниковНастройкиСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьQRКод()
	
	QRСтрока = ПолучитьСтрокуQRКода();
	ДанныеQRКода = ГенерацияШтрихкода.ДанныеQRКода(QRСтрока, 0, 190);
	QRКод = ПоместитьВоВременноеХранилище(ДанныеQRКода, УникальныйИдентификатор);
	
	Элементы.ГруппаДанныеДляВхода.Видимость = Истина;
	
	Элементы.ГруппаQRКод.Видимость = Истина;
	Элементы.ДекорацияЦифраОдин.Видимость = Истина;
	
	Элементы.ГруппаСоздатьQRКод.Видимость = Ложь;
	
	ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Авто; 
	
КонецПроцедуры   

&НаСервере
Функция ПолучитьСтрокуQRКода()   
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(ИмяДляВхода);
	ЗашифрованноеИмяДляВхода = Base64Строка(ДвоичныеДанные);
	QRСтрока = СтрШаблон("%1;%2;%3;", АдресПубликации, КодГлавногоУзла, ЗашифрованноеИмяДляВхода);  
	Возврат QRСтрока;   
	
КонецФункции

&НаКлиенте
Процедура ПослеВводаСтроки(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ КодГлавногоУзлаУникален(Результат) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Введенный код  занят другой настройкой обмена.'"));
		Возврат;
	КонецЕсли;
	
	Объект.Код = Результат; 
	КодГлавногоУзла = Объект.Код; 
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПросмотраQRКода(Результат, Параметры) Экспорт
	Возврат;
КонецПроцедуры

&НаСервере
Функция КодГлавногоУзлаУникален(Идентификатор)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбменСМобильнымиПриложениями.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменСМобильнымиПриложениями КАК ОбменСМобильнымиПриложениями
	|ГДЕ
	|	ОбменСМобильнымиПриложениями.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПубликациюВебСервисов()

	ПроверитьПубликациюВебСервисовНаСервере();
	
	Если Не ВебСервисыОпубликованы Тогда
		Элементы.ДекорацияВебСервисыНадпись.Видимость = Истина;
		Элементы.ДекорацияПроверкаВебСервиса.Видимость = Истина;
		Элементы.Проверить.Отображение = ОтображениеКнопки.Текст;
	
		Если Элементы.Проверить.Заголовок = ЗаголовокКнопкиПроверить() Тогда
			Элементы.Проверить.Заголовок = НСтр("ru = 'Проверить еще раз'");
		КонецЕсли;
		
		Элементы.ДекорацияВебСервисыИдетПроверка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПубликациюВебСервисовНаСервере()
	
	ВебСервис1Опубликован = Ложь;
	ВебСервис2Опубликован = Ложь;
	
	ВебСервис1 = "ws/EnterpriseDataExchange_1_0_1_1/ping";
	ВебСервис2 = "ws/Exchange_2_0_1_6/ping";

	ПараметрыОтправки = ОтправкаЗапросов.НовыйПараметрыОтправки();
	ПараметрыОтправки.Url = ?(Не СтрЗаканчиваетсяНа(АдресПубликации, "/"), АдресПубликации + "/" + ВебСервис1, АдресПубликации + ВебСервис1);
	
	Попытка
		Ответ = ОтправкаЗапросов.ОтправитьЗапрос(ПараметрыОтправки);
	Исключение
		ВебСервисыОпубликованы = Ложь;
		Возврат;
	КонецПопытки;
	
	Если Ответ.КодСостояния = 401 Тогда
		ВебСервис1Опубликован = Истина;
	Иначе
		ВебСервисыОпубликованы = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыОтправки.Url = ?(Не СтрЗаканчиваетсяНа(АдресПубликации, "/"), АдресПубликации + "/" + ВебСервис2, АдресПубликации + ВебСервис2);
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапрос(ПараметрыОтправки);
	
	Если Ответ.КодСостояния = 401 Тогда
		ВебСервис2Опубликован = Истина;
	КонецЕсли;
	
	ВебСервисыОпубликованы = ВебСервис1Опубликован И ВебСервис2Опубликован;
	
	Элементы.ГруппаПроверкаВебСервисов.Видимость = Не ВебСервисыОпубликованы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеРолей()

	ПроверитьНаличиеРолейНаСервере();
	
	Если Не НеобходимыеРолиИмеются Тогда
		Элементы.ДекорацияПроверкаРолей.Видимость = Истина;
		Элементы.ПроверитьРоли.Отображение = ОтображениеКнопки.Текст;
	КонецЕсли;
	
	Если Элементы.ПроверитьРоли.Заголовок = ЗаголовокКнопкиПроверить() Тогда
		Элементы.ПроверитьРоли.Заголовок = НСтр("ru = 'Проверить еще раз'");
	КонецЕсли;
	
	Элементы.ДекорацияРолиНадпись.Видимость = Истина;
	Элементы.ДекорацияТаймер.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокКнопкиПроверить()
	
	Возврат НСтр("ru = 'Проверить'");
	
КонецФункции

&НаСервере
Процедура ПроверитьНаличиеРолейНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Пользователь) Тогда
		СвойстваПользователя = Пользователи.СвойстваПользователяИБ(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Пользователь, "ИдентификаторПользователяИБ"));
		Если ЗначениеЗаполнено(СвойстваПользователя) Тогда
			НеобходимыеРолиИмеются = ПравоДоступа("Использование", Метаданные.WebСервисы.Exchange_2_0_1_6.Операции.GetIBParameters, СвойстваПользователя.ПользовательИБ);
		Иначе     
			НеобходимыеРолиИмеются = Ложь;
		КонецЕсли;      
	Иначе     
		НеобходимыеРолиИмеются = Ложь;
	КонецЕсли;      
	Элементы.ГруппаПроверкаРолей.Видимость = Не НеобходимыеРолиИмеются;
	
КонецПроцедуры

&НаСервере
Процедура КоличествоОбъектовКВыгрузке()   
	
	Обработка = Обработки.РегистрацияИзмененийДляОбменаДанными.Создать(); 
	Данные = Обработка.СформироватьСтруктуруМетаданных(Объект.Ссылка);
	СтруктураИменМетаданных            = Данные.СтруктураИмен; 
	
	ТаблицаОбъектов = Обработка.ПолучитьКоличествоИзменений(СтруктураИменМетаданных, Объект.Ссылка);
	ОбъектовКВыгрузке = ТаблицаОбъектов.Итог("КоличествоИзменений");     
	
	Элементы.ОбъектовКВыгрузке.Видимость = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированность()
	БылаМодифицированность = Истина;
КонецПроцедуры     

&НаКлиенте
Процедура ОтобразитьПросьбуЗакрытия()
	Если НЕ Модифицированность И БылаМодифицированность Тогда 
		Элементы.ГруппаПросьбаЗакрытияФормы.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры     

#КонецОбласти
