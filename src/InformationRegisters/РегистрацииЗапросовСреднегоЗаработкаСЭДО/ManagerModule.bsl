///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЧтениеОбъектаРазрешено(ИсходящийДокумент)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ИзменениеОбъектаРазрешено(ИсходящийДокумент)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// АПК:581-выкл. Методы могут вызываться из расширений.
// АПК:299-выкл. Методы могут вызываться из расширений.
// АПК:326-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// АПК:325-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// Транзакция открывается в методе НачатьЗаписьНабора, закрывается в ЗавершитьЗаписьНабора, отменяется в ОтменитьЗаписьНабора.

// Транзакционный вариант (с управляемой блокировкой) получения набора записей, соответствующего значениям измерений.
//
// Параметры:
//   ИсходящийДокумент - ДокументСсылка.ЗапросСреднегоЗаработкаСЭДО - Значение отбора по соответствующему измерению.
//
// Возвращаемое значение:
//   РегистрСведенийНаборЗаписей.РегистрацииОтветовНаЗапросыФССДляРасчетаПособия - Если удалось установить блокировку
//       и прочитать набор записей. При необходимости, открывает свою локальную транзакцию. Для закрытия транзакции
//       следует использовать одну из терминирующих процедур: ЗавершитьЗаписьНабора, либо ОтменитьЗаписьНабора.
//   Неопределено - Если не удалось установить блокировку и прочитать набор записей.
//       Вызывать процедуры ЗавершитьЗаписьНабора, ОтменитьЗаписьНабора не требуется,
//       поскольку если перед блокировкой функции потребовалось открыть локальную транзакцию,
//       то после неудачной блокировки локальная транзакция была отменена.
//
Функция НачатьЗаписьНабора(ИсходящийДокумент) Экспорт
	Если Не ЗначениеЗаполнено(ИсходящийДокумент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ПолныеПраваИлиПривилегированныйРежим
		И Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.РегистрацииЗапросовСреднегоЗаработкаСЭДО) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".'"),
			Метаданные.РегистрыСведений.РегистрацииЗапросовСреднегоЗаработкаСЭДО.Представление());
	КонецЕсли;
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РегистрацииЗапросовСреднегоЗаработкаСЭДО");
		ЭлементБлокировки.УстановитьЗначение("ИсходящийДокумент", ИсходящийДокумент);
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИсходящийДокумент.Установить(ИсходящийДокумент);
		НаборЗаписей.Прочитать();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить регистрацию исходящего сообщения о стра для расчета пособия ФСС %1 по причине: %2'"),
			ИсходящийДокумент,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.РегистрацииЗапросовСреднегоЗаработкаСЭДО,
			ИсходящийДокумент,
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

// Записывает набор и фиксирует локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.РегистрацииОтветовНаЗапросыФССДляРасчетаПособия
//
Процедура ЗавершитьЗаписьНабора(НаборЗаписей) Экспорт
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Отменяет запись набора и отменяет локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.РегистрацииОтветовНаЗапросыФССДляРасчетаПособия
//
Процедура ОтменитьЗаписьНабора(НаборЗаписей) Экспорт
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// АПК:326-вкл.
// АПК:325-вкл.
// АПК:299-вкл.
// АПК:581-вкл.

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументу(ИсходящийДокументОбъект, СтрокаОтправки = Неопределено) Экспорт
	// Регистрация является продолжением текущего документа.
	// Но если документ - новый, то поле "Ссылка" может быть не заполнено.
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = НачатьЗаписьНабора(ИсходящийДокументОбъект.Ссылка);
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Запись, ИсходящийДокументОбъект);
	Запись.ИсходящийДокумент = ИсходящийДокументОбъект.Ссылка;
	
	Если СтрокаОтправки <> Неопределено Тогда
		Запись.Доставлен             = СтрокаОтправки.Доставлен;
		Запись.ДоставкаИдентификатор = СтрокаОтправки.ДоставкаИдентификатор;
		Запись.ДоставкаТекстОшибки   = СтрокаОтправки.Результат;
	КонецЕсли;
	
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

#Область СЭДО

// Загружает ошибку логического контроля (тип 14) полученную в ответ на документ СЭДО 320.
Процедура ЗагрузитьОшибкуСообщения320(Страхователь, ИдентификаторСообщения, ТекстОшибки, Результат) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистрация.ИсходящийДокумент КАК ИсходящийДокумент,
	|	Регистрация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.РегистрацииЗапросовСреднегоЗаработкаСЭДО КАК Регистрация
	|ГДЕ
	|	Регистрация.ДоставкаИдентификатор = &ИдентификаторСообщения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистрация.ИсходящийДокумент,
	|	Регистрация.ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.РегистрацииЗапросовСреднегоЗаработкаСЭДО КАК Регистрация
	|ГДЕ
	|	Регистрация.РегистрацияИдентификатор = &ИдентификаторСообщения";
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	ФизическиеЛица = Новый Массив;
	Таблица = Запрос.Выполнить().Выгрузить();
	Найденные = Таблица.Скопировать(Новый Структура("ГоловнаяОрганизация", ГоловнаяОрганизация));
	Если Найденные.Количество() = 0 Тогда
		Найденные = Таблица;
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		Набор = НачатьЗаписьНабора(СтрокаТаблицы.ИсходящийДокумент);
		Если Набор.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(Набор);
			Продолжить;
		КонецЕсли;
		Запись = Набор[0];
		Если СтрНайти(Запись.ОшибкиЛогическогоКонтроля, ТекстОшибки) = 0 Тогда
			Если ПустаяСтрока(Запись.ОшибкиЛогическогоКонтроля) Тогда
				Запись.ОшибкиЛогическогоКонтроля = ТекстОшибки;
			Иначе
				Запись.ОшибкиЛогическогоКонтроля = Запись.ОшибкиЛогическогоКонтроля + Символы.ПС + Символы.ПС + ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		Запись.ЕстьОшибкиЛогическогоКонтроля = Истина;
		ЗавершитьЗаписьНабора(Набор);
	КонецЦикла;
	
КонецПроцедуры

// Загружает сообщение СЭДО 321, которое является ответом ФСС на сообщение 320.
Процедура ЗагрузитьСообщение321(Страхователь, РегистрацияИдентификатор, ТекстXML, Результат, Кэш) Экспорт
	// Примера нет.
	// Из спецификации:
	// <xs:element name="insuredPersonSalaryResponse">
	//   <xs:attribute name="responseOn" type="c:UuidV1Type" use="required"> - Ссылка на сообщение 320.
	//   <xs:element name="status"> - Статус обработки сообщения
	//   <xs:choice minOccurs="0">
	//   1. <xs:element name="insuredInfo"> - Сведения о застрахованном лице.
	//          <xs:element name="snils" type="p:snils"> - СНИЛС.
	//      <xs:element name="periodInfo"> - Сведения о запрашиваемом периоде.
	//   2. <xs:element name="errorList"> - Список сообщений об ошибках.
	//          <xs:element name="code" type="xs:string" minOccurs="0"> - Код ошибки. См. коды ошибок конкретного модуля.
	//          <xs:element name="message" type="xs:string" minOccurs="0"> - Сообщение ошибки.
	//          <xs:element name="details" type="xs:string" minOccurs="0"> - Детализация ошибки.
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
	КореньDOM = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "insuredPersonSalaryResponse");
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'status']/..");
	КонецЕсли;
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СтруктураDOM.ДокументDOM;
	КонецЕсли;
	Если КореньDOM = Неопределено Тогда
		СЭДОФСС.ЗаписатьОшибкуПоискаУзла(Результат, "insuredPersonSalaryResponse");
		Возврат;
	КонецЕсли;
	
	АтрибутыКорня = СериализацияБЗК.АтрибутыЭлементаDOM(КореньDOM, "responseOn");
	ДоставкаИдентификатор = АтрибутыКорня.responseOn;
	Если ДоставкаИдентификатор = Неопределено Тогда
		СЭДОФСС.ЗаписатьОшибкуПоискаАтрибута(Результат, "responseOn");
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ДоставкаИдентификатор) Тогда
		СЭДОФСС.ЗаписатьОшибкуЗаполненностиАтрибута(Результат, "responseOn");
		Возврат;
	КонецЕсли;
	
	РеквизитыКорня = СериализацияБЗК.УзлыЭлементаDOM(КореньDOM, "status, insuredInfo, periodInfo, errorList");
	СотрудникDOM   = СериализацияБЗК.УзлыЭлементаDOM(РеквизитыКорня.insuredInfo, "snils");
	РегистрацияДата          = СЭДОФСС.ДатаСообщения(РегистрацияИдентификатор, Кэш);
	РегистрацияСтатус        = СериализацияБЗК.СтрокаИзXML(РеквизитыКорня.status);
	РегистрацияПротокол      = СЭДОФСС.ПредставлениеСпискаОшибокXML(РеквизитыКорня.errorList);
	РегистрацияСНИЛС         = СЭДОФСС.СНИЛСИзXML(СотрудникDOM.snils);
	СведенияОСтатусе         = СведенияОСтатусеРегистрации(РегистрацияСтатус);
	ГоловнаяОрганизация      = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
	
	Если Не ЗначениеЗаполнено(СведенияОСтатусе.Вес) Тогда
		РегистрацияПротокол = СокрЛП(СведенияОСтатусе.Расшифровка + Символы.ПС + Символы.ПС + РегистрацияПротокол);
		СЭДОФСС.ОшибкаОбработки(Результат, РегистрацияПротокол);
	КонецЕсли;
	
	РеквизитыДокумента = РеквизитыИсходящегоДокумента(ДоставкаИдентификатор, Страхователь, ГоловнаяОрганизация);
	Если РеквизитыДокумента = Неопределено Тогда
		ДокументПредставление = Метаданные.Документы.ЗапросСреднегоЗаработкаСЭДО.Представление();
		ТекстОшибки = НСтр("ru = 'Не удалось найти %1 с идентификатором ""%2""'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ДокументПредставление, ДоставкаИдентификатор);
		ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + НСтр("ru = 'Протокол:'") + Символы.ПС + РегистрацияПротокол;
		СЭДОФСС.ОшибкаОбработки(Результат, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Набор = НачатьЗаписьНабора(РеквизитыДокумента.Ссылка);
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, РеквизитыДокумента);
		Запись.ИсходящийДокумент = РеквизитыДокумента.Ссылка;
	Иначе
		Запись = Набор[0];
		Если ЗначениеЗаполнено(Запись.РегистрацияСтатус)
			И РегистрацияИдентификатор <> Запись.РегистрацияИдентификатор Тогда
			СуществующийСтатус = СведенияОСтатусеРегистрации(Запись.РегистрацияСтатус);
			Если СведенияОСтатусе.Вес < СуществующийСтатус.Вес Тогда
				ОтменитьЗаписьНабора(Набор);
				Возврат; // Неактуальный (старый) статус.
			ИначеЕсли СведенияОСтатусе.Вес = СуществующийСтатус.Вес
				И РегистрацияДата < Запись.РегистрацияДата Тогда
				ОтменитьЗаписьНабора(Набор);
				Возврат; // Более старая регистрация.
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запись.ГоловнаяОрганизация      = ГоловнаяОрганизация;
	Запись.Страхователь             = Страхователь;
	Запись.Зарегистрирован          = СведенияОСтатусе.Зарегистрирован;
	Запись.РегистрацияДата          = РегистрацияДата;
	Запись.РегистрацияСтатус        = РегистрацияСтатус;
	Запись.РегистрацияПротокол      = РегистрацияПротокол;
	Запись.РегистрацияИдентификатор = РегистрацияИдентификатор;
	Запись.РегистрацияСНИЛС         = РегистрацияСНИЛС;
	
	Если СведенияОСтатусе.Зарегистрирован Тогда
		Документы.СреднийЗаработокСЭДО.ЗаполнитьПоСообщению321(Запись, РеквизитыКорня.periodInfo, Результат);
	КонецЕсли;
	
	ЗавершитьЗаписьНабора(Набор);
	
	Результат.Обработано = Истина;
КонецПроцедуры

Функция РеквизитыИсходящегоДокумента(ИдентификаторСообщения, Страхователь, ГоловнаяОрганизация)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НайденныйДокумент.Ссылка КАК Ссылка,
	|	НайденныйДокумент.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НайденныйДокумент.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	НайденныйДокумент.ДатаОтправки КАК ДатаОтправки
	|ИЗ
	|	Документ.ЗапросСреднегоЗаработкаСЭДО КАК НайденныйДокумент
	|ГДЕ
	|	НайденныйДокумент.ИдентификаторСообщения = &ИдентификаторСообщения
	|
	|УПОРЯДОЧИТЬ ПО
	|	НайденныйДокумент.Страхователь = &Страхователь УБЫВ,
	|	НайденныйДокумент.ГоловнаяОрганизация = &ГоловнаяОрганизация УБЫВ";
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	Запрос.УстановитьПараметр("Страхователь", Страхователь);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция СведенияОСтатусеРегистрации(Статус) Экспорт
	Результат = Новый Структура("Вес, Зарегистрирован, Расшифровка");
	
	СтатусВРег = ВРег(СокрЛП(Статус));
	
	Если СтатусВРег = "RECEIVED" Тогда
		Результат.Вес             = 1;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = НСтр("ru = 'Запрос получен фондом, идет сбор сведений'");
		
	ИначеЕсли СтатусВРег = "ERROR" Тогда
		Результат.Вес             = 2;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = НСтр("ru = 'Обнаружены ошибки, запрос отклонен Фондом'");
		
	ИначеЕсли СтатусВРег = "PROCESSED" Тогда
		Результат.Вес             = 3;
		Результат.Зарегистрирован = Истина;
		Результат.Расшифровка     = НСтр("ru = 'Запрос успешно обработан, получен ответ Фонда'");
		
	ИначеЕсли ЗначениеЗаполнено(Статус) Тогда
		Результат.Вес             = 0;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = СтрШаблон(НСтр("ru = 'Неизвестный статус: ""%1"". Несоответствие спецификации СЭДО: неизвестный ""status"" входящего сообщения типа 321.'"), Статус);
		
	Иначе
		Результат.Вес             = 0;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = НСтр("ru = 'Не заполнен статус регистрации. Несоответствие спецификации СЭДО: не заполнен ""status"" входящего сообщения типа 321.'");
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьСписокВыбораСтатусов(ПолеВвода, Статус) Экспорт
	СписокВыбора = ПолеВвода.СписокВыбора;
	Если СписокВыбора.Количество() = 0 Тогда
		Ключи = СтрРазделить("RECEIVED,ERROR,PROCESSED", ",");
		Для Каждого Ключ Из Ключи Цикл
			СведенияОСтатусе = СведенияОСтатусеРегистрации(Ключ);
			СписокВыбора.Добавить(Ключ, СведенияОСтатусе.Расшифровка + " (" + Ключ + ")");
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(Статус) И СписокВыбора.НайтиПоЗначению(Статус) = Неопределено Тогда
		СведенияОСтатусе = СведенияОСтатусеРегистрации(Статус);
		СписокВыбора.Добавить(Статус, СведенияОСтатусе.Расшифровка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли