
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияРМКПереопределяемый.УстановитьПризнакФормеПоДаннымФункциональнойОпции(ЭтаФорма,
		"ИспользоватьЗапретПродаж");
	ОбщегоНазначенияРМКПереопределяемый.УстановитьПризнакФормеПоДаннымФункциональнойОпции(ЭтаФорма,
		"ИспользоватьСерверЛояльностиПолучательДанных");

	ИспользоватьПоставляемыеОграниченияПродаж = ОбщегоНазначенияРМК.ИспользоватьПоставляемыеОграниченияПродаж();
	ДопускаетсяОбновлениеОграниченийПродаж = (ИспользоватьСерверЛояльностиПолучательДанных И ИспользоватьЗапретПродаж)
		ИЛИ ИспользоватьПоставляемыеОграниченияПродаж;
	
	РазрешеноРедактироватьУсловияОграниченийПродаж = ДоступностьРедактированияУсловийЗапретовПродаж();
	ИспользоватьСерверЛояльностиПолучательДанных = ОбщегоНазначенияРМК.ИспользоватьСерверЛояльностиПолучательДанных();
	УстановитьДоступностьЭлементаФормы(Элементы.ФормаОбновитьДанныеЗапрета, ДопускаетсяОбновлениеОграниченийПродаж);
	ОбновитьДоступностьЭлементовВводаЗапретов(Элементы, РазрешеноРедактироватьУсловияОграниченийПродаж);
	ТорговыйОбъект = ТекущийТорговыйОбъект();
	АктуализироватьЗаголовкиИменПолей();
	
	ОбщегоНазначенияРМК.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекущийЗапретОсобенностиУчетаПриИзменении(Элемент)
	
	УстановитьОтборДинамическогоСписка("ОсобенностьУчета");
	
	Если ЗначениеЗаполнено(ОсобенностьУчета) Тогда
		
		ВидНоменклатуры = Неопределено;
		ПереченьВидовНоменклатуры = МассивВидовНоменклатурыПоОсобенностиУчета(ОсобенностьУчета);
		Элементы.ВидНоменклатурыДляОтбора.СписокВыбора.ЗагрузитьЗначения(ПереченьВидовНоменклатуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыДляОтбораПриИзменении(Элемент)
	УстановитьОтборДинамическогоСписка("ВидНоменклатуры");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДанныеЗапрета(Команда)
	
	ОбновитьДанныеЗапретаИзМастерСистемы(ТорговыйОбъект);
	РазрешеноРедактироватьУсловияОграниченийПродаж = ДоступностьРедактированияУсловийЗапретовПродаж();
	ОбновитьДоступностьЭлементовВводаЗапретов(Элементы, РазрешеноРедактироватьУсловияОграниченийПродаж);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция МассивВидовНоменклатурыПоОсобенностиУчета(ОсобенностьУчета)
	Возврат ОбщегоНазначенияРМК.МассивВидовНоменклатурыПоОсобенностиУчета(ОсобенностьУчета);
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеЗапретаИзМастерСистемы(ТорговыйОбъект)
	
	СостояниеОбновленияЗапретовПродаж = НСтр("ru = ''");
	
	Если ИспользоватьПоставляемыеОграниченияПродаж Тогда
		
		РезультатОбновления = ОбновитьОграниченияПродажИзПоставляемыхДанных();
		СостояниеОбновленияЗапретовПродаж = РезультатОбновления.КомментарийОбновленияЗапретов;
		
	Иначе
		
		РезультатОбновления = ОбщегоНазначенияРМККлиентСервер.ОбновитьДанныеЗапретовРедактирования(,ТорговыйОбъект);
		
		Если НЕ РезультатОбновления.ПризнакУспешноОбновлен Тогда
			
			ПричинаНевозможностиОбновленияПризнака = НСтр("ru = 'Признак разрешения редактирования не обновлен по причине:'");
			СостояниеОбновленияЗапретовПродаж = СтрШаблон("%1 %2%3",
			ПричинаНевозможностиОбновленияПризнака, РезультатОбновления.КомментарийКОбновлениюПризнака, Символы.ПС);
			
		КонецЕсли;
		
		Если НЕ РезультатОбновления.ЗапретыПродажУспешноЗагружены Тогда
			
			ПричинаНевозможностиОбновленияЗапретовПродаж = НСтр("ru = 'Не удалось обновить запреты продаж по причине:'");
			ПричинаНевозможностиОбновленияЗапретовПродажРасширенная = СтрШаблон("%1%2",
				ПричинаНевозможностиОбновленияЗапретовПродаж, РезультатОбновления.КомментарийОбновленияЗапретов);
			СостояниеОбновленияЗапретовПродаж = СтрШаблон("%1%2%3",
				СостояниеОбновленияЗапретовПродаж, ПричинаНевозможностиОбновленияЗапретовПродажРасширенная, Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СостояниеОбновленияЗапретовПродаж) Тогда
		
		КомментарийКЗаписи = НСтр("ru = 'Данные о запретах продаж не были обновлены.'");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СостояниеОбновленияЗапретовПродаж,,
			КомментарийКЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьОграниченияПродажИзПоставляемыхДанных()
	Возврат ОбновитьОграниченияПродажИзПоставляемыхДанныхСервер();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементаФормы(Элемент, Доступность)
	Элемент.Доступность = Доступность;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВводаЗапретов(Элементы, ЗначениеДоступности)
	
	УстановитьДоступностьЭлементаФормы(Элементы.ФормаСоздать, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ФормаСкопировать, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ФормаИзменить, ЗначениеДоступности);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьОграниченияПродажИзПоставляемыхДанныхСервер()

	Результат = Новый Структура();
	Результат.Вставить("КомментарийОбновленияЗапретов", НСтр("ru = ''"));
	ОбщегоНазначенияРМК.ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат);
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ДоступностьРедактированияУсловийЗапретовПродаж()
	Возврат ОбщегоНазначенияРМК.РазрешеноРедактироватьЗапретыПродаж();
КонецФункции

&НаСервере
Процедура АктуализироватьЗаголовкиИменПолей()
	
	ЗаголовокОсобенностьУчета = НСтр("ru = 'Особенность учета'");
	ОбщегоНазначенияРМККлиентСерверПереопределяемый.ЗаполнитьЗаголовокОсобенностьУчета(ЗаголовокОсобенностьУчета);
	Элементы.ОсобенностиУчетаДляОтбора.Заголовок = ЗаголовокОсобенностьУчета;
	Элементы.ОсобенностьУчета.Заголовок = ЗаголовокОсобенностьУчета;
	
	ЗаголовокВидНоменклатуры = НСтр("ru = 'Вид номенклатуры'");
	ОбщегоНазначенияРМККлиентСерверПереопределяемый.ЗаполнитьЗаголовокВидНоменклатуры(ЗаголовокВидНоменклатуры);
	Элементы.ВидНоменклатурыДляОтбора.Заголовок = ЗаголовокВидНоменклатуры;
	Элементы.ВидНоменклатуры.Заголовок = ЗаголовокВидНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическогоСписка(ИмяРеквизита)
	
	ОтборКомпоновкиДанных = ЭтотОбъект.Список.КомпоновщикНастроек.Настройки.Отбор;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		ОтборКомпоновкиДанных,
		ИмяРеквизита);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ОтборКомпоновкиДанных,
		ИмяРеквизита,
		ЭтаФорма[ИмяРеквизита],
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизита]));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущийТорговыйОбъект()

	Результат = ОбщегоНазначенияРМК.ТекущийТорговыйОбъект();
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ТекущийТорговыйОбъектПоУмолчанию();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекущийТорговыйОбъектПоУмолчанию()

	Результат = Неопределено;
	ИмяКлассаМетаданныхХранящихТекущийТорговыйОбъект = "ПараметрыСеанса";
	ИмяМетаданныхХранящихТекущийТорговыйОбъект = "ТекущийТорговыйОбъект";
	
	ДанныеСуществуют =
			Метаданные[ИмяКлассаМетаданныхХранящихТекущийТорговыйОбъект].
				Найти(ИмяМетаданныхХранящихТекущийТорговыйОбъект) <> Неопределено;
	
	Если ДанныеСуществуют Тогда
		
		Если СтрНайти(ИмяКлассаМетаданныхХранящихТекущийТорговыйОбъект, "ПараметрыСеанса") Тогда
			Результат = ПараметрыСеанса[ИмяМетаданныхХранящихТекущийТорговыйОбъект];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

