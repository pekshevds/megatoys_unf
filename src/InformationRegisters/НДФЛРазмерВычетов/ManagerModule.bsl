#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Обновляет данные размеров вычетов НДФЛ в регистре
//
// Параметры:
//  Идентификатор           - Строка - идентификатор классификатора в сервисе классификаторов.
//                            Определяется в процедуре ПриДобавленииКлассификаторов.
//  Версия                  - Число - номер загруженной версии;
//  Адрес                   - Строка - адрес двоичных данных файла обновления во
//                            временном хранилище;
//  Обработан               - Булево - если Ложь, при обработке файла обновления были ошибки
//                            и его необходимо загрузить повторно;
//  ДополнительныеПараметры - Структура - содержит дополнительные параметры обработки.
//                            Необходимо использовать для передачи значений в переопределяемый
//                            метод РаботаСКлассификаторамиВМоделиСервисаПереопределяемый.ПриОбработкеОбластиДанных
//                            и метод ИнтеграцияПодсистемБИП.ПриОбработкеОбластиДанных..
Процедура ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан, ДополнительныеПараметры) Экспорт
	
	Если Идентификатор <> "PITDeductions" Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ТекстXML = РаботаСКлассификаторамиПереопределяемый.ДвоичныеДанныеВСтроку(ДвоичныеДанные, КодировкаТекста.UTF8);
	
	ЗагружаемыеСведения = ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекстXML);
	
	МодульРаботаСКлассификаторами = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		ТекущаяВерсия = МодульРаботаСКлассификаторами.ВерсияКлассификатора(ЗагружаемыеСведения.Идентификатор, Истина);
		Если ЗагружаемыеСведения.Версия < ТекущаяВерсия Тогда

			// В данную ветку процесс попадает когда пользователь хочет сбросить данные регистра до значений по умолчанию,
			// но версия загруженных данных классификатора выше версии из макета в метаданных.
			// Проверка возможности загрузки обновления из веб-сервиса.
			СведенияИзВебСервиса = РаботаСКлассификаторамиПереопределяемый.ПолучитьДанныеКлассификатораИзСервиса(ЗагружаемыеСведения.Идентификатор);
			Если СведенияИзВебСервиса = Неопределено
				Или СведенияИзВебСервиса.Версия < ТекущаяВерсия
				Или ВРег(СведенияИзВебСервиса.ПолноеИмя) <> ВРег(ЗагружаемыеСведения.ПолноеИмя) Тогда
				Возврат; // Пользователь загружал обновление из файла.
			КонецЕсли;
			// Загрузка обновления из веб-сервиса.
			ЗагружаемыеСведения = СведенияИзВебСервиса;
		КонецЕсли;
	КонецЕсли;
	
	// Поиск ссылок.
	ТаблицаЗагрузки = ЗагружаемыеСведения.Данные;
	
	НаборЗаписей = РегистрыСведений.НДФЛРазмерВычетов.СоздатьНаборЗаписей();
	
	Для Каждого СтрокаТаблицыЗагрузки Из ТаблицаЗагрузки Цикл
		
		ПолноеИмяПредопределенного = Сред(СтрокаТаблицыЗагрузки.КодВычета, СтрДлина("ПредопределенноеЗначение:") + 1);
		ПолноеИмяПредопределенного = СтрЗаменить(ПолноеИмяПредопределенного, "ВидыВычетов", "Вычеты");
		
		Если ЗначениеЗаполнено(ПолноеИмяПредопределенного) И ПредопределенныйЭлементОтсутствуетВМетаданных(ПолноеИмяПредопределенного) Тогда
			Продолжить
		КонецЕсли;
		
		ПредопределенныйЭлементСправочника = ОбщегоНазначения.ПредопределенныйЭлемент(ПолноеИмяПредопределенного);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Активность = Истина;
		НоваяЗапись.Период = СтрокаТаблицыЗагрузки.Период;
		
		НоваяЗапись.КодВычета = ПредопределенныйЭлементСправочника;
		НоваяЗапись.Размер = СтрокаТаблицыЗагрузки.Размер;
		НоваяЗапись.ОграничениеПоДоходам = СтрокаТаблицыЗагрузки.ОграничениеПоДоходам;
		
	КонецЦикла;

	НаборЗаписей.Записать();
	
	Если МодульРаботаСКлассификаторами <> Неопределено Тогда
		МодульРаботаСКлассификаторами.УстановитьВерсиюКлассификатора(ЗагружаемыеСведения.Идентификатор, ЗагружаемыеСведения.Версия);
	КонецЕсли;
	
	Обработан = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает Истина когда предопределенный элемент отсутствует в метаданных.
//
// Параметры:
//   ПолноеИмяПредопределенного - Строка - Полный путь к предопределенному элементу, включая его имя.
//     Формат аналогичен функции глобального контекста ПредопределенноеЗначение(), например:
//       - "Справочник.ВидыКонтактнойИнформации.EmailПользователя",
//       - "ПланСчетов.Хозрасчетный.Материалы",
//       - "ПланВидовРасчета.Начисления.ОплатаПоОкладу".
//
// Возвращаемое значение:
//   Булево - Результат проверки наличия предопределенного в метаданных.
//       Истина - Предопределенного нет в метаданных.
//       Ложь - Во всех остальных ситуациях.
//
Функция ПредопределенныйЭлементОтсутствуетВМетаданных(ПолноеИмяПредопределенного)
	ЧастиПолногоИмениВРег = СтрРазделить(ВРег(ПолноеИмяПредопределенного), ".");
	Если ЧастиПолногоИмениВРег.Количество() <> 3 Тогда
		Возврат Ложь; // Некорректный формат параметра.
	КонецЕсли;
	
	ВидОМВРег               = ЧастиПолногоИмениВРег[0];
	ИмяОМВРег               = ЧастиПолногоИмениВРег[1];
	ИмяПредопределенногоРег = ЧастиПолногоИмениВРег[2];
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ВидОМВРег + "." + ИмяОМВРег);
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Ложь; // Объект метаданных не найден.
	КонецЕсли;
	
	Если ВидОМВРег = ВРег("Справочник")
		Или ВидОМВРег = ВРег("ПланВидовХарактеристик")
		Или ВидОМВРег = ВРег("ПланСчетов")
		Или ВидОМВРег = ВРег("ПланВидовРасчета") Тогда
		
		Если ИмяПредопределенногоРег = "ПУСТАЯССЫЛКА" Тогда
			Возврат Ложь; // Предопределенный найден в метаданных.
		КонецЕсли;
		
		ИменаПредопределенных = МетаданныеОбъекта.ПолучитьИменаПредопределенных();
		
		Для Каждого Имя Из ИменаПредопределенных Цикл
			Если ВРег(Имя) = ИмяПредопределенногоРег Тогда
				Возврат Ложь; // Предопределенный найден в метаданных.
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина; // Предопределенный не найден в метаданных.
		
	ИначеЕсли ВидОМВРег = ВРег("Перечисление") Тогда
		
		Если ИмяПредопределенногоРег = "ПУСТАЯССЫЛКА" Тогда
			Возврат Ложь; // Предопределенный найден в метаданных.
		КонецЕсли;
		
		Если ТипЗнч(МетаданныеОбъекта.ЗначенияПеречисления.Найти(ИмяПредопределенногоРег)) = Тип("ОбъектМетаданных") Тогда
			Возврат Ложь; // Предопределенный найден в метаданных.
		КонецЕсли;
		
		Возврат Истина; // Предопределенный не найден в метаданных.
		
	КонецЕсли;
	
	Возврат Ложь; // Проверка вида объекта метаданных не поддерживается.
КонецФункции

#КонецОбласти

#КонецЕсли