#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура - Записать планируемое рабочее время сотрудников
//
// Параметры:
//  ТаблицаРегистра	 - ТаблицаЗначений - таблица для записи в регистр
//		* РабочаяСмена - СправочникСсылка.РабочиеСменыСтруктурныхЕдиниц - рабочая смена для записи
//		* Сотрудник - СправочникСсылка.Сотрудники - сотрудник для записи
//		* Период - Дата - период записи
//
Процедура ЗаписатьПланируемоеРабочееВремяСотрудников(ТаблицаРегистра) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ПланируемоеРабочееВремяСотрудников");
		БлокировкаДанных.Заблокировать();
		
		Если ТаблицаРегистра.Количество() > 0 Тогда
			
			ЗапросПоЗаписям = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаРегистра.РабочаяСмена КАК РабочаяСмена,
			|	ТаблицаРегистра.Сотрудник КАК Сотрудник,
			|	ТаблицаРегистра.Период КАК Период
			|ПОМЕСТИТЬ ТаблицаРегистра
			|ИЗ
			|	&ТаблицаРегистра КАК ТаблицаРегистра
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПланируемоеРабочееВремяСотрудников.РабочаяСмена КАК РабочаяСмена,
			|	ПланируемоеРабочееВремяСотрудников.Должность КАК Должность,
			|	ПланируемоеРабочееВремяСотрудников.Период КАК Период,
			|	ПланируемоеРабочееВремяСотрудников.Сотрудник КАК Сотрудник
			|ИЗ
			|	РегистрСведений.ПланируемоеРабочееВремяСотрудников КАК ПланируемоеРабочееВремяСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистра КАК ТаблицаРегистра
			|		ПО (ТаблицаРегистра.РабочаяСмена = ПланируемоеРабочееВремяСотрудников.РабочаяСмена)
			|			И (НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(ПланируемоеРабочееВремяСотрудников.Период, ДЕНЬ))
			|			И ПланируемоеРабочееВремяСотрудников.Сотрудник = ТаблицаРегистра.Сотрудник");
			
			ЗапросПоЗаписям.УстановитьПараметр("ТаблицаРегистра",ТаблицаРегистра);
			ВыборкаПоЗаписям = ЗапросПоЗаписям.Выполнить().Выбрать();
			
			Пока ВыборкаПоЗаписям.Следующий() Цикл
				
				МенеджерЗаписи = РегистрыСведений.ПланируемоеРабочееВремяСотрудников.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаПоЗаписям);
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.Удалить();
				
			КонецЦикла;
			
			Для Каждого СтрокаТаблицыРегистра Из ТаблицаРегистра Цикл
				
				Если НЕ СтрокаТаблицыРегистра.Очистить Тогда
					
					НаборЗаписей = РегистрыСведений.ПланируемоеРабочееВремяСотрудников.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Период.Установить(СтрокаТаблицыРегистра.Период);
					НаборЗаписей.Отбор.РабочаяСмена.Установить(СтрокаТаблицыРегистра.РабочаяСмена);
					НаборЗаписей.Отбор.Должность.Установить(СтрокаТаблицыРегистра.Должность);
					НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаТаблицыРегистра.Сотрудник);
					
					НаборЗаписей.Прочитать();
					
					НаборЗаписей.Очистить();
					
					Строка = НаборЗаписей.Добавить();
					
					ЗаполнитьЗначенияСвойств(Строка, СтрокаТаблицыРегистра);
					
					НаборЗаписей.Записать(Истина);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИмяСобытия = НСтр("ru='Записать планируемое время'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

// Функция - Заполнить продолжительность рабочего дня на неделю
//
// Параметры:
//  СтруктураПараметров	 - Структура:
//		* ДеревоРегистра - ДеревоЗначений - дерево регистра формы планирования
//		* ТекущаяСтрока - Структура - текущая строка дерева
//		* КэшЗначений - Структура - кэш значений формы
// 
// Возвращаемое значение:
//  СтруктураЗначений - результат заполнения
//
Функция ЗаполнитьПродолжительностьРабочегоДняНаНеделю(СтруктураПараметров) Экспорт
	
	ДеревоРегистра = СтруктураПараметров.ДеревоРегистра;
	
	Отбор = СтруктураПараметров.ТекущаяСтрока;
	КэшЗначений = СтруктураПараметров.КэшЗначений;
	ЗаполнениеСОтбором = Отбор <> Неопределено;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДеревоРегистра", ДеревоРегистра);
	СтруктураПараметров.Вставить("ЗаполнениеСОтбором", ЗаполнениеСОтбором);
	СтруктураПараметров.Вставить("КэшЗначений", КэшЗначений);
	СтруктураПараметров.Вставить("Отбор", Отбор);
	
	Для каждого СтрокаСклад Из ДеревоРегистра.Строки Цикл

		СтруктураПараметров.Вставить("УзелПодразделение", СтрокаСклад);
		
		ОбработатьСтрокуСкладПриЗаполненииРабочегоДня(СтруктураПараметров);

	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ИмяКолонки = "";
	Иначе
		ИмяКолонки = Отбор.ИмяКолонки;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ДеревоРегистра", ДеревоРегистра);
	Результат.Вставить("КэшЗначений", КэшЗначений);
	Результат.Вставить("ЗаполнениеВсегоДерева", НЕ ЗаполнениеСОтбором);
	Результат.Вставить("ИмяКолонки", ИмяКолонки); 
	Возврат Результат;
	
КонецФункции

// Функция - Заполнить актуальный график работы
//
// Параметры:
//  СтруктураПараметров	 - Структура:
//		*ОтборОрганизация - СправочникСсылка.Организации - отбор по организации
//		*ОтборПодразделение - СправочникСсылка.СтруктурныеЕдиницы - отбор по подразделению
//		*ОтборСклад - СправочникСсылка.СтруктурныеЕдиницы - отбор по складу
//		*НачалоНедели - Дата - дата начала недели
// 
// Возвращаемое значение:
//  Структура:
//		* ДеревоРезультата - ДеревоЗначений - дерево для формы планирования
//		* ИтогиПоЧасам - ТаблицаЗначений - таблица итогов по часам по сотрудникам
//
Функция ЗаполнитьАктуальныйГрафикРаботы(СтруктураПараметров) Экспорт
	
	ОтборОрганизация = СтруктураПараметров.ОтборОрганизация;
	ОтборПодразделение = СтруктураПараметров.ОтборПодразделение;
	ОтборСклад = СтруктураПараметров.ОтборСклад;
	НачалоНедели = СтруктураПараметров.НачалоНедели;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаАктуальногоГрафикаРаботы(СтруктураПараметров);
	Запрос.УстановитьПараметр("Организация", ОтборОрганизация);
	Запрос.УстановитьПараметр("Подразделение", ОтборПодразделение);
	Запрос.УстановитьПараметр("Склад", ОтборСклад);
	
	Запрос.УстановитьПараметр("НачалоНедели", НачалоНедели);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗаполнения = Новый Структура;
	
	РезультатЗаполнения.Вставить("ДеревоРезультата", РезультатЗапроса[РезультатЗапроса.Количество() - 2]);
	
	РезультатИтогиПоЧасам = РезультатЗапроса[РезультатЗапроса.Количество() - 1];
	ИтогиПоЧасам = СформироватьКоллекциюИтоговПоЧасам(РезультатИтогиПоЧасам);
	РезультатЗаполнения.Вставить("ИтогиПоЧасам", ИтогиПоЧасам);
	
	Возврат РезультатЗаполнения;
	
КонецФункции
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПланГрафикСПодписью") Тогда
		
		ТабличныйДокумент = ПечатьПланГрафикСПодписью(ПараметрыПечати);
		ПараметрыВывода.Вставить("ЗаголовокФормы", НСтр("ru = 'Запланированное время сотрудников'"));
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПланГрафикСПодписью",
			НСтр("ru = 'Запланированное время сотрудников'"),
			ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИтогМинутПоСотрудникуЗаДеньНедели(ИтогиПоМинутам, Сотрудник, Дата, СтароеЗначение = 0, НовоеЗначение = 0) Экспорт
	
	Если ИтогиПоМинутам <> Неопределено Тогда
		
		СтрокаИтогов  = ИтогиПоМинутам.Получить(Дата);
		Если СтрокаИтогов <> Неопределено Тогда
			
			СтруктураИтогов = СтрокаИтогов.Получить(Сотрудник);
			Если СтруктураИтогов <> Неопределено Тогда
				
				СтруктураИтогов.ИтогМинут = СтруктураИтогов.ИтогМинут - СтароеЗначение + НовоеЗначение;
				СтруктураИтогов.ИтогМинут = ?(СтруктураИтогов.ИтогМинут < 0, 0, СтруктураИтогов.ИтогМинут);
				СтрокаИтогов.Вставить(Сотрудник, СтруктураИтогов);
				
				Возврат СтруктураИтогов.ИтогМинут;
				
			Иначе
				
				СтруктураИтогов = Новый Структура("ИдентификаторыСтрок, ИтогМинут", Новый Массив, НовоеЗначение);
				СтрокаИтогов.Вставить(Сотрудник, СтруктураИтогов);
				Возврат НовоеЗначение;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьСтрокуСкладПриЗаполненииРабочегоДня(СтруктураПараметров)
	
	Для каждого УзелРабочаяСмена Из СтруктураПараметров.УзелПодразделение.Строки Цикл
		
		СтруктураПараметров.Вставить("УзелРабочаяСмена", УзелРабочаяСмена);
		
		ОбработатьСтрокуРабочейСменыПриЗаполненииРабочегоДня(СтруктураПараметров);
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьСтрокуРабочейСменыПриЗаполненииРабочегоДня(СтруктураПараметров)
	
	Для каждого УзелДолжность Из СтруктураПараметров.УзелРабочаяСмена.Строки Цикл
		
		СтруктураПараметров.Вставить("УзелДолжность", УзелДолжность);
		
		ОбработатьСтрокуДолжностиПриЗаполненииРабочегоДня(СтруктураПараметров);
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьСтрокуДолжностиПриЗаполненииРабочегоДня(СтруктураПараметров)
	
	Для каждого СтрокаСотрудника Из СтруктураПараметров.УзелДолжность.Строки Цикл
		
		СтруктураПараметров.Вставить("СтрокаСотрудника", СтрокаСотрудника);
		
		ОбработатьСтрокуСотрудникаПриЗаполненииРабочегоДня(СтруктураПараметров);
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьСтрокуСотрудникаПриЗаполненииРабочегоДня(СтруктураПараметров)
	
	ДеревоРегистра = СтруктураПараметров.ДеревоРегистра;
	ЗаполнениеСОтбором = СтруктураПараметров.ЗаполнениеСОтбором;
	КэшЗначений = СтруктураПараметров.КэшЗначений;
	Отбор = СтруктураПараметров.Отбор;
	СтрокаСотрудника = СтруктураПараметров.СтрокаСотрудника;
	УзелДолжность = СтруктураПараметров.УзелДолжность;
	УзелПодразделение = СтруктураПараметров.УзелПодразделение;
	УзелРабочаяСмена = СтруктураПараметров.УзелРабочаяСмена;
	
	Если ЗаполнениеСОтбором Тогда
		ДанныеДереваСоответствуютОтбору = УзелПодразделение.РаботаСотрудник = Отбор.Подразделение
		И УзелРабочаяСмена.РаботаСотрудник = Отбор.РабочаяСмена
		И УзелДолжность.РаботаСотрудник = Отбор.Должность
		И СтрокаСотрудника.РаботаСотрудник = Отбор.Сотрудник;
		
		Если ДанныеДереваСоответствуютОтбору Тогда
			
			РассчитатьДлинуРабочегоДняНаНеделюПоСотруднику(СтрокаСотрудника, ДеревоРегистра, Отбор.ИмяКолонки, КэшЗначений);
			
		КонецЕсли;
		
	Иначе
		
		РассчитатьДлинуРабочегоДняНаНеделюПоСотруднику(СтрокаСотрудника, ДеревоРегистра, Неопределено, КэшЗначений);
		
	КонецЕсли;

КонецПроцедуры

Функция СформироватьКоллекциюИтоговПоЧасам(РезультатИтогиПоЧасам)
	
	ИтогиПоЧасам = Новый Соответствие;
	ВыборкаДней = РезультатИтогиПоЧасам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДней.Следующий() Цикл
		
		СтруктураСотрудников = Новый Соответствие;
		ВыборкаДетали = ВыборкаДней.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			
			СтруктураСотрудника = Новый Структура("ИтогМинут", ВыборкаДетали.ИтогМинут);
			СтруктураСотрудника.Вставить("ИдентификаторыСтрок", Новый Массив);
			
			СтруктураСотрудников.Вставить(ВыборкаДетали.Сотрудник, СтруктураСотрудника);
			
		КонецЦикла;
		
		ИтогиПоЧасам.Вставить(ВыборкаДней.Дата, СтруктураСотрудников);
		
	КонецЦикла;
	
	Возврат ИтогиПоЧасам;
	
КонецФункции

Процедура РассчитатьДлинуРабочегоДняНаНеделюПоСотруднику(СтрокаСотрудник, ДеревоРегистра, ИмяКолонкиОтбора, КэшЗначений)
	
	Сотрудник = СтрокаСотрудник.РаботаСотрудник;
	НачалоНедели = СтрокаСотрудник.Родитель.Родитель.Родитель.ПонедельникДата;
	
	ГрафикРаботыДляЗаполнения = СтрокаСотрудник.ГрафикРаботыСотрудника;
	
	Если НЕ ЗначениеЗаполнено(ГрафикРаботыДляЗаполнения) Тогда
		
		ГрафикРаботыДляЗаполнения = СтрокаСотрудник.Родитель.Родитель.Родитель.ГрафикРаботыСклада;
		
	КонецЕсли;
		
	ДанныеГрафика = ПолучитьДанныеГрафикаНаНеделюДляСотрудника(Сотрудник, ГрафикРаботыДляЗаполнения, НачалоНедели);
	
	ОтборПоКолонке = ИмяКолонкиОтбора <> Неопределено;
	Для каждого Колонка Из ДеревоРегистра.Колонки Цикл
		
		Если ОтборПоКолонке И Колонка.Имя <> ИмяКолонкиОтбора Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКолонки = Колонка.Имя;
		Если Найти(ИмяКолонки, КэшЗначений.ОкончаниеДобавлен) <> 0
			И Найти(ИмяКолонки, КэшЗначений.ОкончаниеДобавленИтог) = 0 Тогда
			
			СтрокаУровеньСклад = СтрокаСотрудник.Родитель.Родитель.Родитель;
			СтрокаУровеньДолжность = СтрокаСотрудник.Родитель;
			ДеньНедели = ПолучитьДеньНеделиИзИмениКолонки(ИмяКолонки, КэшЗначений.ИменаПолейДнейНедели);
			
			ДатаДняНедели = НачалоДня(СтрокаУровеньСклад[ДеньНедели + "Дата"]);
			
			ИмяКолонкиДобавлен = ДеньНедели + КэшЗначений.ОкончаниеДобавлен;
			ИмяКолонкиДобавленИтог = ДеньНедели + КэшЗначений.ОкончаниеДобавленИтог;
			
			ПредыдущееЗначение = СтрокаСотрудник[ИмяКолонкиДобавлен];
			
			НайденДеньГрафика = ДанныеГрафика.Найти(ДатаДняНедели, "День");
			Если НайденДеньГрафика <> Неопределено Тогда
				
				СтароеЗначение = Час(СтрокаСотрудник[ИмяКолонкиДобавлен]) * 60;
				СтрокаСотрудник[ИмяКолонкиДобавлен] 
					= Дата(1, 1, 1, НайденДеньГрафика.ЧасыРаботы, 0, 0);
				НовоеЗначение = НайденДеньГрафика.ЧасыРаботы * 60;
		
				ИтогПоСотруднику = ИтогМинутПоСотрудникуЗаДеньНедели(КэшЗначений.ИтогиПоЧасам, Сотрудник, ДатаДняНедели, СтароеЗначение, НовоеЗначение);
				Если ЗначениеЗаполнено(НайденДеньГрафика.ЧасыРаботы) Тогда
					
					Часы = Цел(ИтогПоСотруднику / 60);
					Минуты = ИтогПоСотруднику - Часы * 60;
					Если Часы > 23 Тогда
						Часы = 23;
						Минуты = 59;
					КонецЕсли;
					
					ДатаИтогПоСотруднику = Дата(1, 1, 1, Часы, Минуты, 0);
					СтрокаСотрудник[ИмяКолонкиДобавленИтог] = ПолучитьИтогПоСотрудникуЗаДеньСтрокой(СтрокаСотрудник[ИмяКолонкиДобавлен], ДатаИтогПоСотруднику)
					
				КонецЕсли;
				
			Иначе
				
				СтрокаСотрудник[ИмяКолонкиДобавлен] 
					= Дата(1, 1, 1, 0, 0, 0);
				
			КонецЕсли;
			
			Если ПредыдущееЗначение <> СтрокаСотрудник[ИмяКолонкиДобавлен] Тогда
				СтрокаСотрудник[ДеньНедели + КэшЗначений.ОкончаниеРучнаяПравка] = Истина;
			КонецЕсли;
				
			ОбновитьИтогПоСтрокеДолжность(СтрокаУровеньДолжность, ДеньНедели, КэшЗначений);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьДеньНеделиИзИмениКолонки(ИмяКолонки, ИменаПолейДнейНедели)
	
	Для каждого ОкончаниеИмениПоля Из ИменаПолейДнейНедели Цикл
	
		Если СтрНайти(ИмяКолонки, ОкончаниеИмениПоля) <> 0 Тогда
			
			Возврат СтрЗаменить(ИмяКолонки, ОкончаниеИмениПоля, "");
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецФункции

Функция ПолучитьДанныеГрафикаНаНеделюДляСотрудника(Сотрудник, ГрафикРаботыСклада, НачалоНедели)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботыСклада);
	Запрос.УстановитьПараметр("НачалоНедели", НачалоНедели);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
	               |	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) КАК День,
	               |	СУММА(ГрафикиРаботы.ЧасыРаботы) КАК ЧасыРаботы
	               |ПОМЕСТИТЬ ДанныеГрафикаПодразделения
	               |ИЗ
	               |	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	               |ГДЕ
	               |	ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
	               |	И ГрафикиРаботы.ВремяНачала >= &НачалоНедели
	               |	И ГрафикиРаботы.ВремяОкончания <= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&НачалоНедели, ДЕНЬ), ДЕНЬ, 7)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ГрафикиРаботы.ГрафикРаботы,
	               |	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеСотрудников.ГрафикРаботы КАК ГрафикРаботы
	               |ПОМЕСТИТЬ ГрафикСотрудника
	               |ИЗ
	               |	РегистрСведений.Сотрудники.СрезПоследних(&НачалоНедели, Сотрудник = &Сотрудник) КАК ДанныеСотрудников
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
	               |	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) КАК День,
	               |	СУММА(ГрафикиРаботы.ЧасыРаботы) КАК ЧасыРаботы
	               |ПОМЕСТИТЬ ДанныеГрафикаСотрудника
	               |ИЗ
	               |	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	               |ГДЕ
	               |	ГрафикиРаботы.ГрафикРаботы В
	               |			(ВЫБРАТЬ
	               |				Таблица.ГрафикРаботы
	               |			ИЗ
	               |				ГрафикСотрудника КАК Таблица)
	               |	И ГрафикиРаботы.ВремяНачала >= &НачалоНедели
	               |	И ГрафикиРаботы.ВремяОкончания <= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&НачалоНедели, ДЕНЬ), ДЕНЬ, 7)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ГрафикиРаботы.ГрафикРаботы,
	               |	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеГрафикаПодразделения.ГрафикРаботы КАК ГрафикРаботы,
	               |	ДанныеГрафикаПодразделения.День КАК День,
	               |	ЕСТЬNULL(ДанныеГрафикаСотрудника.ЧасыРаботы, ДанныеГрафикаПодразделения.ЧасыРаботы) КАК ЧасыРаботы
	               |ИЗ
	               |	ДанныеГрафикаПодразделения КАК ДанныеГрафикаПодразделения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеГрафикаСотрудника КАК ДанныеГрафикаСотрудника
	               |		ПО ДанныеГрафикаПодразделения.День = ДанныеГрафикаСотрудника.День";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОбновитьИтогПоСтрокеДолжность(СтрокаДолжность, ДеньНедели, КэшЗначений)
	
	КоличествоУстановленных = 0;
	Для каждого СтрокаСотрудник Из СтрокаДолжность.Строки Цикл
	
		Если ЗначениеЗаполнено(СтрокаСотрудник[ДеньНедели + КэшЗначений.ОкончаниеДобавлен]) Тогда
			КоличествоУстановленных = КоличествоУстановленных + 1;
		КонецЕсли;
	
	КонецЦикла;
	СтрокаДолжность[ДеньНедели + КэшЗначений.ОкончаниеДобавлен] 
		= СтрШаблон(КэшЗначений.ШаблонЗаполненияИтогов, 
			КоличествоУстановленных, 
			СтрокаДолжность[ДеньНедели + КэшЗначений.ОкончаниеКоличествоСотрудниковСмены]);
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаАктуальногоГрафикаРаботы(Параметры)
	
	Текст = "ВЫБРАТЬ
	        |	ТаблицаСоСкладами.Ссылка КАК Склад
	        |ПОМЕСТИТЬ Склады
	        |ИЗ
	        |	Справочник.СтруктурныеЕдиницы КАК ТаблицаСоСкладами
	        |ГДЕ
	        |	ТаблицаСоСкладами.ТипСтруктурнойЕдиницы В (ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад), ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница), ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет))
	        |	И &УсловиеСклада
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	РабочиеСменыСтруктурныхЕдиниц.Ссылка КАК РабочаяСмена,
	        |	РабочиеСменыСтруктурныхЕдиниц.Склад КАК Склад
	        |ПОМЕСТИТЬ РабочиеСменыСкладов
	        |ИЗ
	        |	Справочник.РабочиеСменыСтруктурныхЕдиниц КАК РабочиеСменыСтруктурныхЕдиниц
	        |ГДЕ
	        |	РабочиеСменыСтруктурныхЕдиниц.Склад В
	        |			(ВЫБРАТЬ
	        |				Склады.Склад
	        |			ИЗ
	        |				Склады КАК Склады)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	РабочиеСменыСтруктурныхЕдиницДолжностиСотрудников.ДолжностьСотрудника КАК Должность,
	        |	СУММА(РабочиеСменыСтруктурныхЕдиницДолжностиСотрудников.КоличествоСотрудников) КАК Количество,
	        |	РабочиеСмены.РабочаяСмена КАК РабочаяСмена,
	        |	РабочиеСмены.Склад КАК Склад
	        |ПОМЕСТИТЬ ДолжностиРабочиеСмены
	        |ИЗ
	        |	Справочник.РабочиеСменыСтруктурныхЕдиниц.ДолжностиСотрудников КАК РабочиеСменыСтруктурныхЕдиницДолжностиСотрудников
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РабочиеСменыСкладов КАК РабочиеСмены
	        |		ПО РабочиеСменыСтруктурныхЕдиницДолжностиСотрудников.Ссылка = РабочиеСмены.РабочаяСмена
	        |ГДЕ
	        |	РабочиеСменыСтруктурныхЕдиницДолжностиСотрудников.Ссылка В
	        |			(ВЫБРАТЬ
	        |				РабочиеСмены.РабочаяСмена
	        |			ИЗ
	        |				РабочиеСменыСкладов КАК РабочиеСмены)
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	РабочиеСменыСтруктурныхЕдиницДолжностиСотрудников.ДолжностьСотрудника,
	        |	РабочиеСмены.РабочаяСмена,
	        |	РабочиеСмены.Склад
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	СотрудникиСрезПоследних.Организация КАК Организация,
	        |	Сотрудники.Ссылка КАК Сотрудник,
	        |	СотрудникиСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	        |	СотрудникиСрезПоследних.Должность КАК Должность,
	        |	СотрудникиСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
	        |ПОМЕСТИТЬ Сотрудники
	        |ИЗ
	        |	Справочник.Сотрудники КАК Сотрудники
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники.СрезПоследних(
	        |				&НачалоНедели,
	        |				Должность В
	        |						(ВЫБРАТЬ
	        |							ДолжностиРабочиеСмены.Должность
	        |						ИЗ
	        |							ДолжностиРабочиеСмены)
	        |					И &УсловиеОрганизации
	        |					И &УсловиеПодразделения) КАК СотрудникиСрезПоследних
	        |		ПО Сотрудники.Ссылка = СотрудникиСрезПоследних.Сотрудник
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ДолжностиРабочиеСмены.Должность КАК ДолжностьСмены,
	        |	ДолжностиРабочиеСмены.Количество КАК Количество,
	        |	ДолжностиРабочиеСмены.РабочаяСмена КАК РабочаяСмена,
	        |	ДолжностиРабочиеСмены.Склад КАК Склад,
	        |	Сотрудники.Организация КАК Организация,
	        |	Сотрудники.Сотрудник КАК Сотрудник,
	        |	Сотрудники.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	        |	Сотрудники.Должность КАК ДолжностьСотрудника,
	        |	Сотрудники.ГрафикРаботы КАК ГрафикРаботыСотрудника
	        |ПОМЕСТИТЬ ДолжностиРабочиеСменыСотрудники
	        |ИЗ
	        |	ДолжностиРабочиеСмены КАК ДолжностиРабочиеСмены
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Сотрудники КАК Сотрудники
	        |		ПО ДолжностиРабочиеСмены.Должность = Сотрудники.Должность
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ГрафикиРаботыСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница КАК Склад,
	        |	ГрафикиРаботыСтруктурныхЕдиницСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
	        |ПОМЕСТИТЬ ГрафикиСкладов
	        |ИЗ
	        |	РегистрСведений.ГрафикиРаботыСтруктурныхЕдиниц.СрезПоследних(
	        |			&НачалоНедели,
	        |			СтруктурнаяЕдиница В
	        |				(ВЫБРАТЬ
	        |					Склады.Склад
	        |				ИЗ
	        |					Склады)) КАК ГрафикиРаботыСтруктурныхЕдиницСрезПоследних
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
	        |	ВЫБОР
	        |		КОГДА ДЕНЬНЕДЕЛИ(ДанныеПроизводственногоКалендаря.Дата) = 1
	        |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	        |		КОГДА ДЕНЬНЕДЕЛИ(ДанныеПроизводственногоКалендаря.Дата) = 2
	        |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	        |		КОГДА ДЕНЬНЕДЕЛИ(ДанныеПроизводственногоКалендаря.Дата) = 3
	        |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
	        |		КОГДА ДЕНЬНЕДЕЛИ(ДанныеПроизводственногоКалендаря.Дата) = 4
	        |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
	        |		КОГДА ДЕНЬНЕДЕЛИ(ДанныеПроизводственногоКалендаря.Дата) = 5
	        |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
	        |		КОГДА ДЕНЬНЕДЕЛИ(ДанныеПроизводственногоКалендаря.Дата) = 6
	        |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	        |		КОГДА ДЕНЬНЕДЕЛИ(ДанныеПроизводственногоКалендаря.Дата) = 7
	        |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	        |	КОНЕЦ КАК ДеньНедели,
	        |	ВЫБОР
	        |		КОГДА ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	        |			ТОГДА 1
	        |		ИНАЧЕ 0
	        |	КОНЕЦ КАК РабочийДень
	        |ПОМЕСТИТЬ ДанныеПроизводственногоКалендаря
	        |ИЗ
	        |	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	        |ГДЕ
	        |	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, ДЕНЬ) >= НАЧАЛОПЕРИОДА(&НачалоНедели, ДЕНЬ)
	        |	И ДанныеПроизводственногоКалендаря.Дата <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоНедели, ДЕНЬ, 6), ДЕНЬ)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	СУММА(ДанныеГрафикаСклада.ЧасыРаботы) КАК ЧасыРаботы,
	        |	НАЧАЛОПЕРИОДА(ДанныеГрафикаСклада.ВремяНачала, ДЕНЬ) КАК День,
	        |	ГрафикиСкладов.Склад КАК Склад,
	        |	ГрафикиСкладов.ГрафикРаботы КАК ГрафикРаботы
	        |ПОМЕСТИТЬ ДанныеГрафикаСклада
	        |ИЗ
	        |	РегистрСведений.ГрафикиРаботы КАК ДанныеГрафикаСклада
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиСкладов КАК ГрафикиСкладов
	        |		ПО ДанныеГрафикаСклада.ГрафикРаботы = ГрафикиСкладов.ГрафикРаботы
	        |ГДЕ
	        |	ДанныеГрафикаСклада.ГрафикРаботы В
	        |			(ВЫБРАТЬ
	        |				Таблица.ГрафикРаботы
	        |			ИЗ
	        |				ГрафикиСкладов КАК Таблица)
	        |	И НАЧАЛОПЕРИОДА(ДанныеГрафикаСклада.ВремяНачала, ДЕНЬ) >= &НачалоНедели
	        |	И КОНЕЦПЕРИОДА(ДанныеГрафикаСклада.ВремяОкончания, ДЕНЬ) <= ДОБАВИТЬКДАТЕ(&НачалоНедели, ДЕНЬ, 7)
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	НАЧАЛОПЕРИОДА(ДанныеГрафикаСклада.ВремяНачала, ДЕНЬ),
	        |	ГрафикиСкладов.Склад,
	        |	ГрафикиСкладов.ГрафикРаботы
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	МИНИМУМ(ДанныеГрафикаСклада.ВремяНачала) КАК ВремяНачала,
	        |	НАЧАЛОПЕРИОДА(ДанныеГрафикаСклада.ВремяНачала, ДЕНЬ) КАК День,
	        |	ГрафикиСкладов.Склад КАК Склад,
	        |	ГрафикиСкладов.ГрафикРаботы КАК ГрафикРаботы
	        |ПОМЕСТИТЬ ДанныеГрафикаСкладаВремя
	        |ИЗ
	        |	РегистрСведений.ГрафикиРаботы КАК ДанныеГрафикаСклада
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиСкладов КАК ГрафикиСкладов
	        |		ПО ДанныеГрафикаСклада.ГрафикРаботы = ГрафикиСкладов.ГрафикРаботы
	        |ГДЕ
	        |	ДанныеГрафикаСклада.ГрафикРаботы В
	        |			(ВЫБРАТЬ
	        |				Таблица.ГрафикРаботы
	        |			ИЗ
	        |				ГрафикиСкладов КАК Таблица)
	        |	И НАЧАЛОПЕРИОДА(ДанныеГрафикаСклада.ВремяНачала, ДЕНЬ) >= &НачалоНедели
	        |	И КОНЕЦПЕРИОДА(ДанныеГрафикаСклада.ВремяОкончания, ДЕНЬ) <= ДОБАВИТЬКДАТЕ(&НачалоНедели, ДЕНЬ, 7)
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	НАЧАЛОПЕРИОДА(ДанныеГрафикаСклада.ВремяНачала, ДЕНЬ),
	        |	ГрафикиСкладов.Склад,
	        |	ГрафикиСкладов.ГрафикРаботы
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	СУММА(ДанныеГрафиковСотрудников.ЧасыРаботы) КАК ЧасыРаботы,
	        |	НАЧАЛОПЕРИОДА(ДанныеГрафиковСотрудников.ВремяНачала, ДЕНЬ) КАК День,
	        |	Сотрудники.Сотрудник КАК Сотрудник,
	        |	Сотрудники.ГрафикРаботы КАК ГрафикРаботы
	        |ПОМЕСТИТЬ ДанныеГрафиковСотрудников
	        |ИЗ
	        |	РегистрСведений.ГрафикиРаботы КАК ДанныеГрафиковСотрудников
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Сотрудники КАК Сотрудники
	        |		ПО ДанныеГрафиковСотрудников.ГрафикРаботы = Сотрудники.ГрафикРаботы
	        |ГДЕ
	        |	ДанныеГрафиковСотрудников.ГрафикРаботы В
	        |			(ВЫБРАТЬ
	        |				Таблица.ГрафикРаботы
	        |			ИЗ
	        |				Сотрудники КАК Таблица)
	        |	И НАЧАЛОПЕРИОДА(ДанныеГрафиковСотрудников.ВремяНачала, ДЕНЬ) >= &НачалоНедели
	        |	И КОНЕЦПЕРИОДА(ДанныеГрафиковСотрудников.ВремяОкончания, ДЕНЬ) <= ДОБАВИТЬКДАТЕ(&НачалоНедели, ДЕНЬ, 7)
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	НАЧАЛОПЕРИОДА(ДанныеГрафиковСотрудников.ВремяНачала, ДЕНЬ),
	        |	Сотрудники.Сотрудник,
	        |	Сотрудники.ГрафикРаботы
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	МИНИМУМ(ДанныеГрафиковСотрудников.ВремяНачала) КАК ВремяНачала,
	        |	НАЧАЛОПЕРИОДА(ДанныеГрафиковСотрудников.ВремяНачала, ДЕНЬ) КАК День,
	        |	Сотрудники.Сотрудник КАК Сотрудник,
	        |	Сотрудники.ГрафикРаботы КАК ГрафикРаботы
	        |ПОМЕСТИТЬ ДанныеГрафиковСотрудниковВремя
	        |ИЗ
	        |	РегистрСведений.ГрафикиРаботы КАК ДанныеГрафиковСотрудников
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Сотрудники КАК Сотрудники
	        |		ПО ДанныеГрафиковСотрудников.ГрафикРаботы = Сотрудники.ГрафикРаботы
	        |ГДЕ
	        |	ДанныеГрафиковСотрудников.ГрафикРаботы В
	        |			(ВЫБРАТЬ
	        |				Таблица.ГрафикРаботы
	        |			ИЗ
	        |				Сотрудники КАК Таблица)
	        |	И НАЧАЛОПЕРИОДА(ДанныеГрафиковСотрудников.ВремяНачала, ДЕНЬ) >= &НачалоНедели
	        |	И КОНЕЦПЕРИОДА(ДанныеГрафиковСотрудников.ВремяОкончания, ДЕНЬ) <= ДОБАВИТЬКДАТЕ(&НачалоНедели, ДЕНЬ, 7)
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	НАЧАЛОПЕРИОДА(ДанныеГрафиковСотрудников.ВремяНачала, ДЕНЬ),
	        |	Сотрудники.Сотрудник,
	        |	Сотрудники.ГрафикРаботы
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	Склады.Склад КАК Склад,
	        |	ЕСТЬNULL(ДолжностиРабочиеСменыСотрудники.РабочаяСмена, НЕОПРЕДЕЛЕНО) КАК РабочаяСмена,
	        |	ЕСТЬNULL(ДолжностиРабочиеСменыСотрудники.Количество, 0) КАК Количество,
	        |	ЕСТЬNULL(ДолжностиРабочиеСменыСотрудники.ДолжностьСмены, НЕОПРЕДЕЛЕНО) КАК Должность,
	        |	ДолжностиРабочиеСменыСотрудники.Организация КАК Организация,
	        |	ЕСТЬNULL(ДолжностиРабочиеСменыСотрудники.Сотрудник, НЕОПРЕДЕЛЕНО) КАК Сотрудник,
	        |	ЕСТЬNULL(ДолжностиРабочиеСменыСотрудники.ГрафикРаботыСотрудника, НЕОПРЕДЕЛЕНО) КАК ГрафикРаботыСотрудника,
	        |	ЕСТЬNULL(ДанныеПроизводственногоКалендаря.Дата, НЕОПРЕДЕЛЕНО) КАК Дата,
	        |	ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ДеньНедели, НЕОПРЕДЕЛЕНО) КАК ДеньНедели,
	        |	ЕСТЬNULL(ДанныеПроизводственногоКалендаря.РабочийДень, НЕОПРЕДЕЛЕНО) КАК РабочийДень,
	        |	ВЫБОР
	        |		КОГДА ГрафикиСкладов.ГрафикРаботы ЕСТЬ NULL
	        |			ТОГДА ЛОЖЬ
	        |		ИНАЧЕ ИСТИНА
	        |	КОНЕЦ КАК ГрафикСкладаЗаполнен,
	        |	ВЫБОР
	        |		КОГДА ДолжностиРабочиеСменыСотрудники.ГрафикРаботыСотрудника ЕСТЬ NULL
	        |				ИЛИ ДолжностиРабочиеСменыСотрудники.ГрафикРаботыСотрудника = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	        |			ТОГДА ЛОЖЬ
	        |		ИНАЧЕ ИСТИНА
	        |	КОНЕЦ КАК ГрафикСотрудникаЗаполнен,
	        |	ВЫБОР
	        |		КОГДА ДолжностиРабочиеСменыСотрудники.РабочаяСмена ЕСТЬ NULL
	        |			ТОГДА ЛОЖЬ
	        |		ИНАЧЕ ИСТИНА
	        |	КОНЕЦ КАК РабочаяСменаЗаполнена,
	        |	ЕСТЬNULL(ГрафикиСкладов.ГрафикРаботы, НЕОПРЕДЕЛЕНО) КАК ГрафикРаботы,
	        |	ДАТАВРЕМЯ(1, 1, 1) КАК ПродолжительностьРабочегоВремени
	        |ПОМЕСТИТЬ СкладыГрафикиПроизводственный
	        |ИЗ
	        |	Склады КАК Склады
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ДолжностиРабочиеСменыСотрудники КАК ДолжностиРабочиеСменыСотрудники
	        |		ПО Склады.Склад = ДолжностиРабочиеСменыСотрудники.Склад
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиСкладов КАК ГрафикиСкладов
	        |		ПО Склады.Склад = ГрафикиСкладов.Склад
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	        |		ПО (ИСТИНА)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |	ПланируемоеРабочееВремяСотрудников.Сотрудник КАК Сотрудник,
	        |	ПланируемоеРабочееВремяСотрудников.Должность КАК Должность,
	        |	ПланируемоеРабочееВремяСотрудников.РабочаяСмена КАК РабочаяСмена,
	        |	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
	        |	ДанныеПроизводственногоКалендаря.ДеньНедели КАК ДеньНедели,
	        |	ДанныеПроизводственногоКалендаря.РабочийДень КАК РабочийДень
	        |ПОМЕСТИТЬ ПланируемоеРабочееВремяСотрудникиПроизводственный
	        |ИЗ
	        |	РегистрСведений.ПланируемоеРабочееВремяСотрудников КАК ПланируемоеРабочееВремяСотрудников
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	        |		ПО (ИСТИНА)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники.СрезПоследних(
	        |				&НачалоНедели,
	        |				Должность В
	        |						(ВЫБРАТЬ
	        |							ДолжностиРабочиеСмены.Должность
	        |						ИЗ
	        |							ДолжностиРабочиеСмены)
	        |					И &УсловиеОрганизации
	        |					И &УсловиеПодразделения) КАК СотрудникиСрезПоследних
	        |		ПО ПланируемоеРабочееВремяСотрудников.Сотрудник = СотрудникиСрезПоследних.Сотрудник
	        |ГДЕ
	        |	ПланируемоеРабочееВремяСотрудников.Период >= &НачалоНедели
	        |	И ПланируемоеРабочееВремяСотрудников.ДатаОкончания <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоНедели, ДЕНЬ, 6), ДЕНЬ)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	РегистрПланируемоеРабочееВремяСотрудников.Период КАК ДатаНачала,
	        |	ЕСТЬNULL(РегистрПланируемоеРабочееВремяСотрудников.РабочаяСмена, ПланируемоеРабочееВремяСотрудникиПроизводственный.РабочаяСмена) КАК РабочаяСмена,
	        |	ЕСТЬNULL(РегистрПланируемоеРабочееВремяСотрудников.РабочаяСмена.Склад, ПланируемоеРабочееВремяСотрудникиПроизводственный.РабочаяСмена.Склад) КАК Склад,
	        |	ЕСТЬNULL(РегистрПланируемоеРабочееВремяСотрудников.Должность, ПланируемоеРабочееВремяСотрудникиПроизводственный.Должность) КАК Должность,
	        |	ПланируемоеРабочееВремяСотрудникиПроизводственный.Сотрудник КАК Сотрудник,
	        |	РегистрПланируемоеРабочееВремяСотрудников.ДатаОкончания КАК ДатаОкончания,
	        |	ЕСТЬNULL(РегистрПланируемоеРабочееВремяСотрудников.ПродолжительностьРабочегоВремени, ДАТАВРЕМЯ(1, 1, 1)) КАК ПродолжительностьРабочегоВремени,
	        |	ПланируемоеРабочееВремяСотрудникиПроизводственный.ДеньНедели КАК ДеньНедели,
	        |	ПланируемоеРабочееВремяСотрудникиПроизводственный.РабочийДень КАК РабочийДень,
	        |	ПланируемоеРабочееВремяСотрудникиПроизводственный.Дата КАК Дата,
	        |	ЕСТЬNULL(ГрафикиСкладов.ГрафикРаботы, НЕОПРЕДЕЛЕНО) КАК ГрафикРаботы,
	        |	ЕСТЬNULL(ДолжностиРабочиеСменыСотрудники.ГрафикРаботыСотрудника, НЕОПРЕДЕЛЕНО) КАК ГрафикРаботыСотрудника,
	        |	ВЫБОР
	        |		КОГДА ДолжностиРабочиеСменыСотрудники.Сотрудник ЕСТЬ NULL
	        |			ТОГДА ЛОЖЬ
	        |		ИНАЧЕ ИСТИНА
	        |	КОНЕЦ КАК СотрудникОформлен,
	        |	ВЫБОР
	        |		КОГДА ГрафикиСкладов.ГрафикРаботы ЕСТЬ NULL
	        |			ТОГДА ЛОЖЬ
	        |		ИНАЧЕ ИСТИНА
	        |	КОНЕЦ КАК ГрафикСкладаЗаполнен,
	        |	ВЫБОР
	        |		КОГДА ДолжностиРабочиеСменыСотрудники.ГрафикРаботыСотрудника ЕСТЬ NULL
	        |				ИЛИ ДолжностиРабочиеСменыСотрудники.ГрафикРаботыСотрудника = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	        |			ТОГДА ЛОЖЬ
	        |		ИНАЧЕ ИСТИНА
	        |	КОНЕЦ КАК ГрафикСотрудникаЗаполнен
	        |ПОМЕСТИТЬ ТекущееПланированиеГрафики
	        |ИЗ
	        |	ПланируемоеРабочееВремяСотрудникиПроизводственный КАК ПланируемоеРабочееВремяСотрудникиПроизводственный
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемоеРабочееВремяСотрудников КАК РегистрПланируемоеРабочееВремяСотрудников
	        |		ПО ПланируемоеРабочееВремяСотрудникиПроизводственный.Сотрудник = РегистрПланируемоеРабочееВремяСотрудников.Сотрудник
	        |			И ПланируемоеРабочееВремяСотрудникиПроизводственный.РабочаяСмена = РегистрПланируемоеРабочееВремяСотрудников.РабочаяСмена
	        |			И ПланируемоеРабочееВремяСотрудникиПроизводственный.Должность = РегистрПланируемоеРабочееВремяСотрудников.Должность
	        |			И (ПланируемоеРабочееВремяСотрудникиПроизводственный.Дата = НАЧАЛОПЕРИОДА(РегистрПланируемоеРабочееВремяСотрудников.Период, ДЕНЬ))
	        |			И (РегистрПланируемоеРабочееВремяСотрудников.Период >= &НачалоНедели)
	        |			И (РегистрПланируемоеРабочееВремяСотрудников.ДатаОкончания <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоНедели, ДЕНЬ, 6), ДЕНЬ))
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиСкладов КАК ГрафикиСкладов
	        |		ПО ПланируемоеРабочееВремяСотрудникиПроизводственный.РабочаяСмена.Склад = ГрафикиСкладов.Склад
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ДолжностиРабочиеСменыСотрудники КАК ДолжностиРабочиеСменыСотрудники
	        |		ПО ПланируемоеРабочееВремяСотрудникиПроизводственный.РабочаяСмена.Склад = ДолжностиРабочиеСменыСотрудники.Склад
	        |			И ПланируемоеРабочееВремяСотрудникиПроизводственный.Сотрудник = ДолжностиРабочиеСменыСотрудники.Сотрудник
	        |			И ПланируемоеРабочееВремяСотрудникиПроизводственный.РабочаяСмена = ДолжностиРабочиеСменыСотрудники.РабочаяСмена
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВЫБОР
	        |		КОГДА ТекущееПланированиеГрафики.ДатаНачала ЕСТЬ NULL
	        |			ТОГДА ВЫБОР
	        |					КОГДА ДанныеГрафиковСотрудниковВремя.ВремяНачала ЕСТЬ NULL
	        |						ТОГДА ЕСТЬNULL(ДанныеГрафикаСкладаВремя.ВремяНачала, ТекущееПланированиеГрафики.Дата)
	        |					ИНАЧЕ ДанныеГрафиковСотрудниковВремя.ВремяНачала
	        |				КОНЕЦ
	        |		ИНАЧЕ ТекущееПланированиеГрафики.ДатаНачала
	        |	КОНЕЦ КАК ДатаНачала,
	        |	ТекущееПланированиеГрафики.РабочаяСмена КАК РабочаяСмена,
	        |	ТекущееПланированиеГрафики.Склад КАК Склад,
	        |	ТекущееПланированиеГрафики.Должность КАК Должность,
	        |	ТекущееПланированиеГрафики.Сотрудник КАК Сотрудник,
	        |	ТекущееПланированиеГрафики.ПродолжительностьРабочегоВремени КАК ПродолжительностьРабочегоВремени,
	        |	ТекущееПланированиеГрафики.ДеньНедели КАК ДеньНедели,
	        |	ТекущееПланированиеГрафики.РабочийДень КАК РабочийДень,
	        |	ТекущееПланированиеГрафики.Дата КАК Дата,
	        |	ТекущееПланированиеГрафики.ГрафикРаботы КАК ГрафикРаботы,
	        |	ТекущееПланированиеГрафики.ГрафикРаботыСотрудника КАК ГрафикРаботыСотрудника,
	        |	ТекущееПланированиеГрафики.СотрудникОформлен КАК СотрудникОформлен,
	        |	ТекущееПланированиеГрафики.ГрафикСкладаЗаполнен КАК ГрафикСкладаЗаполнен,
	        |	ТекущееПланированиеГрафики.ГрафикСотрудникаЗаполнен КАК ГрафикСотрудникаЗаполнен
	        |ПОМЕСТИТЬ ТекущееПланированиеПредварительно
	        |ИЗ
	        |	ТекущееПланированиеГрафики КАК ТекущееПланированиеГрафики
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеГрафикаСкладаВремя КАК ДанныеГрафикаСкладаВремя
	        |		ПО ТекущееПланированиеГрафики.Склад = ДанныеГрафикаСкладаВремя.Склад
	        |			И ТекущееПланированиеГрафики.Дата = ДанныеГрафикаСкладаВремя.День
	        |			И ТекущееПланированиеГрафики.ГрафикРаботы = ДанныеГрафикаСкладаВремя.ГрафикРаботы
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеГрафиковСотрудниковВремя КАК ДанныеГрафиковСотрудниковВремя
	        |		ПО ТекущееПланированиеГрафики.Сотрудник = ДанныеГрафиковСотрудниковВремя.Сотрудник
	        |			И ТекущееПланированиеГрафики.Дата = ДанныеГрафиковСотрудниковВремя.День
	        |			И ТекущееПланированиеГрафики.ГрафикРаботыСотрудника = ДанныеГрафиковСотрудниковВремя.ГрафикРаботы
	        |ГДЕ
	        |	&ТекущиеДанныеУсловиеСклада
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ТекущееПланированиеПредварительно.ДатаНачала КАК ДатаНачала,
	        |	ТекущееПланированиеПредварительно.РабочаяСмена КАК РабочаяСмена,
	        |	ТекущееПланированиеПредварительно.Склад КАК Склад,
	        |	ТекущееПланированиеПредварительно.Должность КАК Должность,
	        |	ТекущееПланированиеПредварительно.Сотрудник КАК Сотрудник,
	        |	ТекущееПланированиеПредварительно.ПродолжительностьРабочегоВремени КАК ПродолжительностьРабочегоВремени,
	        |	ТекущееПланированиеПредварительно.ДеньНедели КАК ДеньНедели,
	        |	ТекущееПланированиеПредварительно.РабочийДень КАК РабочийДень,
	        |	ТекущееПланированиеПредварительно.Дата КАК Дата,
	        |	ТекущееПланированиеПредварительно.ГрафикРаботы КАК ГрафикРаботы,
	        |	ТекущееПланированиеПредварительно.ГрафикРаботыСотрудника КАК ГрафикРаботыСотрудника,
	        |	ТекущееПланированиеПредварительно.СотрудникОформлен КАК СотрудникОформлен,
	        |	ТекущееПланированиеПредварительно.ГрафикСкладаЗаполнен КАК ГрафикСкладаЗаполнен,
	        |	ТекущееПланированиеПредварительно.ГрафикСотрудникаЗаполнен КАК ГрафикСотрудникаЗаполнен,
	        |	ВЫБОР
	        |		КОГДА ДанныеГрафиковСотрудников.ЧасыРаботы ЕСТЬ NULL
	        |			ТОГДА ЕСТЬNULL(ДанныеГрафикаСклада.ЧасыРаботы, 0)
	        |		ИНАЧЕ ДанныеГрафиковСотрудников.ЧасыРаботы
	        |	КОНЕЦ КАК ЧасыПоГрафику,
	        |	ВЫБОР
	        |		КОГДА ДанныеГрафиковСотрудниковВремя.ВремяНачала ЕСТЬ NULL
	        |			ТОГДА ЕСТЬNULL(ДанныеГрафикаСкладаВремя.ВремяНачала, ТекущееПланированиеПредварительно.Дата)
	        |		ИНАЧЕ ДанныеГрафиковСотрудниковВремя.ВремяНачала
	        |	КОНЕЦ КАК ВремяНачала
	        |ПОМЕСТИТЬ ТекущееПланирование
	        |ИЗ
	        |	ТекущееПланированиеПредварительно КАК ТекущееПланированиеПредварительно
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеГрафиковСотрудниковВремя КАК ДанныеГрафиковСотрудниковВремя
	        |		ПО ТекущееПланированиеПредварительно.Сотрудник = ДанныеГрафиковСотрудниковВремя.Сотрудник
	        |			И ТекущееПланированиеПредварительно.Дата = ДанныеГрафиковСотрудниковВремя.День
	        |			И ТекущееПланированиеПредварительно.ГрафикРаботыСотрудника = ДанныеГрафиковСотрудниковВремя.ГрафикРаботы
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеГрафикаСкладаВремя КАК ДанныеГрафикаСкладаВремя
	        |		ПО ТекущееПланированиеПредварительно.Склад = ДанныеГрафикаСкладаВремя.Склад
	        |			И ТекущееПланированиеПредварительно.Дата = ДанныеГрафикаСкладаВремя.День
	        |			И ТекущееПланированиеПредварительно.ГрафикРаботы = ДанныеГрафикаСкладаВремя.ГрафикРаботы
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеГрафиковСотрудников КАК ДанныеГрафиковСотрудников
	        |		ПО ТекущееПланированиеПредварительно.Сотрудник = ДанныеГрафиковСотрудников.Сотрудник
	        |			И ТекущееПланированиеПредварительно.Дата = ДанныеГрафиковСотрудников.День
	        |			И ТекущееПланированиеПредварительно.ГрафикРаботыСотрудника = ДанныеГрафиковСотрудников.ГрафикРаботы
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеГрафикаСклада КАК ДанныеГрафикаСклада
	        |		ПО ТекущееПланированиеПредварительно.Склад = ДанныеГрафикаСклада.Склад
	        |			И ТекущееПланированиеПредварительно.Дата = ДанныеГрафикаСклада.День
	        |			И ТекущееПланированиеПредварительно.ГрафикРаботы = ДанныеГрафикаСклада.ГрафикРаботы
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	СкладыГрафикиПроизводственный.Склад КАК Склад,
	        |	СкладыГрафикиПроизводственный.РабочаяСмена КАК РабочаяСмена,
	        |	СкладыГрафикиПроизводственный.Количество КАК Количество,
	        |	СкладыГрафикиПроизводственный.Должность КАК Должность,
	        |	СкладыГрафикиПроизводственный.Организация КАК Организация,
	        |	СкладыГрафикиПроизводственный.Сотрудник КАК Сотрудник,
	        |	СкладыГрафикиПроизводственный.ГрафикРаботыСотрудника КАК ГрафикРаботыСотрудника,
	        |	СкладыГрафикиПроизводственный.Дата КАК Дата,
	        |	СкладыГрафикиПроизводственный.ДеньНедели КАК ДеньНедели,
	        |	СкладыГрафикиПроизводственный.РабочийДень КАК РабочийДень,
	        |	СкладыГрафикиПроизводственный.ГрафикСкладаЗаполнен КАК ГрафикСкладаЗаполнен,
	        |	СкладыГрафикиПроизводственный.ГрафикСотрудникаЗаполнен КАК ГрафикСотрудникаЗаполнен,
	        |	СкладыГрафикиПроизводственный.РабочаяСменаЗаполнена КАК РабочаяСменаЗаполнена,
	        |	СкладыГрафикиПроизводственный.ГрафикРаботы КАК ГрафикРаботы,
	        |	СкладыГрафикиПроизводственный.ПродолжительностьРабочегоВремени КАК ПродолжительностьРабочегоВремени,
	        |	ВЫБОР
	        |		КОГДА ДанныеГрафиковСотрудников.ЧасыРаботы ЕСТЬ NULL
	        |			ТОГДА ЕСТЬNULL(ДанныеГрафикаСклада.ЧасыРаботы, 0)
	        |		ИНАЧЕ ДанныеГрафиковСотрудников.ЧасыРаботы
	        |	КОНЕЦ КАК ЧасыПоГрафику,
	        |	ВЫБОР
	        |		КОГДА ДанныеГрафиковСотрудниковВремя.ВремяНачала ЕСТЬ NULL
	        |			ТОГДА ЕСТЬNULL(ДанныеГрафикаСкладаВремя.ВремяНачала, СкладыГрафикиПроизводственный.Дата)
	        |		ИНАЧЕ ДанныеГрафиковСотрудниковВремя.ВремяНачала
	        |	КОНЕЦ КАК ВремяНачала
	        |ПОМЕСТИТЬ ПланируемыеДанные
	        |ИЗ
	        |	СкладыГрафикиПроизводственный КАК СкладыГрафикиПроизводственный
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеГрафикаСклада КАК ДанныеГрафикаСклада
	        |		ПО СкладыГрафикиПроизводственный.Склад = ДанныеГрафикаСклада.Склад
	        |			И СкладыГрафикиПроизводственный.Дата = ДанныеГрафикаСклада.День
	        |			И СкладыГрафикиПроизводственный.ГрафикРаботы = ДанныеГрафикаСклада.ГрафикРаботы
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеГрафикаСкладаВремя КАК ДанныеГрафикаСкладаВремя
	        |		ПО СкладыГрафикиПроизводственный.Склад = ДанныеГрафикаСкладаВремя.Склад
	        |			И СкладыГрафикиПроизводственный.Дата = ДанныеГрафикаСкладаВремя.День
	        |			И СкладыГрафикиПроизводственный.ГрафикРаботы = ДанныеГрафикаСкладаВремя.ГрафикРаботы
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеГрафиковСотрудников КАК ДанныеГрафиковСотрудников
	        |		ПО СкладыГрафикиПроизводственный.Сотрудник = ДанныеГрафиковСотрудников.Сотрудник
	        |			И СкладыГрафикиПроизводственный.Дата = ДанныеГрафиковСотрудников.День
	        |			И СкладыГрафикиПроизводственный.ГрафикРаботыСотрудника = ДанныеГрафиковСотрудников.ГрафикРаботы
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеГрафиковСотрудниковВремя КАК ДанныеГрафиковСотрудниковВремя
	        |		ПО СкладыГрафикиПроизводственный.Сотрудник = ДанныеГрафиковСотрудниковВремя.Сотрудник
	        |			И СкладыГрафикиПроизводственный.Дата = ДанныеГрафиковСотрудниковВремя.День
	        |			И СкладыГрафикиПроизводственный.ГрафикРаботыСотрудника = ДанныеГрафиковСотрудниковВремя.ГрафикРаботы
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПланируемыеДанные.Склад КАК Склад,
	        |	ПланируемыеДанные.РабочаяСмена КАК РабочаяСмена,
	        |	ПланируемыеДанные.Количество КАК Количество,
	        |	ПланируемыеДанные.Должность КАК Должность,
	        |	ПланируемыеДанные.Сотрудник КАК Сотрудник,
	        |	ПланируемыеДанные.ГрафикРаботыСотрудника КАК ГрафикРаботыСотрудника,
	        |	ПланируемыеДанные.Дата КАК Дата,
	        |	ПланируемыеДанные.ДеньНедели КАК ДеньНедели,
	        |	ПланируемыеДанные.РабочийДень КАК РабочийДень,
	        |	ПланируемыеДанные.ГрафикСкладаЗаполнен КАК ГрафикСкладаЗаполнен,
	        |	ПланируемыеДанные.ГрафикСотрудникаЗаполнен КАК ГрафикСотрудникаЗаполнен,
	        |	ПланируемыеДанные.РабочаяСменаЗаполнена КАК РабочаяСменаЗаполнена,
	        |	ПланируемыеДанные.ГрафикРаботы КАК ГрафикРаботы,
	        |	ЕСТЬNULL(ТекущееПланирование.ПродолжительностьРабочегоВремени, ДАТАВРЕМЯ(1, 1, 1)) КАК ПродолжительностьРабочегоВремени,
	        |	ПланируемыеДанные.ЧасыПоГрафику КАК ЧасыПоГрафику,
	        |	ПланируемыеДанные.ВремяНачала КАК ВремяНачала,
	        |	ИСТИНА КАК СотрудникОформлен
	        |ПОМЕСТИТЬ ПредварительныеДанныеЗаполнения
	        |ИЗ
	        |	ПланируемыеДанные КАК ПланируемыеДанные
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ТекущееПланирование КАК ТекущееПланирование
	        |		ПО ПланируемыеДанные.Склад = ТекущееПланирование.Склад
	        |			И ПланируемыеДанные.РабочаяСмена = ТекущееПланирование.РабочаяСмена
	        |			И ПланируемыеДанные.Должность = ТекущееПланирование.Должность
	        |			И ПланируемыеДанные.Сотрудник = ТекущееПланирование.Сотрудник
	        |			И ПланируемыеДанные.Дата = ТекущееПланирование.Дата
	        |			И ПланируемыеДанные.ДеньНедели = ТекущееПланирование.ДеньНедели
	        |
// АПК:96-выкл проектное решение
	        |ОБЪЕДИНИТЬ
// АПК:96-вкл
	        |
	        |ВЫБРАТЬ
	        |	ТекущееПланирование.Склад,
	        |	ТекущееПланирование.РабочаяСмена,
	        |	0,
	        |	ТекущееПланирование.Должность,
	        |	ТекущееПланирование.Сотрудник,
	        |	ТекущееПланирование.ГрафикРаботыСотрудника,
	        |	ТекущееПланирование.Дата,
	        |	ТекущееПланирование.ДеньНедели,
	        |	ТекущееПланирование.РабочийДень,
	        |	ТекущееПланирование.ГрафикСкладаЗаполнен,
	        |	ТекущееПланирование.ГрафикСотрудникаЗаполнен,
	        |	ЛОЖЬ,
	        |	ТекущееПланирование.ГрафикРаботы,
	        |	ТекущееПланирование.ПродолжительностьРабочегоВремени,
	        |	ТекущееПланирование.ЧасыПоГрафику,
	        |	ТекущееПланирование.ВремяНачала,
	        |	ТекущееПланирование.СотрудникОформлен
	        |ИЗ
	        |	ТекущееПланирование КАК ТекущееПланирование
	        |ГДЕ
	        |	НЕ ТекущееПланирование.СотрудникОформлен
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПредварительныеДанныеЗаполнения.Склад КАК Склад,
	        |	ПредварительныеДанныеЗаполнения.РабочаяСмена КАК РабочаяСмена,
	        |	ПредварительныеДанныеЗаполнения.Количество КАК Количество,
	        |	ПредварительныеДанныеЗаполнения.Должность КАК Должность,
	        |	ПредварительныеДанныеЗаполнения.Сотрудник КАК Сотрудник,
	        |	ПредварительныеДанныеЗаполнения.ГрафикРаботыСотрудника КАК ГрафикРаботыСотрудника,
	        |	ПредварительныеДанныеЗаполнения.Дата КАК Дата,
	        |	ПредварительныеДанныеЗаполнения.ДеньНедели КАК ДеньНедели,
	        |	ПредварительныеДанныеЗаполнения.РабочийДень КАК РабочийДень,
	        |	ПредварительныеДанныеЗаполнения.ГрафикСкладаЗаполнен КАК ГрафикСкладаЗаполнен,
	        |	ПредварительныеДанныеЗаполнения.ГрафикСотрудникаЗаполнен КАК ГрафикСотрудникаЗаполнен,
	        |	ПредварительныеДанныеЗаполнения.РабочаяСменаЗаполнена КАК РабочаяСменаЗаполнена,
	        |	ПредварительныеДанныеЗаполнения.ГрафикРаботы КАК ГрафикРаботы,
	        |	ПредварительныеДанныеЗаполнения.ПродолжительностьРабочегоВремени КАК ПродолжительностьРабочегоВремени,
	        |	ПредварительныеДанныеЗаполнения.ЧасыПоГрафику КАК ЧасыПоГрафику,
	        |	ПредварительныеДанныеЗаполнения.ВремяНачала КАК ВремяНачала,
	        |	ПредварительныеДанныеЗаполнения.СотрудникОформлен КАК СотрудникОформлен,
	        |	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки
	        |ПОМЕСТИТЬ ДанныеЗаполнения
	        |ИЗ
	        |	ПредварительныеДанныеЗаполнения КАК ПредварительныеДанныеЗаполнения
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ДанныеЗаполнения.НомерСтроки КАК НомерСтроки,
	        |	ДанныеЗаполнения.Склад КАК Склад,
	        |	ДанныеЗаполнения.РабочаяСмена КАК РабочаяСмена,
	        |	ДанныеЗаполнения.Количество КАК КоличествоСотрудников,
	        |	ДанныеЗаполнения.Должность КАК Должность,
	        |	ДанныеЗаполнения.Сотрудник КАК Сотрудник,
	        |	ДанныеЗаполнения.Дата КАК Дата,
	        |	ДанныеЗаполнения.ДеньНедели КАК ДеньНедели,
	        |	ДанныеЗаполнения.РабочийДень КАК РабочийДень,
	        |	ДанныеЗаполнения.ГрафикСкладаЗаполнен КАК ГрафикСкладаЗаполнен,
	        |	ДанныеЗаполнения.ГрафикСотрудникаЗаполнен КАК ГрафикСотрудникаЗаполнен,
	        |	ДанныеЗаполнения.РабочаяСменаЗаполнена КАК РабочаяСменаЗаполнена,
	        |	ДанныеЗаполнения.ГрафикРаботы КАК ГрафикРаботы,
	        |	ДанныеЗаполнения.ПродолжительностьРабочегоВремени КАК ПродолжительностьРабочегоВремени,
	        |	ДанныеЗаполнения.ЧасыПоГрафику КАК ЧасыПоГрафику,
	        |	ДанныеЗаполнения.ВремяНачала КАК ВремяНачала,
	        |	ДанныеЗаполнения.ГрафикРаботыСотрудника КАК ГрафикРаботыСотрудника,
	        |	ДанныеЗаполнения.СотрудникОформлен КАК СотрудникОформлен
	        |ИЗ
	        |	ДанныеЗаполнения КАК ДанныеЗаполнения
	        |ИТОГИ ПО
	        |	Склад,
	        |	РабочаяСмена,
	        |	Должность,
	        |	Сотрудник,
	        |	ДеньНедели
	        |АВТОУПОРЯДОЧИВАНИЕ
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ДанныеЗаполнения.Дата КАК Дата,
	        |	ДанныеЗаполнения.Сотрудник КАК Сотрудник,
	        |	ДанныеЗаполнения.ДеньНедели КАК ДеньНедели,
	        |	СУММА(РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ВЫРАЗИТЬ(ДанныеЗаполнения.ПродолжительностьРабочегоВремени КАК ДАТА), МИНУТА)) КАК ИтогМинут,
	        |	СУММА(ДанныеЗаполнения.ЧасыПоГрафику) КАК ЧасыПоГрафику
	        |ИЗ
	        |	ДанныеЗаполнения КАК ДанныеЗаполнения
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ДанныеЗаполнения.Сотрудник,
	        |	ДанныеЗаполнения.Дата,
	        |	ДанныеЗаполнения.ДеньНедели
	        |ИТОГИ ПО
	        |	Дата";
	
	Если ЗначениеЗаполнено(Параметры.ОтборОрганизация) Тогда
		УсловиеОрганизации = "Организация = &Организация";
	Иначе
		УсловиеОрганизации = "ИСТИНА";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ОтборПодразделение) Тогда
		УсловиеПодразделения = "СтруктурнаяЕдиница = &Подразделение";
	Иначе
		УсловиеПодразделения = "ИСТИНА";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ОтборСклад) Тогда
		УсловиеСклада = "ТаблицаСоСкладами.Ссылка = &Склад";
		УсловиеСкладаТекущиеДанные = "ТекущееПланированиеГрафики.Склад = &Склад";
	Иначе
		УсловиеСклада = "ИСТИНА";
		УсловиеСкладаТекущиеДанные = "ИСТИНА";
	КонецЕсли;
	
	Текст = СтрЗаменить(Текст , "&УсловиеОрганизации", УсловиеОрганизации);
	Текст = СтрЗаменить(Текст , "&УсловиеПодразделения", УсловиеПодразделения);
	Текст = СтрЗаменить(Текст , "&УсловиеСклада", УсловиеСклада);
	Текст = СтрЗаменить(Текст , "&ТекущиеДанныеУсловиеСклада", УсловиеСкладаТекущиеДанные);
	Возврат Текст;
	
КонецФункции

Функция ПолучитьИтогПоСотрудникуЗаДеньСтрокой(ЧасыЗаДень, ЧасыИтог)
	
	ПустаяДата = Дата(1, 1, 1, 0, 0, 0);
	СуткиДата = Дата(1, 1, 1, 23, 59, 0);
	
	Если ЧасыЗаДень = ЧасыИтог
		ИЛИ ЧасыИтог = ПустаяДата Тогда
		
		Возврат Формат(ЧасыЗаДень, "ДФ=ЧЧ:мм");
		
	Иначе
			
		Если ЧасыИтог = СуткиДата Тогда
			
			ТретийПараметр = НСтр("ru = '≥24:00'");
			
		ИначеЕсли ЧасыЗаДень = ПустаяДата Тогда
			
			ТретийПараметр = "";
			
		Иначе
			
			ТретийПараметр = Формат(ЧасыИтог, "ДФ=ЧЧ:мм");
			
		КонецЕсли;
		
		ВторойПараметр = НСтр("ru = 'из'");
		Если ЧасыЗаДень = ПустаяДата
			И НЕ ЗначениеЗаполнено(ТретийПараметр) Тогда
			
			ВторойПараметр = "";
			
		КонецЕсли;
		
		Возврат СтрШаблон("%1 %2 %3", 
			Формат(ЧасыЗаДень, "ДФ=ЧЧ:мм"),
			ВторойПараметр,
			ТретийПараметр);
		
	КонецЕсли;
	
КонецФункции

Функция ПечатьПланГрафикСПодписью(ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПланируемоеВремяСотрудников_ПланГрафик";
	Макет = РегистрыСведений.ПланируемоеРабочееВремяСотрудников.ПолучитьМакет("ПФ_MXL_ПланГрафикСПодписями");
	
	РезультатПлана = ЗаполнитьАктуальныйГрафикРаботы(ПараметрыПечати);
	
	ДеревоГрафика = РезультатПлана.ДеревоРезультата.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаПечати = КонструкторТаблицыПечатиПланГрафикаСПодписями();
	ЗаголовокВыведен = Ложь;
	
	Для каждого СтрокаСклад Из ДеревоГрафика.Строки Цикл
	
		Для каждого СтрокаСмена Из СтрокаСклад.Строки Цикл
		
			Для каждого СтрокаДолжность Из СтрокаСмена.Строки Цикл
			
				Для каждого СтрокаСотрудник Из СтрокаДолжность.Строки Цикл
					
					ПустаяНеделя = Истина;
					ОбластьЗаголовок = Макет.ПолучитьОбласть("ОбластьЗаголовок");
					ОбластьСтрока = Макет.ПолучитьОбласть("ОбластьСтрока");
					ОбластьСтрока.Параметры.Заполнить(СтрокаСотрудник);
					
					Для каждого СтрокаДеньНедели Из СтрокаСотрудник.Строки Цикл
						
						Если СтрокаДеньНедели.Строки.Количество() = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаДетали = СтрокаДеньНедели.Строки[0];
						
						ДеньНеделиСтрокой = ИмяПеречисления(СтрокаДетали.ДеньНедели);
						ОбластьСтрока.Параметры[ДеньНеделиСтрокой] = СтрокаДетали.ПродолжительностьРабочегоВремени;
						
						Если СтрокаДетали.РабочийДень = 0 Тогда
							ОбластьСтрока.Область("Строка" + ДеньНеделиСтрокой).ЦветФона 
								= WebЦвета.ГолубойСКраснымОттенком;
						КонецЕсли;
						
						Если НЕ ЗаголовокВыведен Тогда
							
							ОбластьЗаголовок.Параметры[ДеньНеделиСтрокой] = СтрШаблон("%1%2%3", 
								ДеньНеделиСтрокой, 
								Символы.ПС, 
								Формат(СтрокаДетали.Дата, "ДФ=dd.MM.yy"));
								
							Если СтрокаДетали.РабочийДень = 0 Тогда
								ОбластьЗаголовок.Область("Заголовок" + ДеньНеделиСтрокой).ЦветФона 
									= WebЦвета.ГолубойСКраснымОттенком;
							КонецЕсли;
								
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаДетали.ПродолжительностьРабочегоВремени) Тогда
							ПустаяНеделя = Ложь;
						КонецЕсли;
					
					КонецЦикла;
					Если НЕ ЗаголовокВыведен Тогда
						
						ТабличныйДокумент.Вывести(ОбластьЗаголовок);
						ЗаголовокВыведен = Истина;
						
					КонецЕсли;
					Если НЕ ПустаяНеделя Тогда
						ТабличныйДокумент.Вывести(ОбластьСтрока);
					КонецЕсли;
				
				КонецЦикла;
			
			КонецЦикла;
		
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
		
КонецФункции

Функция КонструкторТаблицыПечатиПланГрафикаСПодписями()
	
	ТаблицаПечати = Новый ТаблицаЗначений;
	ТаблицаПечати.Колонки.Добавить("Сотрудник");
	ТаблицаПечати.Колонки.Добавить("Должность");
	
	Возврат ТаблицаПечати;
	
КонецФункции

Функция ИмяПеречисления(ЗначениеПеречисления)

	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	
	Возврат  Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;

КонецФункции

#КонецОбласти

#КонецЕсли