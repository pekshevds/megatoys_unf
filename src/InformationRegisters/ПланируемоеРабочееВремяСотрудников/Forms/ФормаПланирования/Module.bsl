
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Отбор.Свойство("Организация") Тогда
		
		ОтборСклад = Параметры.Отбор.Организация;
		Элементы.ОтборСклад.Доступность = Ложь;
		
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Подразделение") Тогда
		
		ОтборСклад = Параметры.Отбор.Подразделение;
		Элементы.ОтборСклад.Доступность = Ложь;
		
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Склад") Тогда
		
		ОтборСклад = Параметры.Отбор.Склад;
		Элементы.ОтборСклад.Доступность = Ложь;
		
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	ТекущаяДата = ТекущаяДатаСеанса();
	НачалоНедели = ТекущаяДата - (ДеньНедели(ТекущаяДата)-1) * 24 * 60 * 60;
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Перем ТекущееНачалоНедели;
	
	Если Не ПараметрыЗаписи.Свойство("НомерГода", ТекущееНачалоНедели) Тогда
		
		ТекущееНачалоНедели = НачалоНедели;
		
	КонецЕсли;
	
	ЗаписатьГрафикРаботыВРегистрСервер(ТекущееНачалоНедели);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СкладНастроек = Настройки.Получить("ОтборСклад");
	Если НЕ ЗначениеЗаполнено(ОтборСклад) 
		И ЗначениеЗаполнено(СкладНастроек) Тогда
		
		ОтборСклад = СкладНастроек;
		
	Иначе
		Настройки.Удалить("ОтборСклад");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьАктуальныйГрафикРаботы();
	УстановитьУсловноеОформлениеФормы();
	УстановитьЗаголовокФильтров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УстановитьГрафик" 
		И ЗначениеЗаполнено(Параметр)
		И ТипЗнч(Параметр) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		
		ЗаполнитьАктуальныйГрафикРаботы();
		Модифицированность = Ложь;
		
	КонецЕсли;
	
	Если ИмяСобытия = "СоздатьРабочуюСмену" Тогда
		
		ЗаполнитьАктуальныйГрафикРаботы();
		Модифицированность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)
	
	ЗаписатьГрафикРаботыВРегистрКлиент(Ложь);
	УстановитьЗаголовокФильтров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ЗаписатьГрафикРаботыВРегистрКлиент(Ложь);
	УстановитьЗаголовокФильтров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	ЗаписатьГрафикРаботыВРегистрКлиент(Ложь);
	УстановитьЗаголовокФильтров();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоНеделиПриИзменении(Элемент)
	
	ПриИзмененииНедели();

КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладОчистка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьАктуальныйГрафикРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоРегистра(Команда)
	
	Для каждого ПервыйУровеньДереваРегистра Из ДеревоРегистра.ПолучитьЭлементы() Цикл
		
		Элементы.ДеревоРегистра.Свернуть(ПервыйУровеньДереваРегистра.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРегистра(Команда)
	
	Для каждого ПервыйУровеньДереваРегистра Из ДеревоРегистра.ПолучитьЭлементы() Цикл
		
		Элементы.ДеревоРегистра.Развернуть(ПервыйУровеньДереваРегистра.ПолучитьИдентификатор(), Истина);
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРегистра

&НаКлиенте
Процедура ДеревоРегистраПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРегистраПередНачаломИзменения(Элемент, Отказ)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	ИмяКолонки = Элемент.ТекущийЭлемент.Имя;
	
	Если ИмяКолонки = "ДеревоРегистраИнформация" Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.РаботаСотрудник = Неопределено 
		ИЛИ ТипЗнч(ТекущаяСтрока.РаботаСотрудник) <> Тип("СправочникСсылка.Сотрудники") Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяКолонки = Элемент.ТекущийЭлемент.Имя;
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Если ИмяКолонки = "ДеревоРегистраИнформация" Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДняНедели = ПолучитьДеньНеделиИзИмениКолонки(ИмяКолонки, КэшЗначений.ИменаПолейДнейНедели);
	
	ИмяКолонкиДобавлен = ИмяДняНедели + КэшЗначений.ОкончаниеДобавлен;
	ИмяКолонкиДата = ИмяДняНедели + КэшЗначений.ОкончаниеДата;
	ИмяКолонкиИтог = ИмяДняНедели + КэшЗначений.ОкончаниеДобавленИтог;
	
	ТекущаяСтрока[ИмяКолонкиДата] = ТекущаяСтрока[ИмяКолонкиДобавлен];
	
	ТекущийПоказатель = ТекущаяСтрока[ИмяКолонкиДобавлен];
	
	Если ЗначениеЗаполнено(ТекущийПоказатель) Тогда
		
		ТекущаяСтрока[ИмяКолонкиИтог] = ТекущаяСтрока[ИмяКолонкиДобавлен];
		
	Иначе
		
		Часы = ТекущаяСтрока[ИмяДняНедели + КэшЗначений.ОкончаниеЧасыПоГрафику];
		ДатаПоГрафику = Дата(1, 1, 1, Часы, 0, 0);
		
		ТекущаяСтрока[ИмяКолонкиДобавлен] = ДатаПоГрафику;
		ТекущаяСтрока[ИмяКолонкиИтог] = ДатаПоГрафику;
		
	КонецЕсли;
	
	Если ТекущийПоказатель <> ТекущаяСтрока[ИмяКолонкиДобавлен] Тогда
		
		ТекущаяСтрока[ИмяДняНедели + КэшЗначений.ОкончаниеРучнаяПравка] = Истина;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРегистраПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	ИмяКолонки = Элемент.ТекущийЭлемент.Имя;
	
	Если ТекущаяСтрока.РаботаСотрудник = Неопределено 
		ИЛИ ТипЗнч(ТекущаяСтрока.РаботаСотрудник) <> Тип("СправочникСсылка.Сотрудники") Тогда
		
		Отказ = Истина;
		
	Иначе
		
		ИмяДняНедели = ПолучитьДеньНеделиИзИмениКолонки(ИмяКолонки, КэшЗначений.ИменаПолейДнейНедели);
		
		ИмяКолонкиДобавлен = ИмяДняНедели + КэшЗначений.ОкончаниеДобавлен;
		ИмяКолонкиДата = ИмяДняНедели + КэшЗначений.ОкончаниеДата;
		ИмяКолонкиИтог = ИмяДняНедели + КэшЗначений.ОкончаниеДобавленИтог;
		
		ТекущийПоказатель = ТекущаяСтрока[ИмяКолонкиДобавлен];
		
		Дата = ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя()[ИмяДняНедели + КэшЗначений.ОкончаниеДата];
		
		Если ТекущаяСтрока[ИмяКолонкиИтог] = Неопределено
			ИЛИ ТипЗнч(ТекущаяСтрока[ИмяКолонкиИтог]) = Тип("Строка") Тогда
			ВремяНовоеЗначение = ТекущаяСтрока[ИмяКолонкиДобавлен];
		Иначе
			ВремяНовоеЗначение = ТекущаяСтрока[ИмяКолонкиИтог];
		КонецЕсли;
		
		НовоеЗначение = Час(ВремяНовоеЗначение) * 60 + Минута(ВремяНовоеЗначение);
		СтароеЗначение = Час(ТекущаяСтрока[ИмяКолонкиДата]) * 60 + Минута(ТекущаяСтрока[ИмяКолонкиДата]);
		ИтогМинут = ИтогМинутПоСотрудникуЗаДеньНедели(КэшЗначений.ИтогиПоЧасам, ТекущаяСтрока.РаботаСотрудник, Дата, СтароеЗначение, НовоеЗначение);
		
		ТекущаяСтрока[ИмяКолонкиДобавлен] = ВремяНовоеЗначение;
		
		Если ТекущийПоказатель <> ТекущаяСтрока[ИмяКолонкиДобавлен] Тогда
			
			ТекущаяСтрока[ИмяДняНедели + КэшЗначений.ОкончаниеРучнаяПравка] = Истина;
			Модифицированность = Истина;
			
		КонецЕсли;
		
		ТекущаяСтрока.ПолучитьРодителя()[ИмяКолонкиИтог] 
			= ПолучитьИтогВыбранныхДнейПоДолжности(ТекущаяСтрока.ПолучитьРодителя(), ИмяДняНедели);
		
		ДатаИтогПоСотруднику = ПолучитьДатуИзМинут(ИтогМинут);
		
		ОбновитьИтогЧасовПоСотрудникуЗаДень(ТекущаяСтрока.РаботаСотрудник, Дата, ИмяКолонкиИтог, ИмяКолонкиДобавлен, ДатаИтогПоСотруднику);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРегистраВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДеревоРегистраИнформация" Тогда
		
		ТекущаяСтрока = ДеревоРегистра.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если Модифицированность 
			И НЕ (ТекущаяСтрока.ГрафикСкладаЗаполнен И ТекущаяСтрока.РабочаяСменаЗаполнена) Тогда
			
			ДополнительныеПараметры = Новый Структура("ВыбраннаяСтрока", ВыбраннаяСтрока);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтветОбработкиВыбораПоляИнформация", 
				ЭтотОбъект, ДополнительныеПараметры);
			
			ПоказатьВопрос(ОписаниеОповещения, 
				НСтр("ru = 'Несохраненные изменения могут быть потеряны. Записать?'"), 
				РежимДиалогаВопрос.ДаНетОтмена);
			
		Иначе
			
			ОбработатьВыборПоляИнформация(ВыбраннаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьАктуальныйГрафикРаботыКоманда(Команда)
	
	Если Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветЗаполненияАктуальногоГрафика", 
			ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Несохраненные изменения могут быть потеряны. Записать?'"), 
			РежимДиалогаВопрос.ДаНетОтмена);
			
	Иначе
			
		ЗаполнитьАктуальныйГрафикРаботы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаборЗаписейГрафикаРабот(Команда)
	
	ЗаписатьГрафикРаботыВРегистрКлиент(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрафикРаботыСледующейНедели(Команда)
	
	НачалоНедели = НачалоНедели + 24 * 60 * 60 * 7;
	ПриИзмененииНедели();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрафикРаботыПрошлойНедели(Команда)
	
	НачалоНедели = НачалоНедели - 24 * 60 * 60 * 7;
	ПриИзмененииНедели();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПродолжительностьОдногоДняПоСотруднику(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоРегистра.ТекущиеДанные;
	
	ТекущаяСтрокаЭтоСотрудник = ТекущаяСтрока <> Неопределено
		И ТекущаяСтрока.Свойство("РаботаСотрудник")
		И ТипЗнч(ТекущаяСтрока.РаботаСотрудник) = Тип("СправочникСсылка.Сотрудники") 
		И ЗначениеЗаполнено(ТекущаяСтрока.РаботаСотрудник);
	
		
	Если ТекущаяСтрокаЭтоСотрудник Тогда
		
		ДанныеСтроки = ПолучитьДанныеСтрокиДляЗаполненияПродолжительности(ТекущаяСтрока);
		
		ИмяДняНедели = ПолучитьДеньНеделиИзИмениКолонки(Элементы.ДеревоРегистра.ТекущийЭлемент.Имя,
			КэшЗначений.ИменаПолейДнейНедели);
			
		Если ИмяДняНедели <> Неопределено Тогда
					
			ДанныеСтроки.Вставить("ИмяКолонки", ИмяДняНедели + КэшЗначений.ОкончаниеДобавлен);
			
			ЗаполнитьПродолжительностьРабочегоДня(ДанныеСтроки);
			
		КонецЕсли;
		
		ЗаполнитьПродолжительностьРабочегоДня(ДанныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПродолжительностьНеделиПоСотруднику(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоРегистра.ТекущиеДанные;
	
	ТекущаяСтрокаЭтоСотрудник = ТекущаяСтрока <> Неопределено
		И ТекущаяСтрока.Свойство("РаботаСотрудник")
		И ТипЗнч(ТекущаяСтрока.РаботаСотрудник) = Тип("СправочникСсылка.Сотрудники") 
		И ЗначениеЗаполнено(ТекущаяСтрока.РаботаСотрудник);
	
		
	Если ТекущаяСтрокаЭтоСотрудник Тогда
		
		ДанныеСтроки = ПолучитьДанныеСтрокиДляЗаполненияПродолжительности(ТекущаяСтрока);
		
		ДанныеСтроки.Вставить("ИмяКолонки", Неопределено);
		
		ЗаполнитьПродолжительностьРабочегоДня(ДанныеСтроки);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеСтрокиДляЗаполненияПродолжительности(Знач ТекущаяСтрока)
	
	Перем ДанныеСтроки;
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Сотрудник", ТекущаяСтрока.РаботаСотрудник);
	
	ДанныеСтроки.Вставить("РабочаяСмена", ТекущаяСтрока.ПолучитьРодителя().
		ПолучитьРодителя().РаботаСотрудник);
		
	ДанныеСтроки.Вставить("Подразделение", ТекущаяСтрока.ПолучитьРодителя().
		ПолучитьРодителя().ПолучитьРодителя().РаботаСотрудник);
		
	ДанныеСтроки.Вставить("Должность", ТекущаяСтрока.ПолучитьРодителя().РаботаСотрудник);
	
	Возврат ДанныеСтроки;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьПродолжительностьВсегоДерева(Команда)
	
	ЗаполнитьПродолжительностьРабочегоДня(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПродолжительностьРабочегоДня(ТекущаяСтрока)
	
	Если Элементы.ДеревоРегистра.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НомерСтроки", 
		Элементы.ДеревоРегистра.ТекущиеДанные.НомерСтроки);
	
	ДлительнаяОперация = НачатьЗаполнениеПродолжительностиРабочегоДня(ТекущаяСтрока);
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ОбработатьЗаполнениеПродолжительностиРабочегоДняНаНеделю",
		ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Заполнение продолжительности работ на неделю'");
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросСохраненияПередПечатью", ЭтотОбъект);
		ПоказатьВопрос(
			ОписаниеОповещения, 
			НСтр("ru = 'Для продолжения печати план будет сохранен. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		
		ВыполнитьКомандуПечати();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСотрудника(Команда)
	
	ДобавитьСотрудникаНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗаполнитьДеревоРегистраФормыПриЗаполненииГрафика(Знач РезультатЗаполнения)

	Дерево = РеквизитФормыВЗначение("ДеревоРегистра");
	Дерево.Строки.Очистить();
	
	ВыборкаСклад = РезультатЗаполнения.ДеревоРезультата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КэшЗначений.ИтогиПоЧасам = РезультатЗаполнения.ИтогиПоЧасам;
	
	Пока ВыборкаСклад.Следующий() Цикл
		
		СтрокаСклад = Дерево.Строки.Добавить();
		СтрокаСклад.РаботаСотрудник = ВыборкаСклад.Склад;
		СтрокаСклад.УровеньСклад = Истина;
		
		ВыборкаРабочаяСмена = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ОбработатьЗаполнениеРабочейСменыПриЗаполненииДерева(ВыборкаРабочаяСмена, СтрокаСклад);
		
	КонецЦикла;
	
	ПредыдущееНачалоНедели = НачалоНедели;
	ПредыдущийСклад = ОтборСклад;
	
	Возврат Дерево;
КонецФункции

&НаСервере
Процедура ОбработатьЗаполнениеРабочейСменыПриЗаполненииДерева(Знач ВыборкаРабочаяСмена, СтрокаСклад)
	
	Перем ВыборкаДолжность, СтрокаСмена;
	
	Пока ВыборкаРабочаяСмена.Следующий() Цикл
		
		Если ВыборкаРабочаяСмена.РабочаяСмена<>Неопределено Тогда
			
			СтрокаСмена = СтрокаСклад.Строки.Добавить();
			СтрокаСмена.РаботаСотрудник = ВыборкаРабочаяСмена.РабочаяСмена;
			СтрокаСмена.УровеньСмена = Истина;
			
		КонецЕсли;
		
		ВыборкаДолжность = ВыборкаРабочаяСмена.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ОбработатьЗаполнениеДолжностиПриЗаполненииДерева(ВыборкаДолжность, СтрокаСклад, СтрокаСмена);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаполнениеДолжностиПриЗаполненииДерева(Знач ВыборкаДолжность, СтрокаСклад, СтрокаСмена)
	
	Перем ВыборкаСотрудник, День, КоличествоУстановленныхДней, СтрокаДолжность;
	
	Пока ВыборкаДолжность.Следующий() Цикл
		
		Если ВыборкаДолжность.Должность<>Неопределено Тогда
			
			СтрокаДолжность = СтрокаСмена.Строки.Добавить();
			СтрокаДолжность.РаботаСотрудник = ВыборкаДолжность.Должность;
			СтрокаДолжность.УровеньДолжность = Истина;
			
		Иначе
			
			СтрокаДолжность = Неопределено;
			
		КонецЕсли;
		
		ВыборкаСотрудник = ВыборкаДолжность.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КоличествоУстановленныхДней = Новый Структура;
		ОбработатьЗаполнениеСотрудникаПриЗаполненииДерева(
			ВыборкаСотрудник, 
			КоличествоУстановленныхДней, 
			СтрокаДолжность, 
			СтрокаСклад, 
			СтрокаСмена);
		
		Если СтрокаДолжность <> Неопределено Тогда
			
			Для каждого День Из КоличествоУстановленныхДней Цикл
				
				СтрокаДолжность[День.Ключ + КэшЗначений.ОкончаниеДобавленИтог] 
				= ПолучитьСтрокуИтоговПоГруппеДолжность(
				СтрокаДолжность[День.Ключ + КэшЗначений.ОкончаниеКоличествоСотрудниковСмены],
				День.Значение,
				КэшЗначений);
				
			КонецЦикла;
			
		КонецЕсли;
		
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаполнениеСотрудникаПриЗаполненииДерева(Знач ВыборкаСотрудник, КоличествоУстановленныхДней, СтрокаДолжность, СтрокаСклад, СтрокаСмена)
	
	Перем ВыборкаДеньНедели, СтрокаСотрудник, СтруктураПараметров;
	
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		Если ВыборкаСотрудник.Сотрудник <> Неопределено Тогда
			
			СтрокаСотрудник = СтрокаДолжность.Строки.Добавить();
			СтрокаСотрудник.РаботаСотрудник = ВыборкаСотрудник.Сотрудник;
			СтрокаСотрудник.УровеньСотрудник = Истина;
			
		Иначе
			
			СтрокаСотрудник = Неопределено;
			
		КонецЕсли;
		
		ВыборкаДеньНедели = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВыборкаДеньНедели", ВыборкаДеньНедели);
		СтруктураПараметров.Вставить("ВыборкаСотрудник", ВыборкаСотрудник);
		СтруктураПараметров.Вставить("КоличествоУстановленныхДней", КоличествоУстановленныхДней);
		СтруктураПараметров.Вставить("СтрокаДолжность", СтрокаДолжность);
		СтруктураПараметров.Вставить("СтрокаСклад", СтрокаСклад);
		СтруктураПараметров.Вставить("СтрокаСмена", СтрокаСмена);
		СтруктураПараметров.Вставить("СтрокаСотрудник", СтрокаСотрудник);
		
		ОбработатьЗаполнениеНеделиПриЗаполненииДерева(СтруктураПараметров);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаполнениеНеделиПриЗаполненииДерева(СтруктураПараметров)
	
	ВыборкаДеньНедели = СтруктураПараметров.ВыборкаДеньНедели;
	ВыборкаСотрудник = СтруктураПараметров.ВыборкаСотрудник;
	КоличествоУстановленныхДней = СтруктураПараметров.КоличествоУстановленныхДней;
	СтрокаДолжность = СтруктураПараметров.СтрокаДолжность;
	СтрокаСклад = СтруктураПараметров.СтрокаСклад;
	СтрокаСмена = СтруктураПараметров.СтрокаСмена;
	СтрокаСотрудник = СтруктураПараметров.СтрокаСотрудник;
	
	Пока ВыборкаДеньНедели.Следующий() Цикл
		
		ВыборкаДетали = ВыборкаДеньНедели.Выбрать();
		ВыборкаДетали.Следующий();
		
		Если ВыборкаДеньНедели.ДеньНедели <> Неопределено Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВыборкаДеньНедели", ВыборкаДеньНедели);
			СтруктураПараметров.Вставить("ВыборкаДетали", ВыборкаДетали);
			СтруктураПараметров.Вставить("ВыборкаСотрудник", ВыборкаСотрудник);
			СтруктураПараметров.Вставить("КоличествоУстановленныхДней", КоличествоУстановленныхДней);
			СтруктураПараметров.Вставить("СтрокаДолжность", СтрокаДолжность);
			СтруктураПараметров.Вставить("СтрокаСклад", СтрокаСклад);
			СтруктураПараметров.Вставить("СтрокаСмена", СтрокаСмена);
			СтруктураПараметров.Вставить("СтрокаСотрудник", СтрокаСотрудник);
			
			ИмяКолонкиКоличествоСотрудниковСмены 
				= ОбработатьЗаполнениеДетальнойЗаписиПриЗаполненииДерева(СтруктураПараметров);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяКолонкиКоличествоСотрудниковСмены)
			И СтрокаДолжность <> Неопределено Тогда
			СтрокаДолжность[ИмяКолонкиКоличествоСотрудниковСмены] = ВыборкаДетали.КоличествоСотрудников;
		КонецЕсли;
		
		СтрокаСклад.ГрафикСкладаЗаполнен = ВыборкаДетали.ГрафикСкладаЗаполнен;
		Если ВыборкаДетали.ГрафикСкладаЗаполнен Тогда
			СтрокаСклад.РабочаяСменаЗаполнена = ВыборкаДетали.РабочаяСменаЗаполнена;
		Иначе
			СтрокаСклад.РабочаяСменаЗаполнена = Истина;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ОбработатьЗаполнениеДетальнойЗаписиПриЗаполненииДерева(СтруктураПараметров)
	
	ВыборкаДеньНедели = СтруктураПараметров.ВыборкаДеньНедели;
	ВыборкаДетали = СтруктураПараметров.ВыборкаДетали;
	ВыборкаСотрудник = СтруктураПараметров.ВыборкаСотрудник;
	КоличествоУстановленныхДней = СтруктураПараметров.КоличествоУстановленныхДней;
	СтрокаДолжность = СтруктураПараметров.СтрокаДолжность;
	СтрокаСклад = СтруктураПараметров.СтрокаСклад;
	СтрокаСмена = СтруктураПараметров.СтрокаСмена;
	СтрокаСотрудник = СтруктураПараметров.СтрокаСотрудник;
	
	ИмяЗначенияПеречисления = ИмяПеречисления(ВыборкаДеньНедели.ДеньНедели);
	ИмяДняНедели = Строка(ИмяЗначенияПеречисления);
	
	Если НЕ КоличествоУстановленныхДней.Свойство(ИмяДняНедели) Тогда
		
		КоличествоУстановленныхДней.Вставить(ИмяДняНедели, 0);
		
	КонецЕсли;
	
	ИмяКолонкиДобавлен = ИмяДняНедели + КэшЗначений.ОкончаниеДобавлен;
	ИмяКолонкиДобавленИтог = ИмяДняНедели + КэшЗначений.ОкончаниеДобавленИтог;
	ИмяКолонкиВыходной = ИмяДняНедели + КэшЗначений.ОкончаниеВыходной;
	ИмяКолонкиЧасыПоГрафику = ИмяДняНедели + КэшЗначений.ОкончаниеЧасыПоГрафику;
	ИмяКолонкиКоличествоСотрудниковСмены = ИмяДняНедели + КэшЗначений.ОкончаниеКоличествоСотрудниковСмены;
	ИмяКолонкиДата = ИмяДняНедели + КэшЗначений.ОкончаниеДата;
	ИмяКолонкиВремяНачала = ИмяДняНедели + КэшЗначений.ОкончаниеНачалоРабочегоДня;
	
	ВыборкаДетали = ВыборкаДеньНедели.Выбрать();
	ВыборкаДетали.Следующий();
	
	Выходной = 1 - ВыборкаДетали.РабочийДень;
	СтрокаСклад[ИмяКолонкиВыходной] = Выходной;
	Если СтрокаДолжность <> Неопределено Тогда
		СтрокаДолжность[ИмяКолонкиВыходной] = Выходной;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаСклад[ИмяКолонкиДата]) Тогда
		СтрокаСклад[ИмяКолонкиДата] = ВыборкаДетали.Дата;
	КонецЕсли;
	СтрокаСклад.ГрафикРаботыСклада = ВыборкаДетали.ГрафикРаботы;
	СтрокаСклад.Информация = СтрШаблон("<%1>", ВыборкаДетали.ГрафикРаботы);
	
	Если ВыборкаСотрудник.Сотрудник <> Неопределено Тогда
		
		СтрокаСотрудник[ИмяКолонкиВыходной] = Выходной;
		СтрокаСмена[ИмяКолонкиВыходной] = Выходной;
		
		СтрокаСотрудник.НомерСтроки = ВыборкаДетали.НомерСтроки;
		
		СтрокаСотрудник[ИмяКолонкиВремяНачала] = ВыборкаДетали.ВремяНачала;
		
		СтрокаСотрудник.ГрафикСотрудникаЗаполнен = ВыборкаДетали.ГрафикСотрудникаЗаполнен;
		СтрокаСотрудник.ГрафикРаботыСотрудника = ВыборкаДетали.ГрафикРаботыСотрудника;
		
		Если ВыборкаДетали.ГрафикСотрудникаЗаполнен Тогда
			Информация = СтрШаблон("<%1>", ВыборкаДетали.ГрафикРаботыСотрудника);
		Иначе
			Если ВыборкаДетали.СотрудникОформлен Тогда
				Информация = НСтр("ru = '<График не заполнен>'");
			Иначе
				Информация = НСтр("ru = '<Не трудоустроен>'");
			КонецЕсли;
		КонецЕсли;
		
		СтрокаСотрудник.Информация = Информация;
		
		СтрокаСотрудник[ИмяКолонкиЧасыПоГрафику] = ВыборкаДетали.ЧасыПоГрафику;
		СтрокаСотрудник.РабочаяСмена = ВыборкаДетали.РабочаяСмена;
		
		ПродолжительностьРабочегоВремени = ВыборкаДетали.ПродолжительностьРабочегоВремени;
		СтрокаСотрудник[ИмяКолонкиДобавлен] = ПродолжительностьРабочегоВремени;
		ИтогМинут = ИтогМинутПоСотрудникуЗаДеньНедели(КэшЗначений.ИтогиПоЧасам, СтрокаСотрудник.РаботаСотрудник, ВыборкаДетали.Дата);
		Если ИтогМинут > 0 
			И ЗначениеЗаполнено(ПродолжительностьРабочегоВремени) Тогда
			
			ДатаИтогПоСотруднику = ПолучитьДатуИзМинут(ИтогМинут);
			СтрокаСотрудник[ИмяКолонкиДобавленИтог] = ПолучитьИтогПоСотрудникуЗаДеньСтрокой(ПродолжительностьРабочегоВремени, ДатаИтогПоСотруднику)
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПродолжительностьРабочегоВремени) Тогда 
			
			КоличествоУстановленныхДней[ИмяДняНедели] = КоличествоУстановленныхДней[ИмяДняНедели] + 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяКолонкиКоличествоСотрудниковСмены;

КонецФункции

&НаКлиенте
Процедура УстановитьЗаголовокФильтров()
	
	ТекстЗаголовкаФильтры = "";
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		ТекстЗаголовкаФильтры = ОтборСклад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ТекстЗаголовкаФильтры = ?(ЗначениеЗаполнено(ТекстЗаголовкаФильтры), ТекстЗаголовкаФильтры + " • " + ОтборОрганизация, ОтборОрганизация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		ТекстЗаголовкаФильтры = ?(ЗначениеЗаполнено(ТекстЗаголовкаФильтры), ТекстЗаголовкаФильтры + " • " + ОтборПодразделение, ОтборПодразделение);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДатуИзМинут(Знач ИтогМинут)
	
	Перем ДатаИтогПоСотруднику;
	
	Если ИтогМинут / 60 < 24 Тогда
		
		Часов = Цел(ИтогМинут / 60);
		Минут = ИтогМинут - Часов * 60;
		ДатаИтогПоСотруднику = Дата(1, 1, 1, Часов, Минут, 0);
		
	Иначе
		
		ДатаИтогПоСотруднику = Дата(1, 1, 1, 23, 59, 0);
		
	КонецЕсли;
	
	Возврат ДатаИтогПоСотруднику;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИтогЧасовПоСотрудникуЗаДень(Сотрудник, Дата, ИмяКолонкиИтог, ИмяКолонкиДобавлен, ДатаИтогПоСотруднику)
	
	ИтогПоЧасам = КэшЗначений.ИтогиПоЧасам.Получить(Дата);
	Если ИтогПоЧасам <> Неопределено Тогда
		
		СтруктураСотрудника = ИтогПоЧасам.Получить(Сотрудник);
		Если СтруктураСотрудника <> Неопределено Тогда
			
			Для каждого Идентификатор Из СтруктураСотрудника.ИдентификаторыСтрок Цикл
			
				СтрокаСотрудника = ДеревоРегистра.НайтиПоИдентификатору(Идентификатор);
				Если СтрокаСотрудника <> Неопределено Тогда
					
					СтрокаСотрудника[ИмяКолонкиИтог] = ПолучитьИтогПоСотрудникуЗаДеньСтрокой(СтрокаСотрудника[ИмяКолонкиДобавлен], ДатаИтогПоСотруднику);
					ИмяДняНедели = ПолучитьДеньНеделиИзИмениКолонки(ИмяКолонкиИтог, КэшЗначений.ИменаПолейДнейНедели);
					СтрокаСотрудника.ПолучитьРодителя()[ИмяКолонкиИтог] 
						= ПолучитьИтогВыбранныхДнейПоДолжности(СтрокаСотрудника.ПолучитьРодителя(), ИмяДняНедели);
					
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИтогМинутПоСотрудникуЗаДеньНедели(ИтогиПоМинутам, Сотрудник, Дата, СтароеЗначение = 0, НовоеЗначение = 0)
	
	Возврат РегистрыСведений.ПланируемоеРабочееВремяСотрудников.
		ИтогМинутПоСотрудникуЗаДеньНедели(ИтогиПоМинутам, Сотрудник, Дата, СтароеЗначение, НовоеЗначение);
	
КонецФункции

&НаКлиенте
Процедура ОтветЗаполненияАктуальногоГрафика(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьНаборЗаписейГрафикаРабот(Неопределено);
		ЗаполнитьАктуальныйГрафикРаботы();
		
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		ЗаполнитьАктуальныйГрафикРаботы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветОбработкиВыбораПоляИнформация(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьНаборЗаписейГрафикаРабот(Неопределено);
		ОбработатьВыборПоляИнформация(ДополнительныеПараметры.ВыбраннаяСтрока);
		
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		ОбработатьВыборПоляИнформация(ДополнительныеПараметры.ВыбраннаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПоляИнформация(Знач ВыбраннаяСтрока)
	
	Перем График, ПараметрыФормы, Склад, ТекущиеДанные;
	
	ТекущиеДанные = ДеревоРегистра.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьГрафикСкладаВСтроке = ТекущиеДанные.ГрафикСкладаЗаполнен
		И ТекущиеДанные.РабочаяСменаЗаполнена;
		
	ЕстьГрафикСотрудникаВСтроке = ТекущиеДанные.ГрафикСотрудникаЗаполнен;
		
	Если ЕстьГрафикСкладаВСтроке ИЛИ ЕстьГрафикСотрудникаВСтроке Тогда
		
		Если ЕстьГрафикСкладаВСтроке Тогда
			График = ТекущиеДанные.ГрафикРаботыСклада;
		КонецЕсли;
		Если ЕстьГрафикСотрудникаВСтроке Тогда
			График = ТекущиеДанные.ГрафикРаботыСотрудника;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Ключ", График);
		ОткрытьФорму("Справочник.ГрафикиРаботы.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
	Если ТекущиеДанные.ГрафикСкладаЗаполнен
		И НЕ ТекущиеДанные.РабочаяСменаЗаполнена Тогда
		
		Склад = ТекущиеДанные.РаботаСотрудник;
		ПараметрыФормы = Новый Структура("Склад", Склад);
		ОткрытьФорму("Справочник.РабочиеСменыСтруктурныхЕдиниц.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ГрафикСкладаЗаполнен
		И ТекущиеДанные.УровеньСклад Тогда
		
		Склад = ТекущиеДанные.РаботаСотрудник;
		Отбор = Новый Структура("Владелец", Склад);
		ПараметрыФормы = Новый Структура("Отбор, ТекущийЭлемент, ВыделитьЭлемент", 
			Отбор, 
			"УстановитьГрафик", 
			"УстановитьГрафик");
		ОткрытьФорму("Обработка.ГрафикиРаботы.Форма", ПараметрыФормы);
		
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ГрафикСотрудникаЗаполнен
		И ТекущиеДанные.УровеньСотрудник Тогда
		
		ПоследнийКадровыйДокумент = ПолучитьПоследнийКадровыйДокументПоСотруднику(ТекущиеДанные.РаботаСотрудник);
		Если ПоследнийКадровыйДокумент <> Неопределено Тогда
			
			ПоказатьЗначение(, ПоследнийКадровыйДокумент);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СотрудникТрудоустроен(Знач Сотрудник, Знач НачалоНедели)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СотрудникиСрезПоследних.Должность КАК Должность
	|ИЗ
	|	РегистрСведений.Сотрудники.СрезПоследних(&НачалоНедели, ) КАК СотрудникиСрезПоследних
	|ГДЕ
	|	СотрудникиСрезПоследних.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("НачалоНедели", НачалоНедели);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДеньНеделиИзИмениКолонки(ИмяКолонки, ИменаПолейДнейНедели)
	
	Для каждого ОкончаниеИмениПоля Из ИменаПолейДнейНедели Цикл
		
		Позиция = СтрНайти(ИмяКолонки, ОкончаниеИмениПоля);
		Если Позиция <> 0 Тогда
			
			Возврат Лев(ИмяКолонки, Позиция - 1);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПоследнийКадровыйДокументПоСотруднику(Сотрудник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Сотрудники.Регистратор КАК Регистратор
	               |ИЗ
	               |	РегистрСведений.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.Сотрудник = &Сотрудник
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудники.Период УБЫВ";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Регистратор;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеВопросПриЗаписиГрафикаРаботы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаписатьГрафикРаботыВРегистрСервер(ПредыдущееНачалоНедели);
		ЗаполнитьАктуальныйГрафикРаботы();
		Модифицированность = Ложь;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьАктуальныйГрафикРаботы();
		Модифицированность = Ложь;
	Иначе
		ОтказатьсяОтГрафикаРаботПоСотрудникам();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьЗаполнениеПродолжительностиРабочегоДня(ТекущаяСтрока)
	
	Дерево = РеквизитФормыВЗначение("ДеревоРегистра", Тип("ДеревоЗначений"));
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДеревоРегистра", Дерево);
	ПараметрыПроцедуры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ПараметрыПроцедуры.Вставить("КэшЗначений", КэшЗначений);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		"РегистрыСведений.ПланируемоеРабочееВремяСотрудников.ЗаполнитьПродолжительностьРабочегоДняНаНеделю",
		ПараметрыПроцедуры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗаполнениеПродолжительностиРабочегоДняНаНеделю(
		Результат, ДополнительныеПараметры) Экспорт
		
		Если Результат <> Неопределено Тогда
			
			РезультатОбработки = ОбработатьЗаполнениеПродолжительностиРабочегоДняНаНеделюНаСервере(Результат);
			Если РезультатОбработки <> Неопределено Тогда
					
				ЗаполнитьКэшЗначенийИдентификаторамиСтрок();
				
				Модифицированность = Истина;
				Идентификатор = Неопределено;
				ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
					"НомерСтроки",
					Идентификатор,
					ДеревоРегистра.ПолучитьЭлементы(),
					ДополнительныеПараметры.НомерСтроки,
					Ложь);
						
				Элементы.ДеревоРегистра.ТекущаяСтрока = Идентификатор;
				
				ОбработатьЗаполнениеИтоговПоСотрудникам(РезультатОбработки.ЗаполнениеВсегоДерева, 
					РезультатОбработки.ИмяКолонки, Идентификатор);
				
				РазвернутьДеревоРегистра(Неопределено); 
				
			КонецЕсли;
			
		КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗаполнениеИтоговПоСотрудникам(Знач ЗаполнениеВсегоДерева, Знач ИмяКолонкиОтбор, Знач Идентификатор)
	
	Перем Дата, ДеньНедели, ИмяКолонкиДобавлен, ИмяКолонкиИтог, НомерДня, Сотрудник, СтрокаСотрудник;
	
	Если ЗаполнениеВсегоДерева Тогда
		
		НомерДня = 0;
		Для каждого ДеньНедели Из КэшЗначений.ДниНедели Цикл
			
			Дата = НачалоНедели + НомерДня * 24 * 60 * 60;
			ИмяКолонкиИтог = ДеньНедели + КэшЗначений.ОкончаниеДобавленИтог;
			ИмяКолонкиДобавлен = ДеньНедели + КэшЗначений.ОкончаниеДобавлен;
			
			СписокСотрудников = КэшЗначений.ИтогиПоЧасам.Получить(Дата);
			Если СписокСотрудников <> Неопределено Тогда
				
				Для каждого Сотрудник Из СписокСотрудников Цикл
					
					ПолучитьИОбновитьИтогПоСотрудникуЗаДень(Дата, ИмяКолонкиДобавлен, ИмяКолонкиИтог, Сотрудник.Ключ);
					
				КонецЦикла;
				
				НомерДня = НомерДня + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		СтрокаСотрудник = ДеревоРегистра.НайтиПоИдентификатору(Идентификатор);
		Сотрудник = СтрокаСотрудник.РаботаСотрудник;
		ОтборДеньНедели = ПолучитьДеньНеделиИзИмениКолонки(ИмяКолонкиОтбор, КэшЗначений.ИменаПолейДнейНедели);
		
		Если ЗначениеЗаполнено(ОтборДеньНедели) Тогда
			
			СекундДоОтбора = 24 * 60 * 60 * (КэшЗначений.ДниНедели.Найти(ОтборДеньНедели));
			Дата = НачалоДня(НачалоНедели + СекундДоОтбора);
			ИмяКолонкиИтог = ОтборДеньНедели + КэшЗначений.ОкончаниеДобавленИтог;
			ИмяКолонкиДобавлен = ОтборДеньНедели + КэшЗначений.ОкончаниеДобавлен;
			
			ПолучитьИОбновитьИтогПоСотрудникуЗаДень(Дата, ИмяКолонкиДобавлен, ИмяКолонкиИтог, Сотрудник);
			
		Иначе
				
			НомерДня = 0;
			Для каждого ДеньНедели Из КэшЗначений.ДниНедели Цикл
				
				Дата = НачалоДня(НачалоНедели + 24 * 60 * 60 * НомерДня);
				ИмяКолонкиИтог = ДеньНедели + КэшЗначений.ОкончаниеДобавленИтог;
				ИмяКолонкиДобавлен = ДеньНедели + КэшЗначений.ОкончаниеДобавлен;
				
				ПолучитьИОбновитьИтогПоСотрудникуЗаДень(Дата, ИмяКолонкиДобавлен, ИмяКолонкиИтог, Сотрудник);
				
				НомерДня = НомерДня + 1;
				
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИОбновитьИтогПоСотрудникуЗаДень(Дата, Знач ИмяКолонкиДобавлен, Знач ИмяКолонкиИтог, Сотрудник)
	
	Перем ДатаИтогПоСотруднику, ИтогМинут;
	
	ИтогМинут = ИтогМинутПоСотрудникуЗаДеньНедели(КэшЗначений.ИтогиПоЧасам, Сотрудник, Дата);
	ДатаИтогПоСотруднику = ПолучитьДатуИзМинут(ИтогМинут);
	
	ОбновитьИтогЧасовПоСотрудникуЗаДень(Сотрудник, Дата, ИмяКолонкиИтог, ИмяКолонкиДобавлен, ДатаИтогПоСотруднику);

КонецПроцедуры

&НаСервере
Функция ОбработатьЗаполнениеПродолжительностиРабочегоДняНаНеделюНаСервере(Результат)
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатЗадания = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		КэшЗначений = РезультатЗадания.КэшЗначений;
		ЗначениеВРеквизитФормы(РезультатЗадания.ДеревоРегистра, "ДеревоРегистра");
		Возврат Новый Структура("ЗаполнениеВсегоДерева, ИмяКолонки", 
			РезультатЗадания.ЗаполнениеВсегоДерева, РезультатЗадания.ИмяКолонки);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАктуальныйГрафикРаботы()
	
	ДлительнаяОперация = НачатьЗаполнениеАктуальногоГрафикаРаботы();
	
	ДополнительныеПараметры = Новый Структура;
	ТекущиеДанные = Элементы.ДеревоРегистра.ТекущиеДанные;
	НомерСтроки = 1;
	Если ТекущиеДанные <> Неопределено Тогда
		НомерСтроки = ТекущиеДанные.НомерСтроки;
	КонецЕсли;
	ДополнительныеПараметры.Вставить("НомерСтроки", НомерСтроки);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ОбработатьЗаполнениеАктуальногоГрафикаРаботы",
		ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Заполнение графика работы'");
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьЗаполнениеАктуальногоГрафикаРаботы()
	
	УдалитьРеквизитыПередНачаломЗаполненияГрафикаРаботы();
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ОтборОрганизация", ОтборОрганизация);
	ПараметрыПроцедуры.Вставить("ОтборПодразделение", ОтборПодразделение);
	ПараметрыПроцедуры.Вставить("ОтборСклад", ОтборСклад);
	ПараметрыПроцедуры.Вставить("НачалоНедели", НачалоНедели);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		"РегистрыСведений.ПланируемоеРабочееВремяСотрудников.ЗаполнитьАктуальныйГрафикРаботы",
		ПараметрыПроцедуры);
		
КонецФункции

&НаСервере
Процедура УдалитьРеквизитыПередНачаломЗаполненияГрафикаРаботы()
	
	Перем ИмяРеквизита, Инд, РеквизитФормы, РеквизитыФормы, УдаляемыеРеквизиты;
	
	УдаляемыеРеквизиты   = Новый Массив();
	РеквизитыФормы = ПолучитьРеквизиты("ДеревоРегистра");
	
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		
		УдалитьРеквизит = Найти(РеквизитФормы.Имя, КэшЗначений.ОкончаниеДобавлен) <> 0
			ИЛИ Найти(РеквизитФормы.Имя, КэшЗначений.ОкончаниеВыходной) <> 0
			ИЛИ Найти(РеквизитФормы.Имя, КэшЗначений.ОкончаниеЧасыПоГрафику) <> 0
			ИЛИ Найти(РеквизитФормы.Имя, КэшЗначений.ОкончаниеДобавленГруппа) <> 0;
			
		Если УдалитьРеквизит Тогда
			
			УдаляемыеРеквизиты.Добавить(РеквизитФормы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдаляемыеРеквизиты.Количество() > 0 Тогда
		
		Для Инд = 0 По  УдаляемыеРеквизиты.Количество() -1 Цикл
			ИмяРеквизита = УдаляемыеРеквизиты[Инд].Путь + "." + УдаляемыеРеквизиты[Инд].Имя;
			УдаляемыеРеквизиты[Инд] = ИмяРеквизита;
		КонецЦикла;
		
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗаполнениеАктуальногоГрафикаРаботы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ОбработатьРезультатЗаполненияГрафикаНаСервере(Результат.АдресРезультата);
		ЗаполнитьКэшЗначенийИдентификаторамиСтрок();
		Идентификатор = Неопределено;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"НомерСтроки",
			Идентификатор,
			ДеревоРегистра.ПолучитьЭлементы(),
			ДополнительныеПараметры.НомерСтроки,
			Ложь);
		
		Элементы.ДеревоРегистра.ТекущаяСтрока = Идентификатор;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКэшЗначенийИдентификаторамиСтрок()
	
	Для каждого СтрокаСклад Из ДеревоРегистра.ПолучитьЭлементы() Цикл
	
		ЗаполнитьКэшЗначенийИдентификаторамиСтрокПоСкладу(СтрокаСклад);
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКэшЗначенийИдентификаторамиСтрокПоСкладу(Знач СтрокаСклад)
	
	Перем СтрокаДолжность, СтрокаСмена;
	
	Для каждого СтрокаСмена Из СтрокаСклад.ПолучитьЭлементы() Цикл
		
		Для каждого СтрокаДолжность Из СтрокаСмена.ПолучитьЭлементы() Цикл
			
			ЗаполнитьКэшЗначенийИдентификаторамиСтрокПоДолжности(СтрокаДолжность, СтрокаСклад);
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКэшЗначенийИдентификаторамиСтрокПоДолжности(Знач СтрокаДолжность, Знач СтрокаСклад)
	
	Перем ИмяДняНедели, СтрокаСотрудник;
	
	Для каждого СтрокаСотрудник Из СтрокаДолжность.ПолучитьЭлементы() Цикл
		
		Для каждого ИмяДняНедели Из КэшЗначений.ДниНедели Цикл
			
			ЗаполнитьКэшЗначенийИдентификаторамиСтрокПоДнямНедели(ИмяДняНедели, СтрокаСклад, СтрокаСотрудник);
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКэшЗначенийИдентификаторамиСтрокПоДнямНедели(Знач ИмяДняНедели, Знач СтрокаСклад, Знач СтрокаСотрудник)
	
	Перем Идентификатор, СоответствиеСотрудников, СтруктураСотрудника;
	
	СоответствиеСотрудников = КэшЗначений.ИтогиПоЧасам.Получить(СтрокаСклад[ИмяДняНедели + КэшЗначений.ОкончаниеДата]);
	Если СоответствиеСотрудников <> Неопределено Тогда
		
		СтруктураСотрудника = СоответствиеСотрудников.Получить(СтрокаСотрудник.РаботаСотрудник);
		Если СтруктураСотрудника <> Неопределено Тогда
			
			Идентификатор = СтрокаСотрудник.ПолучитьИдентификатор();
			СтруктураСотрудника.ИдентификаторыСтрок.Добавить(Идентификатор);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатЗаполненияГрафикаНаСервере(АдресРезультата)
	
	РезультатЗаполнения = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивЭлементов = ИзменитьРеквизитыФормыПриЗаполненииГрафика();
	
	УдалитьЭлементыФормыПриЗаполненииГрафика();
	
	СоздатьЭлементыФормыПриЗаполненииГрафика(МассивЭлементов);

	Дерево = ЗаполнитьДеревоРегистраФормыПриЗаполненииГрафика(РезультатЗаполнения);

	ЗначениеВРеквизитФормы(Дерево, "ДеревоРегистра");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормыПриЗаполненииГрафика(Знач МассивЭлементов)
	
	Перем Имя, Родитель, Элемент, ЭлементГруппа;
	
	ВидимостьСлужебныхПолей = Ложь;
	ОграничениеТипаДата = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Время));
	
	Для каждого ЭлементГруппа Из МассивЭлементов Цикл
		
		Родитель = Элементы.ДеревоРегистра;
		ТипПолеФормы = Тип("ПолеФормы");
		
		Имя = Прав(ЭлементГруппа.Имя, СтрДлина(ЭлементГруппа.Имя) - 2);
		
		ИмяГруппы = Имя + КэшЗначений.ОкончаниеДобавленГруппа;
		ГруппаФормыДень = Элементы.Найти(ИмяГруппы);
		Если ГруппаФормыДень = Неопределено Тогда
			ГруппаФормыДень = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
			ГруппаФормыДень.Группировка = ГруппировкаКолонок.Горизонтальная;
		КонецЕсли;

		// добавлен - итог, день недели
		Элемент = Элементы.Добавить(Имя + КэшЗначений.ОкончаниеДобавленИтог, ТипПолеФормы, ГруппаФормыДень);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "ДеревоРегистра." + Имя + КэшЗначений.ОкончаниеДобавленИтог;
		Элемент.ВыбиратьТип = Ложь;
		Элемент.ОграничениеТипа = ОграничениеТипаДата;
		Элемент.Формат = "ДФ=ЧЧ:мм";
		Элемент.ФорматРедактирования = "ДФ=ЧЧ:мм";
		Элемент.КнопкаОчистки = Истина;
		
		// добавлен - служебное
		Элемент = Элементы.Добавить(Имя + КэшЗначений.ОкончаниеДобавлен, ТипПолеФормы, ГруппаФормыДень);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "ДеревоРегистра." + Имя + КэшЗначений.ОкончаниеДобавлен;
		Элемент.Видимость = ВидимостьСлужебныхПолей;
		
		// начало рабочего дня - служебное
		Элемент = Элементы.Добавить(Имя + КэшЗначений.ОкончаниеНачалоРабочегоДня, ТипПолеФормы, ГруппаФормыДень);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "ДеревоРегистра." + Имя + КэшЗначений.ОкончаниеНачалоРабочегоДня;
		Элемент.Видимость = ВидимостьСлужебныхПолей;
		
		// выходной - служебное
		Элемент = Элементы.Добавить(Имя + КэшЗначений.ОкончаниеВыходной, ТипПолеФормы, Родитель);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.Видимость = ВидимостьСлужебныхПолей;
		Элемент.ПутьКДанным = "ДеревоРегистра." + Имя + КэшЗначений.ОкончаниеВыходной;
		
		// часы по графику - служебное
		Элемент = Элементы.Добавить(Имя + КэшЗначений.ОкончаниеЧасыПоГрафику, ТипПолеФормы, Родитель);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.Видимость = ВидимостьСлужебныхПолей;
		Элемент.ПутьКДанным = "ДеревоРегистра." + Имя + КэшЗначений.ОкончаниеЧасыПоГрафику;
		
		// количество на смене - служебное
		Элемент = Элементы.Добавить(Имя + КэшЗначений.ОкончаниеКоличествоСотрудниковСмены, ТипПолеФормы, Родитель);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.Видимость = ВидимостьСлужебныхПолей;
		Элемент.ПутьКДанным = "ДеревоРегистра." + Имя + КэшЗначений.ОкончаниеКоличествоСотрудниковСмены;
		
		// дата - служебное
		Элемент = Элементы.Добавить(Имя + КэшЗначений.ОкончаниеДата, ТипПолеФормы, Родитель);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.Видимость = ВидимостьСлужебныхПолей;
		Элемент.ПутьКДанным = "ДеревоРегистра." + Имя + КэшЗначений.ОкончаниеДата;

		// ручная правка - служебное
		Элемент = Элементы.Добавить(Имя + КэшЗначений.ОкончаниеРучнаяПравка, ТипПолеФормы, Родитель);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.Видимость = ВидимостьСлужебныхПолей;
		Элемент.ПутьКДанным = "ДеревоРегистра." + Имя + КэшЗначений.ОкончаниеРучнаяПравка;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыФормыПриЗаполненииГрафика()
	
	Перем ПодчиненныйЭлемент, УдаляемыеЭлементы, УдаляемыйЭлемент;
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для каждого ПодчиненныйЭлемент Из Элементы Цикл
		
		ЭлементНайден = СтрНайти(ПодчиненныйЭлемент.Имя, КэшЗначений.ОкончаниеДобавленГруппа) <> 0
			ИЛИ СтрНайти(ПодчиненныйЭлемент.Имя, КэшЗначений.ОкончаниеВыходной) <> 0
			ИЛИ СтрНайти(ПодчиненныйЭлемент.Имя, КэшЗначений.ОкончаниеЧасыПоГрафику) <> 0
			ИЛИ СтрНайти(ПодчиненныйЭлемент.Имя, КэшЗначений.ОкончаниеКоличествоСотрудниковСмены) <> 0
			ИЛИ СтрНайти(ПодчиненныйЭлемент.Имя, КэшЗначений.ОкончаниеДата) <> 0
			ИЛИ СтрНайти(ПодчиненныйЭлемент.Имя, КэшЗначений.ОкончаниеРучнаяПравка) <> 0
			ИЛИ СтрНайти(ПодчиненныйЭлемент.Имя, КэшЗначений.ОкончаниеНачалоРабочегоДня) <> 0;
		
			Если ЭлементНайден И ТипЗнч(ПодчиненныйЭлемент) = Тип("ПолеФормы") Тогда
			
			УдаляемыеЭлементы.Добавить(ПодчиненныйЭлемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		
		Элементы.Удалить(УдаляемыйЭлемент);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ИзменитьРеквизитыФормыПриЗаполненииГрафика()
	
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты   = Новый Массив;
	
	СуществующиеРеквизиты = Новый Массив;
	РеквизитыФормы = ПолучитьРеквизиты("ДеревоРегистра");
	
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		
		ЕстьРеквизит = Найти(РеквизитФормы.Имя, КэшЗначений.ОкончаниеДобавлен) <> 0
			ИЛИ Найти(РеквизитФормы.Имя, КэшЗначений.ОкончаниеДобавленИтог) <> 0
			ИЛИ Найти(РеквизитФормы.Имя, КэшЗначений.ОкончаниеВыходной) <> 0
			ИЛИ Найти(РеквизитФормы.Имя, КэшЗначений.ОкончаниеЧасыПоГрафику) <> 0
			ИЛИ Найти(РеквизитФормы.Имя, КэшЗначений.ОкончаниеКоличествоСотрудниковСмены) <> 0
			ИЛИ Найти(РеквизитФормы.Имя, КэшЗначений.ОкончаниеДата) <> 0
			ИЛИ Найти(РеквизитФормы.Имя, КэшЗначений.ОкончаниеРучнаяПравка) <> 0
			ИЛИ Найти(РеквизитФормы.Имя, КэшЗначений.ОкончаниеНачалоРабочегоДня) <> 0;
			
		Если ЕстьРеквизит Тогда
			СуществующиеРеквизиты.Добавить(РеквизитФормы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СуществующийРеквизит Из СуществующиеРеквизиты Цикл
		
		УдаляемыеРеквизиты.Добавить(СуществующийРеквизит);
		
	КонецЦикла;
	
	КолонкиДнейНедели = Новый Массив;
	КолонкиДнейНедели.Добавить(Элементы.ГрПонедельник);
	КолонкиДнейНедели.Добавить(Элементы.ГрВторник);
	КолонкиДнейНедели.Добавить(Элементы.ГрСреда);
	КолонкиДнейНедели.Добавить(Элементы.ГрЧетверг);
	КолонкиДнейНедели.Добавить(Элементы.ГрПятница);
	КолонкиДнейНедели.Добавить(Элементы.ГрСуббота);
	КолонкиДнейНедели.Добавить(Элементы.ГрВоскресенье);
	
	ОписаниеТиповДатаВремя = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ДатаСтрока = Новый Массив;
	ДатаСтрока.Добавить(Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Время)));
	ДатаСтрока.Добавить(Новый ОписаниеТипов("Строка"));
	ОписаниеТиповДатаСтрока = Новый ОписаниеТипов(ДатаСтрока);
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата");
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ДеньНедели = 0;
	
	Для каждого КолонкаДняНедели Из КолонкиДнейНедели Цикл
		
		ИмяЭлемента = Прав(КолонкаДняНедели.Имя, СтрДлина(КолонкаДняНедели.Имя) - 2) + КэшЗначений.ОкончаниеДобавлен;
		
		ЭлементНайден = Ложь;
		
		Для каждого СуществующийРеквизит Из СуществующиеРеквизиты Цикл
			
			Если СуществующийРеквизит.Имя = ИмяЭлемента Тогда
				
				ЭлементНайден = Истина;
				СуществующийРеквизит.Заголовок = "";
				
				КоличествоРеквизитов = УдаляемыеРеквизиты.Количество()-1;
				Для Инд = 0 По КоличествоРеквизитов Цикл
					
					Если УдаляемыеРеквизиты[КоличествоРеквизитов-Инд] = СуществующийРеквизит Тогда
						
						УдаляемыеРеквизиты.Удалить(КоличествоРеквизитов-Инд);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЭлементНайден Тогда
			
			ТекстЗаголовокЭлемента = КолонкаДняНедели.Заголовок + " "
				+ Формат(НачалоНедели + 86400 * ДеньНедели, НСтр("ru='Л=ru; ДФ=dd.MM.yy'"));
			
			// день недели
			Реквизит = Новый РеквизитФормы(ИмяЭлемента, ОписаниеТиповДата, "ДеревоРегистра", ТекстЗаголовокЭлемента, Истина);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
			// день недели итог для сотрудника
			ИмяЭлемента = Прав(КолонкаДняНедели.Имя, СтрДлина(КолонкаДняНедели.Имя) - 2) 
				+ КэшЗначений.ОкончаниеДобавленИтог;
			Реквизит = Новый РеквизитФормы(ИмяЭлемента, ОписаниеТиповДатаСтрока, "ДеревоРегистра", ТекстЗаголовокЭлемента, Истина);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
			// начало рабочего дня
			ИмяЭлемента = Прав(КолонкаДняНедели.Имя, СтрДлина(КолонкаДняНедели.Имя) - 2) + КэшЗначений.ОкончаниеНачалоРабочегоДня;
			Реквизит = Новый РеквизитФормы(ИмяЭлемента, ОписаниеТиповДата, "ДеревоРегистра", , Истина);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
			// выходной
			ИмяЭлемента = Прав(КолонкаДняНедели.Имя, СтрДлина(КолонкаДняНедели.Имя) - 2) + КэшЗначений.ОкончаниеВыходной;
			ЗаголовокЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru ='%1'"), ИмяЭлемента);
			Реквизит = Новый РеквизитФормы(ИмяЭлемента, ОписаниеТиповЧисло, "ДеревоРегистра", , Истина);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
			// часы по графику
			ИмяЭлемента = Прав(КолонкаДняНедели.Имя, СтрДлина(КолонкаДняНедели.Имя) - 2) + КэшЗначений.ОкончаниеЧасыПоГрафику;
			Реквизит = Новый РеквизитФормы(ИмяЭлемента, ОписаниеТиповЧисло, "ДеревоРегистра", , Истина);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
			// количество сотрудников смены
			ИмяЭлемента = Прав(КолонкаДняНедели.Имя, СтрДлина(КолонкаДняНедели.Имя) - 2) + КэшЗначений.ОкончаниеКоличествоСотрудниковСмены;
			Реквизит = Новый РеквизитФормы(ИмяЭлемента, ОписаниеТиповЧисло, "ДеревоРегистра", , Истина);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
			// дата
			ИмяЭлемента = Прав(КолонкаДняНедели.Имя, СтрДлина(КолонкаДняНедели.Имя) - 2) + КэшЗначений.ОкончаниеДата;
			Реквизит = Новый РеквизитФормы(ИмяЭлемента, ОписаниеТиповДатаВремя, "ДеревоРегистра", , Истина);
			ДобавляемыеРеквизиты.Добавить(Реквизит);

			// ручная правка
			ИмяЭлемента = Прав(КолонкаДняНедели.Имя, СтрДлина(КолонкаДняНедели.Имя) - 2) + КэшЗначений.ОкончаниеРучнаяПравка;
			Реквизит = Новый РеквизитФормы(ИмяЭлемента, ОписаниеТиповБулево, "ДеревоРегистра", , Истина);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
			ДеньНедели = ДеньНедели + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СуществующиеРеквизиты.Очистить();
	
	КоличествоРеквизитов = УдаляемыеРеквизиты.Количество()-1;
	
	Для Инд = 0 По КоличествоРеквизитов Цикл
		
		ИмяРеквизита = УдаляемыеРеквизиты[Инд].Путь + "." + УдаляемыеРеквизиты[Инд].Имя;
		УдаляемыеРеквизиты[Инд] = ИмяРеквизита;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	Возврат КолонкиДнейНедели;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииНедели()
	
	Если НачалоНедели < Дата(2000, 1, 1) Тогда
		
		НачалоНедели = ПредыдущееНачалоНедели;
		Возврат;
		
	КонецЕсли;
	
	НачалоНедели = НачалоНедели - (ДеньНедели(НачалоНедели) - 1) * 24 * 60 * 60;
	ЗаписатьГрафикРаботыВРегистрКлиент(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьГрафикРаботыВРегистрСервер(ТекущееНачалоНедели)
	
	СтруктураДатИКолонок = Новый Структура;
	День = 0;
	
	Для каждого ЗначениеПеречисления Из Перечисления.ДниНедели Цикл
		
		ИмяЗначенияПеречисления = ИмяПеречисления(ЗначениеПеречисления);

		СтруктураДатИКолонок.Вставить(Строка(ИмяЗначенияПеречисления),НачалоДня(ТекущееНачалоНедели) + День);
		День = День + 24 * 60 * 60;
		
	КонецЦикла;
	
	ТаблицаЗаписи = Новый ТаблицаЗначений;
	ТаблицаЗаписи.Колонки.Добавить("РабочаяСмена", Новый ОписаниеТипов("СправочникСсылка.РабочиеСменыСтруктурныхЕдиниц"));
	ТаблицаЗаписи.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ТаблицаЗаписи.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаЗаписи.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаЗаписи.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаЗаписи.Колонки.Добавить("ПродолжительностьРабочегоВремени", Новый ОписаниеТипов("Дата"));
	ТаблицаЗаписи.Колонки.Добавить("Очистить", Новый ОписаниеТипов("Булево"));
	
	Дерево = РеквизитФормыВЗначение("ДеревоРегистра");
	
	Для каждого Колонка Из Дерево.Колонки Цикл
		
		ПозицияСимвола = СтрНайти(Колонка.Имя,"Добавлен");
		
		Если ПозицияСимвола > 0 Тогда
			
			ИмяЗначенияПеречисления = Лев(Колонка.Имя, ПозицияСимвола-1);
			День = СтруктураДатИКолонок[ИмяЗначенияПеречисления];
			СтруктураДатИКолонок.Вставить(Колонка.Имя, День);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаСклад Из Дерево.Строки Цикл
		
		ОбработатьСтрокуСкладаПриЗаписиВРегистр(Дерево, СтрокаСклад, ТаблицаЗаписи);

	КонецЦикла;
	
	РегистрыСведений.ПланируемоеРабочееВремяСотрудников.ЗаписатьПланируемоеРабочееВремяСотрудников(ТаблицаЗаписи);
	
	СтруктураДатИКолонок.Очистить();
	ТаблицаЗаписи.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокуСкладаПриЗаписиВРегистр(Знач Дерево, Знач СтрокаСклад, ТаблицаЗаписи)
	
	Перем СтрокаРабочаяСмена;
	
	Для каждого СтрокаРабочаяСмена Из СтрокаСклад.Строки Цикл
		
		ОбработатьСтрокуРабочейСменыПриЗаписиВРегистр(Дерево, СтрокаРабочаяСмена, СтрокаСклад, ТаблицаЗаписи);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокуРабочейСменыПриЗаписиВРегистр(Знач Дерево, Знач СтрокаРабочаяСмена, Знач СтрокаСклад, ТаблицаЗаписи)
	
	Перем СтрокаДолжность;
	
	Для каждого СтрокаДолжность Из СтрокаРабочаяСмена.Строки Цикл
		
		ОбработатьСтрокуДолжностиПриЗаписиВРегистр(Дерево, СтрокаДолжность, СтрокаРабочаяСмена, СтрокаСклад, ТаблицаЗаписи);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокуДолжностиПриЗаписиВРегистр(Знач Дерево, Знач СтрокаДолжность, Знач СтрокаРабочаяСмена, Знач СтрокаСклад, ТаблицаЗаписи)
	
	Перем СтрокаСотрудник;
	
	Для каждого СтрокаСотрудник Из СтрокаДолжность.Строки Цикл
		
		ОбработатьСтрокуСотрудникаПриЗаписиВРегистр(Дерево, СтрокаДолжность, СтрокаРабочаяСмена, СтрокаСклад, СтрокаСотрудник, ТаблицаЗаписи);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокуСотрудникаПриЗаписиВРегистр(Знач Дерево, Знач СтрокаДолжность, Знач СтрокаРабочаяСмена, Знач СтрокаСклад, Знач СтрокаСотрудник, ТаблицаЗаписи)
	
	Перем Колонка;
	
	Для каждого Колонка Из Дерево.Колонки Цикл
		
		Если СтрНайти(Колонка.Имя, КэшЗначений.ОкончаниеДобавлен) <> 0
			И СтрНайти(Колонка.Имя, КэшЗначений.ОкончаниеДобавленИтог) = 0
			И СтрНайти(Колонка.Имя,"Выходной") = 0 Тогда
			
			ДобавитьЗаписьВТаблицуЗаписи(
				Колонка, 
				СтрокаДолжность, 
				СтрокаРабочаяСмена, 
				СтрокаСклад, 
				СтрокаСотрудник, 
				ТаблицаЗаписи);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВТаблицуЗаписи(Знач Колонка, Знач СтрокаДолжность, Знач СтрокаРабочаяСмена, Знач СтрокаСклад, Знач СтрокаСотрудник, ТаблицаЗаписи)
	
	Перем ДеньНедели, СтрокаЗаписи;
	
	СтрокаЗаписи = ТаблицаЗаписи.Добавить();
	СтрокаЗаписи.РабочаяСмена = СтрокаРабочаяСмена.РаботаСотрудник;
	СтрокаЗаписи.Должность = СтрокаДолжность.РаботаСотрудник;
	СтрокаЗаписи.Сотрудник = СтрокаСотрудник.РаботаСотрудник;
	СтрокаЗаписи.ПродолжительностьРабочегоВремени = СтрокаСотрудник[Колонка.Имя];
	
	ДеньНедели = ПолучитьДеньНеделиИзИмениКолонки(Колонка.Имя, КэшЗначений.ИменаПолейДнейНедели);
	
	СтрокаЗаписи.Период = СтрокаСотрудник[ДеньНедели + КэшЗначений.ОкончаниеНачалоРабочегоДня];
	
	Если ЗначениеЗаполнено(СтрокаСотрудник[Колонка.Имя]) Тогда
		
		ПродолжительностьВСекундах = СтрокаСотрудник[Колонка.Имя] - Дата(1, 1, 1, 0, 0, 0);
		
		ДатаОкончания = СтрокаЗаписи.Период + ПродолжительностьВСекундах;
		Если НачалоДня(ДатаОкончания) <> НачалоДня(СтрокаЗаписи.Период) Тогда
			ДатаОкончания = КонецДня(СтрокаЗаписи.Период);
		КонецЕсли;
		
		СтрокаЗаписи.ДатаОкончания = ДатаОкончания;
		
	Иначе
		СтрокаЗаписи.ДатаОкончания = СтрокаЗаписи.Период;
	КонецЕсли;
	
	СтрокаЗаписи.Очистить = НЕ ЗначениеЗаполнено(СтрокаСотрудник[Колонка.Имя]);

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьГрафикРаботыВРегистрКлиент(БезВопроса)
	
	ПроверкаУспешна = ПроверитьЗаполнение();
	
	Если ПроверкаУспешна Тогда
		
		Если Модифицированность Тогда
			
			Если БезВопроса Тогда
				
				ЗаписатьГрафикРаботыВРегистрСервер(ПредыдущееНачалоНедели);
				Модифицированность = Ложь;
				ЗаполнитьАктуальныйГрафикРаботы();
				
			Иначе
				
				ТекстВопроса = НСтр("ru = 'Записать измененные данные за неделю с %1 по %2?'");
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, 
					Формат(ПредыдущееНачалоНедели, "ДФ=dd.MM.yy"), 
					Формат(ПредыдущееНачалоНедели + 24 * 60 * 60 * 7, "ДФ=dd.MM.yy"));
				
				ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросПриЗаписиГрафикаРаботы", ЭтотОбъект);
				ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьАктуальныйГрафикРаботы();
			
		КонецЕсли;
		
	Иначе
		
		ОтказатьсяОтГрафикаРаботПоСотрудникам();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтГрафикаРаботПоСотрудникам()
	
	ОтборСклад = ПредыдущийСклад;
	НачалоНедели = ПредыдущееНачалоНедели;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	// подсказка уровня склад
	ПодсказкаУровняСклад = УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(
		ПодсказкаУровняСклад.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, 
		"ДеревоРегистра.ГрафикСкладаЗаполнен", Истина, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, 
		"ДеревоРегистра.УровеньСклад", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(ПодсказкаУровняСклад, "ДеревоРегистраИнформация");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ПодсказкаУровняСклад, "Текст", НСтр("ru = 'Установить график'"));
	
	// подсказка уровня смена
	ПодсказкаУровняСмена = УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(
		ПодсказкаУровняСмена.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, 
		"ДеревоРегистра.УровеньСклад", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, 
		"ДеревоРегистра.РабочаяСменаЗаполнена", Истина, ВидСравненияКомпоновкиДанных.НеРавно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(ПодсказкаУровняСмена, "ДеревоРегистраИнформация");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ПодсказкаУровняСмена, "Текст", НСтр("ru = 'Создать рабочую смену'"));
	
	Для каждого ПодчиненныйЭлемент Из Элементы Цикл
		
		Если СтрНайти(ПодчиненныйЭлемент.Имя,"Добавлен") > 0 
			И ТипЗнч(ПодчиненныйЭлемент) = Тип("ПолеФормы") Тогда
			
			ДеньНедели = ПолучитьДеньНеделиИзИмениКолонки(ПодчиненныйЭлемент.Имя, КэшЗначений.ИменаПолейДнейНедели);
			
			// цвет фона выходного дня
			НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
			НовоеУсловноеОформление.Использование = Истина;
			НовоеУсловноеОформление.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ГолубойСКраснымОттенком);
			
			ЭлементОтбора = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРегистра." + ДеньНедели + КэшЗначений.ОкончаниеВыходной);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = 1;
			ЭлементОтбора.Использование = Истина;
			
			ОформляемоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПодчиненныйЭлемент.Имя);
			
			// шрифт итогов количества сотрудников
			ШрифтИтоговКоличестваСотрудников = УсловноеОформление.Элементы.Добавить();
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ШрифтИтоговКоличестваСотрудников.Отбор, 
				"ДеревоРегистра.УровеньДолжность", Истина, ВидСравненияКомпоновкиДанных.Равно);
			РаботаСФормой.ДобавитьОформляемыеПоля(ШрифтИтоговКоличестваСотрудников, ДеньНедели + КэшЗначений.ОкончаниеДобавленИтог);
			ШрифтВажнойНадписи = Метаданные.ЭлементыСтиля.ВажнаяНадписьШрифт;
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(ШрифтИтоговКоличестваСотрудников, "Шрифт", ШрифтВажнойНадписи.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьЭлементов()

	ЕстьПравоИзменения = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПланируемоеРабочееВремяСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоРегистра", "ТолькоПросмотр", НЕ ЕстьПравоИзменения);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоРегистраЗаполнить", "Видимость", ЕстьПравоИзменения);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоРегистраДобавитьСотрудника", "Видимость", ЕстьПравоИзменения);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоРегистраКонтекстноеМенюДобавитьСотрудника", "Видимость", ЕстьПравоИзменения);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьОдинДеньСотрудникаПоГрафикуКонтекстно", "Видимость", ЕстьПравоИзменения);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьНеделюСотрудникаПоГрафикуКонтекстно", "Видимость", ЕстьПравоИзменения);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИтогВыбранныхДнейПоДолжности(СтрокаДолжность, ДеньНедели)
	
	КоличествоСотрудниковСменыПлан = СтрокаДолжность[ДеньНедели + КэшЗначений.ОкончаниеКоличествоСотрудниковСмены];
	КоличествоСотрудниковСменыФакт = 0;
	Для каждого СтрокаСотрудник Из СтрокаДолжность.ПолучитьЭлементы() Цикл
	
		Если ЗначениеЗаполнено(СтрокаСотрудник[ДеньНедели + КэшЗначений.ОкончаниеДобавлен]) Тогда
			
			КоличествоСотрудниковСменыФакт = КоличествоСотрудниковСменыФакт + 1;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ПолучитьСтрокуИтоговПоГруппеДолжность(КоличествоСотрудниковСменыПлан, 
		КоличествоСотрудниковСменыФакт,
		КэшЗначений);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуИтоговПоГруппеДолжность(Знач КоличествоСотрудниковСменыПлан,
	Знач КоличествоСотрудниковСменыФакт,
	Знач КэшЗначений)
	
	Возврат СтрШаблон(КэшЗначений.ШаблонЗаполненияИтогов, 
		КоличествоСотрудниковСменыФакт, 
		КоличествоСотрудниковСменыПлан);

КонецФункции

&НаСервере
Функция ИмяПеречисления(ЗначениеПеречисления)

	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	
	Возврат  Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИтогПоСотрудникуЗаДеньСтрокой(ЧасыЗаДень, ЧасыИтог)
	
	ПустаяДата = Дата(1, 1, 1, 0, 0, 0);
	СуткиДата = Дата(1, 1, 1, 23, 59, 0);
	
	Если ЧасыЗаДень >= ЧасыИтог Тогда
		
		Возврат Формат(ЧасыЗаДень, "ДФ=ЧЧ:мм");
		
	Иначе
			
		Если ЧасыИтог = СуткиДата Тогда
			
			ТретийПараметр = НСтр("ru = '≥24:00'");
			
		Иначе
			
			ТретийПараметр = Формат(ЧасыИтог, "ДФ=ЧЧ:мм");
			
		КонецЕсли;
		
		Если ЧасыЗаДень = ПустаяДата Тогда
			
			ТретийПараметр = "";
			
		КонецЕсли;
		
		ВторойПараметр = НСтр("ru = 'из'");
		Если ЧасыЗаДень = ПустаяДата
			И НЕ ЗначениеЗаполнено(ТретийПараметр) Тогда
			
			ВторойПараметр = "";
			
		КонецЕсли;
		
		Возврат СтрШаблон("%1 %2 %3", 
			Формат(ЧасыЗаДень, "ДФ=ЧЧ:мм"),
			ВторойПараметр,
			ТретийПараметр);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВопросСохраненияПередПечатью(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаписатьГрафикРаботыВРегистрКлиент(Истина);
	ВыполнитьКомандуПечати();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуПечати()
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(ПредопределенноеЗначение("Справочник.РабочиеСменыСтруктурныхЕдиниц.ПустаяСсылка"));
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("НачалоНедели", НачалоНедели);
	ПараметрыПечати.Вставить("ОтборСклад", ОтборСклад);
	ПараметрыПечати.Вставить("ОтборОрганизация", ОтборОрганизация);
	ПараметрыПечати.Вставить("ОтборПодразделение", ОтборПодразделение);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"РегистрСведений.ПланируемоеРабочееВремяСотрудников",
		"ПланГрафикСПодписью",
		ПараметрКоманды,
		ЭтотОбъект,
		ПараметрыПечати);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСотрудникаНаКлиенте()
	
	Перем ДолжностьОткрытия, СменаОткрытия;
	
	ТекущиеДанные = Элементы.ДеревоРегистра.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.УровеньСотрудник Тогда
		
		ДолжностьОткрытия = ТекущиеДанные.ПолучитьРодителя().РаботаСотрудник;
		СменаОткрытия = ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя().РаботаСотрудник;
		
	ИначеЕсли ТекущиеДанные.УровеньДолжность Тогда

		ДолжностьОткрытия = ТекущиеДанные.РаботаСотрудник;
		СменаОткрытия = ТекущиеДанные.ПолучитьРодителя().РаботаСотрудник;
		
	ИначеЕсли ТекущиеДанные.УровеньСмена Тогда
	
		СменаОткрытия = ТекущиеДанные.РаботаСотрудник;
		
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("РабочаяСмена", СменаОткрытия);
	ПараметрыОткрытияФормы.Вставить("Должность", ДолжностьОткрытия);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НомерСтроки", 
		Элементы.ДеревоРегистра.ТекущиеДанные.НомерСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьДобавлениеСотрудника", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("РегистрСведений.ПланируемоеРабочееВремяСотрудников.Форма.ФормаДобавленияСотрудника",
		ПараметрыОткрытияФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавлениеСотрудника(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ДобавитьСотрудникаВДеревоРегистра(Результат);
		ЗаполнитьКэшЗначенийИдентификаторамиСтрок();
		РазвернутьДеревоРегистра(Неопределено);
		
		Идентификатор = Неопределено;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"НомерСтроки",
			Идентификатор,
			ДеревоРегистра.ПолучитьЭлементы(),
			ДополнительныеПараметры.НомерСтроки,
			Ложь);
		
		Элементы.ДеревоРегистра.ТекущаяСтрока = Идентификатор;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСотрудникаВДеревоРегистра(Результат)
	
	Склад = Результат.РабочаяСмена.Склад;
	РабочаяСмена = Результат.РабочаяСмена;
	Должность = Результат.Должность;
	Сотрудник = Результат.Сотрудник;
	
	Дерево = РеквизитФормыВЗначение("ДеревоРегистра");
	
	НайденСклад = Дерево.Строки.Найти(Склад, "РаботаСотрудник");
	
	Если НайденСклад <> Неопределено Тогда
		
		НайденаРабочаяСмена = НайденСклад.Строки.Найти(РабочаяСмена, "РаботаСотрудник");
		Если НайденаРабочаяСмена <> Неопределено Тогда
			
			НайденаДолжность = НайденаРабочаяСмена.Строки.Найти(Должность, "РаботаСотрудник");
			Если НайденаДолжность <> Неопределено Тогда
				
				НайденСотрудник = НайденаДолжность.Строки.Найти(Сотрудник, "РаботаСотрудник");
				
				Если НайденСотрудник = Неопределено Тогда
					
					ДобавитьНовуюЗаписьПоСотрудникуВДолжность(Дерево, НайденаДолжность, Сотрудник);
					Модифицированность = Истина;
					
				Иначе
					
					ТекстСообщения = СтрШаблон(НСтр("ru='Сотрудник ""%1"" уже есть разделе ""%2/%3/%4""'"),
						Сотрудник, Склад, РабочаяСмена, Должность);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = СтрШаблон(НСтр("ru='Должность ""%1"" отсутствует в рабочей смене ""%2"" по складу ""%3"". Добавить можно в справочнике ""Рабочие смены""'"),
					Должность, РабочаяСмена, Склад);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоРегистра");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНовуюЗаписьПоСотрудникуВДолжность(Дерево, Родитель, Сотрудник)
	
	ЗаписьОфис = Родитель.Родитель.Родитель;
	
	ЗаписьСотрудник = Родитель.Строки.Добавить();
	ЗаписьСотрудник.СтрокаВставлена = Истина;
	ЗаписьСотрудник.УровеньСотрудник = Истина;
	ЗаписьСотрудник.РаботаСотрудник = Сотрудник;
	ЗаписьСотрудник.НомерСтроки = ПолучитьМаксимальныйНомерСтрокиДерева(Дерево) + 1;
	
	ЗаписьСотрудник.ГрафикРаботыСотрудника 
		= ПолучитьГрафикРаботыСотрудника(
			Сотрудник, 
			ОтборПодразделение, 
			ОтборОрганизация, 
			НачалоНедели);
	
	ЗаписьСотрудник.ГрафикСотрудникаЗаполнен = ЗначениеЗаполнено(ЗаписьСотрудник.ГрафикРаботыСотрудника);
	ЗаписьСотрудник.РабочаяСмена = Родитель.Родитель.РаботаСотрудник;
	СотрудникТрудоустроен = СотрудникТрудоустроен(Сотрудник, НачалоНедели);
	
	Если ЗаписьСотрудник.ГрафикСотрудникаЗаполнен Тогда
		Информация = СтрШаблон("<%1>", ЗаписьСотрудник.ГрафикРаботыСотрудника);
		График = ЗаписьСотрудник.ГрафикРаботыСотрудника;
	Иначе
		Если СотрудникТрудоустроен Тогда
			Информация = НСтр("ru = '<График не заполнен>'");
		Иначе
			Информация = НСтр("ru = '<Не трудоустроен>'");
		КонецЕсли;
		График = Родитель.Родитель.Родитель.ГрафикРаботыСклада;
	КонецЕсли;
	ЗаписьСотрудник.Информация = Информация;
	
	// обновить кэш итогов
	Для каждого День Из КэшЗначений.ИтогиПоЧасам Цикл
		
		Если День.Значение.Получить(Сотрудник) = Неопределено Тогда
			СтруктураПоСотруднику = Новый Структура("ИтогМинут, ИдентификаторыСтрок", 0, Новый Массив);
			День.Значение.Вставить(Сотрудник, СтруктураПоСотруднику);
		КонецЕсли;
	
	КонецЦикла;
	
	ДанныеГрафика = ПолучитьДанныеГрафика(График, НачалоНедели);
	
	Для каждого ДеньНедели Из КэшЗначений.ДниНедели Цикл
	
		ДатаДняНедели = ЗаписьОФис[ДеньНедели + КэшЗначений.ОкончаниеДата];
		НайденыДанныеГрафика = ДанныеГрафика.Найти(ДатаДняНедели, "День");
		Если НайденыДанныеГрафика <> Неопределено Тогда
			ЗаписьСотрудник[ДеньНедели + КэшЗначений.ОкончаниеНачалоРабочегоДня] = НайденыДанныеГрафика.ВремяНачала;
			ЗаписьСотрудник[ДеньНедели + КэшЗначений.ОкончаниеЧасыПоГрафику] = НайденыДанныеГрафика.ЧасыРаботы;
			ЗаписьСотрудник[ДеньНедели + КэшЗначений.ОкончаниеВыходной] = 1 - НайденыДанныеГрафика.РабочийДень;
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМаксимальныйНомерСтрокиДерева(Знач Дерево)
	
	НомераСтрок = Дерево.Строки.НайтиСтроки(Новый Структура("УровеньСотрудник", Истина), Истина);
	СписокЗначений = Новый СписокЗначений;
	Для каждого СтрокаДерева Из НомераСтрок Цикл
		СписокЗначений.Добавить(СтрокаДерева.НомерСтроки)
	КонецЦикла;
	СписокЗначений.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	Если СписокЗначений.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		Возврат СписокЗначений[0].Значение;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьГрафикРаботыСотрудника(Знач Сотрудник, Знач СтруктурнаяЕдиница, Знач Организация, Знач ПериодСреза)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СотрудникиСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
	               |ИЗ
	               |	РегистрСведений.Сотрудники.СрезПоследних(
	               |			&ПериодСреза,
	               |			Сотрудник = &Сотрудник
	               |				И &СтруктурнаяЕдиница
	               |				И &Организация
	               |				) КАК СотрудникиСрезПоследних";
	Запрос.УстановитьПараметр("ПериодСреза", ПериодСреза);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		УсловиеОрганизации = "Организация = &Организация";
	Иначе
		УсловиеОрганизации = "ИСТИНА";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		УсловиеПодразделения = "СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	Иначе
		УсловиеПодразделения = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Организация", УсловиеОрганизации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтруктурнаяЕдиница", УсловиеПодразделения);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.ГрафикиРаботы.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ГрафикРаботы;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеГрафика(Знач ГрафикРаботы, Знач НачалоНедели)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	               |	ГрафикиРаботы.ЧасыРаботы КАК ЧасыРаботы,
	               |	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) КАК День
	               |ПОМЕСТИТЬ ДанныеГрафика
	               |ИЗ
	               |	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	               |ГДЕ
	               |	ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
	               |	И ГрафикиРаботы.ВремяНачала >= &НачалоНедели
	               |	И ГрафикиРаботы.ВремяОкончания <= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&НачалоНедели, ДЕНЬ), ДЕНЬ, 7)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
	               |	ВЫБОР
	               |		КОГДА ДЕНЬНЕДЕЛИ(ДанныеПроизводственногоКалендаря.Дата) = 1
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	               |		КОГДА ДЕНЬНЕДЕЛИ(ДанныеПроизводственногоКалендаря.Дата) = 2
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	               |		КОГДА ДЕНЬНЕДЕЛИ(ДанныеПроизводственногоКалендаря.Дата) = 3
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
	               |		КОГДА ДЕНЬНЕДЕЛИ(ДанныеПроизводственногоКалендаря.Дата) = 4
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
	               |		КОГДА ДЕНЬНЕДЕЛИ(ДанныеПроизводственногоКалендаря.Дата) = 5
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
	               |		КОГДА ДЕНЬНЕДЕЛИ(ДанныеПроизводственногоКалендаря.Дата) = 6
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	               |		КОГДА ДЕНЬНЕДЕЛИ(ДанныеПроизводственногоКалендаря.Дата) = 7
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	               |	КОНЕЦ КАК ДеньНедели,
	               |	ВЫБОР
	               |		КОГДА ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК РабочийДень
	               |ПОМЕСТИТЬ ДанныеПроизводственногоКалендаря
	               |ИЗ
	               |	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, ДЕНЬ) >= НАЧАЛОПЕРИОДА(&НачалоНедели, ДЕНЬ)
	               |	И ДанныеПроизводственногоКалендаря.Дата <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоНедели, ДЕНЬ, 6), ДЕНЬ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеПроизводственногоКалендаря.Дата КАК День,
	               |	ДанныеПроизводственногоКалендаря.ДеньНедели КАК ДеньНедели,
	               |	ДанныеПроизводственногоКалендаря.РабочийДень КАК РабочийДень,
	               |	ISNULL(ДанныеГрафика.ВремяНачала, ДанныеПроизводственногоКалендаря.Дата)  КАК ВремяНачала,
	               |	ISNULL(ДанныеГрафика.ЧасыРаботы, 0) КАК ЧасыРаботы
	               |ИЗ
	               |	ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеГрафика КАК ДанныеГрафика
	               |		ПО ДанныеПроизводственногоКалендаря.Дата = ДанныеГрафика.День";
	Запрос.УстановитьПараметр("НачалоНедели", НачалоНедели);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	КэшЗначений = Новый Структура;
	ИменаПолейДнейНедели = Новый Массив;
	ИменаПолейДнейНедели.Добавить("Добавлен");
	ИменаПолейДнейНедели.Добавить("ДобавленИтог");
	ИменаПолейДнейНедели.Добавить("Выходной");
	ИменаПолейДнейНедели.Добавить("ЧасыПоГрафику");
	ИменаПолейДнейНедели.Добавить("КоличествоСотрудниковСмены");
	ИменаПолейДнейНедели.Добавить("Дата");
	ИменаПолейДнейНедели.Добавить("РучнаяПравка");
	
	КэшЗначений.Вставить("ИменаПолейДнейНедели", ИменаПолейДнейНедели);
	
	КэшЗначений.Вставить("ОкончаниеЧасыПоГрафику", "ЧасыПоГрафику");
	КэшЗначений.Вставить("ОкончаниеДобавлен", "Добавлен");
	КэшЗначений.Вставить("ОкончаниеДобавленИтог", "ДобавленИтог");
	КэшЗначений.Вставить("ОкончаниеДобавленГруппа", "ДобавленГруппа");
	КэшЗначений.Вставить("ОкончаниеВыходной", "Выходной");
	КэшЗначений.Вставить("ОкончаниеКоличествоСотрудниковСмены", "КоличествоСотрудниковСмены");
	КэшЗначений.Вставить("ОкончаниеДата", "Дата");
	КэшЗначений.Вставить("ОкончаниеРучнаяПравка", "РучнаяПравка");
	КэшЗначений.Вставить("ОкончаниеНачалоРабочегоДня", "НачалоРабочегоДня");
	
	КэшЗначений.Вставить("ШаблонЗаполненияИтогов", НСтр("ru = '%1 из %2'"));
	
	КэшЗначений.Вставить("ИтогиПоЧасам", Неопределено);
	
	// порядок дней в массиве важен
	МассивДнейНедели = Новый Массив;
	МассивДнейНедели.Добавить("Понедельник");
	МассивДнейНедели.Добавить("Вторник");
	МассивДнейНедели.Добавить("Среда");
	МассивДнейНедели.Добавить("Четверг");
	МассивДнейНедели.Добавить("Пятница");
	МассивДнейНедели.Добавить("Суббота");
	МассивДнейНедели.Добавить("Воскресенье");
	КэшЗначений.Вставить("ДниНедели", МассивДнейНедели);
	
КонецПроцедуры

#КонецОбласти