
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает состав выбранного сегмента
//
// Параметры:
//  Сегмент			 - 	СправочникСсылка.СегментыНоменклатуры - сегмент, состав которого необходимо получить
//  СпособДобавления - 	ПеречисленияСсылка.СпособыДобавленияВСегмент - способ добавления в сегмент
// 
// Возвращаемое значение:
//  Контрагенты - Массив - массив номенклатуры сегмента
//
Функция СоставВыбранногоСегмента(Сегмент, СпособДобавления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоставСегментаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СоставСегментаНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.СоставСегментаНоменклатуры КАК СоставСегментаНоменклатуры
	|ГДЕ
	|	СоставСегментаНоменклатуры.Сегмент В(&Сегмент)
	|	И (&ОтборПоСпособуДобавления
	|				И СоставСегментаНоменклатуры.СпособДобавления = &СпособДобавления
	|			ИЛИ НЕ &ОтборПоСпособуДобавления)";
	
	СпособДобавленияВСегмент = Неопределено;
	
	Если СпособДобавления = Неопределено Тогда
		СпособДобавленияВСегмент = Перечисления.СпособыДобавленияВСегмент.ПустаяСсылка();
	Иначе
		СпособДобавленияВСегмент = СпособДобавления;
	КонецЕсли;
	Запрос.УстановитьПараметр("Сегмент", Сегмент);	
	Запрос.УстановитьПараметр("ОтборПоСпособуДобавления", ЗначениеЗаполнено(СпособДобавленияВСегмент));
	Запрос.УстановитьПараметр("СпособДобавления", СпособДобавления);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Сортировать("Номенклатура");
	
	МассивСегмента = Новый Массив;
	Для Каждого НоменклатураРезультат Из Результат Цикл
		
		ТаблицаСегмента = Новый Структура;
		ТаблицаСегмента.Вставить("Номенклатура", НоменклатураРезультат.Номенклатура);
		ТаблицаСегмента.Вставить("Характеристика", НоменклатураРезультат.Характеристика);
		
		МассивСегмента.Добавить(ТаблицаСегмента);
		
	КонецЦикла;
	
	Возврат МассивСегмента;
	
КонецФункции

// Процедура обновляет состав выбранного сегмента по правилам
//
// Параметры:
//  Сегмент					 - СправочникСсылка.СегментыНоменклатуры - сегмент для обновления
//  СхемаКомпоновкиДанных	 - 	СхемаКомпоновкиДанных - схема компоновки данных сегмента
//
Процедура ОбновитьСоставВыбранногоСегментаПоПравилам(Сегмент, СхемаКомпоновкиДанных = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Сегмент.СхемаКомпоновкиДанных.Получить();	
	КонецЕсли;
	
	СкопироватьНастройкиСКД(Сегмент, СхемаКомпоновкиДанных);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	Попытка
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='СегментыНоменклатуры'", ОбщегоНазначения.КодОсновногоЯзыка())
			, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецПопытки;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	
	Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() = 0 Тогда
		НаборЗаписей = РегистрыСведений.СоставСегментаНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сегмент.Установить(Сегмент);
		НаборЗаписей.Отбор.СпособДобавления.Установить(Перечисления.СпособыДобавленияВСегмент.ПоПравилам);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
		
		ФормированиеСегмента = РегистрыСведений.ФормированиеСегментовНоменклатуры.СоздатьНаборЗаписей();
		ФормированиеСегмента.Отбор.Сегмент.Установить(Сегмент);
		НоваяСтрокаФормирования = ФормированиеСегмента.Добавить();
		НоваяСтрокаФормирования.Сегмент = Сегмент;
		НоваяСтрокаФормирования.ДатаПоследнегоФормирования = ТекущаяДатаСеанса();
		
		ФормированиеСегмента.Записать(Истина);
		
		УстановитьПривилегированныйРежим(Ложь); 
		
		Возврат;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаСегмента = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаСегмента);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	НаборЗаписей = РегистрыСведений.СоставСегментаНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сегмент.Установить(Сегмент);
	НаборЗаписей.Отбор.СпособДобавления.Установить(Перечисления.СпособыДобавленияВСегмент.ПоПравилам);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	СоставСегментаРучной = СоставВыбранногоСегмента(Сегмент, Перечисления.СпособыДобавленияВСегмент.Вручную);
	Для Каждого Номенклатура Из ТаблицаСегмента Цикл
		
		СтруктураПоПравилам = Новый Структура;
		СтруктураПоПравилам.Вставить("Номенклатура", Номенклатура.СлужебныеРеквизитыСсылка);
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			СтруктураПоПравилам.Вставить("Характеристика", Номенклатура.РеквизитыХарактеристикаНоменклатуры);
		Иначе
			СтруктураПоПравилам.Вставить("Характеристика", Справочники.Номенклатура.ПустаяСсылка());
		КонецЕсли; 
		
		НоменклатураДобавленаВручную = Ложь;
		Для Каждого СтруктураВручную Из СоставСегментаРучной Цикл
			Если ОбщегоНазначения.ДанныеСовпадают(СтруктураПоПравилам, СтруктураВручную) Тогда
				НоменклатураДобавленаВручную = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НоменклатураДобавленаВручную Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНоменклатура = НаборЗаписей.Добавить();
		СтрокаНоменклатура.Сегмент = Сегмент;
		СтрокаНоменклатура.Номенклатура = Номенклатура.СлужебныеРеквизитыСсылка;
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			СтрокаНоменклатура.Характеристика = Номенклатура.РеквизитыХарактеристикаНоменклатуры;
		Иначе
			СтрокаНоменклатура.Характеристика = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		СтрокаНоменклатура.СпособДобавления = Перечисления.СпособыДобавленияВСегмент.ПоПравилам;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
	ФормированиеСегмента = РегистрыСведений.ФормированиеСегментовНоменклатуры.СоздатьНаборЗаписей();
	ФормированиеСегмента.Отбор.Сегмент.Установить(Сегмент);
	НоваяСтрокаФормирования = ФормированиеСегмента.Добавить();
	НоваяСтрокаФормирования.Сегмент = Сегмент;
	НоваяСтрокаФормирования.ДатаПоследнегоФормирования = ТекущаяДатаСеанса();
	
	ФормированиеСегмента.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Процедура обновляет состав выбранного сегмента вручную
//
// Параметры:
//  Сегмент			 - 	СправочникСсылка.СегментыНоменклатуры - сегмент для обновления
//  СоставСегмента	 - 	Массив - номенклатура, для добавления в сегмент
//
Процедура ОбновитьСоставВыбранногоСегментаВручную(Сегмент, СоставСегмента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");

	НаборЗаписей = РегистрыСведений.СоставСегментаНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сегмент.Установить(Сегмент);
	НаборЗаписей.Отбор.СпособДобавления.Установить(Перечисления.СпособыДобавленияВСегмент.Вручную);
	
	Для Каждого Номенклатура Из СоставСегмента Цикл
		
		Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНоменклатура = НаборЗаписей.Добавить();
		СтрокаНоменклатура.Сегмент = Сегмент;
		СтрокаНоменклатура.Номенклатура = Номенклатура.Номенклатура;
		
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			СтрокаНоменклатура.Характеристика = Номенклатура.Характеристика;
		Иначе
			СтрокаНоменклатура.Характеристика = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		
		СтрокаНоменклатура.СпособДобавления = Перечисления.СпособыДобавленияВСегмент.Вручную;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СкопироватьНастройкиСКД(Сегмент, СхемаКомпоновкиДанных)
	
	ИзмененияНеТребуются = ЗначениеЗаполнено(Сегмент.ИмяШаблонаСКД) И Сегмент.ИмяШаблонаСКД <> "Основная";
	
	Если ИзмененияНеТребуются Тогда
		Возврат;
	КонецЕсли;
		
	НоваяСКД = Справочники.СегментыНоменклатуры.ПолучитьМакет("СегментыНоменклатуры");
	РаботаССегментами.ОчиститьНастройкиКомпоновкиДанных(НоваяСКД.НастройкиПоУмолчанию);
	РаботаССегментами.СкопироватьНастройкиКомпоновкиДанных(НоваяСКД.НастройкиПоУмолчанию, 
		СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	НаборСвойств_Справочник_Номенклатура = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_Общие");
		НоваяСКД.Параметры.НаборСвойств_Справочник_Номенклатура.Значение = НаборСвойств_Справочник_Номенклатура;
		НоваяСКД.НастройкиПоУмолчанию.ПараметрыДанных.УстановитьЗначениеПараметра("НаборСвойств_Справочник_Номенклатура",
			НаборСвойств_Справочник_Номенклатура);	
	СхемаКомпоновкиДанных = НоваяСКД;

КонецПроцедуры

#КонецОбласти

#КонецЕсли