#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СокращенноеНаименованиеКонфигурации =
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.СокращенноеНаименованиеКонфигурации();
	Если ЗначениеЗаполнено(СокращенноеНаименованиеКонфигурации) Тогда
		ШаблонПояснения = НСтр(
			"ru = 'В базу 1С:Документооборот будут добавлены недостающие ссылки на объекты %1.
			|В базу %1 будут добавлены недостающие ссылки на объекты 1С:Документооборота.
			|Внимание, операция может занять продолжительное время. Во время выполнения операции бесшовная интеграция с 1С:Документооборотом будет ограничена.'");
		
		Элементы.Пояснение.Заголовок = СтрШаблон(ШаблонПояснения, СокращенноеНаименованиеКонфигурации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьПодключение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИнтеграцияС1СДокументооборотом_УспешноеПодключение" И Источник <> ЭтотОбъект Тогда
		ПриПодключении();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтотОбъект);
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот";
	
	ОткрытьФорму(ИмяФормыПараметров,, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Синхронизовать(Команда)
	
	Если ОперацияЗавершена Тогда
		Закрыть(Новый Структура("ЛишниеСвязиДО, ЛишниеСвязиИС", ЛишниеСвязиДО, ЛишниеСвязиИС));
		Возврат;
	КонецЕсли;
	
	ЛишниеСвязиДО.Очистить();
	ЛишниеСвязиИС.Очистить();
	ОперацияЗавершена = Ложь;
	
	НачатьСинхронизацию();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НачатьСинхронизацию

&НаКлиенте
Процедура НачатьСинхронизацию()
	
	ДлительнаяОперация = НачатьСинхронизациюНаСервере();
	
	Элементы.Синхронизовать.Доступность = Ложь;
	ТекущееСостояние = НСтр("ru = 'Подготовка данных для выполнения операции'");
	Прогресс = 0;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("НачатьСинхронизациюЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
		ЭтотОбъект,
		ДлительнаяОперация,
		ОповещениеОЗавершении,,,
		Ложь);
	
КонецПроцедуры

&НаСервере
Функция НачатьСинхронизациюНаСервере()
	
	Попытка
		
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMClearFeedbackMarkInObjectLinksRequest");
		
		Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВыполнитьЗапросАсинхронно(
			Прокси,
			Запрос,
			УникальныйИдентификатор,
			НСтр("ru = 'Подготовка данных для синхронизации связей'"));
		
	Исключение
		
		ОбработатьИсключение(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура НачатьСинхронизациюЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Элементы.Синхронизовать.Доступность = Истина;
	
	Если Результат = Неопределено Тогда
		ТекущееСостояние = "";
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		Результат = НачатьСинхронизациюНаСервереЗавершение(Результат.РезультатДлительнойОперации);
		Если Результат.Успешно Тогда
			ВыполнитьСинхронизацию();
		Иначе
			ОбработатьИсключение(Результат.ТекстПредупреждения);
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбработатьИсключение(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьСинхронизациюНаСервереЗавершение(ОтветНаЗапросСтрока)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ОтветНаЗапрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СтрокаВОбъектXDTO(
		Прокси,
		ОтветНаЗапросСтрока);
	
	Результат = Новый Структура("Успешно, ТекстПредупреждения", Истина, "");
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОтветНаЗапрос, "DMError") Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстПредупреждения = СтрШаблон(
			"%1
			|
			|%2",
			СокрЛП(ОтветНаЗапрос.subject),
			СокрЛП(ОтветНаЗапрос.description));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыполнитьСинхронизацию

&НаКлиенте
Процедура ВыполнитьСинхронизацию()
	
	ИнтегрированныеОбъекты = ИнтегрированныеОбъекты();
	КоличествоОбъектов = ИнтегрированныеОбъекты.Количество();
	
	Если КоличествоОбъектов = 0 Тогда
		ЗавершитьСинхронизацию();
		Возврат;
	КонецЕсли;
	
	Индекс = 0;
	РазмерПорции = 500;
	
	СинхронизоватьПорциюОбъектов(ИнтегрированныеОбъекты, КоличествоОбъектов, Индекс, РазмерПорции);
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизоватьПорциюОбъектов(ИнтегрированныеОбъекты, КоличествоОбъектов, Индекс, РазмерПорции)
	
	Прогресс = Окр((100 * Индекс) / КоличествоОбъектов);
	
	Если Индекс = КоличествоОбъектов Тогда
		ЗавершитьСинхронизацию();
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = СинхронизоватьПорциюОбъектовНаСервере(
		ИнтегрированныеОбъекты,
		КоличествоОбъектов,
		Индекс,
		РазмерПорции);
	
	Элементы.Синхронизовать.Доступность = Ложь;
	ТекущееСостояние = НСтр("ru = 'Выполнение операции'");
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИнтегрированныеОбъекты", ИнтегрированныеОбъекты);
	ПараметрыОповещения.Вставить("КоличествоОбъектов", КоличествоОбъектов);
	ПараметрыОповещения.Вставить("Индекс", Индекс);
	ПараметрыОповещения.Вставить("РазмерПорции", РазмерПорции);
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"СинхронизоватьПорциюОбъектовЗавершение",
		ЭтотОбъект,
		ПараметрыОповещения);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
		ЭтотОбъект,
		ДлительнаяОперация,
		ОповещениеОЗавершении,,,
		Ложь);
	
КонецПроцедуры

&НаСервере
Функция СинхронизоватьПорциюОбъектовНаСервере(ИнтегрированныеОбъекты, КоличествоОбъектов, Индекс, РазмерПорции)
	
	Попытка
		
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMSynchronizeObjectLinksRequest");
		СвязиXDTO = Запрос.links; // СписокXDTO
		
		Для Индекс = Индекс По (Индекс + РазмерПорции - 1) Цикл
			Если Индекс > (КоличествоОбъектов - 1) Тогда
				Прервать;
			КонецЕсли;
			
			СвязьИС = ИнтегрированныеОбъекты[Индекс];
			
			СвязиXDTO.Добавить(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьDMLink(
					Прокси,
					СвязьИС.ИдентификаторОбъектаДО,
					СвязьИС.ТипОбъектаДО,
					СвязьИС.ОбъектИС));
		КонецЦикла;
		
		Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВыполнитьЗапросАсинхронно(
			Прокси,
			Запрос,
			УникальныйИдентификатор,
			НСтр("ru = 'Синхронизация связей'"));
		
	Исключение
		
		ОбработатьИсключение(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура СинхронизоватьПорциюОбъектовЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Элементы.Синхронизовать.Доступность = Истина;
	
	Если Результат = Неопределено Тогда
		ТекущееСостояние = "";
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		Результат = СинхронизоватьПорциюОбъектовНаСервереЗавершение(Результат.РезультатДлительнойОперации);
		Если Результат.Успешно Тогда
			СинхронизоватьПорциюОбъектов(
				ПараметрыОповещения.ИнтегрированныеОбъекты,
				ПараметрыОповещения.КоличествоОбъектов,
				ПараметрыОповещения.Индекс,
				ПараметрыОповещения.РазмерПорции);
		Иначе
			ОбработатьИсключение(Результат.ТекстПредупреждения);
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбработатьИсключение(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СинхронизоватьПорциюОбъектовНаСервереЗавершение(ОтветНаЗапросСтрока)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ОтветНаЗапрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СтрокаВОбъектXDTO(
		Прокси,
		ОтветНаЗапросСтрока);
	
	Результат = Новый Структура("Успешно, ТекстПредупреждения", Истина, "");
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОтветНаЗапрос, "DMError") Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстПредупреждения = СтрШаблон(
			"%1
			|
			|%2",
			СокрЛП(ОтветНаЗапрос.subject),
			СокрЛП(ОтветНаЗапрос.description));
	Иначе
		Для Каждого СвязьXDTO Из ОтветНаЗапрос.brokenLinks Цикл
			СвязьИС = ЛишниеСвязиИС.Добавить();
			СвязьИС.ОбъектИС = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СсылкаИзUUID(
				СвязьXDTO.ownerObject.type,
				СвязьXDTO.ownerObject.id);
			СвязьИС.ИдентификаторОбъектаДО = СвязьXDTO.linkedObject.id;
			СвязьИС.ТипОбъектаДО = СвязьXDTO.linkedObject.type;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗавершитьСинхронизацию

&НаКлиенте
Процедура ЗавершитьСинхронизацию()
	
	ДлительнаяОперация = ЗавершитьСинхронизациюНаСервере();
	
	Элементы.Синхронизовать.Доступность = Ложь;
	ТекущееСостояние = НСтр("ru = 'Завершение выполнения операции'");
	Прогресс = 100;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьСинхронизациюЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
		ЭтотОбъект,
		ДлительнаяОперация,
		ОповещениеОЗавершении,,,
		Ложь);
	
КонецПроцедуры

&НаСервере
Функция ЗавершитьСинхронизациюНаСервере()
	
	Попытка
		
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMGetObjectLinksWithoutFeedbackMarkRequest");
		
		Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВыполнитьЗапросАсинхронно(
			Прокси,
			Запрос,
			УникальныйИдентификатор,
			НСтр("ru = 'Завершение синхронизации связей'"));
		
	Исключение
		
		ОбработатьИсключение(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьСинхронизациюЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Элементы.Синхронизовать.Доступность = Истина;
	
	Если Результат = Неопределено Тогда
		ТекущееСостояние = "";
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		Результат = ЗавершитьСинхронизациюНаСервереЗавершение(Результат.РезультатДлительнойОперации);
		Если Результат.Успешно Тогда
			ОперацияЗавершена = Истина;
			ТекущееСостояние = НСтр("ru = 'Синхронизация успешно выполнена'");
			Элементы.Синхронизовать.Заголовок = НСтр("ru = 'Завершить'");
		Иначе
			ОбработатьИсключение(Результат.ТекстПредупреждения);
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбработатьИсключение(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗавершитьСинхронизациюНаСервереЗавершение(ОтветНаЗапросСтрока)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ОтветНаЗапрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СтрокаВОбъектXDTO(
		Прокси,
		ОтветНаЗапросСтрока);
	
	Результат = Новый Структура("Успешно, ТекстПредупреждения", Истина, "");
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОтветНаЗапрос, "DMError") Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстПредупреждения = СтрШаблон(
			"%1
			|
			|%2",
			СокрЛП(ОтветНаЗапрос.subject),
			СокрЛП(ОтветНаЗапрос.description));
	Иначе
		
		Для Каждого СвязьXDTO Из ОтветНаЗапрос.links Цикл
			
			ОбъектИСНеНайден = Ложь;
			
			Попытка
				СсылкаНаОбъектИС = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СсылкаИзUUID(
					СвязьXDTO.ownerObject.type,
					СвязьXDTO.ownerObject.ID);
			Исключение
				ОбъектИСНеНайден = Истина;
			КонецПопытки;
			
			Если (ОбъектИСНеНайден = Ложь)
					И (СсылкаНаОбъектИС = Неопределено
						Или Не ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъектИС)) Тогда
				ОбъектИСНеНайден = Истина;
			КонецЕсли;
			
			Если ОбъектИСНеНайден Тогда
				СвязьДО = ЛишниеСвязиДО.Добавить();
				СвязьДО.ОбъектДО = СвязьXDTO.linkedObject.navigationRef;
				СвязьДО.ПредставлениеОбъектаДО = СвязьXDTO.linkedObject.presentation;
				СвязьДО.ИдентификаторОбъектаДО = СвязьXDTO.linkedObject.id;
				СвязьДО.ТипОбъектаДО = СвязьXDTO.linkedObject.type;
				СвязьДО.ИдентификаторОбъектаИС = СвязьXDTO.ownerObject.id;
				СвязьДО.ТипОбъектаИС = СвязьXDTO.ownerObject.type;
				Продолжить;
			КонецЕсли;
			
			РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДобавитьСвязь(
				СвязьXDTO.linkedObject.id,
				СвязьXDTO.linkedObject.type,
				СсылкаНаОбъектИС,
				Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ИнтегрированныеОбъекты()
	
	ИнтегрированныеОбъекты = Новый Массив;
	
	ЗапросИнтегрированныеОбъекты = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект КАК Объект,
		|	ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО КАК ТипОбъектаДО,
		|	ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО КАК ИдентификаторОбъектаДО
		|ИЗ
		|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом
		|ГДЕ
		|	(ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО = ""DMDocument""
		|			ИЛИ ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО = ""DMInternalDocument""
		|			ИЛИ ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО = ""DMIncomingDocument""
		|			ИЛИ ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО = ""DMOutgoingDocument""
		|			ИЛИ ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО = ""DMCorrespondent""
		|			ИЛИ ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО = ""DMMeeting"")");
	
	ТипВсеСсылки = Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый.Тип;
	
	Выборка = ЗапросИнтегрированныеОбъекты.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ТипВсеСсылки.СодержитТип(ТипЗнч(Выборка.Объект)) Тогда
			Продолжить;
		КонецЕсли;
		
		ИнтегрированныеОбъекты.Добавить(
			СвязьИС(
				Выборка.Объект,
				Выборка.ИдентификаторОбъектаДО,
				Выборка.ТипОбъектаДО));
	КонецЦикла;
	
	Возврат ИнтегрированныеОбъекты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвязьИС(ОбъектИС, ИдентификаторОбъектаДО, ТипОбъектаДО)
	
	СвязьИС = Новый Структура;
	СвязьИС.Вставить("ОбъектИС", ОбъектИС);
	СвязьИС.Вставить("ИдентификаторОбъектаДО", ИдентификаторОбъектаДО);
	СвязьИС.Вставить("ТипОбъектаДО", ТипОбъектаДО);
	
	Возврат СвязьИС;
	
КонецФункции

// Проверяет подключение к ДО, выводя окно авторизации, если необходимо, и изменяя форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,,
		Ложь,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	Иначе // не удалось подключиться к ДО
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключении()
	
	ОбработатьФормуСогласноВерсииСервиса();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьФормуСогласноВерсииСервиса()
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотНедоступен;
		Возврат Ложь;
	КонецЕсли;
	
	ФормаОбработанаУспешно = Истина;
	
	Попытка
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("3.0.11.25") Тогда
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотДоступен;
			
		Иначе
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаВерсияНеПоддерживается;
			ФормаОбработанаУспешно = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		ОбработатьИсключение(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ФормаОбработанаУспешно;
	
КонецФункции

&НаСервере
Процедура ОбработатьИсключение(ИнформацияОбОшибке)
	
	ТекущееСостояние = "";
	Прогресс = 0;
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			ПредставлениеОшибки = ИнформацияОбОшибке;
		Иначе
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		ВызватьИсключение ПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти