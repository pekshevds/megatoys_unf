#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЗаписьБылаЗаписана = Ложь;

	Если Не ЗначениеЗаполнено(Запись.ИсходныйКлючЗаписи.ВидЦен) Тогда

		Запись.Автор = Пользователи.ТекущийПользователь();
		
		Запись.Период = НачалоДня(ТекущаяДатаСеанса());

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Актуальность", "Видимость", Ложь);

		Если Параметры.Свойство("ЗначенияЗаполнения") И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
			И Параметры.ЗначенияЗаполнения.Свойство("Номенклатура") И ЗначениеЗаполнено(
			Параметры.ЗначенияЗаполнения.Номенклатура) Тогда

			Запись.ЕдиницаИзмерения = Параметры.ЗначенияЗаполнения.Номенклатура.ЕдиницаИзмерения;

		КонецЕсли;

	КонецЕсли;

	Если Параметры.Свойство("ПериодЗаписи") Тогда

		Запись.Период = Параметры.ПериодЗаписи;

	КонецЕсли;

	Если Параметры.Свойство("ВидЦен") Тогда

		Если ЗначениеЗаполнено(Параметры.ВидЦен) Тогда

			Запись.ВидЦен = Параметры.ВидЦен;

		КонецЕсли;

	КонецЕсли;

	Если Не ЗначениеЗаполнено(Запись.ВидЦен) Тогда

		ВидЦенПоУмолчанию = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
		Если УправлениеДоступом.ЧтениеРазрешено(ВидЦенПоУмолчанию) Тогда
			Запись.ВидЦен = ВидЦенПоУмолчанию;
		КонецЕсли;

	КонецЕсли;

	Если Параметры.Свойство("Номенклатура") Тогда

		Если ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
			Запись.Номенклатура = Параметры.Номенклатура;
			Запись.ЕдиницаИзмерения = Параметры.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;

	КонецЕсли;

	Если Параметры.Свойство("Характеристика") И ЗначениеЗаполнено(Параметры.Характеристика) Тогда

		Запись.Характеристика = Параметры.Характеристика;

	КонецЕсли;

	Если Параметры.Свойство("Цена") Тогда

		Запись.Цена = Параметры.Цена;

	КонецЕсли;
	
	Если Параметры.Свойство("ВалютаЦены")
		И ЗначениеЗаполнено(Параметры.ВалютаЦены) Тогда

		Запись.ВалютаЦены = Параметры.ВалютаЦены;

	КонецЕсли;

	УстановитьОтметкуНезаполненногоДляХарактеристики(Запись.Номенклатура.ПроверятьЗаполнениеХарактеристики,
		Запись.Характеристика, Элементы.Характеристика);

	Если ВыполняетсяРасчетОчередиЦенВРазделеннойИБ(Запись.ВидЦен) Тогда

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПредупреждение", "Видимость",
			Истина);

	КонецЕсли;

	ОкруглятьВБольшуюСторону = Запись.ВидЦен.ОкруглятьВБольшуюСторону;
	ПорядокОкругления = Запись.ВидЦен.ПорядокОкругления;
	ПорядкиОкругленияОкр0_01 = Перечисления.ПорядкиОкругления.Окр0_01;
	ПсихологическоеОкругление = Запись.ВидЦен.ПсихологическоеОкругление;
	ИспользоватьРасширеннуюНастройкуОкругления = ИспользуютсяРасширенныеНастройкиОкругления(Запись.ВидЦен);
  
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ЦеныНоменклатуры);

	ИспользоватьХарактеристики = Запись.Номенклатура.ИспользоватьХарактеристики;
	
	ИспользоватьЕдиницыИзмерений = ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения");

	Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		ОбязательноеЗаполнениеХарактеристик = Запись.Номенклатура.ПроверятьЗаполнениеХарактеристики;
	КонецЕсли;
	
	Если НЕ ИспользоватьЕдиницыИзмерений Тогда
		Элементы.ДекорацияЗа.Видимость = Ложь;
	КонецЕсли;

	УстановитьПодсказкуНоменклатура(Элементы.Номенклатура, ОбязательноеЗаполнениеХарактеристик, ИспользоватьХарактеристики);
	УстановитьПодсказкуХарактеристика(Элементы.Характеристика, ОбязательноеЗаполнениеХарактеристик, ЗначениеЗаполнено(
		Запись.Характеристика));
		
	УстановитьПодсказкуДействующаяЦенаСервер();

	ТолькоПросмотр = Не РазрешеноРедактированиеЦенДокументов;
	
	Если Не ЗначениеЗаполнено(Запись.ВалютаЦены) И ЗначениеЗаполнено(Запись.ВидЦен) Тогда
		
		Запись.ВалютаЦены = Запись.ВидЦен.ВалютаЦены;
		
	КонецЕсли;
	
	Элементы.ДекорацияВалюта.Заголовок = ПолучитьЗаголовокДекорацииВалюта(Запись.ВидЦен, Запись.ВалютаЦены);
	
	НесколькоВалютДляЦен = Запись.ВидЦен.НесколькоВалютДляЦен;
	
	ТолькоПросмотр = Не РазрешеноРедактированиеЦенДокументов;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьВидимостьДоступностьЭлементов();
	УстановитьПодсказкуВидаЦены();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ЗаписьБылаЗаписана Тогда
		Оповестить("ИзмененаЦена", ЗаписьБылаЗаписана, Запись.Номенклатура);
		Оповестить("ОбновитьСписокНоменклатуры", ЗаписьБылаЗаписана, Запись.Номенклатура);
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Процедура - обработчик события ПередЗаписью формы.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ТекущийОбъект.ВидЦен.ТипВидаЦен <> Перечисления.ТипыВидовЦен.Статический Тогда

		Если ТекущийОбъект.ВидЦен.РассчитыватьАвтоматически Тогда

			ТекстСообщения = НСтр("ru ='Записи по данному виду цен рассчитываются только программой (автоматически).'");

		Иначе

			ТекстСообщения = НСтр(
				"ru ='Записи по данному виду цен рассчитываются программой и утверждаются в отдельной форме. Вызов формы осуществляется из формы списка видов цен.'");

		КонецЕсли;

		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Запись.ВидЦен", , Отказ);

	КонецЕсли;

	Если Модифицированность Тогда
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ВалютаЦены) Тогда
			ТекущийОбъект.ВалютаЦены = ТекущийОбъект.ВидЦен.ВалютаЦены;
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(Истина, "РегистрСведенийЦеныНоменклатурыЗаписьИнтерактивно");
	// СтандартныеПодсистемы.ОценкаПроизводительности

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаписатьЦеныХарактеристик(ТекущийОбъект, ПараметрыЗаписи);

	Если ТекущийОбъект.ВидЦен = Справочники.ВидыЦен.Оптовая Тогда
		РегистрыСведений.ОбъектыИнтеграцииCRM.ПослеЗаписиОбъекта(ТекущийОбъект.Номенклатура);
	КонецЕсли;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПослеЗаписи формы.
//
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ЗаписьБылаЗаписана = Истина;
	УстановитьПодсказкуДействующаяЦена();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)

	УстановитьПодсказкуДействующаяЦена();

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
Процедура НоменклатураПриИзменении(Элемент)

	СтруктураДанных = ПолучитьДанныеНоменклатураПриИзменении(Запись.Номенклатура);
	Запись.ЕдиницаИзмерения = СтруктураДанных.ЕдиницаИзмерения;
	ИспользоватьХарактеристики = СтруктураДанных.ИспользоватьХарактеристики;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВключаяХарактеристики", "Видимость",
		ИспользоватьХарактеристики);
	Если Не ИспользоватьХарактеристики Тогда

		Запись.ВключаяХарактеристики = Ложь;

	КонецЕсли;

	Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		ОбязательноеЗаполнениеХарактеристик = СтруктураДанных.ПроверятьЗаполнениеХарактеристики;
	Иначе
		ОбязательноеЗаполнениеХарактеристик = Ложь;
	КонецЕсли;

	УстановитьОтметкуНезаполненногоДляХарактеристики(СтруктураДанных.ПроверятьЗаполнениеХарактеристики,
		Запись.Характеристика, Элементы.Характеристика);

	УстановитьВидимостьДоступностьЭлементов();
	УстановитьПодсказкуДействующаяЦена();
	УстановитьПодсказкуНоменклатура(Элементы.Номенклатура, ОбязательноеЗаполнениеХарактеристик, ИспользоватьХарактеристики);
	УстановитьПодсказкуХарактеристика(Элементы.Характеристика, ОбязательноеЗаполнениеХарактеристик, ЗначениеЗаполнено(
		Запись.Характеристика));

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
Процедура ХарактеристикаПриИзменении(Элемент)

	СтруктураДанных = ПолучитьДанныеНоменклатураПриИзменении(Запись.Номенклатура);
	Если ИспользоватьХарактеристики Тогда

		Если ЗначениеЗаполнено(Запись.Характеристика) Тогда
			Запись.ВключаяХарактеристики = Ложь;
		КонецЕсли;

	КонецЕсли;

	УстановитьОтметкуНезаполненногоДляХарактеристики(СтруктураДанных.ПроверятьЗаполнениеХарактеристики,
		Запись.Характеристика, Элементы.Характеристика);

	УстановитьПодсказкуДействующаяЦена();
	
	УстановитьПодсказкуХарактеристика(Элементы.Характеристика, ОбязательноеЗаполнениеХарактеристик, ЗначениеЗаполнено(
		Запись.Характеристика));

КонецПроцедуры // ХарактеристикаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
Процедура ВидЦенПриИзменении(Элемент)

	СтруктураДанных = ПолучитьДанныеВидЦенПриИзменении(Запись.ВидЦен);
	ОкруглятьВБольшуюСторону = СтруктураДанных.ОкруглятьВБольшуюСторону;
	ПорядокОкругления = СтруктураДанных.ПорядокОкругления;
	ПсихологическоеОкругление = СтруктураДанных.ПсихологическоеОкругление;
	ИспользоватьРасширеннуюНастройкуОкругления = СтруктураДанных.ИспользоватьРасширеннуюНастройкуОкругления;
	НесколькоВалютДляЦен = СтруктураДанных.НесколькоВалютДляЦен;
	Запись.ВалютаЦены = СтруктураДанных.ВалютаЦены;

	УстановитьПодсказкуВидаЦены();

	Если СтруктураДанных.ВыполняетсяРасчетОчередиЦенВРазделеннойИБ = Истина Тогда

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПредупреждение", "Видимость",
			Истина);

	КонецЕсли;

	Запись.Цена = ОкруглитьЦену(Запись.Цена, Запись.ВидЦен);
	
	Элементы.ДекорацияВалюта.Заголовок = ПолучитьЗаголовокДекорацииВалюта(Запись.ВидЦен, Запись.ВалютаЦены);

	УстановитьПодсказкуДействующаяЦена();
	
	УстановитьВидимостьДоступностьЭлементов();

КонецПроцедуры // ВидЦенПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
Процедура ЦенаПриИзменении(Элемент)

	Запись.Цена = ОкруглитьЦену(Запись.Цена, Запись.ВидЦен);

КонецПроцедуры // ЦенаПриИзменении()

&НаКлиенте
Процедура ВключаяХарактеристикиПриИзменении(Элемент)

	Если Запись.ВключаяХарактеристики Тогда
	
		Запись.Характеристика = Неопределено;	
		
	КонецЕсли;	
	УстановитьВидимостьДоступностьЭлементов();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаФорме(Команда)

	Если ПроверитьЗаполнение() Тогда
		ЗаписатьОбъектНаФорме();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаФорме(Команда)

	ЗаписатьОбъектНаФорме();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ВыполняетсяРасчетОчередиЦенВРазделеннойИБ(ВидЦен)

	РезультатПроверки = Ложь;
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда

		Возврат РезультатПроверки;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос("ВЫБРАТЬ ИСТИНА ИЗ РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦен ГДЕ СвязиВидовЦен.ВидЦенРасчетный = &ВидЦен ИЛИ СвязиВидовЦен.ВидЦенБазовый = &ВидЦен");
	Запрос.УстановитьПараметр("ВидЦен", ВидЦен);

	РезультатВыполненияЗапроса = Запрос.Выполнить();
	Если РезультатВыполненияЗапроса.Пустой() Тогда

		Возврат РезультатПроверки;

	КонецЕсли;
	
	// Параметры:
	//   ОбластьДанных
	//   Использование
	//   ЗапланированныйМоментЗапуска
	//   ЭксклюзивноеВыполнение.
	//   ИмяМетода - обязательно для указания.
	//   Параметры
	//   Ключ
	//   ИнтервалПовтораПриАварийномЗавершении.
	//   Расписание
	//   КоличествоПовторовПриАварийномЗавершении

	ИмяМетода = "ЦенообразованиеСервер.РасчетОчередиЦен";

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяМетода", ИмяМетода);

	ТаблицаНайденныхЗаданий = ОчередьЗаданий.ПолучитьЗадания(ПараметрыЗадания);

	Если ТаблицаНайденныхЗаданий.Количество() <> 0 Тогда

		Для Каждого ЗапланированноеРЗ Из ТаблицаНайденныхЗаданий Цикл

			Если ЗапланированноеРЗ.СостояниеЗадания = Перечисления.СостоянияЗаданий.Выполняется Тогда

				РезультатПроверки = Истина;
				Прервать;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	Возврат РезультатПроверки;

КонецФункции

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
Функция ПолучитьДанныеНоменклатураПриИзменении(Номенклатура)

	Возврат Новый Структура("ЕдиницаИзмерения, ИспользоватьХарактеристики, ПроверятьЗаполнениеХарактеристики",
		Номенклатура.ЕдиницаИзмерения, Номенклатура.ИспользоватьХарактеристики,
		Номенклатура.ПроверятьЗаполнениеХарактеристики);

КонецФункции

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ВидЦенПриИзменении.
//
Функция ПолучитьДанныеВидЦенПриИзменении(ВидЦен)

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ОкруглятьВБольшуюСторону", ВидЦен.ОкруглятьВБольшуюСторону);
	СтруктураДанных.Вставить("ПорядокОкругления", ВидЦен.ПорядокОкругления);
	СтруктураДанных.Вставить("ВыполняетсяРасчетОчередиЦенВРазделеннойИБ", ВыполняетсяРасчетОчередиЦенВРазделеннойИБ(
		ВидЦен));
	СтруктураДанных.Вставить("ПсихологическоеОкругление", ВидЦен.ПсихологическоеОкругление);
	СтруктураДанных.Вставить("ИспользоватьРасширеннуюНастройкуОкругления", ИспользуютсяРасширенныеНастройкиОкругления(
		ВидЦен));
	СтруктураДанных.Вставить("НесколькоВалютДляЦен", ВидЦен.НесколькоВалютДляЦен);
	СтруктураДанных.Вставить("ВалютаЦены", ВидЦен.ВалютаЦены);

	Возврат СтруктураДанных;

КонецФункции

&НаСервереБезКонтекста
// Округляет число по заданному порядку.
//
// Параметры:
//  Число        - Число, которое необходимо округлить
//  ПорядокОкругления - Перечисления.ПорядкиОкругления - порядок округления
//  ОкруглятьВБольшуюСторону - Булево - округления в большую сторону.
//
// Возвращаемое значение:
//  Число        - результат округления.
//
Функция ОкруглитьЦену(Число, ВидЦен)

	СтруктураОкругления = Новый Структура;
	
	// параметры округления надо получить из объекта		
	КоличествоСтрок = ВидЦен.ПравилаОкругленияЦены.Количество();

	Если КоличествоСтрок = 0 Тогда
		
		// распределения по диапазонам нет, возьмем из объекта
		ПорядокОкругления = ВидЦен.ПорядокОкругления;
		Если Не ЗначениеЗаполнено(ПорядокОкругления) Тогда
			ПорядокОкругления	= Перечисления.ПорядкиОкругления.Окр0_01;
		КонецЕсли;

		СтруктураОкругления.Вставить("ПорядокОкругления", ПорядокОкругления);
		СтруктураОкругления.Вставить("ОкруглятьВБольшуюСторону", ВидЦен.ОкруглятьВБольшуюСторону);
		СтруктураОкругления.Вставить("ПсихологическоеОкругление", ВидЦен.ПсихологическоеОкругление);

	Иначе
		
		// есть распределение по диапазонам
		Для Индекс = 1 По КоличествоСтрок Цикл

			ПравилаОкругления = ВидЦен.ПравилаОкругленияЦены[КоличествоСтрок - Индекс];
			Если ПравилаОкругления.НижняяГраницаДиапазонаЦен <= Число Тогда

				СтруктураОкругления = Новый Структура;
				ПорядокОкругления = ПравилаОкругления.ТочностьОкругления;
				Если Не ЗначениеЗаполнено(ПорядокОкругления) Тогда
					ПорядокОкругления	= Перечисления.ПорядкиОкругления.Окр0_01;
				КонецЕсли;
				СтруктураОкругления.Вставить("ПорядокОкругления", ПорядокОкругления);
				СтруктураОкругления.Вставить("ОкруглятьВБольшуюСторону", ВидЦен.ОкруглятьВБольшуюСторону);
				СтруктураОкругления.Вставить("ПсихологическоеОкругление", ПравилаОкругления.ПсихологическоеОкругление);

				Прервать;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	ОкруглитьЦенуПоПравилу(Число, СтруктураОкругления);

	Возврат Число;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИспользуютсяРасширенныеНастройкиОкругления(ВидЦен)

	ИспользоватьРасширеннуюНастройкуОкругления = Ложь;

	Если ВидЦен.ПравилаОкругленияЦены.Количество() = 1 И ВидЦен.ПравилаОкругленияЦены[0].НижняяГраницаДиапазонаЦен = 0
		И ВидЦен.ПравилаОкругленияЦены[0].ПсихологическоеОкругление = 0 Тогда
		ИспользоватьРасширеннуюНастройкуОкругления = Ложь;
	ИначеЕсли ВидЦен.ПравилаОкругленияЦены.Количество() >= 1 Тогда
		ИспользоватьРасширеннуюНастройкуОкругления = Истина;
	Иначе
		ИспользоватьРасширеннуюНастройкуОкругления = Ложь;
	КонецЕсли;

	Возврат ИспользоватьРасширеннуюНастройкуОкругления;

КонецФункции

&НаСервереБезКонтекста
Процедура ОкруглитьЦенуПоПравилу(Число, СтруктураОкругления)

	ОкруглятьВБольшуюСторону = СтруктураОкругления.ОкруглятьВБольшуюСторону;
	ПорядокОкругления = СтруктураОкругления.ПорядокОкругления;
	ПсихологическоеОкругление = СтруктураОкругления.ПсихологическоеОкругление;

	Порядок = Число(Строка(ПорядокОкругления)); 
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);

	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.

	Иначе

		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
			Число = Порядок * (КоличествоЦелыхИнтервалов + 1);

		Иначе
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Число = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);

		КонецЕсли;

	КонецЕсли;
	Число = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(Число, ПсихологическоеОкругление);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПодсказкуВидаЦены()

	СтруктураЗаголовка = Новый Структура("ТретийПараметр, ЧетвертыйПараметр", "", "");
	СтруктураЗаголовка.Вставить("ПервыйПараметр", ?(ИспользоватьРасширеннуюНастройкуОкругления, НСтр(
		"ru = 'Цены по диапазонам'"), НСтр("ru = 'Все цены'")));
	СтруктураЗаголовка.Вставить("ВторойПараметр", ?(Не ОкруглятьВБольшуюСторону, НСтр("ru = 'Арифметическим'"), НСтр(
		"ru = 'В большую сторону'")));
	СтруктураЗаголовка.Вставить("ИспользоватьРасширеннуюНастройкуОкругления",
		ИспользоватьРасширеннуюНастройкуОкругления);
	СтруктураЗаголовка.Вставить("ПорядокОкругления", ПорядокОкругления);
	СтруктураЗаголовка.Вставить("ПсихологическоеОкругление", ПсихологическоеОкругление);

	Элементы.ВидЦенРасширеннаяПодсказка.Заголовок = ЦенообразованиеКлиентСервер.ПолучитьКраткоеОписаниеСпособаОкругленияВидаЦены(
		СтруктураЗаголовка);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкуНезаполненногоДляХарактеристики(ПроверятьЗаполнениеХарактеристики, Характеристика,
	ЭлементХарактеристика)

	Если ПроверятьЗаполнениеХарактеристики И Не ЗначениеЗаполнено(Характеристика) Тогда

		ЭлементХарактеристика.ОтметкаНезаполненного = Истина;

	Иначе

		ЭлементХарактеристика.ОтметкаНезаполненного = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПодсказкуДействующаяЦена()

	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ВидЦен", Запись.ВидЦен);
	СтруктураЗаголовка.Вставить("ДатаОбработки", ТекущаяДата());
	СтруктураЗаголовка.Вставить("Номенклатура", Запись.Номенклатура);
	СтруктураЗаголовка.Вставить("Характеристика", Запись.Характеристика);
	СтруктураЗаголовка.Вставить("Коэффициент", 1);
	ТекстЗаголовка = ПолучитьОписаниеДействующейЦены(СтруктураЗаголовка);
	Элементы.ДекорацияТекущаяЦена.Заголовок = ТекстЗаголовка;

КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуДействующаяЦенаСервер()

	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ВидЦен", Запись.ВидЦен);
	СтруктураЗаголовка.Вставить("ДатаОбработки", ТекущаяДата());
	СтруктураЗаголовка.Вставить("Номенклатура", Запись.Номенклатура);
	СтруктураЗаголовка.Вставить("Характеристика", Запись.Характеристика);
	СтруктураЗаголовка.Вставить("Коэффициент", 1);
	ТекстЗаголовка = ПолучитьОписаниеДействующейЦены(СтруктураЗаголовка);
	Элементы.ДекорацияТекущаяЦена.Заголовок = ТекстЗаголовка;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсказкуНоменклатура(ЭлементНоменклатура, ОбязательноеЗаполнениеХарактеристик, ИспользоватьХарактеристики)

	ТекстПодсказки = "";
	Если ИспользоватьХарактеристики Тогда
			
		Если ОбязательноеЗаполнениеХарактеристик Тогда
			ТекстПодсказки = НСтр("ru='Обязательное заполнение характеристики'");
		Иначе
			ТекстПодсказки = НСтр("ru='Необязательное заполнение характеристики'");
		КонецЕсли;
		
	КонецЕсли;

	ЭлементНоменклатура.Подсказка = ТекстПодсказки;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсказкуХарактеристика(ЭлементХарактеристика, ОбязательноеЗаполнениеХарактеристик,
	ХарактеристикаЗаполнена)

	ТекстПодсказки = "";

	Если Не ОбязательноеЗаполнениеХарактеристик И Не ХарактеристикаЗаполнена Тогда
		ТекстПодсказки = НСтр("ru='Будет записана цена с пустой характеристикой'");
	КонецЕсли;

	ЭлементХарактеристика.Подсказка = ТекстПодсказки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеДействующейЦены(СтруктураЗаголовка)
	
	Если Не ЗначениеЗаполнено(СтруктураЗаголовка.ВидЦен) Тогда
		Возврат НСтр("ru='Цена не установлена'");
	КонецЕсли;

	ТекстЗаголовка = НСтр("ru='Действующая цена: %1 %2'");
	ВалютаЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЗаголовка.ВидЦен, "ВалютаЦены");
	СтруктураЗаголовка.Вставить("ВалютаДокумента", ВалютаЦены);
	ДействующаяЦена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураЗаголовка);
	Результат = СтрШаблон(ТекстЗаголовка, ДействующаяЦена, ВалютаЦены.СимвольноеПредставление);
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()

	Если ЗначениеЗаполнено(Запись.ДокументУстановки) Тогда
		ТолькоПросмотр = Истина;
		Элементы.ДокументУстановки.Видимость = Истина;
	КонецЕсли;
	Если ОбязательноеЗаполнениеХарактеристик Тогда
		
		Элементы.Характеристика.АвтоОтметкаНезаполненного = Не Запись.ВключаяХарактеристики;
		Элементы.Характеристика.ОтметкаНезаполненного = Не Запись.ВключаяХарактеристики;
		
		Если Запись.ВключаяХарактеристики Тогда
			ЗаголовокКоманды = НСтр("ru='Записать только для характеристик без цен и закрыть'");
			Элементы.ФормаЗаписатьНаФорме.Видимость = Ложь;
			Запись.Характеристика = Неопределено;
			Элементы.Характеристика.Доступность = Ложь;
		Иначе
			ЗаголовокКоманды = НСтр("ru='Записать и закрыть'");
			Элементы.ФормаЗаписатьНаФорме.Видимость = Истина;
			Элементы.Характеристика.Доступность = Истина;
		КонецЕсли;

	Иначе

		Если Запись.ВключаяХарактеристики Тогда
			Запись.Характеристика = Неопределено;
			Элементы.Характеристика.Доступность = Ложь;
		Иначе
			Элементы.Характеристика.Доступность = Истина;
		КонецЕсли;

		ЗаголовокКоманды = НСтр("ru='Записать и закрыть'");
		Элементы.ФормаЗаписатьНаФорме.Видимость = Истина;
		Элементы.Характеристика.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Характеристика.ОтметкаНезаполненного = Ложь;
			
	КонецЕсли;
	
	Элементы.БлокХарактеристика.Видимость = ИспользоватьХарактеристики;

	Элементы.ФормаЗаписатьИЗакрытьНаФорме.Заголовок = ЗаголовокКоманды;
	
	Элементы.ДекорацияВалюта.Заголовок = ПолучитьЗаголовокДекорацииВалюта(Запись.ВидЦен, Запись.ВалютаЦены);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВалютаЦены", 
		"Видимость", НесколькоВалютДляЦен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияВалюта", 
		"Видимость", Не НесколькоВалютДляЦен);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОбъектНаФорме()

	Если ОбязательноеЗаполнениеХарактеристик И Запись.ВключаяХарактеристики Тогда

		ЗаписатьЦеныХарактеристик(Запись, Новый Структура);
		ЗаписьБылаЗаписана = Истина;
		Модифицированность = Ложь;

	Иначе
		Записать();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьЦеныХарактеристик(Знач ТекущийОбъект, ПараметрыЗаписи)
	Перем ДеталиЗаписи;
	Если ТекущийОбъект.ВключаяХарактеристики Тогда

		ДеталиЗаписи = Новый Структура;
		ДеталиЗаписи.Вставить("Период", НачалоДня(ТекущийОбъект.Период));
		ДеталиЗаписи.Вставить("ВидЦен", ТекущийОбъект.ВидЦен);
		ДеталиЗаписи.Вставить("ВалютаЦены", ТекущийОбъект.ВалютаЦены);
		ДеталиЗаписи.Вставить("Номенклатура", ТекущийОбъект.Номенклатура);
		ДеталиЗаписи.Вставить("ЕдиницаИзмерения", ТекущийОбъект.ЕдиницаИзмерения);
		ДеталиЗаписи.Вставить("Цена", ТекущийОбъект.Цена);
		ДеталиЗаписи.Вставить("Автор", ТекущийОбъект.Автор);
		ДеталиЗаписи.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);

		ЦенообразованиеСервер.ЗаписатьЦеныХарактеристик(ДеталиЗаписи);

	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаголовокДекорацииВалюта(ВидЦен, ВалютаЦены)
	
	Значение = ВалютаЦены.СимвольноеПредставление;
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Значение = ВидЦен.ВалютаЦены.СимвольноеПредставление;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции	

#КонецОбласти