#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает ключ записи регистра.
//
Функция ПолучитьКлючЗаписи(СтруктураПараметров) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&НаДату,
		|			ВидЦен = &ВидЦен
		|				И Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("НаДату", 			СтруктураПараметров.Период);
	Запрос.УстановитьПараметр("Номенклатура", 		СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", 	СтруктураПараметров.Характеристика);
	Запрос.УстановитьПараметр("ВидЦен", 			СтруктураПараметров.ВидЦен);
	
	СтруктураВозврата = Новый Структура("ЗаписьСуществует, Период, ВидЦен, Номенклатура, Характеристика", Ложь);
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, СтруктураПараметров);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРезультат.Количество() > 0 Тогда
		
		СтруктураВозврата.Период 				= ТаблицаРезультат[0].Период;
		СтруктураВозврата.ЗаписьСуществует		= Истина;
		
	КонецЕсли; 

	Возврат СтруктураВозврата;

КонецФункции // ПолучитьКлючЗаписи()

// Устанавливает запись регистра по переданным данным
//
Процедура УстановитьИзменитьОсновнуюЦенуПродажи(ДанныеЗаполнения) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеЗаполнения);
	МенеджерЗаписи.Автор = Пользователи.АвторизованныйПользователь();
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры // УстановитьИзменитьОсновнуюЦенуПродажи()

// Функция возвращает список имен «ключевых» реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ВидЦен)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПриОпределенииЗначенияПоУмолчанию(СправочникСсылка, ИмяРеквизита, ВходящиеДанные, СтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию)
	
	Если СтрокаСопоставлена 
		И НЕ ЗначениеЗаполнено(ВходящиеДанные) Тогда
		
		ЗначениеПоУмолчанию = СправочникСсылка[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

// Поля загрузки данных из внешнего источника.
// 
// Параметры:
//  ТаблицаПолейЗагрузки - см. ЗагрузкаДанныхИзВнешнегоИсточника.СоздатьТаблицуПолейОписанияЗагрузки
//  НастройкиЗагрузкиДанных - см. ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере
//
Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт

	ОписанияТиповПолей = ЗагрузкаДанныхИзВнешнегоИсточника.НовыйОписанияТиповПолейЗагрузки();

	ИмяГруппыПолей = "Номенклатура";
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПоляНоменклатуры(ТаблицаПолейЗагрузки, ОписаниеТиповКолонка,
		ОписанияТиповПолей, НастройкиЗагрузкиДанных);

	ПроверитьИДобавитьКолонкиПоискаПоДополнительномуРеквизиту(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных,
		ОписаниеТиповКолонка, ОписанияТиповПолей.ОписаниеТиповСтрока1000, ИмяГруппыПолей);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПоляХарактеристики(ТаблицаПолейЗагрузки, ОписанияТиповПолей);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", НСтр(
		"ru = 'Ед. изм.'"), ОписанияТиповПолей.ОписаниеТиповСтрока25, ОписаниеТиповКолонка);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ВидыЦен");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВидЦен", НСтр(
		"ru = 'Вид цен (наименование)'"), ОписанияТиповПолей.ОписаниеТиповСтрока100, ОписаниеТиповКолонка);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Цена", НСтр("ru = 'Цена'"),
		ОписанияТиповПолей.ОписаниеТиповСтрока25, ОписанияТиповПолей.ОписаниеТиповЧисло15_2, , , Истина);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Дата", НСтр(
		"ru = 'Дата (начало использования)'"), ОписанияТиповПолей.ОписаниеТиповСтрока25,
		ОписанияТиповПолей.ОписаниеТиповДатаВремя);

КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата) Экспорт
	Перем ОбщееЗначение;
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	НастройкиПоиска				= НастройкиЗагрузкиДанных.НастройкиПоиска;
	
	ОбновлятьДанные = НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	
	НастройкиЗагрузкиДанных.Свойство("ОбщееЗначение", ОбщееЗначение);
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		// Номенклатура по ШтрихКоду, Артикулу, Наименованию
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы, НастройкиПоиска);
		ЭтаСтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			Если ЭтаСтрокаСопоставлена Тогда
				
				// Характеристика по Владельцу и Наименованию
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
		ЗначениеПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.шт;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "ЕдиницаИзмерения", СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// ВидыЦен по наименованию
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(ОбщееЗначение), ОбщееЗначение, Справочники.Контрагенты.ПолучитьОсновнойВидЦенПродажи());
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьВидЦен(СтрокаТаблицыФормы.ВидЦен, СтрокаТаблицыФормы.ВидЦен_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Цена
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Цена, СтрокаТаблицыФормы.Цена_ВходящиеДанные);
		
		// Дата
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВДату(СтрокаТаблицыФормы.Дата, 
			СтрокаТаблицыФормы.Дата_ВходящиеДанные);
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, "", ПараметрыСопоставления.НастройкиЗагрузкиДанных);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицыФормы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения, НастройкиЗагрузкиДанных) Экспорт
	
	ХарактеристикаОбязательна = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
		И СтрокаТаблицыФормы.Номенклатура.ПроверятьЗаполнениеХарактеристики;
		
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "Характеристика") Тогда
		ХарактеристикаУказана = ЗначениеЗаполнено(СтрокаТаблицыФормы.Характеристика);
	Иначе
		ХарактеристикаУказана = Истина;
	КонецЕсли;
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.ВидЦен)
		И НЕ СтрокаТаблицыФормы.ВидЦен.РассчитыватьАвтоматически
		И ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
		И ?(ХарактеристикаОбязательна, ХарактеристикаУказана, Истина)
		И СтрокаТаблицыФормы.Цена > 0
		И ЗначениеЗаполнено(СтрокаТаблицыФормы.ЕдиницаИзмерения)
		И (ЗначениеЗаполнено(СтрокаТаблицыФормы.Дата) ИЛИ ЗначениеЗаполнено(НастройкиЗагрузкиДанных.ДатаОбработки));

	
	Если СтрокаТаблицыФормы[ИмяСлужебногоПоля] Тогда
		
		НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(НачалоДня(СтрокаТаблицыФормы.Дата));
		НаборЗаписей.Отбор.ВидЦен.Установить(СтрокаТаблицыФормы.ВидЦен);
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицыФормы.Номенклатура);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			НаборЗаписей.Отбор.Характеристика.Установить(СтрокаТаблицыФормы.Характеристика);
			
		КонецЕсли;
		
		НаборЗаписей.Прочитать();
		
		СтрокаТаблицыФормы._СтрокаСопоставлена = (НаборЗаписей.Количество() > 0);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПодготовленныеДанные(СтруктураДанных, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	Автор						= Пользователи.АвторизованныйПользователь();
	ОбновлятьСуществующие		= СтруктураДанных.НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	СоздаватьНовые 				= СтруктураДанных.НастройкиЗагрузкиДанных.СоздаватьЕслиНеСопоставлено;
	ТаблицаСопоставленияДанных	= СтруктураДанных.ТаблицаСопоставленияДанных;
	ДатаОбработки 				= СтруктураДанных.НастройкиЗагрузкиДанных.ДатаОбработки;
	
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	КоличествоЗаписейТранзакции	= 0;
	ТранзакцияОткрыта			= Ложь;
	ВидыЦенИспользуемые			= Новый Массив;
	
	Попытка
		
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			Если НЕ ТранзакцияОткрыта
				И КоличествоЗаписейТранзакции = 0 Тогда
				
				НачатьТранзакцию();
				ТранзакцияОткрыта = Истина;
				
				РабочийНомерОчередиЦен = ЦенообразованиеСервер.УстановитьРабочийНомерОчередиЦен();
				
			КонецЕсли;
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			
			СогласованноеСостояниеСтроки = (СтрокаТаблицы._СтрокаСопоставлена И ОбновлятьСуществующие) 
				ИЛИ (НЕ СтрокаТаблицы._СтрокаСопоставлена И СоздаватьНовые);
			
			Если ЗагрузкаВПриложениеВозможна И СогласованноеСостояниеСтроки Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Дата) Тогда
					СтрокаТаблицы.Дата = ДатаОбработки;
				КонецЕсли;
				
				КоличествоЗаписейТранзакции		= КоличествоЗаписейТранзакции + 1;
				
				НаборЗаписей 					= РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Период.Установить(СтрокаТаблицы.Дата, Истина);
				НаборЗаписей.Отбор.ВидЦен.Установить(СтрокаТаблицы.ВидЦен, Истина);
				НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура, Истина);
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					
					НаборЗаписей.Отбор.Характеристика.Установить(СтрокаТаблицы.Характеристика, Истина);
					
				КонецЕсли;
				
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() <> 0 Тогда
					
					НаборЗаписей.Очистить();
					
				КонецЕсли;
				
				СтрокаНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаТаблицы);
				
				СтрокаНабора.Период					= (СтрокаТаблицы.Дата);
				СтрокаНабора.Актуальность			= Истина;
				СтрокаНабора.Автор					= Автор;
				СтрокаНабора.ВключаяХарактеристики	= Ложь;
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("РабочийНомерОчередиЦен", РабочийНомерОчередиЦен);
				НаборЗаписей.Записать(Истина);
				
				Если ВидыЦенИспользуемые.Найти(СтрокаТаблицы.ВидЦен) = Неопределено Тогда
					
					ВидыЦенИспользуемые.Добавить(СтрокаТаблицы.ВидЦен);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ИндексТекущейСтроки	= ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицы);
			ТекстПрогресса		= СтрШаблон(НСтр("ru ='Обработано %1 из %2 строк...'"), ИндексТекущейСтроки, РазмерТаблицыДанных);
			
			ДлительныеОперации.СообщитьПрогресс(ОКР(ИндексТекущейСтроки * 100 / РазмерТаблицыДанных, 1), ТекстПрогресса);
			
			Если ТранзакцияОткрыта
				И КоличествоЗаписейТранзакции > ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумЗаписейВОднойТранзакции() Тогда
				
				ПризнакАктуальностиРасчетныхВидовЦен(ВидыЦенИспользуемые);
				ЗафиксироватьТранзакцию();
				
				ВидыЦенИспользуемые.Очистить();
				ТранзакцияОткрыта			= Ложь;
				КоличествоЗаписейТранзакции = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоЗаписейТранзакции > 0 Тогда
			
			ПризнакАктуальностиРасчетныхВидовЦен(ВидыЦенИспользуемые);
			ЗафиксироватьТранзакцию();
			
			ТранзакцияОткрыта = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.ЦеныНоменклатуры, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПризнакАктуальностиРасчетныхВидовЦен(ВидыЦенИспользуемые)
	
	Если ВидыЦенИспользуемые.Количество() < 1 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыЦенИспользуемые", ВидыЦенИспользуемые);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвязиВидовЦенСлужебный.ВидЦенРасчетный КАК ВидЦенРасчетный
	|ИЗ
	|	РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦенСлужебный
	|ГДЕ
	|	СвязиВидовЦенСлужебный.ВидЦенБазовый В(&ВидыЦенИспользуемые)
	|		ИЛИ СвязиВидовЦенСлужебный.ВидЦенБазовыйЦеновойГруппы В(&ВидыЦенИспользуемые)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.ВидЦенРасчетный.ПолучитьОбъект();
		СправочникОбъект.ЦеныАктуальны = Ложь;
		
		// Если не отключить бизнес логику, то в очередь добавиться вся номенклатура
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, Ложь, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьИДобавитьКолонкиПоискаПоДополнительномуРеквизиту(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных, 
	ОписаниеТиповКолонка, ОписаниеТиповСтрока1000, ИмяГруппыПолей)
	Если НастройкиЗагрузкиДанных.НастройкиПоиска.ИскатьПоДополнительномуРеквизиту Тогда
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, 
			НастройкиЗагрузкиДанных.НастройкиПоиска.ДополнительныйРеквизитПоиска.ИдентификаторДляФормул,
			НастройкиЗагрузкиДанных.НастройкиПоиска.ДополнительныйРеквизитПоиска.Заголовок,
			ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, ИмяГруппыПолей, 5, , Истина);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли