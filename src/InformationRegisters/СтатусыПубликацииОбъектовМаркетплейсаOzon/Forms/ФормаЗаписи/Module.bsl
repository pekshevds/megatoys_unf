
#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполнитьЗапись;

&НаКлиенте
Перем ВыполнитьПубликациюТовара;

&НаКлиенте
Перем УчетнаяЗаписьДеактивирована;

&НаКлиенте
Перем ЭтоЗакрытиеФормы;

&НаКлиенте
Перем ИдентификаторКатегорииМаркетплейса;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьПараметрыВыбораЭлементаНоменклатура();

	Если Не Запись.ВидОбъектаМаркетплейса.Пустая()
		И Запись.ВидОбъектаМаркетплейса <> ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар") Тогда
		ТекстСообщения = НСтр("ru = 'Редактирование данного вида объекта маркетплейса необходимо выполнять из формы публикации карточки товара.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;

	Если Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		
		Если Параметры.Свойство("УчетнаяЗапись") Тогда
			Параметры.Свойство("УчетнаяЗапись", Запись.УчетнаяЗаписьМаркетплейса);
			Параметры.Свойство("Номенклатура", Запись.Номенклатура);
			Параметры.Свойство("Характеристика", Запись.Характеристика);
			Параметры.Свойство("Упаковка", Запись.Упаковка);
		КонецЕсли;

		Если Запись.УчетнаяЗаписьМаркетплейса.Пустая() Тогда
			Запись.УчетнаяЗаписьМаркетплейса =
				Справочники.УчетныеЗаписиМаркетплейсов.ОсновнаяУчетнаяЗапись(Перечисления.ВидыМаркетплейсов.МаркетплейсOzon);
		КонецЕсли;

		Если Запись.УчетнаяЗаписьМаркетплейса.Пустая() Тогда
			Элементы.УчетнаяЗаписьМаркетплейса.ТолькоПросмотр = Ложь;
		КонецЕсли;

		Запись.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации");
		Запись.ВидОбъектаМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");
		
		Элементы.СтраницаОписаниеОшибки.Видимость = Ложь;
	Иначе
		ПометкаУдаленияУчетнойЗаписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.УчетнаяЗаписьМаркетплейса, "ПометкаУдаления");

		Если ПометкаУдаленияУчетнойЗаписи = Истина Тогда
			УстановитьДоступностьРедактированияКарточки(ЭтотОбъект);
		КонецЕсли;

		ИдентификаторТовараДляГиперссылки = ?(ПустаяСтрока(Запись.ИдентификаторFBOSKU), Запись.ИдентификаторFBSSKU, Запись.ИдентификаторFBOSKU);
		Если Не ПустаяСтрока(ИдентификаторТовараДляГиперссылки) Тогда
			НавигационнаяСсылкаНаТовар = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НавигационнаяСсылкаНаТовар(ИдентификаторТовараДляГиперссылки);
		КонецЕсли;
	КонецЕсли;

	УстановитьДоступностьХарактеристикиУпаковки();

	Элементы.СтраницаДанныеТовара.Видимость = Истина;
	Элементы.СтраницаРедактированияАтрибутовТовара.Видимость = Ложь;

	УстановитьУсловноеОформление();
	
	ИзменитьВидимостьЭлементовОбъединенияВОднуКарточку();

	МассивКолонок = Новый Массив;
	ТаблицаЗначенийРеквизитовФормы = РеквизитФормыВЗначение("ТаблицаЗначенийРеквизитов");
	Для каждого Колонка Из ТаблицаЗначенийРеквизитовФормы.Колонки Цикл
		МассивКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	КолонкиТаблицыЗначенийРеквизитов = СтрСоединить(МассивКолонок, ",");

	Элементы.ПерейтиКСсылкеНаТовар.Доступность = Не ПустаяСтрока(НавигационнаяСсылкаНаТовар);

	УстановитьЗаголовокФормы(ЭтотОбъект);
    
КонецПроцедуры

&НаСервере
Функция УстановитьПараметрыВыбораЭлементаНоменклатура()
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОтборПоНоменклатуре()));
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(ПараметрВыбора);
	ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);

	Элементы.Номенклатура.ПараметрыВыбора = ПараметрыВыбора;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УчетнаяЗаписьДеактивирована = Ложь;

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "ПриОткрытии";
	ПараметрыДействий.ПолучитьДанныеТовара = Истина;
	ПараметрыДействий.ПолучитьОписаниеТовара = Истина;
	ПараметрыДействий.ЗаполнитьДеревоРеквизитов = Истина;

	ЗаполнитьДанныеТовара(ПараметрыДействий);

	Если Запись.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Товар находится в архиве. Редактирование карточки товара недоступно.'"));
		УстановитьДоступностьРедактированияКарточки(ЭтотОбъект);
	КонецЕсли;

	УстановитьДоступностьЭлементовДляСтатуса();

	ПроверитьНаличиеИзмененийЗначенийРеквизитов1С();
    
    УстановитьДоступностьИЗаполнениеЭлементовТоварнойПозиции();
   
   	ЭлементыФормыОбновить();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	ЭтоЗакрытиеФормы = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЭлементыФормыОбновить()
    Элементы.ДекорацияВозможноИзмененыРеквизиты.Видимость = Запись.ИзмененыРеквизиты;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "УчетнаяЗаписьДеактивирована" Тогда
		Если Параметр = Запись.УчетнаяЗаписьМаркетплейса Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Учетная запись маркетплейса удалена. Редактирование карточки товара недоступно.'"));

			УстановитьДоступностьРедактированияКарточки(ЭтотОбъект);
			УстановитьДоступностьЭлементовДляСтатуса();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "РегистрСведений.СортировкаФайловДляСайта.Запись" Тогда
		Если ТипЗнч( Параметр ) = Тип( "Структура" ) Тогда
			Если Параметр.Свойство( "Номенклатура" ) И Параметр.Свойство( "ХарактеристикаНоменклатуры" ) Тогда
				Если Параметр.Номенклатура = Запись.Номенклатура Тогда
					ТаблицаФайловОбновить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	ОчиститьСообщения();

	ПроверитьНаличиеИзмененийЗначенийРеквизитов1С();

	Если ВыполнитьЗапись <> Истина Тогда
		РезультатПроверки = ПроверитьЗаполнениеКарточкиТовара();
		
		Элементы.СтраницаОписаниеОшибки.Видимость = Не ПустаяСтрока(Запись.ОписаниеОшибки);
		
		Если РезультатПроверки.ЕстьКритичныеОшибки Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОписаниеОшибки;

			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветПриПроверкеЗаполненияАтрибутов", ЭтотОбъект, ПараметрыЗаписи);
			ТекстВопроса = НСтр("ru = 'Обнаружены ошибки заполнения атрибутов товара. Продолжить запись?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Отказ = Истина;
		Иначе
			Запись.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации");
			Запись.ИзмененыРеквизиты = Ложь;
			ВыполнитьЗапись = Истина;
		КонецЕсли;
	Иначе
		ВыполнитьЗапись = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.ДанныеОбъекта = Новый ХранилищеЗначения(ТаблицаЗначенийРеквизитов.Выгрузить());

	Если (Запись.ИсходныйКлючЗаписи.Пустой() Или ИзмененыПараметрыТовара)
		И Не ПустаяСтрока(ОбъектыПубликацииАдресХранилища) Тогда
		ПараметрыЗаписи.Вставить("ОбъектыПубликацииАдресХранилища", ОбъектыПубликацииАдресХранилища);

		ДанныеЗаписи = Новый Структура("УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
		ЗаполнитьЗначенияСвойств(ДанныеЗаписи, ТекущийОбъект);
		ПараметрыЗаписи.Вставить("ДанныеЗаписи", ДанныеЗаписи);
	КонецЕсли;

	Если ТекущийОбъект.Выбран() Тогда
		ТекущийОбъект.ДатаОбновления = ТекущаяДатаСеанса();
	Иначе
		ТекущийОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	УстановитьЗаголовокФормы(ЭтотОбъект);

	ИзмененыПараметрыТовара = Ложь;

	ПослеЗаписиНаСервере(ПараметрыЗаписи);

	Если ВыполнитьПубликациюТовара = Истина Тогда
		ВыполнитьПубликациюТовара();
	КонецЕсли;

	УстановитьДоступностьЭлементовДляСтатуса();
	
	ЭлементыФормыОбновить();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УчетнаяЗаписьМаркетплейсаПриИзменении(Элемент)

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "УчетнаяЗаписьПриИзменении";
	ПараметрыДействий.ПолучитьДанныеТовара = Истина;
	ПараметрыДействий.ОбновитьДанныеТовара = Истина;
	ПараметрыДействий.ЗаполнитьДеревоРеквизитов = Истина;
	ПараметрыДействий.ПолучитьОписаниеТовара = Элементы.СтраницаДанныеТовара.Видимость;

	ЗаполнитьДанныеТовара(ПараметрыДействий);

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "НоменклатураПриИзменении";
	ПараметрыДействий.ПолучитьДанныеТовара = Истина;
	ПараметрыДействий.ОбновитьДанныеТовара = Истина;
	ПараметрыДействий.ЗаполнитьДеревоРеквизитов = Истина;
	ПараметрыДействий.ПолучитьОписаниеТовара = Элементы.СтраницаДанныеТовара.Видимость;

	ЗаполнитьДанныеТовара(ПараметрыДействий);
	
	УстановитьДоступностьИЗаполнениеЭлементовТоварнойПозиции();

КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "ХарактеристикаПриИзменении";
	ПараметрыДействий.ПолучитьДанныеТовара = Истина;
	ПараметрыДействий.ОбновитьДанныеТовара = Истина;
	ПараметрыДействий.ЗаполнитьДеревоРеквизитов = Истина;
	ПараметрыДействий.ПолучитьОписаниеТовара = Элементы.СтраницаДанныеТовара.Видимость;

	ЗаполнитьДанныеТовара(ПараметрыДействий);
	
	УстановитьДоступностьИЗаполнениеЭлементовТоварнойПозиции();

КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "УпаковкаПриИзменении";
	ПараметрыДействий.ПолучитьДанныеТовара = Истина;
	ПараметрыДействий.ОбновитьДанныеТовара = Истина;
	ПараметрыДействий.ЗаполнитьДеревоРеквизитов = Истина;
	ПараметрыДействий.ПолучитьОписаниеТовара = Элементы.СтраницаДанныеТовара.Видимость;

	ЗаполнитьДанныеТовара(ПараметрыДействий);

КонецПроцедуры

&НаКлиенте
Процедура ОбъединяетсяПриИзменении(Элемент)

	ШаблонЗаголовка = НСтр("ru = 'Объединяется с другими товарами %1'");
	Элементы.Объединяется.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка,
			?(Запись.ОбъединяетсяВОднуКарточку, НСтр("ru = 'по значению объединения:'"), ""));

	ИзменитьВидимостьЭлементовОбъединенияВОднуКарточку();

КонецПроцедуры

&НаКлиенте
Процедура ЗначениеОбъединенияПриИзменении(Элемент)

	ОбъединятьТоварыВОднуКарточкуСвойства.ИзменилсяРеквизит1С = Ложь;

	Элементы.ДекорацияИзменилсяРеквизит1С.Видимость = ОбъединятьТоварыВОднуКарточкуСвойства.ИзменилсяРеквизит1С;
	Элементы.ДекорацияИзменилсяРеквизит1С.Подсказка = "";
	Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для реквизита 1С <%1> установлено значение <%2>'"),
			ОбъединятьТоварыВОднуКарточкуСвойства.Реквизит1С,
			ОбъединятьТоварыВОднуКарточкуСвойства.ЗначениеРеквизита1С);
	Элементы.ЗначениеОбъединения.Подсказка = Подсказка;

	ИзменитьЗначениеВТаблицеРеквизитов();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРеквизитов

&НаКлиенте
Процедура ДеревоРеквизитовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя = "ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейса" Тогда
		ОткрытьФормуВыбораЗначенияАтрибута(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Поле.Имя = "ДеревоРеквизитовЗначенияАтрибутаМаркетплейса" Тогда
		ОткрытьФормуВыбораЗначенияАтрибута(ВыбраннаяСтрока, Истина);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

	Если Поле.Имя = "ДеревоРеквизитовЗначениеАтрибутаМаркетплейса"
		Или Поле.Имя = "ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейса" Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Поле.ОграничениеТипа = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОписаниеТипа(ТекущиеДанные.ТипЗначенияАтрибута1С, ТекущиеДанные.ТипЗначенияАтрибута);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		ПутьКРеквизиту1С = НСтр("ru = 'Путь к реквизиту 1С не установлен.'");
		ТекущееОписаниеАтрибутаДереваРеквизитов = НСтр("ru = 'Назначение атрибута не задано.'");
	Иначе
		Если ПустаяСтрока(ТекущиеДанные.ПредставлениеРеквизита1С) Тогда
			ПутьКРеквизиту1С = НСтр("ru = 'Путь к реквизиту 1С не установлен.'");
		Иначе
			Шаблон = НСтр("ru = 'Путь к реквизиту 1С: %1.'");
			ПутьКРеквизиту1С = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекущиеДанные.ПредставлениеРеквизита1С);
			
			Если ТекущиеДанные.ИзменилсяРеквизит1С Тогда
				Шаблон = НСтр("ru = 'Для реквизита 1С изменено значение <%1> на новое значение <%2>.'");
				ИнформацияПоНовомуЗначению = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
						ТекущиеДанные.КэшЗначениеРеквизита1С,
						ТекущиеДанные.ЗначениеРеквизита1С);
				ПутьКРеквизиту1С = ИнформацияПоНовомуЗначению + Символы.ПС + ПутьКРеквизиту1С;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(ТекущиеДанные.ОписаниеНазначенияАтрибута) Тогда
			ШаблонОписания = НСтр("ru = 'Назначение атрибута: %1'");

			ТекущееОписаниеАтрибутаДереваРеквизитов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОписания, 
					ТекущиеДанные.ОписаниеНазначенияАтрибута);
		Иначе
			ТекущееОписаниеАтрибутаДереваРеквизитов = НСтр("ru = 'Назначение атрибута не задано.'");
		КонецЕсли;
	КонецЕсли;

	ТекущееОписаниеАтрибутаДереваРеквизитов = "<html><body><span style='color:grey'>"
		+ СтрЗаменить(ПутьКРеквизиту1С, Символы.ПС, "<BR/>")
		+ "<BR/>"
		+ ТекущееОписаниеАтрибутаДереваРеквизитов
		+ "</span></body></html>";

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипЗначенияАтрибута1С = "Строка" И Не ТекущиеДанные.ТипЗначенияАтрибута = "multiline" Тогда
		ТекущиеДанные.ЗначениеАтрибутаМаркетплейса = СтрЗаменить(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса, Символы.ПС, " ");
	КонецЕсли;

	ТекущиеДанные.ЗначениеАтрибутаЗаданоПользователем = Истина;
	ТекущиеДанные.ИзменилсяРеквизит1С = Ложь;

	ТекущиеДанные.ЗначениеАтрибутаЗаполнено = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() > 0)
			Или ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
	ТекущиеДанные.НеЗаполненАтрибут = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() = 0)
			И Не ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);

	ИзменитьЗначениеВТаблицеРеквизитов(ТекущиеДанные);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаБулевоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.ЗначениеАтрибутаМаркетплейса = ТекущиеДанные.ЗначениеАтрибутаМаркетплейсаБулево;
	ТекущиеДанные.ЗначениеАтрибутаЗаданоПользователем = Истина;
	ТекущиеДанные.ИзменилсяРеквизит1С = Ложь;

	ИзменитьЗначениеВТаблицеРеквизитов(ТекущиеДанные);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные.ТипЗначенияАтрибута1С = "Строка" Тогда
		Многострочность = (ТекущиеДанные.ТипЗначенияАтрибута = "multiline");
		Подсказка = ТекущиеДанные.НаименованиеАтрибутаМаркетплейса;
		Оповещение = Новый ОписаниеОповещения("ЗначениеАтрибутаМаркетплейсаНачалоВыбораЗавершение", ЭтотОбъект);
		ДлинаСтрокиМагическоеЧисло = 1000;
		ПоказатьВводСтроки(Оповещение, ТекущиеДанные.ЗначениеАтрибутаМаркетплейса, Подсказка + " ( максимум " + ДлинаСтрокиМагическоеЧисло + " символов )", ДлинаСтрокиМагическоеЧисло, Многострочность);

		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоАтрибутов

&НаКлиенте
Процедура ДеревоАтрибутовПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.ДеревоАтрибутов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущееОписаниеНазначенияАтрибутаДереваАтрибутов = НСтр("ru = 'Назначение атрибута не задано.'");
	Иначе
		Если ЗначениеЗаполнено(ТекущиеДанные.ОписаниеНазначенияАтрибута) Тогда
			ШаблонОписания = НСтр("ru = 'Назначение атрибута: %1'");

			ТекущееОписаниеНазначенияАтрибутаДереваАтрибутов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОписания,
					ТекущиеДанные.ОписаниеНазначенияАтрибута);
		Иначе
			ТекущееОписаниеНазначенияАтрибутаДереваАтрибутов = 
					НСтр("ru = 'Назначение атрибута не задано.'");
		КонецЕсли;
	КонецЕсли; 
	
	ТекущееОписаниеНазначенияАтрибутаДереваАтрибутов = "<html><body><span style='color:grey'>" + ТекущееОписаниеНазначенияАтрибутаДереваАтрибутов + 
			"</span></body></html>";

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрытьФорму(Команда)

	ЭтоЗакрытиеФормы = Истина;
	Записать();

	Если ВыполнитьЗапись = Истина Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьАтрибуты(Команда)

	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРедактированияАтрибутовТовара;

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "РедактироватьАтрибуты";

	АктивацияСтраницыРеквизитыТовара = Не Элементы.СтраницаРедактированияАтрибутовТовара.Видимость;
	Если АктивацияСтраницыРеквизитыТовара Тогда
		ВариантОтображенияАтрибутов = "Все";
		ИзменитьВариантОтображенияАтрибутов();

		ПараметрыДействий.ЗаполнитьДеревоАтрибутов = Истина;
	КонецЕсли;

	Элементы.СтраницаДанныеТовара.Видимость = Ложь;
	Элементы.СтраницаРедактированияАтрибутовТовара.Видимость = Истина;

	ЗаполнитьДанныеТовара(ПараметрыДействий);

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКОписаниюТовара(Команда)

	Элементы.СтраницаДанныеТовара.Видимость = Истина;
	Элементы.СтраницаРедактированияАтрибутовТовара.Видимость = Ложь;

	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДанныеТовара;

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "ПерейтиКОписаниюТовара";
	ПараметрыДействий.ПолучитьОписаниеТовара = Истина;

	ЗаполнитьДанныеТовара(ПараметрыДействий);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗначение(Команда)

	ТекущиеДанные = Элементы.ДеревоАтрибутов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();

	Если ТекущиеДанные.Уровень = 0 Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
		Отбор.Вставить("ИдентификаторРодителяАтрибутаМаркетплейса", ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);
		СтрокиПоиска = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);

		Если СтрокиПоиска.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Добавляемая группа атрибутов уже присутствует списке реквизитов товара.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаАтрибута Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАтрибута);
		КонецЦикла;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
		Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса", ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);
		СтрокиПоиска = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);

		Если СтрокиПоиска.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Добавляемый атрибут уже присутствует списке реквизитов товара.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
	КонецЕсли;

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.ЗаполнитьДеревоРеквизитов = Истина;
	ПараметрыДействий.Событие = "АктивизироватьСтрокуДереваРеквизитовПриДобавленииНового";
	ПараметрыДействий.Вставить("ИдентификаторАтрибутаМаркетплейсаДляДереваРеквизитов", ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);

	ЗаполнитьДанныеТовара(ПараметрыДействий);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УбратьЗначение(Команда)

	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();

	Если ТекущиеДанные.ОбязательныйАтрибут Тогда
		ТекстСообщения = НСтр("ru = 'Обязательный атрибут невозможно удалить.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.Уровень = 0 Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
		Отбор.Вставить("ИдентификаторРодителяАтрибутаМаркетплейса", ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
		ОбязательныеАтрибуты = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Если ОбязательныеАтрибуты.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Невозможно удалить группу с обязательными атрибутами.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		// Удаление атрибутов группы.
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
		Отбор.Вставить("ИдентификаторРодителяАтрибутаМаркетплейса", ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);
	Иначе
		// Удаление атрибутов.
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
		Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса", ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);
	КонецЕсли;

	УдаляемыеСтрокиАтрибута = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиАтрибута Цикл
		ТаблицаЗначенийРеквизитов.Удалить(УдаляемаяСтрока);
	КонецЦикла;

	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		СтрокиРодителя = ДеревоРеквизитов.ПолучитьЭлементы();
	Иначе
		СтрокиРодителя = ТекущийРодитель.ПолучитьЭлементы();
	КонецЕсли;

	СтрокиРодителя.Удалить(ТекущиеДанные);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеАтрибуты(Команда)

	ВариантОтображенияАтрибутов = "Все";
	ИзменитьВариантОтображенияАтрибутов(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОсновныеАтрибуты(Команда)

	ВариантОтображенияАтрибутов = "Основные";
	ИзменитьВариантОтображенияАтрибутов(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДополнительныеАтрибуты(Команда)

	ВариантОтображенияАтрибутов = "Дополнительные";
	ИзменитьВариантОтображенияАтрибутов(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиСопоставленияАтрибутов(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗапись", Запись.УчетнаяЗаписьМаркетплейса);
	ПараметрыФормы.Вставить("ТекущаяКатегория1С", Запись.ИсточникКатегорииМаркетплейса);

	ДанныеТекущейКатегорииМаркетплейса = Новый Структура;
	ДанныеТекущейКатегорииМаркетплейса.Вставить("ИдентификаторКатегорииМаркетплейса", Запись.ИдентификаторКатегорииМаркетплейса);
	ДанныеТекущейКатегорииМаркетплейса.Вставить("НаименованиеКатегорииМаркетплейса", НаименованиеКатегорииМаркетплейса);
	ПараметрыФормы.Вставить("ДанныеТекущейКатегорииМаркетплейса", ДанныеТекущейКатегорииМаркетплейса);

	ОткрытьФорму("Обработка.МаркетплейсOzon.Форма.СопоставлениеКатегорий", ПараметрыФормы);
	Оповестить("ОткрытиеФормыСопоставленияКатегорий", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЗначенияАтрибутовТовара(Команда)

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "ПерезаполнитьЗначенияАтрибутовТовара";
	ПараметрыДействий.ПолучитьДанныеТовара = Истина;
	ПараметрыДействий.ОбновитьДанныеТовара = Истина;
	ПараметрыДействий.ЗаполнитьДеревоРеквизитов = Истина;
	ПараметрыДействий.ПроверитьОшибки = Истина;

	ЗаполнитьДанныеТовара(ПараметрыДействий);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеОшибок(Команда)

	ОчиститьСообщения();

	ТекущееОписаниеОшибки = Запись.ОписаниеОшибки;

	РезультатПроверки = ПроверитьЗаполнениеКарточкиТовара();
	
	Элементы.СтраницаОписаниеОшибки.Видимость = Не ПустаяСтрока(Запись.ОписаниеОшибки);
	
	Если ТекущееОписаниеОшибки <> Запись.ОписаниеОшибки 
		И Не ЭтотОбъект.Модифицированность И Не Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		ВыполнитьЗапись = Истина;
		Записать();
	КонецЕсли;
	
	Если ПустаяСтрока(Запись.ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не обнаружено ошибок заполнения атрибутов товара.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСсылкеНаТовар(Команда)

	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаНаТовар);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСписокИзображений(Команда)

	ПараметрыФормы = Новый Структура("ВладелецФайла", Запись.Номенклатура);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОпубликоватьТовар(Команда)

	Если Не ЗначениеЗаполнено( Запись.Номенклатура ) Тогда
		Текст = НСтр("ru = 'Номенклатура не заполнена'");
		ПоказатьОповещениеПользователя(Текст,,, БиблиотекаКартинок.ЛоготипOzon1);
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();

	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ОпубликоватьТоварЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Требуется сохранение измененных данных. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьПубликациюТовара();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВАрхив(Команда)

	ОчиститьСообщения();

	Текст = НСтр("ru = 'Начало переноса в архив'");
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполняется перенос товара <%1> в архив'"),
			Запись.НаименованиеОбъектаМаркетплейса);
	ПоказатьОповещениеПользователя(Текст,, Сообщение);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Окончание переноса в архив'");
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Товар <%1> перенесен в архив'"),
			Запись.НаименованиеОбъектаМаркетплейса);

	ДлительнаяОперация = ВыгрузитьНулевыеОстатки(Запись);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Неопределено, ПараметрыОжидания);

	ДлительнаяОперация = ПеренестиВАрхивНаСервере(Запись);

	ДополнительныеПараметры = Новый Структура("Действие", "ТоварВАрхив");
	Оповещение = Новый ОписаниеОповещения("ДействияСТоваромОповещение", ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ВернутьИзАрхива(Команда)

	ОчиститьСообщения();

	Текст = НСтр("ru = 'Начало возврата из архива'");
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполняется возврат товара <%1> из архива'"),
			Запись.НаименованиеОбъектаМаркетплейса);
	ПоказатьОповещениеПользователя(Текст,, Сообщение);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина; 
	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Окончание возврата из архива'");
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Товар <%1> возвращен из архива'"),
				Запись.НаименованиеОбъектаМаркетплейса); 

	ДлительнаяОперация = ВернутьИзАрхиваНаСервере(Запись);
	ДополнительныеПараметры = Новый Структура("Действие", "ТоварИзАрхива");
	Оповещение = Новый ОписаниеОповещения("ДействияСТоваромОповещение", ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьТовар(Команда)

	ОчиститьСообщения();

	ТекстВопроса = НСтр("ru = 'Товар будет удален, а данная карточка товара будет закрыта. Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("УдалитьТоварЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)

	Форма.Заголовок = НСтр("ru = 'Публикация товара на маркетплейсе Ozon'");
	
	Если Форма.Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		Форма.Заголовок = Форма.Заголовок + " ("+ НСтр("ru = 'создание'") + ")";
	КонецЕсли;

    Если ЗначениеЗаполнено( Форма.Запись.Номенклатура ) Тогда
		ПредставлениеТоварнойПозиции = ИнтеграцияСМаркетплейсомOzonВызовСервера.ПредставлениеТоварнойПозиции(Форма.Запись.Номенклатура, Форма.Запись.Характеристика, Форма.Запись.Упаковка);
		Форма.Заголовок = "Ozon: " + ПредставлениеТоварнойПозиции;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАтрибутовНаименованиеАтрибутаМаркетплейса.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ОбязательныйАтрибут");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначенияАтрибутаМаркетплейса.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ЯвляетсяКоллекциейЗначений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса.Имя);
	
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ТипЗначенияАтрибута1С");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Булево";

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ДоступенВыборЗначенияИзСписка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаБулево.Имя);

	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ТипЗначенияАтрибута1С");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "Булево";

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейса.Имя);

	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ДоступенВыборЗначенияИзСписка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ЯвляетсяКоллекциейЗначений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовНаименованиеАтрибутаМаркетплейса.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ОбязательныйАтрибут");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейса.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ИдентификаторЗначенияАтрибутаМаркетплейса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",
			Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ЗначениеАтрибутаМаркетплейса"));

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейса.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначенияАтрибутаМаркетплейса.Имя);

	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ОбязательныйАтрибут");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ЗначениеАтрибутаЗаполнено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейса.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначенияАтрибутаМаркетплейса.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ЗначениеАтрибутаЗаполнено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", 
			Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ПредставлениеТипаСоответствияЗначений"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьРедактированияКарточки(Форма, Заблокировать = Истина)

	Форма.ФормаЗаблокирована = Заблокировать;

	Форма.ТолькоПросмотр = Заблокировать;

	Элементы = Форма.Элементы;

	МассивБлокируемыхЭлементов = Новый Массив;
	МассивБлокируемыхЭлементов.Добавить(Элементы.ФормаЗаписатьИЗакрыть);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ФормаЗаписать);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ФормаОпубликоватьТовар);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ФормаПеренестиВАрхив);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ФормаВернутьИзАрхива);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ФормаУдалитьТовар);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ДанныеТовараРедактироватьАтрибуты);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ОписаниеОшибкиРедактироватьАтрибуты);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ПроверитьНаличиеОшибок);

	Для Каждого Элемент Из МассивБлокируемыхЭлементов Цикл
		Элемент.Доступность = Не Заблокировать;
	КонецЦикла;

	Элементы.СтраницаДанныеТовара.Видимость = Истина;
	Элементы.СтраницаРедактированияАтрибутовТовара.Видимость = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовДляСтатуса()

	СтатусВАрхиве = (Запись.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве"));
	Элементы.ФормаОпубликоватьТовар.Доступность = Не СтатусВАрхиве И Не ФормаЗаблокирована;
	Элементы.ДеревоРеквизитовОбновитьЗначенияХарактеристикТовара.Доступность = Не СтатусВАрхиве;
	Элементы.ДеревоРеквизитов.ТолькоПросмотр = СтатусВАрхиве;
	Элементы.Объединяется.ТолькоПросмотр = СтатусВАрхиве;
	Элементы.ЗначениеОбъединения.ТолькоПросмотр = СтатусВАрхиве;
	Элементы.ВыбратьЗначение.Доступность = Не СтатусВАрхиве;
	Элементы.УдалитьЗначение.Доступность = Не СтатусВАрхиве;
	Элементы.ФормаПеренестиВАрхив.Доступность = Не СтатусВАрхиве И Не ФормаЗаблокирована И Не ПустаяСтрока(Запись.ИдентификаторОбъектаМаркетплейса);
	Элементы.ФормаВернутьИзАрхива.Доступность = СтатусВАрхиве И Не УчетнаяЗаписьДеактивирована;
	Элементы.ФормаУдалитьТовар.Доступность = СтатусВАрхиве И Не ФормаЗаблокирована
			И ПустаяСтрока(Запись.ИдентификаторFBOSKU) И ПустаяСтрока(Запись.ИдентификаторFBSSKU);
	Элементы.ФормаРедактироватьАтрибуты.Доступность = Не СтатусВАрхиве И Не ФормаЗаблокирована;

КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьЭлементовОбъединенияВОднуКарточку()

	ДоступноОбъединениеТоваровВОднуКарточку =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбъединятьТоварыВОднуКарточкуСвойства, "ДоступноОбъединениеТоваровВОднуКарточку", Ложь);
	Элементы.ГруппаОбъединениеКарточек.Видимость = ДоступноОбъединениеТоваровВОднуКарточку;
	Элементы.ЗначениеОбъединения.Видимость = Запись.ОбъединяетсяВОднуКарточку;

	ОбязательныйАтрибутОбъединения =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбъединятьТоварыВОднуКарточкуСвойства, "ОбязательныйАтрибут", Ложь);
	Элементы.Объединяется.Доступность = НЕ ОбязательныйАтрибутОбъединения;

	ИзменилсяРеквизит1С =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбъединятьТоварыВОднуКарточкуСвойства, "ИзменилсяРеквизит1С", Ложь);
	Элементы.ДекорацияИзменилсяРеквизит1С.Видимость = ИзменилсяРеквизит1С;

	Если ИзменилсяРеквизит1С Тогда
		Шаблон = НСтр("ru = 'Для реквизита 1С <%1> изменено значение <%2> на новое значение <%3>'");
		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
				ОбъединятьТоварыВОднуКарточкуСвойства.Реквизит1С,
				ОбъединятьТоварыВОднуКарточкуСвойства.КэшЗначениеРеквизита1С,
				ОбъединятьТоварыВОднуКарточкуСвойства.ЗначениеРеквизита1С);

		Элементы.ДекорацияИзменилсяРеквизит1С.Подсказка = Подсказка;
		Элементы.ЗначениеОбъединения.Подсказка = Подсказка;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗначениеАтрибутаМаркетплейсаНачалоВыбораЗавершение(Значение, ДополнительныеПараметры = Неопределено) Экспорт

	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	ТекущиеДанные.ЗначениеАтрибутаМаркетплейса = Значение;
	ТекущиеДанные.ЗначениеАтрибутаЗаполнено = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() > 0)
			Или ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
	ТекущиеДанные.НеЗаполненАтрибут = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() = 0)
			И Не ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
			
	ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаПриИзменении(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеКарточкиТовара()

	МассивСтрокТаблицыЗначенийРеквизитов = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаЗначенийРеквизитов Цикл
		СтруктураСтроки = Новый Структура(КолонкиТаблицыЗначенийРеквизитов);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТаблицы);
		МассивСтрокТаблицыЗначенийРеквизитов.Добавить(СтруктураСтроки);
	КонецЦикла;

	ПараметрыФормы = Новый Структура("Запись, ВариантОтображенияАтрибутов, НаименованиеКатегорииМаркетплейса,
			|ИсточникКатегорииМаркетплейса, Валюта, Цены, СтавкаНДС, Штрихкод, ИзмененыПараметрыТовара");
			
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ЭтотОбъект);
	
	ПараметрыФормы.Вставить("ТаблицаЗначенийРеквизитов", МассивСтрокТаблицыЗначенийРеквизитов);
	ПараметрыФормы.Вставить("ОтображаетсяДеревоАтрибутов", Элементы.СтраницаРедактированияАтрибутовТовара.Видимость);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);

	РезультатПроверки = ПроверитьЗаполнениеКарточкиТовараНаСервере(ПараметрыФормы);
	Если РезультатПроверки.ЕстьКритичныеОшибки Тогда
		РезультатПроверки.Свойство("КодОшибки", Запись.КодОшибки);
		РезультатПроверки.Свойство("ОписаниеОшибки", Запись.ОписаниеОшибки);
	Иначе
		Запись.КодОшибки = "";
		Запись.ОписаниеОшибки = "";
	КонецЕсли;
	РезультатПроверки.Свойство("ОбъектыПубликацииАдресХранилища", ОбъектыПубликацииАдресХранилища);

	ДанныеОбъектаМассив = Неопределено;
	Если РезультатПроверки.Свойство("ДанныеОбъекта", ДанныеОбъектаМассив) Тогда
		ТаблицаЗначенийРеквизитов.Очистить();
		Для Каждого ДанныеРеквизита Из ДанныеОбъектаМассив Цикл
			НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеРеквизита);
		КонецЦикла;
	КонецЕсли;
	ДанныеОбъектаМассив = Неопределено;

	Возврат РезультатПроверки;

КонецФункции

&НаКлиенте
Процедура ПроверитьНаличиеИзмененийЗначенийРеквизитов1С()

	Отбор = Новый Структура("ИзменилсяРеквизит1С", Истина); 
	СтрокиСИзмененнымиАтрибутами = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СсылкаЗначенияРеквизитовПолучить( Ссылка, РеквизитыИмя )
	Значения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта( Ссылка, РеквизитыИмя );
	Возврат Значения;
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьИЗаполнениеЭлементовТоварнойПозиции()
	
	ТоварСозданВOzon = Ложь;
	Если ЗначениеЗаполнено( Запись.ИдентификаторОбъектаМаркетплейса )
	Или  ЗначениеЗаполнено( Запись.ИдентификаторFBOSKU )
	Или  ЗначениеЗаполнено( Запись.ИдентификаторFBSSKU )
	Или  ЗначениеЗаполнено( Запись.ДатаСозданияНаМаркетплейсе )
	Тогда
		ТоварСозданВOzon = Истина;
	КонецЕсли;
	
	ЭтаФорма.Элементы.Номенклатура.ТолькоПросмотр = ТоварСозданВOzon;
	
	Если ЗначениеЗаполнено( Запись.Номенклатура ) Тогда
		НоменклатураРеквизитыЗначения = СсылкаЗначенияРеквизитовПолучить( Запись.Номенклатура, 
		"ИспользоватьХарактеристики, ПроверятьЗаполнениеХарактеристики" );
		
		ЭтаФорма.Элементы.Характеристика.Доступность = НоменклатураРеквизитыЗначения.ИспользоватьХарактеристики;
		
		Если НоменклатураРеквизитыЗначения.ИспользоватьХарактеристики = Ложь Тогда
			Если ЗначениеЗаполнено(Запись.Характеристика) Тогда
				Запись.Характеристика = Неопределено;
				Текст = НСтр("ru = 'Очищено значение поля ""Характеристика"".'");
				Сообщение = НСтр("ru = 'Для данного товара не включен признак ""Использовать характеристики""'");
				ПоказатьОповещениеПользователя(Текст,, Сообщение);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЭтаФорма.Элементы.Характеристика.Доступность = Ложь;
		Запись.Характеристика = Неопределено;
	КонецЕсли;
	
	ЭтаФорма.Элементы.КнопкаОбновитьКатегориюПоСоответствию.Видимость = (Не ТоварСозданВOzon);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветПриПроверкеЗаполненияАтрибутов(Ответ, ПараметрыЗаписи) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Запись.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации");
		ВыполнитьЗапись = Истина;
		Записать(ПараметрыЗаписи);

		Если ЭтоЗакрытиеФормы = Истина Тогда
			Закрыть();
		КонецЕсли;
	Иначе
		ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
		ПараметрыДействий.Событие = "ПередЗаписьюОтказСохраненияСОшибками";
		ПараметрыДействий.ЗаполнитьДеревоРеквизитов = Истина;

		ЗаполнитьДанныеТовара(ПараметрыДействий);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеКарточкиТовараНаСервере(Знач ПараметрыФормы)

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "ПередЗаписьюПроверкаЗаполнения";
	ПараметрыДействий.ПолучитьДанныеТовара = Истина;
	ПараметрыДействий.ОбновитьКатегориюМаркетплейса = ПараметрыФормы.ИзмененыПараметрыТовара;
	ПараметрыДействий.ПроверитьОшибки = Истина;
	Если ПараметрыФормы.Запись.ИсходныйКлючЗаписи.Пустой() Или ПараметрыФормы.ИзмененыПараметрыТовара Тогда
		ПараметрыДействий.ПолучитьОбъектыПубликации = Истина;
		ПараметрыДействий.ОбновитьОбъектыПубликации = Истина;
	КонецЕсли;

	ТаблицаЗначенийРеквизитов = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаЗначенийРеквизитов();
	Для Каждого ДанныеСтроки Из ПараметрыФормы.ТаблицаЗначенийРеквизитов Цикл
		НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
	КонецЦикла;

	ПараметрыФормы.Вставить("ТаблицаЗначенийРеквизитов", ТаблицаЗначенийРеквизитов);
	ПараметрыФормы.Вставить("ОтображаетсяДеревоАтрибутов", Ложь);

	ПараметрыФункции = ПараметрыФункцииЗаполненияКарточкиТовара(ПараметрыДействий, ПараметрыФормы);
	РезультатПроверки = ИнтеграцияСМаркетплейсомOzonСервер.ЗаполнитьДанныеКарточкиТовара(ПараметрыФункции, ПараметрыФормы.Запись.УчетнаяЗаписьМаркетплейса,
			ПараметрыДействий);

	ОбъектыПубликации = Неопределено;
	Если РезультатПроверки.Свойство("ОбъектыПубликации", ОбъектыПубликации) Тогда
		ОбъектыПубликацииАдресХранилища = ПоместитьВоВременноеХранилище(ОбъектыПубликации, ПараметрыФормы.УникальныйИдентификатор);
		РезультатПроверки.Вставить("ОбъектыПубликацииАдресХранилища", ОбъектыПубликацииАдресХранилища);
		РезультатПроверки.Удалить("ОбъектыПубликации");
	КонецЕсли;

	ДанныеОбъекта = Неопределено;
	Если РезультатПроверки.Свойство("ДанныеОбъекта", ДанныеОбъекта) Тогда
		РезультатПроверки.Вставить("ОбъектыПубликацииАдресХранилища", ОбъектыПубликацииАдресХранилища);
		РезультатПроверки.Удалить("ДанныеОбъекта");
		МассивДанныхРеквизитов = ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеОбъекта);
		РезультатПроверки.Вставить("ДанныеОбъекта", МассивДанныхРеквизитов);
	КонецЕсли;

	Возврат РезультатПроверки;

КонецФункции

&НаСервереБезКонтекста
Процедура ПослеЗаписиНаСервере(ПараметрыЗаписи)

	ОбъектыПубликацииАдресХранилища = Неопределено;
	Если ПараметрыЗаписи.Свойство("ОбъектыПубликацииАдресХранилища", ОбъектыПубликацииАдресХранилища) Тогда
		ОбъектыПубликации = ПолучитьИзВременногоХранилища(ОбъектыПубликацииАдресХранилища);
		УдалитьИзВременногоХранилища(ОбъектыПубликацииАдресХранилища);

		Если ОбъектыПубликации <> Неопределено Тогда
			ТаблицаПубликации = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаПубликацииТоваров();
			СтрокаПубликации = ТаблицаПубликации.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПубликации, ПараметрыЗаписи.ДанныеЗаписи);
			СтрокаПубликации.ОбъектыПубликации = ОбъектыПубликации;

			ИнтеграцияСМаркетплейсомOzonСервер.СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon(ТаблицаПубликации);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьХарактеристикиУпаковки(ИзменениеНоменклатуры = Ложь)

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеТовара(ПараметрыДействий)

	ОчиститьСообщения();

	Если ПараметрыДействий.Событие <> "ПриОткрытии" И Запись.УчетнаяЗаписьМаркетплейса.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать учетную запись.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Запись.УчетнаяЗаписьМаркетплейса");
		Возврат;
	КонецЕсли;

	ИдентификаторКатегорииМаркетплейса = Запись.ИдентификаторКатегорииМаркетплейса;

	Если ПараметрыДействий.ЗаполнитьДеревоАтрибутов И ЗначениеЗаполнено(Запись.ИдентификаторКатегорииМаркетплейса) Тогда
		ИдентификаторКэшаКатегории = "Категория_" + Запись.ИдентификаторКатегорииМаркетплейса;
		ДанныеКэша = ИнтеграцияСМаркетплейсомOzonКлиент.ПолучитьДанныеИзКэшаКатегорий(ИдентификаторКэшаКатегории);

		ПараметрыДействий.Вставить("ИдентификаторКэшаКатегории", ИдентификаторКэшаКатегории);
		ПараметрыДействий.Вставить("ДанныеКэша", ДанныеКэша);
	КонецЕсли;

	ДлительнаяОперация = ЗаполнитьДанныеТовараНаСервере(ПараметрыДействий);

	Если ДлительнаяОперация <> Неопределено Тогда

		Если ПараметрыДействий.ПолучитьДанныеТовара И Не Элементы.СтраницаРедактированияАтрибутовТовара.Видимость Тогда
			Элементы.СтраницыСтатуса.ТекущаяСтраница = Элементы.СтраницаДлительноеОжидание;
		КонецЕсли;

		Если ПараметрыДействий.ЗаполнитьДеревоРеквизитов Тогда
			Элементы.СтраницыДереваРеквизитов.ТекущаяСтраница = Элементы.СтраницаДлительногоОжиданияДереваРеквизитов;
		КонецЕсли;

		Если ПараметрыДействий.ЗаполнитьДеревоАтрибутов Тогда
			Элементы.СтраницыДереваАтрибутов.ТекущаяСтраница = Элементы.СтраницаДлительногоОжиданияДереваАтрибутов;
		КонецЕсли;

		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьДанныеТовараЗавершение", ЭтотОбъект, ПараметрыДействий);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеТовараНаСервере(ПараметрыДействий)

	Если ПараметрыДействий.Событие = "НоменклатураПриИзменении" Тогда
		НоменклатураПриИзмененииНаСервере();
		Если Не ХарактеристикиИспользуются Или ЗначениеЗаполнено(Запись.Характеристика) Тогда
			ПараметрыДействий.ПроверитьОшибки = Истина;
		Иначе
			ДеревоРеквизитов.ПолучитьЭлементы().Очистить();
			ТаблицаЗначенийРеквизитов.Очистить();
		КонецЕсли;

		ИзмененыПараметрыТовара = Истина;
	ИначеЕсли ПараметрыДействий.Событие = "ХарактеристикаПриИзменении" Тогда
		ХарактеристикаПриИзмененииНаСервере();
		ПараметрыДействий.ПроверитьОшибки = Истина;

		ИзмененыПараметрыТовара = Истина;
	ИначеЕсли ПараметрыДействий.Событие = "УпаковкаПриИзменении" Тогда
		УпаковкаПриИзмененииНаСервере();
		ПараметрыДействий.ПроверитьОшибки = Истина;

		ИзмененыПараметрыТовара = Истина;
	КонецЕсли;
	
	ПараметрыДействий.ОбновитьКатегориюМаркетплейса = ИзмененыПараметрыТовара;

	Если ПараметрыДействий.ОбновитьКатегориюМаркетплейса И Элементы.СтраницаДанныеТовара.Видимость Тогда
		ПараметрыДействий.ПолучитьОписаниеТовара = Истина;
	КонецЕсли;

	Если ПараметрыДействий.Событие = "НоменклатураПриИзменении"
		Или ПараметрыДействий.Событие = "ПриОткрытии" Тогда
		Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
			ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Номенклатура, "КатегорияНоменклатуры");
		Иначе
			ВидНоменклатуры = Справочники.КатегорииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыДействий.ОбновитьДанныеТовара И ИзмененыПараметрыТовара Тогда
		Запись.НаименованиеОбъектаМаркетплейса =
				ИнтеграцияСМаркетплейсомOzonСервер.ПредставлениеТоварнойПозиции(Запись.Номенклатура, Запись.Характеристика, Запись.Упаковка);
		Запись.ПредставлениеОбъектаМаркетплейса = Запись.НаименованиеОбъектаМаркетплейса;
		Запись.ОписаниеОбъектаМаркетплейса = "";
	КонецЕсли;

	Если ЗначениеЗаполнено(Запись.Номенклатура)
		И (Не ПараметрыДействий.Событие = "НоменклатураПриИзменении"
		Или Не ХарактеристикиИспользуются Или ЗначениеЗаполнено(Запись.Характеристика)) Тогда

		ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ЗаполнитьДанныеКарточкиТовара";
		НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Заполнение данных товара'");

		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;

		ПараметрыФормы = Новый Структура("Запись, ВариантОтображенияАтрибутов, НаименованиеКатегорииМаркетплейса,
				|ИсточникКатегорииМаркетплейса, Валюта, Цены, СтавкаНДС, Штрихкод");
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ЭтотОбъект);
		
		ПараметрыФормы.ИсточникКатегорииМаркетплейса = ЭтотОбъект.Запись.ИсточникКатегорииМаркетплейса;
		
		ПараметрыФормы.Вставить("ТаблицаЗначенийРеквизитов", ТаблицаЗначенийРеквизитов.Выгрузить());
		ПараметрыФормы.Вставить("ОтображаетсяДеревоАтрибутов", Элементы.СтраницаРедактированияАтрибутовТовара.Видимость);

		ПараметрыФункции = ПараметрыФункцииЗаполненияКарточкиТовара(ПараметрыДействий, ПараметрыФормы);

		Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода,
				ПараметрыФункции, Запись.УчетнаяЗаписьМаркетплейса, ПараметрыДействий);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыФункцииЗаполненияКарточкиТовара(ПараметрыДействий, ПараметрыФормы)

	Запись = ПараметрыФормы.Запись;

	ОписаниеТовара = ИнтеграцияСМаркетплейсомOzonСервер.СписокСвойствТовараДляКарточкиТовара();
	ЗаполнитьЗначенияСвойств(ОписаниеТовара, Запись);
	ОписаниеТовара.НаименованиеКатегорииМаркетплейса = ПараметрыФормы.НаименованиеКатегорииМаркетплейса;
	ОписаниеТовара.Категория1С = Запись.Категория;
	ОписаниеТовара.Валюта = ПараметрыФормы.Валюта;
	ОписаниеТовара.Цены = ПараметрыФормы.Цены;
	ОписаниеТовара.СтавкаНДС = ПараметрыФормы.СтавкаНДС;

	Если ПараметрыДействий.ЗаполнитьДеревоАтрибутов Или ПараметрыФормы.ОтображаетсяДеревоАтрибутов Тогда
		ПараметрыЗаполненияДереваАтрибутов = ИнтеграцияСМаркетплейсомOzonСервер.ПараметрыДляЗаполненияАтрибутовКатегории();
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполненияДереваАтрибутов, Запись);
		ПараметрыЗаполненияДереваАтрибутов.ВариантОтображенияАтрибутов = ПараметрыФормы.ВариантОтображенияАтрибутов;
		ПараметрыЗаполненияДереваАтрибутов.ИдентификаторКатегорииМаркетплейса = Запись.ИдентификаторКатегорииМаркетплейса;
		ПараметрыЗаполненияДереваАтрибутов.ПоляСхемыКомпоновкиДанных = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов();
		
		ПараметрыЗаполненияДереваАтрибутов.ИсточникКатегорииМаркетплейса = ПараметрыФормы.ИсточникКатегорииМаркетплейса;
		Если ЗначениеЗаполнено(ПараметрыФормы.ИсточникКатегорииМаркетплейса) Тогда
			ПараметрыЗаполненияДереваАтрибутов.ИдентификаторИсточникаКатегорииМаркетплейса =
					СтрЗаменить(ПараметрыФормы.ИсточникКатегорииМаркетплейса.УникальныйИдентификатор(), "-", "_");
		КонецЕсли;

		Если ПараметрыДействий.Свойство("ИдентификаторКэшаКатегории") Тогда
			ПараметрыЗаполненияДереваАтрибутов.Вставить("ИдентификаторКэшаКатегории", ПараметрыДействий.ИдентификаторКэшаКатегории);
			ПараметрыЗаполненияДереваАтрибутов.Вставить("ДанныеКэша", ПараметрыДействий.ДанныеКэша);  
		КонецЕсли;
	КонецЕсли;

	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("ОписаниеТовара", ОписаниеТовара);
	ПараметрыФункции.Вставить("ДанныеОбъекта", ПараметрыФормы.ТаблицаЗначенийРеквизитов);
	ПараметрыФункции.Вставить("ПараметрыЗаполненияДереваАтрибутов", ПараметрыЗаполненияДереваАтрибутов);
	ПараметрыФункции.Вставить("ОтображаетсяДеревоАтрибутов", ПараметрыФормы.ОтображаетсяДеревоАтрибутов);

	Возврат ПараметрыФункции;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеТовараЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено И Результат.Статус = "Выполнено" Тогда
		ДанныеКэша = Неопределено;
		ЗаполнитьДанныеТовараЗавершениеНаСервере(Результат.АдресРезультата, ДанныеКэша, ДополнительныеПараметры);

		Если ДополнительныеПараметры.Свойство("ИдентификаторКэшаКатегории") И ЗначениеЗаполнено(ДанныеКэша) Тогда
			ИнтеграцияСМаркетплейсомOzonКлиент.СохранитьДанныеВКэшКатегорий(ДанныеКэша, ДополнительныеПараметры.ИдентификаторКэшаКатегории);
			ДанныеКэша = Неопределено;
		КонецЕсли;

		Если ДополнительныеПараметры.ОбновитьДанныеТовара Тогда
			Модифицированность = Истина;
		КонецЕсли; 
		
		Если ИдентификаторКатегорииМаркетплейса <> Запись.ИдентификаторКатегорииМаркетплейса Тогда
			ВариантОтображенияАтрибутов = "Все";

			ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
			ПараметрыДействий.Событие = "ОбновитьДеревоАтрибутов";
			ПараметрыДействий.ЗаполнитьДеревоАтрибутов = Истина;
			ЗаполнитьДанныеТовара(ПараметрыДействий);

			ИдентификаторКатегорииМаркетплейса = Запись.ИдентификаторКатегорииМаркетплейса;
		КонецЕсли;

		Если ДополнительныеПараметры.ЗаполнитьДеревоРеквизитов И Элементы.СтраницаРедактированияАтрибутовТовара.Видимость Тогда
			Для Каждого СтрокаДерева Из ДеревоРеквизитов.ПолучитьЭлементы() Цикл
				Если СтрокаДерева.Уровень = 0 Тогда
					Элементы.ДеревоРеквизитов.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ЭтоЗакрытиеФормы <> Истина Тогда
		ШаблонОшибки = НСтр("ru = 'Не удалось заполнить данные товара по причине: %1. Подробнее см. журнал регистрации.'");
		ПредставлениеНеизвестнойОшибки = НСтр("ru = 'Неизвестная ошибка выполнения операции'");
		ПодробноеПредставлениеОшибки = ?(Результат = Неопределено, ПредставлениеНеизвестнойОшибки, Результат.ПодробноеПредставлениеОшибки);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;

	Если ДополнительныеПараметры.ПолучитьДанныеТовара Тогда
		Элементы.СтраницыСтатуса.ТекущаяСтраница = Элементы.СтраницаСтатус;
		Элементы.СтраницаОписаниеОшибки.Видимость = Не ПустаяСтрока(Запись.ОписаниеОшибки);

		Если Элементы.СтраницаОписаниеОшибки.Видимость Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;

	Если ДополнительныеПараметры.ЗаполнитьДеревоРеквизитов Тогда
		Элементы.СтраницыДереваРеквизитов.ТекущаяСтраница = Элементы.СтраницаКомандДереваРеквизитов;

		ПроверитьНаличиеИзмененийЗначенийРеквизитов1С();
	КонецЕсли;

	Если ДополнительныеПараметры.ЗаполнитьДеревоАтрибутов Тогда
		Элементы.СтраницыДереваАтрибутов.ТекущаяСтраница = Элементы.СтраницаКомандДереваАтрибутов;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТовараЗавершениеНаСервере(АдресХранилища, ДанныеКэша = Неопределено, ДополнительныеПараметры = Неопределено)

	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	УдалитьИзВременногоХранилища(АдресХранилища);

	ДанныеОбъектаФормы = Неопределено;
	Если Результат.Свойство("ДанныеОбъекта", ДанныеОбъектаФормы) Тогда
		Попытка
			ЗначениеВРеквизитФормы(ДанныеОбъектаФормы, "ТаблицаЗначенийРеквизитов");
		Исключение 
			Запись.ОписаниеОшибки = НСтр("ru = 'Необходимо перезаполнить атрибуты товара, т.к. формат сохраненных данных отличается от текущего.'");
		КонецПопытки;
	КонецЕсли;

	Категория1С = Неопределено;
	Если Результат.Свойство( "ДанныеДляПубликации" ) И Не ЗначениеЗаполнено( Результат.ДанныеДляПубликации.ИсточникКатегорииМаркетплейса ) Тогда
		Запись.Категория = Неопределено;
	Иначе
		Если Результат.Свойство("Категория1С", Категория1С) Тогда
			Запись.Категория = Категория1С;
		КонецЕсли;
	КонецЕсли;

	Если ДополнительныеПараметры.ОбновитьДанныеТовара Тогда
		ЕстьКритичныеОшибки = Ложь;
		Если Результат.Свойство("ЕстьКритичныеОшибки", ЕстьКритичныеОшибки) И ЕстьКритичныеОшибки = Истина Тогда
			Запись.ОписаниеОшибки = Результат.ОписаниеОшибки;
			Запись.КодОшибки = Результат.КодОшибки;
		КонецЕсли;
	КонецЕсли;

	ДанныеДляПубликации = Неопределено;
	Если Результат.Свойство("ДанныеДляПубликации", ДанныеДляПубликации) Тогда
		Если ДополнительныеПараметры.ОбновитьДанныеТовара Тогда
			Если ЗначениеЗаполнено( Запись.ИдентификаторПубликации ) Тогда
				ИсключитьЗаполнениеСвойств = "ИдентификаторПубликации";
			Иначе
				ИсключитьЗаполнениеСвойств = "";
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Запись, ДанныеДляПубликации, , ИсключитьЗаполнениеСвойств);
		КонецЕсли;

		Если ДанныеДляПубликации.Свойство("ИсточникКатегорииМаркетплейса") Тогда
			ИсточникКатегорииМаркетплейса = ДанныеДляПубликации.ИсточникКатегорииМаркетплейса;
		КонецЕсли;

		ДанныеДляПубликации.Свойство("НаименованиеКатегорииМаркетплейса", НаименованиеКатегорииМаркетплейса);
		
		НеактивнаяКатегорияМаркетплейса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДляПубликации, "НеактивнаяКатегорияМаркетплейса", Ложь);
		Если НеактивнаяКатегорияМаркетплейса = Истина И ЗначениеЗаполнено(Запись.ИдентификаторКатегорииМаркетплейса) Тогда
			НаименованиеКатегорииМаркетплейса = НаименованиеКатегорииМаркетплейса + ИнтеграцияСМаркетплейсомOzonСервер.ПостфиксНеиспользуемойКатегории();
		КонецЕсли;

		ДанныеДляПубликации.Свойство("ОбъединятьТоварыВОднуКарточкуСвойства", ОбъединятьТоварыВОднуКарточкуСвойства);
		ДанныеДляПубликации.Свойство("Валюта", Валюта);
		ДанныеДляПубликации.Свойство("Цены", Цены);
		ДанныеДляПубликации.Свойство("СтавкаНДС", СтавкаНДС);

		ИзменитьВидимостьЭлементовОбъединенияВОднуКарточку();
		
		ДополнительныеПараметры.Вставить("ИдентификаторКэшаКатегории", "Категория_" + Запись.ИдентификаторКатегорииМаркетплейса);
	КонецЕсли;

	ДеревоРеквизитовФормы = Неопределено;
	Если Результат.Свойство("ДеревоРеквизитов", ДеревоРеквизитовФормы) Тогда
		ЗначениеВРеквизитФормы(ДеревоРеквизитовФормы, "ДеревоРеквизитов");

		Если ДополнительныеПараметры.Событие = "АктивизироватьСтрокуДереваРеквизитовПриДобавленииНового" Тогда
			ИдентификаторТекущейСтроки = 0;
			ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
					"ИдентификаторАтрибутаМаркетплейса", ИдентификаторТекущейСтроки,
					ДеревоРеквизитов.ПолучитьЭлементы(), ДополнительныеПараметры.ИдентификаторАтрибутаМаркетплейсаДляДереваРеквизитов, Ложь);
			Элементы.ДеревоРеквизитов.ТекущаяСтрока = ИдентификаторТекущейСтроки;
		КонецЕсли;
	КонецЕсли;

	ДеревоАтрибутовФормы = Неопределено;
	Если Результат.Свойство("ДеревоАтрибутов", ДеревоАтрибутовФормы) Тогда
		УстановитьЗаголовокДереваАтрибутов(Элементы.ДекорацияЗаголовокДереваАтрибутов, НаименованиеКатегорииМаркетплейса);
		ЗначениеВРеквизитФормы(ДеревоАтрибутовФормы, "ДеревоАтрибутов");
	КонецЕсли; 

	Результат.Свойство("ДанныеКэша", ДанныеКэша);

	Результат.Свойство("ОписаниеДанныхТовара", ОписаниеДанныхТовара);

	Если ДополнительныеПараметры.Событие = "ПриОткрытии" Тогда
		ИсточникКатегорииМаркетплейса = Запись.ИсточникКатегорииМаркетплейса;
		НаименованиеКатегорииМаркетплейса =
				?(НаименованиеКатегорииМаркетплейса = "", Запись.НаименованиеКатегорииМаркетплейса, НаименованиеКатегорииМаркетплейса);

		Если Не ЗначениеЗаполнено(ИсточникКатегорииМаркетплейса) Тогда
			ДанныеИсточникаКатегорииМаркетплейса =
					ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьТекущийИсточникКатегорииМаркетплейса(Запись.Категория, Запись.УчетнаяЗаписьМаркетплейса);
			ИсточникКатегорииМаркетплейса = ДанныеИсточникаКатегорииМаркетплейса.ИсточникКатегорииМаркетплейса;
			НаименованиеКатегорииМаркетплейса = ДанныеИсточникаКатегорииМаркетплейса.НаименованиеИсточникаКатегорииМаркетплейса;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗаголовокДереваАтрибутов(ДекорацияЗаголовокДереваАтрибутов, НаименованиеКатегорииМаркетплейса)

	ШаблонЗаголовка = НСтр("ru = 'Атрибуты категории маркетплейса <%1>:'");
	Если ПустаяСтрока(НаименованиеКатегорииМаркетплейса) Тогда
		НаименованиеКатегорииМаркетплейса = НСтр("ru = 'Категория маркетплейса не определена'");
	КонецЕсли;

	ДекорацияЗаголовокДереваАтрибутов.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка,
			НаименованиеКатегорииМаркетплейса);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантОтображенияАтрибутов(ПерезаполнитьДеревоАтрибутов = Ложь)

	Элементы.ПоказатьВсеАтрибуты.Пометка = (ВариантОтображенияАтрибутов = "Все");
	Элементы.ПоказатьОсновныеАтрибуты.Пометка = (ВариантОтображенияАтрибутов = "Основные");
	Элементы.ПоказатьДополнительныеАтрибуты.Пометка = (ВариантОтображенияАтрибутов = "Дополнительные");

	СтрокиАтрибутов = ДеревоАтрибутов.ПолучитьЭлементы();
	СтрокиАтрибутов.Очистить();

	Если ПерезаполнитьДеревоАтрибутов Тогда
		ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
		ПараметрыДействий.ЗаполнитьДеревоАтрибутов = Истина;

		ЗаполнитьДанныеТовара(ПараметрыДействий);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияАтрибута(ИдентификаторСтроки, МножественныйВыбор = Ложь)

	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	Иначе
		ТекущиеДанные = ДеревоРеквизитов.НайтиПоИдентификатору(ИдентификаторСтроки);

		Если ТекущиеДанные = Неопределено Или Не ТекущиеДанные.ДоступенВыборЗначенияИзСписка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("УчетнаяЗапись", Запись.УчетнаяЗаписьМаркетплейса);
	ПараметрыВыбора.Вставить("ИдентификаторКатегорииМаркетплейса", ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
	ПараметрыВыбора.Вставить("ИдентификаторАтрибутаМаркетплейса", ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);
	ПараметрыВыбора.Вставить("НаименованиеАтрибутаМаркетплейса", ТекущиеДанные.НаименованиеАтрибутаМаркетплейса);
	ШаблонОписания = НСтр("ru = 'Выбор значения маркетплейса для атрибута <%1>'");
	ПараметрыВыбора.Вставить("Описание",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписания, ТекущиеДанные.НаименованиеАтрибутаМаркетплейса));

	Если МножественныйВыбор Тогда
		ПараметрыВыбора.Вставить("ТекущееЗначениеАтрибута", ТекущиеДанные.ЗначенияАтрибутаМаркетплейса);
		
		ИмяФормыВыбора = "ВыборСпискаЗначенийМаркетплейса";
	Иначе
		ПараметрыВыбора.Вставить("ТекущееЗначениеАтрибута", ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
		ПараметрыВыбора.Вставить("ИдентификаторТекущегоЗначенияАтрибута", ТекущиеДанные.ИдентификаторЗначенияАтрибутаМаркетплейса);
		
		ИмяФормыВыбора = "ВыборЗначенияМаркетплейса";
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущиеДанные.АдресХранилищаДоступныхЗначений) Тогда
		ПараметрыВыбора.Вставить("АдресХранилищаДоступныхЗначений", ТекущиеДанные.АдресХранилищаДоступныхЗначений);
	КонецЕсли;

	ОбработчикВыбораЗначения = Новый ОписаниеОповещения("ВыборЗначенияЗавершение", ЭтотОбъект, ИдентификаторСтроки);
	ОткрытьФорму("Обработка.МаркетплейсOzon.Форма." + ИмяФормыВыбора,
			ПараметрыВыбора, ЭтотОбъект,,,, ОбработчикВыбораЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;

	ТекущиеДанные.АдресХранилищаДоступныхЗначений = ВыбранноеЗначение.АдресХранилищаДоступныхЗначений;

	Если ВыбранноеЗначение.Свойство("ЗначенияАтрибута") Тогда
		ТекущиеДанные.ИдентификаторЗначенияАтрибутаМаркетплейса = "";
		ТекущиеДанные.ЗначениеАтрибутаМаркетплейса = "";
		ТекущиеДанные.ЗначенияАтрибутаМаркетплейса = ВыбранноеЗначение.ЗначенияАтрибута;
	Иначе
		ТекущиеДанные.ИдентификаторЗначенияАтрибутаМаркетплейса = ВыбранноеЗначение.ИдентификаторЗначенияАтрибута;
		ТекущиеДанные.ЗначениеАтрибутаМаркетплейса = ВыбранноеЗначение.ЗначениеАтрибута;
		ТекущиеДанные.ЗначенияАтрибутаМаркетплейса = Новый СписокЗначений;
	КонецЕсли;

	ТекущиеДанные.ЗначениеАтрибутаЗаполнено = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() > 0)
			Или ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
	ТекущиеДанные.НеЗаполненАтрибут = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() = 0)
			И Не ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);

	ТекущиеДанные.ЗначениеАтрибутаЗаданоПользователем = Истина;
	ТекущиеДанные.ИзменилсяРеквизит1С = Ложь;

	ИзменитьЗначениеВТаблицеРеквизитов(ТекущиеДанные);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеВТаблицеРеквизитов(ТекущиеДанные = Неопределено)

	Если ТекущиеДанные = Неопределено Тогда
		// Это изменение значения объединения в одну карточку.
		ТекущиеДанные = Новый Структура;
		ТекущиеДанные.Вставить("ИдентификаторКатегорииМаркетплейса", Запись.ИдентификаторКатегорииМаркетплейса);
		ТекущиеДанные.Вставить("ИдентификаторАтрибутаМаркетплейса", ОбъединятьТоварыВОднуКарточкуСвойства.ИдентификаторАтрибута);
		ТекущиеДанные.Вставить("ЯвляетсяКоллекциейЗначений", Ложь);
		ТекущиеДанные.Вставить("ЗначениеАтрибутаМаркетплейса", Запись.ЗначениеОбъединенияВОднуКарточку);
		ТекущиеДанные.Вставить("ИдентификаторЗначенияАтрибутаМаркетплейса", "");
		ТекущиеДанные.Вставить("ЗначениеАтрибутаЗаданоПользователем", Истина);
		ТекущиеДанные.Вставить("ИзменилсяРеквизит1С", ОбъединятьТоварыВОднуКарточкуСвойства.ИзменилсяРеквизит1С);
	Иначе
		Если ТекущиеДанные.ЯвляетсяКоллекциейЗначений Тогда
			СписокЗначенийАтрибута = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ТекущиеДанные.ЗначенияАтрибутаМаркетплейса);
		Иначе
			СписокЗначенийАтрибута = Новый СписокЗначений;
		КонецЕсли;

	КонецЕсли;

	Отбор = Новый Структура("ИдентификаторКатегорииМаркетплейса, ИдентификаторАтрибутаМаркетплейса");
	ЗаполнитьЗначенияСвойств(Отбор, ТекущиеДанные);

	СтрокиАтрибута = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);

	СтрокаДанныхАтрибута = Неопределено;
	СтрокиРеквизитовКУдалению = Новый Массив;

	Для Каждого СтрокаАтрибута Из СтрокиАтрибута Цикл
		Если ТекущиеДанные.ЯвляетсяКоллекциейЗначений Тогда
			Если СписокЗначенийАтрибута.Количество() > 0 Тогда
				Если ТекущиеДанные.ДоступенВыборЗначенияИзСписка Тогда
					СтрокаАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса = СписокЗначенийАтрибута[0].Значение;
					СтрокаАтрибута.ЗначениеАтрибутаМаркетплейса = СписокЗначенийАтрибута[0].Представление;
				Иначе
					СтрокаАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса = "";
					СтрокаАтрибута.ЗначениеАтрибутаМаркетплейса = СписокЗначенийАтрибута[0].Значение;
				КонецЕсли;

				СтрокаАтрибута.ЗначениеАтрибутаЗаданоПользователем = ТекущиеДанные.ЗначениеАтрибутаЗаданоПользователем;
				СтрокаАтрибута.ИзменилсяРеквизит1С = ТекущиеДанные.ИзменилсяРеквизит1С;
				СтрокаАтрибута.НеЗаполненАтрибут = ПустаяСтрока(СтрокаАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса)
						И Не ЗначениеЗаполнено(СтрокаАтрибута.ЗначениеАтрибутаМаркетплейса);

				СписокЗначенийАтрибута.Удалить(СписокЗначенийАтрибута[0]);
				СтрокаДанныхАтрибута = СтрокаАтрибута;
			Иначе
				СтрокиРеквизитовКУдалению.Добавить(СтрокаАтрибута);
			КонецЕсли;
		Иначе
			СтрокаАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса = ТекущиеДанные.ИдентификаторЗначенияАтрибутаМаркетплейса;
			СтрокаАтрибута.ЗначениеАтрибутаМаркетплейса = ТекущиеДанные.ЗначениеАтрибутаМаркетплейса;
			СтрокаАтрибута.ЗначениеАтрибутаЗаданоПользователем = ТекущиеДанные.ЗначениеАтрибутаЗаданоПользователем;
			СтрокаАтрибута.ИзменилсяРеквизит1С = ТекущиеДанные.ИзменилсяРеквизит1С;
			СтрокаАтрибута.НеЗаполненАтрибут = ПустаяСтрока(СтрокаАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса)
					И Не ЗначениеЗаполнено(СтрокаАтрибута.ЗначениеАтрибутаМаркетплейса);
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаУдаления Из СтрокиРеквизитовКУдалению Цикл
		Если СтрокаДанныхАтрибута = Неопределено Тогда
			СтрокаДанныхАтрибута = СтрокаУдаления;
			СтрокаАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса = "";
			СтрокаАтрибута.ЗначениеАтрибутаМаркетплейса = "";
			СтрокаАтрибута.ЗначениеАтрибутаЗаданоПользователем = ТекущиеДанные.ЗначениеАтрибутаЗаданоПользователем;
			СтрокаАтрибута.ИзменилсяРеквизит1С = ТекущиеДанные.ИзменилсяРеквизит1С;
			СтрокаАтрибута.НеЗаполненАтрибут = ПустаяСтрока(СтрокаАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса)
					И Не ЗначениеЗаполнено(СтрокаАтрибута.ЗначениеАтрибутаМаркетплейса);
			Продолжить;
		КонецЕсли;

		ТаблицаЗначенийРеквизитов.Удалить(СтрокаУдаления);
	КонецЦикла;

	Если СтрокаДанныхАтрибута <> Неопределено Тогда
		Для Каждого ЗначениеАтрибута Из СписокЗначенийАтрибута Цикл
			НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныхАтрибута,, "ЗначениеАтрибутаМаркетплейса, ИдентификаторЗначенияАтрибутаМаркетплейса");

			Если НоваяСтрока.ДоступенВыборЗначенияИзСписка Тогда
				НоваяСтрока.ИдентификаторЗначенияАтрибутаМаркетплейса = ЗначениеАтрибута.Значение;
				НоваяСтрока.ЗначениеАтрибутаМаркетплейса = ЗначениеАтрибута.Представление;
			Иначе
				НоваяСтрока.ИдентификаторЗначенияАтрибутаМаркетплейса = "";
				НоваяСтрока.ЗначениеАтрибутаМаркетплейса = ЗначениеАтрибута.Значение;
			КонецЕсли;

			СтрокаАтрибута.ЗначениеАтрибутаЗаданоПользователем = Истина;
			СтрокаАтрибута.НеЗаполненАтрибут = ПустаяСтрока(СтрокаАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса)
					И Не ЗначениеЗаполнено(СтрокаАтрибута.ЗначениеАтрибутаМаркетплейса);
		КонецЦикла;
	КонецЕсли;

	ПроверитьНаличиеИзмененийЗначенийРеквизитов1С();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьНулевыеОстатки(Знач КлючЗаписи)

	ТаблицаТоваров = ИнтеграцияСМаркетплейсомOzonСервер.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	НоваяСтрока = ТаблицаТоваров.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗаписи);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Выгрузить нулевые остатки товаров.'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ВыгрузитьНулевыеОстаткиТоваров";
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяМетода, КлючЗаписи.УчетнаяЗаписьМаркетплейса, ТаблицаТоваров);

КонецФункции

&НаСервереБезКонтекста
Функция ПеренестиВАрхивНаСервере(Знач КлючЗаписи)

	ТаблицаТоваров = ИнтеграцияСМаркетплейсомOzonСервер.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	НоваяСтрока = ТаблицаТоваров.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗаписи);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Перенести товары в архив.'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ПеренестиТоварыВАрхив";
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяМетода, КлючЗаписи.УчетнаяЗаписьМаркетплейса, ТаблицаТоваров);

КонецФункции

&НаСервереБезКонтекста
Функция ВернутьИзАрхиваНаСервере(Знач КлючЗаписи)

	ТаблицаТоваров = ИнтеграцияСМаркетплейсомOzonСервер.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	НоваяСтрока = ТаблицаТоваров.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗаписи);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Вернуть товары из архива.'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ВернутьТоварыИзАрхива";
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяМетода, КлючЗаписи.УчетнаяЗаписьМаркетплейса, ТаблицаТоваров);

КонецФункции

&НаСервереБезКонтекста
Функция УдалитьТоварыНаСервере(Знач КлючЗаписи)

	ТаблицаТоваров = ИнтеграцияСМаркетплейсомOzonСервер.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	НоваяСтрока = ТаблицаТоваров.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗаписи);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Удалить товары.'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.УдалитьТовары";
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяМетода, КлючЗаписи.УчетнаяЗаписьМаркетплейса, ТаблицаТоваров);

КонецФункции

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере()

	УстановитьДоступностьХарактеристикиУпаковки(Истина);

КонецПроцедуры

&НаСервере
Процедура ХарактеристикаПриИзмененииНаСервере()

КонецПроцедуры

&НаСервере
Процедура УпаковкаПриИзмененииНаСервере()

КонецПроцедуры

&НаКлиенте
Процедура ОпубликоватьТоварЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьПубликациюТовара = Истина;
		Записать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПубликациюТовара()

	Текст = НСтр("ru = 'Отправка товара на модерацию'");
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполняется отправка товара <%1> на модерацию'"),
			Запись.НаименованиеОбъектаМаркетплейса);
	ПоказатьОповещениеПользователя(Текст,, Сообщение, БиблиотекаКартинок.ЛоготипOzon1);
    
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

	ДлительнаяОперация = ВыполнитьПубликациюТовараНаСервере(Запись, ТаблицаЗначенийРеквизитов);

	ДополнительныеПараметры = Новый Структура("Действие", "ПубликацияТовара");
	Оповещение = Новый ОписаниеОповещения("ДействияСТоваромОповещение", ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);

	ВыполнитьПубликациюТовара = Ложь;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьПубликациюТовараНаСервере(Знач Запись, Знач ТаблицаЗначенийРеквизитов)

	ЗаписьДляИзменений = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьДляИзменений, Запись);
	ЗаписьДляИзменений.ДанныеОбъекта = Новый ХранилищеЗначения(ТаблицаЗначенийРеквизитов.Выгрузить());
	ЗаписьДляИзменений.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации");
	ЗаписьДляИзменений.Записать();
    
	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ВыполнитьПубликациюТоваров";
	НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Публикация товаров'");

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне();
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;

	МассивИдентификаторовПубликации = Новый Массив;
	МассивИдентификаторовПубликации.Добавить(Запись.ИдентификаторПубликации);

	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода,
			Запись.УчетнаяЗаписьМаркетплейса, МассивИдентификаторовПубликации);

КонецФункции

&НаКлиенте
Процедура УдалитьТоварЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Текст = НСтр("ru = 'Удаление товара'");
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполняется удаление товара <%1>'"),
				Запись.НаименованиеОбъектаМаркетплейса);
		ПоказатьОповещениеПользователя(Текст,, Сообщение);

		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Удаление товара <%1> выполнено'"),
				Запись.НаименованиеОбъектаМаркетплейса);

		ДополнительныеПараметры = Новый Структура("Действие", "УдалениеТовара");

		Если ПустаяСтрока(Запись.ИдентификаторОбъектаМаркетплейса) Тогда
			УдалитьТоварИзРегистраНаСервере();

			ПоказатьОповещениеПользователя(Текст,, Сообщение);

			ДействияСТоваромОповещение(, ДополнительныеПараметры);
		Иначе
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
			ПараметрыОжидания.ОповещениеПользователя.Текст = Текст;
			ПараметрыОжидания.ОповещениеПользователя.Пояснение = Сообщение;

			ДлительнаяОперация = УдалитьТоварыНаСервере(Запись);
			Оповещение = Новый ОписаниеОповещения("ДействияСТоваромОповещение", ЭтотОбъект, ДополнительныеПараметры);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДействияСТоваромОповещение(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Если ДополнительныеПараметры.Действие = "УдалениеТовара" Тогда
		ОповеститьОбИзменении(Запись.ИсходныйКлючЗаписи);
		Закрыть();
	Иначе
		Если ДополнительныеПараметры.Действие = "ТоварИзАрхива"
			И Результат <> Неопределено И Результат.Статус = "Выполнено" Тогда
			УстановитьДоступностьРедактированияКарточки(ЭтотОбъект, Ложь);
			УстановитьДоступностьЭлементовДляСтатуса();
		ИначеЕсли ДополнительныеПараметры.Действие = "ПубликацияТовара"
			И Результат <> Неопределено И Результат.Статус = "Выполнено" Тогда
			ЗначениеРезультата = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначениеРезультата, "ОписаниеОшибки", "");
			Текст = НСтр("ru = 'Отправлен на модерацию'");

			Если ПустаяСтрока(ОписаниеОшибки) Тогда
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Товар <%1> отправлен на модерацию'"),
						Запись.НаименованиеОбъектаМаркетплейса);
			Иначе
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось отправить на модерацию товар <%1>. См. описание ошибки в карточке товара.'"),
						Запись.НаименованиеОбъектаМаркетплейса);
			КонецЕсли;

			ПоказатьОповещениеПользователя(Текст,, Сообщение, БиблиотекаКартинок.ЛоготипOzon1);
		КонецЕсли;

		Прочитать();

		Элементы.СтраницаОписаниеОшибки.Видимость = Не ПустаяСтрока(Запись.ОписаниеОшибки);

		Если Элементы.СтраницаОписаниеОшибки.Видимость Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОписаниеОшибки;
		КонецЕсли;

		ОповеститьОбИзменении(Запись.ИсходныйКлючЗаписи);

		ТаблицаФайловОбновить();
	КонецЕсли;

	УстановитьДоступностьЭлементовДляСтатуса();

КонецПроцедуры

&НаСервере
Процедура УдалитьТоварИзРегистраНаСервере()

	МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Запись);
	МенеджерЗаписи.Удалить();

КонецПроцедуры


#КонецОбласти

&НаКлиенте
Процедура КнопкаФормаЗаписиСлужебнаяОткрыть(Команда)
	СтруктураЗаписи = Новый Структура( "УчетнаяЗаписьМаркетплейса, ВидОбъектаМаркетплейса, Номенклатура, Характеристика, Упаковка, ОбъектПубликации" );
	ЗаполнитьЗначенияСвойств( СтруктураЗаписи, ЭтаФорма.Запись );
	МассивСтруктурЗаписи = Новый Массив;
	МассивСтруктурЗаписи.Добавить( СтруктураЗаписи );
	КлючЗаписи = Новый ("РегистрСведенийКлючЗаписи.СтатусыПубликацииОбъектовМаркетплейсаOzon", МассивСтруктурЗаписи );
	ПараметрыКлюч = Новый Структура( "Ключ", КлючЗаписи );
	ОткрытьФорму( "РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.Форма.ФормаЗаписиСлужебная", ПараметрыКлюч );
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаФайловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(,Элементы.ТаблицаФайлов.ТекущиеДанные.Файл);
	
КонецПроцедуры

&НаСервере
Функция ТаблицаФайловСтрокаДозаполнить( ТаблицаФайловСтрока )

	Если ТипЗнч( ТаблицаФайловСтрока ) = Тип( "Число" ) Тогда
		ТаблицаФайловТекущаяСтрока = ТаблицаФайлов.НайтиПоИдентификатору( ТаблицаФайловСтрока );
	Иначе
		ТаблицаФайловТекущаяСтрока = ТаблицаФайловСтрока;
	КонецЕсли;
	
	Если ТаблицаФайловТекущаяСтрока.ВыгружатьНаСайт = Ложь Тогда
		ТаблицаФайловТекущаяСтрока.Статус = ПредопределенноеЗначение( "Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется" );
		ТаблицаФайловТекущаяСтрока.МаркерСтатуса = 2;
	Иначе
		Если Не ЗначениеЗаполнено( ТаблицаФайловТекущаяСтрока.Статус ) 
		Или ТаблицаФайловТекущаяСтрока.Статус = ПредопределенноеЗначение( "Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется" )
		Тогда
			ТаблицаФайловТекущаяСтрока.Статус = ПредопределенноеЗначение( "Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации" );
			ТаблицаФайловТекущаяСтрока.МаркерСтатуса = 1;
		КонецЕсли;
	КонецЕсли;

	Если ПустаяСтрока( ТаблицаФайловТекущаяСтрока.КартинкаАдрес ) Тогда
		ТаблицаФайловТекущаяСтрока.КартинкаАдрес = ИнтеграцияСМаркетплейсамиСервер.ПрисоединенныйФайлВоВременноеХранилище( ТаблицаФайловТекущаяСтрока.Файл, ЭтаФорма.УникальныйИдентификатор );
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ТаблицаФайловОбновитьНаСервере()
	
	ЭтаФорма.ТаблицаТоваровВладелецФайлов = ?(ЗначениеЗаполнено(Запись.Характеристика), Запись.Характеристика, Запись.Номенклатура );
	
	ИзображенияПараметры = Новый Структура( "УчетнаяЗаписьМаркетплейса, Упаковка", Запись.УчетнаяЗаписьМаркетплейса, Запись.Упаковка );
	Изображения = ИнтеграцияСМаркетплейсомOzonСервер.НоменклатураИзображенияПолучить( ЭтаФорма.ТаблицаТоваровВладелецФайлов, Истина, ИзображенияПараметры );
	Если Изображения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Изображения.Колонки.Добавить( "КартинкаАдрес", Новый ОписаниеТипов( "Строка" ) );
	Для Каждого ИзображенияСтрока Из Изображения Цикл
		ТаблицаФайловСтрокаДозаполнить( ИзображенияСтрока );
	КонецЦикла;
	
	ТаблицаФайлов.Загрузить(Изображения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловОбновить()

	ЭтаФорма.Элементы.ТаблицаФайловВладелец.Видимость = ЗначениеЗаполнено( Запись.Характеристика );

	ТаблицаФайловОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "СтраницаИзображения" Тогда
		ТаблицаФайловОбновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСортировкаФайловНаСайте(Команда)

	Если Модифицированность Тогда
		Текст = НСтр("ru = 'Необходимо записать изменения.'");
		ПоказатьОповещениеПользователя(Текст,,, БиблиотекаКартинок.ЛоготипOzon1);
		Возврат;
 	КонецЕсли;
 	
	Если Не ЗначениеЗаполнено( Запись.Номенклатура ) Тогда
		Текст = НСтр("ru = 'Номенклатура не заполнена'");
		ПоказатьОповещениеПользователя(Текст,,, БиблиотекаКартинок.ЛоготипOzon1);
		Возврат;
	КонецЕсли;

	ВладелецФайлов = ?(ЗначениеЗаполнено(Запись.Характеристика), Запись.Характеристика, Запись.Номенклатура );
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ВладелецФайлов" , ВладелецФайлов);
	ПараметрыОткрытияФормы.Вставить("Номенклатура" , Запись.Номенклатура);
	ПараметрыОткрытияФормы.Вставить("ХарактеристикаНоменклатуры" , Запись.Характеристика);
	ОткрытьФорму("РегистрСведений.СортировкаФайловДляСайта.Форма.ФормаНастройки" , ПараметрыОткрытияФормы , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеТовараМаркетплейсаПриИзменении(Элемент)
	Запись.ПредставлениеОбъектаМаркетплейса = Запись.НаименованиеОбъектаМаркетплейса;
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОбновитьКатегориюПоСоответствию(Команда)
	Если Не ЗначениеЗаполнено( Запись.Номенклатура ) Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Запись.Характеристика) Тогда
		ХарактеристикаПриИзменении(Неопределено);
	Иначе
		НоменклатураПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры
