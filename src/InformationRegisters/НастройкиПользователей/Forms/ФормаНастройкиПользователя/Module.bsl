#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	НастройкиПоОрганизации.ЗагрузитьЗначения(ПланыВидовХарактеристик.НастройкиПользователей.НастройкиПоОрганизациям());

	Если Параметры.Свойство("СтрокаПоиска") Тогда
		ВведеннаяСтрокаПоиска = Параметры.СтрокаПоиска;
		СтрокаПоиска = Параметры.СтрокаПоиска;
	Иначе
		СтрокаПоиска = Неопределено;
	КонецЕсли;
	
	Если Параметры.Свойство("Пользователь") Тогда
		Пользователь = Параметры.Пользователь;
	Иначе
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;		
		
	Если ЗначениеЗаполнено(Пользователь) Тогда
		
		ЗаполнитьДерево(СтрокаПоиска);
		
		Если ИспользоватьНесколькоОрганизаций Тогда
			ЗаполнитьДеревоПоОрганизациям(СтрокаПоиска);
			Элементы.ГруппаОрганизации.Видимость = Истина;
		Иначе
			Элементы.ГруппаОбщие.ОтображатьЗаголовок = Ложь;
			Элементы.ГруппаОрганизации.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		ОбновитьНастройки();
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии() 

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДеревоНастроекПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено ИЛИ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = 
		ПредопределенноеЗначение("ПланВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделение") Тогда
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", 
			ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение")));
		Элементы.ДеревоНастроекЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);;
		
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = 
		ПредопределенноеЗначение("ПланВидовХарактеристик.НастройкиПользователей.ОсновнойСклад") Тогда
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет"));
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", Новый ФиксированныйМассив(НовыйМассив));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		Элементы.ДеревоНастроекЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = 
		ПредопределенноеЗначение("ПланВидовХарактеристик.НастройкиПользователей.ОсновнаяГруппаСкладов") Тогда
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", 
			ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов")));
		Элементы.ДеревоНастроекЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = 
		ПредопределенноеЗначение("ПланВидовХарактеристик.НастройкиПользователей.НоменклатураДоставки") Тогда
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", 
			ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ЭтоНабор", Ложь));
		Элементы.ДеревоНастроекЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Настройка) Тогда
		Если ТекущиеДанные.Настройка = 
			ПредопределенноеЗначение("ПланВидовХарактеристик.НастройкиПользователей.ОсновнаяГруппаСкладов") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СтруктураОтбора = Новый Структура("ТипСтруктурнойЕдиницы", 
				ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов"));
			
			ПараметрыОткрытия = Новый Структура("Отбор, РежимВыбора", СтруктураОтбора, Истина);
			ОткрытьФорму("Справочник.СтруктурныеЕдиницы.ФормаВыбора",ПараметрыОткрытия, Элемент, , , , ,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
		
		Если ТекущиеДанные.Настройка = 
			ПредопределенноеЗначение("ПланВидовХарактеристик.НастройкиПользователей.ОсновнаяКассаККМ") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СтруктураОтбора = Новый Структура("ТипКассы", 
				ПредопределенноеЗначение("Перечисление.ТипыКассККМ.ФискальныйРегистратор"));
			
			ПараметрыОткрытия = Новый Структура("Отбор, РежимВыбора", СтруктураОтбора, Истина);
			ОткрытьФорму("Справочник.КассыККМ.ФормаВыбора",ПараметрыОткрытия, Элемент, , , , ,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Настройка) Тогда	
		
		Если НастройкиПоОрганизации.НайтиПоЗначению(ТекущиеДанные.Настройка) <> Неопределено Тогда
			ТекущиеДанные.Организация = Организация;
		КонецЕсли;
		
		Если ТекущиеДанные.Настройка =
			ПредопределенноеЗначение("ПланВидовХарактеристик.НастройкиПользователей.СбрасыватьКоличествоПриИзмененииНоменклатуры") Тогда
			
			ЗаписатьСтатистикуНастройки("РегистрСведений.НастройкиПользователей.СбрасыватьКоличествоПриИзмененииНоменклатуры.",
				ТекущиеДанные.Значение)
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПоОрганизацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНастроекПоОрганизации.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Настройка) Тогда	
		
		Если НастройкиПоОрганизации.НайтиПоЗначению(ТекущиеДанные.Настройка) <> Неопределено Тогда
			ТекущиеДанные.Организация = Организация;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОбновитьНастройки();
	ЗаполнитьДеревоПоОрганизациям();
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоНастроекПоОрганизации");
	
КонецПроцедуры

&НаКлиенте
Процедура ВведеннаяСтрокаПоискаПриИзменении(Элемент)
	
	СтрокаПоиска = ВведеннаяСтрокаПоиска;
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		СтрокаПоиска = Неопределено;
	КонецЕсли;
		
	ЗаполнитьДеревьяНастроек(СтрокаПоиска);
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоНастроек");
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоНастроекПоОрганизации");	
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДеревьяНастроек(СтрокаПоиска = Неопределено)
	
	ЗаполнитьДерево(СтрокаПоиска);
	
	Если ИспользоватьНесколькоОрганизаций Тогда
		
		ЗаполнитьДеревоПоОрганизациям(СтрокаПоиска);
		Элементы.ГруппаОрганизации.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаОрганизации.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет информацию в таблице настроек.
//
&НаСервере
Процедура ЗаполнитьДерево(СтрокаПоиска = Неопределено)

	НастройкиЭлементы = ДеревоНастроек.ПолучитьЭлементы();
	НастройкиЭлементы.Очистить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("НастройкиПоОрганизации", НастройкиПоОрганизации);
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Настройки.Родитель КАК Родитель,
	|	Настройки.Ссылка КАК Настройка,
	|	Настройки.ЭтоГруппа КАК ЭтоГруппа,
	|	НЕ Настройки.ЭтоГруппа КАК НомерКартинки,
	|	ЗначениеНастроек.Значение КАК Значение,
	|   ЕСТЬNULL(ЗначениеНастроек.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,	
	|	Константы.ИспользоватьНесколькоОрганизаций КАК ИспользоватьНесколькоОрганизаций,
	|	Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам КАК ФункциональнаяОпцияУчетПоНесколькимСкладам,
	|	Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям КАК ФункциональнаяОпцияУчетПоНесколькимПодразделениям
	|ИЗ
	|	ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
	|		ПО (ЗначениеНастроек.Настройка = Настройки.Ссылка)
	|			И (ЗначениеНастроек.Пользователь = &Пользователь),
	|	Константы КАК Константы
	|ГДЕ
	|	НЕ Настройки.ПометкаУдаления
	|   %ПоГруппам%
	|	И НЕ(Константы.ИспользоватьНесколькоОрганизаций И Настройки.Ссылка В (&НастройкиПоОрганизации))
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация)
	|				И НЕ Константы.ИспользоватьНесколькоОрганизаций)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновнойСклад)
	|				И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделение)
	|				И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ИспользоватьЗарплатаИсполнителейВЗаказНаряде)
	|				И НЕ Константы.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ИспользоватьЗарплатаИсполнителейВЗаказНаряде)
	|				И НЕ Константы.ФункциональнаяОпцияИспользоватьПодсистемуРаботы)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ИспользоватьМатериалыВЗаказНаряде)
	|				И НЕ Константы.ФункциональнаяОпцияИспользоватьПодсистемуРаботы)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ИспользоватьМатериалыЗаказчикаВЗаказНаряде)
	|				И НЕ Константы.ФункциональнаяОпцияИспользоватьПодсистемуРаботы)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ИспользоватьТоварыВЗаказНаряде)
	|				И НЕ Константы.ФункциональнаяОпцияИспользоватьПодсистемуРаботы)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ПоложениеВидаРаботВЗаказНаряде)
	|				И НЕ Константы.ФункциональнаяОпцияИспользоватьПодсистемуРаботы)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновнаяГруппаДоступаЛидов)
	|				И НЕ Константы.ИспользоватьПодсистемуCRM)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновнойКалендарь)
	|				И НЕ Константы.ИспользоватьКалендариСотрудников)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ПоложениеПроекта)
	|				И НЕ Константы.ФункциональнаяОпцияУчетПоПроектам)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ПоложениеВидаРаботВЗаданииНаРаботу)
	|				И НЕ Константы.ИспользоватьЗаданияНаРаботу)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ПоложениеЗаказаНаПроизводствоВДокументахОтгрузки)
	|				И НЕ Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ПоложениеЗаказаПокупателяВДокументахПроизводства)
	|				И НЕ Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ПоложениеСкладаВДокументахПроизводства)
	|				И НЕ Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство) 
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.РасчетКалькуляцииПоДаннымТЧВЗаказНаряде)
	|				И НЕ Константы.ФункциональнаяОпцияИспользоватьПодсистемуРаботы)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ПоложениеНастроекНалоговогоУчетаВБанковскихДокументах)
	|				И НЕ Константы.ФункциональнаяОпцияИспользоватьОтчетность)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.СпособЗагрузкиДанныхИзВнешнихИсточников)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ЗагрузкаДанныхИзВнешнихИсточников)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ЗначениеЗаполненияКатегорияНоменклатуры)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.УдалитьБиллинг)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.УдалитьОпросПоПодсистемеБиллингЗавершен)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ВыводитьСоветОплатаСертификатомВВалюте)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ПредложениеИспользованияСистемыВзаимодействияДляТелефонииПоказано)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ПоложениеИсполнителяВСдельномНаряде)
	|				И НЕ Константы.ФункциональнаяОпцияИспользоватьТехоперации)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ПоложениеСтруктурнойЕдиницыВСдельномНаряде)
	|				И НЕ Константы.ФункциональнаяОпцияИспользоватьТехоперации)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.НеВыводитьОтчетыПоПродажамИЦенамВКарточкеНоменклатуры))
	
	//::: ПОДБОР
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ВыводитьСоветВернутьсяКНоменклатуре)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ВыводитьСоветИспользоватьПредыдущийПодбор)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ВыводитьСоветУслугиВПриходныхДокументах)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ГруппаОтбора)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ЗапоминатьТекущуюИерархию)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ЗапрашиватьКоличество)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ЗапрашиватьКоличествоИЦену)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ЗапрашиватьЦену)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновнойВидОтбора)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ПоказыватьОстатки)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ПоказыватьРезерв)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ПоказыватьСвободныйОстаток)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ПоказыватьЦены)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.СпособВыводаОстатков)
	
	//::: ЦЕНЫ
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ВыводитьВопросСозданииПервогоПрайсЛистаКонтрагента)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ВыводитьВопросСозданииПервогоПрайсЛистаОрганизации)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.УдалитьАвтоматическиФормироватьОбновлятьПрайсЛист)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.УдалитьОсновнаяФормаПрайсЛиста)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ЗакрытьПомощникБезПодтверждения)	
	
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа ИЕРАРХИЯ,
	|	Настройки.Наименование";
	
	Если СтрокаПоиска = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоГруппам%", "");
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоГруппам%", "И НЕ Настройки.ЭтоГруппа");
		Выборка = Запрос.Выполнить().Выбрать();
	КонецЕсли;
	
	ДобавитьСтрокиВДерево(Выборка, НастройкиЭлементы, СтрокаПоиска);
	
КонецПроцедуры // ЗаполнитьДерево()

// Процедура обновляет информацию в таблице настроек по организации.
//
&НаСервере
Процедура ЗаполнитьДеревоПоОрганизациям(СтрокаПоиска = Неопределено)
	
	НастройкиЭлементы = ДеревоНастроекПоОрганизации.ПолучитьЭлементы();
	НастройкиЭлементы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("НастройкиПоОрганизации", НастройкиПоОрганизации);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.Родитель КАК Родитель,
	|	Настройки.Ссылка КАК Настройка,
	|	Настройки.ЭтоГруппа КАК ЭтоГруппа,
	|	НЕ Настройки.ЭтоГруппа КАК НомерКартинки,
	|	ЗначениеНастроек.Значение КАК Значение,
	|   ЕСТЬNULL(ЗначениеНастроек.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация
	|ИЗ
	|	ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
	|		ПО (ЗначениеНастроек.Настройка = Настройки.Ссылка)
	|			И (ЗначениеНастроек.Пользователь = &Пользователь)
	|			И (ЗначениеНастроек.Организация = &Организация)
	|ГДЕ
	|	НЕ Настройки.ПометкаУдаления
	|   И Настройки.Ссылка В (&НастройкиПоОрганизации)
	|   %ПоГруппам%
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа ИЕРАРХИЯ,
	|	Настройки.Наименование";
	
	Если СтрокаПоиска = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоГруппам%", "");
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоГруппам%", "И НЕ Настройки.ЭтоГруппа");
		Выборка = Запрос.Выполнить().Выбрать();
	КонецЕсли;
	
	ДобавитьСтрокиВДерево(Выборка, НастройкиЭлементы, СтрокаПоиска);
	
КонецПроцедуры // ЗаполнитьДеревоПоОрганизациям()

// По переданным данным создаем дерево строк на форме
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - выборка запроса с данными в иерархии
//  Дерево - ДанныеФормыКоллекцияЭлементовДерева - элементы дерева значения, для которого создаются строки
//  СтрокаПоиска - Строка
//
&НаСервере
Процедура ДобавитьСтрокиВДерево(Выборка, Дерево, СтрокаПоиска = Неопределено)
	
	Пока Выборка.Следующий() Цикл
		
		СтрокиВыборки = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Если СтрокаПоиска <> Неопределено И СтрНайти(НРег(Выборка.Настройка.Наименование), НРег(СтрокаПоиска)) = 0
			И СтрокиВыборки.Количество() = 0 Тогда
				Продолжить;
		КонецЕсли;
		
		НоваяСтрокаНастройки = Дерево.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНастройки, Выборка);
		НоваяСтрокаНастройки.Значение = Выборка.Настройка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
		
		Если СтрокиВыборки.Количество() > 0 Тогда
			
			ДобавитьСтрокиВДерево(СтрокиВыборки, НоваяСтрокаНастройки.ПолучитьЭлементы(), СтрокаПоиска);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет запись значений настроек в регистр сведений.
//
&НаСервере
Процедура ОбновитьНастройки()
	
	НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь, Истина);
	НаборЗаписей.Прочитать();
	
	ЗаписиНабора = НаборЗаписей.Выгрузить();
	
	НастройкиГруппы = ДеревоНастроек.ПолучитьЭлементы();
	ОбновитьЗаписиПоДереву(ДеревоНастроек.ПолучитьЭлементы(), ЗаписиНабора);
	
	Если ИспользоватьНесколькоОрганизаций Тогда
		ОбновитьЗаписиПоДереву(ДеревоНастроекПоОрганизации.ПолучитьЭлементы(), ЗаписиНабора);
	КонецЕсли;

	НаборЗаписей.Загрузить(ЗаписиНабора);
	НаборЗаписей.Записать();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры // ОбновитьНастройки()

&НаСервере
Процедура ОбновитьЗаписиПоДереву(НастройкиГруппы, ЗаписиНабора)
	
	Для Каждого ГруппаНастроек Из НастройкиГруппы Цикл
		
		Если НЕ ГруппаНастроек.Настройка.ЭтоГруппа Тогда
			ЗаполнитьНастройкуПоСтроке(ГруппаНастроек, ЗаписиНабора);
		Иначе		
			НастройкиЭлементы = ГруппаНастроек.ПолучитьЭлементы();
			
			Для Каждого СтрокаНастроек Из НастройкиЭлементы Цикл
				ЗаполнитьНастройкуПоСтроке(СтрокаНастроек, ЗаписиНабора);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкуПоСтроке(СтрокаНастроек, ЗаписиНабора)
	
	Отбор = Новый Структура("Настройка, Организация", СтрокаНастроек.Настройка, СтрокаНастроек.Организация);
	ЗаписиНастроекПользователя = ЗаписиНабора.НайтиСтроки(Отбор);
	
	Если ЗаписиНастроекПользователя.Количество() = 0 Тогда
		
		ЗаписьОНастройкеПользователя = ЗаписиНабора.Добавить();
		ЗаписьОНастройкеПользователя.Пользователь = Пользователь;
		ЗаписьОНастройкеПользователя.Настройка = СтрокаНастроек.Настройка;				
		ЗаписьОНастройкеПользователя.Организация = СтрокаНастроек.Организация;
		
	Иначе
		
		ЗаписьОНастройкеПользователя = ЗаписиНастроекПользователя[0];
		
	КонецЕсли;
	
	ЗаписьОНастройкеПользователя.Значение = 
		СтрокаНастроек.Настройка.ТипЗначения.ПривестиЗначение(СтрокаНастроек.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСтатистикуНастройки(Настройка, ЗначениеНастройки)
	
	Если НЕ ПустаяСтрока(ЗначениеНастройки) Тогда
		Значение = СтрЗаменить(ЗначениеНастройки, " ", "")
	Иначе
		Значение = "НеНастроено";
	КонецЕсли;
		
	ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(Настройка + Значение, 1);

КонецПроцедуры

#КонецОбласти
