#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция НайтиПоКБК(Организация, КБК, КодТерритории) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("КБК",           КБК); // Настройка может быть выполнена так, что надо искать по части КБК - без символов 14-17 (см. заполнение реквизитов в клиент-банке). Но мы этим пренебрежем для простоты. Все равно настройка настолько непонятная, что вряд ли с ней кто-то справится.
	Запрос.УстановитьПараметр("КодТерритории", КодТерритории);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Реквизиты.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Реквизиты.ВидПлатежа КАК ВидПлатежа,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПоказательТипа КАК ПоказательТипа,
	|	1 КАК Приоритет,
	|	Реквизиты.КодТерритории КАК КодТерритории
	|ПОМЕСТИТЬ ПодходящиеКлючи
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК Реквизиты
	|ГДЕ
	|	Реквизиты.ВидПлатежа.КодБК = &КБК
	|	И Реквизиты.Организация = &Организация
	|	И (Реквизиты.РегистрацияВНалоговомОргане.КодПоОКАТО = &КодТерритории
	|			ИЛИ Реквизиты.РегистрацияВНалоговомОргане.КодПоОКТМО = &КодТерритории)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	Реквизиты.РегистрацияВНалоговомОргане,
	|	Реквизиты.ВидПлатежа,
	|	Реквизиты.Организация,
	|	Реквизиты.ПоказательТипа,
	|	2,
	|	NULL
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК Реквизиты
	|ГДЕ
	|	Реквизиты.ВидПлатежа.КодБК = &КБК
	|	И Реквизиты.Организация = &Организация
	|	И Реквизиты.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	Реквизиты.РегистрацияВНалоговомОргане,
	|	Реквизиты.ВидПлатежа,
	|	Реквизиты.Организация,
	|	Реквизиты.ПоказательТипа,
	|	3,
	|	NULL
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК Реквизиты
	|ГДЕ
	|	Реквизиты.ВидПлатежа.КодБК = &КБК
	|	И Реквизиты.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И Реквизиты.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ПодходящиеКлючи.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ МинимальныйПриоритет
	|ИЗ
	|	ПодходящиеКлючи КАК ПодходящиеКлючи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.ПоказательТипа КАК ПоказательТипа,
	|	Реквизиты.ВидПлатежа КАК Налог,
	|	Реквизиты.ВидПлатежа.СчетУчета КАК СчетУчета,
	|	Реквизиты.Получатель КАК Получатель,
	|	Реквизиты.СчетПолучателя КАК СчетПолучателя,
	|	Реквизиты.ВидПеречисленияВБюджет КАК ВидПеречисленияВБюджет,
	|	Реквизиты.СтатусСоставителя КАК СтатусСоставителя,
	|	Реквизиты.ОчередностьПлатежа КАК ОчередностьПлатежа,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Реквизиты.ПоказательОснования КАК ПоказательОснования,
	|	Реквизиты.ПоказательПериода КАК ПоказательПериода,
	|	ЕСТЬNULL(Реквизиты.РегистрацияВНалоговомОргане.КодПоОКТМО, """") КАК РегистрацияВНалоговомОрганеКодПоОКТМО,
	|	Реквизиты.КодТерритории КАК КодТерритории
	|ИЗ
	|	ПодходящиеКлючи КАК ПодходящиеКлючи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйПриоритет КАК МинимальныйПриоритет
	|		ПО ПодходящиеКлючи.Приоритет = МинимальныйПриоритет.Приоритет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК Реквизиты
	|		ПО ПодходящиеКлючи.РегистрацияВНалоговомОргане = Реквизиты.РегистрацияВНалоговомОргане
	|			И ПодходящиеКлючи.ВидПлатежа = Реквизиты.ВидПлатежа
	|			И ПодходящиеКлючи.Организация = Реквизиты.Организация
	|			И ПодходящиеКлючи.ПоказательТипа = Реквизиты.ПоказательТипа";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() <> 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("СчетУчета");
		Реквизиты.Вставить("Налог");
		Реквизиты.Вставить("ВидПеречисленияВБюджет");
		Реквизиты.Вставить("ПоказательТипа");
		Реквизиты.Вставить("Получатель");
		Реквизиты.Вставить("СчетПолучателя");
		Реквизиты.Вставить("СтатусСоставителя");
		Реквизиты.Вставить("ОчередностьПлатежа");
		Реквизиты.Вставить("НазначениеПлатежа");
		Реквизиты.Вставить("СтатьяДвиженияДенежныхСредств");
		Реквизиты.Вставить("ПоказательОснования");
		Реквизиты.Вставить("ПоказательПериода");
		
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
		
		ПравилаЗаполнения = ПлатежиВБюджетНастройки.ПравилаЗаполненияРеквизитовПлатежа(Реквизиты.Налог);
		Если ПравилаЗаполнения.СохранятьКодТерриторииПриЗаписи Тогда
			Если ЗначениеЗаполнено(Выборка.КодТерритории) И ЗначениеЗаполнено(КодТерритории)
				И СокрЛП(Выборка.КодТерритории) <> КодТерритории Тогда
				// Реквизиты платежа для другой территории не подходят
				Возврат Неопределено;
			ИначеЕсли ЗначениеЗаполнено(Выборка.РегистрацияВНалоговомОрганеКодПоОКТМО) И ЗначениеЗаполнено(КодТерритории)
				И СокрЛП(Выборка.РегистрацияВНалоговомОрганеКодПоОКТМО) <> КодТерритории Тогда
				// Реквизиты платежа для другой территории не подходят
				Возврат Неопределено;
			Иначе
				Реквизиты.Вставить("КодОКАТО", Выборка.КодТерритории);
			КонецЕсли;
		КонецЕсли;
		
		ПлатежиВБюджетКлиентСервер.ИсправитьСтатусСоставителя(ТекущаяДатаСеанса(), Реквизиты.СтатусСоставителя);
		
		Возврат Реквизиты;
		
	КонецЕсли;
	
КонецФункции

Функция НайтиПоРеквизитамПлатежа(КБК, Организация, Контрагент) Экспорт
	
	Результат = Новый Структура; // Если не нашли, то вернем Неопределено
	Результат.Вставить("Налог",                         Справочники.ВидыНалогов.ПустаяСсылка());
	Результат.Вставить("СтатьяДвиженияДенежныхСредств", Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	
	Если Не ПлатежиВБюджетКлиентСервер.КБКЗадан(КБК) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Ищем по всем значениям КодПодвидаДоходов
	ГраницыПеременнойЧастиКБК = ПлатежиВБюджетКлиентСервер.РасположениеЭлементаКБК("КодПодвидаДоходов");
	ШаблонКБК = Лев(КБК, ГраницыПеременнойЧастиКБК.Начало - 1)
		+ СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", ГраницыПеременнойЧастиКБК.Длина)
		+ Сред(КБК, ГраницыПеременнойЧастиКБК.Начало + ГраницыПеременнойЧастиКБК.Длина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ШаблонКБК",   ШаблонКБК);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Настройки.ВидПлатежа КАК Налог,
	|	Настройки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Настройки.ВидПлатежа.КодБК КАК КБК,
	|	Настройки.Организация КАК Организация,
	|	Настройки.Получатель КАК Контрагент
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК Настройки
	|ГДЕ
	|	Настройки.ВидПлатежа.КодБК ПОДОБНО &ШаблонКБК
	|	И Настройки.ВидПлатежа.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)
	|	И (Настройки.Организация = &Организация
	|			ИЛИ Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Налог,
	|	СтатьяДвиженияДенежныхСредств";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Выберем лучший
	МаксимальныйПриоритет = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Приоритет = 1; // За соответствие шаблону
		
		Если Выборка.Контрагент = Контрагент Тогда
			Приоритет = Приоритет + 2;
		КонецЕсли;
		
		Если Выборка.Организация = Организация Тогда
			Приоритет = Приоритет + 4;
		КонецЕсли;
		
		Если Выборка.КБК = КБК Тогда
			Приоритет = Приоритет + 8;
		КонецЕсли;
		
		Если Приоритет > МаксимальныйПриоритет Тогда
			МаксимальныйПриоритет = Приоритет;
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли
