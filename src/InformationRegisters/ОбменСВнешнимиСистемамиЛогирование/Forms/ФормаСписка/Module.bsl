#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.Параметры.Свойство( "УчетнаяЗапись" ) 
	И ЗначениеЗаполнено( ЭтаФорма.Параметры.УчетнаяЗапись ) 
	Тогда
		ЭтаФорма.УчетнаяЗаписьОтбор = ЭтаФорма.Параметры.УчетнаяЗапись;
	КонецЕсли;

	УчетнаяЗаписьОтборПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Функция ЛогированиеВключеноПолучить()
	Возврат ОбменСВнешнимиСистемамиЛогирование.ЛогированиеВключено( ЭтаФорма.УчетнаяЗаписьОтбор );
КонецФункции

&НаСервереБезКонтекста
Процедура ОбменСВнешнимиСистемамиЛогированиеВключеноПриИзмененииСервер( УчетнаяЗапись, Значение )
	ОбменСВнешнимиСистемамиЛогирование.ЛогированиеВключеноЗначениеУстановить( УчетнаяЗапись, Значение );
КонецПроцедуры

&НаКлиенте
Процедура ОбменСВнешнимиСистемамиЛогированиеВключеноПриИзменении(Элемент)
	ОбменСВнешнимиСистемамиЛогированиеВключеноПриИзмененииСервер( ЭтаФорма.УчетнаяЗаписьОтбор, ЭтаФорма.ЛогированиеВключено );
	Оповестить( "ЛогНастройкиИзменены", , ЭтаФорма );
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЛогОчиститьНаСервере( УчетнаяЗапись )
	Результат = ОбменСВнешнимиСистемамиЛогирование.ЛогОчистить( УчетнаяЗапись );
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура КнопкаЛогОчиститьПослеВопроса( ОтветПользователя, ПараметрыОтвета ) Экспорт

	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ЛогОчиститьНаСервере( ЭтаФорма.УчетнаяЗаписьОтбор );
	
	Если Результат = Истина Тогда
		Состояние( НСтр("ru = 'Записи лога удалены.'"), , НСтр("ru = 'Очистка лога'") );
	Иначе
		Состояние( НСтр("ru = 'Ошибка при удалении.'"), , НСтр("ru = 'Очистка лога'") );
	КонецЕсли;
	
	ЭтаФорма.Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЛогОчистить(Команда)
	ВопросОповещение = Новый ОписаниеОповещения( "КнопкаЛогОчиститьПослеВопроса", ЭтаФорма );
	ПоказатьВопрос( ВопросОповещение, НСтр("ru = 'Удалить все записи лога для учетной записи """ + ЭтаФорма.УчетнаяЗаписьОтбор + """?'"), РежимДиалогаВопрос.ДаНетОтмена, , , НСтр("ru = 'Очистка лога'") );
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ДанныеСсылка" Тогда
		ДанныеСсылка = Элементы.Список.ТекущиеДанные.ДанныеСсылка;
		Если ЗначениеЗаполнено( ДанныеСсылка ) Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьЗначение( , ДанныеСсылка );
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УчетнаяЗаписьОтборУстановить()
	ЭтаФорма.Список.Отбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено( ЭтаФорма.УчетнаяЗаписьОтбор ) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтаФорма.Список, "УчетнаяЗапись",
				ЭтаФорма.УчетнаяЗаписьОтбор, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УчетнаяЗаписьОтборПриИзмененииСервер()
	
	ЭтаФорма.ЛогированиеВключено = ЛогированиеВключеноПолучить();
	
	УчетнаяЗаписьОтборУстановить();
				
	ЭтаФорма.Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьОтборПриИзменении(Элемент)
	УчетнаяЗаписьОтборПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЛогНастройкиОткрыть(Команда)
	ОткрытьФорму( "РегистрСведений.ОбменСВнешнимиСистемамиЛогированиеНастройки.ФормаСписка" );
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЛогНастройкиИзменены" Тогда
		ЭтаФорма.ЛогированиеВключено = ЛогированиеВключеноПолучить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти